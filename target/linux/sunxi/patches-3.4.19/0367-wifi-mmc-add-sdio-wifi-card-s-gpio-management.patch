From 11157c7e78e96d408d8fff218a813cbd1ae4584d Mon Sep 17 00:00:00 2001
From: yemao <leafy.myeh@allwinnertech.com>
Date: Wed, 23 Nov 2011 20:36:09 +0800
Subject: [PATCH 367/944] wifi: mmc: add sdio wifi card's gpio management

---
 drivers/mmc/Kconfig                   |   1 +
 drivers/mmc/Makefile                  |   1 +
 drivers/mmc/mmc-pm/Kconfig            |  13 ++
 drivers/mmc/mmc-pm/Makefile           |   9 +
 drivers/mmc/mmc-pm/mmc_pm.c           | 300 ++++++++++++++++++++++++++++++++++
 drivers/mmc/mmc-pm/mmc_pm.h           |  36 ++++
 drivers/mmc/mmc-pm/mmc_pm_apm6xxx.c   |  58 +++++++
 drivers/mmc/mmc-pm/mmc_pm_hw_mw269x.c | 137 ++++++++++++++++
 drivers/mmc/mmc-pm/mmc_pm_swb_b23.c   | 116 +++++++++++++
 drivers/mmc/mmc-pm/mmc_pm_swl_n20.c   |  89 ++++++++++
 drivers/mmc/mmc-pm/mmc_pm_usi_bm01a.c | 131 +++++++++++++++
 11 files changed, 891 insertions(+)
 create mode 100644 drivers/mmc/mmc-pm/Kconfig
 create mode 100644 drivers/mmc/mmc-pm/Makefile
 create mode 100644 drivers/mmc/mmc-pm/mmc_pm.c
 create mode 100644 drivers/mmc/mmc-pm/mmc_pm.h
 create mode 100644 drivers/mmc/mmc-pm/mmc_pm_apm6xxx.c
 create mode 100644 drivers/mmc/mmc-pm/mmc_pm_hw_mw269x.c
 create mode 100644 drivers/mmc/mmc-pm/mmc_pm_swb_b23.c
 create mode 100644 drivers/mmc/mmc-pm/mmc_pm_swl_n20.c
 create mode 100644 drivers/mmc/mmc-pm/mmc_pm_usi_bm01a.c

diff --git a/drivers/mmc/Kconfig b/drivers/mmc/Kconfig
index 3e11627..608a78e 100644
--- a/drivers/mmc/Kconfig
+++ b/drivers/mmc/Kconfig
@@ -26,6 +26,7 @@ source "drivers/mmc/core/Kconfig"
 source "drivers/mmc/card/Kconfig"
 
 #source "drivers/mmc/host/Kconfig"
+source "drivers/mmc/mmc-pm/Kconfig"
 source "drivers/mmc/sunxi-host/Kconfig"
 
 endif # MMC
diff --git a/drivers/mmc/Makefile b/drivers/mmc/Makefile
index ffd48ac..5be478e 100644
--- a/drivers/mmc/Makefile
+++ b/drivers/mmc/Makefile
@@ -7,4 +7,5 @@ subdir-ccflags-$(CONFIG_MMC_DEBUG) := -DDEBUG
 obj-$(CONFIG_MMC)		+= core/
 obj-$(CONFIG_MMC)		+= card/
 obj-$(subst m,y,$(CONFIG_MMC))	+= host/
+obj-$(CONFIG_MMC)		+= mmc-pm/
 obj-$(CONFIG_MMC)		+= sunxi-host/
diff --git a/drivers/mmc/mmc-pm/Kconfig b/drivers/mmc/mmc-pm/Kconfig
new file mode 100644
index 0000000..4a1a2a4
--- /dev/null
+++ b/drivers/mmc/mmc-pm/Kconfig
@@ -0,0 +1,13 @@
+#
+# MMC/SD host controller drivers
+#
+
+comment "MMC/SD/SDIO Card Power Management Drivers"
+
+config MMC_SUNXI_POWER_CONTROL
+	tristate "SUNXI Card Power Management support"
+	depends on MMC_SUNXI
+	help
+	  This selects Allwinner MMC Card Power Management support.  
+	  All power relative gpio control here.
+	  
\ No newline at end of file
diff --git a/drivers/mmc/mmc-pm/Makefile b/drivers/mmc/mmc-pm/Makefile
new file mode 100644
index 0000000..ea52417
--- /dev/null
+++ b/drivers/mmc/mmc-pm/Makefile
@@ -0,0 +1,9 @@
+
+#
+# Makefile for MMC/SD host controller drivers
+#
+
+obj-$(CONFIG_MMC_SUNXI_POWER_CONTROL)    += mmc_power.o
+
+mmc_power-y := mmc_pm.o mmc_pm_swl_n20.o mmc_pm_usi_bm01a.o \
+                mmc_pm_apm6xxx.o mmc_pm_swb_b23.o mmc_pm_hw_mw269x.o
diff --git a/drivers/mmc/mmc-pm/mmc_pm.c b/drivers/mmc/mmc-pm/mmc_pm.c
new file mode 100644
index 0000000..c5e89cd
--- /dev/null
+++ b/drivers/mmc/mmc-pm/mmc_pm.c
@@ -0,0 +1,300 @@
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/init.h>
+#include <mach/sys_config.h>
+#include <linux/proc_fs.h>
+#include "mmc_pm.h"
+
+#define mmc_pm_msg(...)    do {printk("[mmc_pm]: "__VA_ARGS__);} while(0)
+
+
+struct mmc_pm_ops mmc_card_pm_ops;
+static char* wifi_para = "sdio_wifi_para";
+static char* wifi_mod[] = {" ", "swl-n20", "usi-bm01a", "ar6302qfn", "apm6xxx", "swb-b23"};
+
+int mmc_pm_get_mod_type(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    if (ops->sdio_card_used)
+        return ops->module_sel;
+    else {
+        mmc_pm_msg("No sdio card, please check your config !!\n");
+        return 0;
+    }
+}
+EXPORT_SYMBOL(mmc_pm_get_mod_type);
+
+int mmc_pm_gpio_ctrl(char* name, int level)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    if (ops->sdio_card_used)
+        return ops->gpio_ctrl(name, level);
+    else {
+        mmc_pm_msg("No sdio card, please check your config !!\n");
+        return -1;
+    }
+}
+EXPORT_SYMBOL(mmc_pm_gpio_ctrl);
+
+int mmc_pm_get_io_val(char* name)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    if (ops->sdio_card_used)
+        return ops->get_io_val(name);
+    else {
+        mmc_pm_msg("No sdio card, please check your config !!\n");
+        return -1;
+    }
+}
+EXPORT_SYMBOL(mmc_pm_get_io_val);
+
+void mmc_pm_power(int mode, int* updown)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    if (ops->sdio_card_used && ops->power)
+        return ops->power(mode, updown);
+    else {
+        mmc_pm_msg("No sdio card, please check your config !!\n");
+        return;
+    }
+}
+EXPORT_SYMBOL(mmc_pm_power);
+
+int mmc_pm_io_shd_suspend_host(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    return (ops->module_sel!=2) && (ops->module_sel!=5) && (ops->module_sel!=6);
+}
+EXPORT_SYMBOL(mmc_pm_io_shd_suspend_host);
+
+#ifdef CONFIG_PROC_FS
+static int mmc_pm_power_stat(char *page, char **start, off_t off, int count, int *eof, void *data)
+{
+    struct mmc_pm_ops *ops = (struct mmc_pm_ops *)data;
+    char *p = page;
+    int power = 0;
+    
+    if (ops->power)
+        ops->power(0, &power);
+    p += sprintf(p, "%s : power state %s\n", ops->mod_name, power ? "on" : "off");
+    return p - page;
+}
+
+static int mmc_pm_power_ctrl(struct file *file, const char __user *buffer, unsigned long count, void *data)
+{
+    struct mmc_pm_ops *ops = (struct mmc_pm_ops *)data;
+    int power = simple_strtoul(buffer, NULL, 10);
+    
+    power = power ? 1 : 0;
+    if (ops->power)
+        ops->power(1, &power);
+    else
+        mmc_pm_msg("No power control for %s\n", ops->mod_name);
+    return sizeof(power);
+}
+
+static inline void awsmc_procfs_attach(void)
+{
+    char proc_rootname[] = "driver/mmc-pm";
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+
+    ops->proc_root = proc_mkdir(proc_rootname, NULL);
+    if (IS_ERR(ops->proc_root))
+    {
+        mmc_pm_msg("failed to create procfs \"driver/mmc-pm\".\n");
+    }
+
+    ops->proc_power = create_proc_entry("power", 0644, ops->proc_root);
+    if (IS_ERR(ops->proc_power))
+    {
+        mmc_pm_msg("failed to create procfs \"power\".\n");
+    }
+    ops->proc_power->data = ops;
+    ops->proc_power->read_proc = mmc_pm_power_stat;
+    ops->proc_power->write_proc = mmc_pm_power_ctrl;
+}
+
+static inline void awsmc_procfs_remove(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char proc_rootname[] = "driver/mmc-pm";
+    
+    remove_proc_entry("power", ops->proc_root);
+    remove_proc_entry(proc_rootname, NULL);
+}
+#else
+static inline void awsmc_procfs_attach(void) {}
+static inline void awsmc_procfs_remove(void) {}
+#endif
+
+static int mmc_pm_get_res(void)
+{
+    int ret = 0;
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    ret = script_parser_fetch(wifi_para, "sdio_wifi_used", &ops->sdio_card_used, sizeof(unsigned)); 
+    if (ret) {
+        mmc_pm_msg("failed to fetch sdio card configuration!\n");
+        return -1;
+    }
+    if (!ops->sdio_card_used) {
+        mmc_pm_msg("no sdio card used in configuration\n");
+        return -1;
+    }
+    
+    ret = script_parser_fetch(wifi_para, "sdio_wifi_sdc_id", &ops->sdio_cardid, sizeof(unsigned));
+    if (ret) {
+        mmc_pm_msg("failed to fetch sdio card's sdcid\n");
+        return -1;
+    }
+
+    ret = script_parser_fetch(wifi_para, "sdio_wifi_mod_sel", &ops->module_sel, sizeof(unsigned));
+    if (ret) {
+        mmc_pm_msg("failed to fetch sdio module select\n");
+        return -1;
+    }
+    ops->mod_name = wifi_mod[ops->module_sel];
+    printk("[wifi]: Select sdio wifi: %s !!\n", wifi_mod[ops->module_sel]);
+    
+    ops->pio_hdle = gpio_request_ex(wifi_para, NULL);
+    if (!ops->pio_hdle) {
+        mmc_pm_msg("failed to fetch sdio card's io handler, please check it !!\n");
+        return -1;
+    }
+    
+    return 0;
+}
+
+static int __devinit mmc_pm_probe(struct platform_device *pdev)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    switch (ops->module_sel) {
+        case 1: /* nano wifi */
+            nano_wifi_gpio_init();
+            break;
+        case 2: /* usi bm01a */
+            usi_bm01a_gpio_init();
+            break;
+        case 3: /* ar6302qfn */
+            //ar6302qfn_gpio_init();
+            break;
+        case 4: /* apm 6xxx */
+            apm_6xxx_gpio_init();
+            break;
+        case 5: /* swb b23 */
+            swbb23_gpio_init();
+            break;
+        case 6: /* huawei mw269x */
+            hwmw269_gpio_init();
+            break;
+        default:
+            mmc_pm_msg("Wrong sdio module select %d !!\n", ops->module_sel);
+    }
+    
+    awsmc_procfs_attach();
+    mmc_pm_msg("SDIO card gpio init is OK !!\n");
+    return 0;
+}
+
+static int __devexit mmc_pm_remove(struct platform_device *pdev)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    switch (ops->module_sel) {
+        case 1: /* nano wifi */
+            nano_wifi_gpio_init();
+            break;
+        case 2: /* usi bm01a */
+            usi_bm01a_gpio_init();
+            break;
+        case 3: /* ar6302qfn */
+            //ar6302qfn_gpio_init();
+            break;
+        case 4: /* usi bm01a */
+            apm_6xxx_gpio_init();
+            break;
+        case 5: /* swb b23 */
+            swbb23_gpio_init();
+            break;
+        case 6: /* huawei mw269x */
+            hwmw269_gpio_init();
+            break;
+        default:
+            mmc_pm_msg("Wrong sdio module select %d !!\n", ops->module_sel);
+    }
+    
+    awsmc_procfs_remove();
+    mmc_pm_msg("SDIO card gpio is released !!\n");
+    return 0;
+}
+
+#ifdef CONFIG_PM
+static int mmc_pm_suspend(struct device *dev)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    if (ops->standby)
+        ops->standby(1);
+    return 0;
+}
+static int mmc_pm_resume(struct device *dev)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    if (ops->standby)
+        ops->standby(0);
+    return 0;
+}
+
+static struct dev_pm_ops mmc_pm_ops = {
+    .suspend	= mmc_pm_suspend,
+    .resume		= mmc_pm_resume,
+};
+#endif
+
+static struct platform_device mmc_pm_dev = {
+    .name           = "mmc_pm",
+};
+
+static struct platform_driver mmc_pm_driver = {
+    .driver.name    = "mmc_pm",
+    .driver.owner   = THIS_MODULE,
+#ifdef CONFIG_PM
+    .driver.pm	    = &mmc_pm_ops,
+#endif
+    .probe          = mmc_pm_probe,
+    .remove         = __devexit_p(mmc_pm_remove),
+};
+
+static int __init mmc_pm_init(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    memset(ops, 0, sizeof(struct mmc_pm_ops));
+    mmc_pm_get_res();
+    if (!ops->sdio_card_used)
+        return 0;
+        
+    platform_device_register(&mmc_pm_dev);
+    return platform_driver_register(&mmc_pm_driver);
+}
+
+static void __exit mmc_pm_exit(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    if (!ops->sdio_card_used)
+        return;
+        
+    if (ops->pio_hdle)
+        gpio_release(ops->pio_hdle, 2);
+    
+    memset(ops, 0, sizeof(struct mmc_pm_ops));
+    platform_driver_unregister(&mmc_pm_driver);
+}
+
+module_init(mmc_pm_init);
+module_exit(mmc_pm_exit);
+
diff --git a/drivers/mmc/mmc-pm/mmc_pm.h b/drivers/mmc/mmc-pm/mmc_pm.h
new file mode 100644
index 0000000..61aabd4
--- /dev/null
+++ b/drivers/mmc/mmc-pm/mmc_pm.h
@@ -0,0 +1,36 @@
+#ifndef MMC_PM_H
+#define MMC_PM_H
+
+#define SDIO_WIFI_POWERUP   (1)
+#define SDIO_WIFI_INSUSPEND (2)
+
+struct mmc_pm_ops {
+    char*   mod_name;
+    u32     sdio_card_used;
+    u32     sdio_cardid;
+    u32     module_sel;
+    u32     pio_hdle;
+    int     (*gpio_ctrl)(char* name, int level);
+    int     (*get_io_val)(char* name);
+    void    (*standby)(int in);
+    void    (*power)(int mode, int *updown);
+    
+#ifdef CONFIG_PROC_FS
+	struct proc_dir_entry		*proc_root;
+	struct proc_dir_entry		*proc_power;
+#endif
+};
+
+void mmc_pm_ops_register(struct mmc_pm_ops* ops);
+void mmc_pm_ops_register(struct mmc_pm_ops* ops);
+
+void nano_wifi_gpio_init(void);
+void usi_bm01a_gpio_init(void);
+void apm_6xxx_gpio_init(void);
+void swbb23_gpio_init(void);
+void hwmw269_gpio_init(void);
+
+extern struct mmc_pm_ops mmc_card_pm_ops;
+extern void sunximmc_rescan_card(unsigned id, unsigned insert);
+
+#endif
diff --git a/drivers/mmc/mmc-pm/mmc_pm_apm6xxx.c b/drivers/mmc/mmc-pm/mmc_pm_apm6xxx.c
new file mode 100644
index 0000000..01c66ff
--- /dev/null
+++ b/drivers/mmc/mmc-pm/mmc_pm_apm6xxx.c
@@ -0,0 +1,58 @@
+
+/*
+ * USI wm-bn-bm-01-5(bcm4329) sdio wifi power management API
+ * gpio define
+ * apm_6981_vcc_en         = port:PA09<1><default><default><0>
+ * apm_6981_vdd_en         = port:PA10<1><default><default><0>
+ * apm_6981_wakeup         = port:PA11<1><default><default><0>
+ * apm_6981_rst_n          = port:PA12<1><default><default><0>
+ * apm_6981_pwd_n          = port:PA13<1><default><default><0>
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <mach/sys_config.h>
+
+#include "mmc_pm.h"
+
+#define apm_msg(...)    do {printk("[apm_wifi]: "__VA_ARGS__);} while(0)
+
+static int apm_6xxx_gpio_ctrl(char* name, int level)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* gpio_cmd[5] = {"apm_6981_vcc_en", "apm_6981_vdd_en", "apm_6981_wakeup", 
+                               "apm_6981_rst_n", "apm_6981_pwd_n"};
+    int i = 0;
+    int ret = 0;
+    
+    for (i=0; i<5; i++) {
+        if (strcmp(name, gpio_cmd[i])==0)
+            break;
+    }
+    if (i==5) {
+        apm_msg("No gpio %s for APM 6XXX module\n", name);
+        return -1;
+    }
+    
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, name);
+    if (ret) {
+        apm_msg("Failed to set gpio %s to %d !\n", name, level);
+        return -1;
+    }
+    apm_msg("Set gpio %s to %d !\n", name, level);
+    return 0;
+}
+
+int apm_6xxx_get_gpio_value(char* name)
+{
+    return -1;
+}
+
+void apm_6xxx_gpio_init(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    apm_6xxx_gpio_ctrl("apm_6981_wakeup", 1);
+    apm_6xxx_gpio_ctrl("apm_6981_pwd_n", 0);
+    apm_6xxx_gpio_ctrl("apm_6981_rst_n", 0);
+    ops->gpio_ctrl = apm_6xxx_gpio_ctrl;
+    ops->get_io_val = apm_6xxx_get_gpio_value;
+}
\ No newline at end of file
diff --git a/drivers/mmc/mmc-pm/mmc_pm_hw_mw269x.c b/drivers/mmc/mmc-pm/mmc_pm_hw_mw269x.c
new file mode 100644
index 0000000..201820a
--- /dev/null
+++ b/drivers/mmc/mmc-pm/mmc_pm_hw_mw269x.c
@@ -0,0 +1,137 @@
+/*
+; 6 - huawei mw269x(v1/v2) sdio wifi gpio config
+;hw_mw269x_wl_pwr        = port:PH12<1><default><default><0>
+;hw_mw269x_wl_enb        = port:PH11<1><default><default><0>
+;hw_mw269x_wl_hostwake   = port:PH10<0><default><default><0>
+;hw_mw269x_wl_wake       = port:PH09<1><default><default><0>
+;hw_mw269x_bt_enb        = port:PB05<1><default><default><0>
+;hw_mw269x_bt_wake       = port:PI20<1><default><default><0>
+;hw_mw269x_bt_hostwake   = port:PI21<0><default><default><0>
+
+*/
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <mach/sys_config.h>
+
+#include "mmc_pm.h"
+
+#define SDIO_MODULE_NAME "HW-MW269"
+#define hw_msg(...)    do {printk("[hw-mw269]: "__VA_ARGS__);} while(0)
+static int hwmw269_wl_on = 0;
+static int hwmw269_bt_on = 0;
+
+static int hwmw269_gpio_ctrl(char* name, int level)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* gpio_cmd[5] = {"hw_mw269x_wl_pwr", "hw_mw269x_wl_enb", "hw_mw269x_wl_wake", 
+                         "hw_mw269x_bt_enb", "hw_mw269x_bt_wake"};
+    int i = 0;
+    int ret = 0;
+    
+    for (i=0; i<5; i++) {
+        if (strcmp(name, gpio_cmd[i])==0)
+            break;
+    }
+    if (i==5) {
+        hw_msg("No gpio %s for %s module\n", name, SDIO_MODULE_NAME);
+        return -1;
+    }
+    
+    hw_msg("Set GPIO %s to %d !\n", name, level);
+    if (strcmp(name, "hw_mw269x_wl_enb") == 0) {
+        if ((level && !hwmw269_bt_on)
+            || (!level && !hwmw269_bt_on)) {
+            hw_msg("%s is powered %s by wifi\n", SDIO_MODULE_NAME, level ? "up" : "down");
+            goto power_change;
+        } else {
+            if (level) {
+                hw_msg("%s is already on by bt\n", SDIO_MODULE_NAME);
+            } else {
+                hw_msg("%s should stay on because of bt\n", SDIO_MODULE_NAME);
+            }
+            goto state_change;
+        }
+    }
+    if (strcmp(name, "hw_mw269x_bt_enb") == 0) {
+        if ((level && !hwmw269_wl_on)
+            || (!level && !hwmw269_wl_on)) {
+            hw_msg("%s is powered %s by bt\n", SDIO_MODULE_NAME, level ? "up" : "down");
+            goto power_change;
+        } else {
+            if (level) {
+                hw_msg("%s is already on by wifi\n", SDIO_MODULE_NAME);
+            } else {
+                hw_msg("%s should stay on because of wifi\n", SDIO_MODULE_NAME);
+            }
+            goto state_change;
+        }
+    }
+
+gpio_state_change:
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, name);
+    if (ret) {
+        hw_msg("Failed to set gpio %s to %d !\n", name, level);
+        return -1;
+    }
+    
+    return 0;
+    
+power_change:
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, "hw_mw269x_wl_pwr");
+    if (ret) {
+        hw_msg("Failed to power off %s module!\n", SDIO_MODULE_NAME);
+        return -1;
+    }
+    
+state_change:
+    if (strcmp(name, "hw_mw269x_wl_enb")==0)
+        hwmw269_wl_on = level;
+    if (strcmp(name, "hw_mw269x_bt_enb")==0)
+        hwmw269_bt_on = level;
+    hw_msg("%s power state change: wifi %d, bt %d !!\n", SDIO_MODULE_NAME, hwmw269_wl_on, hwmw269_bt_on);
+    
+    goto gpio_state_change;
+}
+
+static int hwmw269_get_gpio_value(char* name)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    if (strcmp(name, "hw_mw269x_wl_hostwake") || strcmp(name, "hw_mw269x_bt_hostwake")) {
+        hw_msg("No gpio %s for %s\n", name, SDIO_MODULE_NAME);
+        return -1;
+    }
+    
+    return gpio_read_one_pin_value(ops->pio_hdle, name);
+}
+
+void hwmw269_power(int mode, int* updown)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    
+    if (mode) {
+        if (*updown) {
+            hw_msg("power up module %s\n", ops->mod_name);
+        } else {
+            hw_msg("power down module %s\n", ops->mod_name);
+        }
+    } else {
+        if (hwmw269_wl_on || hwmw269_bt_on)
+            *updown = 1;
+        else
+            *updown = 0;
+    }
+    return;
+}
+void hwmw269_gpio_init(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    hwmw269_wl_on = 0;
+    hwmw269_bt_on = 0;
+    ops->gpio_ctrl = hwmw269_gpio_ctrl;
+    ops->get_io_val = hwmw269_get_gpio_value;
+    ops->power = hwmw269_power;
+}
+
+#undef SDIO_MODULE_NAME
diff --git a/drivers/mmc/mmc-pm/mmc_pm_swb_b23.c b/drivers/mmc/mmc-pm/mmc_pm_swb_b23.c
new file mode 100644
index 0000000..f6ac142
--- /dev/null
+++ b/drivers/mmc/mmc-pm/mmc_pm_swb_b23.c
@@ -0,0 +1,116 @@
+
+/*
+ * USI wm-bn-bm-01-5(bcm4329) sdio wifi power management API
+ * gpio define                                 
+ * swbb23_wl_pwr           = port:PH12<1><default><default><0>
+ * swbb23_wl_shdn          = port:PH09<1><default><default><0>
+ * swbb23_wl_wake          = port:PB10<1><default><default><0>
+ * swbb23_bt_shdn          = port:PB05<1><default><default><0>
+ * swbb23_bt_wake          = port:PI20<1><default><default><0>
+ * swbb23_bt_hostwake      = port:PI21<0><default><default><0>
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <mach/sys_config.h>
+
+#include "mmc_pm.h"
+
+#define swb_msg(...)    do {printk("[swbb23]: "__VA_ARGS__);} while(0)
+static int swbb23_wl_on = 0;
+static int swbb23_bt_on = 0;
+
+static int swbb23_gpio_ctrl(char* name, int level)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* gpio_cmd[5] = {"swbb23_wl_shdn", "swbb23_wl_wake", "swbb23_bt_shdn", 
+                               "swbb23_bt_wake", "swbb23_bt_hostwake"};
+    int i = 0;
+    int ret = 0;
+    
+    for (i=0; i<5; i++) {
+        if (strcmp(name, gpio_cmd[i])==0)
+            break;
+    }
+    if (i==5) {
+        swb_msg("No gpio %s for SWB-B23 module\n", name);
+        return -1;
+    }
+    
+//    swb_msg("Set GPIO %s to %d !\n", name, level);
+    if (strcmp(name, "swbb23_wl_shdn") == 0) {
+        if ((level && !swbb23_bt_on)
+            || (!level && !swbb23_bt_on)) {
+            swb_msg("SWB-B23 is powered %s by wifi\n", level ? "up" : "down");
+            goto power_change;
+        } else {
+            if (level) {
+                swb_msg("SWB-B23 is already on by bt\n");
+            } else {
+                swb_msg("SWB-B23 should stay on because of bt\n");
+            }
+            goto state_change;
+        }
+    }
+    if (strcmp(name, "swbb23_bt_shdn") == 0) {
+        if ((level && !swbb23_wl_on)
+            || (!level && !swbb23_wl_on)) {
+            swb_msg("SWB-B23 is powered %s by bt\n", level ? "up" : "down");
+            goto power_change;
+        } else {
+            if (level) {
+                swb_msg("SWB-B23 is already on by wifi\n");
+            } else {
+                swb_msg("SWB-B23 should stay on because of wifi\n");
+            }
+            goto state_change;
+        }
+    }
+
+gpio_state_change:
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, name);
+    if (ret) {
+        swb_msg("Failed to set gpio %s to %d !\n", name, level);
+        return -1;
+    }
+    
+    return 0;
+    
+power_change:
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, "swbb23_wl_pwr");
+    if (ret) {
+        swb_msg("Failed to power off SWB-B23 module!\n");
+        return -1;
+    }
+    
+state_change:
+    if (strcmp(name, "swbb23_wl_shdn")==0)
+        swbb23_wl_on = level;
+    if (strcmp(name, "swbb23_bt_shdn")==0)
+        swbb23_bt_on = level;
+    swb_msg("SWB-B23 power state change: wifi %d, bt %d !!\n", swbb23_wl_on, swbb23_bt_on);
+    
+    goto gpio_state_change;
+}
+
+static int swbb23_get_gpio_value(char* name)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* bt_hostwake =  "swbb23_bt_hostwake";
+    
+    if (strcmp(name, bt_hostwake)) {
+        swb_msg("No gpio %s for SWB-B23\n", name);
+        return -1;
+    }
+    
+    return gpio_read_one_pin_value(ops->pio_hdle, name);
+}
+
+void swbb23_gpio_init(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    swbb23_wl_on = 0;
+    swbb23_bt_on = 0;
+    ops->gpio_ctrl = swbb23_gpio_ctrl;
+    ops->get_io_val = swbb23_get_gpio_value;
+}
diff --git a/drivers/mmc/mmc-pm/mmc_pm_swl_n20.c b/drivers/mmc/mmc-pm/mmc_pm_swl_n20.c
new file mode 100644
index 0000000..3041d74
--- /dev/null
+++ b/drivers/mmc/mmc-pm/mmc_pm_swl_n20.c
@@ -0,0 +1,89 @@
+/*
+ * Nanoradio sdio wifi power management API
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <mach/sys_config.h>
+
+#include "mmc_pm.h"
+
+#define nano_msg(...)    do {printk("[nano]: "__VA_ARGS__);} while(0)
+
+static int nano_powerup = 0;
+static int nano_suspend = 0;
+
+static int nano_gpio_ctrl(char* name, int level)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* gpio_name[4] = {"swl_n20_host_wakeup", "swl_n20_shdn",
+                               "swl_n20_vcc_en", "swl_n20_vdd_en"};
+    
+    int i = 0;
+    int ret = 0;
+    
+    for (i=0; i<4; i++) {
+        if (strcmp(name, gpio_name[i])==0)
+            break;
+    }
+    if (i==4) {
+        nano_msg("No gpio %s for nano-wifi module\n", name);
+        return -1;
+    }
+    
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, name);
+    if (ret) {
+        nano_msg("Failed to set gpio %s to %d !\n", name, level);
+        return -1;
+    }
+    if (strcmp(name, "swl_n20_vdd_en")==0) {
+        nano_powerup = level;
+        nano_msg("Wifi Power %s !!\n", level ? "UP" : "Off");
+    }
+    return 0;
+}
+
+static int nano_get_io_value(char* name)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* hostwake = "swl_n20_host_wakeup";
+    
+    if (strcmp(name, hostwake)) {
+        nano_msg("No gpio %s for swl-n20\n", name);
+        return -1;
+    }
+    
+    return gpio_read_one_pin_value(ops->pio_hdle, name);
+}
+
+static void nano_standby(int instadby)
+{
+    if (instadby) {
+        if (nano_powerup) {
+            nano_gpio_ctrl("swl_n20_shdn", 0);
+            nano_gpio_ctrl("swl_n20_vdd_en", 0);
+            nano_gpio_ctrl("swl_n20_vcc_en", 0);
+            nano_suspend = 1;
+        }
+    } else {
+        if (nano_suspend) {
+            nano_gpio_ctrl("swl_n20_vcc_en", 1);
+            udelay(100);
+            nano_gpio_ctrl("swl_n20_shdn", 1);
+            udelay(50);
+            nano_gpio_ctrl("swl_n20_vdd_en", 1);
+            sunximmc_rescan_card(3, 1);
+            nano_suspend = 0;
+        }
+    }
+}
+
+void nano_wifi_gpio_init(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    nano_powerup = 0;
+    nano_suspend = 0;
+    ops->gpio_ctrl = nano_gpio_ctrl;
+    ops->get_io_val = nano_get_io_value;
+    ops->standby = nano_standby;
+}
\ No newline at end of file
diff --git a/drivers/mmc/mmc-pm/mmc_pm_usi_bm01a.c b/drivers/mmc/mmc-pm/mmc_pm_usi_bm01a.c
new file mode 100644
index 0000000..5aeee1e
--- /dev/null
+++ b/drivers/mmc/mmc-pm/mmc_pm_usi_bm01a.c
@@ -0,0 +1,131 @@
+
+/*
+ * USI wm-bn-bm-01-5(bcm4329) sdio wifi power management API
+ * evb gpio define
+ * usi_bm01a_wl_pwr        = port:PH12<1><default><default><0>
+ * usi_bm01a_wlbt_regon    = port:PI11<1><default><default><0>
+ * usi_bm01a_wl_rst        = port:PI10<1><default><default><0>
+ * usi_bm01a_wl_wake       = port:PI12<1><default><default><0>
+ * usi_bm01a_bt_rst        = port:PB05<1><default><default><0>
+ * usi_bm01a_bt_wake       = port:PI20<1><default><default><0>
+ * usi_bm01a_bt_hostwake   = port:PI21<0><default><default><0>
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <mach/sys_config.h>
+
+#include "mmc_pm.h"
+
+#define usi_msg(...)    do {printk("[usi_bm01a]: "__VA_ARGS__);} while(0)
+static int usi_bm01a_wl_on = 0;
+static int usi_bm01a_bt_on = 0;
+
+static int usi_bm01a_gpio_ctrl(char* name, int level)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* gpio_cmd[6] = {"usi_bm01a_wl_regon", "usi_bm01a_bt_regon", "usi_bm01a_wl_rst", 
+                               "usi_bm01a_wl_wake", "usi_bm01a_bt_rst", "usi_bm01a_bt_wake"};
+    int i = 0;
+    int ret = 0;
+    
+    for (i=0; i<6; i++) {
+        if (strcmp(name, gpio_cmd[i])==0)
+            break;
+    }
+    if (i==6) {
+        usi_msg("No gpio %s for USI-BM01A module\n", name);
+        return -1;
+    }
+    
+//    usi_msg("Set GPIO %s to %d !\n", name, level);
+    if (strcmp(name, "usi_bm01a_wl_regon") == 0) {
+        if (level) {
+            if (usi_bm01a_bt_on) {
+                usi_msg("USI-BM01A is already powered up by bluetooth\n");
+                goto change_state;
+            } else {
+                usi_msg("USI-BM01A is powered up by wifi\n");
+                goto power_change;
+            }
+        } else {
+            if (usi_bm01a_bt_on) {
+                usi_msg("USI-BM01A should stay on because of bluetooth\n");
+                goto change_state;
+            } else {
+                usi_msg("USI-BM01A is powered off by wifi\n");
+                goto power_change;
+            }
+        }
+    }
+    
+    if (strcmp(name, "usi_bm01a_bt_regon") == 0) {
+        if (level) {
+            if (usi_bm01a_wl_on) {
+                usi_msg("USI-BM01A is already powered up by wifi\n");
+                goto change_state;
+            } else {
+                usi_msg("USI-BM01A is powered up by bt\n");
+                goto power_change;
+            }
+        } else {
+            if (usi_bm01a_wl_on) {
+                usi_msg("USI-BM01A should stay on because of wifi\n");
+                goto change_state;
+            } else {
+                usi_msg("USI-BM01A is powered off by bt\n");
+                goto power_change;
+            }
+        }
+    }
+    
+    
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, name);
+    if (ret) {
+        usi_msg("Failed to set gpio %s to %d !\n", name, level);
+        return -1;
+    }
+    
+    return 0;
+    
+power_change:
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, "usi_bm01a_wl_pwr");
+    if (ret) {
+        usi_msg("Failed to power off USI-BM01A module!\n");
+        return -1;
+    }
+    ret = gpio_write_one_pin_value(ops->pio_hdle, level, "usi_bm01a_wlbt_regon");
+    if (ret) {
+        usi_msg("Failed to regon off for  USI-BM01A module!\n");
+        return -1;
+    }
+    
+change_state:
+    if (strcmp(name, "usi_bm01a_wl_regon")==0)
+        usi_bm01a_wl_on = level;
+    if (strcmp(name, "usi_bm01a_bt_regon")==0)
+        usi_bm01a_bt_on = level;
+    usi_msg("USI-BM01A power state change: wifi %d, bt %d !!\n", usi_bm01a_wl_on, usi_bm01a_bt_on);
+    return 0;
+}
+
+static int usi_bm01a_get_gpio_value(char* name)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    char* bt_hostwake =  "usi_bm01a_bt_hostwake";
+    
+    if (strcmp(name, bt_hostwake)) {
+        usi_msg("No gpio %s for USI-BM01A\n", name);
+        return -1;
+    }
+    
+    return gpio_read_one_pin_value(ops->pio_hdle, name);
+}
+
+void usi_bm01a_gpio_init(void)
+{
+    struct mmc_pm_ops *ops = &mmc_card_pm_ops;
+    usi_bm01a_wl_on = 0;
+    usi_bm01a_bt_on = 0;
+    ops->gpio_ctrl = usi_bm01a_gpio_ctrl;
+    ops->get_io_val = usi_bm01a_get_gpio_value;
+}
-- 
1.8.0


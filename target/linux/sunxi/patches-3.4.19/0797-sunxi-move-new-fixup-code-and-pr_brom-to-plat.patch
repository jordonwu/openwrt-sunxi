From 159222bdd851e7a6e73995141e651ba41286dbf9 Mon Sep 17 00:00:00 2001
From: Alejandro Mery <amery@geeks.cl>
Date: Fri, 12 Oct 2012 02:16:40 +0200
Subject: [PATCH 797/944] sunxi: move new fixup code and pr_brom to plat/

---
 arch/arm/mach-sun4i/core.c              | 92 +++------------------------------
 arch/arm/mach-sun5i/core.c              | 91 +++-----------------------------
 arch/arm/plat-sunxi/Makefile            |  3 +-
 arch/arm/plat-sunxi/core.c              | 86 ++++++++++++++++++++++++++++++
 arch/arm/plat-sunxi/include/plat/core.h | 33 ++++++++++++
 5 files changed, 133 insertions(+), 172 deletions(-)
 create mode 100644 arch/arm/plat-sunxi/core.c
 create mode 100644 arch/arm/plat-sunxi/include/plat/core.h

diff --git a/arch/arm/mach-sun4i/core.c b/arch/arm/mach-sun4i/core.c
index 99d3f63..4a67e8c 100644
--- a/arch/arm/mach-sun4i/core.c
+++ b/arch/arm/mach-sun4i/core.c
@@ -59,6 +59,8 @@
 #include <mach/memory.h>
 #include <mach/system.h>
 #include <mach/timex.h>
+
+#include <plat/core.h>
 #include <plat/sys_config.h>
 
 /**
@@ -72,78 +74,11 @@ static struct map_desc sw_io_desc[] __initdata = {
 	{ SW_VA_BROM_BASE, __phys_to_pfn(SW_PA_BROM_BASE),  (SZ_64K),           MT_MEMORY_ITCM  },
 };
 
-static void pr_brom(void *base)
-{
-	const struct {
-		u32 jump_instruction;	/* one intruction jumping to real code */
-		char magic[8];		/* ="eGON.BRM",  not C-style string. */
-		u32 length;		/* generated by PC */
-		char Boot_vsn[4];	/* Boot version */
-		char eGON_vsn[4];	/* eGON version */
-		char platform[8];	/* platform information */
-	} *brom = base + 0x4000;
-
-	/* [    0.000000] BROM Ver: 1100 1100 1623 */
-	if (strncmp(brom->magic, "eGON.BRM", 8) == 0) {
-		pr_info("BROM Ver: %.4s %.4s %.8s\n",
-			brom->Boot_vsn,
-			brom->eGON_vsn,
-			brom->platform);
-	} else {
-		pr_err("SUNXI BROM not found");
-	}
-}
-
 void __init sw_core_map_io(void)
 {
 	iotable_init(sw_io_desc, ARRAY_SIZE(sw_io_desc));
 
-	pr_brom((void*)SW_VA_BROM_BASE);
-}
-
-#define pr_reserve_info(L, START, SIZE) \
-	pr_info("\t" L " : 0x%08x - 0x%08x  (%4d %s)\n", \
-		(u32)(START), (u32)((START) + (SIZE) - 1), \
-		(u32)((SIZE) < SZ_1M ? (SIZE) / SZ_1K : (SIZE) / SZ_1M), \
-		(SIZE) < SZ_1M ? "kB" : "MB")
-
-static void __init sw_core_fixup(struct tag *t, char **cmdline,
-				 struct meminfo *mi)
-{
-#ifdef CONFIG_SUNXI_MALI_RESERVED_MEM
-	u32 bank = 0;
-	for (; t->hdr.size; t = tag_next(t)) if (t->hdr.tag == ATAG_MEM) {
-		if (bank) {
-			mi->nr_banks++;
-			mi->bank[bank].start = t->u.mem.start;
-			mi->bank[bank].size = t->u.mem.size;
-		} else { /* first bank */
-			u32 size = t->u.mem.size / SZ_1M;
-			mi->nr_banks = 1;
-			mi->bank[0].start = t->u.mem.start;
-			if (size < 512) {
-				mi->bank[0].size = SZ_1M * size;
-
-				pr_err("MALI: not enough memory in first bank to make reserve.\n");
-			} else {
-				mi->bank[0].size = SZ_1M * (512 - 64);
-
-				size -= 512;
-				if (size) {
-					bank++;
-					mi->nr_banks++;
-					mi->bank[1].start = t->u.mem.start + (512 * SZ_1M);
-					mi->bank[1].size = SZ_1M * size;
-				}
-
-				pr_info("Memory cut off:\n");
-				pr_reserve_info("MALI", t->u.mem.start + SZ_512M - SZ_64M,
-						SZ_64M);
-			}
-		}
-		bank++;
-	}
-#endif
+	sunxi_pr_brom((void*)SW_VA_BROM_BASE);
 }
 
 /* Only reserve certain important memory blocks if there are actually
@@ -499,27 +434,12 @@ enum sw_ic_ver sw_get_ic_ver(void)
 }
 EXPORT_SYMBOL(sw_get_ic_ver);
 
-/*
- * Arch Required Implementations
- *
- */
-#if 0
-void arch_idle(void)
-{
-
-}
-
-void arch_reset(char mode, const char *cmd)
-{
-
-}
-#endif
-
-
 MACHINE_START(SUN4I, "sun4i")
 	.atag_offset	= 0x100,
 	.timer          = &sw_sys_timer,
-	.fixup          = sw_core_fixup,
+#ifdef CONFIG_SUNXI_MALI_RESERVED_MEM
+	.fixup          = sunxi_mali_core_fixup,
+#endif
 	.map_io         = sw_core_map_io,
 	.init_early     = NULL,
 	.init_irq       = sw_core_init_irq,
diff --git a/arch/arm/mach-sun5i/core.c b/arch/arm/mach-sun5i/core.c
index 7b26c63..a3d42ec 100644
--- a/arch/arm/mach-sun5i/core.c
+++ b/arch/arm/mach-sun5i/core.c
@@ -60,6 +60,8 @@
 #include <mach/memory.h>
 #include <mach/system.h>
 #include <mach/timex.h>
+
+#include <plat/core.h>
 #include <plat/sys_config.h>
 
 /**
@@ -73,78 +75,11 @@ static struct map_desc sw_io_desc[] __initdata = {
 	{ SW_VA_BROM_BASE, __phys_to_pfn(SW_PA_BROM_BASE),  (SZ_64K),           MT_MEMORY_ITCM  },
 };
 
-static void pr_brom(void *base)
-{
-	const struct {
-		u32 jump_instruction;	/* one intruction jumping to real code */
-		char magic[8];		/* ="eGON.BRM",  not C-style string. */
-		u32 length;		/* generated by PC */
-		char Boot_vsn[4];	/* Boot version */
-		char eGON_vsn[4];	/* eGON version */
-		char platform[8];	/* platform information */
-	} *brom = base + 0x4000;
-
-	/* [    0.000000] BROM Ver: 1100 1100 1625 */
-	if (strncmp(brom->magic, "eGON.BRM", 8) == 0) {
-		pr_info("BROM Ver: %.4s %.4s %.8s\n",
-			brom->Boot_vsn,
-			brom->eGON_vsn,
-			brom->platform);
-	} else {
-		pr_err("SUNXI BROM not found");
-	}
-}
-
 void __init sw_core_map_io(void)
 {
 	iotable_init(sw_io_desc, ARRAY_SIZE(sw_io_desc));
 
-	pr_brom((void*)SW_VA_BROM_BASE);
-}
-
-#define pr_reserve_info(L, START, SIZE) \
-	pr_info("\t" L " : 0x%08x - 0x%08x  (%4d %s)\n", \
-		(u32)(START), (u32)((START) + (SIZE) - 1), \
-		(u32)((SIZE) < SZ_1M ? (SIZE) / SZ_1K : (SIZE) / SZ_1M), \
-		(SIZE) < SZ_1M ? "kB" : "MB")
-
-static void __init sw_core_fixup(struct tag *t, char **cmdline,
-				 struct meminfo *mi)
-{
-#ifdef CONFIG_SUNXI_MALI_RESERVED_MEM
-	u32 bank = 0;
-	for (; t->hdr.size; t = tag_next(t)) if (t->hdr.tag == ATAG_MEM) {
-		if (bank) {
-			mi->nr_banks++;
-			mi->bank[bank].start = t->u.mem.start;
-			mi->bank[bank].size = t->u.mem.size;
-		} else { /* first bank */
-			u32 size = t->u.mem.size / SZ_1M;
-			mi->nr_banks = 1;
-			mi->bank[0].start = t->u.mem.start;
-			if (size < 512) {
-				mi->bank[0].size = SZ_1M * size;
-
-				pr_err("MALI: not enough memory in first bank to make reserve.\n");
-			} else {
-				mi->bank[0].size = SZ_1M * (512 - 64);
-
-				size -= 512;
-				if (size) {
-					bank++;
-					mi->nr_banks++;
-					mi->bank[1].start = t->u.mem.start + (512 * SZ_1M);
-					mi->bank[1].size = SZ_1M * size;
-				}
-
-				pr_info("Memory cut off:\n");
-				pr_reserve_info("MALI", t->u.mem.start + SZ_512M - SZ_64M,
-						SZ_64M);
-			}
-		}
-		bank++;
-	}
-#endif
+	sunxi_pr_brom((void*)SW_VA_BROM_BASE);
 }
 
 #ifdef CONFIG_FB_SUNXI_RESERVED_MEM
@@ -472,26 +407,13 @@ enum sw_ic_ver sw_get_ic_ver(void)
 	return MAGIC_VER_A;
 }
 EXPORT_SYMBOL(sw_get_ic_ver);
-/**
- * Arch Required Implementations
- *
- */
-//void arch_idle(void)
-//{
-
-//}
-
-//void arch_reset(char mode, const char *cmd)
-//{
-
-
-//}
-
 
 MACHINE_START(SUN5I, "sun5i")
 	.atag_offset	= 0x100,
 	.timer          = &sw_sys_timer,
-	.fixup          = sw_core_fixup,
+#ifdef CONFIG_SUNXI_MALI_RESERVED_MEM
+	.fixup          = sunxi_mali_core_fixup,
+#endif
 	.map_io         = sw_core_map_io,
 	.init_early     = NULL,
 	.init_irq       = sw_core_init_irq,
@@ -499,4 +421,3 @@ MACHINE_START(SUN5I, "sun5i")
 	.reserve        = sw_core_reserve,
 	.restart	= sun5i_restart,
 MACHINE_END
-
diff --git a/arch/arm/plat-sunxi/Makefile b/arch/arm/plat-sunxi/Makefile
index 4a1332c..949fc3c 100644
--- a/arch/arm/plat-sunxi/Makefile
+++ b/arch/arm/plat-sunxi/Makefile
@@ -1 +1,2 @@
-obj-y := sys_config.o
+obj-y += sys_config.o
+obj-y += core.o
diff --git a/arch/arm/plat-sunxi/core.c b/arch/arm/plat-sunxi/core.c
new file mode 100644
index 0000000..0490f1a
--- /dev/null
+++ b/arch/arm/plat-sunxi/core.c
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2012  Alejandro Mery <amery@geeks.cl>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/string.h>
+
+#include <asm/setup.h>
+#include <asm/sizes.h>
+
+#include <plat/core.h>
+
+void sunxi_pr_brom(void *base)
+{
+	const struct {
+		u32 jump_instruction;	/* one intruction jumping to real code */
+		char magic[8];		/* ="eGON.BRM",  not C-style string. */
+		u32 length;		/* generated by PC */
+		char Boot_vsn[4];	/* Boot version */
+		char eGON_vsn[4];	/* eGON version */
+		char platform[8];	/* platform information */
+	} *brom = base + 0x4000;
+
+	/* [    0.000000] BROM Ver: 1100 1100 1623 */
+	if (strncmp(brom->magic, "eGON.BRM", 8) == 0) {
+		pr_info("BROM Ver: %.4s %.4s %.8s\n",
+			brom->Boot_vsn,
+			brom->eGON_vsn,
+			brom->platform);
+		/* 1623 = A10, 1625 = A13 */
+	} else {
+		pr_err("SUNXI BROM not found");
+	}
+}
+
+#ifdef CONFIG_SUNXI_MALI_RESERVED_MEM
+void __init sunxi_mali_core_fixup(struct tag *t, char **cmdline,
+				  struct meminfo *mi)
+{
+	u32 bank = 0;
+	for (; t->hdr.size; t = tag_next(t)) if (t->hdr.tag == ATAG_MEM) {
+		if (bank) {
+			mi->nr_banks++;
+			mi->bank[bank].start = t->u.mem.start;
+			mi->bank[bank].size = t->u.mem.size;
+		} else { /* first bank */
+			u32 size = t->u.mem.size / SZ_1M;
+			mi->nr_banks = 1;
+			mi->bank[0].start = t->u.mem.start;
+			if (size < 512) {
+				mi->bank[0].size = SZ_1M * size;
+
+				pr_err("MALI: not enough memory in first bank to make reserve.\n");
+			} else {
+				mi->bank[0].size = SZ_1M * (512 - 64);
+				size -= 512;
+				if (size) {
+					bank++;
+					mi->nr_banks++;
+					mi->bank[1].start = t->u.mem.start + (512 * SZ_1M);
+					mi->bank[1].size = SZ_1M * size;
+				}
+
+				pr_info("Memory cut off:\n");
+				pr_reserve_info("MALI", t->u.mem.start + SZ_512M - SZ_64M,
+						SZ_64M);
+			}
+		}
+		bank++;
+	}
+}
+#endif
diff --git a/arch/arm/plat-sunxi/include/plat/core.h b/arch/arm/plat-sunxi/include/plat/core.h
new file mode 100644
index 0000000..b12ad1d
--- /dev/null
+++ b/arch/arm/plat-sunxi/include/plat/core.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2012  Alejandro Mery <amery@geeks.cl>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef _SUNXI_CORE_H
+#define _SUNXI_CORE_H
+
+#define pr_reserve_info(L, START, SIZE) \
+	pr_info("\t" L " : 0x%08x - 0x%08x  (%4d %s)\n", \
+		(u32)(START), (u32)((START) + (SIZE) - 1), \
+		(u32)((SIZE) < SZ_1M ? (SIZE) / SZ_1K : (SIZE) / SZ_1M), \
+		(SIZE) < SZ_1M ? "kB" : "MB")
+
+void sunxi_pr_brom(void *base);
+
+#ifdef CONFIG_SUNXI_MALI_RESERVED_MEM
+void __init sunxi_mali_core_fixup(struct tag *t, char **cmdline,
+				  struct meminfo *mi);
+#endif
+
+#endif
-- 
1.8.0


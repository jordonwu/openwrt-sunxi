From 00de4cdbc9ac1e01363e0f3d9d61d63a871f6afd Mon Sep 17 00:00:00 2001
From: Jari Helaakoski <tekkuli@gmail.com>
Date: Sun, 19 Aug 2012 20:02:59 +0300
Subject: [PATCH 701/944] video: sun4i-disp: Initial fbcon support.

Improve cmap handling.But still needs improvements.
---
 arch/arm/configs/sun4i_defconfig    |  16 +++-
 drivers/video/Kconfig               |   3 +
 drivers/video/sun4i/disp/dev_disp.h |   1 +
 drivers/video/sun4i/disp/dev_fb.c   | 180 ++++++++++++++++++++++--------------
 4 files changed, 127 insertions(+), 73 deletions(-)

diff --git a/arch/arm/configs/sun4i_defconfig b/arch/arm/configs/sun4i_defconfig
index b68f180..f598e77 100644
--- a/arch/arm/configs/sun4i_defconfig
+++ b/arch/arm/configs/sun4i_defconfig
@@ -1,6 +1,6 @@
 #
 # Automatically generated make config: don't edit
-# Linux/arm 3.0.31 Kernel Configuration
+# Linux/arm 3.0.39 Kernel Configuration
 #
 CONFIG_ARM=y
 CONFIG_CHIP_ID=1123
@@ -280,6 +280,7 @@ CONFIG_SW_DEBUG_UART=0
 # Allwinner A10 options
 #
 # CONFIG_TEGRA_FPGA is not set
+# CONFIG_SUNXI_IGNORE_ATAG_MEM is not set
 
 #
 # Processor Type
@@ -1157,9 +1158,9 @@ CONFIG_FB=y
 # CONFIG_FIRMWARE_EDID is not set
 # CONFIG_FB_DDC is not set
 # CONFIG_FB_BOOT_VESA_SUPPORT is not set
-# CONFIG_FB_CFB_FILLRECT is not set
-# CONFIG_FB_CFB_COPYAREA is not set
-# CONFIG_FB_CFB_IMAGEBLIT is not set
+CONFIG_FB_CFB_FILLRECT=y
+CONFIG_FB_CFB_COPYAREA=y
+CONFIG_FB_CFB_IMAGEBLIT=y
 # CONFIG_FB_CFB_REV_PIXELS_IN_BYTE is not set
 # CONFIG_FB_SYS_FILLRECT is not set
 # CONFIG_FB_SYS_COPYAREA is not set
@@ -1198,7 +1199,12 @@ CONFIG_SUN4I_HDMI=m
 # Console display driver support
 #
 CONFIG_DUMMY_CONSOLE=y
-# CONFIG_FRAMEBUFFER_CONSOLE is not set
+CONFIG_FRAMEBUFFER_CONSOLE=y
+# CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY is not set
+# CONFIG_FRAMEBUFFER_CONSOLE_ROTATION is not set
+# CONFIG_FONTS is not set
+CONFIG_FONT_8x8=y
+CONFIG_FONT_8x16=y
 # CONFIG_LOGO is not set
 CONFIG_SOUND=y
 # CONFIG_SOUND_OSS_CORE is not set
diff --git a/drivers/video/Kconfig b/drivers/video/Kconfig
index 181859a..5c6c817 100644
--- a/drivers/video/Kconfig
+++ b/drivers/video/Kconfig
@@ -287,6 +287,9 @@ config SUN3I_HDMI
 config SUN4I_FB
         tristate "DISP Driver Support(sun4i)"
         depends on FB && ARCH_SUN4I
+	select FB_CFB_FILLRECT
+	select FB_CFB_COPYAREA
+	select FB_CFB_IMAGEBLIT
         ---help---
         default m
 
diff --git a/drivers/video/sun4i/disp/dev_disp.h b/drivers/video/sun4i/disp/dev_disp.h
index cc75f2e..56ac351 100644
--- a/drivers/video/sun4i/disp/dev_disp.h
+++ b/drivers/video/sun4i/disp/dev_disp.h
@@ -66,6 +66,7 @@ typedef struct
     __disp_fb_create_para_t fb_para[FB_MAX];
 	wait_queue_head_t       wait[2];
 	unsigned long           wait_count[2];
+	__u32 pseudo_palette [FB_MAX][16];
 }fb_info_t;
 
 typedef struct
diff --git a/drivers/video/sun4i/disp/dev_fb.c b/drivers/video/sun4i/disp/dev_fb.c
index 67cba73..80a1266 100644
--- a/drivers/video/sun4i/disp/dev_fb.c
+++ b/drivers/video/sun4i/disp/dev_fb.c
@@ -21,9 +21,11 @@
  * MA 02111-1307 USA
  */
 
-#include <linux/module.h>
 #include "drv_disp_i.h"
 #include "dev_disp.h"
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/fb.h>
 
 #ifdef CONFIG_SUN4I_FB_UMP
 #include <ump/ump_kernel_interface.h>
@@ -707,7 +709,14 @@ __s32 var_to_disp_fb(__disp_fb_t *fb, struct fb_var_screeninfo *var, struct fb_f
 			var->red.length		= 8;
 			var->green.length	= 8;
 			var->blue.length	= 8;
-			var->reserved[1] = DISP_FORMAT_ARGB8888;
+			if (var->transp.offset == var->blue.offset ||
+			    var->transp.offset == var->red.offset) {
+				var->reserved[1] = DISP_FORMAT_ARGB888;
+				__inf("Mode:     ARGB888");
+			} else {
+				var->reserved[1] = DISP_FORMAT_ARGB8888;
+				__inf("Mode:     ARGB8888");
+			}
 
 			if(var->red.offset == 16 && var->green.offset == 8 && var->blue.offset == 0)//argb
 			{
@@ -834,6 +843,22 @@ static int Fb_pan_display(struct fb_var_screeninfo *var,struct fb_info *info)
 
 static int Fb_check_var(struct fb_var_screeninfo *var, struct fb_info *info)//todo
 {
+	__inf("Fb_check_var: %dx%d %dbits\n", var->xres, var->yres, var->bits_per_pixel);
+
+	switch (var->bits_per_pixel) {
+	case 16:
+		disp_fb_to_var(DISP_FORMAT_ARGB1555, DISP_SEQ_P10, 0, var);
+		break;
+	case 24:
+		disp_fb_to_var(DISP_FORMAT_RGB888, DISP_SEQ_ARGB, 0, var);
+		break;
+	case 32:
+		disp_fb_to_var(DISP_FORMAT_ARGB8888, DISP_SEQ_ARGB, 0, var);
+		break;
+	default:
+		return -EINVAL;
+	}
+
 	return 0;
 }
 
@@ -841,7 +866,7 @@ static int Fb_set_par(struct fb_info *info)//todo
 {
 	__u32 sel = 0;
 
-	__inf("Fb_set_par\n");
+	__inf("Fb_set_par: %dx%d %dbits\n", info->var.xres, info->var.yres, info->var.bits_per_pixel);
 
     for(sel = 0; sel < 2; sel++)
     {
@@ -881,81 +906,83 @@ static int Fb_set_par(struct fb_info *info)//todo
 	return 0;
 }
 
+static inline __u32 convert_bitfield(int val, struct fb_bitfield *bf)
+{
+	__u32 mask = ((1 << bf->length) - 1) << bf->offset;
+	return (val << bf->offset) & mask;
+}
 
 static int Fb_setcolreg(unsigned regno,unsigned red, unsigned green, unsigned blue,unsigned transp, struct fb_info *info)
 {
-    __u32 sel = 0;
-
-	 __inf("Fb_setcolreg,regno=%d,a=%d,r=%d,g=%d,b=%d\n",regno, transp,red, green, blue);
-
-    for(sel = 0; sel < 2; sel++)
-    {
-        if(((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1))
-            || ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)))
-        {
-            unsigned int val;
+	__u32 val;
+	__u32 ret = 0;
+	__u32 sel = 0;
 
-        	switch (info->fix.visual)
-        	{
-        	case FB_VISUAL_PSEUDOCOLOR:
-        		if (regno < 256)
-        		{
-        			val = (transp<<24) | (red<<16) | (green<<8) | blue;
-        			BSP_disp_set_palette_table(sel, &val, regno*4, 4);
-        		}
-        		break;
-
-        	default:
-        		break;
-        	}
-    	}
+	switch (info->fix.visual) {
+	case FB_VISUAL_PSEUDOCOLOR:
+		if (regno < 256) {
+			for(sel = 0; sel < 2; sel++) {
+				if (((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1)) ||
+				    ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0))) {
+					val = (transp<<24) | (red<<16) | (green<<8) | blue;
+					BSP_disp_set_palette_table(sel, &val, regno*4, 4);
+				}
+			}
+		} else {
+			ret = -EINVAL;
+		}
+		break;
+	case FB_VISUAL_TRUECOLOR:
+		if (regno < 16) {
+			val = convert_bitfield(transp, &info->var.transp) |
+				convert_bitfield(red, &info->var.red) |
+				convert_bitfield(green, &info->var.green) |
+				convert_bitfield(blue, &info->var.blue);
+			__inf("Fb_setcolreg,regno=%2d,a=%2X,r=%2X,g=%2X,b=%2X, result=%08X\n",regno, transp,red, green, blue, val);
+			((__u32 *)info->pseudo_palette)[regno] = val;
+		} else {
+			ret = -EINVAL;
+		}
+		break;
+	default:
+		ret = -EINVAL;
+		break;
 	}
 
-	return 0;
+	return ret;
 }
 
 static int Fb_setcmap(struct fb_cmap *cmap, struct fb_info *info)
 {
-    __u32 sel = 0;
-
-	__inf("Fb_setcmap\n");
-
-    for(sel = 0; sel < 2; sel++)
-    {
-        if(((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1))
-            || ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)))
-        {
-            unsigned int j = 0, val = 0;
-            unsigned char hred, hgreen, hblue, htransp = 0xff;
-            unsigned short *red, *green, *blue, *transp;
+    unsigned int j, r = 0;
+    unsigned char hred, hgreen, hblue, htransp = 0xff;
+    unsigned short *red, *green, *blue, *transp;
+
+    __inf("Fb_setcmap, cmap start:%d len:%d, %dbpp\n", cmap->start, cmap->len, info->var.bits_per_pixel);
+
+    red = cmap->red;
+    green = cmap->green;
+    blue = cmap->blue;
+    transp = cmap->transp;
+
+    for (j = 0; j < cmap->len; j++) {
+        hred = *red++;
+        hgreen = *green++;
+        hblue = *blue++;
+        if (transp)
+            htransp = (*transp++)&0xff;
+        else
+            htransp = 0xff;
 
-            red = cmap->red;
-            green = cmap->green;
-            blue = cmap->blue;
-            transp = cmap->transp;
+        r = Fb_setcolreg(cmap->start + j, hred, hgreen, hblue, htransp, info);
+        if (r)
+            return r;
+    }
 
-        	for (j = 0; j < cmap->len; j++)
-        	{
-        		hred = (*red++)&0xff;
-        		hgreen = (*green++)&0xff;
-        		hblue = (*blue++)&0xff;
-        		if (transp)
-        		{
-        			htransp = (*transp++)&0xff;
-        		}
-        		else
-        		{
-        		    htransp = 0xff;
-        		}
-
-        		val = (htransp<<24) | (hred<<16) | (hgreen<<8) |hblue;
-        		BSP_disp_set_palette_table(sel, &val, (cmap->start + j) * 4, 4);
-        	}
-    	}
-	}
-	return 0;
+    return 0;
 }
 
+
 int Fb_blank(int blank_mode, struct fb_info *info)
 {
     __u32 sel = 0;
@@ -985,9 +1012,9 @@ int Fb_blank(int blank_mode, struct fb_info *info)
 
 static int Fb_cursor(struct fb_info *info, struct fb_cursor *cursor)
 {
-    __inf("Fb_cursor\n");
+    /* __inf("Fb_cursor\n"); */
 
-    return 0;
+    return -EINVAL;
 }
 
 static int Fb_wait_for_vsync(struct fb_info *info)
@@ -1128,6 +1155,9 @@ static struct fb_ops dispfb_ops =
 	.fb_setcolreg   = Fb_setcolreg,
 	.fb_setcmap     = Fb_setcmap,
 	.fb_blank       = Fb_blank,
+	.fb_fillrect    = cfb_fillrect,
+	.fb_copyarea    = cfb_copyarea,
+	.fb_imageblit   = cfb_imageblit,
 	.fb_cursor      = Fb_cursor,
 };
 
@@ -1274,6 +1304,7 @@ __s32 Display_Fb_Release(__u32 fb_id)
         memset(&g_fbi.fb_para[fb_id], 0, sizeof(__disp_fb_create_para_t));
         g_fbi.fb_enable[fb_id] = 0;
 
+        fb_dealloc_cmap(&info->cmap);
     	Fb_unmap_video_memory(info);
 
 	    return DIS_SUCCESS;
@@ -1349,6 +1380,8 @@ __s32 Fb_Init(__u32 from)
     __s32 i;
     __bool need_open_hdmi = 0;
 
+    __inf("Fb_Init:%d\n", from);
+
     if(from == 0)//call from lcd driver
     {
 #ifdef FB_RESERVED_MEM
@@ -1370,6 +1403,7 @@ __s32 Fb_Init(__u32 from)
         	g_fbi.fbinfo[i]->var.xres_virtual    = 800;
         	g_fbi.fbinfo[i]->var.yres_virtual    = 480*2;
         	g_fbi.fbinfo[i]->var.nonstd = 0;
+		g_fbi.fbinfo[i]->var.grayscale = 0;
             g_fbi.fbinfo[i]->var.bits_per_pixel = 32;
             g_fbi.fbinfo[i]->var.transp.length = 8;
             g_fbi.fbinfo[i]->var.red.length = 8;
@@ -1390,9 +1424,14 @@ __s32 Fb_Init(__u32 from)
             g_fbi.fbinfo[i]->fix.line_length = g_fbi.fbinfo[i]->var.xres_virtual * 4;
             g_fbi.fbinfo[i]->fix.smem_len = g_fbi.fbinfo[i]->fix.line_length * g_fbi.fbinfo[i]->var.yres_virtual * 2;
             g_fbi.fbinfo[i]->screen_base = 0x0;
+		g_fbi.fbinfo[i]->pseudo_palette = g_fbi.pseudo_palette[i];
             g_fbi.fbinfo[i]->fix.smem_start = 0x0;
+		g_fbi.fbinfo[i]->fix.mmio_start = 0;
+		g_fbi.fbinfo[i]->fix.mmio_len = 0;
 
-        	register_framebuffer(g_fbi.fbinfo[i]);
+		if (fb_alloc_cmap(&g_fbi.fbinfo[i]->cmap, 256, 1) < 0) {
+			return -ENOMEM;
+		}
         }
         parser_disp_init_para(&(g_fbi.disp_init));
     }
@@ -1509,6 +1548,10 @@ __s32 Fb_Init(__u32 from)
 
             //fb_draw_colorbar((__u32)g_fbi.fbinfo[i]->screen_base, fb_para.width, fb_para.height*fb_para.buffer_num, &(g_fbi.fbinfo[i]->var));
         }
+	for(i=0; i<8; i++) {
+		/* Register framebuffers after they are initialized */
+		register_framebuffer(g_fbi.fbinfo[i]);
+	}
 
         if(g_fbi.disp_init.scaler_mode[0])
         {
@@ -1541,7 +1584,8 @@ __s32 Fb_Init(__u32 from)
         BSP_disp_print_reg(0, DISP_REG_PIOC);
     }
 
-	return 0;
+    __inf("Fb_Init: END\n");
+    return 0;
 }
 
 __s32 Fb_Exit(void)
-- 
1.8.0


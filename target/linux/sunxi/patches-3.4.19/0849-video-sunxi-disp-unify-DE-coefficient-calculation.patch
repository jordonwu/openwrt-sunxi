From e861c345de27421e1a62538b83b8226573458253 Mon Sep 17 00:00:00 2001
From: Luc Verhaegen <libv@codethink.co.uk>
Date: Fri, 26 Oct 2012 15:22:02 +0200
Subject: [PATCH 849/944] video:sunxi:disp: unify DE coefficient calculation

Signed-off-by: Luc Verhaegen <libv@codethink.co.uk>
---
 .../video/sunxi/disp/de_bsp_sun4i/de/ebios/de_be.c | 184 +++++++++++++++++
 .../video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.c | 110 +++++++++--
 .../video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.h |  26 ++-
 .../sunxi/disp/de_bsp_sun4i/de/ebios/ebios_de.h    |   4 +
 .../video/sunxi/disp/de_bsp_sun5i/de/ebios/de_be.c | 219 ++++++++++++++++++++-
 .../video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.c | 140 +++++++++++--
 .../video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.h |  24 +++
 .../sunxi/disp/de_bsp_sun5i/de/ebios/ebios_de.h    |   4 +
 8 files changed, 681 insertions(+), 30 deletions(-)

diff --git a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_be.c b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_be.c
index 2c40635..3258d35 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_be.c
+++ b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_be.c
@@ -837,6 +837,7 @@ __s32 DE_BE_Sprite_Set_Palette_Table(__u32 sel, __u32 address, __u32 offset, __u
     return 0;
 }
 
+#ifdef CONFIG_ARCH_SUN4I
 //out_csc: 0:rgb, 1:yuv for tv, 2:yuv for hdmi
 //out_color_range:  0:16~255, 1:0~255, 2:16~235
 __s32 DE_BE_Set_Enhance_ex(__u8 sel, __csc_t out_csc, __u32 out_color_range, __u32 enhance_en, __u32 brightness, __u32 contrast, __u32 saturaion, __u32 hue)
@@ -1045,6 +1046,189 @@ __s32 DE_BE_Set_Enhance_ex(__u8 sel, __csc_t out_csc, __u32 out_color_range, __u
 
 	return 0;
 }
+#else
+//brightness -100~100
+//contrast -100~100
+//saturaion -100~100
+__s32 DE_BE_Set_Enhance(__u8 sel, __u32 out_csc, __u32 out_color_range, __s32 brightness, __s32 contrast, __s32 saturaion, __s32 hue)
+{
+	__s32 i_bright;
+	__s32 i_contrast;
+	__s32 i_saturaion;
+	__s32 i_hue;
+	__scal_matrix4x4 matrixEn;
+	__scal_matrix4x4 *ptmatrix;
+	__scal_matrix4x4 matrixresult;
+	__s32 *pt;
+	__u32 i;
+	__s32 sinv, cosv;	//sin_tab: 7 bit fractional
+
+	brightness = brightness>100?100:(brightness<0?0:brightness);
+	contrast = contrast>100?100:(contrast<0?0:contrast);
+	saturaion = saturaion>100?100:(saturaion<0?0:saturaion);
+	hue = hue>100?100:(hue<0?0:saturaion);
+
+	i_bright = (__s32)(brightness*64/100);
+	i_saturaion = (__s32)(saturaion*64/100);
+	i_contrast = (__s32)(contrast*64/100);
+	i_hue = (__s32)(hue*64/100);
+
+	sinv = image_enhance_tab[8*12 + (i_hue&0x3f)];
+	cosv = image_enhance_tab[8*12 + 8*8 + (i_hue&0x3f)];
+
+	matrixEn.x00 = i_contrast << 5;
+	matrixEn.x01 = 0;
+	matrixEn.x02 = 0;
+	matrixEn.x03 = (((i_bright - 32) + 16) <<10) - ( i_contrast << 9);
+	matrixEn.x10 = 0;
+	matrixEn.x11 = (i_contrast * i_saturaion * cosv) >> 7;
+	matrixEn.x12 = (i_contrast * i_saturaion * sinv) >> 7;
+	matrixEn.x13 = (1<<17) - ((matrixEn.x11 + matrixEn.x12)<<7);
+	matrixEn.x20 = 0;
+	matrixEn.x21 = (-i_contrast * i_saturaion * sinv)>>7;
+	matrixEn.x22 = (i_contrast * i_saturaion * cosv) >> 7;
+	matrixEn.x23 = (1<<17) - ((matrixEn.x22 + matrixEn.x21)<<7);
+	matrixEn.x30 = 0;
+	matrixEn.x31 = 0;
+	matrixEn.x32 = 0;
+	matrixEn.x33 = 1024;
+
+	if(out_csc == 1) //rgb to yuv
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (2<<7));
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixresult);
+	}
+	else if(out_csc == 0)  //rgb to rgb
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (2<<7));
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixEn, &matrixresult);
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (2<<7) + 0x40);
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixresult, &matrixresult);
+	}
+	else if(out_csc == 2)
+	{
+	    __scal_matrix4x4 matrix_16_255;
+
+#if 0
+	    //rgb to rgb
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (2<<7));
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixresult);
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (2<<7) + 0x40);
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixresult, &matrixresult);
+
+        //rgb to igb
+        matrix_16_255.x00 = 0x0155;
+        matrix_16_255.x01 = 0x0155;
+        matrix_16_255.x02 = 0x0155;
+        matrix_16_255.x03 = 0;
+        matrix_16_255.x10 = 0;
+        matrix_16_255.x11 = 0x0400;
+        matrix_16_255.x12 = 0;
+        matrix_16_255.x13 = 0;
+        matrix_16_255.x20 = 0;
+        matrix_16_255.x21 = 0;
+        matrix_16_255.x22 = 0x0400;
+        matrix_16_255.x23 = 0;
+        matrix_16_255.x30 = 0;
+        matrix_16_255.x31 = 0;
+        matrix_16_255.x32 = 0;
+        matrix_16_255.x33 = 0;
+        iDE_SCAL_Matrix_Mul(matrix_16_255, matrixresult, &matrixresult);
+#else
+		matrix_16_255.x00 = 0x00C3;
+		matrix_16_255.x01 = 0x029A;
+		matrix_16_255.x02 = 0x00A4;
+		matrix_16_255.x03 = 0x0000;
+		matrix_16_255.x10 = 0xFFFFFF8C;
+		matrix_16_255.x11 = 0xFFFFFE74;
+		matrix_16_255.x12 = 0x0200;
+		matrix_16_255.x13 = 0x20000; //0x0800;
+		matrix_16_255.x20 = 0x0200;
+		matrix_16_255.x21 = 0xFFFFFE65;
+		matrix_16_255.x22 = 0xFFFFFF9B;
+		matrix_16_255.x23 = 0x20000; //0x0800;
+		matrix_16_255.x30 = 0x0000;
+		matrix_16_255.x31 = 0x0000;
+		matrix_16_255.x32 = 0x0000;
+		matrix_16_255.x33 = 0x0000;
+		ptmatrix = &matrix_16_255;
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixresult);
+#endif
+	}
+
+	if(out_color_range == 0)//[16,255]
+    {
+        __scal_matrix4x4 matrix_16_255;
+        matrix_16_255.x00 = 0x03c4;
+        matrix_16_255.x01 = 0;
+        matrix_16_255.x02 = 0;
+        matrix_16_255.x03 = 0x0100;
+        matrix_16_255.x10 = 0;
+        matrix_16_255.x11 = 0x03c4;
+        matrix_16_255.x12 = 0;
+        matrix_16_255.x13 = 0x0100;
+        matrix_16_255.x20 = 0;
+        matrix_16_255.x21 = 0;
+        matrix_16_255.x22 = 0x03c4;
+        matrix_16_255.x23 = 0x0100;
+        matrix_16_255.x30 = 0;
+        matrix_16_255.x31 = 0;
+        matrix_16_255.x32 = 0;
+        matrix_16_255.x33 = 0;
+        iDE_SCAL_Matrix_Mul(matrix_16_255, matrixresult, &matrixresult);
+    }
+	else if(out_color_range == 2)//[16,235]
+    {
+        __scal_matrix4x4 matrix_16_255;
+        matrix_16_255.x00 = 0x0370;
+        matrix_16_255.x01 = 0;
+        matrix_16_255.x02 = 0;
+        matrix_16_255.x03 = 0x0100;
+        matrix_16_255.x10 = 0;
+        matrix_16_255.x11 = 0x0370;
+        matrix_16_255.x12 = 0;
+        matrix_16_255.x13 = 0x0100;
+        matrix_16_255.x20 = 0;
+        matrix_16_255.x21 = 0;
+        matrix_16_255.x22 = 0x0370;
+        matrix_16_255.x23 = 0x0100;
+        matrix_16_255.x30 = 0;
+        matrix_16_255.x31 = 0;
+        matrix_16_255.x32 = 0;
+        matrix_16_255.x33 = 0;
+        iDE_SCAL_Matrix_Mul(matrix_16_255, matrixresult, &matrixresult);
+    }
+
+	//data bit convert, 1 bit  sign, 2 bit integer, 10 bits fractrional for coefficient; 1 bit sign,9 bit integer, 4 bit fractional for constant
+	//range limited
+	iDE_SCAL_Csc_Lmt(&matrixresult.x00, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x01, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x02, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x03, -16383, 16383, 6, 32767);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x10, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x11, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x12, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x13, -16383, 16383, 6, 32767);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x20, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x21, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x22, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x23, -16383, 16383, 6, 32767);
+
+    //write csc register
+    pt = &(matrixresult.x00);
+
+	for(i=0;i<4;i++)
+	{
+		DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_R_COEFF_OFF+ 4*i, *(pt + i));
+		DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_G_COEFF_OFF+ 4*i, *(pt + 4 + i));
+		DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_B_COEFF_OFF+ 4*i, *(pt + 8 + i));
+		//OSAL_PRINTF("R:%x,\tG:%x,\tB:%x\n",*(pt + i),*(pt + 4 + i),*(pt + 8 + i));
+	}
+
+	DE_BE_enhance_enable(sel, 1);
+    return 0;
+}
+#endif /* CONFIG_ARCH_SUN4I */
 
 __s32 DE_BE_enhance_enable(__u32 sel, __bool enable)
 {
diff --git a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.c b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.c
index 710c2ee..e95860d 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.c
+++ b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.c
@@ -1415,7 +1415,6 @@ __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_mat
 
 
 //*********************************************************************************************
-// function         : iDE_SCAL_Csc_Lmt(__s64 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
 // description      : csc coefficient and constant limited
 // parameters       :
 //                value<coefficient or constant>
@@ -1423,6 +1422,7 @@ __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_mat
 // return           :
 //               success
 //***********************************************************************************************
+#ifdef CONFIG_ARCH_SUN4I
 __s32 iDE_SCAL_Csc_Lmt(__s64 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
 {
     __s64 tmp;
@@ -1436,11 +1436,23 @@ __s32 iDE_SCAL_Csc_Lmt(__s64 *value, __s32 min, __s32 max, __s32 shift, __s32 va
 
    return 0;
 }
+#else
+__s32 iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
+{
+    __s32 tmp;
+    tmp = (*value)>>shift;
+   if(tmp < min)
+    *value = min & validbit;
+   else if(tmp > max)
+     *value = max & validbit;
+   else
+     *value = tmp & validbit;
+
+   return 0;
+}
+#endif /* CONFIG_ARCH_SUN4I */
 
 //*********************************************************************************************
-// function         : DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs,
-//                                                   __s32  bright, __s32 contrast, __s32 saturaion, __s32 hue,
-//                                                   __u32  in_br_swap, __u32 out_br_swap)
 // description      : set scaler input/output color space convert coefficients
 // parameters       :
 //                 sel <scaler select>
@@ -1471,8 +1483,10 @@ __s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode
 {
 	__scal_matrix4x4 matrixEn;
 	__scal_matrix4x4 matrixconv, *ptmatrix;
-	__scal_matrix4x4 matrixresult, tmpcoeff;
-    __s64 *pt;
+	__scal_matrix4x4 matrixresult;
+#ifdef CONFIG_ARCH_SUN4I
+	__scal_matrix4x4 tmpcoeff;
+#endif
 	__u32 i;
 	__s32 sinv, cosv;   //sin_tab: 7 bit fractional
 
@@ -1501,6 +1515,7 @@ __s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode
 	matrixEn.x32 = 0;
 	matrixEn.x33 = 1024;
 
+#ifdef CONFIG_ARCH_SUN4I
 	if((incs == 0) && (outcs == 0))  //rgb to rgb
 	{
 		for(i=0; i<16; i++)
@@ -1592,16 +1607,87 @@ __s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode
     iDE_SCAL_Csc_Lmt(&matrixresult.x21, -4095, 4095, 0, 8191);
     iDE_SCAL_Csc_Lmt(&matrixresult.x22, -4095, 4095, 0, 8191);
     iDE_SCAL_Csc_Lmt(&matrixresult.x23, -8191, 8191, 0, 16383);
+#else
+	if((incs == 0) && (outcs == 0))  //rgb to rgb
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7) + 0x40);
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7));
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixconv, &matrixconv);
+        matrixresult.x00 = matrixconv.x11;  matrixresult.x01 = matrixconv.x10;
+        matrixresult.x02 = matrixconv.x12;  matrixresult.x03 = matrixconv.x13;
+        matrixresult.x10 = matrixconv.x01;  matrixresult.x11 = matrixconv.x00;
+        matrixresult.x12 = matrixconv.x02;  matrixresult.x13 = matrixconv.x03;
+        matrixresult.x20 = matrixconv.x21;  matrixresult.x21 = matrixconv.x20;
+        matrixresult.x22 = matrixconv.x22;  matrixresult.x23 = matrixconv.x23;
+        matrixresult.x30 = matrixconv.x31;  matrixresult.x31 = matrixconv.x30;
+        matrixresult.x32 = matrixconv.x32;  matrixresult.x33 = matrixconv.x33;
+
+	}
+	else if((incs == 1) && (outcs == 0)) //yuv to rgb
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7) + 0x40);
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixEn, &matrixconv);
+        matrixresult.x00 = matrixconv.x10;  matrixresult.x01 = matrixconv.x11;
+        matrixresult.x02 = matrixconv.x12;  matrixresult.x03 = matrixconv.x13;
+        matrixresult.x10 = matrixconv.x00;  matrixresult.x11 = matrixconv.x01;
+        matrixresult.x12 = matrixconv.x02;  matrixresult.x13 = matrixconv.x03;
+        matrixresult.x20 = matrixconv.x20;  matrixresult.x21 = matrixconv.x21;
+        matrixresult.x22 = matrixconv.x22;  matrixresult.x23 = matrixconv.x23;
+        matrixresult.x30 = matrixconv.x30;  matrixresult.x31 = matrixconv.x31;
+        matrixresult.x32 = matrixconv.x32;  matrixresult.x33 = matrixconv.x33;
+
+	}
+	else if((incs == 0) && (outcs == 1)) //rgb to yuv
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7));
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+        matrixresult.x00 = matrixconv.x01;  matrixresult.x01 = matrixconv.x00;
+        matrixresult.x02 = matrixconv.x02;  matrixresult.x03 = matrixconv.x03;
+        matrixresult.x10 = matrixconv.x11;  matrixresult.x11 = matrixconv.x10;
+        matrixresult.x12 = matrixconv.x12;  matrixresult.x13 = matrixconv.x13;
+        matrixresult.x20 = matrixconv.x21;  matrixresult.x21 = matrixconv.x20;
+        matrixresult.x22 = matrixconv.x22;  matrixresult.x23 = matrixconv.x23;
+        matrixresult.x30 = matrixconv.x31;  matrixresult.x31 = matrixconv.x30;
+        matrixresult.x32 = matrixconv.x32;  matrixresult.x33 = matrixconv.x33;
+	}
+	else  //yuv to yuv
+	{
+		matrixresult = matrixEn;
+	}
+
+    //data bit convert, 1 bit  sign, 2 bit integer, 10 bits fractrional for coefficient; 1 bit sign,9 bit integer, 4 bit fractional for constant
+    //range limited
+    iDE_SCAL_Csc_Lmt(&matrixresult.x00, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x01, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x02, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x03, -8191, 8191, 6, 16383);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x10, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x11, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x12, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x13, -8191, 8191, 6, 16383);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x20, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x21, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x22, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x23, -8191, 8191, 6, 16383);
+#endif /* CONFIG_ARCH_SUN4I */
 
     //write csc register
-    pt = (__s64 *)&(matrixresult.x00);
-    for(i=0; i<4; i++)
     {
-        scal_dev[sel]->csc_coef[i].dwval = *(pt + i);
-		scal_dev[sel]->csc_coef[i+4 + out_br_swap * 4].dwval =  *(pt + i + 4 + in_br_swap * 4);
-		scal_dev[sel]->csc_coef[i+8 - out_br_swap * 4].dwval =  *(pt + i + 8 - in_br_swap * 4);
-	}
+#ifdef CONFIG_ARCH_SUN4I
+	    __s64 *pt = &(matrixresult.x00);
+#else
+	    __s32 *pt = &(matrixresult.x00);
+#endif
 
+	    for(i=0; i<4; i++) {
+		    scal_dev[sel]->csc_coef[i].dwval = *(pt + i);
+		    scal_dev[sel]->csc_coef[i+4 + out_br_swap * 4].dwval =
+			    *(pt + i + 4 + in_br_swap * 4);
+		    scal_dev[sel]->csc_coef[i+8 - out_br_swap * 4].dwval =
+			    *(pt + i + 8 - in_br_swap * 4);
+	    }
+    }
     scal_dev[sel]->bypass.bits.csc_bypass_en = 0;
 
 	return 0;
diff --git a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.h b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.h
index 9100ef5..42079c8 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.h
+++ b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/de_fe.h
@@ -1520,7 +1520,7 @@ typedef struct __DE_SCAL_DEV
 	SCAL_VPP_BLE_REG         	    vpp_ble            ;//0xa14
 }__de_scal_dev_t;
 
-
+#ifdef CONFIG_ARCH_SUN4I
 typedef struct __SCAL_MATRIX4X4
 {
 	__s64 x00;
@@ -1543,5 +1543,29 @@ typedef struct __SCAL_MATRIX4X4
 
 extern __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_matrix4x4 *result);
 extern __s32 iDE_SCAL_Csc_Lmt(__s64 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit);
+#else
+typedef struct __SCAL_MATRIX4X4
+{
+	__s32 x00;
+	__s32 x01;
+	__s32 x02;
+	__s32 x03;
+	__s32 x10;
+	__s32 x11;
+	__s32 x12;
+	__s32 x13;
+	__s32 x20;
+	__s32 x21;
+	__s32 x22;
+	__s32 x23;
+	__s32 x30;
+	__s32 x31;
+	__s32 x32;
+	__s32 x33;
+}__scal_matrix4x4;
+
+extern __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_matrix4x4 *result);
+extern __s32 iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit);
+#endif /* CONFIG_ARCH_SUN4I */
 
 #endif
diff --git a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/ebios_de.h b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/ebios_de.h
index c7bbddc..284d054 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/ebios_de.h
+++ b/drivers/video/sunxi/disp/de_bsp_sun4i/de/ebios/ebios_de.h
@@ -362,7 +362,11 @@ __s32 DE_BE_Sprite_Block_Set_Size(__u32 sel, __u8 blk_idx,__u32 xsize,__u32 ysiz
 __s32 DE_BE_Sprite_Block_Set_fb(__u32 sel, __u8 blk_idx,__u32 addr, __u32 line_width);
 __s32 DE_BE_Sprite_Block_Set_Next_Id(__u32 sel, __u8 blk_idx,__u8 next_blk_id);
 __s32 DE_BE_Sprite_Set_Palette_Table(__u32 sel, __u32 address, __u32 offset, __u32 size);
+#ifdef CONFIG_ARCH_SUN4I
 __s32 DE_BE_Set_Enhance_ex(__u8 sel, __csc_t out_csc, __u32 out_color_range, __u32 enhance_en, __u32 brightness, __u32 contrast, __u32 saturaion, __u32 hue);
+#else
+__s32 DE_BE_Set_Enhance(__u8 sel, __u32 out_csc, __u32 out_color_range, __s32 brightness, __s32 contrast, __s32 saturaion, __s32 hue);
+#endif
 __s32 DE_BE_enhance_enable(__u32 sel, __bool enable);
 __s32 DE_BE_set_display_size(__u32 sel, __u32 width, __u32 height);
 __s32 DE_BE_get_display_width(__u32 sel);
diff --git a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_be.c b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_be.c
index 31c3903..3258d35 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_be.c
+++ b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_be.c
@@ -729,10 +729,13 @@ __s32 DE_BE_Set_ColorKey(__u32 sel, __disp_color_t ck_max,__disp_color_t  ck_min
 __s32 DE_BE_reg_auto_load_en(__u32 sel, __u32 en)
 {
     __u32 tmp;
+
     tmp = DE_BE_RUINT32(sel, DE_BE_FRMBUF_CTL_OFF);
     DE_BE_WUINT32(sel, DE_BE_FRMBUF_CTL_OFF, tmp | ((1-en)<<1));//bit1:enable, bit0:ready
+
     return 0;
 }
+
 __s32 DE_BE_Cfg_Ready(__u32 sel)
 {
     __u32 tmp;
@@ -781,8 +784,6 @@ __s32 DE_BE_Sprite_Set_Global_Alpha(__u32 sel, __u8 alpha_val)
 
 __s32 DE_BE_Sprite_Block_Set_Pos(__u32 sel, __u8 blk_idx,__s16 x,__s16 y)
 {
-
-
   	DE_BE_WUINT32IDX(sel, DE_BE_SPRITE_POS_CTRL_OFF,blk_idx,((y&0xffff)<<16) | (x&0xffff));
    	return 0;
 }
@@ -807,6 +808,7 @@ __s32 DE_BE_Sprite_Block_Set_fb(__u32 sel, __u8 blk_idx,__u32 addr, __u32 line_w
 __s32 DE_BE_Sprite_Block_Set_Next_Id(__u32 sel, __u8 blk_idx,__u8 next_blk_id)
 {
     __u32 tmp = 0;
+
     tmp = DE_BE_RUINT32IDX(sel, DE_BE_SPRITE_ATTR_CTRL_OFF,blk_idx) & 0xffffffc0;
 	DE_BE_WUINT32IDX(sel, DE_BE_SPRITE_ATTR_CTRL_OFF,blk_idx,tmp | next_blk_id);
 	return 0;
@@ -835,6 +837,216 @@ __s32 DE_BE_Sprite_Set_Palette_Table(__u32 sel, __u32 address, __u32 offset, __u
     return 0;
 }
 
+#ifdef CONFIG_ARCH_SUN4I
+//out_csc: 0:rgb, 1:yuv for tv, 2:yuv for hdmi
+//out_color_range:  0:16~255, 1:0~255, 2:16~235
+__s32 DE_BE_Set_Enhance_ex(__u8 sel, __csc_t out_csc, __u32 out_color_range, __u32 enhance_en, __u32 brightness, __u32 contrast, __u32 saturaion, __u32 hue)
+{
+	__s32 i_bright;
+	__s32 i_contrast;
+	__s32 i_saturaion;
+	__s32 i_hue;	//fix
+	__scal_matrix4x4 matrixEn;
+	__scal_matrix4x4 matrixconv, *ptmatrix;
+	__scal_matrix4x4 matrixresult;
+	__s64 *pt;
+	__s32 sinv, cosv;	//sin_tab: 7 bit fractional
+	__s32 i;
+	__scal_matrix4x4 tmpcoeff;
+
+	brightness = brightness>100?100:(brightness<0?0:brightness);
+	contrast = contrast>100?100:(contrast<0?0:contrast);
+	saturaion = saturaion>100?100:(saturaion<0?0:saturaion);
+
+	i_bright = (__s32)(brightness*64/100);
+	i_saturaion = (__s32)(saturaion*64/100);
+	i_contrast = (__s32)(contrast*64/100);
+	i_hue = (__s32)(hue*64/100);
+
+	sinv = image_enhance_tab[8*12 + (i_hue&0x3f)];
+	cosv = image_enhance_tab[8*12 + 8*8 + (i_hue&0x3f)];
+
+	//calculate enhance matrix
+	matrixEn.x00 = i_contrast << 5;
+	matrixEn.x01 = 0;
+	matrixEn.x02 = 0;
+	matrixEn.x03 = (((i_bright - 32) + 16) <<10) - ( i_contrast << 9);
+	matrixEn.x10 = 0;
+	matrixEn.x11 = (i_contrast * i_saturaion * cosv) >> 7;
+	matrixEn.x12 = (i_contrast * i_saturaion * sinv) >> 7;
+	matrixEn.x13 = (1<<17) - ((matrixEn.x11 + matrixEn.x12)<<7);
+	matrixEn.x20 = 0;
+	matrixEn.x21 = (-i_contrast * i_saturaion * sinv)>>7;
+	matrixEn.x22 = (i_contrast * i_saturaion * cosv) >> 7;
+	matrixEn.x23 = (1<<17) - ((matrixEn.x22 + matrixEn.x21)<<7);
+	matrixEn.x30 = 0;
+	matrixEn.x31 = 0;
+	matrixEn.x32 = 0;
+	matrixEn.x33 = 1024;
+
+	if (out_csc == DE_RGB) { /* RGB output */
+		if(enhance_en == 1) {
+			for (i=0; i<16; i++) {
+				*((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + 0x20 + i) <<32 ) >>32;	//bt709 rgb2yuv coeff
+				// *((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + i) <<32 ) >>32;	//bt601 rgb2yuv coeff
+				// *((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + 0x40 + i) <<32 ) >>32;	//YCC rgb2yuv coeff
+			}
+
+			ptmatrix = &tmpcoeff;
+
+			//convolution of enhance matrix and rgb2yuv matrix
+			iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+
+			for(i=0; i<16; i++) {
+				*((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + 0x30 + i) <<32)>>32;	//bt709 yuv2rgb coeff
+				// *((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + 0x10 + i) <<32)>>32;	//bt601 yuv2rgb coeff
+				// *((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + 0x50 + i) <<32)>>32;	//YCC yuv2rgb coeff
+			}
+
+			ptmatrix = &tmpcoeff;
+
+			//convert to RGB
+			iDE_SCAL_Matrix_Mul(*ptmatrix, matrixconv, &matrixconv);
+
+			//rearrange CSC coeff
+			matrixresult.x00 = (matrixconv.x00+8)/16;	matrixresult.x01 = (matrixconv.x01+8)/16;
+			matrixresult.x02 = (matrixconv.x02+8)/16;	matrixresult.x03 = (matrixconv.x03+512)/1024;
+			matrixresult.x10 = (matrixconv.x10+8)/16;	matrixresult.x11 = (matrixconv.x11+8)/16;
+			matrixresult.x12 = (matrixconv.x12+8)/16;	matrixresult.x13 = (matrixconv.x13+512)/1024;
+			matrixresult.x20 = (matrixconv.x20+8)/16;	matrixresult.x21 = (matrixconv.x21+8)/16;
+			matrixresult.x22 = (matrixconv.x22+8)/16;	matrixresult.x23 = (matrixconv.x23+512)/1024;
+			matrixresult.x30 = (matrixconv.x30+8)/16;	matrixresult.x31 = (matrixconv.x31+8)/16;
+			matrixresult.x32 = (matrixconv.x32+8)/16;	matrixresult.x33 = (matrixconv.x33+512)/1024;
+		} else {
+			matrixresult.x00 = 0x400;	matrixresult.x01 = 0;
+			matrixresult.x02 = 0;		matrixresult.x03 = 0;
+			matrixresult.x10 = 0;		matrixresult.x11 = 0x400;
+			matrixresult.x12 = 0;		matrixresult.x13 = 0;
+			matrixresult.x20 = 0;		matrixresult.x21 = 0;
+			matrixresult.x22 = 0x400;	matrixresult.x23 = 0;
+			matrixresult.x30 = 0;		matrixresult.x31 = 0;
+			matrixresult.x32 = 0;		matrixresult.x33 = 0x400;
+		}
+
+		//OUTPUT RANGE MODIFY
+		ptmatrix = &matrixresult;
+
+		if (out_color_range == DISP_COLOR_RANGE_16_255) {
+			matrixconv.x00 = 0x03c4;	matrixconv.x01 = 0x0000;
+			matrixconv.x02 = 0x0000;	matrixconv.x03 = 0x0100;
+			matrixconv.x10 = 0x0000;	matrixconv.x11 = 0x03c4;
+			matrixconv.x12 = 0x0000;	matrixconv.x13 = 0x0100;
+			matrixconv.x20 = 0x0000;	matrixconv.x21 = 0x0000;
+			matrixconv.x22 = 0x03c4;	matrixconv.x23 = 0x0100;
+			matrixconv.x30 = 0x0000;	matrixconv.x31 = 0x0000;
+			matrixconv.x32 = 0x0000;	matrixconv.x33 = 0x0100;
+		} else if (out_color_range == DISP_COLOR_RANGE_16_235) {
+			matrixconv.x00 = 0x0370;	matrixconv.x01 = 0x0000;
+			matrixconv.x02 = 0x0000;	matrixconv.x03 = 0x0100;
+			matrixconv.x10 = 0x0000;	matrixconv.x11 = 0x0370;
+			matrixconv.x12 = 0x0000;	matrixconv.x13 = 0x0100;
+			matrixconv.x20 = 0x0000;	matrixconv.x21 = 0x0000;
+			matrixconv.x22 = 0x0370;	matrixconv.x23 = 0x0100;
+		} else {	//DISP_COLOR_RANGE_0_255
+			matrixconv.x00 = 0x0400;	matrixconv.x01 = 0x0000;
+			matrixconv.x02 = 0x0000;	matrixconv.x03 = 0x0000;
+			matrixconv.x10 = 0x0000;	matrixconv.x11 = 0x0400;
+			matrixconv.x12 = 0x0000;	matrixconv.x13 = 0x0000;
+			matrixconv.x20 = 0x0000;	matrixconv.x21 = 0x0000;
+			matrixconv.x22 = 0x0400;	matrixconv.x23 = 0x0000;
+		}
+
+		iDE_SCAL_Matrix_Mul(matrixconv, *ptmatrix, &matrixresult);
+
+		matrixresult.x00 = matrixresult.x00;	matrixresult.x01 = matrixresult.x01;
+		matrixresult.x02 = matrixresult.x02;	matrixresult.x03 = matrixresult.x03 + 8;
+		matrixresult.x10 = matrixresult.x10;	matrixresult.x11 = matrixresult.x11;
+		matrixresult.x12 = matrixresult.x12;	matrixresult.x13 = matrixresult.x13 + 8;
+		matrixresult.x20 = matrixresult.x20;	matrixresult.x21 = matrixresult.x21;
+		matrixresult.x22 = matrixresult.x22;	matrixresult.x23 = matrixresult.x23 + 8;
+	} else if (out_csc == DE_YUV_TV) { /* YUV for tv(range 16-235) */
+		for (i=0; i<16; i++) {
+			*((__s64 *)(&tmpcoeff.x00) + i)  = ((__s64)*(image_enhance_tab + i) <<32)>>32;  //bt601 rgb2yuv coeff
+		}
+
+		if (enhance_en == 1) {
+			//convolution of enhance matrix and rgb2yuv matrix
+
+			ptmatrix = &tmpcoeff;
+
+			iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+
+			matrixresult.x00 = matrixconv.x00/4;    matrixresult.x01 = matrixconv.x01/4;
+			matrixresult.x02 = matrixconv.x02/4;    matrixresult.x03 = matrixconv.x03/256 + 8;
+			matrixresult.x10 = matrixconv.x10/4;    matrixresult.x11 = matrixconv.x11/4;
+			matrixresult.x12 = matrixconv.x12/4;    matrixresult.x13 = matrixconv.x13/256 + 8;
+			matrixresult.x20 = matrixconv.x20/4;    matrixresult.x21 = matrixconv.x21/4;
+			matrixresult.x22 = matrixconv.x22/4;    matrixresult.x23 = matrixconv.x23/256 + 8;
+		} else {
+			matrixresult.x00 = tmpcoeff.x00/4;  matrixresult.x01 = tmpcoeff.x01/4;
+			matrixresult.x02 = tmpcoeff.x02/4;  matrixresult.x03 = tmpcoeff.x03/256 + 8;
+			matrixresult.x10 = tmpcoeff.x10/4;  matrixresult.x11 = tmpcoeff.x11/4;
+			matrixresult.x12 = tmpcoeff.x12/4;  matrixresult.x13 = tmpcoeff.x13/256 + 8;
+			matrixresult.x20 = tmpcoeff.x20/4;  matrixresult.x21 = tmpcoeff.x21/4;
+			matrixresult.x22 = tmpcoeff.x22/4;  matrixresult.x23 = tmpcoeff.x23/256 + 8;
+		}
+	} else { /* if(out_csc == DE_YUV_HDMI) */ /* YUV for HDMI(range 16-235) */
+		for(i=0; i<16; i++) {
+			*((__s64 *)(&tmpcoeff.x00) + i)  = ((__s64)*(image_enhance_tab + i) <<32)>>32;	//bt601 rgb2yuv coeff
+		}
+
+		if(enhance_en == 1) {
+			//convolution of enhance matrix and rgb2yuv matrix
+
+			ptmatrix = &tmpcoeff;
+
+			iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+
+			matrixresult.x00 = matrixconv.x20/4;	matrixresult.x01 = matrixconv.x21/4;
+			matrixresult.x02 = matrixconv.x22/4;	matrixresult.x03 = matrixconv.x23/256 + 8;
+			matrixresult.x10 = matrixconv.x00/4;	matrixresult.x11 = matrixconv.x01/4;
+			matrixresult.x12 = matrixconv.x02/4;	matrixresult.x13 = matrixconv.x03/256 + 8;
+			matrixresult.x20 = matrixconv.x10/4;	matrixresult.x21 = matrixconv.x11/4;
+			matrixresult.x22 = matrixconv.x12/4;	matrixresult.x23 = matrixconv.x13/256 + 8;
+		} else {
+			matrixresult.x00 = tmpcoeff.x20/4;	matrixresult.x01 = tmpcoeff.x21/4;
+			matrixresult.x02 = tmpcoeff.x22/4;	matrixresult.x03 = tmpcoeff.x23/256 + 8;
+			matrixresult.x10 = tmpcoeff.x00/4;	matrixresult.x11 = tmpcoeff.x01/4;
+			matrixresult.x12 = tmpcoeff.x02/4;	matrixresult.x13 = tmpcoeff.x03/256 + 8;
+			matrixresult.x20 = tmpcoeff.x10/4;	matrixresult.x21 = tmpcoeff.x11/4;
+			matrixresult.x22 = tmpcoeff.x12/4;	matrixresult.x23 = tmpcoeff.x13/256 + 8;
+		}
+	}
+
+	//range limited
+	iDE_SCAL_Csc_Lmt(&matrixresult.x00, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x01, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x02, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x03, -16383, 16383, 0, 32767);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x10, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x11, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x12, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x13, -16383, 16383, 0, 32767);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x20, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x21, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x22, -8191, 8191, 0, 16383);
+	iDE_SCAL_Csc_Lmt(&matrixresult.x23, -16383, 16383, 0, 32767);
+
+	//write csc register
+	pt = (__s64*)&(matrixresult.x00);
+
+	for(i=0;i<4;i++)
+	{
+		DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_R_COEFF_OFF+ 4*i, (__u32 )(*(pt + i)));
+		DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_G_COEFF_OFF+ 4*i, (__u32 )(*(pt + 4 + i)));
+		DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_B_COEFF_OFF+ 4*i, (__u32 )(*(pt + 8 + i)));
+	}
+
+	DE_BE_enhance_enable(sel, 1);
+
+	return 0;
+}
+#else
 //brightness -100~100
 //contrast -100~100
 //saturaion -100~100
@@ -1016,6 +1228,7 @@ __s32 DE_BE_Set_Enhance(__u8 sel, __u32 out_csc, __u32 out_color_range, __s32 br
 	DE_BE_enhance_enable(sel, 1);
     return 0;
 }
+#endif /* CONFIG_ARCH_SUN4I */
 
 __s32 DE_BE_enhance_enable(__u32 sel, __bool enable)
 {
@@ -1044,8 +1257,6 @@ __s32 DE_BE_Set_Outitl_enable(__u32 sel, __bool enable)
 {
 	DE_BE_WUINT32(sel, DE_BE_MODE_CTL_OFF,(DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF)&(~(1<<28))) | (enable<<28));
 
-
-
     return 0;
 }
 
diff --git a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.c b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.c
index 68b8a02..44a2a43 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.c
+++ b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.c
@@ -1415,7 +1415,6 @@ __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_mat
 
 
 //*********************************************************************************************
-// function         : iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
 // description      : csc coefficient and constant limited
 // parameters       :
 //                value<coefficient or constant>
@@ -1423,6 +1422,21 @@ __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_mat
 // return           :
 //               success
 //***********************************************************************************************
+#ifdef CONFIG_ARCH_SUN4I
+__s32 iDE_SCAL_Csc_Lmt(__s64 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
+{
+    __s64 tmp;
+    tmp = (*value)>>shift;
+   if(tmp < min)
+    *value = min & validbit;
+   else if(tmp > max)
+     *value = max & validbit;
+   else
+     *value = tmp & validbit;
+
+   return 0;
+}
+#else
 __s32 iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
 {
     __s32 tmp;
@@ -1436,12 +1450,9 @@ __s32 iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 va
 
    return 0;
 }
-
+#endif /* CONFIG_ARCH_SUN4I */
 
 //*********************************************************************************************
-// function         : DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs,
-//                                                   __s32  bright, __s32 contrast, __s32 saturaion, __s32 hue,
-//                                                   __u32  in_br_swap, __u32 out_br_swap)
 // description      : set scaler input/output color space convert coefficients
 // parameters       :
 //                 sel <scaler select>
@@ -1473,7 +1484,9 @@ __s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode
 	__scal_matrix4x4 matrixEn;
 	__scal_matrix4x4 matrixconv, *ptmatrix;
 	__scal_matrix4x4 matrixresult;
-    __s32 *pt;
+#ifdef CONFIG_ARCH_SUN4I
+	__scal_matrix4x4 tmpcoeff;
+#endif
 	__u32 i;
 	__s32 sinv, cosv;   //sin_tab: 7 bit fractional
 
@@ -1481,6 +1494,7 @@ __s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode
 	bright = saturaion*64/100;
 	bright = contrast*64/100;
 	bright = hue*64/100;
+
 	sinv = image_enhance_tab[8*12 + (hue&0x3f)];
 	cosv = image_enhance_tab[8*12 + 8*8 + (hue&0x3f)];
 
@@ -1501,6 +1515,99 @@ __s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode
 	matrixEn.x32 = 0;
 	matrixEn.x33 = 1024;
 
+#ifdef CONFIG_ARCH_SUN4I
+	if((incs == 0) && (outcs == 0))  //rgb to rgb
+	{
+		for(i=0; i<16; i++)
+		{
+			*((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + (in_csc_mode<<5) + i) <<32)>>32;		//RGB2YUV
+
+		}
+
+		ptmatrix = &tmpcoeff;
+
+		//convolution of enhance matrix and rgb2yuv matrix
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+
+		for(i=0; i<16; i++)
+		{
+			*((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + (in_csc_mode<<5) + 0x10 + i) <<32)>>32;	//YUV2RGB
+		}
+
+		ptmatrix = &tmpcoeff;
+
+		//convert to RGB
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixconv, &matrixconv);
+
+        matrixresult.x00 = (matrixconv.x11+8)/16;  matrixresult.x01 = (matrixconv.x10+8)/16;
+        matrixresult.x02 = (matrixconv.x12+8)/16;  matrixresult.x03 = (matrixconv.x13+512)/1024;
+        matrixresult.x10 = (matrixconv.x01+8)/16;  matrixresult.x11 = (matrixconv.x00+8)/16;
+        matrixresult.x12 = (matrixconv.x02+8)/16;  matrixresult.x13 = (matrixconv.x03+512)/1024;
+        matrixresult.x20 = (matrixconv.x21+8)/16;  matrixresult.x21 = (matrixconv.x20+8)/16;
+        matrixresult.x22 = (matrixconv.x22+8)/16;  matrixresult.x23 = (matrixconv.x23+512)/1024;
+        matrixresult.x30 = (matrixconv.x31+8)/16;  matrixresult.x31 = (matrixconv.x30+8)/16;
+        matrixresult.x32 = (matrixconv.x32+8)/16;  matrixresult.x33 = (matrixconv.x33+8)/16;
+
+	}
+	else if((incs == 1) && (outcs == 0)) //yuv to rgb
+	{
+		for(i=0; i<16; i++)
+		{
+			*((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + (in_csc_mode<<5) + 0x10 + i) <<32)>>32;	//YUV2RGB
+		}
+
+		ptmatrix = &tmpcoeff;
+
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixEn, &matrixconv);
+        matrixresult.x00 = matrixconv.x10/4;  matrixresult.x01 = matrixconv.x11/4;
+        matrixresult.x02 = matrixconv.x12/4;  matrixresult.x03 = matrixconv.x13/256;
+        matrixresult.x10 = matrixconv.x00/4;  matrixresult.x11 = matrixconv.x01/4;
+        matrixresult.x12 = matrixconv.x02/4;  matrixresult.x13 = matrixconv.x03/256;
+        matrixresult.x20 = matrixconv.x20/4;  matrixresult.x21 = matrixconv.x21/4;
+        matrixresult.x22 = matrixconv.x22/4;  matrixresult.x23 = matrixconv.x23/256;
+        matrixresult.x30 = matrixconv.x30/4;  matrixresult.x31 = matrixconv.x31/4;
+        matrixresult.x32 = matrixconv.x32/4;  matrixresult.x33 = matrixconv.x33/4;
+
+	}
+	else if((incs == 0) && (outcs == 1)) //rgb to yuv
+	{
+		for(i=0; i<16; i++)
+		{
+			*((__s64 *)(&tmpcoeff.x00) + i) = ((__s64)*(image_enhance_tab + (in_csc_mode<<5) + i) <<32)>>32;	//RGB2YUV
+		}
+
+		ptmatrix = &tmpcoeff;
+
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+        matrixresult.x00 = matrixconv.x01/4;  matrixresult.x01 = matrixconv.x00/4;
+        matrixresult.x02 = matrixconv.x02/4;  matrixresult.x03 = matrixconv.x03/256;
+        matrixresult.x10 = matrixconv.x11/4;  matrixresult.x11 = matrixconv.x10/4;
+        matrixresult.x12 = matrixconv.x12/4;  matrixresult.x13 = matrixconv.x13/256;
+        matrixresult.x20 = matrixconv.x21/4;  matrixresult.x21 = matrixconv.x20/4;
+        matrixresult.x22 = matrixconv.x22/4;  matrixresult.x23 = matrixconv.x23/256;
+        matrixresult.x30 = matrixconv.x31/4;  matrixresult.x31 = matrixconv.x30/4;
+        matrixresult.x32 = matrixconv.x32/4;  matrixresult.x33 = matrixconv.x33/4;
+	}
+	else  //yuv to yuv
+	{
+		matrixresult = matrixEn;
+	}
+
+    //data bit convert, 1 bit  sign, 2 bit integer, 10 bits fractrional for coefficient; 1 bit sign,9 bit integer, 4 bit fractional for constant
+    //range limited
+    iDE_SCAL_Csc_Lmt(&matrixresult.x00, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x01, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x02, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x03, -8191, 8191, 0, 16383);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x10, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x11, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x12, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x13, -8191, 8191, 0, 16383);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x20, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x21, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x22, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x23, -8191, 8191, 0, 16383);
+#else
 	if((incs == 0) && (outcs == 0))  //rgb to rgb
 	{
 		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7) + 0x40);
@@ -1563,22 +1670,29 @@ __s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode
     iDE_SCAL_Csc_Lmt(&matrixresult.x21, -4095, 4095, 0, 8191);
     iDE_SCAL_Csc_Lmt(&matrixresult.x22, -4095, 4095, 0, 8191);
     iDE_SCAL_Csc_Lmt(&matrixresult.x23, -8191, 8191, 6, 16383);
+#endif /* CONFIG_ARCH_SUN4I */
 
     //write csc register
-    pt = &(matrixresult.x00);
-    for(i=0; i<4; i++)
     {
-        scal_dev[sel]->csc_coef[i].dwval = *(pt + i);
-		scal_dev[sel]->csc_coef[i+4 + out_br_swap * 4].dwval =  *(pt + i + 4 + in_br_swap * 4);
-		scal_dev[sel]->csc_coef[i+8 - out_br_swap * 4].dwval =  *(pt + i + 8 - in_br_swap * 4);
-	}
+#ifdef CONFIG_ARCH_SUN4I
+	    __s64 *pt = &(matrixresult.x00);
+#else
+	    __s32 *pt = &(matrixresult.x00);
+#endif
 
+	    for(i=0; i<4; i++) {
+		    scal_dev[sel]->csc_coef[i].dwval = *(pt + i);
+		    scal_dev[sel]->csc_coef[i+4 + out_br_swap * 4].dwval =
+			    *(pt + i + 4 + in_br_swap * 4);
+		    scal_dev[sel]->csc_coef[i+8 - out_br_swap * 4].dwval =
+			    *(pt + i + 8 - in_br_swap * 4);
+	    }
+    }
     scal_dev[sel]->bypass.bits.csc_bypass_en = 0;
 
 	return 0;
 }
 
-
 //*********************************************************************************************
 // function         : DE_SCAL_Get_3D_In_Single_Size( __scal_3d_inmode_t inmode, __scal_src_size_t *fullsize,__scal_src_size_t *singlesize)
 // description     : get single image size according to 3D inmode and full size
diff --git a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.h b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.h
index e6a6142..42079c8 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.h
+++ b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/de_fe.h
@@ -1520,7 +1520,30 @@ typedef struct __DE_SCAL_DEV
 	SCAL_VPP_BLE_REG         	    vpp_ble            ;//0xa14
 }__de_scal_dev_t;
 
+#ifdef CONFIG_ARCH_SUN4I
+typedef struct __SCAL_MATRIX4X4
+{
+	__s64 x00;
+	__s64 x01;
+	__s64 x02;
+	__s64 x03;
+	__s64 x10;
+	__s64 x11;
+	__s64 x12;
+	__s64 x13;
+	__s64 x20;
+	__s64 x21;
+	__s64 x22;
+	__s64 x23;
+	__s64 x30;
+	__s64 x31;
+	__s64 x32;
+	__s64 x33;
+}__scal_matrix4x4;
 
+extern __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_matrix4x4 *result);
+extern __s32 iDE_SCAL_Csc_Lmt(__s64 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit);
+#else
 typedef struct __SCAL_MATRIX4X4
 {
 	__s32 x00;
@@ -1543,5 +1566,6 @@ typedef struct __SCAL_MATRIX4X4
 
 extern __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_matrix4x4 *result);
 extern __s32 iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit);
+#endif /* CONFIG_ARCH_SUN4I */
 
 #endif
diff --git a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/ebios_de.h b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/ebios_de.h
index dab282d..745f888 100644
--- a/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/ebios_de.h
+++ b/drivers/video/sunxi/disp/de_bsp_sun5i/de/ebios/ebios_de.h
@@ -362,7 +362,11 @@ __s32 DE_BE_Sprite_Block_Set_Size(__u32 sel, __u8 blk_idx,__u32 xsize,__u32 ysiz
 __s32 DE_BE_Sprite_Block_Set_fb(__u32 sel, __u8 blk_idx,__u32 addr, __u32 line_width);
 __s32 DE_BE_Sprite_Block_Set_Next_Id(__u32 sel, __u8 blk_idx,__u8 next_blk_id);
 __s32 DE_BE_Sprite_Set_Palette_Table(__u32 sel, __u32 address, __u32 offset, __u32 size);
+#ifdef CONFIG_ARCH_SUN4I
+__s32 DE_BE_Set_Enhance_ex(__u8 sel, __csc_t out_csc, __u32 out_color_range, __u32 enhance_en, __u32 brightness, __u32 contrast, __u32 saturaion, __u32 hue);
+#else
 __s32 DE_BE_Set_Enhance(__u8 sel, __u32 out_csc, __u32 out_color_range, __s32 brightness, __s32 contrast, __s32 saturaion, __s32 hue);
+#endif
 __s32 DE_BE_enhance_enable(__u32 sel, __bool enable);
 __s32 DE_BE_set_display_size(__u32 sel, __u32 width, __u32 height);
 __s32 DE_BE_get_display_width(__u32 sel);
-- 
1.8.0


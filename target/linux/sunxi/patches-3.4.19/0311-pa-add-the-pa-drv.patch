From e3b4324015543cd993d344eb176bf6183474a988 Mon Sep 17 00:00:00 2001
From: huangxin <huangxin@LServer.(none)>
Date: Tue, 15 Nov 2011 18:35:13 +0800
Subject: [PATCH 311/944] pa:add the pa drv

---
 drivers/media/Kconfig       |  10 +++
 drivers/media/Makefile      |   1 +
 drivers/media/pa/Kconfig    |   4 ++
 drivers/media/pa/Makefile   |   2 +
 drivers/media/pa/sun4i_pa.c | 152 ++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 169 insertions(+)
 create mode 100644 drivers/media/pa/Kconfig
 create mode 100644 drivers/media/pa/Makefile
 create mode 100644 drivers/media/pa/sun4i_pa.c

diff --git a/drivers/media/Kconfig b/drivers/media/Kconfig
index 11489c5..87762dd 100644
--- a/drivers/media/Kconfig
+++ b/drivers/media/Kconfig
@@ -131,6 +131,16 @@ config AUDIO_ENGINE
 source "drivers/media/audio/Kconfig"
 
 #
+# PA CONTROL
+#
+config PA_CONTROL
+	tristate "PA Control"
+	---help---
+	  Support for audio pa control
+
+source "drivers/media/pa/Kconfig"
+
+#
 # DVB adapters
 #
 
diff --git a/drivers/media/Makefile b/drivers/media/Makefile
index 4ef41a4..89321ed 100644
--- a/drivers/media/Makefile
+++ b/drivers/media/Makefile
@@ -13,3 +13,4 @@ obj-y += common/ rc/ video/
 obj-$(CONFIG_VIDEO_DEV) += radio/
 obj-$(CONFIG_DVB_CORE)  += dvb/
 obj-$(CONFIG_AUDIO_ENGINE) += audio/
+obj-$(CONFIG_PA_CONTROL) += pa/
\ No newline at end of file
diff --git a/drivers/media/pa/Kconfig b/drivers/media/pa/Kconfig
new file mode 100644
index 0000000..2c7f998
--- /dev/null
+++ b/drivers/media/pa/Kconfig
@@ -0,0 +1,4 @@
+config PA_CONFIG
+	tristate "pa mamage config"
+	default y
+	depends on PA_CONTROL
diff --git a/drivers/media/pa/Makefile b/drivers/media/pa/Makefile
new file mode 100644
index 0000000..7b1e8b8
--- /dev/null
+++ b/drivers/media/pa/Makefile
@@ -0,0 +1,2 @@
+
+obj-$(CONFIG_PA_CONFIG) += sun4i_pa.o
diff --git a/drivers/media/pa/sun4i_pa.c b/drivers/media/pa/sun4i_pa.c
new file mode 100644
index 0000000..cc0ac7e
--- /dev/null
+++ b/drivers/media/pa/sun4i_pa.c
@@ -0,0 +1,152 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/ioctl.h>
+#include <linux/fs.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/list.h>
+#include <linux/errno.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/preempt.h>
+#include <linux/cdev.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/dma.h>
+#include <mach/hardware.h>
+#include <asm/system.h>
+#include <linux/rmap.h>
+#include <linux/string.h>
+#ifdef CONFIG_PM
+#include <linux/pm.h>
+#endif
+#include <mach/sys_config.h>
+#include <mach/system.h>
+
+static int gpio_pa_shutdown = 0;
+static struct class *pa_dev_class;
+static struct cdev *pa_dev;
+static dev_t dev_num ;
+
+//#define PA_DEBUG
+typedef enum PA_OPT
+{
+	PA_OPEN = 200,
+	PA_CLOSE,
+	PA_DEV_
+}__ace_ops_e;
+
+
+static int pa_dev_open(struct inode *inode, struct file *filp){
+	#ifdef PA_DEBUG
+	 printk("%s,%d\n", __func__, __LINE__);
+	 #endif
+    return 0;
+}
+
+static int pa_dev_release(struct inode *inode, struct file *filp){
+	#ifdef PA_DEBUG
+	 printk("%s,%d\n", __func__, __LINE__);
+	 #endif
+    return 0;
+}
+
+static long
+pa_dev_ioctl(struct file *filp, unsigned int cmd, unsigned long arg){
+
+	switch (cmd) {
+		case PA_OPEN:
+			#ifdef PA_DEBUG
+			printk("%s,%d\n", __func__, __LINE__);
+			#endif
+			gpio_write_one_pin_value(gpio_pa_shutdown, 1, "audio_pa_ctrl");
+			break;
+		case PA_CLOSE:
+			#ifdef PA_DEBUG
+			printk("%s,%d\n", __func__, __LINE__);
+			#endif
+			gpio_write_one_pin_value(gpio_pa_shutdown, 0, "audio_pa_ctrl");
+			break;
+		default:
+			break;
+	}
+	return 0;
+}
+
+static int snd_sw_pa_suspend(struct platform_device *pdev,pm_message_t state)
+{
+	return 0;
+}
+
+static int snd_sw_pa_resume(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct file_operations pa_dev_fops = {
+    .owner =    THIS_MODULE,
+    .unlocked_ioctl = pa_dev_ioctl,
+    .open           = pa_dev_open,
+    .release        = pa_dev_release,
+};
+
+/*data relating*/
+static struct platform_device sw_device_pa = {
+	.name = "sun4i-pa",
+};
+
+/*method relating*/
+static struct platform_driver sw_pa_driver = {
+#ifdef CONFIG_PM
+	.suspend	= snd_sw_pa_suspend,
+	.resume		= snd_sw_pa_resume,
+#endif
+	.driver		= {
+		.name	= "sun4i-pa",
+	},
+};
+
+static int __init pa_dev_init(void)
+{
+//    int status = 0;
+    int err = 0;
+	printk("[pa_drv] start!!!\n");
+
+	if((platform_device_register(&sw_device_pa))<0)
+		return err;
+
+	if ((err = platform_driver_register(&sw_pa_driver)) < 0)
+		return err;
+
+
+    alloc_chrdev_region(&dev_num, 0, 1, "pa_chrdev");
+    pa_dev = cdev_alloc();
+    cdev_init(pa_dev, &pa_dev_fops);
+    pa_dev->owner = THIS_MODULE;
+    err = cdev_add(pa_dev, dev_num, 1);
+    if (err){
+    	printk(KERN_NOTICE"Error %d adding pa_dev!\n", err);
+        return -1;
+    }
+    pa_dev_class = class_create(THIS_MODULE, "pa_cls");
+    device_create(pa_dev_class, NULL,
+                  dev_num, NULL, "pa_dev");
+    printk("[pa_drv] init end!!!\n");
+    return 0;
+}
+module_init(pa_dev_init);
+
+static void __exit pa_dev_exit(void)
+{
+    device_destroy(pa_dev_class,  dev_num);
+    class_destroy(pa_dev_class);
+    platform_driver_unregister(&sw_pa_driver);
+}
+module_exit(pa_dev_exit);
+
+MODULE_AUTHOR("young");
+MODULE_DESCRIPTION("User mode encrypt device interface");
+MODULE_LICENSE("GPL");
+
-- 
1.8.0


From c775562bf22534d38404756ac77ff812de4b91e4 Mon Sep 17 00:00:00 2001
From: Benn Huang <benn@allwinnertech.com>
Date: Tue, 15 Nov 2011 14:03:47 +0800
Subject: [PATCH 301/944] [sun4i] port lcd, g2d driver

---
 drivers/Makefile                                   |     2 +-
 drivers/char/Kconfig                               |     2 +
 drivers/char/Makefile                              |     1 +
 drivers/char/sun4i_g2d/Kconfig                     |     8 +
 drivers/char/sun4i_g2d/Makefile                    |     7 +
 drivers/char/sun4i_g2d/g2d.c                       |   298 +
 drivers/char/sun4i_g2d/g2d.h                       |    29 +
 drivers/char/sun4i_g2d/g2d_bsp.c                   |  1270 ++
 drivers/char/sun4i_g2d/g2d_bsp.h                   |   265 +
 drivers/char/sun4i_g2d/g2d_driver.c                |   622 +
 drivers/char/sun4i_g2d/g2d_driver_i.h              |    78 +
 drivers/char/sun4i_g2d/g2d_regs.h                  |   156 +
 drivers/video/Kconfig                              |    18 +
 drivers/video/Makefile                             |     3 +
 .../sun4i/A10_linux_display_driver_interface.xls   |   Bin 0 -> 64512 bytes
 drivers/video/sun4i/adb_push.bat                   |    14 +
 drivers/video/sun4i/disp/Makefile                  |    13 +
 drivers/video/sun4i/disp/OSAL/OSAL.h               |    42 +
 drivers/video/sun4i/disp/OSAL/OSAL_Cache.c         |    94 +
 drivers/video/sun4i/disp/OSAL/OSAL_Cache.h         |    57 +
 drivers/video/sun4i/disp/OSAL/OSAL_Clock.c         |   443 +
 drivers/video/sun4i/disp/OSAL/OSAL_Clock.h         |   250 +
 drivers/video/sun4i/disp/OSAL/OSAL_Dma.c           |   428 +
 drivers/video/sun4i/disp/OSAL/OSAL_Dma.h           |   390 +
 drivers/video/sun4i/disp/OSAL/OSAL_Int.c           |   124 +
 drivers/video/sun4i/disp/OSAL/OSAL_Int.h           |   127 +
 drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.c       |    39 +
 drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.h       |    29 +
 drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.c         |   150 +
 drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.h         |   109 +
 drivers/video/sun4i/disp/OSAL/OSAL_Parser.c        |    28 +
 drivers/video/sun4i/disp/OSAL/OSAL_Parser.h        |     9 +
 drivers/video/sun4i/disp/OSAL/OSAL_Pin.c           |    81 +
 drivers/video/sun4i/disp/OSAL/OSAL_Pin.h           |    47 +
 drivers/video/sun4i/disp/OSAL/OSAL_Semi.c          |   118 +
 drivers/video/sun4i/disp/OSAL/OSAL_Semi.h          |   109 +
 drivers/video/sun4i/disp/OSAL/OSAL_Thread.c        |    22 +
 drivers/video/sun4i/disp/OSAL/OSAL_Thread.h        |    27 +
 drivers/video/sun4i/disp/OSAL/OSAL_Time.c          |   101 +
 drivers/video/sun4i/disp/OSAL/OSAL_Time.h          |    97 +
 drivers/video/sun4i/disp/de_bsp/bsp_display.h      |   281 +
 drivers/video/sun4i/disp/de_bsp/de/disp_clk.c      |  1249 ++
 drivers/video/sun4i/disp/de_bsp/de/disp_clk.h      |    57 +
 drivers/video/sun4i/disp/de_bsp/de/disp_combined.c |   339 +
 drivers/video/sun4i/disp/de_bsp/de/disp_combined.h |     7 +
 drivers/video/sun4i/disp/de_bsp/de/disp_de.c       |   209 +
 drivers/video/sun4i/disp/de_bsp/de/disp_de.h       |    23 +
 drivers/video/sun4i/disp/de_bsp/de/disp_display.c  |   259 +
 drivers/video/sun4i/disp/de_bsp/de/disp_display.h  |   108 +
 .../video/sun4i/disp/de_bsp/de/disp_display_i.h    |   105 +
 drivers/video/sun4i/disp/de_bsp/de/disp_event.c    |    94 +
 drivers/video/sun4i/disp/de_bsp/de/disp_event.h    |    14 +
 drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.c     |   220 +
 drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.h     |    10 +
 drivers/video/sun4i/disp/de_bsp/de/disp_hwc.c      |    52 +
 drivers/video/sun4i/disp/de_bsp/de/disp_hwc.h      |    11 +
 drivers/video/sun4i/disp/de_bsp/de/disp_layer.c    |  1441 ++
 drivers/video/sun4i/disp/de_bsp/de/disp_layer.h    |    42 +
 drivers/video/sun4i/disp/de_bsp/de/disp_lcd.c      |  1616 ++
 drivers/video/sun4i/disp/de_bsp/de/disp_lcd.h      |    28 +
 drivers/video/sun4i/disp/de_bsp/de/disp_scaler.c   |  1227 +
 drivers/video/sun4i/disp/de_bsp/de/disp_scaler.h   |    72 +
 drivers/video/sun4i/disp/de_bsp/de/disp_sprite.c   |  1115 +
 drivers/video/sun4i/disp/de_bsp/de/disp_sprite.h   |    52 +
 drivers/video/sun4i/disp/de_bsp/de/disp_tv.c       |   453 +
 drivers/video/sun4i/disp/de_bsp/de/disp_tv.h       |    14 +
 drivers/video/sun4i/disp/de_bsp/de/disp_vga.c      |   121 +
 drivers/video/sun4i/disp/de_bsp/de/disp_vga.h      |     8 +
 drivers/video/sun4i/disp/de_bsp/de/disp_video.c    |   334 +
 drivers/video/sun4i/disp/de_bsp/de/disp_video.h    |    54 +
 drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.c   |   752 +
 drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.h   |   115 +
 drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.c   |  2550 +++
 drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.h   |  1519 ++
 drivers/video/sun4i/disp/de_bsp/de/ebios/de_hwc.c  |   131 +
 .../video/sun4i/disp/de_bsp/de/ebios/de_layer.c    |   436 +
 drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc.c |  1619 ++
 .../video/sun4i/disp/de_bsp/de/ebios/de_lcdc_i.h   |   104 +
 drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec.c |   673 +
 .../video/sun4i/disp/de_bsp/de/ebios/de_tvec_i.h   |    49 +
 .../video/sun4i/disp/de_bsp/de/ebios/ebios_de.h    |   348 +
 .../sun4i/disp/de_bsp/de/ebios/ebios_lcdc_tve.h    |   190 +
 drivers/video/sun4i/disp/de_bsp/de/ebios/vga_std.c |    31 +
 drivers/video/sun4i/disp/dev_disp.c                |  2017 ++
 drivers/video/sun4i/disp/dev_disp.h                |    94 +
 drivers/video/sun4i/disp/dev_fb.c                  |  1431 ++
 drivers/video/sun4i/disp/drv_disp_i.h              |    43 +
 drivers/video/sun4i/disp/list.txt                  | 22238 +++++++++++++++++++
 drivers/video/sun4i/hdmi/Makefile                  |     8 +
 drivers/video/sun4i/hdmi/aw/hdmi_core.c            |   478 +
 drivers/video/sun4i/hdmi/aw/hdmi_core.h            |    80 +
 drivers/video/sun4i/hdmi/aw/hdmi_edid.c            |   406 +
 drivers/video/sun4i/hdmi/aw/hdmi_hal.c             |   145 +
 drivers/video/sun4i/hdmi/aw/hdmi_interface.c       |    16 +
 drivers/video/sun4i/hdmi/aw/hdmi_interface.h       |     7 +
 drivers/video/sun4i/hdmi/dev_hdmi.c                |   224 +
 drivers/video/sun4i/hdmi/dev_hdmi.h                |    29 +
 drivers/video/sun4i/hdmi/drv_hdmi.c                |   278 +
 drivers/video/sun4i/hdmi/drv_hdmi_i.h              |    67 +
 drivers/video/sun4i/hdmi/hdmi_hal.h                |    48 +
 drivers/video/sun4i/lcd/A10_lcd_config_manual.doc  |   Bin 0 -> 131584 bytes
 drivers/video/sun4i/lcd/Makefile                   |     4 +
 drivers/video/sun4i/lcd/config_lcd.bat             |    41 +
 drivers/video/sun4i/lcd/dev_lcd.c                  |   119 +
 drivers/video/sun4i/lcd/dev_lcd.h                  |    47 +
 drivers/video/sun4i/lcd/lcd0_panel_cfg.c           |   146 +
 drivers/video/sun4i/lcd/lcd1_panel_cfg.c           |   146 +
 .../video/sun4i/lcd/lcd_bak/TC101+tl080wx800-v0.c  |   362 +
 drivers/video/sun4i/lcd/lcd_bak/TC102.c            |   493 +
 drivers/video/sun4i/lcd/lcd_bak/hv_800x480.c       |   146 +
 drivers/video/sun4i/lcd/lcd_bak/lvds_1080.c        |   146 +
 drivers/video/sun4i/lcd/lcd_panel_cfg.h            |    79 +
 include/linux/drv_display.h                        |    23 +
 include/linux/drv_display_sun4i.h                  |   762 +
 include/linux/drv_hdmi.h                           |    29 +
 include/linux/g2d_driver.h                         |   233 +
 116 files changed, 54223 insertions(+), 1 deletion(-)
 create mode 100644 drivers/char/sun4i_g2d/Kconfig
 create mode 100644 drivers/char/sun4i_g2d/Makefile
 create mode 100644 drivers/char/sun4i_g2d/g2d.c
 create mode 100644 drivers/char/sun4i_g2d/g2d.h
 create mode 100644 drivers/char/sun4i_g2d/g2d_bsp.c
 create mode 100644 drivers/char/sun4i_g2d/g2d_bsp.h
 create mode 100644 drivers/char/sun4i_g2d/g2d_driver.c
 create mode 100644 drivers/char/sun4i_g2d/g2d_driver_i.h
 create mode 100644 drivers/char/sun4i_g2d/g2d_regs.h
 create mode 100644 drivers/video/sun4i/A10_linux_display_driver_interface.xls
 create mode 100644 drivers/video/sun4i/adb_push.bat
 create mode 100644 drivers/video/sun4i/disp/Makefile
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Cache.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Cache.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Clock.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Clock.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Dma.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Dma.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Int.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Int.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Parser.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Parser.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Pin.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Pin.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Semi.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Semi.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Thread.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Thread.h
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Time.c
 create mode 100644 drivers/video/sun4i/disp/OSAL/OSAL_Time.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/bsp_display.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_clk.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_clk.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_combined.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_combined.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_de.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_de.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_display.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_display.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_display_i.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_event.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_event.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_hwc.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_hwc.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_layer.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_layer.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_lcd.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_lcd.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_scaler.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_scaler.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_sprite.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_sprite.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_tv.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_tv.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_vga.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_vga.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_video.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/disp_video.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_hwc.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_layer.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc_i.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec.c
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec_i.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_de.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_lcdc_tve.h
 create mode 100644 drivers/video/sun4i/disp/de_bsp/de/ebios/vga_std.c
 create mode 100644 drivers/video/sun4i/disp/dev_disp.c
 create mode 100644 drivers/video/sun4i/disp/dev_disp.h
 create mode 100644 drivers/video/sun4i/disp/dev_fb.c
 create mode 100644 drivers/video/sun4i/disp/drv_disp_i.h
 create mode 100644 drivers/video/sun4i/disp/list.txt
 create mode 100644 drivers/video/sun4i/hdmi/Makefile
 create mode 100644 drivers/video/sun4i/hdmi/aw/hdmi_core.c
 create mode 100644 drivers/video/sun4i/hdmi/aw/hdmi_core.h
 create mode 100644 drivers/video/sun4i/hdmi/aw/hdmi_edid.c
 create mode 100644 drivers/video/sun4i/hdmi/aw/hdmi_hal.c
 create mode 100644 drivers/video/sun4i/hdmi/aw/hdmi_interface.c
 create mode 100644 drivers/video/sun4i/hdmi/aw/hdmi_interface.h
 create mode 100644 drivers/video/sun4i/hdmi/dev_hdmi.c
 create mode 100644 drivers/video/sun4i/hdmi/dev_hdmi.h
 create mode 100644 drivers/video/sun4i/hdmi/drv_hdmi.c
 create mode 100644 drivers/video/sun4i/hdmi/drv_hdmi_i.h
 create mode 100644 drivers/video/sun4i/hdmi/hdmi_hal.h
 create mode 100644 drivers/video/sun4i/lcd/A10_lcd_config_manual.doc
 create mode 100644 drivers/video/sun4i/lcd/Makefile
 create mode 100644 drivers/video/sun4i/lcd/config_lcd.bat
 create mode 100644 drivers/video/sun4i/lcd/dev_lcd.c
 create mode 100644 drivers/video/sun4i/lcd/dev_lcd.h
 create mode 100644 drivers/video/sun4i/lcd/lcd0_panel_cfg.c
 create mode 100644 drivers/video/sun4i/lcd/lcd1_panel_cfg.c
 create mode 100644 drivers/video/sun4i/lcd/lcd_bak/TC101+tl080wx800-v0.c
 create mode 100644 drivers/video/sun4i/lcd/lcd_bak/TC102.c
 create mode 100644 drivers/video/sun4i/lcd/lcd_bak/hv_800x480.c
 create mode 100644 drivers/video/sun4i/lcd/lcd_bak/lvds_1080.c
 create mode 100644 drivers/video/sun4i/lcd/lcd_panel_cfg.h
 create mode 100644 include/linux/drv_display.h
 create mode 100644 include/linux/drv_display_sun4i.h
 create mode 100644 include/linux/drv_hdmi.h
 create mode 100644 include/linux/g2d_driver.h

diff --git a/drivers/Makefile b/drivers/Makefile
index b5d2823..45e9201 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -122,7 +122,7 @@ obj-$(CONFIG_STAGING)		+= staging/
 obj-y				+= platform/
 obj-y				+= ieee802154/
 #common clk code
-obj-y				+= clk/
+#obj-y				+= clk/
 
 obj-$(CONFIG_HWSPINLOCK)	+= hwspinlock/
 obj-$(CONFIG_NFC)		+= nfc/
diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index f48cd68..e775f75 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -629,5 +629,7 @@ config TILE_SROM
 	  device appear much like a simple EEPROM, and knows
 	  how to partition a single ROM for multiple purposes.
 
+source "drivers/char/sun4i_g2d/Kconfig"
+
 endmenu
 
diff --git a/drivers/char/Makefile b/drivers/char/Makefile
index 8f18891..70a3058 100644
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -62,6 +62,7 @@ obj-$(CONFIG_PS3_FLASH)		+= ps3flash.o
 obj-$(CONFIG_RAMOOPS)		+= ramoops.o
 
 obj-$(CONFIG_JS_RTC)		+= js-rtc.o
+obj-$(CONFIG_SUN4I_G2D) += sun4i_g2d/
 js-rtc-y = rtc.o
 
 obj-$(CONFIG_TILE_SROM)		+= tile-srom.o
diff --git a/drivers/char/sun4i_g2d/Kconfig b/drivers/char/sun4i_g2d/Kconfig
new file mode 100644
index 0000000..6c53749
--- /dev/null
+++ b/drivers/char/sun4i_g2d/Kconfig
@@ -0,0 +1,8 @@
+
+config SUN4I_G2D
+	tristate "SUN4I G2D"
+	default y
+#	depends on HAS_IOMEM
+	help
+
+
diff --git a/drivers/char/sun4i_g2d/Makefile b/drivers/char/sun4i_g2d/Makefile
new file mode 100644
index 0000000..f847f517
--- /dev/null
+++ b/drivers/char/sun4i_g2d/Makefile
@@ -0,0 +1,7 @@
+#
+# Makefile for the kernel mixer device drivers.
+#
+
+obj-$(CONFIG_SUN4I_G2D) 	+= g2d_23.o
+
+g2d_23-objs	:= g2d_driver.o g2d.o g2d_bsp.o
diff --git a/drivers/char/sun4i_g2d/g2d.c b/drivers/char/sun4i_g2d/g2d.c
new file mode 100644
index 0000000..68d47ee
--- /dev/null
+++ b/drivers/char/sun4i_g2d/g2d.c
@@ -0,0 +1,298 @@
+#include "g2d.h"
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <mach/clock.h>
+#include "g2d_driver_i.h"
+
+struct clk *g2d_ahbclk,*g2d_dramclk,*g2d_mclk,*g2d_src;
+extern __g2d_drv_t	 g2d_ext_hd;
+
+int g2d_openclk(void)
+{
+	__u32 ret;
+
+	/* ahb g2d gating */
+	g2d_ahbclk = clk_get(NULL,"ahb_de_mix");
+
+	/* sdram g2d gating */
+	g2d_dramclk = clk_get(NULL,"sdram_de_mix");
+
+	/* g2d gating */
+	g2d_mclk = clk_get(NULL,"de_mix");
+
+	/*disable mp clk reset*/
+	clk_reset(g2d_mclk,0);
+
+	/* set g2d clk value */
+	g2d_src = clk_get(NULL,"sdram_pll_p");//video_pll0
+	ret = clk_set_parent(g2d_mclk, g2d_src);
+	clk_put(g2d_src);
+
+	ret = clk_get_rate(g2d_src);
+	clk_set_rate(g2d_mclk,ret/2);
+
+	return 0;
+}
+
+int g2d_closeclk(void)/* used once when g2d driver exit */
+{
+	clk_disable(g2d_ahbclk);
+	clk_disable(g2d_dramclk);
+	clk_disable(g2d_mclk);
+
+	clk_put(g2d_ahbclk);
+	clk_put(g2d_dramclk);
+	clk_put(g2d_mclk);
+
+	return 0;
+}
+
+int g2d_clk_on(void)/* used in request */
+{
+	clk_enable(g2d_ahbclk);
+	clk_enable(g2d_dramclk);
+	clk_enable(g2d_mclk);
+
+	return  0;
+}
+
+int g2d_clk_off(void)/* used in release */
+{
+	clk_disable(g2d_ahbclk);
+	clk_disable(g2d_dramclk);
+	clk_disable(g2d_mclk);
+
+	return  0;
+}
+
+irqreturn_t g2d_handle_irq(int irq, void *dev_id)
+{
+    __u32 irq_flag;
+
+    irq_flag = mixer_get_irq();
+    if(irq_flag & G2D_FINISH_IRQ)
+    {
+		mixer_clear_init();
+		g2d_ext_hd.finish_flag = 1;
+		wake_up(&g2d_ext_hd.queue);
+    }
+
+    return IRQ_HANDLED;
+}
+
+int g2d_init(g2d_init_para *para)
+{
+	mixer_set_reg_base(para->g2d_base);
+
+	return 0;
+}
+
+int g2d_exit(void)
+{
+	__u8 err = 0;
+	g2d_closeclk();
+
+	return err;
+}
+
+int g2d_wait_cmd_finish(void)
+{
+	long timeout = 50; /* 30ms */
+
+	timeout = wait_event_timeout(g2d_ext_hd.queue, g2d_ext_hd.finish_flag == 1, msecs_to_jiffies(timeout));
+	if(timeout == 0)
+	{
+		mixer_clear_init();
+		printk("wait g2d irq pending flag timeout\n");
+		g2d_ext_hd.finish_flag = 1;
+		wake_up(&g2d_ext_hd.queue);
+		return -1;
+	}
+	return 0;
+}
+
+int g2d_blit(g2d_blt * para)
+{
+	__s32 err = 0;
+
+	/* check the parameter valid */
+    if(((para->src_rect.x < 0)&&((-para->src_rect.x) > para->src_rect.w)) ||
+       ((para->src_rect.y < 0)&&((-para->src_rect.y) > para->src_rect.h)) ||
+       ((para->dst_x < 0)&&((-para->dst_x) > para->src_rect.w)) ||
+       ((para->dst_y < 0)&&((-para->dst_y) > para->src_rect.h)) ||
+       ((para->src_rect.x > 0)&&(para->src_rect.x > para->src_image.w - 1)) ||
+       ((para->src_rect.y > 0)&&(para->src_rect.y > para->src_image.h - 1)) ||
+       ((para->dst_x > 0)&&(para->dst_x > para->dst_image.w - 1)) ||
+       ((para->dst_y > 0)&&(para->dst_y > para->dst_image.h - 1)))
+	{
+		printk("invalid blit parameter setting");
+		return -EINVAL;
+	}
+	else
+	{
+		if(((para->src_rect.x < 0)&&((-para->src_rect.x) < para->src_rect.w)))
+		{
+			para->src_rect.w = para->src_rect.w + para->src_rect.x;
+			para->src_rect.x = 0;
+		}
+		else if((para->src_rect.x + para->src_rect.w) > para->src_image.w)
+		{
+			para->src_rect.w = para->src_image.w - para->src_rect.x;
+		}
+		if(((para->src_rect.y < 0)&&((-para->src_rect.y) < para->src_rect.h)))
+		{
+			para->src_rect.h = para->src_rect.h + para->src_rect.y;
+			para->src_rect.y = 0;
+		}
+		else if((para->src_rect.y + para->src_rect.h) > para->src_image.h)
+		{
+			para->src_rect.h = para->src_image.h - para->src_rect.y;
+		}
+
+		if(((para->dst_x < 0)&&((-para->dst_x) < para->src_rect.w)))
+		{
+			para->src_rect.w = para->src_rect.w + para->dst_x;
+			para->src_rect.x = (-para->dst_x);
+			para->dst_x = 0;
+		}
+		else if((para->dst_x + para->src_rect.w) > para->dst_image.w)
+		{
+			para->src_rect.w = para->dst_image.w - para->dst_x;
+		}
+		if(((para->dst_y < 0)&&((-para->dst_y) < para->src_rect.h)))
+		{
+			para->src_rect.h = para->src_rect.h + para->dst_y;
+			para->src_rect.y = (-para->dst_y);
+			para->dst_y = 0;
+		}
+		else if((para->dst_y + para->src_rect.h) > para->dst_image.h)
+		{
+			para->src_rect.h = para->dst_image.h - para->dst_y;
+		}
+	}
+
+	g2d_ext_hd.finish_flag = 0;
+	err = mixer_blt(para);
+
+	return err;
+}
+
+int g2d_fill(g2d_fillrect * para)
+{
+	__s32 err = 0;
+
+	/* check the parameter valid */
+	if(((para->dst_rect.x < 0)&&((-para->dst_rect.x)>para->dst_rect.w)) ||
+	   ((para->dst_rect.y < 0)&&((-para->dst_rect.y)>para->dst_rect.h)) ||
+	   ((para->dst_rect.x > 0)&&(para->dst_rect.x > para->dst_image.w - 1)) ||
+	   ((para->dst_rect.y > 0)&&(para->dst_rect.y > para->dst_image.h - 1)))
+	{
+		printk("invalid fillrect parameter setting");
+		return -EINVAL;
+	}
+	else
+	{
+		if(((para->dst_rect.x < 0)&&((-para->dst_rect.x) < para->dst_rect.w)))
+		{
+			para->dst_rect.w = para->dst_rect.w + para->dst_rect.x;
+			para->dst_rect.x = 0;
+		}
+		else if((para->dst_rect.x + para->dst_rect.w) > para->dst_image.w)
+		{
+			para->dst_rect.w = para->dst_image.w - para->dst_rect.x;
+		}
+		if(((para->dst_rect.y < 0)&&((-para->dst_rect.y) < para->dst_rect.h)))
+		{
+			para->dst_rect.h = para->dst_rect.h + para->dst_rect.y;
+			para->dst_rect.y = 0;
+		}
+		else if((para->dst_rect.y + para->dst_rect.h) > para->dst_image.h)
+		{
+			para->dst_rect.h = para->dst_image.h - para->dst_rect.y;
+		}
+	}
+
+	g2d_ext_hd.finish_flag = 0;
+	err = mixer_fillrectangle(para);
+
+	return err;
+}
+
+int g2d_stretchblit(g2d_stretchblt * para)
+{
+	__s32 err = 0;
+
+	/* check the parameter valid */
+    if(((para->src_rect.x < 0)&&((-para->src_rect.x) > para->src_rect.w)) ||
+       ((para->src_rect.y < 0)&&((-para->src_rect.y) > para->src_rect.h)) ||
+       ((para->dst_rect.x < 0)&&((-para->dst_rect.x) > para->dst_rect.w)) ||
+       ((para->dst_rect.y < 0)&&((-para->dst_rect.y) > para->dst_rect.h)) ||
+       ((para->src_rect.x > 0)&&(para->src_rect.x > para->src_image.w - 1)) ||
+       ((para->src_rect.y > 0)&&(para->src_rect.y > para->src_image.h - 1)) ||
+       ((para->dst_rect.x > 0)&&(para->dst_rect.x > para->dst_image.w - 1)) ||
+       ((para->dst_rect.y > 0)&&(para->dst_rect.y > para->dst_image.h - 1)))
+	{
+		printk("invalid stretchblit parameter setting");
+		return -EINVAL;
+	}
+	else
+	{
+		if(((para->src_rect.x < 0)&&((-para->src_rect.x) < para->src_rect.w)))
+		{
+			para->src_rect.w = para->src_rect.w + para->src_rect.x;
+			para->src_rect.x = 0;
+		}
+		else if((para->src_rect.x + para->src_rect.w) > para->src_image.w)
+		{
+			para->src_rect.w = para->src_image.w - para->src_rect.x;
+		}
+		if(((para->src_rect.y < 0)&&((-para->src_rect.y) < para->src_rect.h)))
+		{
+			para->src_rect.h = para->src_rect.h + para->src_rect.y;
+			para->src_rect.y = 0;
+		}
+		else if((para->src_rect.y + para->src_rect.h) > para->src_image.h)
+		{
+			para->src_rect.h = para->src_image.h - para->src_rect.y;
+		}
+
+		if(((para->dst_rect.x < 0)&&((-para->dst_rect.x) < para->dst_rect.w)))
+		{
+			para->dst_rect.w = para->dst_rect.w + para->dst_rect.x;
+			para->dst_rect.x = 0;
+		}
+		else if((para->dst_rect.x + para->dst_rect.w) > para->dst_image.w)
+		{
+			para->dst_rect.w = para->dst_image.w - para->dst_rect.x;
+		}
+		if(((para->dst_rect.y < 0)&&((-para->dst_rect.y) < para->dst_rect.h)))
+		{
+			para->dst_rect.h = para->dst_rect.h + para->dst_rect.y;
+			para->dst_rect.y = 0;
+		}
+		else if((para->dst_rect.y + para->dst_rect.h) > para->dst_image.h)
+		{
+			para->dst_rect.h = para->dst_image.h - para->dst_rect.y;
+		}
+	}
+
+	g2d_ext_hd.finish_flag = 0;
+	err = mixer_stretchblt(para);
+
+	return err;
+}
+
+int g2d_set_palette_table(g2d_palette *para)
+{
+
+    if((para->pbuffer == NULL) || (para->size < 0) || (para->size>1024))
+    {
+        printk("para invalid in mixer_set_palette\n");
+        return -1;
+    }
+
+	mixer_set_palette(para);
+
+	return 0;
+}
+
diff --git a/drivers/char/sun4i_g2d/g2d.h b/drivers/char/sun4i_g2d/g2d.h
new file mode 100644
index 0000000..6baa01a
--- /dev/null
+++ b/drivers/char/sun4i_g2d/g2d.h
@@ -0,0 +1,29 @@
+
+#ifndef __G2D_H__
+#define __G2D_H__
+
+#include"g2d_bsp.h"
+
+/* Mixer status select */
+#define G2D_FINISH_IRQ		(1<<8)
+#define G2D_ERROR_IRQ		(1<<9)
+
+typedef struct
+{
+	g2d_init_para init_para;
+
+}g2d_dev_t;
+
+int g2d_openclk(void);
+int g2d_closeclk(void);
+int g2d_clk_on(void);
+int g2d_clk_off(void);
+irqreturn_t g2d_handle_irq(int irq, void *dev_id);
+int g2d_init(g2d_init_para *para);
+int g2d_blit(g2d_blt * para);
+int g2d_fill(g2d_fillrect * para);
+int g2d_stretchblit(g2d_stretchblt * para);
+int g2d_set_palette_table(g2d_palette *para);
+int g2d_wait_cmd_finish(void);
+
+#endif/* __G2D_H__ */
\ No newline at end of file
diff --git a/drivers/char/sun4i_g2d/g2d_bsp.c b/drivers/char/sun4i_g2d/g2d_bsp.c
new file mode 100644
index 0000000..efacb53
--- /dev/null
+++ b/drivers/char/sun4i_g2d/g2d_bsp.c
@@ -0,0 +1,1270 @@
+/* g2d_bsp.c
+ *
+ * Copyright (c)	2011 xxxx Electronics
+ *					2011 Yupu Tang
+ *
+ * @ F23 G2D driver
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA02111-1307USA
+ */
+
+#include "g2d_regs.h"
+#include "g2d_bsp.h"
+#include "g2d.h"
+
+static	__u32	base_addr;
+
+#define read_bvalue(offset)			get_bvalue(base_addr + offset)			/* byte input */
+#define write_bvalue(offset,value)	put_bvalue(base_addr + offset,value)	/* byte output */
+#define read_hvalue(offset)			get_hvalue(base_addr + offset)			/* half word input */
+#define write_hvalue(offset,value)	put_hvalue(base_addr + offset,value)	/* half word output */
+#define read_wvalue(offset)			get_wvalue(base_addr + offset)			/* word input */
+#define write_wvalue(offset,value)	put_wvalue(base_addr + offset,value)	/* word output */
+
+__s32 csc0coeff[12]=
+{
+	0x4a7,0x1e6f,0x1cbf,0x877,
+	0x4a7,0x00,  0x662,	0x3211,
+	0x4a7,0x812, 0x00,	0x2eb1
+};
+__s32 csc1coeff[12]=
+{
+	0x4a7,0x1e6f,0x1cbf,0x877,
+	0x4a7,0x00,  0x662,	0x3211,
+	0x4a7,0x812, 0x00,	0x2eb1
+};
+
+__s32 csc2coeff[12]=
+{
+	0x204,0x107,0x64,0x100,		/* YG,YR,YB,YC */
+	0x1ED6,0x1F69,0x1C1,0x800,	/* UG,UR,UB,UC */
+	0x1E87,0x1C1,0x1FB8,0x800,	/* VG,VR,VB,VC */
+};
+
+__s32 scalercoeff[64]=
+{
+	/* Horizontal Filtering Coefficient(0x200-0x27c) */
+	0x00004000,0x000140ff,0x00033ffe,0x00043ffd,0x00063efc,0xff083dfc,0x000a3bfb,0xff0d39fb,
+	0xff0f37fb,0xff1136fa,0xfe1433fb,0xfe1631fb,0xfd192ffb,0xfd1c2cfb,0xfd1f29fb,0xfc2127fc,
+	0xfc2424fc,0xfc2721fc,0xfb291ffd,0xfb2c1cfd,0xfb2f19fd,0xfb3116fe,0xfb3314fe,0xfa3611ff,
+	0xfb370fff,0xfb390dff,0xfb3b0a00,0xfc3d08ff,0xfc3e0600,0xfd3f0400,0xfe3f0300,0xff400100,
+
+	/* Vertical Filtering Coefficient(0x280-0x2fc) */
+	0x00004000,0x000140ff,0x00033ffe,0x00043ffd,0x00063efc,0xff083dfc,0x000a3bfb,0xff0d39fb,
+	0xff0f37fb,0xff1136fa,0xfe1433fb,0xfe1631fb,0xfd192ffb,0xfd1c2cfb,0xfd1f29fb,0xfc2127fc,
+	0xfc2424fc,0xfc2721fc,0xfb291ffd,0xfb2c1cfd,0xfb2f19fd,0xfb3116fe,0xfb3314fe,0xfa3611ff,
+	0xfb370fff,0xfb390dff,0xfb3b0a00,0xfc3d08ff,0xfc3e0600,0xfd3f0400,0xfe3f0300,0xff400100,
+};
+
+/* Set the Color Space Converter Coefficient Parameter */
+void csc_coeff_set(void){
+	__u32 i,j;
+
+	/* 0x180-0x1ac */
+	for(i=0, j=0; i<12; i++,j+=4)
+		write_wvalue(G2D_CSC01_ADDR_REG + j, (((csc1coeff[i]&0xFFFF)<<16) | (csc0coeff[i]&0xFFFF)));
+
+	/* 0x1c0-0x1ec */
+	for(i=0, j=0; i<12; i++,j+=4)
+		write_wvalue(G2D_CSC2_ADDR_REG + j, csc2coeff[i]&0xFFFF);
+
+}
+
+/* Set the Scaling Horizontal/Vertical Filtering Coefficient Parameter */
+void scaler_coeff_set(void){
+	__u32 i,j;
+
+	/* 0x200-0x2fc */
+	for(i=0, j=0; i<64; i++,j+=4)
+		write_wvalue(G2D_SCALER_HFILTER_REG + j, scalercoeff[i]);
+
+}
+
+__u32 mixer_set_reg_base(__u32 addr){
+	base_addr = addr;
+	return 0;
+}
+
+/* clear most of the registers value to default */
+__u32 mixer_reg_init(void){
+	__u32 i;
+
+    for(i=0;i<=0x120;i+=4)
+    	write_wvalue(i, 0);
+
+    /* initial the color space converter parameter */
+    csc_coeff_set();
+
+    /* initial the scaler coefficient parameter */
+    scaler_coeff_set();
+
+	return 0;
+}
+
+__u32 mixer_set_fillcolor(__u32 color, __u32 sel){
+	__u32 value;
+
+	if(sel == 1){
+		value = read_wvalue(G2D_DMA1_CONTROL_REG) | G2D_FILL_ENABLE;
+		write_wvalue(G2D_DMA1_CONTROL_REG, value);
+		write_wvalue(G2D_DMA1_FILLCOLOR_REG, color);
+		}
+	else if(sel == 2){
+		value = read_wvalue(G2D_DMA2_CONTROL_REG) | G2D_FILL_ENABLE;
+		write_wvalue(G2D_DMA2_CONTROL_REG, value);
+		write_wvalue(G2D_DMA2_FILLCOLOR_REG, color);
+		}
+	else if(sel == 3){
+		value = read_wvalue(G2D_DMA3_CONTROL_REG) | G2D_FILL_ENABLE;
+		write_wvalue(G2D_DMA3_CONTROL_REG, value);
+		write_wvalue(G2D_DMA3_FILLCOLOR_REG, color);
+		}
+	else	{
+		value = read_wvalue(G2D_DMA0_CONTROL_REG) | G2D_FILL_ENABLE;
+		write_wvalue(G2D_DMA0_CONTROL_REG, value);
+		write_wvalue(G2D_DMA0_FILLCOLOR_REG, color);
+		}
+
+	return 0;
+}
+
+__u32 mixer_bpp_count(__u32 format)
+{
+	__u32 bpp = 32;
+	switch (format)
+	{
+		case G2D_FMT_1BPP_MONO:
+		case G2D_FMT_1BPP_PALETTE:
+			bpp = 1;break;
+
+		case G2D_FMT_2BPP_MONO:
+		case G2D_FMT_2BPP_PALETTE:
+			bpp = 2;break;
+
+		case G2D_FMT_4BPP_MONO:
+		case G2D_FMT_4BPP_PALETTE:
+			bpp = 4;break;
+
+		case G2D_FMT_8BPP_MONO:
+		case G2D_FMT_8BPP_PALETTE:
+		case G2D_FMT_PYUV422UVC:
+		case G2D_FMT_PYUV420UVC:
+		case G2D_FMT_PYUV411UVC:
+		case G2D_FMT_PYUV422:
+		case G2D_FMT_PYUV420:
+		case G2D_FMT_PYUV411:
+			bpp = 8;break;
+
+		case G2D_FMT_IYUV422:
+		case G2D_FMT_RGB565:
+		case G2D_FMT_BGR565:
+		case G2D_FMT_ARGB1555:
+		case G2D_FMT_ABGR1555:
+		case G2D_FMT_RGBA5551:
+		case G2D_FMT_BGRA5551:
+		case G2D_FMT_ARGB4444:
+		case G2D_FMT_ABGR4444:
+		case G2D_FMT_RGBA4444:
+		case G2D_FMT_BGRA4444:
+			bpp = 16;break;
+
+		case G2D_FMT_ARGB_AYUV8888:
+		case G2D_FMT_BGRA_VUYA8888:
+		case G2D_FMT_ABGR_AVUY8888:
+		case G2D_FMT_RGBA_YUVA8888:
+		case G2D_FMT_XRGB8888:
+		case G2D_FMT_BGRX8888:
+		case G2D_FMT_XBGR8888:
+		case G2D_FMT_RGBX8888:
+			bpp = 32;break;
+
+		default:
+			bpp = 32;break;
+	}
+	return bpp;
+
+}
+
+__u32 mixer_in_fmtseq_set(__u32 format,__u32 pixel_seq)
+{
+	__u32 val = 32;
+	switch (format)
+	{
+		case G2D_FMT_1BPP_MONO:
+		case G2D_FMT_1BPP_PALETTE:
+			if	   (pixel_seq == G2D_SEQ_1BPP_LITTER_LITTER)
+				val = 0x3A;
+			else if(pixel_seq == G2D_SEQ_1BPP_BIG_LITTER)
+				val = 0x1A;
+			else if(pixel_seq == G2D_SEQ_1BPP_LITTER_BIG)
+				val = 0x2A;
+			else
+				val = 0xA;
+			break;
+
+		case G2D_FMT_2BPP_MONO:
+		case G2D_FMT_2BPP_PALETTE:
+			if	   (pixel_seq == G2D_SEQ_2BPP_LITTER_LITTER)
+				val = 0x39;
+			else if(pixel_seq == G2D_SEQ_2BPP_BIG_LITTER)
+				val = 0x19;
+			else if(pixel_seq == G2D_SEQ_2BPP_LITTER_BIG)
+				val = 0x29;
+			else
+				val = 0x9;
+			break;
+
+		case G2D_FMT_4BPP_MONO:
+		case G2D_FMT_4BPP_PALETTE:
+			if	   (pixel_seq == G2D_SEQ_P01234567)
+				val = 0x38;
+			else if(pixel_seq == G2D_SEQ_P67452301)
+				val = 0x18;
+			else if(pixel_seq == G2D_SEQ_P10325476)
+				val = 0x28;
+			else
+				val = 0x8;
+			break;
+
+		case G2D_FMT_8BPP_MONO:
+		case G2D_FMT_8BPP_PALETTE:
+			if(pixel_seq == G2D_SEQ_P0123)
+				val = 0x17;
+			else
+				val = 0x7;
+			break;
+
+		case G2D_FMT_PYUV422UVC:
+		case G2D_FMT_PYUV420UVC:
+		case G2D_FMT_PYUV411UVC:
+				val = 0x6;
+			break;
+
+		case G2D_FMT_IYUV422:
+			if(pixel_seq == G2D_SEQ_YVYU)
+				val = 0x14;
+			else
+				val = 0x4;
+			break;
+		case G2D_FMT_RGB565:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x13;
+			else
+				val = 0x3;
+			break;
+		case G2D_FMT_BGR565:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x93;
+			else
+				val = 0x83;
+			break;
+		case G2D_FMT_ARGB1555:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x12;
+			else
+				val = 0x2;
+			break;
+		case G2D_FMT_ABGR1555:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x92;
+			else
+				val = 0x82;
+			break;
+		case G2D_FMT_RGBA5551:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0xb2;
+			else
+				val = 0xa2;
+			break;
+		case G2D_FMT_BGRA5551:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x32;
+			else
+				val = 0x22;
+			break;
+		case G2D_FMT_ARGB4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x11;
+			else
+				val = 0x01;
+			break;
+		case G2D_FMT_ABGR4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x91;
+			else
+				val = 0x81;
+			break;
+		case G2D_FMT_RGBA4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0xb1;
+			else
+				val = 0xa1;
+			break;
+		case G2D_FMT_BGRA4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x31;
+			else
+				val = 0x21;
+			break;
+		case G2D_FMT_ARGB_AYUV8888:
+		case G2D_FMT_XRGB8888:
+			val = 0x0;
+			break;
+		case G2D_FMT_BGRA_VUYA8888:
+		case G2D_FMT_BGRX8888:
+			val = 0x20;
+			break;
+		case G2D_FMT_ABGR_AVUY8888:
+		case G2D_FMT_XBGR8888:
+			val = 0x80;
+			break;
+		case G2D_FMT_RGBA_YUVA8888:
+		case G2D_FMT_RGBX8888:
+			val = 0xa0;
+			break;
+
+		default:
+			val = 0;break;
+	}
+	return val<<8;
+
+}
+
+__u32 mixer_in_csc_set(__u32 format)
+{
+	__u32 val = 0;
+	switch (format)
+	{
+		case G2D_FMT_IYUV422:
+			val = 0x11;
+			break;
+		case G2D_FMT_PYUV422UVC:
+			val = 0x21;
+			break;
+		case G2D_FMT_PYUV420UVC:
+			val = 0x31;
+			break;
+		case G2D_FMT_PYUV411UVC:
+			val = 0x41;
+			break;
+
+		default:
+			val = 0;break;
+	}
+
+	return val;
+}
+
+__u32 mixer_out_fmtseq_set(__u32 format,__u32 pixel_seq)
+{
+	__u32 val = 0;
+	switch (format)
+	{
+		case G2D_FMT_1BPP_MONO:
+			if	   (pixel_seq == G2D_SEQ_1BPP_LITTER_LITTER)
+				val = 0x38A;
+			else if(pixel_seq == G2D_SEQ_1BPP_BIG_LITTER)
+				val = 0x18A;
+			else if(pixel_seq == G2D_SEQ_1BPP_LITTER_BIG)
+				val = 0x28A;
+			else
+				val = 0x8A;
+			break;
+
+		case G2D_FMT_2BPP_MONO:
+			if	   (pixel_seq == G2D_SEQ_2BPP_LITTER_LITTER)
+				val = 0x389;
+			else if(pixel_seq == G2D_SEQ_2BPP_BIG_LITTER)
+				val = 0x189;
+			else if(pixel_seq == G2D_SEQ_2BPP_LITTER_BIG)
+				val = 0x289;
+			else
+				val = 0x89;
+			break;
+
+		case G2D_FMT_4BPP_MONO:
+			if	   (pixel_seq == G2D_SEQ_P01234567)
+				val = 0x388;
+			else if(pixel_seq == G2D_SEQ_P67452301)
+				val = 0x188;
+			else if(pixel_seq == G2D_SEQ_P10325476)
+				val = 0x288;
+			else
+				val = 0x88;
+			break;
+
+		case G2D_FMT_8BPP_MONO:
+			if(pixel_seq == G2D_SEQ_P0123)
+				val = 0x187;
+			else
+				val = 0x87;
+			break;
+		case G2D_FMT_PYUV422:
+			val = 0x86;
+			break;
+		case G2D_FMT_PYUV422UVC:
+			val = 0x85;
+			break;
+		case G2D_FMT_PYUV420UVC:
+			val = 0x8b;
+			break;
+		case G2D_FMT_PYUV420:
+			val = 0x8c;
+			break;
+		case G2D_FMT_PYUV411UVC:
+			val = 0x8d;
+			break;
+		case G2D_FMT_PYUV411:
+			val = 0x8e;
+			break;
+
+		case G2D_FMT_IYUV422:
+			if(pixel_seq == G2D_SEQ_YVYU)
+				val = 0x184;
+			else
+				val = 0x84;
+			break;
+		case G2D_FMT_RGB565:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x183;
+			else
+				val = 0x3;
+			break;
+		case G2D_FMT_BGR565:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x983;
+			else
+				val = 0x883;
+			break;
+		case G2D_FMT_ARGB1555:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x182;
+			else
+				val = 0x82;
+			break;
+		case G2D_FMT_ABGR1555:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x982;
+			else
+				val = 0x882;
+			break;
+		case G2D_FMT_RGBA5551:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0xb82;
+			else
+				val = 0xa82;
+			break;
+		case G2D_FMT_BGRA5551:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x382;
+			else
+				val = 0x282;
+			break;
+		case G2D_FMT_ARGB4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x181;
+			else
+				val = 0x81;
+			break;
+		case G2D_FMT_ABGR4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x981;
+			else
+				val = 0x881;
+			break;
+		case G2D_FMT_RGBA4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0xb81;
+			else
+				val = 0xa81;
+			break;
+		case G2D_FMT_BGRA4444:
+			if(pixel_seq == G2D_SEQ_P01)
+				val = 0x381;
+			else
+				val = 0x281;
+			break;
+		case G2D_FMT_ARGB_AYUV8888:
+		case G2D_FMT_XRGB8888:
+			val = 0x80;
+			break;
+		case G2D_FMT_BGRA_VUYA8888:
+		case G2D_FMT_BGRX8888:
+			val = 0x280;
+			break;
+		case G2D_FMT_ABGR_AVUY8888:
+		case G2D_FMT_XBGR8888:
+			val = 0x880;
+			break;
+		case G2D_FMT_RGBA_YUVA8888:
+		case G2D_FMT_RGBX8888:
+			val = 0xa80;
+			break;
+
+		default:
+			val = 80;break;
+	}
+	return val;
+
+}
+
+__u64 mixer_get_addr(__u32 buffer_addr, __u32 format, __u32 stride, __u32 x, __u32 y){
+	__u32	bpp = 0;
+	__u64	addr = 0;
+
+	bpp = mixer_bpp_count(format);
+	addr = (__u64)(buffer_addr-0x40000000)*8 + (__u64)((stride * y + x)*bpp);//bits
+
+	return addr;
+}
+
+__u32 mixer_get_irq(void){
+	__u32 reg_val = 0;
+
+	reg_val |= read_wvalue(G2D_STATUS_REG);
+
+	return reg_val;
+}
+
+__u32 mixer_clear_init(void){
+
+	write_wvalue(G2D_STATUS_REG, 0x300);
+	write_wvalue(G2D_CONTROL_REG, 0x0);
+
+	return 0;
+}
+
+__u32 mixer_set_rotate_reg(__u32 flag){
+	__u32 rot = 0;
+
+	if	   (flag & G2D_BLT_FLIP_HORIZONTAL	)rot = 0x10;
+	else if(flag & G2D_BLT_FLIP_VERTICAL	)rot = 0x20;
+	else if(flag & G2D_BLT_ROTATE90			)rot = 0x50;
+	else if(flag & G2D_BLT_ROTATE180		)rot = 0x30;
+	else if(flag & G2D_BLT_ROTATE270		)rot = 0x60;
+	else if(flag & G2D_BLT_MIRROR45			)rot = 0x70;
+	else if(flag & G2D_BLT_MIRROR135		)rot = 0x40;
+	else rot = 0;
+
+	return rot;
+}
+
+__s32 mixer_fillrectangle(g2d_fillrect *para){
+	__u32 reg_val = 0;
+	__u64 addr_val;
+	__s32 result = 0;
+
+	mixer_reg_init();/* initial mixer register */
+
+	/* channel0 is the fill surface */
+	write_wvalue(G2D_DMA0_SIZE_REG, (para->dst_rect.w -1) | ((para->dst_rect.h -1)<<16));
+
+	/* globe alpha mode */
+	if(para->flag & G2D_FIL_PLANE_ALPHA)
+	{
+		reg_val |= (para->alpha<<24)|0x4;
+	}
+	else if(para->flag & G2D_FIL_MULTI_ALPHA)
+	{
+		reg_val |= (para->alpha<<24)|0x8;
+	}
+	reg_val |= 0x1;
+	write_wvalue(G2D_DMA0_CONTROL_REG, reg_val);
+	mixer_set_fillcolor(para->color,0);
+	if((para->flag & G2D_FIL_PLANE_ALPHA) || (para->flag & G2D_FIL_PIXEL_ALPHA) || (para->flag & G2D_FIL_MULTI_ALPHA))
+	{
+		/* channel3 is the dst surface */
+		addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,para->dst_rect.x,para->dst_rect.y);
+		reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+		write_wvalue(G2D_DMA_HADDR_REG, reg_val<<24);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_DMA3_LADDR_REG, reg_val);
+		write_wvalue(G2D_DMA3_STRIDE_REG, para->dst_image.w*mixer_bpp_count(para->dst_image.format));
+		write_wvalue(G2D_DMA3_SIZE_REG, (para->dst_rect.w -1) | ((para->dst_rect.h -1)<<16));
+		reg_val = read_wvalue(G2D_DMA3_CONTROL_REG);
+
+		/* palette format */
+		if (para->dst_image.format>0x19)
+		{
+			reg_val |= 0x2;
+		}
+		reg_val |= G2D_IDMA_ENABLE | mixer_in_fmtseq_set(para->dst_image.format,para->dst_image.pixel_seq);
+		write_wvalue(G2D_DMA3_CONTROL_REG, reg_val);
+		write_wvalue(G2D_CK_CONTROL_REG, 0x1);
+	}
+	write_wvalue(G2D_ROP_INDEX0_REG, 0x840);
+
+	/* output surface is the dst surface */
+	write_wvalue(G2D_OUTPUT_SIZE_REG, (para->dst_rect.w -1) | ((para->dst_rect.h -1)<<16));
+
+	addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,para->dst_rect.x,para->dst_rect.y);
+	reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+	write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+	reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+	write_wvalue(G2D_OUTPUT0_LADDR_REG, reg_val);
+
+	write_wvalue(G2D_OUTPUT0_STRIDE_REG, para->dst_image.w*mixer_bpp_count(para->dst_image.format));
+	write_wvalue(G2D_OUTPUT_CONTROL_REG, mixer_out_fmtseq_set(para->dst_image.format,para->dst_image.pixel_seq));
+
+	/* start */
+	write_wvalue(G2D_CONTROL_REG, 0);
+	write_wvalue(G2D_CONTROL_REG, 0x303);
+	result = g2d_wait_cmd_finish();
+
+	return result;
+}
+
+__s32 mixer_blt(g2d_blt *para){
+	__u32 bppnum = 0;
+	__u32 reg_val = 0;
+	__u64 addr_val;
+	__s32 result = 0;
+
+	mixer_reg_init();/* initial mixer register */
+
+	/* src surface */
+	addr_val = mixer_get_addr(para->src_image.addr[0],para->src_image.format,para->src_image.w,para->src_rect.x,para->src_rect.y);
+	reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+	write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+	reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+	write_wvalue(G2D_DMA0_LADDR_REG, reg_val);
+	write_wvalue(G2D_DMA0_STRIDE_REG, para->src_image.w*mixer_bpp_count(para->src_image.format));
+	write_wvalue(G2D_DMA0_SIZE_REG, (para->src_rect.w -1) | ((para->src_rect.h -1)<<16));
+	reg_val = read_wvalue(G2D_DMA0_CONTROL_REG);
+	reg_val |= mixer_in_fmtseq_set(para->src_image.format,para->src_image.pixel_seq) | G2D_IDMA_ENABLE;
+
+	/* rgbx/bgrx/xrgb/xbgr format */
+	if((para->src_image.format>0x03)&&(para->src_image.format<0x08))
+	{
+		reg_val |= (0xFF<<24)|0x4;
+	}
+
+	/* palette format */
+	if (para->src_image.format>0x1C)
+	{
+		reg_val |= 0x2;
+	}
+
+	/* globe alpha mode */
+	if(para->flag & G2D_BLT_PLANE_ALPHA)
+	{
+		reg_val |= (para->alpha<<24)|0x4;
+	}
+	else if(para->flag & G2D_BLT_MULTI_ALPHA)
+	{
+		reg_val |= (para->alpha<<24)|0x8;
+	}
+
+	/* rotate/mirror */
+	reg_val |= mixer_set_rotate_reg(para->flag);
+	write_wvalue(G2D_DMA0_CONTROL_REG, reg_val);
+	reg_val = mixer_in_csc_set(para->src_image.format);
+	write_wvalue(G2D_CSC0_CONTROL_REG, reg_val);
+	reg_val = mixer_in_csc_set(para->dst_image.format);
+	write_wvalue(G2D_CSC1_CONTROL_REG, reg_val);
+
+	/* pyuv422/420/411uvc */
+	if((para->src_image.format>0x16)&&(para->src_image.format<0x1A))
+	{
+		if(para->src_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+		else bppnum = 8;
+		addr_val = (__u64)para->src_image.addr[1]*8+(__u64)((para->src_image.w*para->src_rect.y+para->src_rect.x)*bppnum);
+		reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+		reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+		write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_DMA1_LADDR_REG, reg_val);
+		write_wvalue(G2D_DMA1_STRIDE_REG, para->src_image.w*bppnum);
+		write_wvalue(G2D_DMA1_SIZE_REG, (para->src_rect.w -1) | ((para->src_rect.h -1)<<16));
+		reg_val = read_wvalue(G2D_DMA1_CONTROL_REG);
+		reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+
+		/* rotate/mirror */
+		reg_val |= mixer_set_rotate_reg(para->flag);
+		write_wvalue(G2D_DMA1_CONTROL_REG, reg_val);
+	}
+
+	/* pyuv422/420/411uvc */
+	if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+	{
+		if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+		else bppnum = 8;
+		addr_val = (__u64)para->dst_image.addr[1]*8+(__u64)((para->dst_image.w*para->dst_y + para->dst_x)*bppnum);
+		reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+		reg_val |= ((addr_val>>32)&0xF)<<16;/* high addr in bits */
+		write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_DMA2_LADDR_REG, reg_val);
+		write_wvalue(G2D_DMA2_STRIDE_REG, para->dst_image.w*bppnum);
+		write_wvalue(G2D_DMA2_SIZE_REG, (para->src_rect.w -1) | ((para->src_rect.h -1)<<16));
+		reg_val = read_wvalue(G2D_DMA2_CONTROL_REG);
+		reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+		write_wvalue(G2D_DMA2_CONTROL_REG, reg_val);
+	}
+	write_wvalue(G2D_DMA1_FILLCOLOR_REG, 0xFFFFFFFF);
+	write_wvalue(G2D_DMA2_FILLCOLOR_REG, 0xFFFFFFFF);
+
+	/* channel3 is dst surface */
+	addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,para->dst_x,para->dst_y);
+	reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+	reg_val |= ((addr_val>>32)&0xF)<<24;/* high addr in bits */
+	write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+	reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+	write_wvalue(G2D_DMA3_LADDR_REG, reg_val);
+	write_wvalue(G2D_DMA3_STRIDE_REG, para->dst_image.w*mixer_bpp_count(para->dst_image.format));
+	if((para->flag & G2D_BLT_ROTATE90) || (para->flag & G2D_BLT_ROTATE270))
+		 write_wvalue(G2D_DMA3_SIZE_REG, (para->src_rect.h -1) | ((para->src_rect.w -1)<<16));
+	else write_wvalue(G2D_DMA3_SIZE_REG, (para->src_rect.w -1) | ((para->src_rect.h -1)<<16));
+	reg_val = read_wvalue(G2D_DMA3_CONTROL_REG);
+	reg_val |= mixer_in_fmtseq_set(para->dst_image.format,para->dst_image.pixel_seq) | G2D_IDMA_ENABLE;
+
+	/* rgbx/bgrx/xrgb/xbgr format */
+	if((para->dst_image.format>0x03)&&(para->dst_image.format<0x08))
+	{
+		reg_val |= (0xFF<<24)|0x4;
+	}
+	write_wvalue(G2D_DMA3_CONTROL_REG, reg_val);
+
+	/* colorkey */
+	if (para->flag & G2D_BLT_SRC_COLORKEY)
+	{
+		reg_val = 0x3;
+	}
+	else if(para->flag & G2D_BLT_DST_COLORKEY)
+	{
+		reg_val = 0x5;
+	}
+	else if((para->flag & G2D_BLT_PIXEL_ALPHA)||(para->flag & G2D_BLT_PLANE_ALPHA)||(para->flag & G2D_BLT_MULTI_ALPHA))
+	{
+		reg_val = 0x1;
+	}
+	else {reg_val = 0x0;}
+	write_wvalue(G2D_CK_CONTROL_REG, reg_val);
+	write_wvalue(G2D_CK_MINCOLOR_REG, para->color);
+	write_wvalue(G2D_CK_MAXCOLOR_REG, para->color);
+
+	/* output surface is the dst surface */
+	if((para->flag & G2D_BLT_ROTATE90) || (para->flag & G2D_BLT_ROTATE270))
+	{
+		write_wvalue(G2D_OUTPUT_SIZE_REG, (para->src_rect.h -1) | ((para->src_rect.w -1)<<16));
+	}
+	else
+	{
+		write_wvalue(G2D_OUTPUT_SIZE_REG, (para->src_rect.w -1) | ((para->src_rect.h -1)<<16));
+	}
+	addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,para->dst_x,para->dst_y);
+	reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+	write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+	reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+	write_wvalue(G2D_OUTPUT0_LADDR_REG, reg_val);
+	write_wvalue(G2D_OUTPUT0_STRIDE_REG, para->dst_image.w*mixer_bpp_count(para->dst_image.format));
+	reg_val = mixer_out_fmtseq_set(para->dst_image.format,para->dst_image.pixel_seq);
+	write_wvalue(G2D_OUTPUT_CONTROL_REG, reg_val);
+
+	if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+	{
+		if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+		else bppnum = 8;
+		addr_val = (__u64)para->dst_image.addr[1]*8+(__u64)((para->dst_image.w*para->dst_y + para->dst_x)*bppnum);
+		reg_val = read_wvalue(G2D_OUTPUT_HADDR_REG);
+		reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+		write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_OUTPUT1_LADDR_REG, reg_val);
+		write_wvalue(G2D_OUTPUT1_STRIDE_REG, para->dst_image.w*bppnum);
+		write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+	}
+	if((para->dst_image.format>0x11)&&(para->dst_image.format<0x1D))write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+	if((para->flag & G2D_BLT_PIXEL_ALPHA)|(para->flag & G2D_BLT_PLANE_ALPHA)|(para->flag & G2D_BLT_MULTI_ALPHA)|(para->flag & G2D_BLT_SRC_COLORKEY)|(para->flag & G2D_BLT_DST_COLORKEY))
+		write_wvalue(G2D_OALPHA_CONTROL_REG, 0x80);/* 0x40: A2 area keep the dst alpha,0x80: A2 area keep the src+dst(1-src) alpha value */
+
+	/* start */
+	write_wvalue(G2D_CONTROL_REG, 0x0);
+	write_wvalue(G2D_CONTROL_REG, 0x303);
+	result = g2d_wait_cmd_finish();
+
+	return result;
+}
+
+__s32 mixer_stretchblt(g2d_stretchblt *para){
+	__u32 bppnum = 0;
+	__u32 reg_val = 0;
+	__u32 reg_tmp = 0;
+	__u64 addr_val;
+	__u32 cnt,sinw,soutw,scaler_inx,scaler_outx,scaler_outy,i;
+	__s32 result = 0;
+
+	mixer_reg_init();/* initial mixer register */
+
+	/* src surface */
+	write_wvalue(G2D_DMA0_STRIDE_REG, para->src_image.w*mixer_bpp_count(para->src_image.format));
+	reg_val = read_wvalue(G2D_DMA0_CONTROL_REG);
+	reg_val |= mixer_in_fmtseq_set(para->src_image.format,para->src_image.pixel_seq) | G2D_IDMA_ENABLE;
+
+	/* rgbx/bgrx/xrgb/xbgr format */
+	if((para->src_image.format>0x03)&&(para->src_image.format<0x08))
+	{
+		reg_val |= (0xFF<<24)|0x4;
+	}
+
+	/* palette format */
+	if (para->src_image.format>0x1C)
+	{
+		reg_val |= 0x2;
+	}
+
+	/* globe alpha mode */
+	if(para->flag & G2D_BLT_PLANE_ALPHA)
+	{
+		reg_val |= (para->alpha<<24)|0x4;
+	}
+	else if(para->flag & G2D_BLT_MULTI_ALPHA)
+	{
+		reg_val |= (para->alpha<<24)|0x8;
+	}
+
+	/* rotate/mirror */
+	reg_val |= mixer_set_rotate_reg(para->flag);
+	write_wvalue(G2D_DMA0_CONTROL_REG, reg_val);
+	reg_val = mixer_in_csc_set(para->src_image.format);
+	write_wvalue(G2D_CSC0_CONTROL_REG, reg_val);
+	reg_val = mixer_in_csc_set(para->dst_image.format);
+	write_wvalue(G2D_CSC1_CONTROL_REG, reg_val);
+
+	/* sacler setting */
+	write_wvalue(G2D_SCALER_CONTROL_REG,G2D_SCALER_4TAP4 | G2D_SCALER_ENABLE);
+	write_wvalue(G2D_SCALER_HPHASE_REG,0);
+	write_wvalue(G2D_SCALER_VPHASE_REG,0);
+	write_wvalue(G2D_ROP_INDEX0_REG, 0x840);
+
+	/* channel3 is dst surface */
+	write_wvalue(G2D_DMA3_STRIDE_REG, para->dst_image.w*mixer_bpp_count(para->dst_image.format));
+	reg_val = read_wvalue(G2D_DMA3_CONTROL_REG);
+	reg_val |= mixer_in_fmtseq_set(para->dst_image.format,para->dst_image.pixel_seq) | G2D_IDMA_ENABLE;
+
+	/* rgbx/bgrx/xrgb/xbgr format */
+	if((para->src_image.format>0x03)&&(para->src_image.format<0x08))
+	{
+		reg_val |= (0xFF<<24)|0x4;
+	}
+	write_wvalue(G2D_DMA3_CONTROL_REG, reg_val);
+
+	/* colorkey */
+	if (para->flag & G2D_BLT_SRC_COLORKEY)
+	{
+		reg_val = 0x3;
+	}
+	else if(para->flag & G2D_BLT_DST_COLORKEY)
+	{
+		reg_val = 0x5;
+	}
+	else if((para->flag & G2D_BLT_PIXEL_ALPHA)||(para->flag & G2D_BLT_PLANE_ALPHA)||(para->flag & G2D_BLT_MULTI_ALPHA))
+	{
+		reg_val = 1;
+	}
+	else {reg_val = 0x0;}
+	write_wvalue(G2D_CK_CONTROL_REG, reg_val);
+	write_wvalue(G2D_CK_MINCOLOR_REG, para->color);
+	write_wvalue(G2D_CK_MAXCOLOR_REG, para->color);
+
+	write_wvalue(G2D_OUTPUT0_STRIDE_REG, para->dst_image.w*mixer_bpp_count(para->dst_image.format));
+	reg_val = mixer_out_fmtseq_set(para->dst_image.format,para->dst_image.pixel_seq);
+	write_wvalue(G2D_OUTPUT_CONTROL_REG, reg_val);
+	if((para->flag & G2D_BLT_PIXEL_ALPHA)|(para->flag & G2D_BLT_PLANE_ALPHA)|(para->flag & G2D_BLT_MULTI_ALPHA)|(para->flag & G2D_BLT_SRC_COLORKEY)|(para->flag & G2D_BLT_DST_COLORKEY))
+		write_wvalue(G2D_OALPHA_CONTROL_REG, 0x80);/* 0x40: A2 area keep the dst alpha,0x80: A2 area keep the src+dst(1-src) alpha value */
+
+	/* output width lager than 1024 pixel width */
+	if(para->dst_rect.w>0x400)
+	{
+		/* scaler up divide the output into 1024 pixel width part */
+		cnt = para->dst_rect.w/1024;
+		cnt = (para->dst_rect.w%1024)?cnt:cnt-1;
+		sinw = (para->src_rect.w/para->dst_rect.w)<<10;
+		sinw |= ((para->src_rect.w%para->dst_rect.w)<<10)/para->dst_rect.w;
+		scaler_inx = para->src_rect.x;
+		scaler_outx = para->dst_rect.x;
+		if((para->flag & G2D_BLT_ROTATE90))
+			 scaler_outy = para->dst_rect.y + para->dst_rect.w - 0x401;
+		else scaler_outy = para->dst_rect.y;
+		for(i = 0; i<cnt; i++)
+		{
+			/* DMA0 */
+			addr_val = mixer_get_addr(para->src_image.addr[0],para->src_image.format,para->src_image.w,scaler_inx,para->src_rect.y);
+			reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+			write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_DMA0_LADDR_REG, reg_val);
+			if(sinw<1)sinw = 1;
+			write_wvalue(G2D_DMA0_SIZE_REG, (sinw -1) | ((para->src_rect.h -1)<<16));
+
+			/* DMA1 pyuv422/420/411uvc */
+			if((para->src_image.format>0x16)&&(para->src_image.format<0x1A))
+			{
+				if(para->src_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+				else bppnum = 8;
+				if(para->src_image.format == G2D_FMT_PYUV420UVC)
+					 addr_val = (__u64)(para->src_image.addr[1]-0x40000000)*8+(__u64)((para->src_image.w*(para->src_rect.y/2)+scaler_inx)*bppnum);
+				else addr_val = (__u64)(para->src_image.addr[1]-0x40000000)*8+(__u64)((para->src_image.w*para->src_rect.y+scaler_inx)*bppnum);
+				reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+				reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+				write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+				reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+				write_wvalue(G2D_DMA1_LADDR_REG, reg_val);
+				write_wvalue(G2D_DMA1_STRIDE_REG, para->src_image.w*bppnum);
+				if(sinw<1)sinw = 1;
+				write_wvalue(G2D_DMA1_SIZE_REG, (sinw -1) | ((para->src_rect.h -1)<<16));
+				reg_val = read_wvalue(G2D_DMA1_CONTROL_REG);
+				reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+
+				/* rotate/mirror */
+				reg_val |= mixer_set_rotate_reg(para->flag);
+				write_wvalue(G2D_DMA1_CONTROL_REG, reg_val);
+			}
+
+			/* scaler setting */
+			write_wvalue(G2D_SCALER_SIZE_REG,(0x400 - 1) | ((para->dst_rect.h - 1)<<16));
+			reg_val = (sinw/0x400)<<16;
+			reg_tmp = (sinw%0x400);
+			reg_val |= (reg_tmp<<16)/0x400;
+			write_wvalue(G2D_SCALER_HFACTOR_REG,reg_val);
+
+			reg_val = (para->src_rect.h/para->dst_rect.h)<<16;
+			reg_tmp = (para->src_rect.h%para->dst_rect.h);
+			reg_val |= (reg_tmp<<16)/para->dst_rect.h;
+			write_wvalue(G2D_SCALER_VFACTOR_REG,reg_val);
+
+			/* DMA2 pyuv422/420/411uvc */
+			if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+			{
+				if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+				else bppnum = 8;
+				if(para->dst_image.format == G2D_FMT_PYUV420UVC)
+					 addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*(para->dst_rect.y/2) + scaler_outx)*bppnum);
+				else addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*para->dst_rect.y + scaler_outx)*bppnum);
+				reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+				reg_val |= ((addr_val>>32)&0xF)<<16;/* high addr in bits */
+				write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+				reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+				write_wvalue(G2D_DMA2_LADDR_REG, reg_val);
+				write_wvalue(G2D_DMA2_STRIDE_REG, para->dst_image.w*bppnum);
+				write_wvalue(G2D_DMA2_SIZE_REG, (0x400 -1) | ((para->dst_rect.h -1)<<16));
+				reg_val = read_wvalue(G2D_DMA2_CONTROL_REG);
+				reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+				write_wvalue(G2D_DMA2_CONTROL_REG, reg_val);
+			}
+
+			/* DMA3 */
+			addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,scaler_outx,para->dst_rect.y);
+			reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+			reg_val = reg_val&0xF0FFFFFF;
+			reg_val |= ((addr_val>>32)&0xF)<<24;/* high addr in bits */
+			write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_DMA3_LADDR_REG, reg_val);
+			write_wvalue(G2D_DMA3_SIZE_REG, (0x400 -1) | ((para->dst_rect.h -1)<<16));
+
+			/* OUT */
+			if((para->flag & G2D_BLT_ROTATE90) || (para->flag & G2D_BLT_ROTATE270))
+				 write_wvalue(G2D_OUTPUT_SIZE_REG, (para->dst_rect.h -1) | ((0x400 -1)<<16));
+			else write_wvalue(G2D_OUTPUT_SIZE_REG, (0x400 -1) | ((para->dst_rect.h -1)<<16));
+			addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,scaler_outx,scaler_outy);
+			reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+			write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_OUTPUT0_LADDR_REG, reg_val);
+
+			/* OUT1 */
+			if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+			{
+				if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+				else bppnum = 8;
+				if(para->dst_image.format == G2D_FMT_PYUV420UVC)
+					 addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*(scaler_outy/2) + scaler_outx)*bppnum);
+				else addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*scaler_outy + scaler_outx)*bppnum);
+				reg_val = read_wvalue(G2D_OUTPUT_HADDR_REG);
+				reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+				write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+				reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+				write_wvalue(G2D_OUTPUT1_LADDR_REG, reg_val);
+				write_wvalue(G2D_OUTPUT1_STRIDE_REG, para->dst_image.w*bppnum);
+				write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+			}
+			if((para->dst_image.format>0x11)&&(para->dst_image.format<0x1D))write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+
+			scaler_inx +=sinw;
+			if((para->flag & G2D_BLT_ROTATE90))
+			{
+				scaler_outy -=0x400;
+				scaler_outx = para->dst_rect.x;
+			}
+			else if((para->flag & G2D_BLT_ROTATE270))
+			{
+				scaler_outy +=0x400;
+				scaler_outx = para->dst_rect.x;
+			}
+			else
+			{
+				scaler_outy = para->dst_rect.y;
+				scaler_outx +=0x400;
+			}
+
+			/* start */
+			write_wvalue(G2D_CONTROL_REG, 0x0);
+			write_wvalue(G2D_CONTROL_REG, 0x303);
+			result |= g2d_wait_cmd_finish();
+			if(result!=0)return result;
+		}
+
+		/* last block */
+		soutw = para->dst_rect.w - 0x400*cnt;
+		sinw = para->src_rect.w - sinw*cnt;
+
+		/* DMA0 */
+		addr_val = mixer_get_addr(para->src_image.addr[0],para->src_image.format,para->src_image.w,scaler_inx,para->src_rect.y);
+		reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+		write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_DMA0_LADDR_REG, reg_val);
+		write_wvalue(G2D_DMA0_SIZE_REG, (sinw -1) | ((para->src_rect.h -1)<<16));
+
+		/* DMA1 pyuv422/420/411uvc */
+		if((para->src_image.format>0x16)&&(para->src_image.format<0x1A))
+		{
+			if(para->src_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+			else bppnum = 8;
+			if(para->src_image.format == G2D_FMT_PYUV420UVC)
+				 addr_val = (__u64)(para->src_image.addr[1]-0x40000000)*8+(__u64)((para->src_image.w*(para->src_rect.y/2)+scaler_inx)*bppnum);
+			else addr_val = (__u64)(para->src_image.addr[1]-0x40000000)*8+(__u64)((para->src_image.w*para->src_rect.y+scaler_inx)*bppnum);
+			reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+			reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+			write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_DMA1_LADDR_REG, reg_val);
+			write_wvalue(G2D_DMA1_STRIDE_REG, para->src_image.w*bppnum);
+			if(sinw<1)sinw = 1;
+			write_wvalue(G2D_DMA1_SIZE_REG, (sinw -1) | ((para->src_rect.h -1)<<16));
+			reg_val = read_wvalue(G2D_DMA1_CONTROL_REG);
+			reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+
+			/* rotate/mirror */
+			reg_val |= mixer_set_rotate_reg(para->flag);
+			write_wvalue(G2D_DMA1_CONTROL_REG, reg_val);
+		}
+
+		/* scaler setting */
+		if(soutw<1)soutw = 1;
+		write_wvalue(G2D_SCALER_SIZE_REG,(soutw- 1) | ((para->dst_rect.h - 1)<<16));
+		reg_val = (sinw/soutw)<<16;
+		reg_tmp = (sinw%soutw);
+		reg_val |= (reg_tmp<<16)/soutw;
+		write_wvalue(G2D_SCALER_HFACTOR_REG,reg_val);
+
+		reg_val = (para->src_rect.h/para->dst_rect.h)<<16;
+		reg_tmp = (para->src_rect.h%para->dst_rect.h);
+		reg_val |= (reg_tmp<<16)/para->dst_rect.h;
+		write_wvalue(G2D_SCALER_VFACTOR_REG,reg_val);
+
+		/* DMA2 pyuv422/420/411uvc */
+		if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+		{
+			if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+			else bppnum = 8;
+			if(para->dst_image.format == G2D_FMT_PYUV420UVC)
+				 addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*(para->dst_rect.y/2) + scaler_outx)*bppnum);
+			else addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*para->dst_rect.y + scaler_outx)*bppnum);
+			reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+			reg_val |= ((addr_val>>32)&0xF)<<16;/* high addr in bits */
+			write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_DMA2_LADDR_REG, reg_val);
+			write_wvalue(G2D_DMA2_STRIDE_REG, para->dst_image.w*bppnum);
+			if(soutw<1)soutw = 1;
+			write_wvalue(G2D_DMA2_SIZE_REG, (soutw -1) | ((para->dst_rect.h -1)<<16));
+			reg_val = read_wvalue(G2D_DMA2_CONTROL_REG);
+			reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+			write_wvalue(G2D_DMA2_CONTROL_REG, reg_val);
+		}
+
+		/* DMA3 */
+		addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,scaler_outx,para->dst_rect.y);
+		reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+		reg_val = reg_val&0xF0FFFFFF;
+		reg_val |= ((addr_val>>32)&0xF)<<24;/* high addr in bits */
+		write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_DMA3_LADDR_REG, reg_val);
+		write_wvalue(G2D_DMA3_SIZE_REG, (soutw - 1) | ((para->dst_rect.h -1)<<16));
+
+		/* OUT */
+		if((para->flag & G2D_BLT_ROTATE90) || (para->flag & G2D_BLT_ROTATE270))
+			 write_wvalue(G2D_OUTPUT_SIZE_REG, (para->dst_rect.h -1) | ((soutw - 1)<<16));
+		else write_wvalue(G2D_OUTPUT_SIZE_REG, (soutw - 1) | ((para->dst_rect.h -1)<<16));
+		if((para->flag & G2D_BLT_ROTATE270))
+			 addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,scaler_outx,scaler_outy);
+		else addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,scaler_outx,para->dst_rect.y);
+		reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+		write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_OUTPUT0_LADDR_REG, reg_val);
+
+		/* OUT1 */
+		if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+		{
+			if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+			else bppnum = 8;
+			if(para->dst_image.format == G2D_FMT_PYUV420UVC)
+				 addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*(para->dst_rect.y/2) + scaler_outx)*bppnum);
+			else addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*para->dst_rect.y + scaler_outx)*bppnum);
+			reg_val = read_wvalue(G2D_OUTPUT_HADDR_REG);
+			reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+			write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_OUTPUT1_LADDR_REG, reg_val);
+			write_wvalue(G2D_OUTPUT1_STRIDE_REG, para->dst_image.w*bppnum);
+			write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+		}
+		if((para->dst_image.format>0x11)&&(para->dst_image.format<0x1D))write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+
+		/* start */
+		write_wvalue(G2D_CONTROL_REG, 0x0);
+		write_wvalue(G2D_CONTROL_REG, 0x303);
+		result |= g2d_wait_cmd_finish();
+	}
+
+	/* output width smaller than 1024 pixel width */
+	else
+	{
+		addr_val = mixer_get_addr(para->src_image.addr[0],para->src_image.format,para->src_image.w,para->src_rect.x,para->src_rect.y);
+		reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+		write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_DMA0_LADDR_REG, reg_val);
+		write_wvalue(G2D_DMA0_SIZE_REG, (para->src_rect.w -1) | ((para->src_rect.h -1)<<16));
+
+		write_wvalue(G2D_SCALER_SIZE_REG,(para->dst_rect.w - 1) | ((para->dst_rect.h -1)<<16));
+		reg_val = (para->src_rect.w/para->dst_rect.w)<<16;
+		reg_tmp = (para->src_rect.w%para->dst_rect.w);
+		reg_val |= (reg_tmp<<16)/para->dst_rect.w;
+		write_wvalue(G2D_SCALER_HFACTOR_REG,reg_val);
+		reg_val = (para->src_rect.h/para->dst_rect.h)<<16;
+		reg_tmp = (para->src_rect.h%para->dst_rect.h);
+		reg_val |= (reg_tmp<<16)/para->dst_rect.h;
+		write_wvalue(G2D_SCALER_VFACTOR_REG,reg_val);
+
+		/* pyuv422/420/411uvc */
+		if((para->src_image.format>0x16)&&(para->src_image.format<0x1A))
+		{
+			if(para->src_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+			else bppnum = 8;
+			if(para->src_image.format == G2D_FMT_PYUV420UVC)
+				 addr_val = (__u64)(para->src_image.addr[1]-0x40000000)*8+(__u64)((para->src_image.w*(para->src_rect.y/2)+para->src_rect.x)*bppnum);
+			else addr_val = (__u64)(para->src_image.addr[1]-0x40000000)*8+(__u64)((para->src_image.w*para->src_rect.y+para->src_rect.x)*bppnum);
+			reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+			reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+			write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_DMA1_LADDR_REG, reg_val);
+			write_wvalue(G2D_DMA1_STRIDE_REG, para->src_image.w*bppnum);
+			write_wvalue(G2D_DMA1_SIZE_REG, (para->src_rect.w -1) | ((para->src_rect.h -1)<<16));
+			reg_val = read_wvalue(G2D_DMA1_CONTROL_REG);
+			reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+			write_wvalue(G2D_DMA1_CONTROL_REG, reg_val);
+		}
+
+		/* pyuv422/420/411uvc */
+		if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+		{
+			if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+			else bppnum = 8;
+			if(para->dst_image.format == G2D_FMT_PYUV420UVC)
+				 addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*(para->dst_rect.y/2)+para->dst_rect.x)*bppnum);
+			else addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*para->dst_rect.y+para->dst_rect.x)*bppnum);
+			reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+			reg_val |= ((addr_val>>32)&0xF)<<16;/* high addr in bits */
+			write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_DMA2_LADDR_REG, reg_val);
+			write_wvalue(G2D_DMA2_STRIDE_REG, para->dst_image.w*bppnum);
+			write_wvalue(G2D_DMA2_SIZE_REG, (para->dst_rect.w -1) | ((para->dst_rect.h -1)<<16));
+			reg_val = read_wvalue(G2D_DMA2_CONTROL_REG);
+			reg_val |= (5<<8) | G2D_IDMA_ENABLE;
+			write_wvalue(G2D_DMA2_CONTROL_REG, reg_val);
+		}
+
+		addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,para->dst_rect.x,para->dst_rect.y);
+		reg_val = read_wvalue(G2D_DMA_HADDR_REG);
+		reg_val |= ((addr_val>>32)&0xF)<<24;/* high addr in bits */
+		write_wvalue(G2D_DMA_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_DMA3_LADDR_REG, reg_val);
+		write_wvalue(G2D_DMA3_SIZE_REG, (para->dst_rect.w -1) | ((para->dst_rect.h -1)<<16));
+
+		/* output surface is the dst surface */
+		if((para->flag & G2D_BLT_ROTATE90) || (para->flag & G2D_BLT_ROTATE270))
+			 write_wvalue(G2D_OUTPUT_SIZE_REG, (para->dst_rect.h -1) | ((para->dst_rect.w -1)<<16));
+		else write_wvalue(G2D_OUTPUT_SIZE_REG, (para->dst_rect.w -1) | ((para->dst_rect.h -1)<<16));
+		addr_val = mixer_get_addr(para->dst_image.addr[0],para->dst_image.format,para->dst_image.w,para->dst_rect.x,para->dst_rect.y);
+		reg_val = (addr_val>>32)&0xF;/* high addr in bits */
+		write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+		reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+		write_wvalue(G2D_OUTPUT0_LADDR_REG, reg_val);
+
+		if((para->dst_image.format>0x16)&&(para->dst_image.format<0x1A))
+		{
+			if(para->dst_image.format == G2D_FMT_PYUV411UVC) bppnum = 4;
+			else bppnum = 8;
+			if(para->dst_image.format == G2D_FMT_PYUV420UVC)
+				 addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*(para->dst_rect.y/2)+para->dst_rect.x)*bppnum);
+			else addr_val = (__u64)(para->dst_image.addr[1]-0x40000000)*8+(__u64)((para->dst_image.w*para->dst_rect.y+para->dst_rect.x)*bppnum);
+			reg_val = read_wvalue(G2D_OUTPUT_HADDR_REG);
+			reg_val |= ((addr_val>>32)&0xF)<<8;/* high addr in bits */
+			write_wvalue(G2D_OUTPUT_HADDR_REG, reg_val);
+			reg_val = addr_val&0xFFFFFFFF;/* low addr in bits */
+			write_wvalue(G2D_OUTPUT1_LADDR_REG, reg_val);
+			write_wvalue(G2D_OUTPUT1_STRIDE_REG, para->dst_image.w*bppnum);
+			write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+		}
+		if((para->dst_image.format>0x11)&&(para->dst_image.format<0x1D))write_wvalue(G2D_CSC2_CONTROL_REG, 0x1);
+
+		/* start */
+		write_wvalue(G2D_CONTROL_REG, 0x0);
+		write_wvalue(G2D_CONTROL_REG, 0x303);
+		result = g2d_wait_cmd_finish();
+	}
+
+	return result;
+}
+
+__u32 mixer_set_palette(g2d_palette *para){
+	__u32 *pdest_end;
+    __u32 *psrc_cur;
+    __u32 *pdest_cur;
+
+    if(para->size > 0x400)
+    {
+    	para->size = 0x400;
+    }
+
+	psrc_cur = para->pbuffer;
+	pdest_cur = (__u32*)(base_addr+G2D_PALETTE_TAB_REG);
+	pdest_end = pdest_cur + (para->size>>2);
+
+    while(pdest_cur < pdest_end)
+    {
+		*(volatile __u32 *)pdest_cur++ = *psrc_cur++;
+    }
+
+   return 0;
+}
diff --git a/drivers/char/sun4i_g2d/g2d_bsp.h b/drivers/char/sun4i_g2d/g2d_bsp.h
new file mode 100644
index 0000000..c59c078
--- /dev/null
+++ b/drivers/char/sun4i_g2d/g2d_bsp.h
@@ -0,0 +1,265 @@
+/* g2d_bsp.h
+ *
+ * Copyright (c)	2011 xxxx Electronics
+ *					2011 Yupu Tang
+ *
+ * @F23 G2D driver
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA02111-1307USA
+ */
+
+#ifndef __G2D_BSP_H
+#define __G2D_BSP_H
+
+#include "linux/kernel.h"
+#include "linux/mm.h"
+#include <asm/uaccess.h>
+#include <asm/memory.h>
+#include <asm/unistd.h>
+#include "linux/semaphore.h"
+#include <linux/vmalloc.h>
+#include <linux/fs.h>
+#include <linux/dma-mapping.h>
+#include <linux/fb.h>
+#include <linux/sched.h>
+#include <linux/kthread.h>
+#include <linux/err.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include "asm-generic/int-ll64.h"
+
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/init.h>
+#include <linux/dma-mapping.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/cdev.h>
+#include <linux/types.h>
+
+#ifndef __G2D_BSP_DRV_H
+#define __G2D_BSP_DRV_H
+
+/* mixer data format */
+typedef enum {
+	/* share data format */
+	G2D_FMT_ARGB_AYUV8888	= (0x0),
+	G2D_FMT_BGRA_VUYA8888	= (0x1),
+	G2D_FMT_ABGR_AVUY8888	= (0x2),
+	G2D_FMT_RGBA_YUVA8888	= (0x3),
+
+	G2D_FMT_XRGB8888		= (0x4),
+	G2D_FMT_BGRX8888		= (0x5),
+	G2D_FMT_XBGR8888		= (0x6),
+	G2D_FMT_RGBX8888		= (0x7),
+
+	G2D_FMT_ARGB4444		= (0x8),
+	G2D_FMT_ABGR4444		= (0x9),
+	G2D_FMT_RGBA4444		= (0xA),
+	G2D_FMT_BGRA4444		= (0xB),
+
+	G2D_FMT_ARGB1555		= (0xC),
+	G2D_FMT_ABGR1555		= (0xD),
+	G2D_FMT_RGBA5551		= (0xE),
+	G2D_FMT_BGRA5551		= (0xF),
+
+	G2D_FMT_RGB565			= (0x10),
+	G2D_FMT_BGR565			= (0x11),
+
+	G2D_FMT_IYUV422			= (0x12),
+
+	G2D_FMT_8BPP_MONO		= (0x13),
+	G2D_FMT_4BPP_MONO		= (0x14),
+	G2D_FMT_2BPP_MONO		= (0x15),
+	G2D_FMT_1BPP_MONO		= (0x16),
+
+	G2D_FMT_PYUV422UVC		= (0x17),
+	G2D_FMT_PYUV420UVC		= (0x18),
+	G2D_FMT_PYUV411UVC		= (0x19),
+
+	/* just for output format */
+	G2D_FMT_PYUV422			= (0x1A),
+	G2D_FMT_PYUV420			= (0x1B),
+	G2D_FMT_PYUV411			= (0x1C),
+
+	/* just for input format */
+	G2D_FMT_8BPP_PALETTE	= (0x1D),
+	G2D_FMT_4BPP_PALETTE	= (0x1E),
+	G2D_FMT_2BPP_PALETTE	= (0x1F),
+	G2D_FMT_1BPP_PALETTE	= (0x20),
+
+}g2d_data_fmt;
+
+typedef enum {
+	G2D_SEQ_NORMAL = 0x0,
+
+	/* for interleaved yuv422 */
+    G2D_SEQ_VYUY   = 0x1,				/* pixel 0在低16位 */
+    G2D_SEQ_YVYU   = 0x2,				/* pixel 1在低16位 */
+
+	/* for uv_combined yuv420 */
+    G2D_SEQ_VUVU   = 0x3,
+
+	/* for 16bpp rgb */
+    G2D_SEQ_P10    = 0x4,				/* pixel 0在低16位 */
+    G2D_SEQ_P01    = 0x5,				/* pixel 1在低16位 */
+
+	/* planar format or 8bpp rgb */
+    G2D_SEQ_P3210  = 0x6,				/* pixel 0在低8位 */
+    G2D_SEQ_P0123  = 0x7,				/* pixel 3在低8位 */
+
+	/* for 4bpp rgb */
+    G2D_SEQ_P76543210  = 0x8,			/* 7,6,5,4,3,2,1,0 */
+    G2D_SEQ_P67452301  = 0x9,			/* 6,7,4,5,2,3,0,1 */
+    G2D_SEQ_P10325476  = 0xA,			/* 1,0,3,2,5,4,7,6 */
+    G2D_SEQ_P01234567  = 0xB,			/* 0,1,2,3,4,5,6,7 */
+
+	/* for 2bpp rgb */
+    G2D_SEQ_2BPP_BIG_BIG       = 0xC,	/* 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 */
+    G2D_SEQ_2BPP_BIG_LITTER    = 0xD,	/* 12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3 */
+    G2D_SEQ_2BPP_LITTER_BIG    = 0xE,	/* 3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12 */
+    G2D_SEQ_2BPP_LITTER_LITTER = 0xF,	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 */
+
+	/* for 1bpp rgb */
+    G2D_SEQ_1BPP_BIG_BIG       = 0x10,	/* 31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 */
+    G2D_SEQ_1BPP_BIG_LITTER    = 0x11,	/* 24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7 */
+    G2D_SEQ_1BPP_LITTER_BIG    = 0x12,	/* 7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,23,22,21,20,19,18,17,16,31,30,29,28,27,26,25,24 */
+    G2D_SEQ_1BPP_LITTER_LITTER = 0x13,	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 */
+}g2d_pixel_seq;
+
+
+typedef enum {
+	G2D_FIL_NONE			= 0x00000000,
+	G2D_FIL_PIXEL_ALPHA		= 0x00000001,
+	G2D_FIL_PLANE_ALPHA		= 0x00000002,
+	G2D_FIL_MULTI_ALPHA		= 0x00000004,
+}g2d_fillrect_flags;
+
+typedef enum {
+
+	G2D_BLT_NONE			= 0x00000000,
+	G2D_BLT_PIXEL_ALPHA		= 0x00000001,
+	G2D_BLT_PLANE_ALPHA		= 0x00000002,
+	G2D_BLT_MULTI_ALPHA		= 0x00000004,
+	G2D_BLT_SRC_COLORKEY	= 0x00000008,
+	G2D_BLT_DST_COLORKEY	= 0x00000010,
+	G2D_BLT_FLIP_HORIZONTAL	= 0x00000020,
+	G2D_BLT_FLIP_VERTICAL	= 0x00000040,
+	G2D_BLT_ROTATE90		= 0x00000080,
+	G2D_BLT_ROTATE180		= 0x00000100,
+	G2D_BLT_ROTATE270		= 0x00000200,
+	G2D_BLT_MIRROR45		= 0x00000400,
+	G2D_BLT_MIRROR135		= 0x00000800,
+}g2d_blt_flags;
+
+/* flip rectangle struct */
+typedef struct {
+	__s32		x;			/* left top point coordinate x */
+	__s32		y;			/* left top point coordinate y */
+	__u32		w;			/* rectangle width */
+	__u32		h;			/* rectangle height */
+}g2d_rect;
+
+/* image struct */
+typedef struct {
+	__u32			 addr[3];	/* base addr of image frame buffer in byte */
+	__u32			 w;			/* width of image frame buffer in pixel */
+	__u32			 h;			/* height of image frame buffer in pixel */
+	g2d_data_fmt	 format;	/* pixel format of image frame buffer */
+	g2d_pixel_seq	 pixel_seq;	/* pixel sequence of image frame buffer */
+}g2d_image;
+
+typedef struct {
+	g2d_fillrect_flags	 flag;
+	g2d_image			 dst_image;
+	g2d_rect			 dst_rect;
+
+	__u32				 color;		/* fill color */
+	__u32				 alpha;		/* plane alpha value */
+
+}g2d_fillrect;
+
+typedef struct {
+	g2d_blt_flags		 flag;
+	g2d_image			 src_image;
+	g2d_rect			 src_rect;
+
+	g2d_image			 dst_image;
+	__s32				 dst_x;		/* left top point coordinate x of dst rect */
+	__s32				 dst_y;		/* left top point coordinate y of dst rect */
+
+	__u32				 color;		/* colorkey color */
+	__u32				 alpha;		/* plane alpha value */
+
+}g2d_blt;
+
+typedef struct {
+	g2d_blt_flags		 flag;
+	g2d_image			 src_image;
+	g2d_rect			 src_rect;
+
+	g2d_image			 dst_image;
+	g2d_rect			 dst_rect;
+
+	__u32				 color;		/* colorkey color */
+	__u32				 alpha;		/* plane alpha value */
+
+}g2d_stretchblt;
+
+typedef struct {
+	__u32		 flag;		/* 光栅操作码 */
+	g2d_image	 dst_image;
+	g2d_rect	 dst_rect;
+
+	g2d_image	 src_image;
+	__u32		 src_x;
+	__u32		 src_y;
+
+	g2d_image	 mask_image;
+	__u32		 mask_x;
+	__u32		 mask_y;
+
+}g2d_maskblt;
+
+typedef struct {
+	__u32		*pbuffer;
+	__u32		 size;
+
+}g2d_palette;
+
+#endif	/* __G2D_BSP_DRV_H */
+
+typedef struct {
+	__u32	g2d_base;
+	int	(*g2d_begin)(void);
+	int	(*g2d_finish)(void);
+}g2d_init_para;
+
+__u32	mixer_reg_init(void);
+__s32	mixer_blt(g2d_blt *para);
+__s32	mixer_fillrectangle(g2d_fillrect *para);
+__s32	mixer_stretchblt(g2d_stretchblt *para);
+__s32	mixer_maskblt(g2d_maskblt *para);
+__u32	mixer_set_palette(g2d_palette *para);
+__u64	mixer_get_addr(__u32 buffer_addr, __u32 format, __u32 stride, __u32 x, __u32 y);
+__u32	mixer_set_reg_base(__u32 addr);
+__u32	mixer_get_irq(void);
+__u32	mixer_clear_init(void);
+
+
+#endif	/* __G2D_BSP_H */
+
diff --git a/drivers/char/sun4i_g2d/g2d_driver.c b/drivers/char/sun4i_g2d/g2d_driver.c
new file mode 100644
index 0000000..1f710d9
--- /dev/null
+++ b/drivers/char/sun4i_g2d/g2d_driver.c
@@ -0,0 +1,622 @@
+#include"g2d_driver_i.h"
+#include<linux/g2d_driver.h>
+#include"g2d.h"
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#define G2D_BYTE_ALIGN(x) ( ( (x + (4*1024-1)) >> 12) << 12)             /* alloc based on 4K byte */
+static struct g2d_alloc_struct boot_heap_head,boot_heap_tail;
+static struct info_mem g2d_mem[MAX_G2D_MEM_INDEX];
+static int	g2d_mem_sel = 0;
+
+static struct class	*g2d_class;
+static struct cdev	*g2d_cdev;
+static dev_t		 devid ;
+__g2d_drv_t			 g2d_ext_hd;
+__g2d_info_t		 para;
+
+static struct resource g2d_resource[2] =
+{
+	[0] = {
+		.start	= 0x01e80000,
+		.end	= 0x01e8ffff,
+		.flags	= IORESOURCE_MEM,
+	},
+
+	[1] = {
+		.start	= INTC_IRQNO_DE_MIX,
+		.end	= INTC_IRQNO_DE_MIX,
+		.flags	= IORESOURCE_IRQ,
+	},
+
+};
+
+struct platform_device g2d_device =
+{
+	.name           = "g2d",
+	.id		        = -1,
+	.num_resources  = ARRAY_SIZE(g2d_resource),
+	.resource	    = g2d_resource,
+	.dev            = {}
+};
+
+int drv_g2d_begin(void)
+{
+	int result = 0;
+
+	result = down_interruptible(g2d_ext_hd.g2d_finished_sem);
+	return result;
+}
+
+int drv_g2d_finish(void)
+{
+	int result = 0;
+
+	up(g2d_ext_hd.g2d_finished_sem);
+
+	return result;
+
+}
+
+extern unsigned long g2d_start;
+extern unsigned long g2d_size;
+
+__s32 g2d_create_heap(__u32 pHeapHead, __u32 nHeapSize)
+{
+	if(pHeapHead <(__u32)__va(0x40000000))
+	{
+	    ERR("Invalid pHeapHead:%x\n", pHeapHead);
+	    return -1;/* check valid */
+	}
+
+    boot_heap_head.size    = boot_heap_tail.size = 0;
+    boot_heap_head.address = pHeapHead;
+    boot_heap_tail.address = pHeapHead + nHeapSize;
+    boot_heap_head.next    = &boot_heap_tail;
+    boot_heap_tail.next    = 0;
+
+    INFO("head:%x,tail:%x\n" ,boot_heap_head.address, boot_heap_tail.address);
+    return 0;
+}
+
+__s32 drv_g2d_init(void)
+{
+    g2d_init_para init_para;
+
+    DBG("drv_g2d_init\n");
+    init_para.g2d_base		= (__u32)para.io;
+    init_para.g2d_begin		= drv_g2d_begin;
+    init_para.g2d_finish	= drv_g2d_finish;
+    memset(&g2d_ext_hd, 0, sizeof(__g2d_drv_t));
+    g2d_ext_hd.g2d_finished_sem = kmalloc(sizeof(struct semaphore),GFP_KERNEL | __GFP_ZERO);
+    if(!g2d_ext_hd.g2d_finished_sem)
+    {
+        WARNING("create g2d_finished_sem fail!\n");
+        return -1;
+    }
+    sema_init(g2d_ext_hd.g2d_finished_sem, 0);
+    g2d_ext_hd.event_sem = 0;
+    init_waitqueue_head(&g2d_ext_hd.queue);
+	g2d_init(&init_para);
+
+if(g2d_size !=0){
+    INFO("g2dmem: g2d_start=%x, g2d_size=%x\n", (unsigned int)g2d_start, (unsigned int)g2d_size);
+    g2d_create_heap((unsigned long)(__va(g2d_start)), g2d_size);
+}
+
+    return 0;
+}
+
+void *g2d_malloc(__u32 bytes_num)
+{
+	__u32 actual_bytes;
+	struct g2d_alloc_struct *ptr, *newptr;
+
+	if(!bytes_num)return 0;
+	actual_bytes = G2D_BYTE_ALIGN(bytes_num);
+	ptr = &boot_heap_head;
+	while(ptr && ptr->next)
+	{
+		if(ptr->next->address >= (ptr->address + ptr->size +(8*1024)+ actual_bytes))
+		{
+			break;
+		}
+		ptr = ptr->next;
+	}
+
+    if (!ptr->next)
+    {
+        ERR(" it has reached the boot_heap_tail of the heap now\n");
+        return 0;                   /* it has reached the boot_heap_tail of the heap now              */
+    }
+
+    newptr = (struct g2d_alloc_struct *)(ptr->address + ptr->size);
+                                                /* create a new node for the memory block             */
+    if (!newptr)
+    {
+        ERR(" create the node failed, can't manage the block\n");
+        return 0;                               /* create the node failed, can't manage the block     */
+    }
+
+    /* set the memory block chain, insert the node to the chain */
+    newptr->address = ptr->address + ptr->size + 4*1024;
+    newptr->size    = actual_bytes;
+    newptr->u_size  = bytes_num;
+    newptr->next    = ptr->next;
+    ptr->next       = newptr;
+
+    return (void *)newptr->address;
+}
+
+void g2d_free(void *p)
+{
+    struct g2d_alloc_struct *ptr, *prev;
+
+	if( p == NULL )
+		return;
+
+    ptr = &boot_heap_head;						/* look for the node which po__s32 this memory block                   */
+    while (ptr && ptr->next)
+    {
+        if (ptr->next->address == (__u32)p)
+            break;								/* find the node which need to be release                              */
+        ptr = ptr->next;
+    }
+
+	prev = ptr;
+	ptr = ptr->next;
+    if (!ptr) return;							/* the node is heap boot_heap_tail                                     */
+
+    prev->next = ptr->next;						/* delete the node which need be released from the memory block chain  */
+
+    return;
+}
+
+__s32 g2d_get_free_mem_index(void)
+{
+    __u32 i = 0;
+
+    for(i=0; i<MAX_G2D_MEM_INDEX; i++)
+    {
+        if(g2d_mem[i].b_used == 0)
+        {
+            return i;
+        }
+    }
+    return -1;
+}
+
+int g2d_mem_request(__u32 size)
+{
+if (g2d_size ==0){
+	__s32		 sel;
+	struct page	*page;
+	unsigned	 map_size = 0;
+
+    sel = g2d_get_free_mem_index();
+    if(sel < 0)
+    {
+        ERR("g2d_get_free_mem_index fail!\n");
+        return -EINVAL;
+    }
+
+	map_size = (size + 4095) & 0xfffff000;//4k 对齐
+	page = alloc_pages(GFP_KERNEL,get_order(map_size));
+
+	if(page != NULL)
+	{
+		g2d_mem[sel].virt_addr = page_address(page);
+		if(g2d_mem[sel].virt_addr == 0)
+		{
+			free_pages((unsigned long)(page),get_order(map_size));
+			ERR("line %d:fail to alloc memory!\n",__LINE__);
+			return -ENOMEM;
+		}
+		memset(g2d_mem[sel].virt_addr,0,size);
+		g2d_mem[sel].phy_addr = virt_to_phys(g2d_mem[sel].virt_addr);
+	    g2d_mem[sel].mem_len = size;
+		g2d_mem[sel].b_used = 1;
+
+		INFO("map_g2d_memory[%d]: pa=%08lx va=%p size:%x\n",sel,g2d_mem[sel].phy_addr, g2d_mem[sel].virt_addr, size);
+		return sel;
+	}
+	else
+	{
+		ERR("fail to alloc memory!\n");
+		return -ENOMEM;
+	}
+}
+else{
+	__s32 sel;
+	__u32 ret = 0;
+
+    sel = g2d_get_free_mem_index();
+    if(sel < 0)
+    {
+        ERR("g2d_get_free_mem_index fail!\n");
+        return -EINVAL;
+    }
+
+	ret = (__u32)g2d_malloc(size);
+	if(ret != 0)
+	{
+	    g2d_mem[sel].virt_addr = (void*)ret;
+	    memset(g2d_mem[sel].virt_addr,0,size);
+		g2d_mem[sel].phy_addr = virt_to_phys(g2d_mem[sel].virt_addr);
+		g2d_mem[sel].mem_len = size;
+		g2d_mem[sel].b_used = 1;
+
+		INFO("map_g2d_memory[%d]: pa=%08lx va=%p size:%x\n",sel,g2d_mem[sel].phy_addr, g2d_mem[sel].virt_addr, size);
+		return sel;
+	}
+	else
+	{
+		ERR("fail to alloc reserved memory!\n");
+		return -ENOMEM;
+	}
+}
+}
+
+int g2d_mem_release(__u32 sel)
+{
+if(g2d_size ==0){
+	unsigned map_size = PAGE_ALIGN(g2d_mem[sel].mem_len);
+	unsigned page_size = map_size;
+
+	if(g2d_mem[sel].b_used == 0)
+	{
+	    ERR("mem not used in g2d_mem_release,%d\n",sel);
+		return -EINVAL;
+    }
+
+	free_pages((unsigned long)(g2d_mem[sel].virt_addr),get_order(page_size));
+	memset(&g2d_mem[sel],0,sizeof(struct info_mem));
+}
+else{
+
+	if(g2d_mem[sel].b_used == 0)
+	{
+	    ERR("mem not used in g2d_mem_release,%d\n",sel);
+		return -EINVAL;
+    }
+
+	g2d_free((void *)g2d_mem[sel].virt_addr);
+	memset(&g2d_mem[sel],0,sizeof(struct info_mem));
+}
+
+	return 0;
+}
+
+int g2d_mmap(struct file *file, struct vm_area_struct * vma)
+{
+	unsigned long physics;
+	unsigned long mypfn;
+	unsigned long vmsize = vma->vm_end-vma->vm_start;
+
+    if(g2d_mem[g2d_mem_sel].b_used == 0)
+    {
+        ERR("mem not used in g2d_mmap,%d\n",g2d_mem_sel);
+        return -EINVAL;
+    }
+
+	physics =  g2d_mem[g2d_mem_sel].phy_addr;
+	mypfn = physics >> PAGE_SHIFT;
+
+	if(remap_pfn_range(vma,vma->vm_start,mypfn,vmsize,vma->vm_page_prot))
+		return -EAGAIN;
+
+	return 0;
+}
+
+static int g2d_open(struct inode *inode, struct file *file)
+{
+	g2d_clk_on();
+	return 0;
+}
+
+static int g2d_release(struct inode *inode, struct file *file)
+{
+	g2d_clk_off();
+	return 0;
+}
+
+long g2d_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	__s32	ret = 0;
+
+	switch (cmd) {
+
+	/* Proceed to the operation */
+	case G2D_CMD_BITBLT:{
+		g2d_blt blit_para;
+		if(copy_from_user(&blit_para, (g2d_blt *)arg, sizeof(g2d_blt)))
+		{
+			kfree(&blit_para);
+			return  -EFAULT;
+		}
+	    ret = g2d_blit(&blit_para);
+    	break;
+	}
+	case G2D_CMD_FILLRECT:{
+		g2d_fillrect fill_para;
+		if(copy_from_user(&fill_para, (g2d_fillrect *)arg, sizeof(g2d_fillrect)))
+		{
+			kfree(&fill_para);
+			return  -EFAULT;
+		}
+	    ret = g2d_fill(&fill_para);
+    	break;
+	}
+	case G2D_CMD_STRETCHBLT:{
+		g2d_stretchblt stre_para;
+		if(copy_from_user(&stre_para, (g2d_stretchblt *)arg, sizeof(g2d_stretchblt)))
+		{
+			kfree(&stre_para);
+			return  -EFAULT;
+		}
+	    ret = g2d_stretchblit(&stre_para);
+    	break;
+	}
+	case G2D_CMD_PALETTE_TBL:{
+		g2d_palette pale_para;
+		if(copy_from_user(&pale_para, (g2d_palette *)arg, sizeof(g2d_palette)))
+		{
+			kfree(&pale_para);
+			return  -EFAULT;
+		}
+	    ret = g2d_set_palette_table(&pale_para);
+    	break;
+	}
+
+	/* just management memory for test */
+	case G2D_CMD_MEM_REQUEST:
+		ret =  g2d_mem_request(arg);
+		break;
+
+	case G2D_CMD_MEM_RELEASE:
+		ret =  g2d_mem_release(arg);
+		break;
+
+	case G2D_CMD_MEM_SELIDX:
+		g2d_mem_sel = arg;
+		break;
+
+	case G2D_CMD_MEM_GETADR:
+	    if(g2d_mem[arg].b_used)
+	    {
+		    ret = g2d_mem[arg].phy_addr;
+		}
+		else
+		{
+			ERR("mem not used in G2D_CMD_MEM_GETADR\n");
+		    ret = -1;
+		}
+		break;
+
+	/* Invalid IOCTL call */
+	default:
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static struct file_operations g2d_fops = {
+	.owner				= THIS_MODULE,
+	.open				= g2d_open,
+	.release			= g2d_release,
+	.unlocked_ioctl		= g2d_ioctl,
+	.mmap				= g2d_mmap,
+};
+
+static int g2d_probe(struct platform_device *pdev)
+{
+	int size;
+	int	ret = 0;
+	struct resource	*res;
+	__g2d_info_t	*info = NULL;
+
+	info = &para;
+	info->dev = &pdev->dev;
+	platform_set_drvdata(pdev,info);
+
+	/* get the clk */
+	g2d_openclk();
+//	g2d_clk_on();
+
+	/* get the memory region */
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if(res == NULL)
+		{
+			ERR("failed to get memory register\n");
+			ret = -ENXIO;
+			goto  dealloc_fb;
+		}
+
+	/* reserve the memory */
+	size = (res->end - res->start) + 1;
+	info->mem = request_mem_region(res->start, size, pdev->name);
+	if(info->mem == NULL)
+		{
+			ERR("failed to get memory region\n");
+			ret = -ENOENT;
+			goto  relaese_regs;
+		}
+
+	/* map the memory */
+	info->io = ioremap(res->start, size);
+	if(info->io == NULL)
+		{
+			ERR("iormap() of register failed\n");
+			ret = -ENXIO;
+			goto  release_mem;
+		}
+
+	/* get the irq */
+	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	if(res == NULL)
+		{
+			ERR("failed to get irq resource\n");
+			ret = -ENXIO;
+			goto relaese_regs;
+		}
+
+	/* request the irq */
+	info->irq = res->start;
+	ret = request_irq(info->irq,g2d_handle_irq,0,g2d_device.name,NULL);
+	if(ret)
+		{
+			ERR("failed to install irq resource\n");
+			goto relaese_regs;
+		}
+
+	drv_g2d_init();
+
+	return 0;
+
+	relaese_regs:
+		iounmap(info->io);
+	release_mem:
+		release_resource(info->mem);
+		kfree(info->mem);
+	dealloc_fb:
+		platform_set_drvdata(pdev, NULL);
+		kfree(info);
+
+	return ret;
+}
+
+static int g2d_remove(struct platform_device *pdev)
+{
+	__g2d_info_t *info = platform_get_drvdata(pdev);
+
+	/* power down */
+	g2d_closeclk();
+
+	free_irq(info->irq, info);
+	iounmap(info->io);
+	release_resource(info->mem);
+	kfree(info->mem);
+
+	platform_set_drvdata(pdev, NULL);
+
+	INFO("Driver unloaded succesfully.\n");
+	return 0;
+}
+
+static int g2d_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	g2d_clk_off();
+	INFO("g2d_suspend succesfully.\n");
+
+	return 0;
+}
+
+static int g2d_resume(struct platform_device *pdev)
+{
+	g2d_clk_on();
+	INFO("g2d_resume succesfully.\n");
+
+	return 0;
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+void g2d_early_suspend(struct early_suspend *h)
+{
+//    g2d_suspend(NULL, PMSG_SUSPEND);
+}
+
+void g2d_late_resume(struct early_suspend *h)
+{
+//    g2d_resume(NULL);
+}
+
+static struct early_suspend g2d_early_suspend_handler =
+{
+    .level   = EARLY_SUSPEND_LEVEL_DISABLE_FB,
+	.suspend = g2d_early_suspend,
+	.resume = g2d_late_resume,
+};
+#endif
+
+
+static struct platform_driver g2d_driver = {
+	.probe          = g2d_probe,
+	.remove         = g2d_remove,
+#ifndef CONFIG_HAS_EARLYSUSPEND
+	.suspend        = g2d_suspend,
+	.resume         = g2d_resume,
+#else
+	.suspend        = NULL,
+	.resume         = NULL,
+#endif
+	.driver			=
+	{
+		.owner		= THIS_MODULE,
+		.name		= "g2d",
+	},
+};
+
+int __init g2d_module_init(void)
+{
+	int ret, err;
+
+    alloc_chrdev_region(&devid, 0, 1, "g2d_chrdev");
+    g2d_cdev = cdev_alloc();
+    cdev_init(g2d_cdev, &g2d_fops);
+    g2d_cdev->owner = THIS_MODULE;
+    err = cdev_add(g2d_cdev, devid, 1);
+    if (err)
+    {
+        ERR("I was assigned major number %d.\n", MAJOR(devid));
+        return -1;
+    }
+
+    g2d_class = class_create(THIS_MODULE, "g2d_class");
+    if (IS_ERR(g2d_class))
+    {
+        ERR("create class error\n");
+        return -1;
+    }
+
+	device_create(g2d_class, NULL, devid, NULL, "g2d");
+	ret = platform_device_register(&g2d_device);
+	if (ret == 0)
+	{
+		ret = platform_driver_register(&g2d_driver);
+	}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+    register_early_suspend(&g2d_early_suspend_handler);
+#endif
+	INFO("Module initialized.major:%d\n", MAJOR(devid));
+	return ret;
+}
+
+static void __exit g2d_module_exit(void)
+{
+	INFO("g2d_module_exit\n");
+	kfree(g2d_ext_hd.g2d_finished_sem);
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+    unregister_early_suspend(&g2d_early_suspend_handler);
+#endif
+
+	platform_driver_unregister(&g2d_driver);
+	platform_device_unregister(&g2d_device);
+
+    device_destroy(g2d_class,  devid);
+    class_destroy(g2d_class);
+
+    cdev_del(g2d_cdev);
+}
+
+module_init(g2d_module_init);
+module_exit(g2d_module_exit);
+
+MODULE_AUTHOR("yupu_tang");
+MODULE_DESCRIPTION("g2d driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:g2d");
+
diff --git a/drivers/char/sun4i_g2d/g2d_driver_i.h b/drivers/char/sun4i_g2d/g2d_driver_i.h
new file mode 100644
index 0000000..bf6035c
--- /dev/null
+++ b/drivers/char/sun4i_g2d/g2d_driver_i.h
@@ -0,0 +1,78 @@
+/* g2d_driver_i.h
+ *
+ * Copyright (c)	2011 xxxx Electronics
+ *					2011 Yupu Tang
+ *
+ * @ F23 G2D driver
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA02111-1307USA
+ */
+
+#ifndef __G2D_DRIVER_I_H
+#define __G2D_DRIVER_I_H
+
+#include"g2d_bsp.h"
+
+#define G2D_DEBUG	1
+#ifdef	G2D_DEBUG
+#define	DBG(format, args...) printk(KERN_DEBUG "%s: " format, "G2D", ## args)
+#else
+#define	DBG(format, args...)
+#endif
+#define ERR(format, args...) printk(KERN_ERR "%s: " format, "G2D", ## args)
+#define WARNING(format, args...) printk(KERN_WARNING "%s: " format, "G2D", ## args)
+#define INFO(format, args...) printk(KERN_INFO "%s: " format, "G2D", ## args)
+
+#define MAX_G2D_MEM_INDEX	1000
+#define	INTC_IRQNO_DE_MIX	46
+
+struct info_mem
+{
+	unsigned long	 phy_addr;
+	void			*virt_addr;
+    __u32			 b_used;
+	__u32			 mem_len;
+};
+
+typedef struct
+{
+	struct device		*dev;
+	struct resource		*mem;
+	void __iomem		*io;
+	__u32				 irq;
+
+}__g2d_info_t;
+
+typedef struct
+{
+    __u32				 mid;
+    __u32				 used;
+    __u32				 status;
+    struct semaphore	*g2d_finished_sem;
+    struct semaphore	*event_sem;
+	wait_queue_head_t	 queue;
+	__u32				 finish_flag;
+
+}__g2d_drv_t;
+
+struct g2d_alloc_struct
+{
+	__u32	address;
+	__u32	size;
+	__u32	u_size;
+	struct	g2d_alloc_struct *next;
+};
+
+#endif	/* __G2D_DRIVER_I_H */
\ No newline at end of file
diff --git a/drivers/char/sun4i_g2d/g2d_regs.h b/drivers/char/sun4i_g2d/g2d_regs.h
new file mode 100644
index 0000000..160b137
--- /dev/null
+++ b/drivers/char/sun4i_g2d/g2d_regs.h
@@ -0,0 +1,156 @@
+/* g2d_regs.h
+ *
+ * Copyright (c)	2011 xxxx Electronics
+ *					2011 Yupu Tang
+ *
+ * @ F23 G2D driver
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA02111-1307USA
+ */
+
+#ifndef __G2D_MIXER_REGS_H
+#define __G2D_MIXER_REGS_H
+
+/*
+	Graphics 2D General Registers
+*/
+#define G2D_BASE_ADDR			(0x01e80000)/* Base Address			*/
+#define G2D_CONTROL_REG			(0x00)		/* Control register			*/
+#define G2D_STATUS_REG			(0x04)		/* Status register		*/
+#define G2D_SCAN_ORDER_REG		(0x08)		/* DMA scan order control register		*/
+
+/*
+	Graphics 2D Input Address Parameter Setting Registers
+*/
+#define G2D_DMA_HADDR_REG		(0x0c)		/* Input DMA high 4 bits start addr register	*/
+#define G2D_DMA0_LADDR_REG		(0x10)		/* Input DMA0 low 32 bits start addr register	*/
+#define G2D_DMA1_LADDR_REG		(0x14)		/* Input DMA1 low 32 bits start addr register	*/
+#define G2D_DMA2_LADDR_REG		(0x18)		/* Input DMA2 low 32 bits start addr register	*/
+#define G2D_DMA3_LADDR_REG		(0x1c)		/* Input DMA3 low 32 bits start addr register	*/
+
+/*
+	Graphics 2D Input Linewidth Buffer Parameter Setting Registers
+*/
+#define G2D_DMA0_STRIDE_REG		(0x20)		/* Input DMA0 line stride register	*/
+#define G2D_DMA1_STRIDE_REG		(0x24)		/* Input DMA1 line stride register	*/
+#define G2D_DMA2_STRIDE_REG		(0x28)		/* Input DMA2 line stride register	*/
+#define G2D_DMA3_STRIDE_REG		(0x2c)		/* Input DMA3 line stride register	*/
+
+#define G2D_DMA0_SIZE_REG		(0x30)		/* Input DMA0 memory block size register	*/
+#define G2D_DMA1_SIZE_REG		(0x34)		/* Input DMA1 memory block size register	*/
+#define G2D_DMA2_SIZE_REG		(0x38)		/* Input DMA2 memory block size register	*/
+#define G2D_DMA3_SIZE_REG		(0x3c)		/* Input DMA3 memory block size register	*/
+#define G2D_DMA0_COOR_REG		(0x40)		/* Input DMA0 memory block coordinate register	*/
+#define G2D_DMA1_COOR_REG		(0x44)		/* Input DMA1 memory block coordinate register	*/
+#define G2D_DMA2_COOR_REG		(0x48)		/* Input DMA2 memory block coordinate register	*/
+#define G2D_DMA3_COOR_REG		(0x4c)		/* Input DMA3 memory block coordinate register	*/
+
+#define G2D_DMA0_CONTROL_REG	(0x50)		/* Input DMA0 control register	*/
+#define G2D_DMA1_CONTROL_REG	(0x54)		/* Input DMA1 control register	*/
+#define G2D_DMA2_CONTROL_REG	(0x58)		/* Input DMA2 control register	*/
+#define G2D_DMA3_CONTROL_REG	(0x5c)		/* Input DMA3 control register	*/
+
+#define G2D_DMA0_FILLCOLOR_REG	(0x60)		/* Input DMA0 fillcolor register	*/
+#define G2D_DMA1_FILLCOLOR_REG	(0x64)		/* Input DMA1 fillcolor register	*/
+#define G2D_DMA2_FILLCOLOR_REG	(0x68)		/* Input DMA2 fillcolor register	*/
+#define G2D_DMA3_FILLCOLOR_REG	(0x6c)		/* Input DMA3 fillcolor register	*/
+
+#define G2D_CSC0_CONTROL_REG	(0x74)		/* Color space converter0 control register	*/
+#define G2D_CSC1_CONTROL_REG	(0x78)		/* Color space converter1 control register	*/
+
+#define G2D_SCALER_CONTROL_REG	(0x80)		/* Scaler control register	*/
+#define G2D_SCALER_SIZE_REG		(0x84)		/* Scaler output size control register	*/
+#define G2D_SCALER_HFACTOR_REG	(0x88)		/* Scaler horizontal scaling factor register	*/
+#define G2D_SCALER_VFACTOR_REG	(0x8c)		/* Scaler vertical scaling factor register	*/
+#define G2D_SCALER_HPHASE_REG	(0x90)		/* Scaler horizontal start phase register	*/
+#define G2D_SCALER_VPHASE_REG	(0x94)		/* Scaler vertical start phase register	*/
+
+#define G2D_ROP_CONTROL_REG		(0xb0)		/* Rop control register	*/
+#define G2D_ROP_INDEX0_REG		(0xb8)		/* Rop index0 control table setting register	*/
+#define G2D_ROP_INDEX1_REG		(0xbc)		/* Rop index1 control table setting register	*/
+
+#define G2D_CK_CONTROL_REG		(0xc0)		/* Colorkey/alpha control register	*/
+#define G2D_CK_MINCOLOR_REG		(0xc4)		/* Colorkey min color control register	*/
+#define G2D_CK_MAXCOLOR_REG		(0xc8)		/* Colorkey max color control register	*/
+#define G2D_ROP_FILLCOLOR_REG	(0xcc)		/* Rop output fillcolor setting register	*/
+#define G2D_CSC2_CONTROL_REG	(0xd0)		/* Color space converter2 control register	*/
+#define G2D_OUTPUT_CONTROL_REG	(0xe0)		/* Output control register	*/
+#define G2D_OUTPUT_SIZE_REG		(0xe8)		/* Output size register	*/
+#define G2D_OUTPUT_HADDR_REG	(0xec)		/* Output high 4 bits address control register	*/
+#define G2D_OUTPUT0_LADDR_REG	(0xf0)		/* Output low 32 bits address control register	*/
+#define G2D_OUTPUT1_LADDR_REG	(0xf4)		/* Output low 32 bits address control register	*/
+#define G2D_OUTPUT2_LADDR_REG	(0xf8)		/* Output low 32 bits address control register	*/
+
+#define G2D_OUTPUT0_STRIDE_REG	(0x100)		/* Output channel0 line stride control register	*/
+#define G2D_OUTPUT1_STRIDE_REG	(0x104)		/* Output channel1 line stride control register	*/
+#define G2D_OUTPUT2_STRIDE_REG	(0x108)		/* Output channel2 line stride control register	*/
+#define G2D_OALPHA_CONTROL_REG	(0x120)		/* Output alpha control register	*/
+
+#define G2D_CSC01_ADDR_REG		(0x180)		/* CSC0/1 coefficient/constant start addr register(0x180-0x1ac)	*/
+#define G2D_CSC2_ADDR_REG		(0x1c0)		/* CSC2 coefficient/constant start addr register(0x1c0-0x1ec)	*/
+#define G2D_SCALER_HFILTER_REG	(0x200)		/* Scaling horizontal filtering coefficient ram block register(0x200-0x27c)	*/
+#define G2D_SCALER_VFILTER_REG	(0x280)		/* Scaling vertical filtering coefficient ram block register(0x280-0x2fc)	*/
+#define G2D_PALETTE_TAB_REG		(0x400)		/* Scaling horizontal filtering coefficient ram block register(0x400-0x7fc)	*/
+
+/* Mixer start control */
+#define G2D_ENABLE_CTRL			(1<<0)
+#define G2D_DISABLE_CTRL		(0<<0)
+#define G2D_START_CTRL			(1<<1)
+#define G2D_STOP_CTRL			(0<<1)
+#define G2D_FINISH_IRQ_ENABLE	(1<<8)
+#define G2D_ERROR_IRQ_ENABLE	(1<<9)
+
+/* Scan mode select */
+#define G2D_TOP_DOWN_LR		(0<<8)
+#define G2D_TOP_DOWN_RL		(1<<8)
+#define G2D_DOWN_TOP_LR		(2<<8)
+#define G2D_DOWN_TOP_RL		(3<<8)
+
+/* Input DMA setting */
+#define G2D_FILL_ENABLE		(1<<16)
+#define G2D_FILL_DISABLE	(0<<16)
+
+/* rotation/mirror mode */
+#define G2D_TRANSFORM_COPY			(0<<4)
+#define G2D_TRANSFORM_ROTATE90		(5<<4)
+#define G2D_TRANSFORM_ROTATE180		(3<<4)
+#define G2D_TRANSFORM_ROTATE270		(6<<4)
+#define G2D_TRANSFORM_HFLIP			(1<<4)
+#define G2D_TRANSFORM_VFLIP			(2<<4)
+#define G2D_TRANSFORM_MIRROR45		(7<<4)
+#define G2D_TRANSFORM_MIRROR135		(4<<4)
+
+/* Work Mode Select */
+#define G2D_NORMAL_MODE		(0<<1)
+#define G2D_PALETTE_MODE	(1<<1)
+#define G2D_IDMA_ENABLE		(1<<0)
+#define G2D_IDMA_DISABLE	(0<<0)
+
+/* Scaler Control Select */
+#define G2D_SCALER_DISABLE	(0<<0)
+#define G2D_SCALER_ENABLE	(1<<0)
+#define G2D_SCALER_4TAP4	(0<<4)
+#define G2D_SCALER_2TAP4	(1<<4)
+#define G2D_SCALER_1TAP4	(2<<4)
+
+#define get_bvalue(n)	(*((volatile __u8 *)(n)))          /* byte input */
+#define put_bvalue(n,c)	(*((volatile __u8 *)(n)) = (c))    /* byte output */
+#define get_hvalue(n)	(*((volatile __u16 *)(n)))         /* half word input */
+#define put_hvalue(n,c)	(*((volatile __u16 *)(n)) = (c))   /* half word output */
+#define get_wvalue(n)	(*((volatile __u32 *)(n)))          /* word input */
+#define put_wvalue(n,c)	(*((volatile __u32 *)(n)) = (c))    /* word output */
+
+#endif /* __G2D_MIXER_REGS_H */
+
diff --git a/drivers/video/Kconfig b/drivers/video/Kconfig
index 65b07f4..ccd08ba 100644
--- a/drivers/video/Kconfig
+++ b/drivers/video/Kconfig
@@ -270,6 +270,24 @@ config FB_GRVGA
 	---help---
 	This enables support for the SVGACTRL framebuffer in the GRLIB IP library from Aeroflex Gaisler.
 
+config LYCHEE_HDMI_SUN4I
+        tristate "HDMI Driver Support(sun4i)"
+        depends on ARCH_SUN4I
+        ---help---
+        default m
+
+config LYCHEE_FB_SUN4I
+        tristate "DISP Driver Support(sun4i)"
+        depends on FB && ARCH_SUN4I
+        ---help---
+        default m
+
+config LYCHEE_LCD_SUN4I
+        tristate "LCD Driver Support(sun4i)"
+        depends on ARCH_SUN4I
+        ---help---
+        default m
+
 config FB_CIRRUS
 	tristate "Cirrus Logic support"
 	depends on FB && (ZORRO || PCI)
diff --git a/drivers/video/Makefile b/drivers/video/Makefile
index 9356add..843c9f2 100644
--- a/drivers/video/Makefile
+++ b/drivers/video/Makefile
@@ -29,6 +29,9 @@ obj-$(CONFIG_FB_MACMODES)      += macmodes.o
 obj-$(CONFIG_FB_DDC)           += fb_ddc.o
 obj-$(CONFIG_FB_DEFERRED_IO)   += fb_defio.o
 obj-$(CONFIG_FB_WMT_GE_ROPS)   += wmt_ge_rops.o
+obj-$(CONFIG_LYCHEE_HDMI_SUN4I)   += sun4i/hdmi/
+obj-$(CONFIG_LYCHEE_FB_SUN4I)     += sun4i/disp/
+obj-$(CONFIG_LYCHEE_LCD_SUN4I)    += sun4i/lcd/
 
 # Hardware specific drivers go first
 obj-$(CONFIG_FB_AMIGA)            += amifb.o c2p_planar.o
diff --git a/drivers/video/sun4i/A10_linux_display_driver_interface.xls b/drivers/video/sun4i/A10_linux_display_driver_interface.xls
new file mode 100644
index 0000000000000000000000000000000000000000..fbdd729566be683a0604d0ce02cb00f4cb445a62
GIT binary patch
literal 64512
zcmeI52Y6P;neXS51c)Yzjj=%j(FF()&BlO1LI@-yeG-yrrU=xKj6kv)U~D5}xq=PY
z#@M7dy=?lX-SlK@Hi<Xc-DKlUvWb(8b91vPPT3@m<8c4~cjlBiXFefpKbvRo<<oQY
zeKTifepBChr<^%o`|7yo-u$6S-&c{(8kMg8baA*E8nRE|_Z^;jtit_^7isjqkKs40
zu6+In<-qVv6y(q$>U8ci!~Ws(_?fQM_f?wuV8$2lU#TD9+NC=9JNLiyvrgi$FTpr`
z9u@DVL<Z_&LVYqZMvYRcwxzXeTYKk$`u6q%uZPntb)7_ay!^jP{(nF`e_H<Eq{ge~
z5=YdH)BbYY3IwST)Ta`K;_hMjKVAN3;eSGXT>N}XY!<7l)eCTc@%S0me|4WqOPt(U
zQ~6rje<Wr232;BnJcw`;DpR@am71sqA5U^OJKTQ+d9c|Teg-n1;U^;T$xt($_6qSF
zTzsZv%vVFyRVp!EJ%4e!nxXP>%}@numC`o5)Pj)hl#J!557)Y!?^M;QNj0k7DLmew
zhM~5^I19l_Mbr1DWE3GeQ&M{!nCu18s^+OBDp99$O$6uRSCC%XuTu71JMAtP(~&#V
z#h3P5D8Hv<EL3yxr|NR&<<7{TF{7X^cNKr{S`ao(Uoc(l3+r;HWE@4#uS^|1oeEbJ
z>`10|r=z-7t#w5AdNp4y4n=oiK_te31tPt6Z4m8AsQD8ht7hti&0V!C&-~sscS^=o
zRFz5LyF06!8h2Yxa#1NJ`%cISg#jajnT0@dBW~=F#Nl(08T|a$ML709pU<Uz0%o!Q
zjdx>Udp3TT`&9M})#d*GW%~pR#s7HuIb7$%@4Xw^9-W8!4b_%d{^vX0C(v3YKO^BJ
zP*dIZbDj31Q*ar(gc`2U$C{6hCv3F+5!*g9g*{#AaK@z-<`%-F!wK1|!d#l7;g3sY
zp9}Z!5evt%58|1E3;jZWBH<JyRH596+S~CN1~-zfBWY=c^pTM#?I>i=)aJ(R6Diy$
zQn)wqkA*)@r`NK-PN_(_1o2VkqtitNIswrVbw5Vzk$Xq%^k${755lqYA!Ki*D`c+<
z5vG?v{3-D%NYn03`3CVf@iFNQ#nUSHP(0JZ^(|!YyMHV#Lyhela*^MvPs#VVzD)TZ
z-<KiZSM?2(@2mUL<$FTkQ2D;5Z}`Q%32J5cs<G-9`z0xfW>v4=-tZqa_d=rn@eu8X
zCK^?%>OwQ3{VA29w&L##iA-F8u1Ki=RJSXn=7ml=S3_S|f&Xa`)XXW?;xt@v3LQj$
zXyykRv3zLeZ+<UTBVQPg@6SOY$W(VHilFFx9{QxpEL2l|$tsWbo(Wl#IT6?Ilp6a-
zm76;g$^Qrt*Qg9SSzlIDRaacGzHWU<-G=hA;!P#hb(P5kRIDND2He-5iE2~=DNo^i
z!v=OWQ9swJ(b`W<y{bE3|C4iH=y<yNW#o9?w#QEYVRNfGq`ILab*eVCPc`7zSI!=<
z%<CC`k<u|5*f2GO_^!=AI~N3HJL*fD5J^&b(GH|$YgLsaMbYGk+-}%l2dvO??7Y&B
zH<r{&;3cu_n&EU`1NY@yDvIiAN{gzi>dH&DmXt?HZl5Gw%IB<5;pq60S6o_MX%pk_
z7<$~@OlNr8O3P|X>PoiPmLzoo;?5Y{Ae=FF>&lCYH-$qR9u)K6J$UxXtlEqnL%UgP
zqWLshJA8is4^G++7d6kWWrd4+aF=&=$>uF3HMN6vTwYRCQxbK&L`UUIXV*0SY3sUO
z`Re(T{H8gpHeVIi58tnCe&5@*xxe>sc5dI<vi0RN?|ERzp_R#J-}ttZtE=)=Nz;iP
zuiyXcz0aKeVAHSnvK?qYe_MC#N!l&#`Q6Edu~sogqnTcf?y7mYZ{*>EYVCPV^U9-f
zPZ>cT(^E7#llARpG|YYKAev>p>QT-3V^jTpW&7SdsLXX3+Gs&nhdaQdDbItB9}R4d
z4(zih4;?4V9caFKCVBmB|6ZABc)F%(e}8Y6Y6r4YWJ0bw4A3Fq+VP9w#1mw4;p6xG
zYfWlMG-l)Mn5AZ>@aWM7?{TM1{HvOdrhLT+_xG}n(ERe5U(`IGoOI^zPd|V1&e|U)
zzkRy=0j4=$H9m1)^4iMM&F{P`U*#$NtG_q>RCm))P~`NnUX`gDRfVD`RuyVJzROjS
z+M!A?60K9UsuK5d)goL2yIcpCwc@@4Zr`}`gI#k~JkN7<V!WEy-@6}Tyd5=RAHH+t
ze}`(pHydxh>Z)Otu0PMa+CG}CCO`^!ohO3{@Dm-W1DvR1=#|sJF-#>jrrKqeI*?q|
zD~awwGhuQEN~#I;(lNW7K*vT4qyfdjBI!hN96+p&N>N0!-FOSKeQ@5cj%KdgTdHiG
zn6iJYDyxbK*cH)2=zvJ*kc=KxtCI7Qo_RsCzn7JVO=3~AZY0lM=<mJn!GG=5retM*
zZ@wDUH#+%p-z`-^<;g|OZ9|9@G!!@c9aY}+O+m4F*l3<!tK&O#7vpm1__;m#s(14}
zJ89Cf*p&Rux&GeY_rAEZYx7HYQ1FdTK3fwF#t33hc2X`LM0vJD)V4qd1pULxWEW&5
z6GIVAOk5DB)?jKXDl2PCQ^147zV>iY0IJJ2md3i@)RA51bZ?XaMmCxg{k`u`zGF{3
zb*c2Z;>u)gbx~X+$O<Za9P#4LuOEm*a-5Z%+EGnW?Uw4I+OoKwJs{?`r%u(zF>b|%
zn9?n=revDCJEuBNq@P-(I#0wIAz2zveUr%fL(*MS+NWyt*XS%{mtm`HnHPUjlh^Y|
ztQHTy7%ex`X%}E_a4WjADm8CEgPV*guElE7MQul$sK=Qp%Oa+NM!ing(QZWJiVs;_
z`Vb{ZH@aN9ZboyZZj|fLjxJs_v8r!tZ#a<K)!x(D(3E?)^-yE`;k>%K#@4Qmy3VGC
z?z-;Wd2{Vp{Rja{4c1<pJNF%Is_$uTZtC<rHrG46DNK;dFp9#i9R+qkQR|2*bR55S
zN+OyN`M_-*?Dyf$K1q^G-80?7SNhtUJ5NM|4Y~-ows;j1C9w+}dOepbmVqnXyQRwJ
ztJDY`Y{9m|Z8}ap7&<R;l*m<Bpph6<R=spI>@;63Lp~fuK{jD@|KiT7r{faVbPp8Q
zclIvt>Dtp;zhzh1v3K5O7hPW><nW)~IFQ3k9T|p5AvX5hH8t_@FtXRq*ro^Rj7>aM
zXjtD0hZ2fIYF~Y6@D;ut>M94!i?m@XVLJ%<958d>Q%Y(eM+#zMbec?CSV_8ApzcC}
zj>7j!)VVH^U!9^+9D=!BMmvijQRs>;TF@Bw<3GFCT<K<e@w*L*UaoY>oiN$qbgJPO
zIZ1jWCUxxcXQU+N;rz<{Z;DbhDywu<>>~IxN5(GEKUZYt>YQ;8SUDJ{NXoqE8VNU`
zmNY>~QdmSqX1q&#<q{|BDjml;JI3tFiwUTFwFR1;C$!??3X_P*MMdel8^Nz=)tIdV
zXHwmnkPkWNzQa-LGmX0{Hzg~oIe$^QnW3a%uHBwgyh_7Ey;p8)V_v~sH$-|nt|v>A
z8C(B!^-8o(*UZH8HGi{zm0G-G*2631|L<b@G^SKHtShUeW~ArGO4pay6_`lG?<|f+
z_c|R3%2{_5^0rm(+OnrWjYz(@^YJ~@!~1&~tydV(;!6f(G^($k{_a*i@F6YpVh<FL
zE)iLWPz4(ynzZ6F4?-y#m!Y~0_I2*xS+IM6n~Mj!xn!W5OJg_Fbw)DUtE(c+tgF>%
z%+o`3Qe>~L%ENN_T@b}w7RM|I($kEl)dS(%t(L=Xu9-O>uExR7RSt1G!3$7p>4OQ9
z%Mc?F6eriO9w<nyk-ru}4p9kK9z9$^Z>kMC%Dz$KFq!X9+Osm3Buk5u#h8>$PFJd6
zWz(USeTSe(LVw&>-`2Ehv2W9Kh!)dziC@~GT{5GPx%Qwb)%dMTjSM$eZf8i{EW5A|
zLfSU9oFE5mc2|tebi2laesFB1se_9y6v#}ubL7|MsaHY#T%)}%Ec@HJ!x*{;lYWpv
z9Nj@iXGs{#R6|EU&>)_!;bIp=X*`~n3^a(TJJ2j0XjemLQ_~?4;)@nXgm}CRy?PrR
z1$SZDN~#10a=HwoL(FLPxH^(3Kj`REjvqEByapGx>7auw;4BemHZL{e?NT|RmKrP>
zd66qgW~c;v2}<peDiI%9Qv{B3-O%;Lc}o{imdjT#zMtwX%`sKap9~N9^h}r@9QOBC
zRC9hU7y{;DYI9_={yc5xVtF&ZP&eqHvt;Vd4tm6ZL7RCs##wi+dNwUjro8?!d2UZZ
zb?=k;W^()=lgY}0>Sr&+HJ@pNO}rO;>Y!a2knaW0>Ko2kObdqw*8ROLn+tcr#pZnV
z)dTY|`4J4d?J}U7U(^h(o?p$jy-=2a?FOK*q-@q&nK>1ek0jN87E^!kThD}xZ)B{%
z`qGwoUKx7oSh!Ul&VS^qpQE1KcHv#sKdG5i*|qtv>p0RrRof<N2S-L+!f8Z@-QtXU
zjT)UUJ^sKENWIXKub$h=IZ$^7KG!t&_?jlY451^*C>~L#YPrd5RNrTIo~nKJ!lX(r
zP_PM7d1n*1SDyNNwY!C~@;(Mi0d<sUF_`%&7DB4%^!IY)V0-*7_LG|O8@el%$3w?^
zpX93lEAo17&wyToS~DWKT20AK45sR+tchO9{c1OJk2BQnGRQ@K_F$-7kDToku`v=k
z=vwE`^hWG~V9?Dlfus*{=wjDKM1M_fQ8jvAY-lJhDlUypfJWEXOSYF3Z^4Q-JrpI^
z*VWWkVmpM(XS9zI^=DIYWqD<_T_n^Q<9+Npx6`QFpfwSMxv6AFG}x$Htzx*{#<B&v
zLse0ENiEV^yDqlvAnKe!58ymH=Uh{qtfQB0W$U9$3ExgcH4e{lX^Cs@-xZU}Ewxo!
zYU^ru#Mg$RN~!K<E34vrGNOf|T^5&D##i*C8LgeNXf~|7RG|d@eB7;jML^WL>SAPG
za((5tX!veF%<P)W^dlS;)May0`iYiokoKyg>e!5e+jUWSRcVo9e@?U>=&+6Js9LA6
zY1VFXK~%Jtczu}S^ubKhKDHK>$Jb9%RH99e1h^{^w!2iuWA9F^v~O&WiES?$?~FPm
zSG4lD<FKx>wzje&>egL6A_%I>Dlg@_rWnGdx-P|jnrPU*Yv+cV6t0b^j>g1HVKp3V
zjNZX)6Fces_2mz6Gez&7T~+l5xKP?4bGf#2PEGj(QN4g+JHT!2fSskw!6<LsOFbr7
zo$%H$?9i0wn4w+T@t~J5tXQU>>O4`}X@f_316qP>>ME)^3i`~>=$fC?*|Qho&dhEi
zZyaO8hG164&r~`|tzg+6mFJPMygZN5+7n0u*WLoN)V#l~y?$R??!LB;mVLRs``UV%
zu#ncXbV+0o%Tg0L)6t4$Gq;PVh}c@TzN8X*1=Nyg8l#<;=k(GI*|>D}NMoYXp?JMR
zJdJg^ic6-LTt#4%k$UnaSyB_5W_9_X6iMyF%pUlYTD4mp@r|a6j^fdcW<FdowiT7@
zW167DDWmCf8r_e8Q0cTRSzA)Qp{O_(bTn^E*H@G|k~A(-1ln0VQBiG6+@(sE({ZYV
zO>)JcW=mC7C3I+4PGq}0F!a(Y>dx5L5UUT-g4?>$)!j$4OkBmYBHE$RS*o0HxlNT3
z14=P}iIrPA!?QHe_G~&Fu6Bf-<@Ge}|L)eOHb<SCwN>^{Vdp8Fg`LD#6^3|XePCzY
zWG(_()qQzKuMEqZu;BT=#x;>4sqc_|=0FZdVdm2p@qxqK6w5T6Ft8Ii%3Iy>I;4gJ
zdE2;iwZGRr=g{BF*@S2yrgP?`OF4Exu21EF6Mt?8p`~u^z_oYC>K6xcHdN;d<5P>x
zDoju`%Ek#}l*&nHa-2^3d#BwxCbGF@6rMYk0$~1WN5MW7E|zd>eH3ld%Gi}6uPU&2
z)D=VHj4>R@nW<CMdpu|EnBoZ(U&`x#nT=QPK#Pi&jYSpMxL#aYU0qVltx_=oItufv
zw$dN>5|tpM@CcsmhY`^JYKzvD$3(eVAJh7Qor|20kg(eJ9c_weS$v>F?sYZnYm47B
zI%~_}h7>{ewl+4kNADS5Z4EI^H%-I3d!t@5^o^FrgRRk9CbZuD`=WQuvLcIfKkCmx
z{O!YZ7`4<+nI3DvTwW_ohfpD3x}&41<$-7rW+M>m*QJ7R?C!@RpwwvAyI0`d6DXWM
zk8VP0Loym=R}*(QaZ?AkYIQrduA5w7i(;dT2GorWzjd<vgNu^xAk2id*Ct+JFj;2d
zS)IT8K|b%Go7Ss{&sMb&JHuVE=|zrkcNh1WrcRa_jCk@|2j^<=)*y#t4KF9$jzfEY
z=s1<Y^F!6!0R~=QygbKQMh|e0iSYQEu9v(W9}6iwl`U<)V5J^M1S_!Gtk++oO~nl6
z<0Fu$L!*Tjti)zPFX-IGG`RydZJ$GxXi(m*&eoWaF*3F5V0(Lai?^Fl#8I8LtLu&p
ziYDo7(cR&zYjs|agJ$Y&XpSp8D$A@ea|74t<f5iT!zu`<#W3-AG_^(%ELhpm*0Vpi
zy{CH>vQ2)s9*VjRJxjtm$i1vtNw3;2@A<n2zkB-aF@Wi%DeZJ)i1($+Tj!=sOYJD6
zgACNHOosC@x?^{oG`kvuCvy1sOgE<D`Ja;MD1N7qQCaS3FzU$zOoNr^0$)`7uIgYu
zWueNd<+?!`9w6a-%g|k;lWiA9B&pwWp{49tL3R46yq@^uCnah-9#bh+TkzOP31aL$
zz*3}=@*qo%d3=R;ig1;}RaR|9y~3OhLyte6GDSzw6H!4%={lN^0JmcG$1B);m?#tT
z0j$JT;^+^szr@#FO1Bl)agG@qL@Ya*O~yVW%aR(#hIQ8}<+Ubs`*j`ry1Sb?56LFo
z=tz{I(^FMtWH9xy54fDNtQ=0G1?z|Etpdc=osWHB(DO_m`#?y+Z9DSYWbV_$TB409
zq~NA<V%i&Z4bO?*M#X124nO?m9q-%|4>#0E2k&XTx5P#kW1DJx!6Ax%aM|9j7HXT?
zyK8z)DYIYPJ$7;J7Y_za!LxL({o-6#61C`+ZLjv{$Wv}KkM1%LeCT~0@vZ4`A9(0j
z@3_^aI3iSvQH`YoN=BE+CvGJlftlKIj`ck=fk?&2YpoQ+6wH+M&!1%5j*p5IMn%fr
zk1~i&Dt-@7rSz)}FPx6n=zLuQtU|i<^VLgteD5y(yT5nUUT(%*)Vu_H)2_z`^JVCj
zye*jdiqG~1J{KfkN{-p5k{><r-P1q2Yh}&%w#CJmspwkK@upb4?Nmv~%X0ih<7jr#
zhbIDD`{%>=?QN>=%4Z%&Vk}(2@geS`vb=lgCm&d`0vW02GAYG2R2Nm0)RnDw-(6qE
zDYp%kqg5jH!x&~Vf`Xq9nXn`NZBu`5Y7f!e8?*%E^0z&d3`VrB<u5ayaPMK|7R^TW
zyBe=-xnVB4gLM?fl>R{9D~4$FBhQ|3Kg=t6_RJf-c67FON3_Q-wOZ|)6zzy=s;c>5
zczoeCzBA4^b*#L0;ba>-OO0FULMy8)iXv0!T{yDH>0x7e<+`GBqr#LV<6T`B9)-EI
zPxRw1uX9p(MHL<dc(&WOOhkmE?O1^9QYk#M^;l@9=jc3kD0eHX*Ox^0F>wEyJBtA0
zHi>oRmBpLv3fKjKm(q`3cXWH3>h>mTkf*Rjw=E19L5W;la!X{LGo>Hx-no8xNk5KN
z%#>AGb6o8tx^QAjM|*I#mK60+`(W19RBoxp&S2Myf0r82H!IXD_bu$=>Jl6h@k-eP
z`HoH%S~*2_bn8Wz8qkaMJ&~OqUEXNk*X3iBxRk$yCvse#Qna(69AiuSDcf1#$F<6z
zQtD}M62Iz_t?nk8LSP17lQ<T{?KL_Uv9eNAqgxEPi#*|;;hF9oM$^%Hq^T{ptLe6$
zChU0khF4-+2V0q`h;Eo0g+6AKK9{Dsz4PF{ZrfY)K|F7X368k8@t!x=Oik1|hx=wn
zU$Bu)Ph`ZM&Wt;CX;|USb(eZ9(*+T^Y@RhurO>B%Xmpg;=?C+m>QLzL`WUC^=*i><
zCqTkU;b}&8C!#PGH;$<;haLC#u5KAqw^04KZOlF%ni0Nd@0z7MeGY&=BY;P&Jb#k5
zFYctzpjd|QFU3I|+=Cm~@qB=XH*cx=X(waQyIE6RQN<p};FP0qbW)!c!NG+-vCPgQ
zKd5LHU4Bs6UaY7H4?b2LRsCu==doN#o$Lh~FO^h>b%al_7%<4e$MaG_;sGLEAVYV3
zZGX5-UpiV){qx>oEkP+)RM($h=-S1eHQWot_P`eGNJiE*p7UtV<YMMc&trCD9<B-6
zQ8&ztL6dVYbdDDg^Ml)}y`8l|r2Bh2nttA!r+&4Y>&!gPVo1$T>-B^1{k?P1{Nn8?
z%L`U7O}jVgx)NrV7WKln+gr5lnlWqYjm)fGm+gs7BI*g1TyGqYRvudtq~18rJ<+MQ
za{DbPUZml&;3(R?V?4g$T4nixUMj|y5vaFQYT$UrH=Qf!M5d(-9GlcLS*{ur)nbD|
zvHNK#<#<X))JOk}jB7%31wm*y+#<f3>^)jjnZ!A(zT&1m`S&(#Ftu9eSg_E*F?Bx<
zWpN$mF`yUMLs2+wFPJL|&$Vbu@GMTWR-5S?HvS7c%aSXT?)(oPG3E0iQ!nx_57LDT
zckPbpYxA(M?pmU09{Bkxo+Bs|5AF=(f=@INhQ_8IPy3~4#xuk99<96{CpJVM|Ku4C
z@uz#t9H}nFSL|Jv=;eDilRQD`UVacbN-?OpX15)-dgplRCzk)sSs|Y03Y&(yuFeLh
z;;QhNMM#<QwycDOqN5q}{7F9+W)mGEVMbBiy#vL-R%%9u>3T^w%yvjg47{YaafO|G
zeY|5Ly}c}XsNvq(b9xm%y51G96*!dHPmaHR4hb>?6Yh@~e3C|olhlIP97KHVW9wYW
z3Ky)mZ%qnT6m#su7;Fqi*+r@s?Jvb2g=63(Td4w22H_mJZG0YTLGmXxi<*a4SDfWT
zeZ2FB%}x9B)tlRf?|*TpK4ofG<x9yem2Cc0qu<p~bx+<lFPyB}(@%8OxEJ=qC(zYk
zRjn4&{Z&|JtH#A8LN9#%P?UGtU3?zg$V5i&`Q5uJU0WBz^UsGN0XuQH&80RnMEBor
zSeI%8yVIp(+UK&i8~h+)<SNxGx0H{{RpY_!*s)OV?N<(+u@DV1bS%Qw8ku$BB)hTY
zV>fYInJ)?4;;BL&p8&VT6-8CX1UEF{tXsKPl&oU|L{|*`lr}hbDY?n)LBi<+kyxb-
za7Mrn@D>KC$?ip(A0$G1&fOW6tK3U>p~v?w$KwwYGj)WhN2T)E3>k3*`oFC(dS^s+
z${s6kSCyR^KS<2d!L$9P3ZADAb`CQ5So_K{fPv!w>Hv#%3N9y*%!^%6XF9Qof!ocv
zpA^c3oU+)7?{GGHndmy-;uV1LjPq*%UZN+on_G|MddrZ9^n_Du`=Pw9?#`Zu?p&PG
z1qXH7K`ZXZPWs~6!&2FGjdjPZL26G2vZV)c=OdP`!?{N27}dA!J9HrTV0&X^T}R=Z
z1|f08%Ew>5URF!ie6*SFCS8CFQIqv4Nu+f{Gt-0ePMn%}H07Nmh!>B~vR!MtSd~;4
z@s^cL)dOk5$3#csB<r^%lxoDP?n~%gyYXPp$RX&|A*a5L>81vB@PB}08G*ww-V8s#
z$99X;@bhzw1MY<k`U92}&%)0irzrIp{M?a?!$RQa7t`=k6AUm)XDIbO_<aM8GhT*q
z#gA}G@}2OTJx8ez!|%GeO8pxi=O3A`a2$zJCl=rZ2Z+y)7b>+A`cqE<e&cEI?=Qw{
zVX%2%`ckFNAzsIpAr3eQ>Y3$A6=I2dDvs2C6!ANObHD!!3H$7gN-aj3CaqHHVZ^g-
zHR6GI-f|QCV8_YSwQ!I4zPk`{L3~H910V6dqZn~VeCL%Q&WP_jHlU&)p3S9*XSPxc
zZ$>^KtsmaRC2gfzDwO&J;ybibscnewm#YvS^6yYJjt@tCKV1tYpZT{9=|TL~?9lo5
z)?4t70>tm+E~UPMc#YYk)L!g*nYLG{PAD{w?NjQ9h*v?qQg<U>UvE@u7UI*8IRO{I
z<^v}Zk2Egx>(~8^wO;o#G7X`b4-5P~EqL8d8%G{Ib$t~6H)5#H-{bI~gR4yS$9Mno
zpDXIC*4ByrJh7iI|4)cbAKZAKS!v9MoW$L@^Mwqu7^Qo}b-(<7Gj?v!MFNZjBFp>w
z^Bf9+AAH}i1#UCdol+@bHE|lu8DgfdzUu>X8t&|!5SY_3;q&>M_=X?t9`V5|1#%Gx
zex)Ig@nOn!MrEcUx8-*ZiVYt;B2GIRGE}~2mrFb5M+Ra}XP!Hham<c65Os$-5VPav
zm#8~V=|=6CyHPuqZ`2O;$+CM{HhU<n-To!+Xj4MXQtv<tv?&dyclxGuELFYBn3%|!
z>S=s^7P-YdpN+pf<Sl(NC#K0=ZA!rOe&dtnF-;BeP3b7__Zky(YnpnKZ=$~s_$K<p
z2v-O!#p&vO#>5<*rrzwE=<kERDeNyp{JqEAW3EpVfyQ{^>>rpu<lhVX8zTPRZSJvT
zrm463rm(-El0Gk<L&e`;7?&))Y3gmhDV)AxmcL=*@59C=OL&@kyKkbuzw}MvcxH;f
z6XqUk!88R~B6&7K(znw$h5d~Xe~>ofk~L)-HUoMl@;rYdt$2<Ue~?b<n^@49hXVYf
zT7i+{ipbwj)z>LEUidm(7O2b@m?GAa1Vq3XmHxt~@f%Mly^u#cHT(tL>R<?c($om?
zhy7P5EA74?-)|YE?HLxU^oQ|2hIRPar{3H2%f!714}w!@d_%(swVf7tPXlCc<~{QN
zbBVE#WC=z{t%c5;u0EH}dJ6d_Z+1vW7&9=VdlcV!={j!XUZCsU*jqFK2UOu5Qfgcw
zc~4e;Ou`wBH#@xbx(RD5fB4P9lP@>@`kf!7DD%?wQ;~_IC5(?H#;ft-haqmlqY?b9
zR_9e>SLKktm56exqr`X$VzA$bW8gNZ4<qo$=K`p(wV_dJm5rJ&=ezUO2DJ_knp9$W
zM-K(V!$WTFDu)KcW4>lPLZ6H9S4$K}qEev9z<MKu;wHFN$e?T_k=2gHh;D)jP;1i0
ztIx9Tt3v)WpCY)U8+Im~eMB|TccgfX6@JsGtr7{kO4C`Ty=srBdi0yXH-4o*579u8
z;02_+5}I|PCg3_<{et^=<lP#Kue&pxi97o9MtrTjO{wqpDK-17Qa8UzsfXT=H}#<A
z{`Yl`6$(40U-btAw~X(oGb()%^91S!K75iZfyV3oSEvQlDfO#CUNv&i0UT~^Jjg~8
zPUfFN<}VI9q}RqF)sf*QcUXVEh(G-a)R6>s0EX3(!m;yFx6*udq%eQ7)I6#yQUk|N
z_V0^2GC#PFqJcUYnDIQF%FPbUL*Y~91?FK`<t<ztm?2nEq)<sg^3)mDT|PXC%cwJ%
zMosBU%=6WmOry@g&R1tL)k<k?o;$X(s5`c_s2#<#=hst(*lBuP&yGSNYA5lGs8Ot=
zQFm;$Q9E{AQ9CMgQ9BGtVs=#hqV6yhh}p4rM%`hE5VM1N9<##`B4)>4D;ge^-l!ea
z`j{QdIqHtxN7N2OftVeJRWUmZU1D|^#>DI}1cRNe{!Ve&O%*#`hgjwboKVcqTv0Pv
zRhNX6&or1Yz%lpIVcPARGGN-{n})zt=bMJYwAVKcg9(R*LNUEYq{v*D!+*mhd{*m)
z=(#kFeb6NJly6Eyx4y-Mn1;S$8G1|4Wd=+&zG;YM8Vb`^|K2c|YGGok*>V;Mnaadc
zb-}RG(N34EH~6M>n7q(2EoYgASf-&cd1_`lq`-3ZdW6DMvqjEF|Ggmer&G;#xlsKQ
z|2>6wl0s)@Olio20uvJ|yg@qggr#K)r+Nq^(j@gd-`_Bpu7ioGW@#5l=r}wRyNw?;
zEK0}8YLW57+*#nK8hc(X(-6xv6#hKcP^5Y?)IH6jEYU2SW)1tt42z0&z@lP3S<N%#
zVHOL|4~1C65PNL4_Fa<o5yPU4(yUBjJ#JW;7K_SwHuNQ(znK;bPcej8nZg=sSecTp
zj~W(bpJojg);Sa2aEmouSgZYe;XK3xeIXX#<Ba~tu((TTvig`|QKo7Zb+gIp2@@WN
zbU_|+u#gQcP^Sy?S)tH5j0(zfgvA;mtdAQOWwmBuhZ#aYZ^GjMBVciWk*zQdBee*}
ze&Ak}ZyEyAX5SP}*GOS4K`L1f*#~GA2dk6Slg1DG<A62FVvQ2k8sBA@#XaCb9*z>$
zC*YDS_AQ!)9rAGXlnH@aV!#>=R*+Altvtl)f_0CqVWzxB3+t1H#Xd{3vV?WPu=wiY
zfR$yj@ccz6bS$V_CbBXOD@$0PGA#CmnguxySFbZHP6q`nYVkq3I6erQ!mKgK!)!It
zu*L{$k|{6tv6{uHmdWzcWlAhgvIMNLU`<vlO$a!;BE-U~Kkj*TW2{wPV}<nxldf?-
zYn-rtZqmgGu7EYpN*9g{39+zVVVS~pW1O&FGA!x@I$h(1^$Ww|tEvOmc#DMxQ$wNS
z7*xv?W{nrt9}Vj&pM@7GBd2dQEWQvs+n2ppft8Ihq;6kWUkinf4FHyj<#oV!ISeL_
z`B>+v!{~JJrMB6a2iM_UZLzMl(uGGCLZM^7fMp`9(GP{JLxx4&NV6sgtKGPoV6i4h
zy6XLVVHO@v39%+fJ@nEw0eP5>-C{aj)VVZ^x<t0R&4hQ2#k$5y7yI9!&SNKnWn#LT
z{7}g1G%V_Jnl({aUB=Z!i#1Ww)!^R?vv53nh&9nl*F;HIw_#C7)GWL;8*%6{;azL7
zuC>yI6B|OI;{g}T#B??Lp)g&&hDF^|vp7kTE$=>MTjopJgL-(K#ljO3q0q7PVwuAA
z@H$D?QNyB6t67tTbvw*tO%m2&-xQWnc-AEpIv(k@Okvg}VI4E9$v$hcu=bnKITj1j
zHQ7oRc4dV^hjw9^$ZGXNVIJOLSlK=+TUanky0R@+w#C9Gkx=N_7AxDT8`+XBYQ${I
z)a|vVngbRu&B_5Q$Cn#9U<H~gcFtR-u%?;=R*o+>a=@Zr9VW*I3)QcDQ$kIZDKeJX
zRPd(yys7XrRXu5BJswjD>7#g&n`IgbmrH$@!(ciO(>F1*^+$A=ZE0<&4;_$Q`hOdK
z4gL?~9*m)L5##9icAD7P)Bn>Qb~7AyGaYub9CouEc5@tdc@Dd|Vi%0Xn2vc4ck>-~
z`3}1U4!ea8yG0JW0*BpVhuso~-BPi$)3MCqZn?wmdWYQ&4!ac&yBi&LD;;*L9Cp-|
zqhoUFv{5^1n^8NidWG%SMss1O<y@}F1L`nrGr1xUyfGa1S3rh5>)#8@18n69NrzmK
z2i{mGSL6Y86|z{bHEWu%UT?yiX33su7HgU%d$8OSVokGH(}YD`g)Fug&6+N(HyGA*
zi#6S1ajrM$Z}Hf-Wui>=(luRJ)K$o0JJhTh!g`}&&9GQAEEXPfM0nIdnA<Zf)(k6M
zGlWI`fh@Lf&6+8!r%ebmE!Iqnh39-iENpEFrE8|enkg*m4`fkpXx1!Yy~(g<S*%$W
zYnHI)Cv>{74JE{yWwB-ni~0jult-F1TUc*4tl1W8w#CAulSr4xnr*RWTddi_qW(Y@
z<(y{C5!PD_YmUX5W3ljT9ax;FVtLK6SaU4a9ASONuqZz@D^FN&HLN^~#pTYRedSrK
zJd2fQvGRoVS;L}S)-3Lq#C(B??OcmB*JAO^|7^9~cNs1(zKSKN^K*qoy@+{8d9PXX
zg!ML<nKN9p4|JA!7HgixnrEeJp2eCcteX%kve=Jk)_h^T-LSYdAYje6So4Kd?Yj)8
zi*xEhy5<XuIv82(pEN69Snn_)<XbH4ok0kmJj}OPczh#N=kqOAzObl+k;Q&bvla;J
zorbl*VlA*(3oO<Gi?u*l!%bN(5EgYXve=($7I)@kt9Ka|kG~J{knbW0(#0ofveoB(
zm*I3Rw9>UuSX1DVEcVlywMbakniwszSc@#yA}d{staL3B)(Afo>a*1M$YTGmSp~v+
zH_WVu1s1EoVij1d0*h5(rK>>Fm1|hkD>Q4du>QiZ7F(>v7HhG^!sfM5-B@g~77J^d
zVNqYvtR=#Fk6|sbSW7GxcBmm|ygI+cVl5HYNRx+4gvCCRc}P7-vz7{r{TcIcsl{4q
zv6c$!3%<*6x|Uk$S}H8|TVzqc(yV2|`kV=2nZ;UWv6flsT4tqdnXpEgbS)DW`z^Al
zw`taLVZGO|mRqdl7Hhf1T5hqHTj^RZtTiB$MSW1St{2w(4C{J}b-l&9-eO&Ev97mR
z*9(h%Bw5rmHR}dpz2C5Iuvj-(tQ#!W4HoMLVd0qqDfJtKb+2Jjf7PrN!upwEt*}@t
zEY=EPWts3+SgaLRx>g8_{V~%;y;!qu6c+nV*25bu){PeHMk`%6TC5v|<;CMhVX==S
zi~6=^trQmfGqP4%td$mPrLgWZ>B3tdLv4Abm9CY->Nj<Rdc0<>5*GV2vQ}BFRTgWN
zl`d@L46#-T>$o2Z<sthmri<eP%~~z2+f8g&TddU<YqhZM_g#irtF3gcmUJCA>EgIU
zvu+X=`!lBNCX02G#k$E#*G*QsZW30X9}3gOev9eict*3<2<w=M?HY@<#$v4z7LKx%
zSgo;GYpiswk#zN$bglJSYlX%BjOkiyvDR9wwN|>;TCBCgy4w$h>0-adc?3>Ua30~+
z{BitUi15N=JK7aF?AAH#iXC={SuDH~husE;-A0F9so2?L?J|eEn;q^pIoy>y+*LT-
zB^~Z6#m-)Hu5#FIc7(^?HJZ;g4!^YyyDcHVeTnO2{%5PhZkxkyyTfjW!|oQb(`f@k
z_FwD_*<tNm>~@9xay^~(Ww*m_kHfAmV#oGb2s_<A3#HB6VOm|Gv>9(6q0nkGh0<mo
z^j(JKPNCI43#EPD4VPrGUTap7u&9@@eHK})B8ydIwa+4}eHIDpgdYmqC-pC~*j_Yi
zov`jSv0Z1$f^`;aoyA&bvDR7XS|{nc*QAT>P_v4Kb(dikTdZP>Rcx_}EmpC`Di+o~
zhQ;=+Sv*)f8#|129<H}o>xFffe=n?GuD4k0h1KG_WFAtlWFAs(XjX}^GK{Mdi&bK=
zO00C1SgaB&T_ut(>Xl?s9%<GFVGS{?4Hj#I#oA!8Hdw3;7HfmBvJ8uIPO~-&Yp7vu
zv{)N0)<%o9(PC{B7PVH^=8eJ{V_1}*npG;SVa8Rd#VWN}rNW~0WO$_(tJF$Ysj!L+
zi*i}B%7m3^LMXFXWfrT<N>`c1DiaoK9OF?YEVe6_7v;TX-7Ku(#?{Rh>t>5}v#{6$
zFua>B*3DMBZWb2nA6d)^&Dtca5hjF97HgBm+GM3`lf~L3EY>*2W0SDhhRI^=G>hl?
zW#h3u?W){jm0PTGVX+ruc;yzW+)7uuu&AeyMIV|~A*@j*gbIsQVX-Q#bX8ca3SqIv
zF&-7dVqGVT{i$Xpg*Do^N?NR>#Yzf`J{expVkNC~C52T8mt?V@*6T-=VCBddiy>5k
z6|5gsf|VoB@aTJZSiv6ySArF+EmeY*BQ;LD<oXfoI$2c`E84TyU#NbK|Jua;Tp#dF
z+}Y&qHrfpGB%iezsSKOKD@mI{o}|VadA=E`oTR>G$kZrwj#eX;lhp?es~V{cR`RRC
znykL#-{bBTZ={dsfJ38$YOsPGCDmX}R{v&L)Kqki)_^rdeaM7Y1J)EjT{U1$QUC7W
z%YbQ_iF=KeqcvdR;coxlFqpn=ShaqRQtw%)eq+Mh0`gQf+4$jp*I;dK3&>ObbZtS7
zhE3rd-2(DdfA7&2q;jg7fiPK?)TwliZUrk_WgFI3u!6a+tzZSSC0nibu+_@ZtzZT7
zg<GYL&NM9QYMQl8SW^vao5k8DtOfqPa6h`uVr{cn+k`dCu&4uS)^=g#n(($;tnC(S
zyOpl(7Hhl3+AgfwhDF^{vvvrJtC4IEJ1o`?VNLPxh10deV(qY4JA^gIu&A@@T6qgt
zIck~-?-sCvc76+3IcmCpFWk;=0c(oCN9Pu>a{O9(3s^ZS&-kO>yHNcX{xdbZz?-E0
z$~T2u_b%`zsZaa&!mWE3ctKm=1>PjTF75(vlKL+Eu`W`l*7>*_tjX%HO?bPJwxD(I
z25Yj<+Kn;`TK8_S!lrQR-VN4d^*zI)uC7^og!MOuwZ~%Zu~>VA#q-gaAA2m;9;7Rf
zBzuJQoMCYcpjmaoy1|6NNB4qs)mf}Msf(PwBCF0~)d_2b9}3fTBTO74e+LTJrN_u4
zWF@{0A#+9E`@?e;@|)wEy&y;T8t-%1)r+0I{@&oQYjoH(IqaIn&Kr|mE90;IAv=t}
z#E#l?bZpt`u)Eb^cfeuS=CC^`cJ|o!ki)Ls;kUzKcbmhm(_z=;u<Lf%^@yDvzg~yk
zVTa!%4!ffcyW1Uh$HdO&-r=z0ILRv`Zw$}zQPl3Z*y;HWx}z-E3p*|6_M**9QP-Q=
zz87sK=zaI1%}nuS!CthPDSnT*7i}hNV(+`!4~4z&_rYN6VjW(ne(Rek=l<3=h2>m5
zc!4ad2QO?2%ei_>&ee;Y`vJma+Sop{JZKPk@OOsQV9A39kq4gM(jc-YFooq@gC%<!
zME3lLVX@t57N0emtp47x8ZB0%uwM4>g=K1^C3_kzR->?fXjp8|n$;w%FPiY0ELM}1
zt|lv8O%|(3SYu3?H3{o^!=jwf^`jZA9QBZK)eKh94>p69qfYww!u?<~Sb_H24AvCC
zUup&`N1ZbMC~Fp~-<j03fHz6~gKrAgj~4KP8qs3aj~4L4_rm>P3wV>%j}Rv72j!T~
z$5zS5FBw*=m5;4fKDJu<*lOitt5s&Ll8^t}uqYoj>sDcX*|2W4Shou6PyW4d{kYX)
z-D<IJ71oapi*i@94hZWjCcFa{>wuN616H~YSgZrW@?v#BSQ#iY<{{;|X0-|H8N+I`
zSZx-o&0@7#tTthtF*Tx1SpNrMlEr>P*TsWiO;HaUR|mlgWYs~irl?2!dtq615UfB}
z9Rw@T$qs^*qfQ%t>}wXP-<#C5gEvY2qi+h=#dh$5`qpmM#dh$*_ri6t9lS~ECkT^i
zV?U<zu|x9ltA^EK<zt7Hj~!M%c3An?VbzZg$;baREcTC@b(^rhW>~jbtlNZj(Z3h2
zi?>;<+bq^?!uqLUvES9KPGS9%39r*)bz14_w9?gSu{wq2#i~<S=_oViA^UU9>JrvJ
z8&;Ra>Jk<lNT1YYvAQf)m$1h9E~)=5G%V@~n$<0=e=)3Xi`8wVtJ`9ATdZzjjW?`r
zN!L||Mg3#3#I^^lDeA0o)dN;g?|Z<Sq8|0{h3kC}SV6t-0V|NfJz(Xi$BaMfFbma-
zCN+n_n~I0qbzU6?FBlge1}_*1A4b~3rXiMz<6>__ei*!|>S~iV>PI>skARh}zF}BL
zzzW92N5Bfk#Yeyjn}%4X@VNL0SlH2KSk${T>!`5))v%6QtfRt8nEW_uv5q1i1M*Si
zV=x9kDy(Y^i~5{q-7c(e8rJO=>vk($w_B{+E!OSA@?v$nu+j{RdZLz#$H2-_kDIt3
z11spGkAXEs;e1o6NyoqndgWtag-zl5aSW^+^@Q<9U2~yY>zi0V3Vl<!e%uLOP$TXH
zFKi0ek2{gJpnlv5-c)rzIBe6@V|6~>CHYunSa(_Zc$bxrcUk#(mz9rqS!H&Y<YP0!
zB#Zj7W*rySI>S0{v5pICuYZqqvCcPz>&J0nc~3DO7uJ5b<oNOTn55+R(HjeLY#9C>
zHQ8qElH<od_=@WJcRTD(IPC6m*!4T??seGR=dfd$MdR{-!|p+c-9rw$lMcI64!egP
zc8`c%FxFvSop!i8<FGsHuzS>D_n5=(afjVGhusqnyYmjaCmnWAIqWWoogOQCYpibw
zxl;)|*M>UY2RmKI`=pK+o0{8a)$u;7J@r}bsn2RpeO4XslRDmlFv(&))U3OOwcfDq
zwpe#tth+7N-4^R^i*>iKS`CZ!TeD6GtHiKQSgaEk>x9KRVX;ntHCcK47EcK4R>NYu
z(X4xfwZX9Nu~_#AYoC8F+-KcmvF@?bb&s$P7#7>3X7vkeqY014Nd^65zm=|jD_#8-
zt6x}Ntonu3W>{?Jn#E&fvQ?>J-D|P#6;{1}kLfz(o5J$%UMpSq3hSU@QGRIFeZnd;
zA>3!N?z7T$pOvortaRNcEH75~35zm-^^kH&v+ftx&4zWq#k${O-EXn(w^;XEtowyU
zIY$=1HR}OkZ8EF}EY<^HO;-O4ZaFXV09cb{H<31lpY43W%EJeQ)o${Ta#XV(6jr%m
zJ!r8Ww9@sUm97V^bUi36N=e4!L1A?m7Ui>MJtV9O!+OYKJtV9K|6aJxKV-2UveNaC
zux>Lf%6-i`DXgRk@1(^#DJ-wVPg?0ZX|YaPtdqj(G%WTfnsrK8m4<c7Vx6*Br!3Yf
zi*?Fkof1};VX>dmtcQhFWmpeetcNYu!xrmdi}kR@dRSQ9hQ+$CS&s;7vtd1Au^zEl
zkAO8<HTf>XZTS(4^@y-oCs^lMV>Iiuu&PZ6r!CfLi*;JkwE{j_*G^mMI&HB|3#-SZ
zi~Y4`oe@@zVV$v9IQ<7w$*UV@gw^P~45#ai#X2LbUc;gupjl^yRck^xYq8E+tg{yD
ztd*{_7VE6A4jUHr3(a~|SX&J1QH%Ac#d=g&H<~<r)M7nqu^tr`<ps-&dW&W~CakT7
z^_aza%wj!eu^zKnk6En8gmu)Ui~5jeJua+mhV{6`dfZ|?F07R%U5{I=$1T?5!a8DD
z)U!0}oUpbV);WuH&SIUjSm!L(Ig52pSd>l7L+Wpu^@Ol?7}gUO>j{hXgs`ejx}LCD
zPgtxcghkmz7WG2SIxnnS4C}nbI&ZPgTdeaI>%7G}FD%L?vZ!xr)|0~8X;@EMtS2qj
zlNReqi}j?iyq5T+u&6(gMLkxto)XqB!+OeMJ!P?;vRF@9tfws2Q^KPDL>Bd9Jx0C&
zR*u?jSQo$w#>f}I%JJpK1+aoq@ddELCe9sF8c}{-04qmPry+}a_e6~HR;xE+l$ZSq
zchY)?3Z6-qgGl9Yz+nh^e1<+$@CfX20>$7C6@;H5@Jsj15${mJ5wJ(}Lx&2EO}=)A
z3O<;ggB>LqIBRH@oEs87RB!|i6(sL#bAm$!=l|&Kzw7*~it<OU`Tq9)J3sz~!5k|1
zIsZ_><B0(d6>P(yfrs$!`JH&+W49b6Sce5)eXL-U%EbVjhYfl*x!5wEi;Y40^{4vS
zL7sk1{{`@`@AGJ4eJG)KZ?S(bcm;L%2*PdHDpZY)S#{XNREdcIzKWXfgRX|T2pg<O
z^1|W~QJTZ|&j<EPBlfPChmT0~4q0Ye^ATbYGw&tX;TTpUPMeYL5*%7oEAI0gM>Kl5
zIoHINM<<T(4^Pa-n{m@&KAxVXK8FKpmVo+G)gP;XBV!e?`!%hA!;zA7bxryN92ALH
z|Gt2K$UE;;%aN#n<Q3!v6|nL5bC<ks+rHAb_vZXK{o4<H$va(BA^w^0?K;)+ZGHtT
z3o0NhR}c1^GU;A{hAUo|xyQ4qyCw5x=kkx|TYByXs%XKz4y>&9;CzZ^gw$zOl%O((
zPtp!orJ#y+VLj}2guuHxPP*z{UPTJOfT0{!s1|>$;<ebdTz*-V$vcPBt4hOAmEMM`
z#1lhZRcTbLDn0v}RV5w_JxhHFvaB+#$XS&}p(>GgCRCLsF8@T{wvYU_?CzGYeEX66
zeu;%|j$rsnU6r2BxK>=OR%?g*vTOvZkp5$(@>+A9kytGB=<ATf2dDC=^-f$Y*l;+3
z<ZCe@=>k9IOT9ZSKk;K)JsA+M-~nk7y4_q%8HfLZyTPx6sCozGVEJxjuzfhImjcQz
z9^J|p9O%l*Y8`#$cR20dsr_|mVsr5q&V#T!kFXHo)g!L^kjst8HBZ)i`NnVd3!15$
z_guuAao1(A3U`B44aD%$uuvUFY8ny47WmbFWUN41wcPh?2NzlkV$+I#ss$kip)Hf}
z2Alqa=qvd;YmXfMX54}vME7EK*tD9Ire2L^UV@%%EB>z^bbdF3=e?dH%;ImGx54i#
z`JNZP<z*v8i+3XPVAEGGZKex3zYj~VHj%u`$@eB4oMeaKne3QTG;R*X`O<M6s1!8A
zCWL$OOY0ezuBQ$1dYdL_P2TGSy_9+1gUu_xp0EQoav##q@I3#)H$z&C`f}-5g~Q^j
zBHCi1=~x|+F7eX2+=158k)p2a_<5<kblkd7uNsg>w&+8UBS%ui?b5M|hII5b3+dHK
zn`pdVowVT_Rt~*J`DKUnYVykt>DA_!9onVxE9g50QUbkp<GBeGJ+Cicg?@LDl9yTG
zeWLMD1I5qo%iKM0xW0PK=qSXCQxkfCGRWjElq-*A*GIK?qMhcUPth+`(<70f7jcb4
z!m1?S<&`ge|0^4d3_+iK+cjD0=?tw4xfICJF$HpU<!d(>{y_S8<UqRmc={w+kcf^&
zMni!l@5sDhEb`2|r_KNPJMX*secyPgH~r%)#}7t<e7!#wxiJ`vT#o8S6*KkN#4G$@
z^fAy7c&Ui=U_294x`79@uYUZo4vIk;RD)6|C4t&F*vb<fd;BmhOT8Y?OQjmdX2q(`
zn_k1J^Jw}i#Tn8C>7|&Uh!114P<6<AHdJ*!`Y&%OIPi}9Hofk9H6LA?w+K^GmmYh3
z%da{g4XTdUs_nTFPs;o`M+`;iYg5g}c(L}X>#LEEUL}r(nM(e767QADJG<&~yz@${
z?SzahOu&sqgRXN9na9SeZA;Z_C-ELlzX}g;q^k?*ljUKxsKgtKYD-@3f<WS}IeYrY
zQ%@}{{Mdv)44HKAr!Yf&>1z8rzuMjqRNFt7#Ixnv|5SPRJ;=M)8F|Ndo{Urp$eodx
zz0mJGq1{ztH`=n}`M8|14ZE8vb|Wl1o(0AiQH9;{%oBxaL(gta8s4iyD^<vU=JO`Z
z!DL`Ao9|cQ+a~xo(EC+*R|3JCRZ_iQg(oJ{6<?DxY}oUd&A$qh0L?;dkzL0M3O#q(
z;eBnglAxf}a95_nfUZWqx2Rj>dzacP-)X4${BX^HpQ#wO>Q4eR%^QmK3NLp2<{!Ux
zn)G{IXqLBT;G1vD_yzpv_qu#CF`WKuTAG@=7h?|p%4gsl_!Bk_57BQyvK%tcpS$<z
zU%gn_GWI=ZGu8Y#AO5!j*l{IHmy?njNLg8mi<7{$xS)+mS&zc^5nNd6!2~zn_=k(@
zLacf3LM51jZ~EmY`g<(wDq0&l+q>GEyK_s9G&HpdOFfmn<dgsTsYD??Z9KE+qs?DQ
z==wy9E1xSla3u$><iM32xRL``a^Ol1T*-keIdCNhuH?X#9JrDLS8^a#4h%H@Py5C*
z-+2AP$zvZokMV#0i|^<7|0}qL<Kp~46|OP3w&R+Js}a{oTy3~GhVRD3aX(MzxCR&J
z0XQGP9lV?$crPy3d;rJvW9E#Mu<$eG_Y^?rpYsvT^`H5d&wWdx*4WzBA%;=rKIa$c
z<`ZxG=I=iAGns;-w=173IdCNhuH?X#9JrDLS90J=4qVBBD>-l_2d?D6l^nQ|1OMOT
z0LSqh40FuQ^>{uH$^91`FLO<wV|{L;;JBV+c8=e(aB<wvG5$DQT=VBR|7u(laB-~9
z`2aq%a~-ZpxF+Mu#>IUf9FI@Mm5XZ{uIadD;F^hR7OvU2=HSZ1H5b=BT=Q||<63}g
zA+ANZ3UDpPwFK8vT+47R$8|lf8*r__bt5i5GrbDeYFszrT7zpXu0mWzxYpq+#<d<-
z39b#eHsa#GhB90?<JyF)99IRdBrfh-slv4xS2eC0T-^V#1=m(w+i-DSWCt$pf!T>`
z7p~p7_TZ|+wHMbuT=lpba5ds;!qtpxKdu&Bt+;N*^{0y$FSg<PAg)8W+HrN@x(!z+
zF5c&S3-{mj;yR4$2(F{JZpX#@FXQ5O_*0FL+U1d$5`^20u;^p(AH3^2;f0q5Z#W)T
zJbzvX!K{pZ7zfXC8|a;QprT&lalo@4^!Ip`=JOek!Fv4u*R{(bD7hZw>OqtQ(_V&L
z2tRhiZHvtBR3E$@GLgW|bX<ewODfrT@EL+y$F1Ou10MnDzRdXG?OvCi{w{(I|NjD0
Cd;SLi

literal 0
HcmV?d00001

diff --git a/drivers/video/sun4i/adb_push.bat b/drivers/video/sun4i/adb_push.bat
new file mode 100644
index 0000000..e322a72
--- /dev/null
+++ b/drivers/video/sun4i/adb_push.bat
@@ -0,0 +1,14 @@
+adb devices
+adb shell mount -o remount,rw /dev/block/nandc /system
+adb shell mount -o remount,rw /dev/root /
+::adb shell rm initlogo.rle
+adb push disp/disp.ko /drv/disp.ko
+adb shell chmod 777 /drv/disp.ko
+adb shell sync
+adb push lcd/lcd.ko /drv/lcd.ko
+adb shell chmod 777 /drv/lcd.ko
+adb shell sync
+adb push hdmi/hdmi.ko /drv/hdmi.ko
+adb shell chmod 777 /drv/hdmi.ko
+adb shell sync
+pause
\ No newline at end of file
diff --git a/drivers/video/sun4i/disp/Makefile b/drivers/video/sun4i/disp/Makefile
new file mode 100644
index 0000000..04b490f
--- /dev/null
+++ b/drivers/video/sun4i/disp/Makefile
@@ -0,0 +1,13 @@
+obj-$(CONFIG_LYCHEE_FB_SUN4I) += disp.o
+
+disp-objs :=  dev_disp.o dev_fb.o\
+							OSAL/OSAL_Cache.o OSAL/OSAL_Clock.o OSAL/OSAL_Dma.o OSAL/OSAL_Int.o OSAL/OSAL_IrqLock.o\
+							OSAL/OSAL_Lib_C.o OSAL/OSAL_Pin.o OSAL/OSAL_Semi.o OSAL/OSAL_Thread.o OSAL/OSAL_Time.o OSAL/OSAL_Parser.o\
+							de_bsp/de/ebios/de_be.o de_bsp/de/ebios/de_fe.o de_bsp/de/ebios/de_hwc.o\
+							de_bsp/de/ebios/de_layer.o de_bsp/de/ebios/de_lcdc.o de_bsp/de/ebios/de_tvec.o\
+							de_bsp/de/disp_clk.o de_bsp/de/disp_combined.o de_bsp/de/disp_de.o de_bsp/de/disp_display.o\
+							de_bsp/de/disp_event.o de_bsp/de/disp_hdmi.o de_bsp/de/disp_hwc.o de_bsp/de/disp_layer.o\
+							de_bsp/de/disp_lcd.o de_bsp/de/disp_scaler.o de_bsp/de/disp_sprite.o de_bsp/de/disp_tv.o\
+							de_bsp/de/disp_vga.o de_bsp/de/disp_video.o\
+							#de_bsp/lcd/lcd0_panel_cfg.o de_bsp/lcd/lcd1_panel_cfg.o\
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL.h b/drivers/video/sun4i/disp/OSAL/OSAL.h
new file mode 100644
index 0000000..854131d
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL.h
@@ -0,0 +1,42 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL.h
+*
+* Author 		: javen
+*
+* Description 	: 操作系统适配层
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#ifndef  __OSAL_H__
+#define  __OSAL_H__
+
+
+#include "../de_bsp/bsp_display.h"
+
+#include  "OSAL_Cache.h"
+#include  "OSAL_Clock.h"
+#include  "OSAL_Dma.h"
+#include  "OSAL_Pin.h"
+#include  "OSAL_Semi.h"
+#include  "OSAL_Thread.h"
+#include  "OSAL_Time.h"
+#include  "OSAL_Lib_C.h"
+#include  "OSAL_Int.h"
+#include  "OSAL_IrqLock.h"
+#include  "OSAL_Pin.h"
+#include  "OSAL_Parser.h"
+
+#endif   //__OSAL_H__
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Cache.c b/drivers/video/sun4i/disp/OSAL/OSAL_Cache.c
new file mode 100644
index 0000000..30af226
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Cache.c
@@ -0,0 +1,94 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Cache.h
+*
+* Author 		: javen
+*
+* Description 	: Cache操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#include "OSAL.h"
+
+/* 刷新标记位 */
+#define  CACHE_FLUSH_I_CACHE_REGION				0  /* 清除I-cache中代表主存中一块区域的cache行 			*/
+#define  CACHE_FLUSH_D_CACHE_REGION				1  /* 清除D-cache中代表主存中一块区域的cache行 			*/
+#define  CACHE_FLUSH_CACHE_REGION				2  /* 清除D-cache和I-cache中代表主存中一块区域的cache行 */
+#define  CACHE_CLEAN_D_CACHE_REGION				3  /* 清理D-cache中代表主存中一块区域的cache行 			*/
+#define  CACHE_CLEAN_FLUSH_D_CACHE_REGION	 	4  /* 清理并清除D-cache中代表主存中一块区域的cache行 	*/
+#define  CACHE_CLEAN_FLUSH_CACHE_REGION			5  /* 清理并清除D-cache，接下来解除I-cache 				*/
+
+/*
+*******************************************************************************
+*                     OSAL_CacheRangeFlush
+*
+* Description:
+*    Cache操作
+*
+* Parameters:
+*    Address    :  要被刷新的虚拟起始地址
+*    Length     :  被刷新的大小
+*    Flags      :  刷新标记位
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_CacheRangeFlush(void*Address, __u32 Length, __u32 Flags)
+{
+
+    //flush_cache_range(NULL, (unsigned long)Address, ((unsigned long)Address)+Length);
+        if(Address == NULL || Length == 0)
+        {
+            return;
+        }
+
+        switch(Flags)
+        {
+        case CACHE_FLUSH_I_CACHE_REGION:
+
+            break;
+
+        case CACHE_FLUSH_D_CACHE_REGION:
+           // flush_cach
+            break;
+
+        case CACHE_FLUSH_CACHE_REGION:
+
+            break;
+
+        case CACHE_CLEAN_D_CACHE_REGION:
+            //clean_dcache_area((unsigned long)Address, Length);
+            break;
+
+        case CACHE_CLEAN_FLUSH_D_CACHE_REGION:
+
+            break;
+
+        case CACHE_CLEAN_FLUSH_CACHE_REGION:
+
+            break;
+
+        default:
+
+            break;
+        }
+        return;
+}
+
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Cache.h b/drivers/video/sun4i/disp/OSAL/OSAL_Cache.h
new file mode 100644
index 0000000..934be8a
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Cache.h
@@ -0,0 +1,57 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Cache.h
+*
+* Author 		: javen
+*
+* Description 	: Cache操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#ifndef  __OSAL_CACHE_H__
+#define  __OSAL_CACHE_H__
+
+/* 刷新标记位 */
+#define  CACHE_FLUSH_I_CACHE_REGION				0  /* 清除I-cache中代表主存中一块区域的cache行 			*/
+#define  CACHE_FLUSH_D_CACHE_REGION				1  /* 清除D-cache中代表主存中一块区域的cache行 			*/
+#define  CACHE_FLUSH_CACHE_REGION				2  /* 清除D-cache和I-cache中代表主存中一块区域的cache行 */
+#define  CACHE_CLEAN_D_CACHE_REGION				3  /* 清理D-cache中代表主存中一块区域的cache行 			*/
+#define  CACHE_CLEAN_FLUSH_D_CACHE_REGION	 	4  /* 清理并清除D-cache中代表主存中一块区域的cache行 	*/
+#define  CACHE_CLEAN_FLUSH_CACHE_REGION			5  /* 清理并清除D-cache，接下来解除I-cache 				*/
+
+/*
+*******************************************************************************
+*                     OSAL_CacheRangeFlush
+*
+* Description:
+*    Cache操作
+*
+* Parameters:
+*    Address    :  要被刷新的虚拟起始地址
+*    Length     :  被刷新的大小
+*    Flags      :  刷新标记位
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_CacheRangeFlush(void*Address, __u32 Length, __u32 Flags);
+
+
+#endif   //__OSAL_CACHE_H__
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Clock.c b/drivers/video/sun4i/disp/OSAL/OSAL_Clock.c
new file mode 100644
index 0000000..3357949
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Clock.c
@@ -0,0 +1,443 @@
+/*
+********************************************************************************
+*                                                   OSAL
+*
+*                                     (c) Copyright 2008-2009, Kevin China
+*                                             				All Rights Reserved
+*
+* File    : OSAL_Clock.c
+* By      : Sam.Wu
+* Version : V1.00
+* Date    : 2011/3/25 20:25
+* Description :
+* Update   :  date      author      version     notes
+********************************************************************************
+*/
+#include "OSAL.h"
+#include "OSAL_Clock.h"
+
+extern int clk_reset(struct clk *clk, int reset);
+
+#if 1
+
+static char* _sysClkName[AW_SYS_CLK_CNT] =
+{
+    "none",//0
+
+    "losc",// 1
+    "hosc",// 2
+
+    "core_pll",// 3
+    "audio_pll",// 4
+    "audio_pllx8",// 5
+    "video_pll0",// 6
+    "video_pll0x2",// 7
+    "ve_pll",// 8
+    "sdram_pll",// 9
+    "sdram_pll_m",// 10
+    "sdram_pll_p",// 11
+    "sata_pll",// 12
+    "video_pll1",// 13
+    "video_pll1x2",// 14
+    "200m_pll",// 15
+
+    "cpu",// 16
+    "axi",// 17
+    "ahb",// 18
+    "apb",// 19
+    "apb1",// 20
+
+    "sata_pll_m",
+    "sata_pll_2",
+};
+
+static char* _modClkName[AW_MOD_CLK_CNT] =
+{
+    "none",
+
+    "nfc",
+    "msc",
+    "sdc0",
+    "sdc1",
+    "sdc2",
+    "sdc3",
+    "ts",
+    "ss",
+    "spi0",
+    "spi1",
+    "spi2",
+    "pata",
+    "ir0",
+    "ir1",
+    "i2s",
+    "ac97",
+    "spdif",
+    "key_pad",
+    "sata",
+    "usb_phy",
+    "usb_phy0",
+    "usb_phy1",
+    "usb_phy2",
+    "usb_ohci0",
+    "usb_ohci1",
+    "com",
+    "spi3",
+    "de_image0",
+    "de_image1",
+    "de_scale0",
+    "de_scale1",
+    "de_mix",
+    "lcd0_ch0",
+    "lcd1_ch0",
+    "csi_isp",
+    "tvd",
+    "lcd0_ch1_s1",
+    "lcd0_ch1_s2",
+    "lcd1_ch1_s1",
+    "lcd1_ch1_s2",
+    "csi0",
+    "csi1",
+    "ve",
+    "audio_codec",
+    "avs",
+    "ace",
+    "lvds",
+    "hdmi",
+    "mali",
+    "twi0",
+    "twi1",
+    "twi2",
+    "can",
+    "scr",
+    "ps0",
+    "ps1",
+    "uart0",
+    "uart1",
+    "uart2",
+    "uart3",
+    "uart4",
+    "uart5",
+    "uart6",
+    "uart7",
+
+    /* clock gating for hang to AXI bus */
+    "axi_dram",
+
+    /* clock gating for hang to AHB bus */
+    "ahb_usb0",
+    "ahb_usb1",
+    "ahb_usb2",
+    "ahb_ss",
+    "ahb_dma",
+    "ahb_bist",
+    "ahb_sdc0",
+    "ahb_sdc1",
+    "ahb_sdc2",
+    "ahb_sdc3",
+    "ahb_msc",
+    "ahb_nfc",
+    "ahb_sdramc",
+    "ahb_ace",
+    "ahb_emac",
+    "ahb_ts",
+    "ahb_spi0",
+    "ahb_spi1",
+    "ahb_spi2",
+    "ahb_spi3",
+    "ahb_pata",
+    "ahb_sata",
+    "ahb_com",
+    "ahb_ve",
+    "ahb_tvd",
+    "ahb_tve0",
+    "ahb_tve1",
+    "ahb_lcd0",
+    "ahb_lcd1",
+    "ahb_csi0",
+    "ahb_csi1",
+    "ahb_hdmi",
+    "ahb_de_image0",
+    "ahb_de_image1",
+    "ahb_de_scale0",
+    "ahb_de_scale1",
+    "ahb_de_mix",
+    "ahb_mali",
+
+    /* clock gating for hang APB bus */
+    "apb_audio_codec",
+    "apb_spdif",
+    "apb_ac97",
+    "apb_i2s",
+    "apb_pio",
+    "apb_ir0",
+    "apb_ir1",
+    "apb_key_pad",
+    "apb_twi0",
+    "apb_twi1",
+    "apb_twi2",
+    "apb_can",
+    "apb_scr",
+    "apb_ps0",
+    "apb_ps1",
+    "apb_uart0",
+    "apb_uart1",
+    "apb_uart2",
+    "apb_uart3",
+    "apb_uart4",
+    "apb_uart5",
+    "apb_uart6",
+    "apb_uart7",
+
+    /* clock gating for access dram */
+    "sdram_ve",
+    "sdram_csi0",
+    "sdram_csi1",
+    "sdram_ts",
+    "sdram_tvd",
+    "sdram_tve0",
+    "sdram_tve1",
+    "sdram_de_scale0",
+    "sdram_de_scale1",
+    "sdram_de_image0",
+    "sdram_de_image1",
+    "sdram_de_mix",
+    "sdram_ace",
+};
+
+__s32 OSAL_CCMU_SetSrcFreq( __u32 nSclkNo, __u32 nFreq )
+{
+    struct clk* hSysClk = NULL;
+    s32 retCode = -1;
+
+    hSysClk = clk_get(NULL, _sysClkName[nSclkNo]);
+
+    __inf("OSAL_CCMU_SetSrcFreq<%s,%d>\n",hSysClk->clk->name, nFreq);
+
+    if(NULL == hSysClk){
+        __wrn("Fail to get handle for system clock [%d].\n", nSclkNo);
+        return -1;
+    }
+    if(nFreq == clk_get_rate(hSysClk)){
+       // __inf("Sys clk[%d] freq is alreay %d, not need to set.\n", nSclkNo, nFreq);
+        clk_put(hSysClk);
+        return 0;
+    }
+    retCode = clk_set_rate(hSysClk, nFreq);
+    if(-1 == retCode){
+        __wrn("Fail to set nFreq[%d] for sys clk[%d].\n", nFreq, nSclkNo);
+        clk_put(hSysClk);
+        return retCode;
+    }
+    clk_put(hSysClk);
+    hSysClk = NULL;
+
+    return retCode;
+}
+
+__u32 OSAL_CCMU_GetSrcFreq( __u32 nSclkNo )
+{
+    struct clk* hSysClk = NULL;
+    u32 nFreq = 0;
+
+    hSysClk = clk_get(NULL, _sysClkName[nSclkNo]);
+    if(NULL == hSysClk){
+        __wrn("Fail to get handle for system clock [%d].\n", nSclkNo);
+        return -1;
+    }
+    nFreq = clk_get_rate(hSysClk);
+    clk_put(hSysClk);
+    hSysClk = NULL;
+
+    return nFreq;
+}
+
+__hdle OSAL_CCMU_OpenMclk( __s32 nMclkNo )
+{
+    struct clk* hModClk = NULL;
+
+    hModClk = clk_get(NULL, _modClkName[nMclkNo]);
+
+    return (__hdle)hModClk;
+}
+
+__s32 OSAL_CCMU_CloseMclk( __hdle hMclk )
+{
+    struct clk* hModClk = (struct clk*)hMclk;
+
+    clk_put(hModClk);
+
+    return 0;
+}
+
+__s32 OSAL_CCMU_SetMclkSrc( __hdle hMclk, __u32 nSclkNo )
+{
+    struct clk* hSysClk = NULL;
+    struct clk* hModClk = (struct clk*)hMclk;
+    s32 retCode = -1;
+
+    hSysClk = clk_get(NULL, _sysClkName[nSclkNo]);
+
+    __inf("OSAL_CCMU_SetMclkSrc<%s,%s>\n",hModClk->clk->name,hSysClk->clk->name);
+
+    if(NULL == hSysClk){
+        __wrn("Fail to get handle for system clock [%d].\n", nSclkNo);
+        return -1;
+    }
+    if(clk_get_parent(hModClk) == hSysClk){
+        __inf("Parent is alreay %d, not need to set.\n", nSclkNo);
+        clk_put(hSysClk);
+        return 0;
+    }
+    retCode = clk_set_parent(hModClk, hSysClk);
+    if(-1 == retCode){
+        __wrn("Fail to set parent for clk.\n");
+        clk_put(hSysClk);
+        return -1;
+    }
+
+    clk_put(hSysClk);
+
+    return retCode;
+}
+
+__s32 OSAL_CCMU_GetMclkSrc( __hdle hMclk )
+{
+    int sysClkNo = 0;
+    struct clk* hModClk = (struct clk*)hMclk;
+    struct clk* hParentClk = clk_get_parent(hModClk);
+    const int TOTAL_SYS_CLK = sizeof(_sysClkName)/sizeof(char*);
+
+    for (; sysClkNo <  TOTAL_SYS_CLK; sysClkNo++)
+    {
+        struct clk* tmpSysClk = clk_get(NULL, _sysClkName[sysClkNo]);
+
+        if(tmpSysClk == NULL)
+        	continue;
+
+        if(hParentClk == tmpSysClk){
+            clk_put(tmpSysClk);
+            break;
+        }
+        clk_put(tmpSysClk);
+    }
+
+    if(sysClkNo >= TOTAL_SYS_CLK){
+        __wrn("Failed to get parent clk.\n");
+        return -1;
+    }
+
+    return sysClkNo;
+}
+
+__s32 OSAL_CCMU_SetMclkDiv( __hdle hMclk, __s32 nDiv )
+{
+    struct clk* hModClk     = (struct clk*)hMclk;
+    struct clk* hParentClk  = clk_get_parent(hModClk);
+    u32         srcRate     = clk_get_rate(hParentClk);
+
+    __inf("OSAL_CCMU_SetMclkDiv<p:%s,m:%s,%d>\n", hParentClk->clk->name, hModClk->clk->name, nDiv);
+
+    if(nDiv == 0){
+    	return -1;
+    }
+
+    return clk_set_rate(hModClk, srcRate/nDiv);
+}
+
+__u32 OSAL_CCMU_GetMclkDiv( __hdle hMclk )
+{
+    struct clk* hModClk = (struct clk*)hMclk;
+    struct clk* hParentClk = clk_get_parent(hModClk);
+    u32 mod_freq = clk_get_rate(hModClk);
+
+    if(mod_freq == 0){
+    	return 0;
+    }
+
+    return clk_get_rate(hParentClk)/mod_freq;
+}
+
+__s32 OSAL_CCMU_MclkOnOff( __hdle hMclk, __s32 bOnOff )
+{
+    struct clk* hModClk = (struct clk*)hMclk;
+    __s32 ret = 0;
+
+    __inf("OSAL_CCMU_MclkOnOff<%s,%d>\n",hModClk->clk->name,bOnOff);
+
+    if(bOnOff)
+    {
+        if(!hModClk->enable)
+        {
+            ret = clk_enable(hModClk);
+        }
+    }
+    else
+    {
+        while(hModClk->enable)
+        {
+            clk_disable(hModClk);
+        }
+    }
+    return ret;
+}
+
+__s32 OSAL_CCMU_MclkReset(__hdle hMclk, __s32 bReset)
+{
+    struct clk* hModClk = (struct clk*)hMclk;
+
+    __inf("OSAL_CCMU_MclkReset<%s,%d>\n",hModClk->clk->name,bReset);
+
+    return clk_reset(hModClk, bReset);
+}
+#else
+__s32 OSAL_CCMU_SetSrcFreq( CSP_CCM_sysClkNo_t nSclkNo, __u32 nFreq )
+{
+    return 0;
+}
+
+__u32 OSAL_CCMU_GetSrcFreq( CSP_CCM_sysClkNo_t nSclkNo )
+{
+    return 0;
+}
+
+__hdle OSAL_CCMU_OpenMclk( __s32 nMclkNo )
+{
+    return 0;
+}
+
+__s32 OSAL_CCMU_CloseMclk( __hdle hMclk )
+{
+    return 0;
+}
+
+__s32 OSAL_CCMU_SetMclkSrc( __hdle hMclk, CSP_CCM_sysClkNo_t nSclkNo )
+{
+    return 0;
+}
+
+__s32 OSAL_CCMU_GetMclkSrc( __hdle hMclk )
+{
+    return 0;
+}
+
+__s32 OSAL_CCMU_SetMclkDiv( __hdle hMclk, __s32 nDiv )
+{
+    return 0;
+}
+
+__u32 OSAL_CCMU_GetMclkDiv( __hdle hMclk )
+{
+    return 0;
+}
+
+__s32 OSAL_CCMU_MclkOnOff( __hdle hMclk, __s32 bOnOff )
+{
+    return 0;
+}
+
+__s32 OSAL_CCMU_MclkReset(__hdle hMclk, __s32 bReset)
+{
+    return 0;
+}
+#endif
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Clock.h b/drivers/video/sun4i/disp/OSAL/OSAL_Clock.h
new file mode 100644
index 0000000..9448edd
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Clock.h
@@ -0,0 +1,250 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Clock.h
+*
+* Author 		: javen
+*
+* Description 	: 操作系统适配层
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   	2010-09-07          1.0         create this word
+*		holi			2010-12-03			1.1			实现了具体的接口
+*************************************************************************************
+*/
+
+#ifndef  __OSAL_CLOCK_H__
+#define  __OSAL_CLOCK_H__
+/*
+*********************************************************************************************************
+*                                   SET SOURCE CLOCK FREQUENCY
+*
+* Description:
+*		set source clock frequency;
+*
+* Arguments  :
+*		nSclkNo  	:	source clock number;
+*       nFreq   	:	frequency, the source clock will change to;
+*
+* Returns    : result;
+*
+* Note       :
+*********************************************************************************************************
+*/
+__s32 OSAL_CCMU_SetSrcFreq(__u32 nSclkNo, __u32 nFreq);
+
+
+
+/*
+*********************************************************************************************************
+*                                   GET SOURCE CLOCK FREQUENCY
+*
+* Description:
+*		get source clock frequency;
+*
+* Arguments  :
+*		nSclkNo  	:	source clock number need get frequency;
+*
+* Returns    :
+*		frequency of the source clock;
+*
+* Note       :
+*********************************************************************************************************
+*/
+__u32 OSAL_CCMU_GetSrcFreq(__u32 nSclkNo);
+
+
+
+/*
+*********************************************************************************************************
+*                                   OPEN MODULE CLK
+* Description:
+*		open module clk;
+*
+* Arguments  :
+*		nMclkNo	:	number of module clock which need be open;
+*
+* Returns    :
+*		EBSP_TRUE/EBSP_FALSE
+*
+* Note       :
+*********************************************************************************************************
+*/
+__hdle OSAL_CCMU_OpenMclk(__s32 nMclkNo);
+
+
+/*
+*********************************************************************************************************
+*                                    CLOSE MODULE CLK
+* Description:
+*		close module clk;
+*
+* Arguments  :
+*		hMclk	:	handle
+*
+* Returns    :
+*		EBSP_TRUE/EBSP_FALSE
+*
+* Note       :
+*********************************************************************************************************
+*/
+__s32  OSAL_CCMU_CloseMclk(__hdle hMclk);
+
+/*
+*********************************************************************************************************
+*                                   GET MODULE SRC
+* Description:
+*		set module src;
+*
+* Arguments  :
+*		nMclkNo	:	number of module clock which need be open;
+*       nSclkNo	:	call-back function for process clock change;
+*
+* Returns    :
+*		EBSP_TRUE/EBSP_FALSE
+*
+* Note       :
+*********************************************************************************************************
+*/
+__s32 OSAL_CCMU_SetMclkSrc(__hdle hMclk, __u32 nSclkNo);
+
+
+
+
+
+/*
+*********************************************************************************************************
+*                                  GET MODULE SRC
+*
+* Description:
+*		get module src;
+*
+* Arguments  :
+*		nMclkNo	:	handle of the module clock;
+*
+* Returns    :
+*		src no
+*
+* Note       :
+*********************************************************************************************************
+*/
+__s32 OSAL_CCMU_GetMclkSrc(__hdle hMclk);
+
+
+
+
+/*
+*********************************************************************************************************
+*                                   SET MODUEL CLOCK FREQUENCY
+*
+* Description:
+*		set module clock frequency;
+*
+* Arguments  :
+*		nSclkNo  :	number of source clock which the module clock will use;
+*		nDiv     :	division for the module clock;
+*
+* Returns    :
+*		EBSP_TRUE/EBSP_FALSE
+*
+* Note       :
+*********************************************************************************************************
+*/
+__s32 OSAL_CCMU_SetMclkDiv(__hdle hMclk, __s32 nDiv);
+
+
+
+/*
+*********************************************************************************************************
+*                                   GET MODUEL CLOCK FREQUENCY
+*
+* Description:
+*		get module clock requency;
+*
+* Arguments  :
+*		hMclk    	:	module clock handle;
+*
+* Returns    :
+*		frequency of the module clock;
+*
+* Note       :
+*********************************************************************************************************
+*/
+__u32 OSAL_CCMU_GetMclkDiv(__hdle hMclk);
+
+
+
+/*
+*********************************************************************************************************
+*                                   MODUEL CLOCK ON/OFF
+*
+* Description:
+*		module clock on/off;
+*
+* Arguments  :
+*		nMclkNo		:	module clock handle;
+*       bOnOff   	:	on or off;
+*
+* Returns    :
+*		EBSP_TRUE/EBSP_FALSE
+*
+* Note       :
+*********************************************************************************************************
+*/
+__s32 OSAL_CCMU_MclkOnOff(__hdle hMclk, __s32 bOnOff);
+
+__s32 OSAL_CCMU_MclkReset(__hdle hMclk, __s32 bReset);
+
+
+/*
+//第一版
+__s32  esCLK_SetSrcFreq(__s32 nSclkNo, __u32 nFreq);
+__u32  esCLK_GetSrcFreq(__s32 nSclkNo);
+
+__hdle esCLK_OpenMclk(__s32 nMclkNo, __pCB_ClkCtl_t pCb);
+__s32  esCLK_CloseMclk(__hdle hMclk);
+
+__s32  esCLK_SetMclkSrc(__s32 nMclkNo, __s32 nSclkNo);
+__s32  esCLK_GetMclkSrc(__s32 nMclkNo);
+
+__s32  esCLK_SetMclkDiv(__s32 nMclkNo, __s32 nDiv);
+__u32  esCLK_GetMclkDiv(__s32 nMclkNo);
+
+__s32  esCLK_MclkOnOff(__s32 nMclkNo, __s32 bOnOff);
+
+//======================================================================================
+
+//第二版
+__s32 esCLK_reg_cb(__s32 nMclkNo, __pCB_ClkCtl_t pCb);	//__hdle esCLK_OpenMclk(__s32 nMclkNo, __pCB_ClkCtl_t pCb);
+__s32  esCLK_unreg_cb(__s32 nMclkNo);					//__s32  esCLK_CloseMclk(__hdle hMclk);
+
+//------------------------------------------------------
+
+					__s32  esCLK_SetSrcFreq(__s32 nSclkNo, __u32 nFreq);
+					__u32  esCLK_GetSrcFreq(__s32 nSclkNo);
+
+
+__hdle esCLK_OpenMclk(__s32 nMclkNo);
+__s32  esCLK_CloseMclk(__hdle hMclk);
+
+
+
+__s32  esCLK_SetMclkSrc(__hdle hMclk, __s32 nSclkNo);	//__s32  esCLK_SetMclkSrc(__s32 nMclkNo, __s32 nSclkNo);
+__s32  esCLK_GetMclkSrc(__hdle hMclk);					//__s32  esCLK_GetMclkSrc(__s32 nMclkNo);
+
+__s32  esCLK_SetMclkDiv(__hdle hMclk, __s32 nDiv);
+__u32  esCLK_GetMclkDiv(__hdle hMclk);
+
+__s32  esCLK_MclkOnOff(__hdle hMclk, __s32 bOnOff);
+
+
+*/
+
+#endif   //__OSAL_CLOCK_H__
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Dma.c b/drivers/video/sun4i/disp/OSAL/OSAL_Dma.c
new file mode 100644
index 0000000..851abc3
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Dma.c
@@ -0,0 +1,428 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Dma.h
+*
+* Author 		: javen
+*
+* Description 	: Dma操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   	2010-09-07          1.0         create this word
+*		holi			2010-12-04			1.1			调整的参数部分，完全走CSP_para这条路
+*************************************************************************************
+*/
+
+
+#include "OSAL.h"
+
+
+
+/*
+*******************************************************************************
+*                     OSAL_DmaRequest
+*
+* Description:
+*    申请DMA通道。
+*
+* Parameters:
+*	 user_name 	:	模块名，方便统计
+*    DmaType  	:  	input. DMA类型。Normal or Dedicated
+*
+* Return value:
+*    成功返回DMA句柄，失败返回NULL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__hdle OSAL_DmaRequest(u8 * user_name ,__u32 DmaType)
+{
+	return 0;
+}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaRelease
+*
+* Description:
+*    申请DMA通道。
+*
+* Parameters:
+*    hDMA ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaRelease(__hdle hDMA)
+{
+	return 0;
+}
+
+
+/*
+*******************************************************************************
+*                     OSAL_DmaEnableINT
+*
+* Description:
+*    使能DMA中断
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 传输类型。end_irq or half_irq。
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaEnableINT(__hdle hDMA, __s32 IrqType)
+{
+	return 0;
+}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaDisableINT
+*
+* Description:
+*    禁止DMA中断
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 传输类型。end_irq or half_irq。
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaDisableINT(__hdle hDMA, __s32 IrqType)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     eBsp_DmaRegIrq
+*
+* Description:
+*    注册中断处理函数。
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 中断类型。end_irq or half_irq。
+*    pCallBack  :  input. 中断回调函数。
+*    pArg		:  input. 中断回调函数的参数。
+*
+* Return value:
+*    成功返回DMA句柄，失败返回NULL。
+*
+* note:
+*    回调函数的原型：typedef void (*DmaCallback)(void *pArg);
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaRegIrq(__hdle hDMA, __u32 IrqType, DmaCallback pCallBack, void *pArg)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     FunctionName
+*
+* Description:
+*    注销中断处理函数。
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 传输类型。end_irq or half_irq。
+*    pCallBack  :  input. 中断回调函数。
+*
+* Return value:
+*    成功返回DMA句柄，失败返回NULL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaUnRegIrq(__hdle hDMA, __u32 IrqType, DmaCallback pCallBack)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaConfig
+*
+* Description:
+*    配置DMA 通道，常用配置。
+*
+* Parameters:
+*    hDMA 	     :  input. cspRequestDma申请的句柄。
+*    p_cfg       :  input.  DMA配置。,实际数据结构请参数struct CSP_dma_config{}
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaConfig(__hdle hDMA, void * p_cfg)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaStart
+*
+* Description:
+*    开始 DMA 传输。
+*
+* Parameters:
+*    hDMA 	 		 :  input. cspRequestDma申请的句柄。
+*    SrcAddr		 :  input. 源地址
+*    DestAddr		 :  input. 目标地址
+*    TransferLength  :  input. 传输长度
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaStart(__hdle hDMA, __u32 SrcAddr, __u32 DestAddr, __u32 TransferLength)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaStop
+*
+* Description:
+*    停止本次DMA 传输。
+*
+* Parameters:
+*    hDMA ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaStop(__hdle hDMA)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaRestart
+*
+* Description:
+*    重新上一次DMA传输。
+*
+* Parameters:
+*    hDMA 	： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaRestart(__hdle hDMA)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryChannelNo
+*
+* Description:
+*    查询DMA的通道号。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    返回DMA通道号。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__u32 OSAL_DmaQueryChannelNo(__hdle hDMA)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryStatus
+*
+* Description:
+*    查询DMA的通道的状态，Busy or Idle。
+*
+* Parameters:
+*    hDMA ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    返回当前DMA通道的状态。1：busy，0：idle。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__u32 OSAL_DmaQueryStatus(__hdle hDMA)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryLeftCount
+*
+* Description:
+*    查询DMA的剩余字节数。
+*
+* Parameters:
+*    hDMA  :  input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    返回当前DMA的剩余字节数。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__u32 OSAL_DmaQueryLeftCount(__hdle hDMA)
+{
+	return 0;
+	}
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryConfig
+*
+* Description:
+*    查询DMA通道的配置。
+*
+* Parameters:
+*    hDMA 	   :  input. cspRequestDma申请的句柄。
+*    RegAddr   :  input. 寄存器地址
+*    RegWidth  :  input. 寄存器宽度
+*    RegValue  :  output. 寄存器值
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaQueryConfig(__hdle hDMA, __u32 RegAddr, __u32 RegWidth, __u32 *RegValue)
+{
+	return 0;
+	}
+/*
+*******************************************************************************
+*                     eBsp_DmaPause
+*
+* Description:
+*    暂停DMA传输。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaPause(__hdle hDMA){
+	return 0;
+	}
+/*
+*******************************************************************************
+*                     eBsp_DmaProceed
+*
+* Description:
+*    继续csp_DmaPause 暂停的DMA传输。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaProceed(__hdle hDMA){
+	return 0;
+	}
+/*
+*******************************************************************************
+*                     OSAL_DmaChangeMode
+*
+* Description:
+*    切换 DMA 的传输模式。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*    mode  :  input. 传输模式
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaChangeMode(__hdle hDMA, __s32 mode){
+	return 0;
+	}
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Dma.h b/drivers/video/sun4i/disp/OSAL/OSAL_Dma.h
new file mode 100644
index 0000000..06d32c3
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Dma.h
@@ -0,0 +1,390 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Dma.h
+*
+* Author 		: javen
+*
+* Description 	: Dma操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   	2010-09-07          1.0         create this word
+*		holi			2010-12-04			1.1			调整的参数部分，完全走CSP_para这条路
+*************************************************************************************
+*/
+#ifndef  __OSAL_DMA_H__
+#define  __OSAL_DMA_H__
+
+
+
+//---------------------------------------------------------------
+//  函数 定义
+//---------------------------------------------------------------
+
+typedef __s32 (*DmaCallback)( void *pArg);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaRequest
+*
+* Description:
+*    申请DMA通道。
+*
+* Parameters:
+*	 user_name 	:	模块名，方便统计
+*    DmaType  	:  	input. DMA类型。Normal or Dedicated
+*
+* Return value:
+*    成功返回DMA句柄，失败返回NULL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__hdle OSAL_DmaRequest(u8 * user_name ,__u32 DmaType);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaRelease
+*
+* Description:
+*    申请DMA通道。
+*
+* Parameters:
+*    hDMA ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaRelease(__hdle hDMA);
+
+
+/*
+*******************************************************************************
+*                     OSAL_DmaEnableINT
+*
+* Description:
+*    使能DMA中断
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 传输类型。end_irq or half_irq。
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaEnableINT(__hdle hDMA, __s32 IrqType);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaDisableINT
+*
+* Description:
+*    禁止DMA中断
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 传输类型。end_irq or half_irq。
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaDisableINT(__hdle hDMA, __s32 IrqType);
+
+/*
+*******************************************************************************
+*                     eBsp_DmaRegIrq
+*
+* Description:
+*    注册中断处理函数。
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 中断类型。end_irq or half_irq。
+*    pCallBack  :  input. 中断回调函数。
+*    pArg		:  input. 中断回调函数的参数。
+*
+* Return value:
+*    成功返回DMA句柄，失败返回NULL。
+*
+* note:
+*    回调函数的原型：typedef void (*DmaCallback)(void *pArg);
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaRegIrq(__hdle hDMA, __u32 IrqType, DmaCallback pCallBack, void *pArg);
+
+/*
+*******************************************************************************
+*                     FunctionName
+*
+* Description:
+*    注销中断处理函数。
+*
+* Parameters:
+*    hDMA 	    :  input. cspRequestDma申请的句柄。
+*    IrqType    :  input. 传输类型。end_irq or half_irq。
+*    pCallBack  :  input. 中断回调函数。
+*
+* Return value:
+*    成功返回DMA句柄，失败返回NULL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaUnRegIrq(__hdle hDMA, __u32 IrqType, DmaCallback pCallBack);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaConfig
+*
+* Description:
+*    配置DMA 通道，常用配置。
+*
+* Parameters:
+*    hDMA 	     :  input. cspRequestDma申请的句柄。
+*    p_cfg       :  input.  DMA配置。,实际数据结构请参数struct CSP_dma_config{}
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaConfig(__hdle hDMA, void * p_cfg);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaStart
+*
+* Description:
+*    开始 DMA 传输。
+*
+* Parameters:
+*    hDMA 	 		 :  input. cspRequestDma申请的句柄。
+*    SrcAddr		 :  input. 源地址
+*    DestAddr		 :  input. 目标地址
+*    TransferLength  :  input. 传输长度
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaStart(__hdle hDMA, __u32 SrcAddr, __u32 DestAddr, __u32 TransferLength);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaStop
+*
+* Description:
+*    停止本次DMA 传输。
+*
+* Parameters:
+*    hDMA ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaStop(__hdle hDMA);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaRestart
+*
+* Description:
+*    重新上一次DMA传输。
+*
+* Parameters:
+*    hDMA 	： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaRestart(__hdle hDMA);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryChannelNo
+*
+* Description:
+*    查询DMA的通道号。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    返回DMA通道号。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__u32 OSAL_DmaQueryChannelNo(__hdle hDMA);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryStatus
+*
+* Description:
+*    查询DMA的通道的状态，Busy or Idle。
+*
+* Parameters:
+*    hDMA ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    返回当前DMA通道的状态。1：busy，0：idle。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__u32 OSAL_DmaQueryStatus(__hdle hDMA);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryLeftCount
+*
+* Description:
+*    查询DMA的剩余字节数。
+*
+* Parameters:
+*    hDMA  :  input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    返回当前DMA的剩余字节数。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__u32 OSAL_DmaQueryLeftCount(__hdle hDMA);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaQueryConfig
+*
+* Description:
+*    查询DMA通道的配置。
+*
+* Parameters:
+*    hDMA 	   :  input. cspRequestDma申请的句柄。
+*    RegAddr   :  input. 寄存器地址
+*    RegWidth  :  input. 寄存器宽度
+*    RegValue  :  output. 寄存器值
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaQueryConfig(__hdle hDMA, __u32 RegAddr, __u32 RegWidth, __u32 *RegValue);
+
+/*
+*******************************************************************************
+*                     eBsp_DmaPause
+*
+* Description:
+*    暂停DMA传输。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaPause(__hdle hDMA);
+
+/*
+*******************************************************************************
+*                     eBsp_DmaProceed
+*
+* Description:
+*    继续csp_DmaPause 暂停的DMA传输。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*
+* Return value:
+*    成功返回EBSP_OK，失败返回EBSP_FAIL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaProceed(__hdle hDMA);
+
+/*
+*******************************************************************************
+*                     OSAL_DmaChangeMode
+*
+* Description:
+*    切换 DMA 的传输模式。
+*
+* Parameters:
+*    hDMA  ： input. cspRequestDma申请的句柄。
+*    mode  :  input. 传输模式
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DmaChangeMode(__hdle hDMA, __s32 mode);
+
+#endif   //__OSAL_DMA_H__
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Int.c b/drivers/video/sun4i/disp/OSAL/OSAL_Int.c
new file mode 100644
index 0000000..142ef0a
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Int.c
@@ -0,0 +1,124 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Int.h
+*
+* Author 		: javen
+*
+* Description 	: 中断操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+
+
+#include "OSAL.h"
+
+/*
+*******************************************************************************
+*                     OSAL_RegISR
+*
+* Description:
+*    注册中断服务程序
+*
+* Parameters:
+*    irqno    	    ：input.  中断号
+*    flags    	    ：input.  中断类型，默认值为0。
+*    Handler  	    ：input.  中断处理程序入口，或者中断事件句柄
+*    pArg 	        ：input.  参数
+*    DataSize 	    ：input.  参数的长度
+*    prio	        ：input.  中断优先级
+
+*
+* Return value:
+*     返回成功或者失败。
+*
+* note:
+*    中断处理函数原型，typedef __s32 (*ISRCallback)( void *pArg)。
+*
+*******************************************************************************
+*/
+int OSAL_RegISR(__u32 IrqNo, __u32 Flags,ISRCallback Handler,void *pArg,__u32 DataSize,__u32 Prio)
+{
+    return request_irq(IrqNo, (irq_handler_t)Handler, IRQF_DISABLED, "dev_name", pArg);
+}
+
+/*
+*******************************************************************************
+*                     OSAL_UnRegISR
+*
+* Description:
+*    注销中断服务程序
+*
+* Parameters:
+*    irqno    	：input.  中断号
+*    handler  	：input.  中断处理程序入口，或者中断事件句柄
+*    Argment 	：input.  参数
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_UnRegISR(__u32 IrqNo, ISRCallback Handler, void *pArg)
+{
+    free_irq(IrqNo, pArg);
+}
+
+/*
+*******************************************************************************
+*                     OSAL_InterruptEnable
+*
+* Description:
+*    中断使能
+*
+* Parameters:
+*    irqno ：input.  中断号
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_InterruptEnable(__u32 IrqNo)
+{
+    enable_irq(IrqNo);
+}
+
+/*
+*******************************************************************************
+*                     OSAL_InterruptDisable
+*
+* Description:
+*    中断禁止
+*
+* Parameters:
+*     irqno ：input.  中断号
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_InterruptDisable(__u32 IrqNo)
+{
+    disable_irq(IrqNo);
+}
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Int.h b/drivers/video/sun4i/disp/OSAL/OSAL_Int.h
new file mode 100644
index 0000000..468a411
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Int.h
@@ -0,0 +1,127 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Int.h
+*
+* Author 		: javen
+*
+* Description 	: 中断操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#ifndef  __OSAL_INT_H__
+#define  __OSAL_INT_H__
+
+#define __LINUX_OSAL__
+
+#ifndef __LINUX_OSAL__
+typedef __s32 (*ISRCallback)( void *);
+#else
+typedef int (*ISRCallback)( int, void* );
+#endif
+
+/*
+*******************************************************************************
+*                     OSAL_RegISR
+*
+* Description:
+*    注册中断服务程序
+*
+* Parameters:
+*    irqno    	    ：input.  中断号
+*    flags    	    ：input.  中断类型，默认值为0。
+*    Handler  	    ：input.  中断处理程序入口，或者中断事件句柄
+*    pArg 	        ：input.  参数
+*    DataSize 	    ：input.  参数的长度
+*    prio	        ：input.  中断优先级
+
+*
+* Return value:
+*     返回成功或者失败。
+*
+* note:
+*    中断处理函数原型，typedef __s32 (*ISRCallback)( void *pArg)。
+*
+*******************************************************************************
+*/
+int OSAL_RegISR(__u32 IrqNo,
+				__u32 Flags,
+				ISRCallback Handler,
+				void *pArg,
+				__u32 DataSize,
+				__u32 Prio);
+
+/*
+*******************************************************************************
+*                     OSAL_UnRegISR
+*
+* Description:
+*    注销中断服务程序
+*
+* Parameters:
+*    irqno    	：input.  中断号
+*    handler  	：input.  中断处理程序入口，或者中断事件句柄
+*    Argment 	：input.  参数
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_UnRegISR(__u32 IrqNo, ISRCallback Handler, void *pArg);
+
+/*
+*******************************************************************************
+*                     OSAL_InterruptEnable
+*
+* Description:
+*    中断使能
+*
+* Parameters:
+*    irqno ：input.  中断号
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_InterruptEnable(__u32 IrqNo);
+
+/*
+*******************************************************************************
+*                     OSAL_InterruptDisable
+*
+* Description:
+*    中断禁止
+*
+* Parameters:
+*     irqno ：input.  中断号
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_InterruptDisable(__u32 IrqNo);
+
+#endif   //__OSAL_INT_H__
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.c b/drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.c
new file mode 100644
index 0000000..ac7aa01
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.c
@@ -0,0 +1,39 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_IrqLock.h
+*
+* Author 		: javen
+*
+* Description 	: 临界区操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#include "OSAL.h"
+void OSAL_IrqLock(__u32 *cpu_sr)
+{
+    //local_irq_save(*cpu_sr);
+
+	//unsigned long flags = *cpu_sr;
+	//local_irq_save(flags);
+}
+
+void OSAL_IrqUnLock(__u32 cpu_sr)
+{
+	//local_irq_restore(cpu_sr);
+
+    //unsigned long flags = cpu_sr;
+    //local_irq_restore(flags);
+}
+
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.h b/drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.h
new file mode 100644
index 0000000..e44c1c3
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_IrqLock.h
@@ -0,0 +1,29 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_IrqLock.h
+*
+* Author 		: javen
+*
+* Description 	: 临界区操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#ifndef  __OSAL_IRQLOCK_H__
+#define  __OSAL_IRQLOCK_H__
+
+void OSAL_IrqLock(__u32 *cpu_sr);
+void OSAL_IrqUnLock(__u32 cpu_sr);
+#define OSAL_IRQ_RETURN IRQ_HANDLED
+
+#endif   //__OSAL_IRQLOCK_H__
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.c b/drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.c
new file mode 100644
index 0000000..b059a43
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.c
@@ -0,0 +1,150 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Lib_C.h
+*
+* Author 		: javen
+*
+* Description 	: C库函数
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         	create this word
+*		holi		   2010-12-03		   1.1			增加了OSAL_io_remap
+*************************************************************************************
+*/
+
+#include "OSAL.h"
+
+extern int kdb_trap_printk;
+
+/* 普通内存分配 */
+void * OSAL_malloc(__u32 Size)
+{
+	return NULL;
+}
+
+void OSAL_free(void *pAddr)
+{
+
+}
+
+/* 连续的物理内存分配 */
+void * OSAL_PhyAlloc(__u32 Size)
+{
+	return NULL;
+}
+
+void OSAL_PhyFree(void *pAddr, __u32 Size)
+{
+
+}
+
+
+/* 虚拟内存和物理内存之间的转化 */
+unsigned int OSAL_VAtoPA(void *va)
+{
+	return (unsigned int)va;
+    //return virt_to_phys(va);
+}
+
+void *OSAL_PAtoVA(unsigned int pa)
+{
+	return (void *)pa;
+    //return phys_to_virt(pa);
+}
+
+
+/*
+*******************************************************************************
+*                     IO地址转换
+*
+* Description:
+*    	将一块物理地址转化为虚拟地址
+*
+* Parameters:
+*		phy_addr	：	物理地址
+*		size		:	地址的长度
+*
+* Return value:
+*		==0			:	失败
+*		!=0			:	虚拟地址
+*
+* note:
+*    	size必须以4K为递增颗粒，既4k的整数倍
+*
+*******************************************************************************
+*/
+void *	 OSAL_io_remap(u32 phy_addr , u32 size)
+{
+    return ioremap(phy_addr,  size);
+}
+
+int OSAL_printf(const char *fmt, ...)
+{
+	va_list args;
+	int r;
+
+#ifdef CONFIG_KGDB_KDB
+	if (unlikely(kdb_trap_printk)) {
+		va_start(args, fmt);
+		r = vkdb_printf(fmt, args);
+		va_end(args);
+		return r;
+	}
+#endif
+	va_start(args, fmt);
+	r = vprintk(fmt, args);
+	va_end(args);
+
+	return r;
+}
+
+int OSAL_putchar(int value)
+{
+	return 0;
+	}
+int OSAL_puts(const char * value)
+{
+	return 0;
+	}
+int OSAL_getchar(void)
+{
+	return 0;
+	}
+char * OSAL_gets(char *value)
+{
+	return NULL;
+	}
+
+//----------------------------------------------------------------
+//  实用函数
+//----------------------------------------------------------------
+/* 字符串转长整形 */
+long OSAL_strtol (const char *str, const char **err, int base)
+{
+	return 0;
+	}
+
+/* 有符号十进制整形转字符串*/
+void OSAL_int2str_dec(int input, char * str)
+{
+}
+
+/* 十六进制整形转字符串*/
+void OSAL_int2str_hex(int input, char * str, int hex_flag)
+{
+}
+
+/* 无符号十进制整形转字符串*/
+void OSAL_uint2str_dec(unsigned int input, char * str)
+{
+}
+
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.h b/drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.h
new file mode 100644
index 0000000..73138cf
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Lib_C.h
@@ -0,0 +1,109 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Lib_C.h
+*
+* Author 		: javen
+*
+* Description 	: C库函数
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         	create this word
+*		holi		   2010-12-03		   1.1			增加了OSAL_io_remap
+*************************************************************************************
+*/
+#ifndef  __OSAL_LIB_C_H__
+#define  __OSAL_LIB_C_H__
+
+//----------------------------------------------------------------
+//  字符串操作
+//----------------------------------------------------------------
+//__size_t OSAL_strlen(const char *str);
+//int OSAL_strcmp(const char * p1_str, const char * p2_str);
+//int OSAL_strncmp( const char * p1_str, const char * p2_str, __size_t size);
+//char * OSAL_strcpy(char *dest, const char *src);
+//char * OSAL_strncpy(char *dest, const char *src, __size_t n);
+//char * OSAL_strcat(char *dest, const char *src);
+//char * OSAL_strncat(char *dest, const char *src, __size_t n);
+//char * OSAL_strchr(const char * str, char ch);
+//char * OSAL_strstr(const char * str, const char * substr);
+
+////----------------------------------------------------------------
+////  内存操作
+////----------------------------------------------------------------
+//void * OSAL_memset(void * pmem, int value, __size_t size);
+//void * OSAL_memcpy (void * pdest,  const void * psrc, __size_t size);
+//int OSAL_memcmp (const void * p1_mem, const void * p2_mem, __size_t size);
+//void * OSAL_memchr(const void *s, int c, __size_t n);
+
+/* 普通内存分配 */
+void * OSAL_malloc(__u32 Size);
+void OSAL_free(void *pAddr);
+
+/* 连续的物理内存分配 */
+void * OSAL_PhyAlloc(__u32 Size);
+void OSAL_PhyFree(void *pAddr, __u32 Size);
+
+/* 虚拟内存和物理内存之间的转化 */
+unsigned int OSAL_VAtoPA(void *va);
+void *OSAL_PAtoVA(unsigned int pa);
+
+
+/*
+*******************************************************************************
+*                     IO地址转换
+*
+* Description:
+*    	将一块物理地址转化为虚拟地址
+*
+* Parameters:
+*		phy_addr	：	物理地址
+*		size		:	地址的长度
+*
+* Return value:
+*		==0			:	失败
+*		!=0			:	虚拟地址
+*
+* note:
+*    	size必须以4K为递增颗粒，既4k的整数倍
+*
+*******************************************************************************
+*/
+void *	 OSAL_io_remap(u32 phy_addr , u32 size);
+
+//----------------------------------------------------------------
+//  串口输入输出操作
+//----------------------------------------------------------------
+int OSAL_printf(const char *, ...);
+
+
+
+int OSAL_putchar(int);
+int OSAL_puts(const char *);
+int OSAL_getchar(void);
+char * OSAL_gets(char *);
+
+//----------------------------------------------------------------
+//  实用函数
+//----------------------------------------------------------------
+/* 字符串转长整形 */
+long OSAL_strtol (const char *str, const char **err, int base);
+
+/* 有符号十进制整形转字符串*/
+void OSAL_int2str_dec(int input, char * str);
+
+/* 十六进制整形转字符串*/
+void OSAL_int2str_hex(int input, char * str, int hex_flag);
+
+/* 无符号十进制整形转字符串*/
+void OSAL_uint2str_dec(unsigned int input, char * str);
+
+
+#endif   //__OSAL_LIB_C_H__
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Parser.c b/drivers/video/sun4i/disp/OSAL/OSAL_Parser.c
new file mode 100644
index 0000000..6cedb07
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Parser.c
@@ -0,0 +1,28 @@
+#include "OSAL_Parser.h"
+
+int OSAL_Script_FetchParser_Data(char *main_name, char *sub_name, int value[], int count)
+{
+	return script_parser_fetch(main_name, sub_name, value, count);
+}
+
+int OSAL_sw_get_ic_ver(void)
+{
+    enum sw_ic_ver ic_ver;
+    int ret = 0xA;
+
+    ic_ver = sw_get_ic_ver();
+    if(ic_ver == MAGIC_VER_A)
+    {
+        ret = 0xA;
+    }
+    else if(ic_ver == MAGIC_VER_B)
+    {
+        ret = 0xB;
+    }
+    if(ic_ver == MAGIC_VER_C)
+    {
+        ret = 0xC;
+    }
+
+    return ret;
+}
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Parser.h b/drivers/video/sun4i/disp/OSAL/OSAL_Parser.h
new file mode 100644
index 0000000..b797ff6
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Parser.h
@@ -0,0 +1,9 @@
+#ifndef  __OSAL_PARSER_H__
+#define  __OSAL_PARSER_H__
+
+#include "OSAL.h"
+
+int OSAL_Script_FetchParser_Data(char *main_name, char *sub_name, int value[], int count);
+int OSAL_sw_get_ic_ver(void);
+
+#endif
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Pin.c b/drivers/video/sun4i/disp/OSAL/OSAL_Pin.c
new file mode 100644
index 0000000..fb19504
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Pin.c
@@ -0,0 +1,81 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Pin.h
+*
+* Author 		: javen
+*
+* Description 	: C库函数
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*       holi     	   2010-12-02          1.1         添加具体的接口，
+*************************************************************************************
+*/
+#include "OSAL_Pin.h"
+
+__hdle OSAL_GPIO_Request(user_gpio_set_t *gpio_list, __u32 group_count_max)
+{
+    //__inf("OSAL_GPIO_Request, port:%d, port_num:%d, mul_sel:%d, pull:%d, drv_level:%d, data:%d\n", gpio_list->port, gpio_list->port_num, gpio_list->mul_sel, gpio_list->pull, gpio_list->drv_level, gpio_list->data);
+
+    return gpio_request(gpio_list, group_count_max);
+}
+
+__hdle OSAL_GPIO_Request_Ex(char *main_name, const char *sub_name)
+{
+    return gpio_request_ex(main_name, sub_name);
+}
+
+//if_release_to_default_status:
+    //如果是0或者1，表示释放后的GPIO处于输入状态，输入状状态不会导致外部电平的错误。
+    //如果是2，表示释放后的GPIO状态不变，即释放的时候不管理当前GPIO的硬件寄存器。
+__s32 OSAL_GPIO_Release(__hdle p_handler, __s32 if_release_to_default_status)
+{
+    //__inf("OSAL_GPIO_Release\n");
+    gpio_release(p_handler, if_release_to_default_status);
+
+    return 0;
+}
+
+__s32 OSAL_GPIO_DevGetAllPins_Status(unsigned p_handler, user_gpio_set_t *gpio_status, unsigned gpio_count_max, unsigned if_get_from_hardware)
+{
+    return gpio_get_all_pin_status(p_handler, gpio_status, gpio_count_max, if_get_from_hardware);
+}
+
+__s32 OSAL_GPIO_DevGetONEPins_Status(unsigned p_handler, user_gpio_set_t *gpio_status,const char *gpio_name,unsigned if_get_from_hardware)
+{
+    return gpio_get_one_pin_status(p_handler, gpio_status,gpio_name,if_get_from_hardware);
+}
+
+__s32 OSAL_GPIO_DevSetONEPin_Status(u32 p_handler, user_gpio_set_t *gpio_status, const char *gpio_name, __u32 if_set_to_current_input_status)
+{
+    return gpio_set_one_pin_status(p_handler, gpio_status, gpio_name, if_set_to_current_input_status);
+}
+
+__s32 OSAL_GPIO_DevSetONEPIN_IO_STATUS(u32 p_handler, __u32 if_set_to_output_status, const char *gpio_name)
+{
+    return gpio_set_one_pin_io_status(p_handler, if_set_to_output_status, gpio_name);
+}
+
+__s32 OSAL_GPIO_DevSetONEPIN_PULL_STATUS(u32 p_handler, __u32 set_pull_status, const char *gpio_name)
+{
+    return gpio_set_one_pin_pull(p_handler, set_pull_status, gpio_name);
+}
+
+__s32 OSAL_GPIO_DevREAD_ONEPIN_DATA(u32 p_handler, const char *gpio_name)
+{
+    return gpio_read_one_pin_value(p_handler, gpio_name);
+}
+
+__s32 OSAL_GPIO_DevWRITE_ONEPIN_DATA(u32 p_handler, __u32 value_to_gpio, const char *gpio_name)
+{
+    return gpio_write_one_pin_value(p_handler, value_to_gpio, gpio_name);
+}
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Pin.h b/drivers/video/sun4i/disp/OSAL/OSAL_Pin.h
new file mode 100644
index 0000000..5d85a92
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Pin.h
@@ -0,0 +1,47 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Pin.h
+*
+* Author 		: javen
+*
+* Description 	: C库函数
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*       holi     	   2010-12-02          1.1         添加具体的接口，
+*************************************************************************************
+*/
+#ifndef  __OSAL_PIN_H__
+#define  __OSAL_PIN_H__
+
+#include "OSAL.h"
+
+__hdle OSAL_GPIO_Request(user_gpio_set_t *gpio_list, __u32 group_count_max);
+
+__hdle OSAL_GPIO_Request_Ex(char *main_name, const char *sub_name);
+
+__s32 OSAL_GPIO_Release(__hdle p_handler, __s32 if_release_to_default_status);
+
+__s32 OSAL_GPIO_DevGetAllPins_Status(unsigned p_handler, user_gpio_set_t *gpio_status, unsigned gpio_count_max, unsigned if_get_from_hardware);
+
+__s32 OSAL_GPIO_DevGetONEPins_Status(unsigned p_handler, user_gpio_set_t *gpio_status,const char *gpio_name,unsigned if_get_from_hardware);
+
+__s32 OSAL_GPIO_DevSetONEPin_Status(u32 p_handler, user_gpio_set_t *gpio_status, const char *gpio_name, __u32 if_set_to_current_input_status);
+
+__s32 OSAL_GPIO_DevSetONEPIN_IO_STATUS(u32 p_handler, __u32 if_set_to_output_status, const char *gpio_name);
+
+__s32 OSAL_GPIO_DevSetONEPIN_PULL_STATUS(u32 p_handler, __u32 set_pull_status, const char *gpio_name);
+
+__s32 OSAL_GPIO_DevREAD_ONEPIN_DATA(u32 p_handler, const char *gpio_name);
+
+__s32 OSAL_GPIO_DevWRITE_ONEPIN_DATA(u32 p_handler, __u32 value_to_gpio, const char *gpio_name);
+
+#endif   //__OSAL_PIN_H__
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Semi.c b/drivers/video/sun4i/disp/OSAL/OSAL_Semi.c
new file mode 100644
index 0000000..955b8a9
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Semi.c
@@ -0,0 +1,118 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Semi.h
+*
+* Author 		: javen
+*
+* Description 	: 信号量操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#include "OSAL.h"
+
+/*
+*******************************************************************************
+*                     eBase_CreateSemaphore
+*
+* Description:
+*    创建信号量
+*
+* Parameters:
+*    Count  :  input.  信号量的初始值。
+*
+* Return value:
+*    成功，返回信号量句柄。失败，返回NULL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+OSAL_SemHdle OSAL_CreateSemaphore(__u32 Count)
+{
+	return 0;
+}
+
+/*
+*******************************************************************************
+*                     OSAL_DeleteSemaphore
+*
+* Description:
+*    删除信号量
+*
+* Parameters:
+*    SemHdle  :  input.  OSAL_CreateSemaphore 申请的 信号量句柄
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_DeleteSemaphore(OSAL_SemHdle SemHdle)
+{
+
+
+}
+
+/*
+*******************************************************************************
+*                     OSAL_SemPend
+*
+* Description:
+*    锁信号量
+*
+* Parameters:
+*    SemHdle  :  input.  OSAL_CreateSemaphore 申请的 信号量句柄
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_SemPend(OSAL_SemHdle SemHdle, __u16 TimeOut)
+{
+
+}
+
+/*
+*******************************************************************************
+*                     OSAL_SemPost
+*
+* Description:
+*    信号量解锁
+*
+* Parameters:
+*    SemHdle  :  input.  OSAL_CreateSemaphore 申请的 信号量句柄
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_SemPost(OSAL_SemHdle SemHdle)
+{
+
+}
+
+
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Semi.h b/drivers/video/sun4i/disp/OSAL/OSAL_Semi.h
new file mode 100644
index 0000000..1398cf0
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Semi.h
@@ -0,0 +1,109 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Semi.h
+*
+* Author 		: javen
+*
+* Description 	: 信号量操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#ifndef  __OSAL_SEMI_H__
+#define  __OSAL_SEMI_H__
+
+
+typedef void*  OSAL_SemHdle;
+
+/*
+*******************************************************************************
+*                     eBase_CreateSemaphore
+*
+* Description:
+*    创建信号量
+*
+* Parameters:
+*    Count  :  input.  信号量的初始值。
+*
+* Return value:
+*    成功，返回信号量句柄。失败，返回NULL。
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+OSAL_SemHdle OSAL_CreateSemaphore(__u32 Count);
+
+/*
+*******************************************************************************
+*                     OSAL_DeleteSemaphore
+*
+* Description:
+*    删除信号量
+*
+* Parameters:
+*    SemHdle  :  input.  OSAL_CreateSemaphore 申请的 信号量句柄
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_DeleteSemaphore(OSAL_SemHdle SemHdle);
+
+/*
+*******************************************************************************
+*                     OSAL_SemPend
+*
+* Description:
+*    锁信号量
+*
+* Parameters:
+*    SemHdle  :  input.  OSAL_CreateSemaphore 申请的 信号量句柄
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_SemPend(OSAL_SemHdle SemHdle, __u16 TimeOut);
+
+/*
+*******************************************************************************
+*                     OSAL_SemPost
+*
+* Description:
+*    信号量解锁
+*
+* Parameters:
+*    SemHdle  :  input.  OSAL_CreateSemaphore 申请的 信号量句柄
+*
+* Return value:
+*    void
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+void OSAL_SemPost(OSAL_SemHdle SemHdle);
+
+
+#endif   //__OSAL_SEMI_H__
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Thread.c b/drivers/video/sun4i/disp/OSAL/OSAL_Thread.c
new file mode 100644
index 0000000..cebfc27
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Thread.c
@@ -0,0 +1,22 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Thread.h
+*
+* Author 		: javen
+*
+* Description 	: 线程操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Thread.h b/drivers/video/sun4i/disp/OSAL/OSAL_Thread.h
new file mode 100644
index 0000000..d608c7f
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Thread.h
@@ -0,0 +1,27 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_Thread.h
+*
+* Author 		: javen
+*
+* Description 	: 线程操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#ifndef  __OSAL_THREAD_H__
+#define  __OSAL_THREAD_H__
+
+
+
+#endif   //__OSAL_THREAD_H__
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Time.c b/drivers/video/sun4i/disp/OSAL/OSAL_Time.c
new file mode 100644
index 0000000..c4831ef
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Time.c
@@ -0,0 +1,101 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_time.h
+*
+* Author 		: javen
+*
+* Description 	: Time操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#include "OSAL.h"
+
+/*
+*******************************************************************************
+*                     OSAL_CreateTimer
+*
+* Description:
+*    初始化一个timer
+*
+* Parameters:
+*    Period     :  input. 周期时间
+*    EventType  :  input. 事件触发的类型，一次还是多次。
+*    CallBack   :  input. 回调函数
+*    pArg       :  input. 回调函数的参数
+*
+* Return value:
+*    返回timer句柄
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__hdle OSAL_CreateTimer(__u32 Period, __u32 EventType, TIMECALLBACK CallBack, void *pArg)
+{
+    return 0;
+}
+
+/*
+*******************************************************************************
+*                     OSAL_DelTimer
+*
+* Description:
+*    删除timer
+*
+* Parameters:
+*    HTimer  :  input. OSAL_InitTimer申请timer句柄
+*
+* Return value:
+*    返回成功或者失败
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DelTimer(__hdle HTimer)
+{
+    return 0;
+}
+
+/*
+*******************************************************************************
+*                     OSAL_StartTimer
+*
+* Description:
+*    开始timer计时
+*
+* Parameters:
+*    HTimer  :  input. OSAL_InitTimer申请timer句柄
+*
+* Return value:
+*    返回成功或者失败
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_StartTimer(__hdle HTimer)
+{
+	return 0;
+}
+
+/* 睡眠 *//* 单位：毫秒 */
+void OSAL_Sleep(__u32 Milliseconds)
+{
+
+}
+
+
diff --git a/drivers/video/sun4i/disp/OSAL/OSAL_Time.h b/drivers/video/sun4i/disp/OSAL/OSAL_Time.h
new file mode 100644
index 0000000..b9b54d4
--- /dev/null
+++ b/drivers/video/sun4i/disp/OSAL/OSAL_Time.h
@@ -0,0 +1,97 @@
+/*
+*************************************************************************************
+*                         			eBsp
+*					   Operation System Adapter Layer
+*
+*				(c) Copyright 2006-2010, All winners Co,Ld.
+*							All	Rights Reserved
+*
+* File Name 	: OSAL_time.h
+*
+* Author 		: javen
+*
+* Description 	: Time操作
+*
+* History 		:
+*      <author>    		<time>       	<version >    		<desc>
+*       javen     	   2010-09-07          1.0         create this word
+*
+*************************************************************************************
+*/
+#ifndef  __OSAL_TIME_H__
+#define  __OSAL_TIME_H__
+
+/* 定时器 */
+#define  OSAL_TIMER_EVENT_TYPE_ONCE       0   /* 一次触发     */
+#define  OSAL_TIMER_EVENT_TYPE_PERIOD     1   /* 周期性触发   */
+
+typedef void (* TIMECALLBACK)(void *pArg);
+
+/*
+*******************************************************************************
+*                     OSAL_CreateTimer
+*
+* Description:
+*    初始化一个timer
+*
+* Parameters:
+*    Period     :  input. 周期时间
+*    EventType  :  input. 事件触发的类型，一次还是多次。
+*    CallBack   :  input. 回调函数
+*    pArg       :  input. 回调函数的参数
+*
+* Return value:
+*    返回timer句柄
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__hdle OSAL_CreateTimer(__u32 Period, __u32 EventType, TIMECALLBACK CallBack, void *pArg);
+
+/*
+*******************************************************************************
+*                     OSAL_DelTimer
+*
+* Description:
+*    删除timer
+*
+* Parameters:
+*    HTimer  :  input. OSAL_InitTimer申请timer句柄
+*
+* Return value:
+*    返回成功或者失败
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_DelTimer(__hdle HTimer);
+
+/*
+*******************************************************************************
+*                     OSAL_StartTimer
+*
+* Description:
+*    开始timer计时
+*
+* Parameters:
+*    HTimer  :  input. OSAL_InitTimer申请timer句柄
+*
+* Return value:
+*    返回成功或者失败
+*
+* note:
+*    void
+*
+*******************************************************************************
+*/
+__s32 OSAL_StartTimer(__hdle HTimer);
+
+/* 睡眠 */
+void OSAL_Sleep(__u32 Milliseconds);	/* 单位：毫秒 */
+
+#endif   //__OSAL_TIME_H__
+
diff --git a/drivers/video/sun4i/disp/de_bsp/bsp_display.h b/drivers/video/sun4i/disp/de_bsp/bsp_display.h
new file mode 100644
index 0000000..ff18d64
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/bsp_display.h
@@ -0,0 +1,281 @@
+
+#ifndef __EBSP_DISPLAY_H__
+#define __EBSP_DISPLAY_H__
+
+#define __LINUX_OSAL__
+//#define __MELIS_OSAL__
+//#define __WINCE_OSAL__
+//#define __BOOT_OSAL__
+
+#ifdef __LINUX_OSAL__
+#include "linux/kernel.h"
+#include "linux/mm.h"
+#include <asm/uaccess.h>
+#include <asm/memory.h>
+#include <asm/unistd.h>
+#include "linux/semaphore.h"
+#include <linux/vmalloc.h>
+#include <linux/fs.h>
+#include <linux/dma-mapping.h>
+#include <linux/fb.h>
+#include <linux/sched.h>   //wake_up_process()
+#include <linux/kthread.h> //kthread_create()、kthread_run()
+#include <linux/err.h> //IS_ERR()、PTR_ERR()
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include "asm-generic/int-ll64.h"
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/init.h>
+#include <linux/dma-mapping.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/cdev.h>
+#include <mach/sys_config.h>
+#include <mach/clock.h>
+#include <mach/aw_ccu.h>
+#include <mach/system.h>
+
+typedef unsigned int __hdle;
+
+#include <linux/drv_display.h>
+#include "../OSAL/OSAL.h"
+
+#if 1
+#define OSAL_PRINTF(msg...)     {printk(KERN_WARNING msg);}
+#define __inf(msg...)
+#define __msg(msg...)
+#define __wrn(msg...)       {printk(KERN_WARNING "[DISP WRN] file:%s,line:%d:    ",__FILE__,__LINE__);  printk(msg);}
+#define __here__
+#else
+#define OSAL_PRINTF(msg...) {printk(KERN_WARNING msg);}
+#define __inf(msg...)       {printk(KERN_WARNING "[DISP] ");                                            printk(msg);}
+#define __msg(msg...)       {printk(KERN_WARNING "[DISP] file:%s,line:%d:    ",__FILE__,__LINE__);      printk(msg);}
+#define __wrn(msg...)       {printk(KERN_WARNING "[DISP WRN] file:%s,line:%d:    ",__FILE__,__LINE__);  printk(msg);}
+#define __here__            {printk(KERN_WARNING "[DISP] file:%s,line:%d\n",__FILE__,__LINE__);}
+#endif
+
+
+#endif//end of define __LINUX_OSAL__
+
+#ifdef __MELIS_OSAL__
+#include "string.h"
+#include "D:/winners/eBase/eBSP/BSP/sun_20/common_inc.h"
+#endif
+
+#ifdef __BOOT_OSAL__
+#define OSAL_PRINTF wlibc_uprintf
+
+#include "egon2.h"
+#include "string.h"
+#include "../OSAL/OSAL_De.h"
+#endif
+
+
+typedef struct
+{
+	__u32 base_image0;
+	__u32 base_image1;
+	__u32 base_scaler0;
+	__u32 base_scaler1;
+	__u32 base_lcdc0;
+	__u32 base_lcdc1;
+	__u32 base_tvec0;
+	__u32 base_tvec1;
+	__u32 base_pioc;
+	__u32 base_sdram;
+	__u32 base_ccmu;
+	__u32 base_pwm;
+
+	__s32 (*scaler_begin) (__u32 sel);
+	void (*scaler_finish) (__u32 sel);
+	void (*tve_interrup) (__u32 sel);
+	__s32 (*hdmi_set_mode)(__disp_tv_mode_t mode);
+	__s32 (*Hdmi_open)(void);
+	__s32 (*Hdmi_close)(void);
+	__s32 (*hdmi_mode_support)(__disp_tv_mode_t mode);
+	__s32 (*hdmi_get_HPD_status)(void);
+	__s32 (*hdmi_set_pll)(__u32 pll, __u32 clk);
+	__s32 (*disp_int_process)(__u32 sel);
+}__disp_bsp_init_para;
+
+
+extern __s32 BSP_disp_clk_on(__u32 type);
+extern __s32 BSP_disp_clk_off(__u32 type);
+extern __s32 BSP_disp_init(__disp_bsp_init_para * para);
+extern __s32 BSP_disp_exit(__u32 mode);
+extern __s32 BSP_disp_open(void);
+extern __s32 BSP_disp_close(void);
+extern __s32 BSP_disp_print_reg(__bool b_force_on, __u32 id);
+extern __s32 BSP_disp_cmd_cache(__u32 sel);
+extern __s32 BSP_disp_cmd_submit(__u32 sel);
+extern __s32 BSP_disp_set_bk_color(__u32 sel, __disp_color_t *color);
+extern __s32 BSP_disp_get_bk_color(__u32 sel, __disp_color_t *color);
+extern __s32 BSP_disp_set_color_key(__u32 sel, __disp_colorkey_t *ck_mode);
+extern __s32 BSP_disp_get_color_key(__u32 sel, __disp_colorkey_t *ck_mode);
+extern __s32 BSP_disp_set_palette_table(__u32 sel, __u32 *pbuffer, __u32 offset, __u32 size);
+extern __s32 BSP_disp_get_palette_table(__u32 sel, __u32 * pbuffer, __u32 offset,__u32 size);
+extern __s32 BSP_disp_get_screen_height(__u32 sel);
+extern __s32 BSP_disp_get_screen_width(__u32 sel);
+extern __s32 BSP_disp_get_output_type(__u32 sel);
+extern __s32 BSP_disp_get_frame_rate(__u32 sel);
+extern __s32 BSP_disp_gamma_correction_enable(__u32 sel);
+extern __s32 BSP_disp_gamma_correction_disable(__u32 sel);
+extern __s32 BSP_disp_set_bright(__u32 sel, __u32 bright);
+extern __s32 BSP_disp_get_bright(__u32 sel);
+extern __s32 BSP_disp_set_contrast(__u32 sel, __u32 contrast);
+extern __s32 BSP_disp_get_contrast(__u32 sel);
+extern __s32 BSP_disp_set_saturation(__u32 sel, __u32 saturation);
+extern __s32 BSP_disp_get_saturation(__u32 sel);
+extern __s32 BSP_disp_enhance_enable(__u32 sel, __bool enable);
+extern __s32 BSP_disp_get_enhance_enable(__u32 sel);
+extern __s32 BSP_disp_capture_screen(__u32 sel, __disp_capture_screen_para_t * para);
+extern __s32 BSP_disp_set_screen_size(__u32 sel, __disp_rectsz_t * size);
+extern __s32 BSP_disp_set_yuv_output(__u32 sel, __bool bout_yuv);
+extern __s32 BSP_disp_de_flicker_enable(__u32 sel, __bool b_en);
+
+extern __s32 BSP_disp_layer_request(__u32 sel, __disp_layer_work_mode_t mode);
+extern __s32 BSP_disp_layer_release(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_open(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_close(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_framebuffer(__u32 sel, __u32 hid,__disp_fb_t *fbinfo);
+extern __s32 BSP_disp_layer_get_framebuffer(__u32 sel, __u32 hid,__disp_fb_t*fbinfo);
+extern __s32 BSP_disp_layer_set_src_window(__u32 sel, __u32 hid,__disp_rect_t *regn);
+extern __s32 BSP_disp_layer_get_src_window(__u32 sel, __u32 hid,__disp_rect_t *regn);
+extern __s32 BSP_disp_layer_set_screen_window(__u32 sel, __u32 hid,__disp_rect_t* regn);
+extern __s32 BSP_disp_layer_get_screen_window(__u32 sel, __u32 hid,__disp_rect_t *regn);
+extern __s32 BSP_disp_layer_set_para(__u32 sel, __u32 hid, __disp_layer_info_t * layer_para);
+extern __s32 BSP_disp_layer_get_para(__u32 sel, __u32 hid, __disp_layer_info_t * layer_para);
+extern __s32 BSP_disp_layer_set_top(__u32 sel, __u32  handle);
+extern __s32 BSP_disp_layer_set_bottom(__u32 sel, __u32  handle);
+extern __s32 BSP_disp_layer_set_alpha_value(__u32 sel, __u32 hid,__u8 value);
+extern __s32 BSP_disp_layer_get_alpha_value(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_alpha_enable(__u32 sel, __u32 hid, __bool enable);
+extern __s32 BSP_disp_layer_get_alpha_enable(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_pipe(__u32 sel, __u32 hid,__u8 pipe);
+extern __s32 BSP_disp_layer_get_pipe(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_get_piro(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_colorkey_enable(__u32 sel, __u32 hid, __bool enable);
+extern __s32 BSP_disp_layer_get_colorkey_enable(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_smooth(__u32 sel, __u32 hid, __disp_video_smooth_t  mode);
+extern __s32 BSP_disp_layer_get_smooth(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_bright(__u32 sel, __u32 hid, __u32 bright);
+extern __s32 BSP_disp_layer_set_contrast(__u32 sel, __u32 hid, __u32 contrast);
+extern __s32 BSP_disp_layer_set_saturation(__u32 sel, __u32 hid, __u32 saturation);
+extern __s32 BSP_disp_layer_set_hue(__u32 sel, __u32 hid, __u32 hue);
+extern __s32 BSP_disp_layer_enhance_enable(__u32 sel, __u32 hid, __bool enable);
+extern __s32 BSP_disp_layer_get_bright(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_get_contrast(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_get_saturation(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_get_hue(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_get_enhance_enable(__u32 sel, __u32 hid);
+
+extern __s32 BSP_disp_layer_vpp_enable(__u32 sel, __u32 hid, __bool enable);
+extern __s32 BSP_disp_layer_get_vpp_enable(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_luma_sharp_level(__u32 sel, __u32 hid, __u32 level);
+extern __s32 BSP_disp_layer_get_luma_sharp_level(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_chroma_sharp_level(__u32 sel, __u32 hid, __u32 level);
+extern __s32 BSP_disp_layer_get_chroma_sharp_level(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_white_exten_level(__u32 sel, __u32 hid, __u32 level);
+extern __s32 BSP_disp_layer_get_white_exten_level(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_layer_set_black_exten_level(__u32 sel, __u32 hid, __u32 level);
+extern __s32 BSP_disp_layer_get_black_exten_level(__u32 sel, __u32 hid);
+
+extern __s32 BSP_disp_scaler_get_smooth(__u32 sel);
+extern __s32 BSP_disp_scaler_set_smooth(__u32 sel, __disp_video_smooth_t  mode);
+extern __s32 BSP_disp_scaler_request(void);
+extern __s32 BSP_disp_scaler_release(__u32 handle);
+extern __s32 BSP_disp_scaler_start(__u32 handle,__disp_scaler_para_t *scl);
+
+extern __s32 BSP_disp_hwc_enable(__u32 sel, __bool enable);
+extern __s32 BSP_disp_hwc_set_pos(__u32 sel, __disp_pos_t *pos);
+extern __s32 BSP_disp_hwc_get_pos(__u32 sel, __disp_pos_t *pos);
+extern __s32 BSP_disp_hwc_set_framebuffer(__u32 sel, __disp_hwc_pattern_t *patmem);
+extern __s32 BSP_disp_hwc_set_palette(__u32 sel, void *palette,__u32 offset, __u32 palette_size);
+
+extern __s32 BSP_disp_video_set_fb(__u32 sel, __u32 hid, __disp_video_fb_t *in_addr);
+extern __s32 BSP_disp_video_get_frame_id(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_video_get_dit_info(__u32 sel, __u32 hid, __disp_dit_info_t * dit_info);
+extern __s32 BSP_disp_video_start(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_video_stop(__u32 sel, __u32 hid);
+
+extern __s32 BSP_disp_lcd_open_before(__u32 sel);
+extern __s32 BSP_disp_lcd_open_after(__u32 sel);
+extern __lcd_flow_t * BSP_disp_lcd_get_open_flow(__u32 sel);
+extern __s32 BSP_disp_lcd_close_befor(__u32 sel);
+extern __s32 BSP_disp_lcd_close_after(__u32 sel);
+extern __lcd_flow_t * BSP_disp_lcd_get_close_flow(__u32 sel);
+extern __s32 BSP_disp_lcd_xy_switch(__u32 sel, __s32 mode);
+extern __s32 BSP_disp_set_gamma_table(__u32 sel, __u32 *gamtbl_addr,__u32 gamtbl_size);
+extern __s32 BSP_disp_lcd_set_bright(__u32 sel, __disp_lcd_bright_t  bright);
+extern __s32 BSP_disp_lcd_get_bright(__u32 sel);
+extern __s32 BSP_disp_lcd_set_src(__u32 sel, __disp_lcdc_src_t src);
+extern __s32 LCD_PWM_EN(__u32 sel, __bool b_en);
+extern __s32 LCD_BL_EN(__u32 sel, __bool b_en);
+extern __s32 BSP_disp_lcd_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3);
+extern __s32 pwm_set_para(__u32 channel, __pwm_info_t * pwm_info);
+extern __s32 pwm_get_para(__u32 channel, __pwm_info_t * pwm_info);
+
+extern __s32 BSP_disp_tv_open(__u32 sel);
+extern __s32 BSP_disp_tv_close(__u32 sel);
+extern __s32 BSP_disp_tv_set_mode(__u32 sel, __disp_tv_mode_t tv_mod);
+extern __s32 BSP_disp_tv_get_mode(__u32 sel);
+extern __s32 BSP_disp_tv_get_interface(__u32 sel);
+extern __s32 BSP_disp_tv_auto_check_enable(__u32 sel);
+extern __s32 BSP_disp_tv_auto_check_disable(__u32 sel);
+extern __s32 BSP_disp_tv_set_src(__u32 sel, __disp_lcdc_src_t src);
+extern __s32 BSP_disp_tv_get_dac_status(__u32 sel, __u32 index);
+extern __s32 BSP_disp_tv_set_dac_source(__u32 sel, __u32 index, __disp_tv_dac_source source);
+extern __s32 BSP_disp_tv_get_dac_source(__u32 sel, __u32 index);
+
+extern __s32 BSP_disp_hdmi_open(__u32 sel);
+extern __s32 BSP_disp_hdmi_close(__u32 sel);
+extern __s32 BSP_disp_hdmi_set_mode(__u32 sel, __disp_tv_mode_t  mode);
+extern __s32 BSP_disp_hdmi_get_mode(__u32 sel);
+extern __s32 BSP_disp_hdmi_check_support_mode(__u32 sel, __u8  mode);
+extern __s32 BSP_disp_hdmi_get_hpd_status(__u32 sel);
+extern __s32 BSP_disp_hdmi_set_src(__u32 sel, __disp_lcdc_src_t src);
+extern __s32 BSP_disp_set_hdmi_func(__disp_hdmi_func * func);
+
+extern __s32 BSP_disp_vga_open(__u32 sel);
+extern __s32 BSP_disp_vga_close(__u32 sel);
+extern __s32 BSP_disp_vga_set_mode(__u32 sel, __disp_vga_mode_t  mode);
+extern __s32 BSP_disp_vga_get_mode(__u32 sel);
+extern __s32 BSP_disp_vga_set_src(__u32 sel, __disp_lcdc_src_t src);
+
+extern __s32 BSP_disp_sprite_init(__u32 sel);
+extern __s32 BSP_disp_sprite_exit(__u32 sel);
+extern __s32 BSP_disp_sprite_open(__u32 sel);
+extern __s32 BSP_disp_sprite_close(__u32 sel);
+extern __s32 BSP_disp_sprite_alpha_enable(__u32 sel);
+extern __s32 BSP_disp_sprite_alpha_disable(__u32 sel);
+extern __s32 BSP_disp_sprite_get_alpha_enable(__u32 sel);
+extern __s32 BSP_disp_sprite_set_alpha_vale(__u32 sel, __u32 alpha);
+extern __s32 BSP_disp_sprite_get_alpha_value(__u32 sel);
+extern __s32 BSP_disp_sprite_set_format(__u32 sel, __disp_pixel_fmt_t format, __disp_pixel_seq_t pixel_seq);
+extern __s32 BSP_disp_sprite_set_palette_table(__u32 sel, __u32 *buffer, __u32 offset, __u32 size);
+extern __s32 BSP_disp_sprite_set_order(__u32 sel, __s32 hid,__s32 dst_hid);
+extern __s32 BSP_disp_sprite_get_top_block(__u32 sel);
+extern __s32 BSP_disp_sprite_get_bottom_block(__u32 sel);
+extern __s32 BSP_disp_sprite_get_block_number(__u32 sel);
+extern __s32 BSP_disp_sprite_block_request(__u32 sel, __disp_sprite_block_para_t *para);
+extern __s32 BSP_disp_sprite_block_release(__u32 sel, __s32 hid);
+extern __s32 BSP_disp_sprite_block_set_screen_win(__u32 sel, __s32 hid, __disp_rect_t * scn_win);
+extern __s32 BSP_disp_sprite_block_get_srceen_win(__u32 sel, __s32 hid, __disp_rect_t * scn_win);
+extern __s32 BSP_disp_sprite_block_set_src_win(__u32 sel, __s32 hid, __disp_rect_t * scn_win);
+extern __s32 BSP_disp_sprite_block_get_src_win(__u32 sel, __s32 hid, __disp_rect_t * scn_win);
+extern __s32 BSP_disp_sprite_block_set_framebuffer(__u32 sel, __s32 hid, __disp_fb_t * fb);
+extern __s32 BSP_disp_sprite_block_get_framebufer(__u32 sel, __s32 hid,__disp_fb_t *fb);
+extern __s32 BSP_disp_sprite_block_set_top(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_sprite_block_set_bottom(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_sprite_block_get_pre_block(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_sprite_block_get_next_block(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_sprite_block_get_prio(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_sprite_block_open(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_sprite_block_close(__u32 sel, __u32 hid);
+extern __s32 BSP_disp_sprite_block_set_para(__u32 sel, __u32 hid,__disp_sprite_block_para_t *para);
+extern __s32 BSP_disp_sprite_block_get_para(__u32 sel, __u32 hid,__disp_sprite_block_para_t *para);
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_clk.c b/drivers/video/sun4i/disp/de_bsp/de/disp_clk.c
new file mode 100644
index 0000000..6117c3f
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_clk.c
@@ -0,0 +1,1249 @@
+
+#include "disp_display_i.h"
+#include "disp_display.h"
+#include "disp_clk.h"
+
+
+#define CLK_ON 1
+#define CLK_OFF 0
+#define RST_INVAILD 0
+#define RST_VAILD   1
+
+#define CLK_DEBE0_AHB_ON	0x00000001
+#define CLK_DEBE0_MOD_ON 	0x00000002
+#define CLK_DEBE0_DRAM_ON	0x00000004
+#define CLK_DEBE1_AHB_ON	0x00000010
+#define CLK_DEBE1_MOD_ON 	0x00000020
+#define CLK_DEBE1_DRAM_ON	0x00000040
+#define CLK_DEFE0_AHB_ON	0x00000100
+#define CLK_DEFE0_MOD_ON 	0x00000200
+#define CLK_DEFE0_DRAM_ON	0x00000400
+#define CLK_DEFE1_AHB_ON	0x00001000
+#define CLK_DEFE1_MOD_ON 	0x00002000
+#define CLK_DEFE1_DRAM_ON	0x00004000
+#define CLK_LCDC0_AHB_ON	0x00010000
+#define CLK_LCDC0_MOD0_ON  	0x00020000
+#define CLK_LCDC0_MOD1_ON  	0x00040000	//represent lcd0-ch1-clk1 and lcd0-ch1-clk2
+#define CLK_LCDC1_AHB_ON    0x00100000
+#define CLK_LCDC1_MOD0_ON  	0x00200000
+#define CLK_LCDC1_MOD1_ON  	0x00400000  //represent lcd1-ch1-clk1 and lcd1-ch1-clk2
+#define CLK_TVENC0_AHB_ON	0x01000000
+#define CLK_TVENC1_AHB_ON	0x02000000
+#define CLK_HDMI_AHB_ON     0x10000000
+#define CLK_HDMI_MOD_ON 	0x20000000
+//#define CLK_LVDS_MOD_ON
+
+#define CLK_DEBE0_AHB_OFF	(~(CLK_DEBE0_AHB_ON	    ))
+#define CLK_DEBE0_MOD_OFF 	(~(CLK_DEBE0_MOD_ON 	))
+#define CLK_DEBE0_DRAM_OFF	(~(CLK_DEBE0_DRAM_ON	))
+#define CLK_DEBE1_AHB_OFF	(~(CLK_DEBE1_AHB_ON	    ))
+#define CLK_DEBE1_MOD_OFF 	(~(CLK_DEBE1_MOD_ON 	))
+#define CLK_DEBE1_DRAM_OFF	(~(CLK_DEBE1_DRAM_ON	))
+#define CLK_DEFE0_AHB_OFF	(~(CLK_DEFE0_AHB_ON	    ))
+#define CLK_DEFE0_MOD_OFF 	(~(CLK_DEFE0_MOD_ON 	))
+#define CLK_DEFE0_DRAM_OFF	(~(CLK_DEFE0_DRAM_ON	))
+#define CLK_DEFE1_AHB_OFF	(~(CLK_DEFE1_AHB_ON	    ))
+#define CLK_DEFE1_MOD_OFF 	(~(CLK_DEFE1_MOD_ON 	))
+#define CLK_DEFE1_DRAM_OFF	(~(CLK_DEFE1_DRAM_ON	))
+#define CLK_LCDC0_AHB_OFF	(~(CLK_LCDC0_AHB_ON	    ))
+#define CLK_LCDC0_MOD0_OFF  (~(CLK_LCDC0_MOD0_ON  	))
+#define CLK_LCDC0_MOD1_OFF  (~(CLK_LCDC0_MOD1_ON  	))
+#define CLK_LCDC1_AHB_OFF   (~(CLK_LCDC1_AHB_ON     ))
+#define CLK_LCDC1_MOD0_OFF  (~(CLK_LCDC1_MOD0_ON  	))
+#define CLK_LCDC1_MOD1_OFF  (~(CLK_LCDC1_MOD1_ON  	))
+#define CLK_TVENC0_AHB_OFF	(~(CLK_TVENC0_AHB_ON	))
+#define CLK_TVENC1_AHB_OFF 	(~(CLK_TVENC1_AHB_ON 	))
+#define CLK_HDMI_AHB_OFF    (~(CLK_HDMI_AHB_ON		))
+#define CLK_HDMI_MOD_OFF 	(~(CLK_HDMI_MOD_ON 	    ))
+//#define CLK_LVDS_MOD_OFF 	(~(CLK_LVDS_MOD_ON 		))
+
+__hdle h_debe0ahbclk,h_debe0mclk,h_debe0dramclk;
+__hdle h_debe1ahbclk,h_debe1mclk,h_debe1dramclk;
+__hdle h_defe0ahbclk,h_defe0mclk,h_defe0dramclk;
+__hdle h_defe1ahbclk,h_defe1mclk,h_defe1dramclk;
+__hdle h_tvenc0ahbclk;
+__hdle h_tvenc1ahbclk;
+__hdle h_lcd0ahbclk,h_lcd0ch0mclk0,h_lcd0ch1mclk1,h_lcd0ch1mclk2;
+__hdle h_lcd1ahbclk,h_lcd1ch0mclk0,h_lcd1ch1mclk1,h_lcd1ch1mclk2;
+__hdle h_lvdsmclk;	//only for reset
+__hdle h_hdmiahbclk,h_hdmimclk;
+
+__u32 g_clk_status = 0x0;
+
+#define RESET_OSAL
+
+extern __disp_dev_t         gdisp;
+extern __panel_para_t		gpanel_info[2];
+
+__disp_clk_tab clk_tab = //record tv/vga/hdmi mode clock requirement
+{
+//LCDx_CH1_CLK2, CLK2/CLK1,    HDMI_CLK,	   PLL_CLK	 ,     PLLX2 req	  //	TV_VGA_MODE 		//INDEX, FOLLOW enum order
+	//TV mode and HDMI mode
+   {{27000000	  ,	2	    , 	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_480I 			        //0x0
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_576I 			        //0x1
+	{54000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_480P 			        //0x2
+	{54000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_576P 			        //0x3
+	{74250000	  ,	1	    ,	74250000,		297000000	,	0	},	 //    DISP_TV_MOD_720P_50HZ		        //0x4
+	{74250000	  ,	1	    ,	74250000,		297000000	,	0	},	 //    DISP_TV_MOD_720P_60HZ		        //0x5
+	{74250000	  ,	1	    ,	74250000,		297000000	,	0	},	 //    DISP_TV_MOD_1080I_50HZ	        //0x6
+	{74250000	  ,	1	    ,	74250000,		297000000	,	0	},	 //    DISP_TV_MOD_1080I_60HZ	        //0x7
+	{74250000	  ,	1	    ,	74250000,		297000000	,	0	},	 //    DISP_TV_MOD_1080P_24HZ	        //0x8
+	{148500000	  ,	1	    ,  148500000, 		297000000	,	0	},	 //    DISP_TV_MOD_1080P_50HZ	        //0x9
+	{148500000	  ,	1	    ,  148500000, 		297000000	,	0	},	 //    DISP_TV_MOD_1080P_60HZ	        //0xa
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_PAL			        //0xb
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_PAL_SVIDEO	        //0xc
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved  //0xd
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_NTSC 			        //0xe
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_NTSC_SVIDEO	        //0xf
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved    //0x10
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_PAL_M			        //0x11
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_PAL_M_SVIDEO 	        //0x12
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved   //0x13
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_PAL_NC		        //0x14
+	{27000000	  ,	2	    ,	27000000,		270000000	,	0	},	 //    DISP_TV_MOD_PAL_NC_SVIDEO	        //0x15
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved  //0x16
+	{148500000	  ,	1	    ,  148500000, 		297000000	,	0	},	 //    DISP_TV_MOD_1080P_24HZ_3D_FP    //0x17
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved 					        //0x18
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved 					        //0x19
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved 					        //0x1a
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved 					        //0x1b
+	{		0	  ,	1	    ,	       0,		        0	,	0	},	 //    reserved 					        //0x1c
+	{		0	  ,	1	    ,	       0,		        0	,	0	}},  //    reserved 					        //0x1d
+	//VGA mode
+   {{147000000    , 1      ,   147000000, 		294000000   ,   0   },   //    DISP_VGA_H1680_V1050                // 0X0
+	{106800000    , 1      ,   106800000, 		267000000   ,   1   },   //    DISP_VGA_H1440_V900                  // 0X1
+	{ 86000000    , 1      ,	86000000,  		258000000   ,   0   },   //    DISP_VGA_H1360_V768                  // 0X2
+	{108000000    , 1      ,   108000000, 		270000000   ,   1   },   //    DISP_VGA_H1280_V1024                // 0X3
+	{ 65250000    , 1      ,	65250000,  		261000000   ,   0   },   //    DISP_VGA_H1024_V768                  // 0X4
+	{ 39857143    , 1      ,	39857143,  		279000000 	,   0   },   //    DISP_VGA_H800_V600                   // 0X5
+	{ 25090909    , 1      ,	25090909,  		276000000 	,   0   },   //    DISP_VGA_H640_V480                   // 0X6
+	{        0    , 1      ,	       0,  		        0   ,   0   },   //    DISP_VGA_H1440_V900_RB           // 0X7
+ 	{        0    , 1      ,	       0,  		        0   ,   0   },   //    DISP_VGA_H1680_V1050_RB         // 0X8
+	{138000000    , 1      ,   138000000, 		276000000   ,   0   },   //    DISP_VGA_H1920_V1080_RB         // 0X9
+	{148500000    , 1      ,   148500000, 		297000000   ,   0   },   //    DISP_VGA_H1920_V1080              // 0xa
+	{ 74250000	  ,	1	   ,    74250000, 		297000000	,	0	}}	 //    DISP_VGA_H1280_V720                // 0xb
+	};
+
+__s32 image_clk_init(__u32 sel)
+{
+	__u32 dram_pll;
+
+	if(sel == 0)
+	{
+		h_debe0ahbclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_DEBE0);
+		h_debe0mclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_DEBE0);
+		h_debe0dramclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_SDRAM_DEBE0);
+
+		//NEW OSAL_clk reset
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_debe0mclk, RST_INVAILD);
+#endif
+		OSAL_CCMU_SetMclkSrc(h_debe0mclk, AW_SYS_CLK_PLL5P);	//FIX CONNECT TO DRAM PLL
+
+		dram_pll = OSAL_CCMU_GetSrcFreq(AW_SYS_CLK_PLL5P);
+		if(dram_pll < 300000000)
+		{
+			OSAL_CCMU_SetMclkDiv(h_debe0mclk, 1);
+		}
+		else
+		{
+			OSAL_CCMU_SetMclkDiv(h_debe0mclk, 2);
+		}
+		OSAL_CCMU_MclkOnOff(h_debe0ahbclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_debe0dramclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_debe0dramclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_debe0mclk, CLK_ON);
+
+		g_clk_status |= (CLK_DEBE0_AHB_ON | CLK_DEBE0_MOD_ON);
+	}
+	else if(sel == 1)
+	{
+		h_debe1ahbclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_DEBE1);
+		h_debe1mclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_DEBE1);
+		h_debe1dramclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_SDRAM_DEBE1);
+#ifdef RESET_OSAL
+
+        OSAL_CCMU_MclkReset(h_debe1mclk, RST_INVAILD);
+#endif
+        OSAL_CCMU_SetMclkSrc(h_debe1mclk, AW_SYS_CLK_PLL5P);	//FIX CONNECT TO DRAM PLL
+
+		dram_pll = OSAL_CCMU_GetSrcFreq(AW_SYS_CLK_PLL5P);
+		if(dram_pll < 300000000)
+		{
+			OSAL_CCMU_SetMclkDiv(h_debe1mclk, 1);
+		}
+		else
+		{
+			OSAL_CCMU_SetMclkDiv(h_debe1mclk, 2);
+		}
+
+		OSAL_CCMU_MclkOnOff(h_debe1ahbclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_debe1dramclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_debe1dramclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_debe1mclk, CLK_ON);
+
+		g_clk_status |= (CLK_DEBE1_AHB_ON | CLK_DEBE1_MOD_ON);
+	}
+	return DIS_SUCCESS;
+
+}
+
+
+__s32 image_clk_exit(__u32 sel)
+{
+	if(sel == 0)
+	{
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_debe0mclk, RST_VAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_debe0ahbclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_debe0dramclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_debe0mclk, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_debe0ahbclk);
+		OSAL_CCMU_CloseMclk(h_debe0dramclk);
+		OSAL_CCMU_CloseMclk(h_debe0mclk);
+
+		g_clk_status &= (CLK_DEBE0_AHB_OFF & CLK_DEBE0_MOD_OFF & CLK_DEBE0_DRAM_OFF);
+	}
+	else if(sel == 1)
+	{
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_debe1mclk, RST_VAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_debe1ahbclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_debe1dramclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_debe1mclk, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_debe1ahbclk);
+		OSAL_CCMU_CloseMclk(h_debe1dramclk);
+		OSAL_CCMU_CloseMclk(h_debe1mclk);
+
+		g_clk_status &= (CLK_DEBE1_AHB_OFF & CLK_DEBE1_MOD_OFF & CLK_DEBE1_DRAM_OFF);
+	}
+
+	return DIS_SUCCESS;
+}
+
+__s32 image_clk_on(__u32 sel)
+{
+	if(sel == 0)
+	{
+		//need to comfirm : REGisters can be accessed if  be_mclk was close.
+		OSAL_CCMU_MclkOnOff(h_debe0dramclk, CLK_ON);
+		g_clk_status |= CLK_DEBE0_DRAM_ON;
+	}
+	else if(sel == 1)
+	{
+		OSAL_CCMU_MclkOnOff(h_debe1dramclk, CLK_ON);
+		g_clk_status |= CLK_DEBE1_DRAM_ON;
+	}
+	return	DIS_SUCCESS;
+}
+
+__s32 image_clk_off(__u32 sel)
+{
+	if(sel == 0)
+	{
+		OSAL_CCMU_MclkOnOff(h_debe0dramclk, CLK_OFF);
+		g_clk_status &= CLK_DEBE0_DRAM_OFF;
+	}
+	else if(sel == 1)
+	{
+		OSAL_CCMU_MclkOnOff(h_debe1dramclk, CLK_OFF);
+		g_clk_status &= CLK_DEBE1_DRAM_OFF;
+	}
+	return	DIS_SUCCESS;
+}
+
+__s32 scaler_clk_init(__u32 sel)
+{
+	if(sel == 0)
+	{
+		h_defe0ahbclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_DEFE0);
+		h_defe0dramclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_SDRAM_DEFE0);
+		h_defe0mclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_DEFE0);
+#ifdef RESET_OSAL
+
+		OSAL_CCMU_MclkReset(h_defe0mclk, RST_INVAILD);
+#endif
+
+		OSAL_CCMU_SetMclkSrc(h_defe0mclk, AW_SYS_CLK_PLL3);	//FIX CONNECT TO VIDEO PLL0
+		OSAL_CCMU_SetMclkDiv(h_defe0mclk, 1);
+
+		OSAL_CCMU_MclkOnOff(h_defe0ahbclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe0mclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe0mclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe0dramclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe0dramclk, CLK_OFF);
+
+		g_clk_status |= CLK_DEFE0_AHB_ON;
+	}
+	else if(sel == 1)
+	{
+		h_defe1ahbclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_DEFE1);
+		h_defe1dramclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_SDRAM_DEFE1);
+		h_defe1mclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_DEFE1);
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_defe1mclk, RST_INVAILD);
+#endif
+		OSAL_CCMU_SetMclkSrc(h_defe1mclk, AW_SYS_CLK_PLL3);	//FIX CONNECT TO VIDEO PLL0
+		OSAL_CCMU_SetMclkDiv(h_defe1mclk, 1);
+
+		OSAL_CCMU_MclkOnOff(h_defe1ahbclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe1mclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe1mclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe1dramclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe1dramclk, CLK_OFF);
+
+		g_clk_status |= CLK_DEFE1_AHB_ON;
+	}
+		return DIS_SUCCESS;
+}
+
+__s32 scaler_clk_exit(__u32 sel)
+{
+	if(sel == 0)
+	{
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_defe0mclk, RST_VAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_defe0ahbclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe0dramclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe0mclk, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_defe0ahbclk);
+		OSAL_CCMU_CloseMclk(h_defe0dramclk);
+		OSAL_CCMU_CloseMclk(h_defe0mclk);
+
+		g_clk_status &= (CLK_DEFE0_AHB_OFF & CLK_DEFE0_MOD_OFF & CLK_DEFE0_DRAM_OFF);
+
+	}
+	else if(sel == 1)
+	{
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_defe1mclk, RST_VAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_defe1ahbclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe1dramclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe1mclk, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_defe1ahbclk);
+		OSAL_CCMU_CloseMclk(h_defe1dramclk);
+		OSAL_CCMU_CloseMclk(h_defe1mclk);
+
+		g_clk_status &= (CLK_DEFE1_AHB_OFF & CLK_DEFE1_MOD_OFF & CLK_DEFE1_DRAM_OFF);
+	}
+
+	return DIS_SUCCESS;
+}
+
+__s32 scaler_clk_on(__u32 sel)
+{
+	if(sel == 0)
+	{
+		OSAL_CCMU_MclkOnOff(h_defe0mclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe0dramclk, CLK_ON);
+
+		g_clk_status |= ( CLK_DEFE0_MOD_ON | CLK_DEFE0_DRAM_ON);
+	}
+	else if(sel == 1)
+	{
+		OSAL_CCMU_MclkOnOff(h_defe1mclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_defe1dramclk, CLK_ON);
+
+		g_clk_status |= ( CLK_DEFE1_MOD_ON | CLK_DEFE1_DRAM_ON);
+	}
+	return	DIS_SUCCESS;
+
+}
+
+__s32 scaler_clk_off(__u32 sel)
+{
+	if(sel == 0)
+	{
+		OSAL_CCMU_MclkOnOff(h_defe0mclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe0dramclk, CLK_OFF);
+
+		g_clk_status &= ( CLK_DEFE0_MOD_OFF & CLK_DEFE0_DRAM_OFF);
+	}
+	else if(sel == 1)
+	{
+		OSAL_CCMU_MclkOnOff(h_defe1mclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_defe1dramclk, CLK_OFF);
+
+		g_clk_status &= ( CLK_DEFE1_MOD_OFF & CLK_DEFE1_DRAM_OFF);
+	}
+	return	DIS_SUCCESS;
+
+}
+
+__s32 lcdc_clk_init(__u32 sel)
+{
+	if(sel == 0)
+	{
+		h_lcd0ahbclk   = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_LCD0);
+		h_lcd0ch0mclk0 = OSAL_CCMU_OpenMclk(AW_MOD_CLK_LCD0CH0);
+		h_lcd0ch1mclk1 = OSAL_CCMU_OpenMclk(AW_MOD_CLK_LCD0CH1_S1);
+		h_lcd0ch1mclk2 = OSAL_CCMU_OpenMclk(AW_MOD_CLK_LCD0CH1_S2);
+
+		OSAL_CCMU_SetMclkSrc(h_lcd0ch0mclk0, AW_SYS_CLK_PLL3);	//Default to Video Pll0
+		OSAL_CCMU_SetMclkSrc(h_lcd0ch1mclk1, AW_SYS_CLK_PLL3);	//Default to Video Pll0
+		//OSAL_CCMU_SetMclkSrc(h_lcd0ch1mclk2, AW_SYS_CLK_PLL3);	//Default to Video Pll0
+		OSAL_CCMU_SetMclkDiv(h_lcd0ch1mclk2, 10);
+		OSAL_CCMU_SetMclkDiv(h_lcd0ch1mclk1, 10);
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_lcd0ch0mclk0, RST_INVAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_lcd0ahbclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch0mclk0, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch0mclk0, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk1, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk1, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk2, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk2, CLK_OFF);
+
+		g_clk_status |= CLK_LCDC0_AHB_ON;
+	}
+	else if(sel == 1)
+	{
+		h_lcd1ahbclk   = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_LCD1);
+		h_lcd1ch0mclk0 = OSAL_CCMU_OpenMclk(AW_MOD_CLK_LCD1CH0);
+		h_lcd1ch1mclk1 = OSAL_CCMU_OpenMclk(AW_MOD_CLK_LCD1CH1_S1);
+		h_lcd1ch1mclk2 = OSAL_CCMU_OpenMclk(AW_MOD_CLK_LCD1CH1_S2);
+
+		OSAL_CCMU_SetMclkSrc(h_lcd1ch0mclk0, AW_SYS_CLK_PLL3);	//Default to Video Pll0
+		OSAL_CCMU_SetMclkSrc(h_lcd1ch1mclk1, AW_SYS_CLK_PLL3);	//Default to Video Pll0
+		//OSAL_CCMU_SetMclkSrc(h_lcd1ch1mclk2, AW_SYS_CLK_PLL3);	//Default to Video Pll0
+		OSAL_CCMU_SetMclkDiv(h_lcd1ch1mclk2, 10);
+		OSAL_CCMU_SetMclkDiv(h_lcd1ch1mclk1, 10);
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_lcd1ch0mclk0, RST_INVAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_lcd1ahbclk, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch0mclk0, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch0mclk0, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk1, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk1, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk2, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk2, CLK_OFF);
+
+		g_clk_status |= CLK_LCDC1_AHB_ON;
+	}
+	return DIS_SUCCESS;
+
+}
+
+__s32 lcdc_clk_exit(__u32 sel)
+{
+	if(sel == 0)
+	{
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_lcd0ch0mclk0, RST_VAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_lcd0ahbclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch0mclk0, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk1, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk2, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_lcd0ahbclk);
+		OSAL_CCMU_CloseMclk(h_lcd0ch0mclk0);
+		OSAL_CCMU_CloseMclk(h_lcd0ch1mclk1);
+		OSAL_CCMU_CloseMclk(h_lcd0ch1mclk2);
+
+		g_clk_status &= (CLK_LCDC0_AHB_OFF & CLK_LCDC0_MOD0_OFF & CLK_LCDC0_MOD1_OFF);
+	}
+	else if(sel == 1)
+	{
+#ifdef RESET_OSAL
+		OSAL_CCMU_MclkReset(h_lcd1ch0mclk0, RST_VAILD);
+#endif
+		OSAL_CCMU_MclkOnOff(h_lcd1ahbclk, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch0mclk0, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk1, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk2, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_lcd1ahbclk);
+		OSAL_CCMU_CloseMclk(h_lcd1ch0mclk0);
+		OSAL_CCMU_CloseMclk(h_lcd1ch1mclk1);
+		OSAL_CCMU_CloseMclk(h_lcd1ch1mclk2);
+
+		g_clk_status &= (CLK_LCDC1_AHB_OFF & CLK_LCDC1_MOD0_OFF & CLK_LCDC1_MOD1_OFF);
+	}
+	return DIS_SUCCESS;
+}
+
+__s32 lcdc_clk_on(__u32 sel)
+{
+	if(sel == 0)
+	{
+		OSAL_CCMU_MclkOnOff(h_lcd0ch0mclk0, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk1, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk2, CLK_ON);
+
+		g_clk_status |= (CLK_LCDC0_MOD0_ON | CLK_LCDC0_MOD1_ON);
+	}
+	else if(sel == 1)
+	{
+		OSAL_CCMU_MclkOnOff(h_lcd1ch0mclk0, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk1, CLK_ON);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk2, CLK_ON);
+
+		g_clk_status |= (CLK_LCDC1_MOD0_ON | CLK_LCDC1_MOD1_ON);
+	}
+	return	DIS_SUCCESS;
+
+}
+
+__s32 lcdc_clk_off(__u32 sel)
+{
+	if(sel == 0)
+	{
+		OSAL_CCMU_MclkOnOff(h_lcd0ch0mclk0, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk1, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk2, CLK_OFF);
+
+		g_clk_status &= (CLK_LCDC0_MOD0_OFF & CLK_LCDC0_MOD1_OFF);
+	}
+	else if(sel == 1)
+	{
+		OSAL_CCMU_MclkOnOff(h_lcd1ch0mclk0, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk1, CLK_OFF);
+		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk2, CLK_OFF);
+
+		g_clk_status &= (CLK_LCDC1_MOD0_OFF & CLK_LCDC1_MOD1_OFF);
+	}
+	return	DIS_SUCCESS;
+
+}
+
+__s32 tve_clk_init(__u32 sel)
+{
+	if(sel == 0)
+	{
+		h_tvenc0ahbclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_TVE0);
+		OSAL_CCMU_MclkOnOff(h_tvenc0ahbclk, CLK_ON);
+
+		g_clk_status |= CLK_TVENC0_AHB_ON;
+	}
+	else if(sel == 1)
+	{
+		h_tvenc1ahbclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_TVE1);
+		OSAL_CCMU_MclkOnOff(h_tvenc1ahbclk, CLK_ON);
+
+		g_clk_status |= CLK_TVENC1_AHB_ON;
+	}
+	return DIS_SUCCESS;
+}
+
+
+__s32 tve_clk_exit(__u32 sel)
+{
+	if(sel == 0)
+	{
+		OSAL_CCMU_MclkOnOff(h_tvenc0ahbclk, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_tvenc0ahbclk);
+
+		g_clk_status &= CLK_TVENC0_AHB_OFF;
+	}
+	else if(sel == 1)
+	{
+		OSAL_CCMU_MclkOnOff(h_tvenc1ahbclk, CLK_OFF);
+		OSAL_CCMU_CloseMclk(h_tvenc1ahbclk);
+
+		g_clk_status &= CLK_TVENC1_AHB_OFF;
+	}
+	return DIS_SUCCESS;
+}
+
+__s32 tve_clk_on(__u32 sel)
+{
+	return DIS_SUCCESS;
+}
+
+__s32 tve_clk_off(__u32 sel)
+{
+	return DIS_SUCCESS;
+}
+
+__s32 hdmi_clk_init(void)
+{
+	h_hdmiahbclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_AHB_HDMI);
+	h_hdmimclk   = OSAL_CCMU_OpenMclk(AW_MOD_CLK_HDMI);
+#ifdef RESET_OSAL
+	OSAL_CCMU_MclkReset(h_hdmimclk, RST_INVAILD);
+#endif
+	OSAL_CCMU_SetMclkSrc(h_hdmimclk, AW_SYS_CLK_PLL3);
+	OSAL_CCMU_SetMclkDiv(h_hdmimclk, 1);
+
+	OSAL_CCMU_MclkOnOff(h_hdmiahbclk, CLK_ON);
+	g_clk_status |= CLK_HDMI_AHB_ON;
+
+	return DIS_SUCCESS;
+}
+
+__s32 hdmi_clk_exit(void)
+{
+#ifdef RESET_OSAL
+	OSAL_CCMU_MclkReset(h_hdmimclk, RST_VAILD);
+#endif
+	OSAL_CCMU_MclkOnOff(h_hdmimclk, CLK_OFF);
+	OSAL_CCMU_MclkOnOff(h_hdmiahbclk, CLK_OFF);
+	OSAL_CCMU_CloseMclk(h_hdmiahbclk);
+	OSAL_CCMU_CloseMclk(h_hdmimclk);
+
+	g_clk_status &= (CLK_HDMI_AHB_OFF & CLK_HDMI_MOD_OFF);
+
+	return DIS_SUCCESS;
+}
+
+__s32 hdmi_clk_on(void)
+{
+	OSAL_CCMU_MclkOnOff(h_hdmimclk, CLK_ON);
+
+	g_clk_status |= CLK_HDMI_MOD_ON;
+
+	return DIS_SUCCESS;
+}
+
+__s32 hdmi_clk_off(void)
+{
+	OSAL_CCMU_MclkOnOff(h_hdmimclk, CLK_OFF);
+
+	g_clk_status &= CLK_HDMI_MOD_OFF;
+
+	return DIS_SUCCESS;
+}
+
+__s32 lvds_clk_init(void)
+{
+	h_lvdsmclk = OSAL_CCMU_OpenMclk(AW_MOD_CLK_LVDS);
+#ifdef RESET_OSAL
+	OSAL_CCMU_MclkReset(h_lvdsmclk, RST_INVAILD);
+#endif
+	return DIS_SUCCESS;
+}
+
+__s32 lvds_clk_exit(void)
+{
+#ifdef RESET_OSAL
+	OSAL_CCMU_MclkReset(h_lvdsmclk, RST_VAILD);
+#endif
+	OSAL_CCMU_CloseMclk(AW_MOD_CLK_LVDS);
+
+	return DIS_SUCCESS;
+}
+
+__s32 lvds_clk_on(void)
+{
+	return DIS_SUCCESS;
+}
+
+__s32 lvds_clk_off(void)
+{
+	return DIS_SUCCESS;
+}
+
+__s32 disp_pll_init(void)
+{
+	OSAL_CCMU_SetSrcFreq(AW_SYS_CLK_PLL3, 297000000);
+	OSAL_CCMU_SetSrcFreq(AW_SYS_CLK_PLL7, 297000000);
+
+	return DIS_SUCCESS;
+}
+
+/*
+*********************************************************************************************************
+*							LCD_PLL_Calc
+*
+* Description  :  Calculate PLL frequence and divider depend on all kinds of lcd panel
+*
+* Arguments   :  sel	<display channel>
+*                            info   <panel information>
+*                            divider   <divider pointer>
+*
+* Returns         : success	<frequence of pll >
+*                            fail               <-1>
+*
+* Note               : 1.support hv/cpu/ttl panels which pixel frequence between 2MHz~297MHz
+*                            2.support all lvds panels, when pll can't reach  (pixel clk x7),
+*			    set pll to 381MHz(pllx1), which will depress the frame rate.
+*********************************************************************************************************
+*/
+static __s32 LCD_PLL_Calc(__u32 sel, __panel_para_t * info, __u32 *divider)
+{
+	__u32 lcd_dclk_freq;	//Hz
+	__s32 pll_freq = -1;
+
+	lcd_dclk_freq = info->lcd_dclk_freq * 1000000;
+	if (info->lcd_if == 0 || info->lcd_if == 1 ||info->lcd_if == 2)// hv panel , CPU panel and	ttl panel
+	{
+		if (lcd_dclk_freq > 2000000 && lcd_dclk_freq <= 297000000) //MHz
+		{
+			*divider = 297000000/(lcd_dclk_freq);	//divider for dclk in tcon0
+			pll_freq = lcd_dclk_freq * (*divider);
+		}
+		else
+		{
+			return -1;
+		}
+
+	}
+	else if(info->lcd_if == 3) // lvds panel
+	{
+	    __u32 clk_max;
+
+	    if(OSAL_sw_get_ic_ver() > 0xA)
+	    {
+	        clk_max = 150000000;
+	    }
+	    else
+	    {
+	        clk_max = 108000000;//pixel clock can't be larger than 108MHz, limited by Video pll frequency
+	    }
+		if(lcd_dclk_freq > clk_max)
+		{
+			lcd_dclk_freq = clk_max;
+		}
+
+		if (lcd_dclk_freq > 4000000) //pixel clk
+		{
+			pll_freq = lcd_dclk_freq * 7;
+			*divider = 7;
+		}
+		else
+		{
+			return -1;
+		}
+	}
+	return pll_freq;
+}
+
+/*
+*********************************************************************************************************
+*							disp_pll_assign
+*
+* Description  :  Select a video pll for the display device under configuration by specific rules
+*
+* Arguments   :  sel	<display channel>
+*                            pll_clk   <required pll frequency of this display device >
+*
+* Returns         : success	<0>
+*                            fail               <-1>
+*
+* Note               : ASSIGNMENT RULES
+*                            RULE1. video pll0(1x) work between [250,300]MHz, when no lcdc using video pll0 and required freq is in [250,300]MHz, choose video pll0;
+*                            RULE2. when video pll0 used by another lcdc, but running frequency is equal to required frequency, choose video pll0;
+*                            RULE3. when video pll0 used by another lcdc, and running frequency isNOT equal to required frequency, choose video pll1;
+*                           	CONDICTION CAN'T BE HANDLE
+*                            1.two lvds panel are both require a pll freq outside [250,300], and pll freq are different, the second panel will fail to assign.
+*
+*********************************************************************************************************
+*/
+static __s32 disp_pll_assign(__u32 sel, __u32 pll_clk)
+{
+	__u32 another_lcdc, another_pll_use_status;
+	another_lcdc = (sel == 0)? 1:0;
+	another_pll_use_status = gdisp.screen[another_lcdc].pll_use_status;
+
+	if((pll_clk >= 250000000 && pll_clk <= 300000000) || (pll_clk >= 500000000 && pll_clk <= 600000000))
+	{
+		if(!(another_pll_use_status & VIDEO_PLL0_USED)) //No lcdc use PLL0
+		{
+			return 0;	//Video pll0 assign
+		}
+		else if(OSAL_CCMU_GetSrcFreq(AW_SYS_CLK_PLL3) == pll_clk)	//PLL0 used by another lcdc, but freq equal to what you want to set
+		{
+			return 0;	//Video pll0 assign
+		}
+		else if(!(another_pll_use_status & VIDEO_PLL1_USED)) //Normally wont use pll0 and pll1 at the same time, unless sth wrong
+		{
+			return 1;	//Video pll1 assign
+		}
+		else	//Normally	wont jump to here
+		{
+			DE_WRN("Can't assign PLL for this device\n");
+			return -1;	//fail to assign
+		}
+	}
+	else if(pll_clk > (381000000 * 2))
+	{
+	    if((OSAL_sw_get_ic_ver() > 0xA) && (pll_clk <= 1200000000))
+	    {
+	        return 2;//sata pll
+	    }
+	    else
+	    {
+	        DE_WRN("Can't assign PLL for this device\n");
+	        return -1;
+	    }
+	}
+	else
+	{
+	    if(OSAL_sw_get_ic_ver() > 0xA)
+	    {
+	        if(pll_clk <= 381000000)
+	        {
+        		if(!(another_pll_use_status & VIDEO_PLL1_USED)) //No lcdc use PLL0
+        		{
+        			return 1;	//Video pll1 assign
+        		}
+        		else if(OSAL_CCMU_GetSrcFreq(AW_SYS_CLK_PLL7) == pll_clk)	//PLL1 used by another lcdc, but freq equal to what you want to set
+        		{
+        			return 1;	//Video pll1 assign
+        		}
+        		else
+        		{
+        			return 2;
+        		}
+	        }
+	        else
+	        {
+	            return 2;
+	        }
+	    }
+	    else
+	    {
+    		if(!(another_pll_use_status & VIDEO_PLL1_USED)) //No lcdc use PLL0
+    		{
+    			return 1;	//Video pll1 assign
+    		}
+    		else if(OSAL_CCMU_GetSrcFreq(AW_SYS_CLK_PLL7) == pll_clk)	//PLL1 used by another lcdc, but freq equal to what you want to set
+    		{
+    			return 1;	//Video pll1 assign
+    		}
+    		else	// when both two devices need to set in PLL1, mostly wont work
+    		{
+    			DE_WRN("Can't assign PLL for this device\n");
+    			return -1;	//fail to assign
+    		}
+		}
+	}
+}
+
+
+/*
+*********************************************************************************************************
+*							disp_pll_set
+*
+* Description  :  Set clock control module
+*
+* Arguments   :  sel	<display channel>
+*                            videopll_sel   	<sel pll>
+*			pll_freq		<sel pll freq>
+*			tve_freq		<lcdx_ch1_clk2 freq>
+*			pre_scale		<lcdx_ch1_clk2/lcdx_ch1_ch1>
+*			lcd_clk_div	<lcd panel clk div>
+*			hdmi_freq		<hdmi module clk freq>
+*			pll_2x		<pll 2x required>
+*			type          	   	<display device type: tv/vga/hdmi/lcd>
+*
+* Returns         : success	<DIS_SUCCESS>
+*                            fail               <>
+*
+* Note               :  none
+
+*
+*********************************************************************************************************
+*/
+
+static __s32 disp_pll_set(__u32 sel, __s32 videopll_sel, __u32 pll_freq, __u32 tve_freq, __s32 pre_scale,
+					__u32 lcd_clk_div, __u32 hdmi_freq, __u32 pll_2x, __u32 type)
+{
+	__u32 videopll;
+	__hdle h_lcdmclk0, h_lcdmclk1, h_lcdmclk2;
+	__s32 pll_2x_req;
+	__u32 lcdmclk1_div, lcdmclk2_div, hdmiclk_div;
+
+	if(type == DISP_OUTPUT_TYPE_LCD)	//lcd panel
+	{
+	    if(videopll_sel == 2)//sata pll
+	    {
+	        videopll = AW_SYS_CLK_PLL7X2;
+	        pll_freq = ((pll_freq + 12000000)/ 24000000) * 24000000;
+	        OSAL_CCMU_SetSrcFreq(AW_SYS_CLK_PLL6, pll_freq);
+	    }
+	    else//video pll0 or video pll1
+	    {
+    		pll_2x_req = (pll_freq>381000000)?1:0;
+    		if(pll_2x_req)
+    		{
+    		    pll_freq /= 2;
+    		}
+
+	        //in 3M unit
+	    	pll_freq = (pll_freq + 1500000)/3000000;
+			pll_freq = pll_freq * 3000000;
+
+    		videopll = 	(videopll_sel == 0)?AW_SYS_CLK_PLL3:AW_SYS_CLK_PLL7;
+    		OSAL_CCMU_SetSrcFreq(videopll,pll_freq);
+    		if(pll_2x_req)
+    		{
+                videopll = (videopll == AW_SYS_CLK_PLL3)?AW_SYS_CLK_PLL3X2:AW_SYS_CLK_PLL7X2;
+    		}
+		}
+
+		if(gpanel_info[sel].tcon_index == 0)	//tcon0 drive lcd panel
+		{
+			h_lcdmclk0 = (sel == 0)?h_lcd0ch0mclk0 : h_lcd1ch0mclk0;
+			OSAL_CCMU_SetMclkSrc(h_lcdmclk0, videopll);
+			TCON0_set_dclk_div(sel,lcd_clk_div);
+		}
+		else									//tcon1 drive lcd panel
+		{
+			h_lcdmclk1 = (sel == 0)?h_lcd0ch1mclk1 : h_lcd1ch1mclk1;
+			h_lcdmclk2 = (sel == 0)?h_lcd0ch1mclk2 : h_lcd1ch1mclk2;
+			OSAL_CCMU_SetMclkSrc(h_lcdmclk2, videopll);
+			OSAL_CCMU_SetMclkSrc(h_lcdmclk1, videopll);
+			OSAL_CCMU_SetMclkDiv(h_lcdmclk2, lcd_clk_div);
+			OSAL_CCMU_SetMclkDiv(h_lcdmclk1, lcd_clk_div);
+		}
+	}
+	else //tv/vga/hdmi
+	{
+	    __u32 pll_freq_used;
+
+		pll_2x_req = pll_2x;
+		videopll = 	(videopll_sel == 0)?AW_SYS_CLK_PLL3:AW_SYS_CLK_PLL7;
+		OSAL_CCMU_SetSrcFreq(videopll,pll_freq);	//Set related Video Pll Frequency
+
+		videopll = 	(videopll_sel == 0)?
+			   		((pll_2x_req)?AW_SYS_CLK_PLL3X2: AW_SYS_CLK_PLL3):
+					((pll_2x_req)?AW_SYS_CLK_PLL7X2: AW_SYS_CLK_PLL7);
+
+		pll_freq_used = pll_freq * (pll_2x_req + 1);
+
+		lcdmclk2_div = (pll_freq_used + (tve_freq / 2)) / tve_freq;
+		lcdmclk1_div = lcdmclk2_div*pre_scale;
+		hdmiclk_div = (pll_freq_used + (hdmi_freq / 2)) / hdmi_freq;
+
+		h_lcdmclk1 = (sel == 0)?h_lcd0ch1mclk1 : h_lcd1ch1mclk1;
+		h_lcdmclk2 = (sel == 0)?h_lcd0ch1mclk2 : h_lcd1ch1mclk2;
+		OSAL_CCMU_SetMclkSrc(h_lcdmclk2, videopll);
+		OSAL_CCMU_SetMclkSrc(h_lcdmclk1, videopll);
+		OSAL_CCMU_SetMclkDiv(h_lcdmclk2, lcdmclk2_div);
+		OSAL_CCMU_SetMclkDiv(h_lcdmclk1, lcdmclk1_div);
+
+		if(type == DISP_OUTPUT_TYPE_HDMI && gdisp.screen[sel].hdmi_index == 0)	//hdmi internal mode
+		{
+			OSAL_CCMU_SetMclkSrc(h_hdmimclk, videopll);
+			OSAL_CCMU_SetMclkDiv(h_hdmimclk, hdmiclk_div);
+
+            if(gdisp.init_para.hdmi_set_pll != NULL)
+            {
+    			if((videopll == AW_SYS_CLK_PLL3X2) || (videopll == AW_SYS_CLK_PLL3))
+    			{
+    			    gdisp.init_para.hdmi_set_pll(0, pll_freq);
+    			}
+    			else
+    			{
+    			    gdisp.init_para.hdmi_set_pll(1, pll_freq);
+    			}
+			}
+			else
+			{
+			    DE_WRN("gdisp.init_para.hdmi_set_pll is NULL\n");
+			}
+		}
+	}
+
+	return DIS_SUCCESS;
+}
+
+/*
+*********************************************************************************************************
+*							disp_clk_cfg
+*
+* Description  :  Config PLL and mclk depend on all kinds of display devices
+*
+* Arguments   :  sel	<display channel>
+*                            type   <display device type: tv/vga/hdmi/lcd>
+*                            mode   <display mode of tv/vga/hdmi: 480i, ntsc...>
+*
+* Returns         : success	<DIS_SUCCESS>
+*                            fail               <DIS_FAIL>
+*
+* Note               : None.
+*
+*********************************************************************************************************
+*/
+__s32 disp_clk_cfg(__u32 sel, __u32 type, __u8 mode)
+{	__u32 pll_freq = 297000000, tve_freq = 27000000;
+	__u32 hdmi_freq = 74250000;
+	__s32 videopll_sel, pre_scale = 1;
+	__u32 lcd_clk_div = 0;
+	__u32 pll_2x = 0;
+
+	if(type == DISP_OUTPUT_TYPE_TV || type == DISP_OUTPUT_TYPE_HDMI)
+	{
+		pll_freq = clk_tab.tv_clk_tab[mode].pll_clk;
+		tve_freq = clk_tab.tv_clk_tab[mode].tve_clk;
+		pre_scale = clk_tab.tv_clk_tab[mode].pre_scale;
+		hdmi_freq = clk_tab.tv_clk_tab[mode].hdmi_clk;
+		pll_2x = clk_tab.tv_clk_tab[mode].pll_2x;
+	}
+	else if(type == DISP_OUTPUT_TYPE_VGA)
+	{
+		pll_freq = clk_tab.vga_clk_tab[mode].pll_clk;
+		tve_freq = clk_tab.vga_clk_tab[mode].tve_clk;
+		pre_scale = clk_tab.vga_clk_tab[mode].pre_scale;
+		pll_2x = clk_tab.vga_clk_tab[mode].pll_2x;
+	}
+	else if(type == DISP_OUTPUT_TYPE_LCD)
+	{
+		pll_freq = LCD_PLL_Calc(sel, (__panel_para_t*)&gpanel_info[sel], &lcd_clk_div);
+		pre_scale = 1;
+	}
+	else
+	{
+		return DIS_SUCCESS;
+	}
+
+	if ( (videopll_sel = disp_pll_assign(sel, pll_freq)) == -1)
+	{
+		return DIS_FAIL;
+	}
+
+	disp_pll_set(sel, videopll_sel, pll_freq, tve_freq, pre_scale, lcd_clk_div, hdmi_freq, pll_2x, type);
+	if(videopll_sel == 0)
+	{
+	    gdisp.screen[sel].pll_use_status |= VIDEO_PLL0_USED;
+	}
+	else if(videopll_sel == 1)
+	{
+	    gdisp.screen[sel].pll_use_status |= VIDEO_PLL1_USED;
+	}
+
+	return DIS_SUCCESS;
+}
+
+//type==1: open ahb clk and image mclk
+//type==2: open all clk except ahb clk and image mclk
+//type==3: open all clk
+__s32 BSP_disp_clk_on(__u32 type)
+{
+    if(type & 1)
+    {
+//AHB CLK
+    	if((g_clk_status & CLK_DEFE0_AHB_ON) == CLK_DEFE0_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe0ahbclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEFE1_AHB_ON) == CLK_DEFE1_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe1ahbclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEBE0_AHB_ON) == CLK_DEBE0_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe0ahbclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEBE1_AHB_ON) == CLK_DEBE1_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe1ahbclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_LCDC0_AHB_ON) == CLK_LCDC0_AHB_ON)	//OK?? REG wont clear?
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd0ahbclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_LCDC1_AHB_ON) == CLK_LCDC1_AHB_ON)	//OK?? REG wont clear?
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd1ahbclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_HDMI_AHB_ON) == CLK_HDMI_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_hdmiahbclk, CLK_ON);
+    	}
+    	//OSAL_CCMU_MclkOnOff(h_tveahbclk, CLK_ON);
+
+//MODULE CLK
+    	if((g_clk_status & CLK_DEBE0_MOD_ON) == CLK_DEBE0_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe0mclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEBE1_MOD_ON) == CLK_DEBE1_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe1mclk, CLK_ON);
+    	}
+	}
+
+	if(type & 2)
+	{
+//DRAM CLK
+    	if((g_clk_status & CLK_DEFE0_DRAM_ON) == CLK_DEFE0_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe0dramclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEFE1_DRAM_ON) == CLK_DEFE1_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe1dramclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEBE0_DRAM_ON) == CLK_DEBE0_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe0dramclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEBE1_DRAM_ON) == CLK_DEBE1_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe1dramclk, CLK_ON);
+    	}
+
+//MODULE CLK
+    	if((g_clk_status & CLK_DEFE0_MOD_ON) == CLK_DEFE0_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe0mclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_DEFE1_MOD_ON) == CLK_DEFE1_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe1mclk, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_LCDC0_MOD0_ON) == CLK_LCDC0_MOD0_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd0ch0mclk0, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_LCDC0_MOD1_ON) == CLK_LCDC0_MOD1_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk1, CLK_ON);
+    		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk2, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_LCDC1_MOD0_ON) == CLK_LCDC1_MOD0_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd1ch0mclk0, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_LCDC1_MOD1_ON) == CLK_LCDC1_MOD1_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk1, CLK_ON);
+    		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk2, CLK_ON);
+    	}
+    	if((g_clk_status & CLK_HDMI_MOD_ON) == CLK_HDMI_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_hdmimclk, CLK_ON);
+    	}
+    }
+
+    if(type == 2)
+    {
+    	if((g_clk_status & CLK_DEBE0_MOD_ON) == CLK_DEBE0_MOD_ON)
+    	{
+    		OSAL_CCMU_SetMclkDiv(h_debe0mclk, 2);
+    	}
+    	if((g_clk_status & CLK_DEBE1_MOD_ON) == CLK_DEBE1_MOD_ON)
+    	{
+    		OSAL_CCMU_SetMclkDiv(h_debe1mclk, 2);
+    	}
+    }
+
+	return DIS_SUCCESS;
+}
+
+//type==1: close ahb clk and image mclk
+//type==2: close all clk except ahb clk and image mclk
+//type==3: close all clk
+__s32 BSP_disp_clk_off(__u32 type)
+{
+    if(type & 1)
+    {
+//AHB CLK
+    	if((g_clk_status & CLK_DEFE0_AHB_ON) == CLK_DEFE0_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe0ahbclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEFE1_AHB_ON) == CLK_DEFE1_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe1ahbclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEBE0_AHB_ON) == CLK_DEBE0_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe0ahbclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEBE1_AHB_ON) == CLK_DEBE1_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe1ahbclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_LCDC0_AHB_ON) == CLK_LCDC0_AHB_ON)	//OK?? REG wont clear?
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd0ahbclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_LCDC1_AHB_ON) == CLK_LCDC1_AHB_ON)	//OK?? REG wont clear?
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd1ahbclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_HDMI_AHB_ON) == CLK_HDMI_AHB_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_hdmiahbclk, CLK_OFF);
+    	}
+    	//OSAL_CCMU_MclkOnOff(h_tveahbclk, CLK_OFF);
+
+//MODULE CLK
+    	if((g_clk_status & CLK_DEBE0_MOD_ON) == CLK_DEBE0_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe0mclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEBE1_MOD_ON) == CLK_DEBE1_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe1mclk, CLK_OFF);
+    	}
+	}
+
+	if(type & 2)
+	{
+//DRAM CLK
+    	if((g_clk_status & CLK_DEFE0_DRAM_ON) == CLK_DEFE0_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe0dramclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEFE1_DRAM_ON) == CLK_DEFE1_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe1dramclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEBE0_DRAM_ON) == CLK_DEBE0_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe0dramclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEBE1_DRAM_ON) == CLK_DEBE1_DRAM_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_debe1dramclk, CLK_OFF);
+    	}
+
+//MODULE CLK
+    	if((g_clk_status & CLK_DEFE0_MOD_ON) == CLK_DEFE0_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe0mclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_DEFE1_MOD_ON) == CLK_DEFE1_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_defe1mclk, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_LCDC0_MOD0_ON) == CLK_LCDC0_MOD0_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd0ch0mclk0, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_LCDC0_MOD1_ON) == CLK_LCDC0_MOD1_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk1, CLK_OFF);
+    		OSAL_CCMU_MclkOnOff(h_lcd0ch1mclk2, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_LCDC1_MOD0_ON) == CLK_LCDC1_MOD0_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd1ch0mclk0, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_LCDC1_MOD1_ON) == CLK_LCDC1_MOD1_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk1, CLK_OFF);
+    		OSAL_CCMU_MclkOnOff(h_lcd1ch1mclk2, CLK_OFF);
+    	}
+    	if((g_clk_status & CLK_HDMI_MOD_ON) == CLK_HDMI_MOD_ON)
+    	{
+    		OSAL_CCMU_MclkOnOff(h_hdmimclk, CLK_OFF);
+    	}
+    }
+
+    if(type == 2)
+    {
+    	if((g_clk_status & CLK_DEBE0_MOD_ON) == CLK_DEBE0_MOD_ON)
+    	{
+    		OSAL_CCMU_SetMclkDiv(h_debe0mclk, 16);
+    	}
+    	if((g_clk_status & CLK_DEBE1_MOD_ON) == CLK_DEBE1_MOD_ON)
+    	{
+    		OSAL_CCMU_SetMclkDiv(h_debe1mclk, 16);
+    	}
+    }
+
+	return DIS_SUCCESS;
+}
+
+
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_clk.h b/drivers/video/sun4i/disp/de_bsp/de/disp_clk.h
new file mode 100644
index 0000000..37f10e8
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_clk.h
@@ -0,0 +1,57 @@
+#ifndef __DISP_CLK_H__
+#define __DISP_CLK_H__
+
+#include "disp_display_i.h"
+
+typedef struct
+{
+	__u32 tve_clk;	//required clock frequency for LCDx_ch1_clk2, for tv output used ,Hz
+	__u32 pre_scale;//required divide LCDx_ch1_clk2 by 2 for LCDx_ch1_clk1 or NOT: 1:not divided , 2: divide by two
+	__u32 hdmi_clk; //required clock frequency for internal hdmi module, Hz
+	__u32 pll_clk;	//required pll frequency for VIDEO_PLL0(1x) or VIDEO_PLL1(1x), Hz
+	__u32 pll_2x;	//required 2x VIDEO_PLL or NOT: 0:no, 1: required
+
+}__disp_tv_vga_clk_t;	//record tv/vga/hdmi mode clock requirement
+
+typedef struct
+{
+	__disp_tv_vga_clk_t tv_clk_tab[30];	//number related to number of tv mode supported
+	__disp_tv_vga_clk_t vga_clk_tab[12];//number related to number of vga mode supported
+
+}__disp_clk_tab;
+
+__s32 image_clk_init(__u32 sel);
+__s32 image_clk_exit(__u32 sel);
+__s32 image_clk_on(__u32 sel);
+__s32 image_clk_off(__u32 sel);
+
+__s32 scaler_clk_init(__u32 sel);
+__s32 scaler_clk_exit(__u32 sel);
+__s32 scaler_clk_on(__u32 sel);
+__s32 scaler_clk_off(__u32 sel);
+
+__s32 lcdc_clk_init(__u32 sel);
+__s32 lcdc_clk_exit(__u32 sel);
+__s32 lcdc_clk_on(__u32 sel);
+__s32 lcdc_clk_off(__u32 sel);
+
+__s32 tve_clk_init(__u32 sel);
+__s32 tve_clk_exit(__u32 sel);
+__s32 tve_clk_on(__u32 sel);
+__s32 tve_clk_off(__u32 sel);
+
+__s32 hdmi_clk_init(void);
+__s32 hdmi_clk_exit(void);
+__s32 hdmi_clk_on(void);
+__s32 hdmi_clk_off(void);
+
+__s32 lvds_clk_init(void);
+__s32 lvds_clk_exit(void);
+__s32 lvds_clk_on(void);
+__s32 lvds_clk_off(void);
+
+__s32 disp_pll_init(void);
+__s32 disp_clk_cfg(__u32 sel, __u32 type, __u8 mode);
+
+#endif
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_combined.c b/drivers/video/sun4i/disp/de_bsp/de/disp_combined.c
new file mode 100644
index 0000000..0d27ad3
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_combined.c
@@ -0,0 +1,339 @@
+#include "disp_display.h"
+#include "disp_combined.h"
+#include "disp_event.h"
+
+__s32 BSP_disp_set_bk_color(__u32 sel, __disp_color_t *color)
+{
+    if(color == NULL)
+    {
+        return DIS_PARA_FAILED;
+    }
+
+    gdisp.screen[sel].bk_color.blue=color->blue;
+    gdisp.screen[sel].bk_color.red=color->red;
+    gdisp.screen[sel].bk_color.green=color->green;
+
+    DE_BE_Set_BkColor(sel, gdisp.screen[sel].bk_color);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_get_bk_color(__u32 sel, __disp_color_t *color)
+{
+    if(color == NULL)
+    {
+        DE_WRN("para invalid in BSP_disp_get_bk_color\n");
+        return DIS_PARA_FAILED;
+    }
+    color->blue = gdisp.screen[sel].bk_color.blue;
+    color->red = gdisp.screen[sel].bk_color.red;
+    color->green = gdisp.screen[sel].bk_color.green;
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_set_color_key(__u32 sel, __disp_colorkey_t *ck_mode)
+{
+    if((ck_mode == NULL) || (ck_mode->red_match_rule > 3) || (ck_mode->green_match_rule > 3) || (ck_mode->blue_match_rule > 3))
+    {
+        DE_WRN("para invalid in BSP_disp_set_color_key\n");
+        return DIS_PARA_FAILED;
+    }
+    memcpy(&(gdisp.screen[sel].color_key), ck_mode, sizeof(__disp_colorkey_t));
+    DE_BE_Set_ColorKey(sel, ck_mode->ck_max, ck_mode->ck_min, ck_mode->red_match_rule, ck_mode->green_match_rule, ck_mode->blue_match_rule);
+
+   return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_get_color_key(__u32 sel, __disp_colorkey_t *ck_mode)
+{
+   memcpy(ck_mode, &(gdisp.screen[sel].color_key),sizeof(__disp_colorkey_t));
+
+   return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_set_palette_table(__u32 sel, __u32 *pbuffer, __u32 offset, __u32 size)
+{
+    if((pbuffer == NULL) || ((offset+size)>1024))
+    {
+        DE_WRN("para invalid in BSP_disp_set_palette_table,offset:0x%x,size:0x%x\n",offset, size);
+        return DIS_FAIL;
+    }
+    DE_BE_Set_SystemPalette(sel, pbuffer,offset, size);
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_get_palette_table(__u32 sel, __u32 * pbuffer, __u32 offset,__u32 size)
+{
+    if((pbuffer == NULL) || ((offset+size)>1024))
+    {
+        DE_WRN("para invalid in BSP_disp_get_palette_table,offset:0x%x,size:0x%x\n",offset, size);
+        return DIS_FAIL;
+    }
+
+    DE_BE_Get_SystemPalette(sel, pbuffer, offset,size);
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_layer_set_top(__u32 sel, __u32  hid)
+{
+    __s32 i,j;
+    __u32 layer_prio[4];
+
+    hid = HANDTOID(hid);
+	HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        __u32 prio = gdisp.screen[sel].max_layers-1;
+
+        for(i=0; i<gdisp.screen[sel].max_layers; i++)
+        {
+            layer_prio[i] = gdisp.screen[sel].layer_manage[i].para.prio;
+        }
+
+        layer_prio[hid] = prio--;
+        for(j=gdisp.screen[sel].max_layers-1; j>=0; j--)//for every prio from high to low
+        {
+            for(i=0; i<gdisp.screen[sel].max_layers; i++)//for every layer_prio that prio is j
+            {
+                if((gdisp.screen[sel].layer_manage[i].status & LAYER_USED) && (i != hid) && (gdisp.screen[sel].layer_manage[i].para.prio == j))
+                {
+                    layer_prio[i] = prio--;
+                }
+            }
+        }
+
+        for(i=0;i<gdisp.screen[sel].max_layers;i++)
+    	{
+    	   if(gdisp.screen[sel].layer_manage[i].status & LAYER_USED)
+    	   {
+    		  DE_BE_Layer_Set_Prio(sel, i, layer_prio[i]);
+    		  gdisp.screen[sel].layer_manage[i].para.prio = layer_prio[i];
+    	   }
+    	}
+
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_layer_set_bottom(__u32 sel, __u32  hid)
+{
+    __s32 i,j;
+    __u32 layer_prio[4];
+
+    hid = HANDTOID(hid);
+	HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        __u32 prio = 0;
+
+        for(i=0; i<gdisp.screen[sel].max_layers; i++)
+        {
+            layer_prio[i] = gdisp.screen[sel].layer_manage[i].para.prio;
+        }
+
+        layer_prio[hid] = prio++;
+        for(j=0; j<gdisp.screen[sel].max_layers; j++)//for every prio from low to high
+        {
+            for(i=0; i<gdisp.screen[sel].max_layers; i++)//for every layer that prio is j
+            {
+                if((gdisp.screen[sel].layer_manage[i].status & LAYER_USED) && (i != hid) && (gdisp.screen[sel].layer_manage[i].para.prio == j))
+                {
+                    layer_prio[i] = prio++;
+                }
+            }
+        }
+
+        for(i=0;i<gdisp.screen[sel].max_layers;i++)
+    	{
+    	   if(gdisp.screen[sel].layer_manage[i].status & LAYER_USED)
+    	   {
+    		  DE_BE_Layer_Set_Prio(sel, i, layer_prio[i]);
+    		  gdisp.screen[sel].layer_manage[i].para.prio = layer_prio[i];
+    	   }
+    	}
+
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_layer_set_alpha_value(__u32 sel, __u32 hid,__u8 value)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        DE_BE_Layer_Set_Alpha_Value(sel, hid, value);
+
+        gdisp.screen[sel].layer_manage[hid].para.alpha_val = value;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+
+
+__s32 BSP_disp_layer_get_alpha_value(__u32 sel, __u32 hid)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        return gdisp.screen[sel].layer_manage[hid].para.alpha_val;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+
+__s32 BSP_disp_layer_alpha_enable(__u32 sel, __u32 hid, __bool enable)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        DE_BE_Layer_Alpha_Enable(sel, hid, enable);
+
+        gdisp.screen[sel].layer_manage[hid].para.alpha_en = enable;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_layer_get_alpha_enable(__u32 sel, __u32 hid)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        return gdisp.screen[sel].layer_manage[hid].para.alpha_en;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_set_pipe(__u32 sel, __u32 hid,__u8 pipe)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+    if(pipe != 0 && pipe != 1)
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        DE_BE_Layer_Set_Pipe(sel, hid,pipe);
+
+        gdisp.screen[sel].layer_manage[hid].para.pipe= pipe;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_layer_get_pipe(__u32 sel, __u32 hid)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        return gdisp.screen[sel].layer_manage[hid].para.pipe;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+
+__s32 BSP_disp_layer_colorkey_enable(__u32 sel, __u32 hid, __bool enable)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        DE_BE_Layer_ColorKey_Enable(sel, hid,enable);
+
+        gdisp.screen[sel].layer_manage[hid].para.ck_enable = enable;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_layer_get_colorkey_enable(__u32 sel, __u32 hid)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        return gdisp.screen[sel].layer_manage[hid].para.ck_enable;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_get_piro(__u32 sel, __u32 hid)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        return gdisp.screen[sel].layer_manage[hid].para.prio;
+    }
+    else
+    {
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_combined.h b/drivers/video/sun4i/disp/de_bsp/de/disp_combined.h
new file mode 100644
index 0000000..296227a
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_combined.h
@@ -0,0 +1,7 @@
+
+#ifndef __DISP_COMBINED_H__
+#define __DISP_COMBINED_H__
+
+#include "disp_display_i.h"
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_de.c b/drivers/video/sun4i/disp/de_bsp/de/disp_de.c
new file mode 100644
index 0000000..74a6000
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_de.c
@@ -0,0 +1,209 @@
+#include "disp_de.h"
+#include "disp_display.h"
+#include "disp_event.h"
+#include "disp_scaler.h"
+#include "disp_clk.h"
+#include "disp_lcd.h"
+
+__s32 Image_init(__u32 sel)
+{
+
+    image_clk_init(sel);
+	image_clk_on(sel);	//when access image registers, must open MODULE CLOCK of image
+	DE_BE_Reg_Init(sel);
+
+    BSP_disp_sprite_init(sel);
+    BSP_disp_set_yuv_output(sel, FALSE);
+
+    Image_open(sel);
+
+    return DIS_SUCCESS;
+}
+
+__s32 Image_exit(__u32 sel)
+{
+    DE_BE_DisableINT(sel, DE_IMG_IRDY_IE);
+    BSP_disp_sprite_exit(sel);
+    image_clk_exit(sel);
+
+    return DIS_SUCCESS;
+}
+
+__s32 Image_open(__u32  sel)
+{
+   DE_BE_Enable(sel);
+
+   return DIS_SUCCESS;
+}
+
+
+__s32 Image_close(__u32 sel)
+{
+   DE_BE_Disable(sel);
+
+   gdisp.screen[sel].status &= IMAGE_USED_MASK;
+
+   return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_set_bright(__u32 sel, __u32 bright)
+{
+    gdisp.screen[sel].bright = bright;
+    DE_BE_Set_Enhance(sel, gdisp.screen[sel].bright, gdisp.screen[sel].contrast, gdisp.screen[sel].saturation);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_get_bright(__u32 sel)
+{
+    return gdisp.screen[sel].bright;
+}
+
+__s32 BSP_disp_set_contrast(__u32 sel, __u32 contrast)
+{
+    gdisp.screen[sel].contrast = contrast;
+    DE_BE_Set_Enhance(sel, gdisp.screen[sel].bright, gdisp.screen[sel].contrast, gdisp.screen[sel].saturation);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_get_contrast(__u32 sel)
+{
+    return gdisp.screen[sel].contrast;
+}
+
+__s32 BSP_disp_set_saturation(__u32 sel, __u32 saturation)
+{
+    gdisp.screen[sel].saturation = saturation;
+    DE_BE_Set_Enhance(sel, gdisp.screen[sel].bright, gdisp.screen[sel].contrast, gdisp.screen[sel].saturation);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_get_saturation(__u32 sel)
+{
+    return gdisp.screen[sel].saturation;
+}
+
+__s32 BSP_disp_enhance_enable(__u32 sel, __bool enable)
+{
+    DE_BE_enhance_enable(sel, enable);
+    gdisp.screen[sel].enhance_en = enable;
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_get_enhance_enable(__u32 sel)
+{
+    return gdisp.screen[sel].enhance_en;
+}
+
+
+__s32 BSP_disp_set_screen_size(__u32 sel, __disp_rectsz_t * size)
+{
+    DE_BE_set_display_size(sel, size->width, size->height);
+
+    gdisp.screen[sel].screen_width = size->width;
+    gdisp.screen[sel].screen_height= size->height;
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_set_yuv_output(__u32 sel, __bool bout_yuv)
+{
+    DE_BE_Output_Cfg_Csc_Coeff(sel, bout_yuv);
+
+    gdisp.screen[sel].bout_yuv = bout_yuv;
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_de_flicker_enable(__u32 sel, __bool b_en)
+{
+	if(b_en)
+	{
+		gdisp.screen[sel].de_flicker_status |= DE_FLICKER_REQUIRED;
+	}
+	else
+	{
+		gdisp.screen[sel].de_flicker_status &= DE_FLICKER_REQUIRED_MASK;
+	}
+	Disp_de_flicker_enable(sel, b_en);
+	return DIS_SUCCESS;
+}
+
+__s32 Disp_de_flicker_enable(__u32 sel, __u32 enable )
+{
+	__disp_tv_mode_t tv_mode;
+	__u32 scan_mode;
+	__u32 i;
+	__u32 scaler_index;
+
+	tv_mode = gdisp.screen[sel].tv_mode;
+	scan_mode = Disp_get_screen_scan_mode(tv_mode);
+
+	if(enable)
+	{
+		if((gdisp.screen[sel].de_flicker_status & DE_FLICKER_REQUIRED) && (scan_mode == 1))	//when output device is ntsc/pal/480i/576i
+		{
+			for(i = 0; i < gdisp.screen[sel].max_layers; i++)
+			{
+				if((gdisp.screen[sel].layer_manage[i].para.mode == DISP_LAYER_WORK_MODE_SCALER) && 	//when a layer using scaler layer
+					(gdisp.screen[sel].layer_manage[i].scaler_index == sel) && 						//when this scaler is the same channel with be
+					(g_video[sel][i].dit_enable == TRUE))	//when this scaler is using de-interlaced
+				{
+					DE_INF("de: CANNOT OPEN de-flicker due to scaler de-interlaced using!\n");
+					DE_INF("de: Will OPEN de-flicker when scaler de-interlaced disable automatic!\n");
+					break;
+				}
+			}
+			if(i == gdisp.screen[sel].max_layers)//no scaler using de-interlaced
+			{
+				BSP_disp_cfg_start(sel);
+
+				DE_BE_deflicker_enable(sel, TRUE);
+
+				//config scaler to fit de-flicker
+				for(i = 0; i < gdisp.screen[sel].max_layers; i++)
+				{
+					if((gdisp.screen[sel].layer_manage[i].para.mode == DISP_LAYER_WORK_MODE_SCALER) &&
+						 ((scaler_index = gdisp.screen[sel].layer_manage[i].scaler_index) == sel))
+					{
+						Scaler_Set_Outitl(scaler_index, FALSE);
+    					gdisp.scaler[scaler_index].b_reg_change = TRUE;
+					}
+				}
+				gdisp.screen[sel].de_flicker_status |= DE_FLICKER_USED;
+
+				BSP_disp_cfg_finish(sel);
+			}
+		}
+		else
+		{
+			DE_INF("de: Will OPEN de-flicker when output to interlaced device !\n");
+		}
+
+	}
+	else
+	{
+		BSP_disp_cfg_start(sel);
+
+		for(i = 0; i < gdisp.screen[sel].max_layers; i++)
+		{
+			if((gdisp.screen[sel].layer_manage[i].para.mode == DISP_LAYER_WORK_MODE_SCALER) &&
+					((scaler_index = gdisp.screen[sel].layer_manage[i].scaler_index) == sel))
+			{
+				Scaler_Set_Outitl(scaler_index, TRUE);
+				gdisp.scaler[scaler_index].b_reg_change = TRUE;
+			}
+		}
+		DE_BE_deflicker_enable(sel, FALSE);
+		gdisp.screen[sel].de_flicker_status &= DE_FLICKER_USED_MASK;
+
+		BSP_disp_cfg_finish(sel);
+	}
+
+	return DIS_SUCCESS;
+}
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_de.h b/drivers/video/sun4i/disp/de_bsp/de/disp_de.h
new file mode 100644
index 0000000..faed1ce
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_de.h
@@ -0,0 +1,23 @@
+
+#ifndef __DISP_DE_H_
+#define __DISP_DE_H_
+
+#include "disp_display_i.h"
+
+extern __hdle   h_tvahbclk;
+extern __hdle   h_tv1clk;
+extern __hdle   h_tv2clk;
+
+#ifdef __LINUX_OSAL__
+__s32 Scaler_event_proc(int irq, void *parg);
+#else
+__s32 Scaler_event_proc(void *parg);
+#endif
+
+__s32 Image_init(__u32 sel);
+__s32 Image_exit(__u32 sel);
+__s32 Image_open(__u32 sel);
+__s32 Image_close(__u32 sel);
+__s32 Disp_de_flicker_enable(__u32 sel, __u32 enable );
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_display.c b/drivers/video/sun4i/disp/de_bsp/de/disp_display.c
new file mode 100644
index 0000000..6ff3c68
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_display.c
@@ -0,0 +1,259 @@
+#include "disp_display.h"
+#include "disp_de.h"
+#include "disp_lcd.h"
+#include "disp_tv.h"
+#include "disp_event.h"
+#include "disp_sprite.h"
+#include "disp_combined.h"
+#include "disp_scaler.h"
+#include "disp_video.h"
+#include "disp_clk.h"
+#include "disp_hdmi.h"
+
+__disp_dev_t gdisp;
+
+
+__s32 BSP_disp_init(__disp_bsp_init_para * para)
+{
+    __u32 i = 0, screen_id = 0;
+
+    memset(&gdisp,0x00,sizeof(__disp_dev_t));
+
+    for(screen_id = 0; screen_id < 2; screen_id++)
+    {
+        gdisp.screen[screen_id].max_layers = 4;
+        for(i = 0;i < gdisp.screen[screen_id].max_layers;i++)
+        {
+            gdisp.screen[screen_id].layer_manage[i].para.prio = IDLE_PRIO;
+        }
+        gdisp.screen[screen_id].image_output_type = IMAGE_OUTPUT_LCDC;
+
+        gdisp.screen[screen_id].bright = 50;
+        gdisp.screen[screen_id].contrast = 50;
+        gdisp.screen[screen_id].saturation = 50;
+
+        gdisp.scaler[screen_id].bright = 32;
+        gdisp.scaler[screen_id].contrast = 32;
+        gdisp.scaler[screen_id].saturation = 32;
+        gdisp.scaler[screen_id].hue = 32;
+
+        gdisp.screen[screen_id].lcd_bright = DISP_LCD_BRIGHT_LEVEL12;
+    }
+    memcpy(&gdisp.init_para,para,sizeof(__disp_bsp_init_para));
+    memset(g_video,0,sizeof(g_video));
+
+    DE_Set_Reg_Base(0, para->base_image0);
+    DE_Set_Reg_Base(1, para->base_image1);
+    DE_SCAL_Set_Reg_Base(0, para->base_scaler0);
+    DE_SCAL_Set_Reg_Base(1, para->base_scaler1);
+    LCDC_set_reg_base(0,para->base_lcdc0);
+    LCDC_set_reg_base(1,para->base_lcdc1);
+    TVE_set_reg_base(0, para->base_tvec0);
+    TVE_set_reg_base(1, para->base_tvec1);
+
+	disp_pll_init();
+
+    Scaler_Init(0);
+    Scaler_Init(1);
+    Image_init(0);
+    Image_init(1);
+    Disp_lcdc_init(0);
+    Disp_lcdc_init(1);
+    Disp_TVEC_Init(0);
+    Disp_TVEC_Init(1);
+    Display_Hdmi_Init();
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_exit(__u32 mode)
+{
+    if(mode == DISP_EXIT_MODE_CLEAN_ALL)
+    {
+        BSP_disp_close();
+
+        Scaler_Exit(0);
+        Scaler_Exit(1);
+        Image_exit(0);
+        Image_exit(1);
+        Disp_lcdc_exit(0);
+        Disp_lcdc_exit(1);
+        Disp_TVEC_Exit(0);
+        Disp_TVEC_Exit(1);
+        Display_Hdmi_Exit();
+    }
+    else if(mode == DISP_EXIT_MODE_CLEAN_PARTLY)
+    {
+        OSAL_InterruptDisable(INTC_IRQNO_LCDC0);
+        OSAL_UnRegISR(INTC_IRQNO_LCDC0,Disp_lcdc_event_proc,(void*)0);
+
+        OSAL_InterruptDisable(INTC_IRQNO_LCDC1);
+        OSAL_UnRegISR(INTC_IRQNO_LCDC1,Disp_lcdc_event_proc,(void*)0);
+
+        OSAL_InterruptDisable(INTC_IRQNO_SCALER0);
+        OSAL_UnRegISR(INTC_IRQNO_SCALER0,Scaler_event_proc,(void*)0);
+
+        OSAL_InterruptDisable(INTC_IRQNO_SCALER1);
+        OSAL_UnRegISR(INTC_IRQNO_SCALER1,Scaler_event_proc,(void*)0);
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_open(void)
+{
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_close(void)
+{
+    __u32 sel = 0;
+
+    for(sel = 0; sel<2; sel++)
+    {
+       Image_close(sel);
+        if(gdisp.scaler[sel].status & SCALER_USED)
+        {
+            Scaler_close(sel);
+        }
+        if(gdisp.screen[sel].lcdc_status & LCDC_TCON0_USED)
+        {
+            TCON0_close(sel);
+            LCDC_close(sel);
+        }
+        else if(gdisp.screen[sel].lcdc_status & LCDC_TCON1_USED)
+        {
+    	    TCON1_close(sel);
+    	    LCDC_close(sel);
+        }
+        else if(gdisp.screen[sel].status & (TV_ON | VGA_ON))
+        {
+        	TVE_close(sel);
+        }
+    }
+
+
+    gdisp.screen[sel].status &= (IMAGE_USED_MASK & LCD_OFF & TV_OFF & VGA_OFF & HDMI_OFF);
+    gdisp.screen[sel].lcdc_status &= (LCDC_TCON0_USED_MASK & LCDC_TCON1_USED_MASK);
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_print_reg(__bool b_force_on, __u32 id)
+{
+    __u32 base = 0, size = 0;
+    __u32 i = 0;
+    unsigned char str[20];
+
+    switch(id)
+    {
+        case DISP_REG_SCALER0:
+            base = gdisp.init_para.base_scaler0;
+            size = 0xa18;
+            sprintf(str, "scaler0:\n");
+            break;
+
+        case DISP_REG_SCALER1:
+            base = gdisp.init_para.base_scaler1;
+            size = 0xa18;
+            sprintf(str, "scaler1:\n");
+            break;
+
+        case DISP_REG_IMAGE0:
+            base = gdisp.init_para.base_image0 + 0x800;
+            size = 0xdff - 0x800;
+            sprintf(str, "image0:\n");
+            break;
+
+        case DISP_REG_IMAGE1:
+            base = gdisp.init_para.base_image1 + 0x800;
+            size = 0xdff - 0x800;
+            sprintf(str, "image1:\n");
+            break;
+        case DISP_REG_LCDC0:
+            base = gdisp.init_para.base_lcdc0;
+            size = 0x800;
+            sprintf(str, "lcdc0:\n");
+            break;
+
+        case DISP_REG_LCDC1:
+            base = gdisp.init_para.base_lcdc1;
+            size = 0x800;
+            sprintf(str, "lcdc1:\n");
+            break;
+
+        case DISP_REG_TVEC0:
+            base = gdisp.init_para.base_tvec0;
+            size = 0x20c;
+            sprintf(str, "tvec0:\n");
+            break;
+
+        case DISP_REG_TVEC1:
+            base = gdisp.init_para.base_tvec1;
+            size = 0x20c;
+            sprintf(str, "tvec1:\n");
+            break;
+
+        case DISP_REG_CCMU:
+            base = gdisp.init_para.base_ccmu;
+            size = 0x158;
+            sprintf(str, "ccmu:\n");
+            break;
+
+        case DISP_REG_PIOC:
+            base = gdisp.init_para.base_pioc;
+            size = 0x228;
+            sprintf(str, "pioc:\n");
+            break;
+
+        case DISP_REG_PWM:
+            base = gdisp.init_para.base_pwm + 0x200;
+            size = 0x0c;
+            sprintf(str, "pwm:\n");
+            break;
+
+        default:
+            return DIS_FAIL;
+    }
+
+    if(b_force_on)
+    {
+        OSAL_PRINTF("%s", str);
+    }
+    else
+    {
+        DE_INF("%s", str);
+    }
+    for(i=0; i<size; i+=16)
+    {
+        __u32 reg[4];
+
+        reg[0] = sys_get_wvalue(base + i);
+        reg[1] = sys_get_wvalue(base + i + 4);
+        reg[2] = sys_get_wvalue(base + i + 8);
+        reg[3] = sys_get_wvalue(base + i + 12);
+#ifdef __LINUX_OSAL__
+        if(b_force_on)
+        {
+            OSAL_PRINTF("0x%04x:%08x,%08x:%08x,%08x\n", i, reg[0], reg[1], reg[2], reg[3]);
+        }
+        else
+        {
+            DE_INF("0x%04x:%08x,%08x:%08x,%08x\n", i, reg[0], reg[1], reg[2], reg[3]);
+        }
+#endif
+#ifdef __BOOT_OSAL__
+        if(b_force_on)
+        {
+            OSAL_PRINTF("0x%x:%x,%x,%x,%x\n", i, reg[0], reg[1], reg[2], reg[3]);
+        }
+        else
+        {
+            DE_INF("0x%x:%x,%x:%x,%x\n", i, reg[0], reg[1], reg[2], reg[3]);
+        }
+#endif
+    }
+
+    return DIS_SUCCESS;
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_display.h b/drivers/video/sun4i/disp/de_bsp/de/disp_display.h
new file mode 100644
index 0000000..7af8eea
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_display.h
@@ -0,0 +1,108 @@
+
+#ifndef __DISP_DISPLAY_H__
+#define __DISP_DISPLAY_H__
+
+#include "disp_display_i.h"
+#include "disp_layer.h"
+#include "disp_scaler.h"
+#include "disp_video.h"
+
+#define IMAGE_USED              0x00000004
+#define IMAGE_USED_MASK         (~(IMAGE_USED))
+#define YUV_CH_USED             0x00000010
+#define YUV_CH_USED_MASK        (~(YUV_CH_USED))
+#define HWC_USED                0x00000040
+#define HWC_USED_MASK           (~(HWC_USED))
+#define LCDC_TCON0_USED         0x00000080
+#define LCDC_TCON0_USED_MASK    (~(LCDC_TCON0_USED))
+#define LCDC_TCON1_USED         0x00000100
+#define LCDC_TCON1_USED_MASK    (~(LCDC_TCON1_USED))
+#define SCALER_USED             0x00000200
+#define SCALER_USED_MASK        (~(SCALER_USED))
+
+#define LCD_ON      0x00010000
+#define LCD_OFF     (~(LCD_ON))
+#define TV_ON       0x00020000
+#define TV_OFF      (~(TV_ON))
+#define HDMI_ON     0x00040000
+#define HDMI_OFF    (~(HDMI_ON))
+#define VGA_ON      0x00080000
+#define VGA_OFF     (~(VGA_ON))
+
+#define VIDEO_PLL0_USED	0x00100000
+#define VIDEO_PLL0_USED_MASK (~(VIDEO_PLL0_USED))
+#define VIDEO_PLL1_USED 0x00200000
+#define VIDEO_PLL1_USED_MASK (~(VIDEO_PLL1_USED))
+
+#define IMAGE_OUTPUT_LCDC            0x00000001
+#define IMAGE_OUTPUT_SCALER         0x00000002
+#define IMAGE_OUTPUT_LCDC_AND_SCALER 0x00000003
+
+#define DE_FLICKER_USED 0x01000000
+#define DE_FLICKER_USED_MASK (~(DE_FLICKER_USED))
+#define DE_FLICKER_REQUIRED 0x02000000
+#define DE_FLICKER_REQUIRED_MASK (~(DE_FLICKER_REQUIRED))
+
+typedef struct
+{
+    __u32                   status; /*display engine,lcd,tv,vga,hdmi status*/
+    __u32                   lcdc_status;//tcon0 used, tcon1 used
+    __bool                  have_cfg_reg;
+    __u32                   cache_flag;
+    __u32                   cfg_cnt;
+
+    __u32                   screen_width;
+    __u32                   screen_height;
+    __disp_color_t          bk_color;
+    __disp_colorkey_t       color_key;
+    __u32                   bright;
+    __u32                   contrast;
+    __u32                   saturation;
+    __bool                  enhance_en;
+    __u32                   max_layers;
+    __layer_man_t           layer_manage[4];
+    __bool                  bout_yuv;
+    __u32                   de_flicker_status;
+
+    __u32                   image_output_type;//see macro definition IMAGE_OUTPUT_XXX above, it can be lcd only /lcd+scaler/ scaler only
+    __u32                   out_scaler_index;
+    __u32                   hdmi_index;//0: internal hdmi; 1:external hdmi(if exit)
+
+    __bool                  b_out_interlace;
+    __disp_output_type_t    output_type;//sw status
+	__disp_vga_mode_t       vga_mode;
+	__disp_tv_mode_t        tv_mode;
+	__disp_tv_mode_t        hdmi_mode;
+	__disp_tv_dac_source    dac_source[4];
+
+    __s32                   (*LCD_CPUIF_XY_Swap)(__s32 mode);
+    void                    (*LCD_CPUIF_ISR)(void);
+	__u32	                pll_use_status;	//lcdc0/lcdc1 using which video pll(0 or 1)
+	__bool                  bl_not_open;
+
+	__disp_lcd_bright_t     lcd_bright;
+}__disp_screen_t;
+
+typedef struct
+{
+    __bool enable;
+    __u32 freq;
+    __u32 pre_scal;
+    __u32 active_state;
+    __u32 duty_ns;
+    __u32 period_ns;
+    __u32 entire_cycle;
+    __u32 active_cycle;
+}__disp_pwm_t;
+
+typedef struct
+{
+    __disp_bsp_init_para    init_para;//para from driver
+    __disp_screen_t         screen[2];
+    __disp_scaler_t         scaler[2];
+    __disp_pwm_t            pwm[2];
+}__disp_dev_t;
+
+extern __disp_dev_t gdisp;
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_display_i.h b/drivers/video/sun4i/disp/de_bsp/de/disp_display_i.h
new file mode 100644
index 0000000..a20f0aa
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_display_i.h
@@ -0,0 +1,105 @@
+#ifndef __DISP_DISPLAY_I_H__
+#define __DISP_DISPLAY_I_H__
+
+#include "ebios/ebios_de.h"
+#include "ebios/ebios_lcdc_tve.h"
+
+
+
+#ifdef __LINUX_OSAL__
+#define DE_INF __inf
+#define DE_MSG __msg
+#define DE_WRN __wrn
+#define OSAL_IRQ_RETURN IRQ_HANDLED
+#else
+#define DE_INF(msg...)
+#define DE_MSG __msg
+#define DE_WRN __wrn
+#define OSAL_IRQ_RETURN DIS_SUCCESS
+#endif
+
+#define HANDTOID(handle)  ((handle) - 100)
+#define IDTOHAND(ID)  ((ID) + 100)
+
+#define INTC_IRQNO_SCALER0  47
+#define INTC_IRQNO_SCALER1  48
+#define INTC_IRQNO_LCDC0    44
+#define INTC_IRQNO_LCDC1    45
+
+#define MAX_SPRITE_BLOCKS	32
+
+
+
+/*basic data information definition*/
+enum
+{
+    FALSE=0,
+    TRUE
+};
+
+#define DIS_NULL 0
+
+enum
+{
+   DIS_SUCCESS=0,
+   DIS_FAIL=-1,
+   DIS_PARA_FAILED=-2,
+   DIS_PRIO_ERROR=-3,
+   DIS_OBJ_NOT_INITED=-4,
+   DIS_NOT_SUPPORT=-5,
+   DIS_NO_RES=-6,
+   DIS_OBJ_COLLISION=-7,
+   DIS_DEV_NOT_INITED=-8,
+   DIS_DEV_SRAM_COLLISION=-9,
+   DIS_TASK_ERROR = -10,
+   DIS_PRIO_COLLSION = -11
+};
+
+#define BIT0      0x00000001
+#define BIT1		  0x00000002
+#define BIT2		  0x00000004
+#define BIT3		  0x00000008
+#define BIT4		  0x00000010
+#define BIT5		  0x00000020
+#define BIT6		  0x00000040
+#define BIT7		  0x00000080
+#define BIT8		  0x00000100
+#define BIT9		  0x00000200
+#define BIT10		  0x00000400
+#define BIT11		  0x00000800
+#define BIT12		  0x00001000
+#define BIT13		  0x00002000
+#define BIT14		  0x00004000
+#define BIT15		  0x00008000
+#define BIT16		  0x00010000
+#define BIT17		  0x00020000
+#define BIT18		  0x00040000
+#define BIT19		  0x00080000
+#define BIT20		  0x00100000
+#define BIT21		  0x00200000
+#define BIT22		  0x00400000
+#define BIT23		  0x00800000
+#define BIT24		  0x01000000
+#define BIT25		  0x02000000
+#define BIT26		  0x04000000
+#define BIT27		  0x08000000
+#define BIT28		  0x10000000
+#define BIT29		  0x20000000
+#define BIT30		  0x40000000
+#define BIT31		  0x80000000
+
+#define sys_get_value(n)    (*((volatile __u8 *)(n)))          /* byte input */
+#define sys_put_value(n,c)  (*((volatile __u8 *)(n))  = (c))   /* byte output */
+#define sys_get_hvalue(n)   (*((volatile __u16 *)(n)))         /* half word input */
+#define sys_put_hvalue(n,c) (*((volatile __u16 *)(n)) = (c))   /* half word output */
+#define sys_get_wvalue(n)   (*((volatile __u32 *)(n)))          /* word input */
+#define sys_put_wvalue(n,c) (*((volatile __u32 *)(n))  = (c))   /* word output */
+#define sys_set_bit(n,c)    (*((volatile __u8 *)(n)) |= (c))   /* byte bit set */
+#define sys_clr_bit(n,c)    (*((volatile __u8 *)(n)) &=~(c))   /* byte bit clear */
+#define sys_set_hbit(n,c)   (*((volatile __u16 *)(n))|= (c))   /* half word bit set */
+#define sys_clr_hbit(n,c)   (*((volatile __u16 *)(n))&=~(c))   /* half word bit clear */
+#define sys_set_wbit(n,c)   (*((volatile __u32 *)(n))|= (c))    /* word bit set */
+#define sys_cmp_wvalue(n,c) (c == (*((volatile __u32 *) (n))))
+#define sys_clr_wbit(n,c)   (*((volatile __u32 *)(n))&=~(c))
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_event.c b/drivers/video/sun4i/disp/de_bsp/de/disp_event.c
new file mode 100644
index 0000000..fed7c8c
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_event.c
@@ -0,0 +1,94 @@
+#include "disp_event.h"
+#include "disp_display.h"
+#include "disp_de.h"
+#include "disp_video.h"
+#include "disp_scaler.h"
+
+__s32 BSP_disp_cmd_cache(__u32 sel)
+{
+    gdisp.screen[sel].cache_flag = TRUE;
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_cmd_submit(__u32 sel)
+{
+    gdisp.screen[sel].cache_flag = FALSE;
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_cfg_start(__u32 sel)
+{
+	gdisp.screen[sel].cfg_cnt++;
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_cfg_finish(__u32 sel)
+{
+	gdisp.screen[sel].cfg_cnt--;
+
+	return DIS_SUCCESS;
+}
+
+void LCD_vbi_event_proc(__u32 sel, __u32 tcon_index)
+{
+    __u32 cur_line = 0, start_delay = 0;
+    __u32 i = 0;
+
+	Video_Operation_In_Vblanking(sel, tcon_index);
+
+    cur_line = LCDC_get_cur_line(sel, tcon_index);
+    start_delay = LCDC_get_start_delay(sel, tcon_index);
+    if(cur_line > start_delay-3)
+	{
+	      //DE_INF("cur_line(%d) >= start_delay(%d)-3 in LCD_vbi_event_proc\n", cur_line, start_delay);
+		return ;
+	}
+
+    if(gdisp.screen[sel].LCD_CPUIF_ISR)
+    {
+    	(*gdisp.screen[sel].LCD_CPUIF_ISR)();
+    }
+
+    if(gdisp.screen[sel].cache_flag == FALSE && gdisp.screen[sel].cfg_cnt == 0)
+    {
+        for(i=0; i<2; i++)
+        {
+            if((gdisp.scaler[i].status & SCALER_USED) && (gdisp.scaler[i].screen_index == sel))
+            {
+                DE_SCAL_Set_Reg_Rdy(i);
+                //DE_SCAL_Reset(i);
+                //DE_SCAL_Start(i);
+                gdisp.scaler[i].b_reg_change = FALSE;
+            }
+            if(gdisp.scaler[i].b_close == TRUE)
+            {
+                Scaler_close(i);
+                gdisp.scaler[i].b_close = FALSE;
+            }
+        }
+        DE_BE_Cfg_Ready(sel);
+		gdisp.screen[sel].have_cfg_reg = TRUE;
+    }
+
+#if 0
+    cur_line = LCDC_get_cur_line(sel, tcon_index);
+
+	if(cur_line > 5)
+	{
+    	DE_INF("%d\n", cur_line);
+    }
+#endif
+
+    return ;
+}
+
+void LCD_line_event_proc(__u32 sel, __u32 tcon_index)
+{
+	if(gdisp.screen[sel].have_cfg_reg)
+	{
+	    gdisp.init_para.disp_int_process(sel);
+	    gdisp.screen[sel].have_cfg_reg = FALSE;
+	}
+}
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_event.h b/drivers/video/sun4i/disp/de_bsp/de/disp_event.h
new file mode 100644
index 0000000..640f2a0
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_event.h
@@ -0,0 +1,14 @@
+
+#ifndef __DISP_EVENT_H__
+#define __DISP_EVENT_H__
+
+#include "disp_display_i.h"
+#include "disp_layer.h"
+
+
+void LCD_vbi_event_proc(__u32 sel, __u32 tcon_index);
+void LCD_line_event_proc(__u32 sel, __u32 tcon_index);
+__s32 BSP_disp_cfg_start(__u32 sel);
+__s32 BSP_disp_cfg_finish(__u32 sel);
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.c b/drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.c
new file mode 100644
index 0000000..568fdab
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.c
@@ -0,0 +1,220 @@
+#include "disp_hdmi.h"
+#include "disp_display.h"
+#include "disp_event.h"
+#include "disp_de.h"
+#include "disp_tv.h"
+#include "disp_lcd.h"
+#include "disp_clk.h"
+
+
+__s32 Display_Hdmi_Init(void)
+{
+    hdmi_clk_init();
+
+	gdisp.screen[0].hdmi_mode = DISP_TV_MOD_720P_50HZ;
+	gdisp.screen[1].hdmi_mode = DISP_TV_MOD_720P_50HZ;
+
+	return DIS_SUCCESS;
+}
+
+__s32 Display_Hdmi_Exit(void)
+{
+    hdmi_clk_exit();
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_hdmi_open(__u32 sel)
+{
+    if(!(gdisp.screen[sel].status & HDMI_ON))
+    {
+    	__disp_tv_mode_t     tv_mod;
+        __u32 scaler_index;
+
+    	tv_mod = gdisp.screen[sel].hdmi_mode;
+
+        hdmi_clk_on();
+    	lcdc_clk_on(sel);
+    	image_clk_on(sel);
+		Image_open(sel);//set image normal channel start bit , because every de_clk_off( )will reset this bit
+    	disp_clk_cfg(sel,DISP_OUTPUT_TYPE_HDMI, tv_mod);
+
+        BSP_disp_set_yuv_output(sel, FALSE);
+    	DE_BE_set_display_size(sel, tv_mode_to_width(tv_mod), tv_mode_to_height(tv_mod));
+    	DE_BE_Output_Select(sel, sel);
+    	DE_BE_Set_Outitl_enable(sel, Disp_get_screen_scan_mode(tv_mod));
+        for(scaler_index=0; scaler_index<2; scaler_index++)
+        {
+            if((gdisp.scaler[scaler_index].status & SCALER_USED) && (gdisp.scaler[scaler_index].screen_index == sel))
+            {
+                if(Disp_get_screen_scan_mode(tv_mod) == 1)//interlace output
+                {
+                    Scaler_Set_Outitl(scaler_index, TRUE);
+                }
+                else
+                {
+                    Scaler_Set_Outitl(scaler_index, FALSE);
+                }
+            }
+        }
+
+    	TCON1_set_hdmi_mode(sel,tv_mod);
+    	TCON1_open(sel);
+    	if(gdisp.init_para.Hdmi_open)
+    	{
+    	    gdisp.init_para.Hdmi_open();
+    	}
+    	else
+    	{
+    	    DE_WRN("Hdmi_open is NULL\n");
+    	    return -1;
+    	}
+
+    	Disp_Switch_Dram_Mode(DISP_OUTPUT_TYPE_HDMI, tv_mod);
+
+    	gdisp.screen[sel].b_out_interlace = Disp_get_screen_scan_mode(tv_mod);
+    	gdisp.screen[sel].status |= HDMI_ON;
+        gdisp.screen[sel].lcdc_status |= LCDC_TCON1_USED;
+        gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_HDMI;
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_hdmi_close(__u32 sel)
+{
+    if(gdisp.screen[sel].status & HDMI_ON)
+    {
+        __u32 scaler_index;
+
+    	if(gdisp.init_para.Hdmi_close)
+    	{
+    	    gdisp.init_para.Hdmi_close();
+    	}
+    	else
+    	{
+    	    DE_WRN("Hdmi_close is NULL\n");
+    	    return -1;
+    	}
+        Image_close(sel);
+    	TCON1_close(sel);
+
+    	image_clk_off(sel);
+    	lcdc_clk_off(sel);
+    	hdmi_clk_off();
+    	DE_BE_Set_Outitl_enable(sel, FALSE);
+        for(scaler_index=0; scaler_index<2; scaler_index++)
+        {
+            if((gdisp.scaler[scaler_index].status & SCALER_USED) && (gdisp.scaler[scaler_index].screen_index == sel))
+            {
+                Scaler_Set_Outitl(scaler_index, FALSE);
+            }
+        }
+
+        gdisp.screen[sel].b_out_interlace = 0;
+        gdisp.screen[sel].lcdc_status &= LCDC_TCON1_USED_MASK;
+    	gdisp.screen[sel].status &= HDMI_OFF;
+    	gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_NONE;
+		gdisp.screen[sel].pll_use_status &= ((gdisp.screen[sel].pll_use_status == VIDEO_PLL0_USED)? VIDEO_PLL0_USED_MASK : VIDEO_PLL1_USED_MASK);
+    }
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_hdmi_set_mode(__u32 sel, __disp_tv_mode_t  mode)
+{
+    if(mode >= DISP_TV_MODE_NUM)
+    {
+        DE_WRN("unsupported hdmi mode:%d in BSP_disp_hdmi_set_mode\n", mode);
+        return DIS_FAIL;
+    }
+
+	if(gdisp.init_para.hdmi_set_mode)
+	{
+	    gdisp.init_para.hdmi_set_mode(mode);
+	}
+	else
+	{
+	    DE_WRN("hdmi_set_mode is NULL\n");
+	    return -1;
+	}
+
+	gdisp.screen[sel].hdmi_mode = mode;
+	gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_HDMI;
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_hdmi_get_mode(__u32 sel)
+{
+    return gdisp.screen[sel].hdmi_mode;
+}
+
+__s32 BSP_disp_hdmi_check_support_mode(__u32 sel, __u8  mode)
+{
+	__s32          ret = 0;
+
+	if(gdisp.init_para.hdmi_mode_support)
+	{
+	    ret = gdisp.init_para.hdmi_mode_support(mode);
+	}
+	else
+	{
+	    DE_WRN("hdmi_mode_support is NULL\n");
+	    return -1;
+	}
+
+	return ret;
+}
+
+__s32 BSP_disp_hdmi_get_hpd_status(__u32 sel)
+{
+	__s32          ret = 0;
+
+	if(gdisp.init_para.hdmi_get_HPD_status)
+	{
+	    ret = gdisp.init_para.hdmi_get_HPD_status();
+	}
+	else
+	{
+	    DE_WRN("hdmi_get_HPD_status is NULL\n");
+	    return -1;
+	}
+
+	return ret;
+}
+
+__s32 BSP_disp_hdmi_set_src(__u32 sel, __disp_lcdc_src_t src)
+{
+    switch (src)
+    {
+        case DISP_LCDC_SRC_DE_CH1:
+            TCON1_select_src(sel, LCDC_SRC_DE1);
+            break;
+
+        case DISP_LCDC_SRC_DE_CH2:
+            TCON1_select_src(sel, LCDC_SRC_DE2);
+            break;
+
+        case DISP_LCDC_SRC_BLUT:
+            TCON1_select_src(sel, LCDC_SRC_BLUE);
+            break;
+
+        default:
+            DE_WRN("not supported lcdc src:%d in BSP_disp_tv_set_src\n", src);
+            return DIS_NOT_SUPPORT;
+    }
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_set_hdmi_func(__disp_hdmi_func * func)
+{
+    gdisp.init_para.Hdmi_open = func->Hdmi_open;
+    gdisp.init_para.Hdmi_close = func->Hdmi_close;
+    gdisp.init_para.hdmi_set_mode = func->hdmi_set_mode;
+    gdisp.init_para.hdmi_mode_support = func->hdmi_mode_support;
+    gdisp.init_para.hdmi_get_HPD_status = func->hdmi_get_HPD_status;
+    gdisp.init_para.hdmi_set_pll = func->hdmi_set_pll;
+
+    return DIS_SUCCESS;
+}
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.h b/drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.h
new file mode 100644
index 0000000..40b0da7
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_hdmi.h
@@ -0,0 +1,10 @@
+
+#ifndef __DISP_HDMI_H__
+#define __DISP_HDMI_H__
+
+#include "disp_display_i.h"
+
+__s32 Display_Hdmi_Init(void);
+__s32 Display_Hdmi_Exit(void);
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_hwc.c b/drivers/video/sun4i/disp/de_bsp/de/disp_hwc.c
new file mode 100644
index 0000000..d1411f8
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_hwc.c
@@ -0,0 +1,52 @@
+#include "disp_display.h"
+#include "disp_hwc.h"
+
+__s32 BSP_disp_hwc_enable(__u32 sel, __bool enable)
+{
+    DE_BE_HWC_Enable(sel, enable);
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_hwc_set_pos(__u32 sel, __disp_pos_t *pos)
+{
+	DE_BE_HWC_Set_Pos(sel, pos);
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_hwc_get_pos(__u32 sel, __disp_pos_t *pos)
+{
+    DE_BE_HWC_Get_Pos(sel, pos);
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_hwc_set_framebuffer(__u32 sel, __disp_hwc_pattern_t *patmem)
+{
+    de_hwc_src_t  hsrc;
+
+    if(patmem == NULL)
+    {
+	   	return DIS_PARA_FAILED;
+    }
+    hsrc.mode = patmem->pat_mode;
+    hsrc.paddr = patmem->addr;
+    DE_BE_HWC_Set_Src(sel, &hsrc);
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_hwc_set_palette(__u32 sel, void *palette,__u32 offset, __u32 palette_size)
+{
+    if((palette == NULL) || ((offset+palette_size)>1024))
+    {
+        DE_WRN("para invalid in BSP_disp_hwc_set_palette\n");
+	   return DIS_PARA_FAILED;
+    }
+    DE_BE_HWC_Set_Palette(sel, (__u32)palette,offset,palette_size);
+
+   return DIS_SUCCESS;
+}
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_hwc.h b/drivers/video/sun4i/disp/de_bsp/de/disp_hwc.h
new file mode 100644
index 0000000..dd51ba1
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_hwc.h
@@ -0,0 +1,11 @@
+
+#ifndef _DISP_HWC_H_
+#define _DISP_HWC_H_
+
+#include "disp_display_i.h"
+
+/*basic data information definition*/
+
+
+#endif
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_layer.c b/drivers/video/sun4i/disp/de_bsp/de/disp_layer.c
new file mode 100644
index 0000000..fef9bf7
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_layer.c
@@ -0,0 +1,1441 @@
+#include "disp_layer.h"
+#include "disp_de.h"
+#include "disp_display.h"
+#include "disp_scaler.h"
+#include "disp_event.h"
+#include "disp_clk.h"
+
+static __s32 Layer_Get_Idle_Hid(__u32 sel)
+{
+    __s32 i;
+
+    for(i = 0;i<gdisp.screen[sel].max_layers;i++)
+    {
+        if(!(gdisp.screen[sel].layer_manage[i].status & LAYER_USED))
+        {
+            return i;
+        }
+    }
+
+    return (__s32)DIS_NO_RES;
+}
+
+
+static __s32 Layer_Get_Idle_Prio(__u32 sel)
+{
+    __s32 i,j;
+
+    for(i = 0;i < gdisp.screen[sel].max_layers;i++)//check every prio(0~MAX_LAYERS-1)
+    {
+        for(j = 0;j < gdisp.screen[sel].max_layers;j++)//check every layer
+        {
+            if(gdisp.screen[sel].layer_manage[j].para.prio == i)//the prio is used by a layer
+            {
+               break;
+            }
+            else if(j == gdisp.screen[sel].max_layers-1)//not layer use this prio
+            {
+                return i;
+            }
+        }
+    }
+    return DIS_PRIO_ERROR;
+}
+
+
+__u32 Layer_Get_Prio(__u32 sel, __u32 hid)
+{
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        return gdisp.screen[sel].layer_manage[hid].para.prio;
+    }
+
+    return (__u32)DIS_PARA_FAILED;
+}
+
+__disp_pixel_type_t get_fb_type(__disp_pixel_fmt_t  format)
+{
+    if(format == DISP_FORMAT_YUV444 || format == DISP_FORMAT_YUV422 ||
+        format == DISP_FORMAT_YUV420 || format == DISP_FORMAT_YUV411)
+    {
+        return DISP_FB_TYPE_YUV;
+    }
+    else
+    {
+        return DISP_FB_TYPE_RGB;
+    }
+}
+
+// 0: yuv channel format
+// 1: yuv channel pixel sequence
+// 3: image0 pixel sequence
+__s32 img_sw_para_to_reg(__u8 type, __u8 mode, __u8 value)
+{
+    if(type == 0)//yuv channel format
+    {
+        if(mode == DISP_MOD_NON_MB_PLANAR && value == DISP_FORMAT_YUV411)
+        {
+            return 0;
+        }
+        else if(mode == DISP_MOD_NON_MB_PLANAR && value == DISP_FORMAT_YUV422)
+        {
+            return 1;
+        }
+        else if(mode == DISP_MOD_NON_MB_PLANAR && value == DISP_FORMAT_YUV444)
+        {
+            return 2;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_FORMAT_YUV422)
+        {
+            return 3;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_FORMAT_YUV444)
+        {
+            return 4;
+        }
+	    else
+	    {
+	        DE_WRN("not supported yuv channel format:%d in img_sw_para_to_reg\n",value);
+	        return 0;
+	    }
+    }
+    else if(type == 1)//yuv channel pixel sequence
+    {
+        if(mode == DISP_MOD_NON_MB_PLANAR && value == DISP_SEQ_P3210)
+        {
+            return 0;
+        }
+        else if(mode == DISP_MOD_NON_MB_PLANAR && value == DISP_SEQ_P0123)
+        {
+            return 1;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_SEQ_UYVY)
+        {
+            return 0;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_SEQ_YUYV)
+        {
+            return 1;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_SEQ_VYUY)
+        {
+            return 2;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_SEQ_YVYU)
+        {
+            return 3;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_SEQ_AYUV)
+        {
+            return 0;
+        }
+        else if(mode == DISP_MOD_INTERLEAVED && value == DISP_SEQ_VUYA)
+        {
+            return 1;
+        }
+	    else
+	    {
+	        DE_WRN("not supported yuv channel pixel sequence:%d in img_sw_para_to_reg\n",value);
+	        return 0;
+	    }
+    }
+    else if(type == 3)//image0 pixel sequence
+    {
+        if(value == DISP_SEQ_ARGB)
+        {
+            return 0;
+        }
+        else if(value == DISP_SEQ_BGRA)
+        {
+            return 2;
+        }
+        else if(value == DISP_SEQ_P10)
+        {
+            return 0;
+        }
+        else if(value == DISP_SEQ_P01)
+        {
+            return 1;
+        }
+        else if(value == DISP_SEQ_P3210)
+        {
+            return 0;
+        }
+        else if(value == DISP_SEQ_P0123)
+        {
+            return 1;
+        }
+        else if(value == DISP_SEQ_P76543210)
+        {
+            return 0;
+        }
+        else if(value == DISP_SEQ_P67452301)
+        {
+            return 1;
+        }
+        else if(value == DISP_SEQ_P10325476)
+        {
+            return 2;
+        }
+        else if(value == DISP_SEQ_P01234567)
+        {
+            return 3;
+        }
+        else if(value == DISP_SEQ_2BPP_BIG_BIG)
+        {
+            return 0;
+        }
+        else if(value == DISP_SEQ_2BPP_BIG_LITTER)
+        {
+            return 1;
+        }
+        else if(value == DISP_SEQ_2BPP_LITTER_BIG)
+        {
+            return 2;
+        }
+        else if(value == DISP_SEQ_2BPP_LITTER_LITTER)
+        {
+            return 3;
+        }
+        else if(value == DISP_SEQ_1BPP_BIG_BIG)
+        {
+            return 0;
+        }
+        else if(value == DISP_SEQ_1BPP_BIG_LITTER)
+        {
+            return 1;
+        }
+        else if(value == DISP_SEQ_1BPP_LITTER_BIG)
+        {
+            return 2;
+        }
+        else if(value == DISP_SEQ_1BPP_LITTER_LITTER)
+        {
+            return 3;
+        }
+	    else
+	    {
+	        DE_WRN("not supported image0 pixel sequence:%d in img_sw_para_to_reg\n",value);
+	        return 0;
+	    }
+    }
+
+    DE_WRN("not supported type:%d in img_sw_para_to_reg\n",type);
+    return 0;
+}
+
+__s32 de_format_to_bpp(__disp_pixel_fmt_t fmt)
+{
+    switch(fmt)
+    {
+    case DISP_FORMAT_1BPP:
+        return 1;
+
+    case DISP_FORMAT_2BPP:
+        return 2;
+
+    case DISP_FORMAT_4BPP:
+        return 4;
+
+    case DISP_FORMAT_8BPP:
+        return 8;
+
+    case DISP_FORMAT_RGB655:
+    case DISP_FORMAT_RGB565:
+    case DISP_FORMAT_RGB556:
+    case DISP_FORMAT_ARGB1555:
+    case DISP_FORMAT_RGBA5551:
+    case DISP_FORMAT_ARGB4444:
+        return 16;
+
+    case DISP_FORMAT_RGB888:
+        return 24;
+
+    case DISP_FORMAT_ARGB8888:
+        return 32;
+
+    case DISP_FORMAT_YUV444:
+        return 24;
+
+    case DISP_FORMAT_YUV422:
+        return 16;
+
+    case DISP_FORMAT_YUV420:
+    case DISP_FORMAT_YUV411:
+        return 12;
+
+    case DISP_FORMAT_CSIRGB:
+        return 32;//?
+
+    default:
+        return 0;
+    }
+}
+
+static __s32 Yuv_Channel_Request(__u32 sel, __u8 hid)
+{
+	if(!(gdisp.screen[sel].status & YUV_CH_USED))
+	{
+		DE_BE_YUV_CH_Enable(sel, TRUE);
+		DE_BE_Layer_Yuv_Ch_Enable(sel, hid,TRUE);
+
+		gdisp.screen[sel].layer_manage[hid].byuv_ch = TRUE;
+		gdisp.screen[sel].status |= YUV_CH_USED;
+		return DIS_SUCCESS;
+	}
+	return DIS_NO_RES;
+}
+
+static __s32 Yuv_Channel_Release(__u32 sel, __u8 hid)
+{
+    de_yuv_ch_src_t yuv_src;
+
+    memset(&yuv_src, 0 ,sizeof(de_yuv_ch_src_t));
+    DE_BE_YUV_CH_Set_Src(sel, &yuv_src);
+    DE_BE_YUV_CH_Enable(sel, FALSE);
+    DE_BE_Layer_Yuv_Ch_Enable(sel, hid,FALSE);
+
+    gdisp.screen[sel].layer_manage[hid].byuv_ch = FALSE;
+    gdisp.screen[sel].status &= YUV_CH_USED_MASK;
+
+    return DIS_SUCCESS;
+}
+
+__s32 Yuv_Channel_Set_framebuffer(__u32 sel, __disp_fb_t * pfb, __u32 xoffset, __u32 yoffset)
+{
+    de_yuv_ch_src_t yuv_src;
+
+    yuv_src.format = img_sw_para_to_reg(0,pfb->mode,pfb->format);
+    yuv_src.mode = (__u8)pfb->mode;
+    yuv_src.pixseq = img_sw_para_to_reg(1,pfb->mode,pfb->seq);
+    yuv_src.ch0_base = (__u32)OSAL_VAtoPA((void*)pfb->addr[0]);
+    yuv_src.ch1_base = (__u32)OSAL_VAtoPA((void*)pfb->addr[1]);
+    yuv_src.ch2_base = (__u32)OSAL_VAtoPA((void*)pfb->addr[2]);
+    yuv_src.line_width= pfb->size.width;
+    yuv_src.offset_x = xoffset;
+    yuv_src.offset_y = yoffset;
+    yuv_src.cs_mode = pfb->cs_mode;
+    DE_BE_YUV_CH_Set_Src(sel, &yuv_src);
+
+    return DIS_SUCCESS;
+}
+
+__s32 Yuv_Channel_adjusting(__u32 sel, __u32 mode,__u32 format, __s32 *src_x, __u32 *scn_width)
+{
+	__u32 w_shift;
+	__u32 reg_format;
+
+	reg_format = img_sw_para_to_reg(0,mode,format);
+
+	if(reg_format == 0x0) //planar yuv411
+	{
+		w_shift = 4;
+	}
+	else if(reg_format == 0x1) //planar yuv422
+	{
+		w_shift = 3;
+	}
+	else if(reg_format == 0x2) //planar yuv444
+	{
+		w_shift = 2;
+	}
+	else
+	{
+		w_shift = 0;
+	}
+	*src_x = (*src_x>>w_shift)<<w_shift;
+	*scn_width = (*scn_width>>w_shift)<<w_shift;
+
+	 return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_layer_request(__u32 sel, __disp_layer_work_mode_t mode)
+{
+    __s32   hid;
+    __s32   prio = 0;
+    __u32   cpu_sr;
+    __layer_man_t * layer_man;
+
+    OSAL_IrqLock(&cpu_sr);
+    hid = Layer_Get_Idle_Hid(sel);
+    if(hid == DIS_NO_RES)
+    {
+        DE_WRN("all layer resource used!\n");
+        OSAL_IrqUnLock(cpu_sr);
+        return DIS_NULL;
+    }
+    prio=Layer_Get_Idle_Prio(sel);
+	if(prio < 0)
+	{
+        DE_WRN("all layer prio used!\n");
+        OSAL_IrqUnLock(cpu_sr);
+		return DIS_NULL;
+	}
+	OSAL_IrqUnLock(cpu_sr);
+
+    BSP_disp_cfg_start(sel);
+
+    DE_BE_Layer_Enable(sel, hid, FALSE);
+    DE_BE_Layer_Set_Prio(sel, hid,prio);
+    DE_BE_Layer_Set_Work_Mode(sel, hid, DISP_LAYER_WORK_MODE_NORMAL);
+    DE_BE_Layer_Video_Enable(sel, hid, FALSE);
+
+    BSP_disp_cfg_finish(sel);
+
+    OSAL_IrqLock(&cpu_sr);
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    memset(&layer_man->para,0,sizeof(__disp_layer_info_t));
+    layer_man->para.mode = DISP_LAYER_WORK_MODE_NORMAL;
+    layer_man->para.prio = prio;
+    layer_man->byuv_ch = 0;
+	layer_man->status = LAYER_USED;
+	OSAL_IrqUnLock(cpu_sr);
+
+    return IDTOHAND(hid);
+}
+
+
+__s32 BSP_disp_layer_release(__u32 sel, __u32 hid)
+{
+    __u32   cpu_sr;
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    BSP_disp_cfg_start(sel);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+
+
+    if(layer_man->status & LAYER_USED)
+    {
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            if(layer_man->para.b_from_screen)
+            {
+                Image_close(1-sel);
+                image_clk_off(1-sel);
+                gdisp.screen[1-sel].image_output_type = 0;
+            }
+            Scaler_Release(layer_man->scaler_index, TRUE);      /*release a scaler object */
+        }
+        else
+        {
+        	if(layer_man->byuv_ch)
+        	{
+            	Yuv_Channel_Release(sel, hid);
+            }
+            else
+            {
+                layer_src_t layer_src;
+
+                memset(&layer_src, 0, sizeof(layer_src_t));
+            	DE_BE_Layer_Set_Framebuffer(sel, hid, &layer_src);
+            }
+        }
+    }
+    memset(layer_man, 0 ,sizeof(__layer_man_t));
+    DE_BE_Layer_Enable(sel, hid, FALSE);
+    DE_BE_Layer_Video_Enable(sel, hid, FALSE);
+    DE_BE_Layer_Video_Ch_Sel(sel, hid, 0);
+    DE_BE_Layer_Yuv_Ch_Enable(sel, hid,FALSE);
+    DE_BE_Layer_Set_Screen_Win(sel, hid, &(layer_man->para.scn_win));
+    DE_BE_Layer_Set_Prio(sel, hid, 0);
+    DE_BE_Layer_Set_Pipe(sel, hid, 0);
+    DE_BE_Layer_Alpha_Enable(sel, hid, FALSE);
+    DE_BE_Layer_Set_Alpha_Value(sel, hid, 0);
+    DE_BE_Layer_ColorKey_Enable(sel, hid, FALSE);
+
+    BSP_disp_cfg_finish(sel);
+
+    OSAL_IrqLock(&cpu_sr);
+    layer_man->para.prio = IDLE_PRIO;
+    layer_man->status &= LAYER_USED_MASK&LAYER_OPEN_MASK;
+    OSAL_IrqUnLock(cpu_sr);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_layer_open(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+        if(!(layer_man->status & LAYER_OPENED))
+        {
+            BSP_disp_cfg_start(sel);
+            DE_BE_Layer_Enable(sel, hid,TRUE);
+            BSP_disp_cfg_finish(sel);
+            layer_man->status |= LAYER_OPENED;
+        }
+        return DIS_SUCCESS;
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_close(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+        if(layer_man->status & LAYER_OPENED)
+        {
+            BSP_disp_cfg_start(sel);
+            DE_BE_Layer_Enable(sel, hid,FALSE);
+            BSP_disp_cfg_finish(sel);
+            layer_man->status &= LAYER_OPEN_MASK;
+        }
+        return DIS_SUCCESS;
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_set_framebuffer(__u32 sel, __u32 hid, __disp_fb_t * pfb)//keep the src window offset x/y
+{
+    __s32           ret;
+    layer_src_t     layer_fb;
+    __u32           cpu_sr;
+    __layer_man_t * layer_man;
+    __u32 size;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(pfb == NULL)
+    {
+        return DIS_PARA_FAILED;
+    }
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+    	BSP_disp_cfg_start(sel);
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            ret = Scaler_Set_Framebuffer(layer_man->scaler_index, pfb);
+            BSP_disp_cfg_finish(sel);
+            return ret;
+        }
+        else
+        {
+        	if(get_fb_type(pfb->format) == DISP_FB_TYPE_YUV)
+        	{
+	            if(layer_man->byuv_ch==FALSE)
+                {
+            		ret = Yuv_Channel_Request(sel, hid);
+            		if(ret != DIS_SUCCESS)
+            		{
+            		    DE_WRN("request yuv channel fail\n");
+            		    BSP_disp_cfg_finish(sel);
+            			return ret;
+            		}
+            	}
+            	Yuv_Channel_adjusting(sel , pfb->mode, pfb->format, &layer_man->para.src_win.x, &layer_man->para.scn_win.width);
+        		Yuv_Channel_Set_framebuffer(sel, pfb, layer_man->para.src_win.x, layer_man->para.src_win.y);
+        	}
+        	else
+        	{
+                layer_fb.fb_addr    = (__u32)OSAL_VAtoPA((void*)pfb->addr[0]);
+                layer_fb.pixseq     = img_sw_para_to_reg(3,0,pfb->seq);
+                layer_fb.br_swap    = pfb->br_swap;
+                layer_fb.fb_width   = pfb->size.width;
+                layer_fb.offset_x   = layer_man->para.src_win.x;
+                layer_fb.offset_y   = layer_man->para.src_win.y;
+                layer_fb.format = pfb->format;
+                DE_BE_Layer_Set_Framebuffer(sel, hid,&layer_fb);
+            }
+
+            OSAL_IrqLock(&cpu_sr);
+            memcpy(&layer_man->para.fb,pfb,sizeof(__disp_fb_t));
+            OSAL_IrqUnLock(cpu_sr);
+
+            size = (pfb->size.width * layer_man->para.src_win.height * de_format_to_bpp(pfb->format) + 7)/8;
+            OSAL_CacheRangeFlush((void *)pfb->addr[0],size ,CACHE_CLEAN_FLUSH_D_CACHE_REGION);
+
+			if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+			{
+            	gdisp.scaler[layer_man->scaler_index].b_reg_change = TRUE;
+            }
+			BSP_disp_cfg_finish(sel);
+
+            return DIS_SUCCESS;
+        }
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_get_framebuffer(__u32 sel, __u32 hid,__disp_fb_t * pfb)
+{
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(pfb == NULL)
+    {
+        return DIS_PARA_FAILED;
+    }
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            return Scaler_Get_Framebuffer(layer_man->scaler_index, pfb);
+        }
+        else
+        {
+            memcpy(pfb,&layer_man->para.fb,sizeof(__disp_fb_t));
+            return DIS_SUCCESS;
+        }
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+
+__s32 BSP_disp_layer_set_src_window(__u32 sel, __u32 hid,__disp_rect_t *regn)//if not scaler mode, ignore the src window width&height.
+{
+    __u32           cpu_sr;
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(regn == NULL)
+    {
+        return DIS_PARA_FAILED;
+    }
+	if(regn->width <= 0 || regn->height <= 0)
+    {
+        return DIS_PARA_FAILED;
+    }
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+    	BSP_disp_cfg_start(sel);
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            __s32 ret = 0;
+
+            ret = Scaler_Set_SclRegn(layer_man->scaler_index, regn);
+            gdisp.scaler[layer_man->scaler_index].b_reg_change = TRUE;
+            BSP_disp_cfg_finish(sel);
+            return ret;
+        }
+        else
+        {
+        	if(get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV)
+        	{
+        		Yuv_Channel_adjusting(sel,layer_man->para.fb.mode, layer_man->para.fb.format, &layer_man->para.src_win.x, &layer_man->para.scn_win.width);
+        		Yuv_Channel_Set_framebuffer(sel, &(layer_man->para.fb), regn->x, regn->y);
+        	}
+        	else
+        	{
+        	    layer_src_t layer_fb;
+
+                layer_fb.fb_addr    = (__u32)OSAL_VAtoPA((void*)layer_man->para.fb.addr[0]);
+                layer_fb.format     = layer_man->para.fb.format;
+                layer_fb.pixseq     = img_sw_para_to_reg(3,0,layer_man->para.fb.seq);
+                layer_fb.br_swap    = layer_man->para.fb.br_swap;
+                layer_fb.fb_width   = layer_man->para.fb.size.width;
+                layer_fb.offset_x   = regn->x;
+                layer_fb.offset_y   = regn->y;
+                layer_fb.format = layer_man->para.fb.format;
+
+                DE_BE_Layer_Set_Framebuffer(sel, hid,&layer_fb);
+            }
+
+            OSAL_IrqLock(&cpu_sr);
+            layer_man->para.src_win.x = regn->x;
+            layer_man->para.src_win.y = regn->y;
+            layer_man->para.src_win.width = regn->width;
+            layer_man->para.src_win.height = regn->height;
+            OSAL_IrqUnLock(cpu_sr);
+
+		    BSP_disp_cfg_finish(sel);
+
+            return DIS_SUCCESS;
+        }
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+
+__s32 BSP_disp_layer_get_src_window(__u32 sel, __u32 hid,__disp_rect_t *regn)
+{
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(regn == NULL)
+    {
+        DE_WRN("input parameter can't be null!\n");
+        return DIS_PARA_FAILED;
+    }
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            return Scaler_Get_SclRegn(layer_man->scaler_index, regn);
+        }
+        else
+        {
+            regn->x = layer_man->para.src_win.x;
+            regn->y = layer_man->para.src_win.y;
+            regn->width = layer_man->para.scn_win.width;
+            regn->height = layer_man->para.scn_win.height;
+            return 0;
+        }
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_set_screen_window(__u32 sel, __u32 hid,__disp_rect_t * regn)
+{
+    __disp_rectsz_t      outsize;
+    __u32           cpu_sr;
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(regn == NULL)
+    {
+    	DE_WRN("para is null in BSP_disp_layer_set_screen_window\n");
+        return DIS_PARA_FAILED;
+    }
+	if(regn->width <= 0 || regn->height <= 0)
+    {
+        DE_WRN("width:%x,height:%x in BSP_disp_layer_set_screen_window\n", regn->width, regn->height);
+        return DIS_PARA_FAILED;
+    }
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+
+    if(layer_man->status & LAYER_USED)
+    {
+    	BSP_disp_cfg_start(sel);
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            __s32           ret;
+
+            //when scaler display on a interlace screen(480i, ntsc etc), scaler window must be even vertical offset
+            regn->y &= ((gdisp.screen[sel].b_out_interlace== 1)?0xfffffffe:0xffffffff);
+
+            outsize.height = regn->height;
+            outsize.width = regn->width;
+
+            ret = Scaler_Set_Output_Size(layer_man->scaler_index, &outsize);
+            if(ret != DIS_SUCCESS)
+            {
+                DE_WRN("Scaler_Set_Output_Size fail!\n");
+                BSP_disp_cfg_finish(sel);
+                return ret;
+            }
+        }
+        if(get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV && layer_man->para.mode != DISP_LAYER_WORK_MODE_SCALER)
+        {
+        	Yuv_Channel_adjusting(sel, layer_man->para.fb.mode, layer_man->para.fb.format, &layer_man->para.src_win.x , &regn->width);
+        }
+        DE_BE_Layer_Set_Screen_Win(sel, hid, regn);
+	    OSAL_IrqLock(&cpu_sr);
+	    layer_man->para.scn_win.x = regn->x;
+	    layer_man->para.scn_win.y = regn->y;
+	    layer_man->para.scn_win.width = regn->width;
+	    layer_man->para.scn_win.height = regn->height;
+	    OSAL_IrqUnLock(cpu_sr);
+
+	    if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+	    {
+	    	gdisp.scaler[layer_man->scaler_index].b_reg_change = TRUE;
+	    }
+		BSP_disp_cfg_finish(sel);
+
+	    return DIS_SUCCESS;
+    }
+    else
+    {
+    	DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+
+}
+
+
+__s32 BSP_disp_layer_get_screen_window(__u32 sel, __u32 hid,__disp_rect_t *regn)
+{
+    __layer_man_t * layer_man;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(regn==NULL)
+    {
+        return DIS_PARA_FAILED;
+    }
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+		regn->x = layer_man->para.scn_win.x;
+		regn->y = layer_man->para.scn_win.y;
+		regn->width = layer_man->para.scn_win.width;
+		regn->height = layer_man->para.scn_win.height;
+
+        return DIS_SUCCESS;
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+
+
+__s32 BSP_disp_layer_set_para(__u32 sel, __u32 hid,__disp_layer_info_t *player)
+{
+    __s32 ret;
+    __u32 cpu_sr;
+    __layer_man_t * layer_man;
+    __u32 prio_tmp = 0;
+    __u32 size;
+
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(player->b_from_screen)
+    {
+        player->mode = DISP_LAYER_WORK_MODE_SCALER;
+    }
+
+    if(layer_man->status & LAYER_USED)
+    {
+    	BSP_disp_cfg_start(sel);
+        if(player->mode != DISP_LAYER_WORK_MODE_NORMAL || get_fb_type(player->fb.format) != DISP_FB_TYPE_YUV)
+        {
+            if(layer_man->byuv_ch)
+            {
+                Yuv_Channel_Release(sel, hid);
+            }
+        }
+        if(player->mode != DISP_LAYER_WORK_MODE_SCALER)
+        {
+            if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+            {
+                Scaler_Release(layer_man->scaler_index, TRUE);
+                DE_BE_Layer_Video_Enable(sel, hid, FALSE);
+                DE_BE_Layer_Video_Ch_Sel(sel, hid, 0);
+                layer_man->para.mode = DISP_LAYER_WORK_MODE_NORMAL;
+            }
+        }
+
+        if(player->mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            __disp_scaler_t * scaler;
+
+            if(layer_man->para.mode != DISP_LAYER_WORK_MODE_SCALER)
+            {
+        	    __u32 format = DISP_FORMAT_ARGB8888;
+
+        	    ret = Scaler_Request(0xff);
+        	    if(ret < 0)
+        	    {
+        	        DE_WRN("request scaler layer fail!\n");
+        	        BSP_disp_cfg_finish(sel);
+        	        return DIS_NO_RES;
+        	    }
+        	    DE_SCAL_Start(ret);
+
+        	    format = DISP_FORMAT_ARGB8888;
+        	    DE_BE_Layer_Set_Format(sel, hid, format,FALSE,DISP_SEQ_ARGB);
+        	    DE_BE_Layer_Video_Enable(sel, hid, TRUE);
+        	    DE_BE_Layer_Video_Ch_Sel(sel, hid, ret);
+        	    layer_man->scaler_index = ret;
+        	    layer_man->para.mode = DISP_LAYER_WORK_MODE_SCALER;
+        	    gdisp.scaler[ret].screen_index = sel;
+        	}
+        	scaler = &(gdisp.scaler[layer_man->scaler_index]) ;
+
+        	player->scn_win.y &= ((gdisp.screen[sel].b_out_interlace== 1)?0xfffffffe:0xffffffff);
+            scaler->out_fb.seq= DISP_SEQ_ARGB;
+            scaler->out_fb.format= DISP_FORMAT_RGB888;
+            scaler->out_size.height  = player->scn_win.height;
+            scaler->out_size.width   = player->scn_win.width;
+        	if(player->b_from_screen)
+        	{
+        	    scaler->src_win.x = 0;
+        	    scaler->src_win.y = 0;
+        	    scaler->src_win.width = BSP_disp_get_screen_width(1-sel);
+        	    scaler->src_win.height = BSP_disp_get_screen_height(1-sel);
+        	    scaler->in_fb.addr[0] = 0;
+        	    scaler->in_fb.size.width = BSP_disp_get_screen_width(1-sel);
+        	    scaler->in_fb.size.height = BSP_disp_get_screen_height(1-sel);
+        	    scaler->in_fb.format = DISP_FORMAT_ARGB8888;
+        	    scaler->in_fb.seq = DISP_SEQ_ARGB;
+        	    scaler->in_fb.mode = DISP_MOD_INTERLEAVED;
+        	    scaler->in_fb.br_swap = FALSE;
+        	    scaler->in_fb.cs_mode = DISP_BT601;
+        	    image_clk_on(sel);
+        	    Image_open(1 - sel);
+        	    DE_BE_Output_Select(1-sel, 6+layer_man->scaler_index);
+        	    DE_SCAL_Input_Select(layer_man->scaler_index, 6 + (1-sel));
+        	    gdisp.screen[1-sel].image_output_type = IMAGE_OUTPUT_SCALER;
+        	}
+        	else
+        	{
+                scaler->src_win.x       = player->src_win.x;
+                scaler->src_win.y       = player->src_win.y;
+                scaler->src_win.width   = player->src_win.width;
+                scaler->src_win.height  = player->src_win.height;
+                memcpy(&scaler->in_fb, &player->fb, sizeof(__disp_fb_t));
+                DE_SCAL_Input_Select(layer_man->scaler_index, 0);
+            }
+            scaler->b_trd_out = player->b_trd_out;
+            scaler->out_trd_mode = player->out_trd_mode;
+            DE_SCAL_Output_Select(layer_man->scaler_index, sel);
+            Scaler_Set_Para(layer_man->scaler_index, scaler);
+        }
+        else
+        {
+            if(get_fb_type(player->fb.format) == DISP_FB_TYPE_YUV)//yuv channel
+            {
+        	    if(layer_man->byuv_ch == FALSE)
+        	    {
+            	    __s32 err = 0;
+
+            		err = Yuv_Channel_Request(sel, hid);
+            		if(err != DIS_SUCCESS)
+            		{
+            		    DE_WRN("request yuv channel fail\n");
+            		    BSP_disp_cfg_finish(sel);
+            			return err;
+            		}
+        		}
+        		Yuv_Channel_adjusting(sel, player->fb.mode, player->fb.format, &player->src_win.x, &player->scn_win.width);
+        		Yuv_Channel_Set_framebuffer(sel, &(player->fb), player->src_win.x, player->src_win.y);
+            }
+            else//normal rgb
+            {
+        	    layer_src_t layer_fb;
+        	    __u32 bpp, size;
+
+                layer_fb.fb_addr    = (__u32)OSAL_VAtoPA((void*)player->fb.addr[0]);
+                layer_fb.format = player->fb.format;
+                layer_fb.pixseq     = img_sw_para_to_reg(3,0,player->fb.seq);
+                layer_fb.br_swap    = player->fb.br_swap;
+                layer_fb.fb_width   = player->fb.size.width;
+                layer_fb.offset_x   = player->src_win.x;
+                layer_fb.offset_y   = player->src_win.y;
+
+	            bpp = DE_BE_Format_To_Bpp(sel, layer_fb.format);
+                size = (player->fb.size.width * layer_man->para.src_win.height * bpp + 7)/8;
+                OSAL_CacheRangeFlush((void *)player->fb.addr[0], size,CACHE_CLEAN_FLUSH_D_CACHE_REGION);
+                DE_BE_Layer_Set_Framebuffer(sel, hid,&layer_fb);
+            }
+        }
+
+        DE_BE_Layer_Set_Work_Mode(sel, hid, player->mode);
+        DE_BE_Layer_Set_Pipe(sel, hid, player->pipe);
+        DE_BE_Layer_Alpha_Enable(sel, hid, player->alpha_en);
+        DE_BE_Layer_Set_Alpha_Value(sel, hid, player->alpha_val);
+        DE_BE_Layer_ColorKey_Enable(sel, hid, player->ck_enable);
+        DE_BE_Layer_Set_Screen_Win(sel,hid,&player->scn_win);
+
+        OSAL_IrqLock(&cpu_sr);
+        prio_tmp = layer_man->para.prio;
+        memcpy(&(layer_man->para),player,sizeof(__disp_layer_info_t));
+        layer_man->para.prio = prio_tmp;//ignore the prio setting
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            layer_man->para.src_win.width = player->src_win.width;
+            layer_man->para.src_win.height = player->src_win.height;
+            layer_man->para.b_from_screen = player->b_from_screen;
+        }
+        OSAL_IrqUnLock(cpu_sr);
+
+        size = (player->fb.size.width * player->src_win.height * de_format_to_bpp(player->fb.format) + 7)/8;
+        OSAL_CacheRangeFlush((void *)player->fb.addr[0],size ,CACHE_CLEAN_FLUSH_D_CACHE_REGION);
+
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+        	gdisp.scaler[layer_man->scaler_index].b_reg_change = TRUE;
+        }
+		BSP_disp_cfg_finish(sel);
+
+        return DIS_SUCCESS;
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+
+__s32 BSP_disp_layer_get_para(__u32 sel, __u32 hid,__disp_layer_info_t *player)//todo
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+		memcpy(player, &layer_man->para, sizeof(__disp_layer_info_t));
+
+		return DIS_SUCCESS;
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_set_smooth(__u32 sel, __u32 hid, __disp_video_smooth_t  mode)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            BSP_disp_scaler_set_smooth(layer_man->scaler_index, mode);
+            return DIS_SUCCESS;
+        }
+        else
+        {
+            DE_WRN("layer not scaler mode!\n");
+            return DIS_NOT_SUPPORT;
+        }
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_get_smooth(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if(layer_man->status & LAYER_USED)
+    {
+        if(layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        {
+            __s32 mode;
+            mode = (__s32)BSP_disp_scaler_get_smooth(layer_man->scaler_index);
+            return mode;
+        }
+        else
+        {
+            DE_WRN("layer not scaler mode!\n");
+            return DIS_NOT_SUPPORT;
+        }
+    }
+    else
+    {
+        DE_WRN("layer not inited!\n");
+        return DIS_OBJ_NOT_INITED;
+    }
+}
+
+__s32 BSP_disp_layer_set_bright(__u32 sel, __u32 hid, __u32 bright)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        gdisp.scaler[layer_man->scaler_index].bright = bright;
+        if(gdisp.scaler[layer_man->scaler_index].enhance_en == TRUE)
+        {
+            Scaler_Set_Enhance(layer_man->scaler_index, gdisp.scaler[layer_man->scaler_index].bright, gdisp.scaler[layer_man->scaler_index].contrast,
+                                gdisp.scaler[layer_man->scaler_index].saturation, gdisp.scaler[layer_man->scaler_index].hue);
+        }
+
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_bright(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        return gdisp.scaler[layer_man->scaler_index].bright;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_set_contrast(__u32 sel, __u32 hid, __u32 contrast)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        gdisp.scaler[layer_man->scaler_index].contrast = contrast;
+        if(gdisp.scaler[layer_man->scaler_index].enhance_en == TRUE)
+        {
+            Scaler_Set_Enhance(layer_man->scaler_index, gdisp.scaler[layer_man->scaler_index].bright, gdisp.scaler[layer_man->scaler_index].contrast,
+                                gdisp.scaler[layer_man->scaler_index].saturation, gdisp.scaler[layer_man->scaler_index].hue);
+        }
+
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_contrast(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        return gdisp.scaler[layer_man->scaler_index].contrast;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_set_saturation(__u32 sel, __u32 hid, __u32 saturation)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        gdisp.scaler[layer_man->scaler_index].saturation = saturation;
+        if(gdisp.scaler[layer_man->scaler_index].enhance_en == TRUE)
+        {
+            Scaler_Set_Enhance(layer_man->scaler_index, gdisp.scaler[layer_man->scaler_index].bright, gdisp.scaler[layer_man->scaler_index].contrast,
+                                gdisp.scaler[layer_man->scaler_index].saturation, gdisp.scaler[layer_man->scaler_index].hue);
+        }
+
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_saturation(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        return gdisp.scaler[layer_man->scaler_index].saturation;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_set_hue(__u32 sel, __u32 hid, __u32 hue)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        gdisp.scaler[layer_man->scaler_index].hue = hue;
+        if(gdisp.scaler[layer_man->scaler_index].enhance_en == TRUE)
+        {
+            Scaler_Set_Enhance(layer_man->scaler_index, gdisp.scaler[layer_man->scaler_index].bright, gdisp.scaler[layer_man->scaler_index].contrast,
+                                gdisp.scaler[layer_man->scaler_index].saturation, gdisp.scaler[layer_man->scaler_index].hue);
+        }
+
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_hue(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        return gdisp.scaler[layer_man->scaler_index].hue;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_enhance_enable(__u32 sel, __u32 hid, __bool enable)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        if(enable == FALSE)
+        {
+            Scaler_Set_Enhance(layer_man->scaler_index, 32, 32,32, 32);
+        }
+        else
+        {
+            Scaler_Set_Enhance(layer_man->scaler_index, gdisp.scaler[layer_man->scaler_index].bright, gdisp.scaler[layer_man->scaler_index].contrast,
+                                gdisp.scaler[layer_man->scaler_index].saturation, gdisp.scaler[layer_man->scaler_index].hue);
+        }
+        gdisp.scaler[layer_man->scaler_index].enhance_en = enable;
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_enhance_enable(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        return gdisp.scaler[layer_man->scaler_index].enhance_en;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_vpp_enable(__u32 sel, __u32 hid, __bool enable)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        DE_SCAL_Vpp_Enable(sel, enable);
+        gdisp.scaler[layer_man->scaler_index].vpp_en = enable;
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_vpp_enable(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        return gdisp.scaler[layer_man->scaler_index].vpp_en;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_set_luma_sharp_level(__u32 sel, __u32 hid, __u32 level)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        DE_SCAL_Vpp_Set_Luma_Sharpness_Level(sel,level);
+        gdisp.scaler[layer_man->scaler_index].luma_sharpe_level = level;
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_luma_sharp_level(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        return gdisp.scaler[layer_man->scaler_index].luma_sharpe_level;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_set_chroma_sharp_level(__u32 sel, __u32 hid, __u32 level)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        DE_SCAL_Vpp_Set_Chroma_Sharpness_Level(sel,level);
+        gdisp.scaler[layer_man->scaler_index].chroma_sharpe_level = level;
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_chroma_sharp_level(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        return gdisp.scaler[layer_man->scaler_index].chroma_sharpe_level;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_set_white_exten_level(__u32 sel, __u32 hid, __u32 level)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        DE_SCAL_Vpp_Set_White_Level_Extension(sel,level);
+        gdisp.scaler[layer_man->scaler_index].while_exten_level = level;
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_white_exten_level(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        return gdisp.scaler[layer_man->scaler_index].while_exten_level;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_set_black_exten_level(__u32 sel, __u32 hid, __u32 level)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        DE_SCAL_Vpp_Set_Black_Level_Extension(sel,level);
+        gdisp.scaler[layer_man->scaler_index].black_exten_level = level;
+        return DIS_SUCCESS;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
+__s32 BSP_disp_layer_get_black_exten_level(__u32 sel, __u32 hid)
+{
+    __layer_man_t * layer_man;
+
+    hid= HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    layer_man = &gdisp.screen[sel].layer_manage[hid];
+    if((layer_man->status & LAYER_USED) && (layer_man->para.mode == DISP_LAYER_WORK_MODE_SCALER) && (get_fb_type(layer_man->para.fb.format) == DISP_FB_TYPE_YUV))
+    {
+        return gdisp.scaler[layer_man->scaler_index].black_exten_level;
+    }
+    return DIS_NOT_SUPPORT;
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_layer.h b/drivers/video/sun4i/disp/de_bsp/de/disp_layer.h
new file mode 100644
index 0000000..547224b
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_layer.h
@@ -0,0 +1,42 @@
+
+#ifndef _DISP_LAYER_H_
+#define _DISP_LAYER_H_
+
+#include "disp_display_i.h"
+
+#define HLID_ASSERT(no,max)   do{if((__s32)(no)<DIS_SUCCESS ||(no) >= (max))   \
+                                   return DIS_PARA_FAILED; \
+                             }while(0);
+
+#define IDLE_HID    0xff
+#define IDLE_PRIO   0xff
+
+#define LAYER_OPENED        0x00000001
+#define LAYER_OPEN_MASK     (~LAYER_OPENED)
+#define LAYER_USED          0x00000002
+#define LAYER_USED_MASK     (~(LAYER_USED))
+
+typedef struct layer_man_t
+{
+    __u32               status;
+    __bool              byuv_ch;
+    __u32               scaler_index;//used if scaler mode,  0:scaler0, 1:scaler1
+    __disp_layer_info_t para;
+}__layer_man_t;
+
+typedef enum
+{
+    DISP_FB_TYPE_RGB=0x0,
+    DISP_FB_TYPE_YUV=0x1,
+}__disp_pixel_type_t;
+
+
+__u32 Layer_Get_Prio(__u32 sel, __u32 hid);
+__disp_pixel_type_t get_fb_type(__disp_pixel_fmt_t  format);
+__s32 de_format_to_bpp(__disp_pixel_fmt_t fmt);
+__s32 img_sw_para_to_reg(__u8 type, __u8 mode, __u8 value);
+__s32 Yuv_Channel_Set_framebuffer(__u32 sel, __disp_fb_t * pfb, __u32 xoffset, __u32 yoffset);
+__s32 Yuv_Channel_adjusting(__u32 sel, __u32 mode,__u32 format, __s32 *src_x, __u32 *scn_width);
+
+#endif
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_lcd.c b/drivers/video/sun4i/disp/de_bsp/de/disp_lcd.c
new file mode 100644
index 0000000..41c7b2b
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_lcd.c
@@ -0,0 +1,1616 @@
+#include "disp_lcd.h"
+#include "disp_display.h"
+#include "disp_event.h"
+#include "disp_de.h"
+#include "disp_clk.h"
+
+static __lcd_flow_t         open_flow[2];
+static __lcd_flow_t         close_flow[2];
+__panel_para_t              gpanel_info[2];
+static __lcd_panel_fun_t    lcd_panel_fun[2];
+static __hdle               gpio_hdl[2][4];
+
+void LCD_get_reg_bases(__reg_bases_t *para)
+{
+	para->base_lcdc0 = gdisp.init_para.base_lcdc0;
+	para->base_lcdc1 = gdisp.init_para.base_lcdc1;
+	para->base_pioc = gdisp.init_para.base_pioc;
+	para->base_ccmu = gdisp.init_para.base_ccmu;
+	para->base_pwm  = gdisp.init_para.base_pwm;
+}
+
+__s32 LCD_get_panel_para(__u32 sel, __panel_para_t * info)
+{
+    __s32 ret = 0;
+    char primary_key[20];
+    __s32 value = 0;
+    __u32 i = 0;
+
+    sprintf(primary_key, "lcd%d_para", sel);
+
+    memset(info, 0, sizeof(__panel_para_t));
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_x", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_x fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_x = value;
+        DE_INF("lcd_x = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_y", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_y fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_y = value;
+        DE_INF("lcd_y = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_dclk_freq", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_dclk_freq fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_dclk_freq = value;
+        DE_INF("lcd_dclk_freq = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_pwm_not_used", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_pwm_not_used fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_pwm_not_used = value;
+        DE_INF("lcd_pwm_not_used = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_pwm_ch", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_pwm_ch fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_pwm_ch = value;
+        DE_INF("lcd_pwm_ch = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_pwm_freq", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_pwm_freq fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_pwm_freq = value;
+        DE_INF("lcd_pwm_freq = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_pwm_pol", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_pwm_pol fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_pwm_pol = value;
+        DE_INF("lcd_pwm_pol = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_if", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_if fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_if = value;
+        DE_INF("lcd_if = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_hbp", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_hbp fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_hbp = value;
+        DE_INF("lcd_hbp = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_ht", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_ht fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_ht = value;
+        DE_INF("lcd_ht = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_vbp", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_vbp fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_vbp = value;
+        DE_INF("lcd_vbp = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_vt", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_vt fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_vt = value;
+        DE_INF("lcd_vt = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_hv_if", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_hv_if fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_hv_if = value;
+        DE_INF("lcd_hv_if = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_hv_smode", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_hv_smode fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_hv_smode = value;
+        DE_INF("lcd_hv_smode = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_hv_s888_if", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_hv_s888_if fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_hv_s888_if = value;
+        DE_INF("lcd_hv_s888_if = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_hv_syuv_if", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_hv_syuv_if fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_hv_syuv_if = value;
+        DE_INF("lcd_hv_syuv_if = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_hv_vspw", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_hv_vspw fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_hv_vspw = value;
+        DE_INF("lcd_hv_vspw = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_hv_hspw", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_hv_hspw fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_hv_hspw = value;
+        DE_INF("lcd_hv_hspw = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_lvds_ch", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_lvds_ch fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_lvds_ch = value;
+        DE_INF("lcd_lvds_ch = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_lvds_mode", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_lvds_mode fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_lvds_mode = value;
+        DE_INF("lcd_lvds_mode = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_lvds_bitwidth", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_lvds_bitwidth fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_lvds_bitwidth = value;
+        DE_INF("lcd_lvds_bitwidth = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_lvds_io_cross", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_lvds_io_cross fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_lvds_io_cross = value;
+        DE_INF("lcd_lvds_io_cross = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_cpu_if", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_cpu_if fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_cpu_if = value;
+        DE_INF("lcd_cpu_if = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_frm", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_frm fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_frm = value;
+        DE_INF("lcd_frm = %d\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_io_cfg0", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_io_cfg0 fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_io_cfg0 = value;
+        DE_INF("lcd_io_cfg0 = 0x%08x\n", value);
+    }
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_gamma_correction_en", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data %s.lcd_gamma_correction_en fail\n", primary_key);
+    }
+    else
+    {
+        info->lcd_gamma_correction_en = value;
+        DE_INF("lcd_gamma_correction_en = %d\n", value);
+    }
+
+    if(info->lcd_gamma_correction_en)
+    {
+        for(i=0; i<256; i++)
+        {
+            char name[20];
+
+            sprintf(name, "lcd_gamma_tbl_%d", i);
+
+            ret = OSAL_Script_FetchParser_Data(primary_key, name, &value, 1);
+            if(ret < 0)
+            {
+                info->lcd_gamma_tbl[i] = (i<<16) | (i<<8) | i;
+                DE_INF("fetch script data %s.%s fail\n", primary_key, name);
+            }
+            else
+            {
+                info->lcd_gamma_tbl[i] = value;
+                DE_INF("%s = 0x%x\n", name, value);
+            }
+        }
+    }
+    return 0;
+}
+
+void LCD_delay_ms(__u32 ms)
+{
+#ifdef __LINUX_OSAL__
+    __u32 timeout = ms*HZ/1000;
+
+    set_current_state(TASK_INTERRUPTIBLE);
+    schedule_timeout(timeout);
+#else
+    volatile __u32 time;
+
+    for(time = 0; time < (ms*1000*1000/10);time++);//assume cpu runs at 1000Mhz,10 clock one cycle
+#endif
+}
+
+
+void LCD_delay_us(__u32 us)
+{
+#ifdef __LINUX_OSAL__
+    udelay(us);
+#else
+    volatile __u32 time;
+
+    for(time = 0; time < (us*700/10);time++);//assume cpu runs at 700Mhz,10 clock one cycle
+#endif
+}
+
+void LCD_OPEN_FUNC(__u32 sel, LCD_FUNC func, __u32 delay)
+{
+    open_flow[sel].func[open_flow[sel].func_num].func = func;
+    open_flow[sel].func[open_flow[sel].func_num].delay = delay;
+    open_flow[sel].func_num++;
+}
+
+
+void LCD_CLOSE_FUNC(__u32 sel, LCD_FUNC func, __u32 delay)
+{
+    close_flow[sel].func[close_flow[sel].func_num].func = func;
+    close_flow[sel].func[close_flow[sel].func_num].delay = delay;
+    close_flow[sel].func_num++;
+}
+
+void TCON_open(__u32 sel)
+{
+    if(gpanel_info[sel].tcon_index == 0)
+    {
+        TCON0_open(sel);
+        gdisp.screen[sel].lcdc_status |= LCDC_TCON0_USED;
+    }
+    else
+    {
+        TCON1_open(sel);
+        gdisp.screen[sel].lcdc_status |= LCDC_TCON1_USED;
+    }
+
+    if(gpanel_info[sel].lcd_if == 3)
+    {
+        LCD_LVDS_open(sel);
+    }
+}
+
+void TCON_close(__u32 sel)
+{
+    if(gpanel_info[sel].lcd_if == 3)
+    {
+        LCD_LVDS_close(sel);
+    }
+
+    if(gpanel_info[sel].tcon_index == 0)
+    {
+        TCON0_close(sel);
+        gdisp.screen[sel].lcdc_status &= LCDC_TCON0_USED_MASK;
+    }
+    else
+    {
+        TCON1_close(sel);
+        gdisp.screen[sel].lcdc_status &= LCDC_TCON1_USED_MASK;
+    }
+}
+
+
+static __u32 pwm_read_reg(__u32 offset)
+{
+    __u32 value = 0;
+
+    value = sys_get_wvalue(gdisp.init_para.base_pwm+offset);
+
+    return value;
+}
+
+static __s32 pwm_write_reg(__u32 offset, __u32 value)
+{
+    sys_put_wvalue(gdisp.init_para.base_pwm+offset, value);
+
+    LCD_delay_ms(20);
+
+    return 0;
+}
+
+__s32 pwm_enable(__u32 channel, __bool b_en)
+{
+    __u32 tmp = 0;
+    user_gpio_set_t gpio_info[1];
+    char primary_key[20];
+    __hdle hdl;
+    __s32 ret = 0;
+
+    sprintf(primary_key, "lcd%d_para", channel);
+    memset(gpio_info, 0, sizeof(user_gpio_set_t));
+    ret = OSAL_Script_FetchParser_Data(primary_key,"lcd_pwm", (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_pwm fail\n",primary_key);
+        return -1;
+    }
+    else
+    {
+        DE_INF("%s.%s gpio_port=%d,gpio_port_num:%d, mul_sel:%d\n",primary_key, "lcd_pwm", gpio_info->port, gpio_info->port_num, gpio_info->mul_sel);
+    }
+    if(b_en)
+    {
+        gpio_info->mul_sel = 2;
+    }
+    else
+    {
+        gpio_info->mul_sel = 0;
+    }
+    hdl = OSAL_GPIO_Request(gpio_info, 1);
+    OSAL_GPIO_Release(hdl, 2);
+
+    if(channel == 0)
+    {
+        tmp = pwm_read_reg(0x200);
+        if(b_en)
+        {
+            tmp |= (1<<4);
+        }
+        else
+        {
+            tmp &= (~(1<<4));
+        }
+        pwm_write_reg(0x200,tmp);
+    }
+    else
+    {
+        tmp = pwm_read_reg(0x200);
+        if(b_en)
+        {
+            tmp |= (1<<19);
+        }
+        else
+        {
+            tmp &= (~(1<<19));
+        }
+        pwm_write_reg(0x200,tmp);
+    }
+
+    gdisp.pwm[channel].enable = b_en;
+
+    return 0;
+}
+
+//channel: pwm channel,0/1
+//pwm_info->freq:  pwm freq, in hz
+//pwm_info->active_state: 0:low level; 1:high level
+__s32 pwm_set_para(__u32 channel, __pwm_info_t * pwm_info)
+{
+    __u32 pre_scal[10] = {120, 180, 240, 360, 480, 12000, 24000, 36000, 48000, 72000};
+    __u32 pre_scal_id = 0, entire_cycle = 16, active_cycle = 12;
+    __u32 i=0, j=0, tmp=0;
+    __u32 freq;
+
+    freq = 1000000 / pwm_info->period_ns;
+
+    if(freq < 100)
+    {
+        DE_WRN("pwm preq is less then 100hz, fix to 100hz\n");
+        freq = 100;
+    }
+    else if(freq > 50000)
+    {
+        DE_WRN("pwm preq is large then 50khz, fix to 50khz\n");
+        freq = 50000;
+    }
+
+    if(freq > 12500)
+    {
+        pre_scal_id = 0;
+        entire_cycle = (24000000 / pre_scal[pre_scal_id] + (freq/2)) / freq;
+        DE_INF("pre_scal:%d, entire_cycle:%d, pwm_freq:%d\n", pre_scal[i], entire_cycle, 24000000 / pre_scal[pre_scal_id] / entire_cycle );
+    }
+    else
+    {
+    	for(i=0; i<10; i++)
+    	{
+    	    for(j=16; j<=256; j+=16)
+    	    {
+    	        __u32 pwm_freq = 0;
+
+    	        pwm_freq = 24000000 / (pre_scal[i] * j);
+    	        DE_INF("pre_scal:%d, entire_cycle:%d, pwm_freq:%d\n", pre_scal[i], j, pwm_freq);
+    	        if(abs(pwm_freq - freq) < abs(tmp - freq))
+    	        {
+    	            tmp = pwm_freq;
+    	            pre_scal_id = i;
+    	            entire_cycle = j;
+    	            DE_INF("----%d\n", tmp);
+    	        }
+    	    }
+    	}
+	}
+    active_cycle = (pwm_info->duty_ns * entire_cycle + (pwm_info->period_ns/2)) / pwm_info->period_ns;
+
+    gdisp.pwm[channel].enable = pwm_info->enable;
+    gdisp.pwm[channel].freq = freq;
+	gdisp.pwm[channel].pre_scal = pre_scal[pre_scal_id];
+    gdisp.pwm[channel].active_state = pwm_info->active_state;
+    gdisp.pwm[channel].duty_ns = pwm_info->duty_ns;
+    gdisp.pwm[channel].period_ns = pwm_info->period_ns;
+    gdisp.pwm[channel].entire_cycle = entire_cycle;
+    gdisp.pwm[channel].active_cycle = active_cycle;
+
+    if(pre_scal_id >= 5)
+    {
+        pre_scal_id += 3;
+    }
+
+    if(channel == 0)
+    {
+        pwm_write_reg(0x204, ((entire_cycle - 1)<< 16) | active_cycle);
+
+        tmp = pwm_read_reg(0x200) & 0xffffff00;
+        tmp |= ((1<<6) | (pwm_info->active_state<<5) | pre_scal_id);//bit6:gatting the special clock for pwm0; bit5:pwm0  active state is high level
+        pwm_write_reg(0x200,tmp);
+    }
+    else
+    {
+        pwm_write_reg(0x208, ((entire_cycle - 1)<< 16) | active_cycle);
+
+        tmp = pwm_read_reg(0x200) & 0xff807fff;
+        tmp |= ((1<<21) | (pwm_info->active_state<<20) | (pre_scal_id<<15));//bit21:gatting the special clock for pwm1; bit20:pwm1  active state is high level
+        pwm_write_reg(0x200,tmp);
+    }
+
+    pwm_enable(channel, pwm_info->enable);
+
+    return 0;
+}
+
+__s32 pwm_get_para(__u32 channel, __pwm_info_t * pwm_info)
+{
+    pwm_info->enable = gdisp.pwm[channel].enable;
+    pwm_info->active_state = gdisp.pwm[channel].active_state;
+    pwm_info->duty_ns = gdisp.pwm[channel].duty_ns;
+    pwm_info->period_ns = gdisp.pwm[channel].period_ns;
+
+    return 0;
+}
+
+__s32 pwm_set_duty_ns(__u32 channel, __u32 duty_ns)
+{
+    __u32 active_cycle = 0;
+    __u32 tmp;
+
+    active_cycle = (duty_ns * gdisp.pwm[channel].entire_cycle + (gdisp.pwm[channel].period_ns/2)) / gdisp.pwm[channel].period_ns;
+
+    if(channel == 0)
+    {
+	    tmp = pwm_read_reg(0x204);
+        pwm_write_reg(0x204,(tmp & 0xffff0000) | active_cycle);
+    }
+    else
+    {
+	    tmp = pwm_read_reg(0x208);
+        pwm_write_reg(0x208,(tmp & 0xffff0000) | active_cycle);
+    }
+
+    gdisp.pwm[channel].duty_ns = duty_ns;
+
+    //DE_INF("%d,%d,%d,%d\n", duty_ns, gdisp.pwm[channel].period_ns, active_cycle, gdisp.pwm[channel].entire_cycle);
+    return 0;
+}
+
+__s32 LCD_PWM_EN(__u32 sel, __bool b_en)
+{
+    user_gpio_set_t gpio_info[1];
+    char primary_key[20];
+    __hdle hdl;
+    __s32 ret = 0;
+
+    sprintf(primary_key, "lcd%d_para", sel);
+
+    memset(gpio_info, 0, sizeof(user_gpio_set_t));
+    ret = OSAL_Script_FetchParser_Data(primary_key,"lcd_pwm", (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_pwm fail\n",primary_key);
+        return -1;
+    }
+    else
+    {
+        DE_INF("%s.%s gpio_port=%d,gpio_port_num:%d, mul_sel:%d\n",primary_key, "lcd_pwm", gpio_info->port, gpio_info->port_num, gpio_info->mul_sel);
+    }
+
+    if((OSAL_sw_get_ic_ver() != 0xA) && (gpanel_info[sel].lcd_pwm_not_used == 0))
+    {
+        if(b_en)
+        {
+            pwm_enable(gpanel_info[sel].lcd_pwm_ch, b_en);
+        }
+        else
+        {
+            gpio_info->mul_sel = 1;
+            gpio_info->data = gpanel_info[sel].lcd_pwm_pol;
+            hdl = OSAL_GPIO_Request(gpio_info, 1);
+            OSAL_GPIO_Release(hdl, 2);
+        }
+    }
+    else
+    {
+        if(b_en != gpanel_info[sel].lcd_pwm_pol)
+        {
+            gpio_info->mul_sel = 1;
+            gpio_info->data = 1;
+            hdl = OSAL_GPIO_Request(gpio_info, 1);
+            OSAL_GPIO_Release(hdl, 2);
+        }
+        else
+        {
+            gpio_info->mul_sel = 1;
+            gpio_info->data = 0;
+            hdl = OSAL_GPIO_Request(gpio_info, 1);
+            OSAL_GPIO_Release(hdl, 2);
+        }
+    }
+
+
+
+    return 0;
+}
+
+__s32 LCD_BL_EN(__u32 sel, __bool b_en)
+{
+    user_gpio_set_t  gpio_info[1];
+    __hdle hdl;
+    int  value;
+    int  ret;
+    char primary_key[20];
+
+    sprintf(primary_key, "lcd%d_para", sel);
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_bl_en_used", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_bl_en_used fail\n", primary_key);
+        return -1;
+    }
+    else
+    {
+        DE_INF("%s.lcd_bl_en_used=%d\n",primary_key,value);
+    }
+
+    if(value == 1)
+    {
+        ret = OSAL_Script_FetchParser_Data(primary_key,"lcd_bl_en", (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+        if(ret < 0)
+        {
+            DE_WRN("fetch script data %s.lcd_bl_en fail\n", primary_key);
+            return -1;
+        }
+        else
+        {
+            DE_INF("%s.lcd_bl_en gpio_port=%d,gpio_port_num:%d, data:%d\n",primary_key, gpio_info->port, gpio_info->port_num, gpio_info->data);
+        }
+
+        if(!b_en)
+        {
+            gpio_info->data = (gpio_info->data==0)?1:0;
+        }
+
+        hdl = OSAL_GPIO_Request(gpio_info, 1);
+        OSAL_GPIO_Release(hdl, 2);
+    }
+    return 0;
+}
+
+__s32 LCD_POWER_EN(__u32 sel, __bool b_en)
+{
+    user_gpio_set_t  gpio_info[1];
+    __hdle hdl;
+    int  value;
+    int  ret;
+    char primary_key[20];
+
+    sprintf(primary_key, "lcd%d_para", sel);
+
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_power_used", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_power_used fail\n", primary_key);
+        return -1;
+    }
+    else
+    {
+        DE_INF("%s.lcd_power_used=%d\n",primary_key,value);
+    }
+
+    if(value == 1)
+    {
+        ret = OSAL_Script_FetchParser_Data(primary_key,"lcd_power", (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+        if(ret < 0)
+        {
+            DE_WRN("fetch script data %s.lcd_power fail\n", primary_key);
+            return -1;
+        }
+        else
+        {
+            DE_INF("%s.lcd_power gpio_port=%d,gpio_port_num:%d, data:%d\n", primary_key, gpio_info->port, gpio_info->port_num, gpio_info->data);
+        }
+
+        if(!b_en)
+        {
+            gpio_info->data = (gpio_info->data==0)?1:0;
+        }
+
+        hdl = OSAL_GPIO_Request(gpio_info, 1);
+        OSAL_GPIO_Release(hdl, 2);
+    }
+
+    return 0;
+}
+
+
+__s32 LCD_GPIO_request(__u32 sel, __u32 io_index)
+{
+    user_gpio_set_t  gpio_info[1];
+    int  ret;
+    char primary_key[20],gpio_name[20];
+
+    sprintf(primary_key, "lcd%d_para", sel);
+    sprintf(gpio_name, "lcd_gpio_%d", io_index);
+
+    ret = OSAL_Script_FetchParser_Data(primary_key,gpio_name, (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.%s fail\n",primary_key, gpio_name);
+        return -1;
+    }
+    else
+    {
+        DE_INF("%s.%s gpio_port=%d,gpio_port_num:%d, data:%d\n",primary_key, gpio_name,gpio_info->port, gpio_info->port_num, gpio_info->data);
+    }
+
+    gpio_hdl[sel][io_index] = OSAL_GPIO_Request(gpio_info, 1);
+
+    return 0;
+}
+
+__s32 LCD_GPIO_release(__u32 sel,__u32 io_index)
+{
+    user_gpio_set_t  gpio_info[1];
+    int  ret;
+    char primary_key[20],gpio_name[20];
+
+    sprintf(primary_key, "lcd%d_para", sel);
+    sprintf(gpio_name, "lcd_gpio_%d", io_index);
+
+    ret = OSAL_Script_FetchParser_Data(primary_key,gpio_name, (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.%s fail\n",primary_key, gpio_name);
+        return -1;
+    }
+    else
+    {
+        DE_INF("%s.%s gpio_port=%d,gpio_port_num:%d, data:%d\n",primary_key, gpio_name,gpio_info->port, gpio_info->port_num, gpio_info->data);
+    }
+
+    OSAL_GPIO_Release(gpio_hdl[sel][io_index], 2);
+
+    return 0;
+}
+
+__s32 LCD_GPIO_set_attr(__u32 sel,__u32 io_index, __bool b_output)
+{
+    char gpio_name[20];
+
+    sprintf(gpio_name, "lcd_gpio_%d", io_index);
+    return  OSAL_GPIO_DevSetONEPIN_IO_STATUS(gpio_hdl[sel][io_index], b_output, gpio_name);
+}
+
+__s32 LCD_GPIO_read(__u32 sel,__u32 io_index)
+{
+    char gpio_name[20];
+
+    sprintf(gpio_name, "lcd_gpio_%d", io_index);
+    return OSAL_GPIO_DevREAD_ONEPIN_DATA(gpio_hdl[sel][io_index], gpio_name);
+}
+
+__s32 LCD_GPIO_write(__u32 sel,__u32 io_index, __u32 data)
+{
+    char gpio_name[20];
+
+    sprintf(gpio_name, "lcd_gpio_%d", io_index);
+    return OSAL_GPIO_DevWRITE_ONEPIN_DATA(gpio_hdl[sel][io_index], data, gpio_name);
+}
+
+void LCD_CPU_register_irq(__u32 sel, void (*Lcd_cpuisr_proc) (void))
+{
+    gdisp.screen[sel].LCD_CPUIF_ISR = Lcd_cpuisr_proc;
+}
+
+__s32 Disp_lcdc_pin_cfg(__u32 sel, __disp_output_type_t out_type, __u32 bon)
+{
+    if(out_type == DISP_OUTPUT_TYPE_LCD)
+    {
+        __hdle lcd_pin_hdl;
+        user_gpio_set_t  gpio_info[1];
+        char primary_key[20];
+        char sub_name[28][20] = {"lcdd0", "lcdd1", "lcdd2", "lcdd3", "lcdd4", "lcdd5", "lcdd6", "lcdd7", "lcdd8", "lcdd9", "lcdd10", "lcdd11",
+                             "lcdd12", "lcdd13", "lcdd14", "lcdd15", "lcdd16", "lcdd17", "lcdd18", "lcdd19", "lcdd20", "lcdd21", "lcdd22",
+                             "lcdd23", "lcdclk", "lcdde", "lcdhsync", "lcdvsync"};
+        int  i, ret;
+
+        sprintf(primary_key, "lcd%d_para", sel);
+        for(i=0; i<28; i++)
+        {
+            memset(gpio_info, 0, sizeof(user_gpio_set_t));
+            ret = OSAL_Script_FetchParser_Data(primary_key,sub_name[i], (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+            if(ret < 0)
+            {
+                DE_INF("fetch script data %s.%s fail\n",primary_key, sub_name[i]);
+                continue;
+            }
+            else
+            {
+                DE_INF("%s.%s gpio_port=%d,gpio_port_num:%d, mul_sel:%d\n",primary_key, sub_name[i], gpio_info->port, gpio_info->port_num, gpio_info->mul_sel);
+            }
+            if(!bon)
+            {
+                gpio_info->mul_sel = 0;
+            }
+            else
+            {
+                if((gpanel_info[sel].lcd_if == 3) && (gpio_info->mul_sel==2))
+                {
+                    gpio_info->mul_sel = 3;
+                }
+            }
+            lcd_pin_hdl = OSAL_GPIO_Request(gpio_info, 1);
+            OSAL_GPIO_Release(lcd_pin_hdl, 2);
+        }
+    }
+    else if(out_type == DISP_OUTPUT_TYPE_VGA)
+    {
+        __u32 reg_start = 0;
+        __u32 tmp = 0;
+
+        if(sel == 0)
+        {
+            reg_start = gdisp.init_para.base_pioc+0x6c;
+        }
+        else
+        {
+            reg_start = gdisp.init_para.base_pioc+0xfc;
+        }
+
+        if(bon)
+        {
+            tmp = sys_get_wvalue(reg_start + 0x0c) & 0xffff00ff;
+            sys_put_wvalue(reg_start + 0x0c,tmp | 0x00002200);
+        }
+        else
+        {
+            tmp = sys_get_wvalue(reg_start + 0x0c) & 0xffff00ff;
+            sys_put_wvalue(reg_start + 0x0c,tmp);
+        }
+    }
+
+	return DIS_SUCCESS;
+}
+
+
+#ifdef __LINUX_OSAL__
+__s32 Disp_lcdc_event_proc(int irq, void *parg)
+#else
+__s32 Disp_lcdc_event_proc(void *parg)
+#endif
+{
+    __u32  lcdc_flags;
+    __u32 sel = (__u32)parg;
+
+    lcdc_flags=LCDC_query_int(sel);
+
+    if(lcdc_flags & LCDC_VBI_LCD)
+    {
+        LCDC_clear_int(sel,LCDC_VBI_LCD);
+        LCD_vbi_event_proc(sel, 0);
+    }
+    if(lcdc_flags & LCDC_VBI_HD)
+    {
+        LCDC_clear_int(sel,LCDC_VBI_HD);
+        LCD_vbi_event_proc(sel, 1);
+    }
+    if(lcdc_flags & LCDC_LTI_LCD_FLAG)
+    {
+        LCDC_clear_int(sel,LCDC_LTI_LCD_FLAG);
+        LCD_line_event_proc(sel, 0);
+    }
+    if(lcdc_flags & LCDC_LTI_HD_FLAG)
+    {
+        LCDC_clear_int(sel,LCDC_LTI_HD_FLAG);
+        LCD_line_event_proc(sel, 1);
+    }
+
+    return OSAL_IRQ_RETURN;
+}
+
+__s32 Disp_lcdc_init(__u32 sel)
+{
+    __s32 ret = 0;
+    char primary_key[20];
+    __s32 value = 0;
+
+    lcdc_clk_init(sel);
+    lvds_clk_init();
+    lcdc_clk_on(sel);	//??need to be open
+    LCDC_init(sel);
+    lcdc_clk_off(sel);
+
+    if(sel == 0)
+    {
+        OSAL_RegISR(INTC_IRQNO_LCDC0,0,Disp_lcdc_event_proc,(void*)sel,0,0);
+#ifndef __LINUX_OSAL__
+        OSAL_InterruptEnable(INTC_IRQNO_LCDC0);
+        LCD_get_panel_funs_0(&lcd_panel_fun[sel]);
+#endif
+    }
+    else
+    {
+        OSAL_RegISR(INTC_IRQNO_LCDC1,0,Disp_lcdc_event_proc,(void*)sel,0,0);
+#ifndef __LINUX_OSAL__
+        OSAL_InterruptEnable(INTC_IRQNO_LCDC1);
+        LCD_get_panel_funs_1(&lcd_panel_fun[sel]);
+#endif
+    }
+
+    sprintf(primary_key, "lcd%d_para", sel);
+    ret = OSAL_Script_FetchParser_Data(primary_key, "lcd_used", &value, 1);
+    if(ret < 0)
+    {
+        DE_WRN("fetch script data %s.lcd_used fail\n", primary_key);
+        value = 0;
+    }
+    else
+    {
+        DE_INF("%s.lcd_used = %d\n", primary_key, value);
+    }
+    if(value != 0)
+    {
+        if(lcd_panel_fun[sel].cfg_panel_info)
+        {
+            lcd_panel_fun[sel].cfg_panel_info(&gpanel_info[sel]);
+        }
+        else
+        {
+            LCD_get_panel_para(sel, &gpanel_info[sel]);
+        }
+        gpanel_info[sel].tcon_index = 0;
+
+        if((OSAL_sw_get_ic_ver() != 0xA) && (gpanel_info[sel].lcd_pwm_not_used == 0))
+        {
+            __pwm_info_t pwm_info;
+
+            pwm_info.enable = 0;
+            pwm_info.active_state = 1;
+            pwm_info.period_ns = 1000000 / gpanel_info[sel].lcd_pwm_freq;
+            if(gpanel_info[sel].lcd_pwm_pol == 0)
+            {
+                pwm_info.duty_ns = (DISP_LCD_BRIGHT_LEVEL12 * pwm_info.period_ns) / 16;
+            }
+            else
+            {
+                pwm_info.duty_ns = ((16 - DISP_LCD_BRIGHT_LEVEL12) * pwm_info.period_ns) / 16;
+            }
+            pwm_set_para(gpanel_info[sel].lcd_pwm_ch, &pwm_info);
+        }
+    }
+    return DIS_SUCCESS;
+}
+
+
+__s32 Disp_lcdc_exit(__u32 sel)
+{
+    if(sel == 0)
+    {
+        OSAL_InterruptDisable(INTC_IRQNO_LCDC0);
+        OSAL_UnRegISR(INTC_IRQNO_LCDC0,Disp_lcdc_event_proc,(void*)sel);
+    }
+    else if(sel == 1)
+    {
+        OSAL_InterruptDisable(INTC_IRQNO_LCDC1);
+        OSAL_UnRegISR(INTC_IRQNO_LCDC1,Disp_lcdc_event_proc,(void*)sel);
+    }
+
+    LCDC_exit(sel);
+
+    lcdc_clk_exit(sel);
+
+    return DIS_SUCCESS;
+}
+
+__u32 tv_mode_to_width(__disp_tv_mode_t mode)
+{
+    __u32 width = 0;
+
+    switch(mode)
+    {
+        case DISP_TV_MOD_480I:
+        case DISP_TV_MOD_576I:
+        case DISP_TV_MOD_480P:
+        case DISP_TV_MOD_576P:
+        case DISP_TV_MOD_PAL:
+        case DISP_TV_MOD_NTSC:
+        case DISP_TV_MOD_PAL_SVIDEO:
+        case DISP_TV_MOD_NTSC_SVIDEO:
+        case DISP_TV_MOD_PAL_M:
+        case DISP_TV_MOD_PAL_M_SVIDEO:
+        case DISP_TV_MOD_PAL_NC:
+        case DISP_TV_MOD_PAL_NC_SVIDEO:
+            width = 720;
+            break;
+        case DISP_TV_MOD_720P_50HZ:
+        case DISP_TV_MOD_720P_60HZ:
+            width = 1280;
+            break;
+        case DISP_TV_MOD_1080I_50HZ:
+        case DISP_TV_MOD_1080I_60HZ:
+        case DISP_TV_MOD_1080P_24HZ:
+        case DISP_TV_MOD_1080P_50HZ:
+        case DISP_TV_MOD_1080P_60HZ:
+        case DISP_TV_MOD_1080P_24HZ_3D_FP:
+            width = 1920;
+            break;
+        default:
+            width = 0;
+            break;
+    }
+
+    return width;
+}
+
+
+__u32 tv_mode_to_height(__disp_tv_mode_t mode)
+{
+    __u32 height = 0;
+
+    switch(mode)
+    {
+        case DISP_TV_MOD_480I:
+        case DISP_TV_MOD_480P:
+        case DISP_TV_MOD_NTSC:
+        case DISP_TV_MOD_NTSC_SVIDEO:
+        case DISP_TV_MOD_PAL_M:
+        case DISP_TV_MOD_PAL_M_SVIDEO:
+            height = 480;
+            break;
+        case DISP_TV_MOD_576I:
+        case DISP_TV_MOD_576P:
+        case DISP_TV_MOD_PAL:
+        case DISP_TV_MOD_PAL_SVIDEO:
+        case DISP_TV_MOD_PAL_NC:
+        case DISP_TV_MOD_PAL_NC_SVIDEO:
+            height = 576;
+            break;
+        case DISP_TV_MOD_720P_50HZ:
+        case DISP_TV_MOD_720P_60HZ:
+            height = 720;
+            break;
+        case DISP_TV_MOD_1080I_50HZ:
+        case DISP_TV_MOD_1080I_60HZ:
+        case DISP_TV_MOD_1080P_24HZ:
+        case DISP_TV_MOD_1080P_50HZ:
+        case DISP_TV_MOD_1080P_60HZ:
+            height = 1080;
+            break;
+        case DISP_TV_MOD_1080P_24HZ_3D_FP:
+            height = 1080*2;
+            break;
+        default:
+            height = 0;
+            break;
+    }
+
+    return height;
+}
+
+__u32 vga_mode_to_width(__disp_vga_mode_t mode)
+{
+    __u32 width = 0;
+
+    switch(mode)
+    {
+    	case DISP_VGA_H1680_V1050:
+    		width = 1680;
+            break;
+    	case DISP_VGA_H1440_V900:
+    		width = 1440;
+            break;
+    	case DISP_VGA_H1360_V768:
+    		width = 1360;
+            break;
+    	case DISP_VGA_H1280_V1024:
+    		width = 1280;
+            break;
+    	case DISP_VGA_H1024_V768:
+    		width = 1024;
+            break;
+    	case DISP_VGA_H800_V600:
+    		width = 800;
+            break;
+    	case DISP_VGA_H640_V480:
+    		width = 640;
+            break;
+    	case DISP_VGA_H1440_V900_RB:
+    		width = 1440;
+            break;
+    	case DISP_VGA_H1680_V1050_RB:
+    		width = 1680;
+            break;
+    	case DISP_VGA_H1920_V1080_RB:
+    	case DISP_VGA_H1920_V1080:
+    		width = 1920;
+            break;
+        case DISP_VGA_H1280_V720:
+            width = 1280;
+            break;
+    	default:
+    		width = 0;
+            break;
+    }
+
+    return width;
+}
+
+
+__u32 vga_mode_to_height(__disp_vga_mode_t mode)
+{
+    __u32 height = 0;
+
+    switch(mode)
+    {
+    case DISP_VGA_H1680_V1050:
+        height = 1050;
+        break;
+    case DISP_VGA_H1440_V900:
+        height = 900;
+        break;
+    case DISP_VGA_H1360_V768:
+        height = 768;
+        break;
+    case DISP_VGA_H1280_V1024:
+        height = 1024;
+        break;
+    case DISP_VGA_H1024_V768:
+        height = 768;
+        break;
+    case DISP_VGA_H800_V600:
+        height = 600;
+        break;
+    case DISP_VGA_H640_V480:
+        height = 480;
+        break;
+    case DISP_VGA_H1440_V900_RB:
+        height = 1440;
+        break;
+    case DISP_VGA_H1680_V1050_RB:
+        height = 1050;
+        break;
+    case DISP_VGA_H1920_V1080_RB:
+    case DISP_VGA_H1920_V1080:
+        height = 1080;
+        break;
+    case DISP_VGA_H1280_V720:
+        height = 720;
+        break;
+    default:
+        height = 0;
+        break;
+    }
+
+    return height;
+}
+
+// return 0: progressive scan mode; return 1: interlace scan mode
+__u32 Disp_get_screen_scan_mode(__disp_tv_mode_t tv_mode)
+{
+	__u32 ret = 0;
+
+	switch(tv_mode)
+	{
+		case DISP_TV_MOD_480I:
+		case DISP_TV_MOD_NTSC:
+		case DISP_TV_MOD_NTSC_SVIDEO:
+		case DISP_TV_MOD_PAL_M:
+		case DISP_TV_MOD_PAL_M_SVIDEO:
+		case DISP_TV_MOD_576I:
+		case DISP_TV_MOD_PAL:
+		case DISP_TV_MOD_PAL_SVIDEO:
+		case DISP_TV_MOD_PAL_NC:
+		case DISP_TV_MOD_PAL_NC_SVIDEO:
+		case DISP_TV_MOD_1080I_50HZ:
+		case DISP_TV_MOD_1080I_60HZ:
+		    ret = 1;
+		default:
+		    break;
+	}
+
+	return ret;
+}
+
+__s32 BSP_disp_get_screen_width(__u32 sel)
+{
+	__u32 width = 0;
+
+    if((gdisp.screen[sel].status & LCD_ON) || (gdisp.screen[sel].status & TV_ON) || (gdisp.screen[sel].status & HDMI_ON) || (gdisp.screen[sel].status & VGA_ON))
+    {
+        width = DE_BE_get_display_width(sel);
+    }
+    else
+    {
+        width = gpanel_info[sel].lcd_x;
+    }
+
+    return width;
+}
+
+__s32 BSP_disp_get_screen_height(__u32 sel)
+{
+	__u32 height = 0;
+
+    if((gdisp.screen[sel].status & LCD_ON) || (gdisp.screen[sel].status & TV_ON) || (gdisp.screen[sel].status & HDMI_ON) || (gdisp.screen[sel].status & VGA_ON))
+    {
+        height = DE_BE_get_display_height(sel);
+    }
+    else
+    {
+        height = gpanel_info[sel].lcd_y;
+    }
+
+    return height;
+}
+
+__s32 BSP_disp_get_output_type(__u32 sel)
+{
+	if(gdisp.screen[sel].status & TV_ON)
+	{
+	    return (__s32)DISP_OUTPUT_TYPE_TV;
+	}
+
+	if(gdisp.screen[sel].status & LCD_ON)
+	{
+		return (__s32)DISP_OUTPUT_TYPE_LCD;
+	}
+
+	if(gdisp.screen[sel].status & HDMI_ON)
+	{
+		return (__s32)DISP_OUTPUT_TYPE_HDMI;
+	}
+
+	if(gdisp.screen[sel].status & VGA_ON)
+	{
+		return (__s32)DISP_OUTPUT_TYPE_VGA;
+	}
+
+	return (__s32)DISP_OUTPUT_TYPE_NONE;
+}
+
+
+__s32 BSP_disp_get_frame_rate(__u32 sel)
+{
+    __s32 frame_rate = 60;
+
+    if(gdisp.screen[sel].output_type & DISP_OUTPUT_TYPE_LCD)
+    {
+        frame_rate = (gpanel_info[sel].lcd_dclk_freq * 1000000) / (gpanel_info[sel].lcd_ht * (gpanel_info[sel].lcd_vt / 2)) ;
+    }
+    else if(gdisp.screen[sel].output_type & DISP_OUTPUT_TYPE_TV)
+    {
+        switch(gdisp.screen[sel].tv_mode)
+        {
+            case DISP_TV_MOD_480I:
+            case DISP_TV_MOD_480P:
+            case DISP_TV_MOD_NTSC:
+            case DISP_TV_MOD_NTSC_SVIDEO:
+            case DISP_TV_MOD_PAL_M:
+            case DISP_TV_MOD_PAL_M_SVIDEO:
+            case DISP_TV_MOD_720P_60HZ:
+            case DISP_TV_MOD_1080I_60HZ:
+            case DISP_TV_MOD_1080P_60HZ:
+                frame_rate = 60;
+                break;
+            case DISP_TV_MOD_576I:
+            case DISP_TV_MOD_576P:
+            case DISP_TV_MOD_PAL:
+            case DISP_TV_MOD_PAL_SVIDEO:
+            case DISP_TV_MOD_PAL_NC:
+            case DISP_TV_MOD_PAL_NC_SVIDEO:
+            case DISP_TV_MOD_720P_50HZ:
+            case DISP_TV_MOD_1080I_50HZ:
+            case DISP_TV_MOD_1080P_50HZ:
+                frame_rate = 50;
+                break;
+            default:
+                break;
+        }
+    }
+    else if(gdisp.screen[sel].output_type & DISP_OUTPUT_TYPE_HDMI)
+    {
+        switch(gdisp.screen[sel].hdmi_mode)
+        {
+            case DISP_TV_MOD_480I:
+            case DISP_TV_MOD_480P:
+            case DISP_TV_MOD_720P_60HZ:
+            case DISP_TV_MOD_1080I_60HZ:
+            case DISP_TV_MOD_1080P_60HZ:
+                frame_rate = 60;
+                break;
+            case DISP_TV_MOD_576I:
+            case DISP_TV_MOD_576P:
+            case DISP_TV_MOD_720P_50HZ:
+            case DISP_TV_MOD_1080I_50HZ:
+            case DISP_TV_MOD_1080P_50HZ:
+                frame_rate = 50;
+                break;
+            case DISP_TV_MOD_1080P_24HZ:
+            case DISP_TV_MOD_1080P_24HZ_3D_FP:
+                frame_rate = 24;
+                break;
+            default:
+                break;
+        }
+    }
+    else if(gdisp.screen[sel].output_type & DISP_OUTPUT_TYPE_VGA)
+    {
+        frame_rate = 60;
+    }
+
+
+    return frame_rate;
+}
+
+__s32 BSP_disp_lcd_open_before(__u32 sel)
+{
+    disp_clk_cfg(sel, DISP_OUTPUT_TYPE_LCD, DIS_NULL);
+    lcdc_clk_on(sel);
+    image_clk_on(sel);
+    Image_open(sel);//set image normal channel start bit , because every de_clk_off( )will reset this bit
+    Disp_lcdc_pin_cfg(sel, DISP_OUTPUT_TYPE_LCD, 1);
+
+    if(gpanel_info[sel].tcon_index == 0)
+    {
+        TCON0_cfg(sel,(__panel_para_t*)&gpanel_info[sel]);
+    }
+    else
+    {
+        TCON1_cfg_ex(sel,(__panel_para_t*)&gpanel_info[sel]);
+    }
+    BSP_disp_set_yuv_output(sel, FALSE);
+    DE_BE_set_display_size(sel, gpanel_info[sel].lcd_x, gpanel_info[sel].lcd_y);
+    DE_BE_Output_Select(sel, sel);
+
+    open_flow[sel].func_num = 0;
+    lcd_panel_fun[sel].cfg_open_flow(sel);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_lcd_open_after(__u32 sel)
+{
+    //esMEM_SwitchDramWorkMode(DRAM_WORK_MODE_LCD);
+    gdisp.screen[sel].b_out_interlace = 0;
+    gdisp.screen[sel].status |= LCD_ON;
+    gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_LCD;
+
+    return DIS_SUCCESS;
+}
+
+__lcd_flow_t * BSP_disp_lcd_get_open_flow(__u32 sel)
+{
+    return (&open_flow[sel]);
+}
+
+__s32 BSP_disp_lcd_close_befor(__u32 sel)
+{
+	close_flow[sel].func_num = 0;
+	lcd_panel_fun[sel].cfg_close_flow(sel);
+
+	gdisp.screen[sel].status &= LCD_OFF;
+	gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_NONE;
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_lcd_close_after(__u32 sel)
+{
+    Image_close(sel);
+
+    Disp_lcdc_pin_cfg(sel, DISP_OUTPUT_TYPE_LCD, 0);
+	image_clk_off(sel);
+	lcdc_clk_off(sel);
+
+	gdisp.screen[sel].pll_use_status &= ((gdisp.screen[sel].pll_use_status == VIDEO_PLL0_USED)? VIDEO_PLL0_USED_MASK : VIDEO_PLL1_USED_MASK);
+
+	return DIS_SUCCESS;
+}
+
+__lcd_flow_t * BSP_disp_lcd_get_close_flow(__u32 sel)
+{
+    return (&close_flow[sel]);
+}
+
+__s32 BSP_disp_lcd_xy_switch(__u32 sel, __s32 mode)
+{
+    if(gdisp.screen[sel].LCD_CPUIF_XY_Swap != NULL)
+    {
+       LCD_CPU_AUTO_FLUSH(sel,0);
+       LCD_XY_SWAP(sel);
+       (*gdisp.screen[sel].LCD_CPUIF_XY_Swap)(mode);
+       LCD_CPU_AUTO_FLUSH(sel,1);
+    }
+
+    return DIS_SUCCESS;
+}
+
+//setting:  0,       1,      2,....  14,   15
+//pol==0:  0,       2,      3,....  15,   16
+//pol==1: 16,    14,    13, ...   1,   0
+__s32 BSP_disp_lcd_set_bright(__u32 sel, __disp_lcd_bright_t  bright)
+{
+    __u32 duty_ns;
+
+    if((OSAL_sw_get_ic_ver() != 0xA) && (gpanel_info[sel].lcd_pwm_not_used == 0))
+    {
+        if(bright != 0)
+        {
+            bright += 1;
+        }
+
+        if(gpanel_info[sel].lcd_pwm_pol == 0)
+        {
+            duty_ns = (bright * gdisp.pwm[gpanel_info[sel].lcd_pwm_ch].period_ns + 8) / 16;
+        }
+        else
+        {
+            duty_ns = ((16 - bright) * gdisp.pwm[gpanel_info[sel].lcd_pwm_ch].period_ns + 8) / 16;
+        }
+        pwm_set_duty_ns(gpanel_info[sel].lcd_pwm_ch, duty_ns);
+    }
+    gdisp.screen[sel].lcd_bright = bright;
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_lcd_get_bright(__u32 sel)
+{
+    return gdisp.screen[sel].lcd_bright;
+}
+
+__s32 BSP_disp_set_gamma_table(__u32 sel, __u32 *gamtbl_addr,__u32 gamtbl_size)
+{
+    if((gamtbl_addr == NULL) || (gamtbl_size>1024))
+    {
+        DE_WRN("para invalid in BSP_disp_set_gamma_table\n");
+        return DIS_FAIL;
+    }
+
+    TCON1_set_gamma_table(sel,(__u32)(gamtbl_addr),gamtbl_size);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_gamma_correction_enable(__u32 sel)
+{
+	TCON1_set_gamma_Enable(sel,TRUE);
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_gamma_correction_disable(__u32 sel)
+{
+	TCON1_set_gamma_Enable(sel,FALSE);
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_lcd_set_src(__u32 sel, __disp_lcdc_src_t src)
+{
+    switch (src)
+    {
+        case DISP_LCDC_SRC_DE_CH1:
+            TCON0_select_src(sel, LCDC_SRC_DE1);
+            break;
+
+        case DISP_LCDC_SRC_DE_CH2:
+            TCON0_select_src(sel, LCDC_SRC_DE2);
+            break;
+
+        case DISP_LCDC_SRC_DMA:
+            TCON0_select_src(sel, LCDC_SRC_DMA);
+            break;
+
+        case DISP_LCDC_SRC_WHITE:
+            TCON0_select_src(sel, LCDC_SRC_WHITE);
+            break;
+
+        case DISP_LCDC_SRC_BLACK:
+            TCON0_select_src(sel, LCDC_SRC_BLACK);
+            break;
+
+        default:
+            DE_WRN("not supported lcdc src:%d in BSP_disp_tv_set_src\n", src);
+            return DIS_NOT_SUPPORT;
+    }
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_lcd_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+    return lcd_panel_fun[sel].lcd_user_defined_func(sel, para1, para2, para3);
+}
+
+void LCD_set_panel_funs(__lcd_panel_fun_t * lcd0_cfg, __lcd_panel_fun_t * lcd1_cfg)
+{
+    memset(&lcd_panel_fun[0], 0, sizeof(__lcd_panel_fun_t));
+    memset(&lcd_panel_fun[1], 0, sizeof(__lcd_panel_fun_t));
+
+    lcd_panel_fun[0].cfg_panel_info= lcd0_cfg->cfg_panel_info;
+    lcd_panel_fun[0].cfg_open_flow = lcd0_cfg->cfg_open_flow;
+    lcd_panel_fun[0].cfg_close_flow= lcd0_cfg->cfg_close_flow;
+    lcd_panel_fun[0].lcd_user_defined_func = lcd0_cfg->lcd_user_defined_func;
+    lcd_panel_fun[1].cfg_panel_info = lcd1_cfg->cfg_panel_info;
+    lcd_panel_fun[1].cfg_open_flow = lcd1_cfg->cfg_open_flow;
+    lcd_panel_fun[1].cfg_close_flow= lcd1_cfg->cfg_close_flow;
+    lcd_panel_fun[1].lcd_user_defined_func = lcd1_cfg->lcd_user_defined_func;
+}
+
+#ifdef __LINUX_OSAL__
+EXPORT_SYMBOL(LCD_OPEN_FUNC);
+EXPORT_SYMBOL(LCD_CLOSE_FUNC);
+EXPORT_SYMBOL(LCD_get_reg_bases);
+EXPORT_SYMBOL(LCD_delay_ms);
+EXPORT_SYMBOL(LCD_delay_us);
+EXPORT_SYMBOL(TCON_open);
+EXPORT_SYMBOL(TCON_close);
+EXPORT_SYMBOL(LCD_PWM_EN);
+EXPORT_SYMBOL(LCD_BL_EN);
+EXPORT_SYMBOL(LCD_POWER_EN);
+EXPORT_SYMBOL(LCD_CPU_register_irq);
+EXPORT_SYMBOL(LCD_CPU_WR);
+EXPORT_SYMBOL(LCD_CPU_WR_INDEX);
+EXPORT_SYMBOL(LCD_CPU_WR_DATA);
+EXPORT_SYMBOL(LCD_CPU_AUTO_FLUSH);
+EXPORT_SYMBOL(LCD_GPIO_request);
+EXPORT_SYMBOL(LCD_GPIO_release);
+EXPORT_SYMBOL(LCD_GPIO_set_attr);
+EXPORT_SYMBOL(LCD_GPIO_read);
+EXPORT_SYMBOL(LCD_GPIO_write);
+EXPORT_SYMBOL(LCD_set_panel_funs);
+EXPORT_SYMBOL(pwm_set_para);
+EXPORT_SYMBOL(pwm_get_para);
+EXPORT_SYMBOL(pwm_set_duty_ns);
+EXPORT_SYMBOL(pwm_enable);
+
+#endif
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_lcd.h b/drivers/video/sun4i/disp/de_bsp/de/disp_lcd.h
new file mode 100644
index 0000000..24cccd1
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_lcd.h
@@ -0,0 +1,28 @@
+
+#ifndef __DISP_LCD_H__
+#define __DISP_LCD_H__
+
+#include "disp_display_i.h"
+
+
+__s32 Disp_lcdc_init(__u32 sel);
+__s32 Disp_lcdc_exit(__u32 sel);
+
+#ifdef __LINUX_OSAL__
+__s32 Disp_lcdc_event_proc(__s32 irq, void *parg);
+#else
+__s32 Disp_lcdc_event_proc(void *parg);
+#endif
+__s32 Disp_lcdc_pin_cfg(__u32 sel, __disp_output_type_t out_type, __u32 bon);
+__u32 Disp_get_screen_scan_mode(__disp_tv_mode_t tv_mode);
+
+__u32 tv_mode_to_width(__disp_tv_mode_t mode);
+__u32 tv_mode_to_height(__disp_tv_mode_t mode);
+__u32 vga_mode_to_width(__disp_vga_mode_t mode);
+__u32 vga_mode_to_height(__disp_vga_mode_t mode);
+
+
+extern void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun);
+extern void LCD_get_panel_funs_1(__lcd_panel_fun_t * fun);
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_scaler.c b/drivers/video/sun4i/disp/de_bsp/de/disp_scaler.c
new file mode 100644
index 0000000..ec0bf5f
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_scaler.c
@@ -0,0 +1,1227 @@
+
+#include "disp_scaler.h"
+#include "disp_display.h"
+#include "disp_event.h"
+#include "disp_layer.h"
+#include "disp_clk.h"
+#include "disp_lcd.h"
+#include "disp_de.h"
+
+
+// 0:scaler input pixel format
+// 1:scaler input yuv mode
+// 2:scaler input pixel sequence
+// 3:scaler output format
+__s32  Scaler_sw_para_to_reg(__u8 type, __u8 value)
+{
+	if(type == 0)//scaler input  pixel format
+	{
+	    if(value == DISP_FORMAT_YUV444)
+	    {
+	        return DE_SCAL_INYUV444;
+	    }
+	    else if(value == DISP_FORMAT_YUV420)
+	    {
+	        return DE_SCAL_INYUV420;
+	    }
+	    else if(value == DISP_FORMAT_YUV422)
+	    {
+	        return DE_SCAL_INYUV422;
+	    }
+	    else if(value == DISP_FORMAT_YUV411)
+	    {
+	        return DE_SCAL_INYUV411;
+	    }
+	    else if(value == DISP_FORMAT_CSIRGB)
+	    {
+	        return DE_SCAL_INCSIRGB;
+	    }
+	    else if(value == DISP_FORMAT_ARGB8888)
+	    {
+	        return DE_SCAL_INRGB888;
+	    }
+	    else if(value == DISP_FORMAT_RGB888)
+	    {
+	        return DE_SCAL_INRGB888;
+	    }
+	    else
+	    {
+	        DE_WRN("not supported scaler input pixel format:%d in Scaler_sw_para_to_reg\n",value);
+	    }
+    }
+    else if(type == 1)//scaler input mode
+    {
+	    if(value == DISP_MOD_INTERLEAVED)
+	    {
+	        return DE_SCAL_INTER_LEAVED;
+	    }
+	    else if(value == DISP_MOD_MB_PLANAR)
+	    {
+	        return DE_SCAL_PLANNARMB;
+	    }
+	    else if(value == DISP_MOD_NON_MB_PLANAR)
+	    {
+	        return DE_SCAL_PLANNAR;
+	    }
+	    else if(value == DISP_MOD_NON_MB_UV_COMBINED)
+	    {
+	        return DE_SCAL_UVCOMBINED;
+	    }
+	    else if(value == DISP_MOD_MB_UV_COMBINED)
+	    {
+	        return DE_SCAL_UVCOMBINEDMB;
+	    }
+	    else
+	    {
+	        DE_WRN("not supported scaler input mode:%d in Scaler_sw_para_to_reg\n",value);
+	    }
+    }
+    else if(type == 2)//scaler input pixel sequence
+    {
+	    if(value == DISP_SEQ_UYVY)
+	    {
+	        return DE_SCAL_UYVY;
+	    }
+	    else if(value == DISP_SEQ_YUYV)
+	    {
+	        return DE_SCAL_YUYV;
+	    }
+	    else if(value == DISP_SEQ_VYUY)
+	    {
+	        return DE_SCAL_VYUY;
+	    }
+	    else if(value == DISP_SEQ_YVYU)
+	    {
+	        return DE_SCAL_YVYU;
+	    }
+	    else if(value == DISP_SEQ_AYUV)
+	    {
+	        return DE_SCAL_AYUV;
+	    }
+	    else if(value == DISP_SEQ_UVUV)
+	    {
+	        return DE_SCAL_UVUV;
+	    }
+	    else if(value == DISP_SEQ_VUVU)
+	    {
+	        return DE_SCAL_VUVU;
+	    }
+	    else if(value == DISP_SEQ_ARGB)
+	    {
+	        return DE_SCAL_ARGB;
+	    }
+	    else if(value == DISP_SEQ_BGRA)
+	    {
+	        return DE_SCAL_BGRA;
+	    }
+	    else if(value == DISP_SEQ_P3210)
+	    {
+	        return 0;
+	    }
+	    else
+	    {
+	        DE_WRN("not supported scaler input pixel sequence:%d in Scaler_sw_para_to_reg\n",value);
+	    }
+
+    }
+    else if(type == 3)//scaler output value
+    {
+		if(value == DISP_FORMAT_YUV444)
+		{
+			return DE_SCAL_OUTPYUV444;
+		}
+		else if(value == DISP_FORMAT_YUV422)
+		{
+			return DE_SCAL_OUTPYUV422;
+		}
+		else if(value == DISP_FORMAT_YUV420)
+		{
+			return DE_SCAL_OUTPYUV420;
+		}
+		else if(value == DISP_FORMAT_YUV411)
+		{
+			return DE_SCAL_OUTPYUV411;
+		}
+		else if(value == DISP_FORMAT_ARGB8888)
+	    {
+	        return DE_SCAL_OUTI0RGB888;
+	    }
+		else if(value == DISP_FORMAT_RGB888)
+	    {
+	        return DE_SCAL_OUTPRGB888;
+	    }
+	    else
+	    {
+	        DE_WRN("not supported scaler output value:%d in Scaler_sw_para_to_reg\n", value);
+	    }
+    }
+    DE_WRN("not supported type:%d in Scaler_sw_para_to_reg\n", type);
+    return DIS_FAIL;
+}
+
+// 0: 3d in mode
+// 1: 3d out mode
+__s32 Scaler_3d_sw_para_to_reg(__u32 type, __u32 mode, __bool b_out_interlace)
+{
+    if(type == 0)
+    {
+        switch (mode)
+        {
+        case DISP_3D_SRC_MODE_TB:
+            return DE_SCAL_3DIN_TB;
+
+        case DISP_3D_SRC_MODE_FP:
+            return DE_SCAL_3DIN_FP;
+
+        case DISP_3D_SRC_MODE_SSF:
+            return DE_SCAL_3DIN_SSF;
+
+        case DISP_3D_SRC_MODE_SSH:
+            return DE_SCAL_3DIN_SSH;
+
+        case DISP_3D_SRC_MODE_LI:
+            return DE_SCAL_3DIN_LI;
+
+        default:
+            DE_WRN("not supported 3d in mode:%d in Scaler_3d_sw_para_to_reg\n", mode);
+            return DIS_FAIL;
+        }
+    }
+    else if(type == 1)
+    {
+        switch (mode)
+        {
+        case DISP_3D_OUT_MODE_CI_1:
+            return DE_SCAL_3DOUT_CI_1;
+
+        case DISP_3D_OUT_MODE_CI_2:
+            return DE_SCAL_3DOUT_CI_2;
+
+        case DISP_3D_OUT_MODE_CI_3:
+            return DE_SCAL_3DOUT_CI_3;
+
+        case DISP_3D_OUT_MODE_CI_4:
+            return DE_SCAL_3DOUT_CI_4;
+
+        case DISP_3D_OUT_MODE_LIRGB:
+            return DE_SCAL_3DOUT_LIRGB;
+
+        case DISP_3D_OUT_MODE_TB:
+            return DE_SCAL_3DOUT_HDMI_TB;
+
+        case DISP_3D_OUT_MODE_FP:
+        {
+            if(b_out_interlace == TRUE)
+            {
+                return DE_SCAL_3DOUT_HDMI_FPI;
+            }
+            else
+            {
+                return DE_SCAL_3DOUT_HDMI_FPP;
+            }
+        }
+
+        case DISP_3D_OUT_MODE_SSF:
+            return DE_SCAL_3DOUT_HDMI_SSF;
+
+        case DISP_3D_OUT_MODE_SSH:
+            return DE_SCAL_3DOUT_HDMI_SSH;
+
+        case DISP_3D_OUT_MODE_LI:
+            return DE_SCAL_3DOUT_HDMI_LI;
+
+        case DISP_3D_OUT_MODE_FA:
+            return DE_SCAL_3DOUT_HDMI_FA;
+
+        default:
+            DE_WRN("not supported 3d output mode:%d in Scaler_3d_sw_para_to_reg\n", mode);
+            return DIS_FAIL;
+        }
+    }
+
+    return DIS_FAIL;
+}
+
+#ifdef __LINUX_OSAL__
+__s32 Scaler_event_proc(__s32 irq, void *parg)
+#else
+__s32 Scaler_event_proc(void *parg)
+#endif
+{
+    __u8 fe_intflags;
+    __u32 sel = (__u32)parg;
+
+    fe_intflags = DE_SCAL_QueryINT(sel);
+
+    DE_INF("scaler %d interrupt, scal_int_status:0x%x!\n", sel, fe_intflags);
+
+    if(fe_intflags & DE_WB_END_IE)
+    {
+        DE_SCAL_ClearINT(sel,DE_WB_END_IE);
+        DE_SCAL_DisableINT(sel,DE_FE_INTEN_ALL);
+        gdisp.init_para.scaler_finish(sel);
+    }
+
+    return OSAL_IRQ_RETURN;
+}
+
+__s32 Scaler_Init(__u32 sel)
+{
+    scaler_clk_init(sel);
+    DE_SCAL_EnableINT(sel,DE_WB_END_IE);
+
+    if(sel == 0)
+    {
+        OSAL_RegISR(INTC_IRQNO_SCALER0,0,Scaler_event_proc, (void *)sel,0,0);
+#ifndef __LINUX_OSAL__
+        OSAL_InterruptEnable(INTC_IRQNO_SCALER0);
+#endif
+    }
+    else if(sel == 1)
+    {
+        OSAL_RegISR(INTC_IRQNO_SCALER1,0,Scaler_event_proc, (void *)sel,0,0);
+#ifndef __LINUX_OSAL__
+        OSAL_InterruptEnable(INTC_IRQNO_SCALER1);
+#endif
+    }
+
+   	return DIS_SUCCESS;
+}
+
+__s32 Scaler_Exit(__u32 sel)
+{
+    if(sel == 0)
+    {
+        OSAL_InterruptDisable(INTC_IRQNO_SCALER0);
+        OSAL_UnRegISR(INTC_IRQNO_SCALER0,Scaler_event_proc,(void*)sel);
+    }
+    else if(sel == 1)
+    {
+        OSAL_InterruptDisable(INTC_IRQNO_SCALER1);
+        OSAL_UnRegISR(INTC_IRQNO_SCALER1,Scaler_event_proc,(void*)sel);
+    }
+
+    DE_SCAL_DisableINT(sel,DE_WB_END_IE);
+    DE_SCAL_Reset(sel);
+    DE_SCAL_Disable(sel);
+    scaler_clk_off(sel);
+    return DIS_SUCCESS;
+}
+
+__s32 Scaler_open(__u32 sel)
+{
+    DE_INF("scaler %d open\n", sel);
+
+    scaler_clk_on(sel);
+    DE_SCAL_Reset(sel);
+    DE_SCAL_Enable(sel);
+
+    return DIS_SUCCESS;
+}
+
+__s32 Scaler_close(__u32 sel)
+{
+    DE_INF("scaler %d close\n", sel);
+
+    DE_SCAL_Reset(sel);
+    DE_SCAL_Disable(sel);
+    scaler_clk_off(sel);
+
+    memset(&gdisp.scaler[sel], 0, sizeof(__disp_scaler_t));
+    gdisp.scaler[sel].bright = 32;
+    gdisp.scaler[sel].contrast = 32;
+    gdisp.scaler[sel].saturation = 32;
+    gdisp.scaler[sel].hue = 32;
+    gdisp.scaler[sel].status &= SCALER_USED_MASK;
+
+    return DIS_SUCCESS;
+}
+
+__s32 Scaler_Request(__u32 sel)
+{
+    __s32 ret = DIS_NO_RES;
+
+    DE_INF("Scaler_Request\n");
+
+    if(sel == 0)//request scaler0
+    {
+        if(!(gdisp.scaler[0].status & SCALER_USED))
+        {
+            ret = 0;
+        }
+    }
+    else if(sel == 1)//request scaler1
+    {
+        if(!(gdisp.scaler[1].status & SCALER_USED))
+        {
+            ret = 1;
+        }
+    }
+    else//request any scaler
+    {
+        if(!(gdisp.scaler[0].status & SCALER_USED))
+        {
+            ret = 0;
+        }
+        else if(!(gdisp.scaler[1].status & SCALER_USED))
+        {
+            ret = 1;
+        }
+    }
+
+    if(ret == 0 || ret == 1)
+    {
+        Scaler_open(ret);
+        gdisp.scaler[ret].b_close = FALSE;
+        gdisp.scaler[ret].status |= SCALER_USED;
+    }
+    else
+    {
+        DE_WRN("request scaler fail\n");
+    }
+    return ret;
+}
+
+
+__s32 Scaler_Release(__u32 sel, __bool b_display)
+{
+    DE_INF("Scaler_Release\n");
+
+    DE_SCAL_Set_Di_Ctrl(sel, 0, 0, 0, 0);
+    if(b_display == FALSE)
+    {
+        Scaler_close(sel);
+    }
+    else
+    {
+        gdisp.scaler[sel].b_close = TRUE;
+    }
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 Scaler_Set_Framebuffer(__u32 sel, __disp_fb_t *pfb)//keep the source window
+{
+	__scal_buf_addr_t scal_addr;
+	__scal_src_size_t in_size;
+	__scal_out_size_t out_size;
+	__scal_src_type_t in_type;
+	__scal_out_type_t out_type;
+	__scal_scan_mod_t in_scan;
+	__scal_scan_mod_t out_scan;
+    __disp_scaler_t * scaler;
+    __u32 screen_index;
+    __u32 cpu_sr;
+
+    scaler = &(gdisp.scaler[sel]);
+    screen_index = gdisp.scaler[sel].screen_index;
+
+	OSAL_IrqLock(&cpu_sr);
+	memcpy(&scaler->in_fb, pfb, sizeof(__disp_fb_t));
+	OSAL_IrqUnLock(cpu_sr);
+
+	in_type.fmt= Scaler_sw_para_to_reg(0,scaler->in_fb.format);
+	in_type.mod= Scaler_sw_para_to_reg(1,scaler->in_fb.mode);
+	in_type.ps= Scaler_sw_para_to_reg(2,(__u8)scaler->in_fb.seq);
+	in_type.byte_seq = 0;
+
+	scal_addr.ch0_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[0]));
+	scal_addr.ch1_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[1]));
+	scal_addr.ch2_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[2]));
+
+	in_size.src_width = scaler->in_fb.size.width;
+	in_size.src_height = scaler->in_fb.size.height;
+	in_size.x_off = scaler->src_win.x;
+	in_size.y_off = scaler->src_win.y;
+	in_size.scal_width = scaler->src_win.width;
+	in_size.scal_height = scaler->src_win.height;
+
+	out_type.byte_seq = scaler->out_fb.seq;
+	out_type.fmt = scaler->out_fb.format;
+
+	out_size.width = scaler->out_size.width;
+	out_size.height = scaler->out_size.height;
+
+	in_scan.field = FALSE;
+	in_scan.bottom = FALSE;
+
+	out_scan.field = (gdisp.screen[screen_index].de_flicker_status & DE_FLICKER_USED)?FALSE: gdisp.screen[screen_index].b_out_interlace;
+
+	if(scaler->in_fb.cs_mode > DISP_VXYCC)
+	{
+		scaler->in_fb.cs_mode = DISP_BT601;
+	}
+
+    if(scaler->in_fb.b_trd_src)
+    {
+        __scal_3d_inmode_t inmode;
+        __scal_3d_outmode_t outmode = 0;
+        __scal_buf_addr_t scal_addr_right;
+
+        inmode = Scaler_3d_sw_para_to_reg(0, scaler->in_fb.trd_mode, 0);
+        outmode = Scaler_3d_sw_para_to_reg(1, scaler->out_trd_mode, gdisp.screen[screen_index].b_out_interlace);
+
+        DE_SCAL_Get_3D_In_Single_Size(inmode, &in_size, &in_size);
+        if(scaler->b_trd_out)
+        {
+            DE_SCAL_Get_3D_Out_Single_Size(outmode, &out_size, &out_size);
+        }
+
+    	scal_addr_right.ch0_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[0]));
+    	scal_addr_right.ch1_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[1]));
+    	scal_addr_right.ch2_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[2]));
+
+        DE_SCAL_Set_3D_Ctrl(sel, scaler->b_trd_out, inmode, outmode);
+        DE_SCAL_Config_3D_Src(sel, &scal_addr, &in_size, &in_type, inmode, &scal_addr_right);
+    }
+    else
+    {
+	    DE_SCAL_Config_Src(sel,&scal_addr,&in_size,&in_type,FALSE,FALSE);
+	}
+	DE_SCAL_Set_Scaling_Factor(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+    if(scaler->enhance_en == TRUE)
+    {
+        Scaler_Set_Enhance(sel, scaler->bright, scaler->contrast, scaler->saturation, scaler->hue);
+    }
+    else
+    {
+	    DE_SCAL_Set_CSC_Coef(sel, scaler->in_fb.cs_mode, DISP_BT601, get_fb_type(scaler->in_fb.format), DISP_FB_TYPE_RGB, scaler->in_fb.br_swap, 0);
+	}
+	DE_SCAL_Set_Scaling_Coef(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, scaler->smooth_mode);
+	return DIS_SUCCESS;
+}
+
+
+
+__s32 Scaler_Get_Framebuffer(__u32 sel, __disp_fb_t *pfb)
+{
+    __disp_scaler_t * scaler;
+
+    if(pfb==NULL)
+    {
+        return  DIS_PARA_FAILED;
+    }
+
+    scaler = &(gdisp.scaler[sel]);
+    if(scaler->status & SCALER_USED)
+    {
+        memcpy(pfb,&scaler->in_fb, sizeof(__disp_fb_t));
+    }
+    else
+    {
+        return DIS_PARA_FAILED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 Scaler_Set_Output_Size(__u32 sel, __disp_rectsz_t *size)
+{
+    __disp_scaler_t * scaler;
+	__scal_src_size_t in_size;
+	__scal_out_size_t out_size;
+	__scal_src_type_t in_type;
+	__scal_out_type_t out_type;
+	__scal_scan_mod_t in_scan;
+	__scal_scan_mod_t out_scan;
+	__u32 screen_index;
+
+    scaler = &(gdisp.scaler[sel]);
+    screen_index = gdisp.scaler[sel].screen_index;
+
+	scaler->out_size.height = size->height;
+	scaler->out_size.width = size->width;
+
+	in_type.mod = Scaler_sw_para_to_reg(1,scaler->in_fb.mode);
+	in_type.fmt = Scaler_sw_para_to_reg(0,scaler->in_fb.format);
+	in_type.ps = Scaler_sw_para_to_reg(2,(__u8)scaler->in_fb.seq);
+	in_type.byte_seq = 0;
+
+	in_size.src_width = scaler->src_win.width;
+	in_size.src_height = scaler->in_fb.size.height;
+	in_size.x_off = scaler->src_win.x;
+	in_size.y_off = scaler->src_win.y;
+	in_size.scal_height= scaler->src_win.height;
+	in_size.scal_width= scaler->src_win.width;
+
+	out_type.byte_seq = scaler->out_fb.seq;
+	out_type.fmt = scaler->out_fb.format;
+
+	out_size.width = scaler->out_size.width;
+	out_size.height = scaler->out_size.height;
+
+	in_scan.field = FALSE;
+	in_scan.bottom = FALSE;
+
+	out_scan.field = (gdisp.screen[screen_index].de_flicker_status == DE_FLICKER_USED)?FALSE: gdisp.screen[screen_index].b_out_interlace;
+
+	DE_SCAL_Set_Scaling_Factor(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+	if(scaler->enhance_en == TRUE)
+    {
+        Scaler_Set_Enhance(sel, scaler->bright, scaler->contrast, scaler->saturation, scaler->hue);
+    }
+    else
+    {
+	    DE_SCAL_Set_CSC_Coef(sel, scaler->in_fb.cs_mode, DISP_BT601, get_fb_type(scaler->in_fb.format), DISP_FB_TYPE_RGB, scaler->in_fb.br_swap, 0);
+	}
+	DE_SCAL_Set_Scaling_Coef(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, scaler->smooth_mode);
+	DE_SCAL_Set_Out_Size(sel, &out_scan, &out_type, &out_size);
+
+	return DIS_SUCCESS;
+}
+
+__s32 Scaler_Set_SclRegn(__u32 sel, __disp_rect_t *scl_rect)
+{
+    __disp_scaler_t * scaler;
+	__scal_buf_addr_t scal_addr;
+	__scal_src_size_t in_size;
+	__scal_out_size_t out_size;
+	__scal_src_type_t in_type;
+	__scal_out_type_t out_type;
+	__scal_scan_mod_t in_scan;
+	__scal_scan_mod_t out_scan;
+	__u32 screen_index;
+
+    scaler = &(gdisp.scaler[sel]);
+    screen_index = gdisp.scaler[sel].screen_index;
+
+	scaler->src_win.x         = scl_rect->x;
+	scaler->src_win.y         = scl_rect->y;
+	scaler->src_win.height    = scl_rect->height;
+	scaler->src_win.width     = scl_rect->width;
+
+	in_type.mod = Scaler_sw_para_to_reg(1,scaler->in_fb.mode);
+	in_type.fmt = Scaler_sw_para_to_reg(0,scaler->in_fb.format);
+	in_type.ps = Scaler_sw_para_to_reg(2,(__u8)scaler->in_fb.seq);
+	in_type.byte_seq = 0;
+
+	scal_addr.ch0_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[0]));
+	scal_addr.ch1_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[1]));
+	scal_addr.ch2_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[2]));
+
+	in_size.src_width = scaler->in_fb.size.width;
+	in_size.src_height = scaler->in_fb.size.height;
+	in_size.x_off = scaler->src_win.x;
+	in_size.y_off = scaler->src_win.y;
+	in_size.scal_width = scaler->src_win.width;
+	in_size.scal_height = scaler->src_win.height;
+
+	out_type.byte_seq = scaler->out_fb.seq;
+	out_type.fmt = scaler->out_fb.format;
+
+	out_size.width = scaler->out_size.width;
+	out_size.height = scaler->out_size.height;
+
+	in_scan.field = FALSE;
+	in_scan.bottom = FALSE;
+
+	out_scan.field = (gdisp.screen[screen_index].de_flicker_status == DE_FLICKER_USED)?FALSE: gdisp.screen[screen_index].b_out_interlace;
+
+	if(scaler->in_fb.cs_mode > DISP_VXYCC)
+	{
+		scaler->in_fb.cs_mode = DISP_BT601;
+	}
+
+    if(scaler->in_fb.b_trd_src)
+    {
+        __scal_3d_inmode_t inmode;
+        __scal_3d_outmode_t outmode = 0;
+        __scal_buf_addr_t scal_addr_right;
+
+        inmode = Scaler_3d_sw_para_to_reg(0, scaler->in_fb.trd_mode, 0);
+        outmode = Scaler_3d_sw_para_to_reg(1, scaler->out_trd_mode, gdisp.screen[screen_index].b_out_interlace);
+
+        DE_SCAL_Get_3D_In_Single_Size(inmode, &in_size, &in_size);
+        if(scaler->b_trd_out)
+        {
+            DE_SCAL_Get_3D_Out_Single_Size(outmode, &out_size, &out_size);
+        }
+
+    	scal_addr_right.ch0_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[0]));
+    	scal_addr_right.ch1_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[1]));
+    	scal_addr_right.ch2_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[2]));
+
+        DE_SCAL_Set_3D_Ctrl(sel, scaler->b_trd_out, inmode, outmode);
+        DE_SCAL_Config_3D_Src(sel, &scal_addr, &in_size, &in_type, inmode, &scal_addr_right);
+    }
+    else
+    {
+	    DE_SCAL_Config_Src(sel,&scal_addr,&in_size,&in_type,FALSE,FALSE);
+	}
+	DE_SCAL_Set_Scaling_Factor(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+	DE_SCAL_Set_Scaling_Coef(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, scaler->smooth_mode);
+
+	return DIS_SUCCESS;
+}
+
+
+__s32 Scaler_Get_SclRegn(__u32 sel, __disp_rect_t *scl_rect)
+{
+    __disp_scaler_t * scaler;
+
+    if(scl_rect == NULL)
+    {
+        return  DIS_PARA_FAILED;
+    }
+
+    scaler = &(gdisp.scaler[sel]);
+    if(scaler->status & SCALER_USED)
+    {
+        scl_rect->x = scaler->src_win.x;
+        scl_rect->y = scaler->src_win.y;
+        scl_rect->width = scaler->src_win.width;
+        scl_rect->height = scaler->src_win.height;
+    }
+    else
+    {
+        return DIS_PARA_FAILED;
+    }
+
+    return DIS_SUCCESS;
+}
+
+__s32 Scaler_Set_Para(__u32 sel, __disp_scaler_t *scl)
+{
+    __disp_scaler_t * scaler;
+	__scal_buf_addr_t scal_addr;
+	__scal_src_size_t in_size;
+	__scal_out_size_t out_size;
+	__scal_src_type_t in_type;
+	__scal_out_type_t out_type;
+	__scal_scan_mod_t in_scan;
+	__scal_scan_mod_t out_scan;
+    __u32 screen_index;
+
+
+    scaler = &(gdisp.scaler[sel]);
+    screen_index = gdisp.scaler[sel].screen_index;
+
+	memcpy(&(scaler->in_fb), &(scl->in_fb), sizeof(__disp_fb_t));
+	memcpy(&(scaler->src_win), &(scl->src_win), sizeof(__disp_rect_t));
+	memcpy(&(scaler->out_size), &(scl->out_size), sizeof(__disp_rectsz_t));
+
+	in_type.mod = Scaler_sw_para_to_reg(1,scaler->in_fb.mode);
+	in_type.fmt = Scaler_sw_para_to_reg(0,scaler->in_fb.format);
+	in_type.ps = Scaler_sw_para_to_reg(2,(__u8)scaler->in_fb.seq);
+	in_type.byte_seq = 0;
+
+	scal_addr.ch0_addr = (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[0]));
+	scal_addr.ch1_addr = (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[1]));
+	scal_addr.ch2_addr = (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.addr[2]));
+
+	in_size.src_width = scaler->in_fb.size.width;
+	in_size.src_height = scaler->in_fb.size.height;
+	in_size.x_off = scaler->src_win.x;
+	in_size.y_off = scaler->src_win.y;
+	in_size.scal_height= scaler->src_win.height;
+	in_size.scal_width= scaler->src_win.width;
+
+	out_type.byte_seq = scaler->out_fb.seq;
+	out_type.fmt = scaler->out_fb.format;
+
+	out_size.width = scaler->out_size.width;
+	out_size.height = scaler->out_size.height;
+
+	in_scan.field = FALSE;
+	in_scan.bottom = FALSE;
+
+	out_scan.field = (gdisp.screen[screen_index].de_flicker_status & DE_FLICKER_USED)?FALSE: gdisp.screen[screen_index].b_out_interlace;
+
+	if(scaler->in_fb.cs_mode > DISP_VXYCC)
+	{
+		scaler->in_fb.cs_mode = DISP_BT601;
+	}
+
+    if(scaler->in_fb.b_trd_src)
+    {
+        __scal_3d_inmode_t inmode;
+        __scal_3d_outmode_t outmode = 0;
+        __scal_buf_addr_t scal_addr_right;
+
+        inmode = Scaler_3d_sw_para_to_reg(0, scaler->in_fb.trd_mode, 0);
+        outmode = Scaler_3d_sw_para_to_reg(1, scaler->out_trd_mode, gdisp.screen[screen_index].b_out_interlace);
+
+        DE_SCAL_Get_3D_In_Single_Size(inmode, &in_size, &in_size);
+        if(scaler->b_trd_out)
+        {
+            DE_SCAL_Get_3D_Out_Single_Size(outmode, &out_size, &out_size);
+        }
+
+    	scal_addr_right.ch0_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[0]));
+    	scal_addr_right.ch1_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[1]));
+    	scal_addr_right.ch2_addr= (__u32)OSAL_VAtoPA((void*)(scaler->in_fb.trd_right_addr[2]));
+
+        DE_SCAL_Set_3D_Ctrl(sel, scaler->b_trd_out, inmode, outmode);
+        DE_SCAL_Config_3D_Src(sel, &scal_addr, &in_size, &in_type, inmode, &scal_addr_right);
+    }
+    else
+    {
+	    DE_SCAL_Config_Src(sel,&scal_addr,&in_size,&in_type,FALSE,FALSE);
+	}
+	DE_SCAL_Set_Scaling_Factor(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+	DE_SCAL_Set_Init_Phase(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, FALSE);
+	if(scaler->enhance_en == TRUE)
+    {
+        Scaler_Set_Enhance(sel, scaler->bright, scaler->contrast, scaler->saturation, scaler->hue);
+    }
+    else
+    {
+	    DE_SCAL_Set_CSC_Coef(sel, scaler->in_fb.cs_mode, DISP_BT601, get_fb_type(scaler->in_fb.format), DISP_FB_TYPE_RGB, scaler->in_fb.br_swap, 0);
+	}
+	DE_SCAL_Set_Scaling_Coef(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, scaler->smooth_mode);
+	DE_SCAL_Set_Out_Format(sel, &out_type);
+	DE_SCAL_Set_Out_Size(sel, &out_scan,&out_type, &out_size);
+
+	return DIS_NULL;
+}
+
+__s32 Scaler_Set_Outitl(__u32 sel,  __bool enable)
+{
+	__scal_src_size_t in_size;
+	__scal_out_size_t out_size;
+	__scal_src_type_t in_type;
+	__scal_out_type_t out_type;
+	__scal_scan_mod_t in_scan;
+	__scal_scan_mod_t out_scan;
+	__disp_scaler_t * scaler;
+
+	scaler = &(gdisp.scaler[sel]);
+
+	in_type.fmt= Scaler_sw_para_to_reg(0,scaler->in_fb.format);
+	in_type.mod= Scaler_sw_para_to_reg(1,scaler->in_fb.mode);
+	in_type.ps= Scaler_sw_para_to_reg(2,scaler->in_fb.seq);
+	in_type.byte_seq = 0;
+
+	in_size.src_width = scaler->in_fb.size.width;
+	in_size.src_height = scaler->in_fb.size.height;
+	in_size.x_off =  scaler->src_win.x;
+	in_size.y_off =  scaler->src_win.y;
+	in_size.scal_height=  scaler->src_win.height;
+	in_size.scal_width=  scaler->src_win.width;
+
+	out_type.byte_seq =  scaler->out_fb.seq;
+	out_type.fmt =  scaler->out_fb.format;
+
+	out_size.width =  scaler->out_size.width;
+	out_size.height =  scaler->out_size.height;
+
+	in_scan.field = FALSE;
+	in_scan.bottom = FALSE;
+
+	out_scan.field = enable;
+
+	DE_SCAL_Set_Init_Phase(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, FALSE);
+	DE_SCAL_Set_Scaling_Factor(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+	DE_SCAL_Set_Scaling_Coef(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type,  scaler->smooth_mode);
+	DE_SCAL_Set_Out_Size(sel, &out_scan,&out_type, &out_size);
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_scaler_set_smooth(__u32 sel, __disp_video_smooth_t  mode)
+{
+    __disp_scaler_t * scaler;
+	__scal_src_size_t in_size;
+	__scal_out_size_t out_size;
+	__scal_src_type_t in_type;
+	__scal_out_type_t out_type;
+	__scal_scan_mod_t in_scan;
+	__scal_scan_mod_t out_scan;
+	__u32 screen_index;
+
+    scaler = &(gdisp.scaler[sel]);
+    screen_index = gdisp.scaler[sel].screen_index;
+	scaler->smooth_mode = mode;
+
+	in_type.mod = Scaler_sw_para_to_reg(1,scaler->in_fb.mode);
+	in_type.fmt = Scaler_sw_para_to_reg(0,scaler->in_fb.format);
+	in_type.ps = Scaler_sw_para_to_reg(2,(__u8)scaler->in_fb.seq);
+    in_type.byte_seq = 0;
+
+	in_size.src_width = scaler->in_fb.size.width;
+	in_size.src_height = scaler->in_fb.size.height;
+	in_size.x_off = scaler->src_win.x;
+	in_size.y_off = scaler->src_win.y;
+	in_size.scal_height= scaler->src_win.height;
+	in_size.scal_width= scaler->src_win.width;
+
+	out_type.byte_seq = scaler->out_fb.seq;
+	out_type.fmt = scaler->out_fb.format;
+
+	out_size.width = scaler->out_size.width;
+	out_size.height = scaler->out_size.height;
+
+	in_scan.field = FALSE;
+	in_scan.bottom = FALSE;
+
+	out_scan.field = (gdisp.screen[screen_index].de_flicker_status == DE_FLICKER_USED)?FALSE: gdisp.screen[screen_index].b_out_interlace;
+
+	DE_SCAL_Set_Scaling_Coef(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, scaler->smooth_mode);
+    scaler->b_reg_change = TRUE;
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_scaler_get_smooth(__u32 sel)
+{
+	return gdisp.scaler[sel].smooth_mode;
+}
+
+
+__s32 BSP_disp_scaler_request(void)
+{
+    __s32 sel = 0;
+    sel =  Scaler_Request(0xff);
+	if(sel < 0)
+		return sel;
+	else
+		gdisp.scaler[sel].screen_index = 0xff;
+   	 	return SCALER_IDTOHAND(sel);
+}
+
+__s32 BSP_disp_scaler_release(__u32 handle)
+{
+    __u32 sel = 0;
+
+    sel = SCALER_HANDTOID(handle);
+    return Scaler_Release(sel, FALSE);
+}
+
+__s32 BSP_disp_scaler_start(__u32 handle,__disp_scaler_para_t *para)
+{
+	__scal_buf_addr_t in_addr;
+	__scal_buf_addr_t out_addr;
+	__scal_src_size_t in_size;
+	__scal_out_size_t out_size;
+	__scal_src_type_t in_type;
+	__scal_out_type_t out_type;
+	__scal_scan_mod_t in_scan;
+	__scal_scan_mod_t out_scan;
+	__u32 size = 0;
+	__u32 sel = 0;
+	__s32 ret = 0;
+
+	if(para==NULL)
+	{
+		DE_WRN("input parameter can't be null!\n");
+		return DIS_FAIL;
+	}
+
+	sel = SCALER_HANDTOID(handle);
+
+	in_type.mod= Scaler_sw_para_to_reg(1,para->input_fb.mode);
+	in_type.fmt= Scaler_sw_para_to_reg(0,para->input_fb.format);
+	in_type.ps= Scaler_sw_para_to_reg(2,(__u8)para->input_fb.seq);
+	in_type.byte_seq = 0;
+
+	if(get_fb_type(para->output_fb.format) == DISP_FB_TYPE_YUV)
+	{
+		if(para->output_fb.mode == DISP_MOD_NON_MB_PLANAR)
+		{
+			out_type.fmt = Scaler_sw_para_to_reg(3, para->output_fb.format);
+		}
+		else
+		{
+			DE_WRN("output mode:%d invalid in Display_Scaler_Start\n",para->output_fb.mode);
+			return DIS_FAIL;
+		}
+	}
+	else
+	{
+		if(para->output_fb.mode == DISP_MOD_NON_MB_PLANAR && (para->output_fb.format == DISP_FORMAT_RGB888 || para->output_fb.format == DISP_FORMAT_ARGB8888))
+		{
+			out_type.fmt = DE_SCAL_OUTPRGB888;
+		}
+		else if(para->output_fb.mode == DISP_MOD_INTERLEAVED && para->output_fb.format == DISP_FORMAT_ARGB8888)
+		{
+			out_type.fmt = DE_SCAL_OUTI0RGB888;
+		}
+		else
+		{
+			DE_WRN("output para invalid in Display_Scaler_Start,mode:%d,format:%d\n",para->output_fb.mode, para->output_fb.format);
+			return DIS_FAIL;
+		}
+	}
+    out_type.byte_seq = Scaler_sw_para_to_reg(2,para->output_fb.seq);
+
+    out_size.width     = para->output_fb.size.width;
+    out_size.height = para->output_fb.size.height;
+
+    in_addr.ch0_addr = (__u32)OSAL_VAtoPA((void*)(para->input_fb.addr[0]));
+    in_addr.ch1_addr = (__u32)OSAL_VAtoPA((void*)(para->input_fb.addr[1]));
+    in_addr.ch2_addr = (__u32)OSAL_VAtoPA((void*)(para->input_fb.addr[2]));
+
+    in_size.src_width = para->input_fb.size.width;
+    in_size.src_height = para->input_fb.size.height;
+    in_size.x_off = para->source_regn.x;
+    in_size.y_off = para->source_regn.y;
+    in_size.scal_width= para->source_regn.width;
+    in_size.scal_height= para->source_regn.height;
+
+    in_scan.field = FALSE;
+    in_scan.bottom = FALSE;
+
+    out_scan.field = FALSE;	//when use scaler as writeback, won't be outinterlaced for any display device
+    out_scan.bottom = FALSE;
+
+    out_addr.ch0_addr = (__u32)OSAL_VAtoPA((void*)(para->output_fb.addr[0]));
+    out_addr.ch1_addr = (__u32)OSAL_VAtoPA((void*)(para->output_fb.addr[1]));
+    out_addr.ch2_addr = (__u32)OSAL_VAtoPA((void*)(para->output_fb.addr[2]));
+
+    size = (para->input_fb.size.width * para->input_fb.size.height * de_format_to_bpp(para->input_fb.format) + 7)/8;
+    OSAL_CacheRangeFlush((void *)para->input_fb.addr[0],size ,CACHE_CLEAN_FLUSH_D_CACHE_REGION);
+
+    size = (para->output_fb.size.width * para->output_fb.size.height * de_format_to_bpp(para->output_fb.format) + 7)/8;
+    OSAL_CacheRangeFlush((void *)para->output_fb.addr[0],size ,CACHE_FLUSH_D_CACHE_REGION);
+    if(para->input_fb.b_trd_src)
+    {
+        __scal_3d_inmode_t inmode;
+        __scal_3d_outmode_t outmode = 0;
+        __scal_buf_addr_t scal_addr_right;
+
+        inmode = Scaler_3d_sw_para_to_reg(0, para->input_fb.trd_mode, FALSE);
+        outmode = Scaler_3d_sw_para_to_reg(1, para->output_fb.trd_mode, FALSE);
+
+        DE_SCAL_Get_3D_In_Single_Size(inmode, &in_size, &in_size);
+        if(para->output_fb.b_trd_src)
+        {
+            DE_SCAL_Get_3D_Out_Single_Size(outmode, &out_size, &out_size);
+        }
+
+    	scal_addr_right.ch0_addr= (__u32)OSAL_VAtoPA((void*)(para->input_fb.trd_right_addr[0]));
+    	scal_addr_right.ch1_addr= (__u32)OSAL_VAtoPA((void*)(para->input_fb.trd_right_addr[1]));
+    	scal_addr_right.ch2_addr= (__u32)OSAL_VAtoPA((void*)(para->input_fb.trd_right_addr[2]));
+
+        DE_SCAL_Set_3D_Ctrl(sel, para->output_fb.b_trd_src, inmode, outmode);
+        DE_SCAL_Config_3D_Src(sel, &in_addr, &in_size, &in_type, inmode, &scal_addr_right);
+    }
+    else
+    {
+        DE_SCAL_Config_Src(sel,&in_addr,&in_size,&in_type,FALSE,FALSE);
+    }
+    DE_SCAL_Set_Scaling_Factor(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+    DE_SCAL_Set_Init_Phase(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, FALSE);
+    DE_SCAL_Set_CSC_Coef(sel, para->input_fb.cs_mode, para->output_fb.cs_mode, get_fb_type(para->input_fb.format), get_fb_type(para->output_fb.format),  para->input_fb.br_swap, para->output_fb.br_swap);
+    DE_SCAL_Set_Scaling_Coef(sel, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, DISP_VIDEO_NATUAL);
+    DE_SCAL_Set_Out_Format(sel, &out_type);
+    DE_SCAL_Set_Out_Size(sel, &out_scan,&out_type, &out_size);
+    DE_SCAL_Set_Writeback_Addr(sel,&out_addr);
+    DE_SCAL_Output_Select(sel, 3);
+    DE_SCAL_EnableINT(sel,DE_WB_END_IE);
+    DE_SCAL_Start(sel);
+    DE_SCAL_Set_Reg_Rdy(sel);
+    DE_SCAL_Writeback_Enable(sel);
+
+    ret = gdisp.init_para.scaler_begin(sel);
+    if(ret != 0)
+    {
+        DE_WRN("do scaler fail, scal_int_status:0x%x\n", DE_SCAL_QueryINT(sel));
+    }
+    else
+    {
+        DE_INF("scaler finished successfully\n");
+    }
+
+    DE_SCAL_Reset(sel);
+    DE_SCAL_Writeback_Disable(sel);
+
+    return ret;
+
+}
+
+__s32 BSP_disp_capture_screen(__u32 sel, __disp_capture_screen_para_t * para)
+{
+    __scal_buf_addr_t in_addr;
+    __scal_buf_addr_t out_addr;
+    __scal_src_size_t in_size;
+    __scal_out_size_t out_size;
+    __scal_src_type_t in_type;
+    __scal_out_type_t out_type;
+    __scal_scan_mod_t in_scan;
+    __scal_scan_mod_t out_scan;
+    __u32 size = 0;
+    __s32 scaler_idx = 0;
+    __s32 ret = 0;
+
+    if(para==NULL)
+    {
+        DE_WRN("input parameter can't be null!\n");
+        return DIS_FAIL;
+    }
+
+    scaler_idx =  Scaler_Request(0xff);
+    if(scaler_idx < 0)
+    {
+        DE_WRN("request scaler fail in BSP_disp_capture_screen\n");
+        return DIS_FAIL;
+    }
+    else
+    {
+        gdisp.scaler[sel].screen_index = 0xff;
+    }
+
+    in_type.mod= Scaler_sw_para_to_reg(1,DISP_MOD_INTERLEAVED);
+    in_type.fmt= Scaler_sw_para_to_reg(0,DISP_FORMAT_ARGB8888);
+    in_type.ps= Scaler_sw_para_to_reg(2,DISP_SEQ_ARGB);
+    in_type.byte_seq = 0;
+
+    if(get_fb_type(para->output_fb.format) == DISP_FB_TYPE_YUV)
+    {
+        if(para->output_fb.mode == DISP_MOD_NON_MB_PLANAR)
+        {
+            out_type.fmt = Scaler_sw_para_to_reg(3, para->output_fb.format);
+        }
+        else
+        {
+            DE_WRN("output mode:%d invalid in Display_Scaler_Start\n",para->output_fb.mode);
+            return DIS_FAIL;
+        }
+    }
+    else
+    {
+        if(para->output_fb.mode == DISP_MOD_NON_MB_PLANAR && (para->output_fb.format == DISP_FORMAT_RGB888 || para->output_fb.format == DISP_FORMAT_ARGB8888))
+        {
+            out_type.fmt = DE_SCAL_OUTPRGB888;
+        }
+        else if(para->output_fb.mode == DISP_MOD_INTERLEAVED && para->output_fb.format == DISP_FORMAT_ARGB8888)
+        {
+            out_type.fmt = DE_SCAL_OUTI0RGB888;
+        }
+        else
+        {
+            DE_WRN("output para invalid in Display_Scaler_Start,mode:%d,format:%d\n",para->output_fb.mode, para->output_fb.format);
+            return DIS_FAIL;
+        }
+        para->output_fb.br_swap= FALSE;
+    }
+    out_type.byte_seq = Scaler_sw_para_to_reg(2,para->output_fb.seq);
+
+    out_size.width     = para->output_fb.size.width;
+    out_size.height = para->output_fb.size.height;
+
+    if(BSP_disp_get_output_type(sel) != DISP_OUTPUT_TYPE_NONE)
+    {
+        in_size.src_width = BSP_disp_get_screen_width(sel);
+        in_size.src_height = BSP_disp_get_screen_height(sel);
+        in_size.x_off = 0;
+        in_size.y_off = 0;
+        in_size.scal_width= BSP_disp_get_screen_width(sel);
+        in_size.scal_height= BSP_disp_get_screen_height(sel);
+    }
+    else
+    {
+        in_size.src_width = para->screen_size.width;
+        in_size.src_height= para->screen_size.height;
+        in_size.x_off = 0;
+        in_size.y_off = 0;
+        in_size.scal_width= para->screen_size.width;
+        in_size.scal_height= para->screen_size.height;
+    }
+
+    in_scan.field = FALSE;
+    in_scan.bottom = FALSE;
+
+    out_scan.field = FALSE;	//when use scaler as writeback, won't be outinterlaced for any display device
+    out_scan.bottom = FALSE;
+
+    in_addr.ch0_addr = 0;
+    in_addr.ch1_addr = 0;
+    in_addr.ch2_addr = 0;
+
+    out_addr.ch0_addr = (__u32)OSAL_VAtoPA((void*)(para->output_fb.addr[0]));
+    out_addr.ch1_addr = (__u32)OSAL_VAtoPA((void*)(para->output_fb.addr[1]));
+    out_addr.ch2_addr = (__u32)OSAL_VAtoPA((void*)(para->output_fb.addr[2]));
+
+    size = (para->output_fb.size.width * para->output_fb.size.height * de_format_to_bpp(para->output_fb.format) + 7)/8;
+    OSAL_CacheRangeFlush((void *)para->output_fb.addr[0],size ,CACHE_FLUSH_D_CACHE_REGION);
+
+    if(BSP_disp_get_output_type(sel) == DISP_OUTPUT_TYPE_NONE)
+    {
+        DE_SCAL_Input_Select(scaler_idx, 6 + sel);
+        DE_BE_set_display_size(sel, para->screen_size.width, para->screen_size.height);
+        DE_BE_Output_Select(sel, 6 + scaler_idx);
+        image_clk_on(sel);
+        Image_open(sel);
+        DE_BE_Cfg_Ready(sel);
+    }
+    else
+    {
+        DE_SCAL_Input_Select(scaler_idx, 4 + sel);
+        DE_BE_Output_Select(sel, 2 + (scaler_idx * 2) + sel);
+    }
+    DE_SCAL_Config_Src(scaler_idx,&in_addr,&in_size,&in_type,FALSE,FALSE);
+    DE_SCAL_Set_Scaling_Factor(scaler_idx, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+    DE_SCAL_Set_Init_Phase(scaler_idx, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, FALSE);
+    DE_SCAL_Set_CSC_Coef(scaler_idx, DISP_BT601, para->output_fb.cs_mode, DISP_FB_TYPE_RGB, get_fb_type(para->output_fb.format), 0, 0);
+    DE_SCAL_Set_Scaling_Coef(scaler_idx, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, DISP_VIDEO_NATUAL);
+    DE_SCAL_Set_Out_Format(scaler_idx, &out_type);
+    DE_SCAL_Set_Out_Size(scaler_idx, &out_scan,&out_type, &out_size);
+    DE_SCAL_Set_Writeback_Addr(scaler_idx,&out_addr);
+    DE_SCAL_Output_Select(scaler_idx, 3);
+    DE_SCAL_ClearINT(scaler_idx,DE_WB_END_IE);
+    DE_SCAL_EnableINT(scaler_idx,DE_WB_END_IE);
+    DE_SCAL_Set_Reg_Rdy(scaler_idx);
+    DE_SCAL_Writeback_Enable(scaler_idx);
+    DE_SCAL_Start(scaler_idx);
+
+    DE_INF("capture begin\n");
+    //while(!(DE_SCAL_QueryINT(scaler_idx) & DE_WB_END_IE) )
+    //{
+    //}
+    ret = gdisp.init_para.scaler_begin(scaler_idx);
+    if(ret != 0)
+    {
+        DE_WRN("do capture fail\n");
+        if(scaler_idx == 0)
+        {
+            BSP_disp_print_reg(0, DISP_REG_SCALER0);
+        }
+        else
+        {
+            BSP_disp_print_reg(0, DISP_REG_SCALER1);
+        }
+        if(sel == 0)
+        {
+            BSP_disp_print_reg(0, DISP_REG_IMAGE0);
+        }
+        else
+        {
+            BSP_disp_print_reg(0, DISP_REG_IMAGE1);
+        }
+    }
+    else
+    {
+        DE_INF("capture finished successfully\n");
+    }
+
+
+    DE_SCAL_Reset(scaler_idx);
+    Scaler_Release(scaler_idx, FALSE);
+    if(BSP_disp_get_output_type(sel) == DISP_OUTPUT_TYPE_NONE)
+    {
+        Image_close(sel);
+        image_clk_off(sel);
+    }
+    DE_BE_Output_Select(sel, sel);
+
+    return ret;
+
+}
+
+__s32 Scaler_Set_Enhance(__u32 sel, __u32 bright, __u32 contrast, __u32 saturation, __u32 hue)
+{
+    __u32 b_yuv_in,b_yuv_out;
+    __disp_scaler_t * scaler;
+
+    scaler = &(gdisp.scaler[sel]);
+
+    b_yuv_in = (get_fb_type(scaler->in_fb.format) == DISP_FB_TYPE_YUV)?1:0;
+    b_yuv_out = (get_fb_type(scaler->out_fb.format) == DISP_FB_TYPE_YUV)?1:0;
+    DE_SCAL_Set_CSC_Coef_Enhance(sel, scaler->in_fb.cs_mode, scaler->out_fb.cs_mode, b_yuv_in, b_yuv_out, bright, contrast, saturation, hue, scaler->in_fb.br_swap, 0);
+    scaler->b_reg_change = TRUE;
+
+    return DIS_SUCCESS;
+}
+
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_scaler.h b/drivers/video/sun4i/disp/de_bsp/de/disp_scaler.h
new file mode 100644
index 0000000..917e0c0
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_scaler.h
@@ -0,0 +1,72 @@
+
+#ifndef _DISP_SCALER_H_
+#define _DISP_SCALER_H_
+
+#include "disp_display_i.h"
+
+#define SCALER_HANDTOID(handle)  ((handle) - 100)
+#define SCALER_IDTOHAND(ID)  ((ID) + 100)
+
+#define SCALER_WB_FINISHED          0x00000002
+
+typedef enum
+{
+    SCALER_IN_SRC_DRAM = 0,
+    SCALER_IN_SRC_IMAGE0_TO_LCD = 1,
+    SCALER_IN_SRC_IMAGE1_TO_LCD = 2,
+    SCALER_IN_SRC_IMAGE0 = 2,
+    SCALER_IN_SRC_IMAGE1 = 3,
+}__disp_scaler_in_src;
+
+typedef struct
+{
+    __u32                   status;
+    __bool                  b_reg_change;
+    __bool                  b_close;
+
+    __u32                   screen_index;
+    __disp_scaler_in_src    input_sel;
+
+    __u32                   layer_id;
+    __disp_fb_t             in_fb;
+    __disp_fb_t             out_fb;
+    __disp_rect_t           src_win;
+    __disp_rectsz_t         out_size;
+    __u32                   smooth_mode;
+
+    __bool                  enhance_en;
+    __u32                   bright;
+    __u32                   contrast;
+    __u32                   saturation;
+    __u32                   hue;
+
+    __bool                  vpp_en;
+    __u32                   luma_sharpe_level;
+    __u32                   chroma_sharpe_level;
+    __u32                   while_exten_level;
+    __u32                   black_exten_level;
+
+    __bool                  b_trd_out;
+    __disp_3d_out_mode_t    out_trd_mode;
+}__disp_scaler_t;
+
+extern __disp_scaler_t    gscl;
+
+__s32 Scaler_Init(__u32 sel);
+__s32 Scaler_Exit(__u32 sel);
+__s32 Scaler_open(__u32 sel);
+__s32 Scaler_close(__u32 sel);
+__s32 Scaler_Request(__u32 sel);
+__s32 Scaler_Release(__u32 sel, __bool b_display);
+__s32 Scaler_Set_Framebuffer(__u32 sel, __disp_fb_t *vfb_info);
+__s32 Scaler_Get_Framebuffer(__u32 sel, __disp_fb_t *vfb_info);
+__s32 Scaler_Set_SclRegn(__u32 sel, __disp_rect_t *scl_rect);
+__s32 Scaler_Get_SclRegn(__u32 sel, __disp_rect_t *scl_rect);
+__s32 Scaler_Set_Output_Size(__u32 sel, __disp_rectsz_t *out_size);
+__s32 Scaler_Set_Para(__u32 sel, __disp_scaler_t *scl);
+__s32 Scaler_Set_Outitl(__u32 sel,  __bool enable);
+__s32 Scaler_sw_para_to_reg(__u8 type, __u8 value);
+__s32 Scaler_Set_Enhance(__u32 sel, __u32 bright, __u32 contrast, __u32 saturation, __u32 hue);
+__s32 Scaler_3d_sw_para_to_reg(__u32 type, __u32 mode, __bool b_out_interlace);
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_sprite.c b/drivers/video/sun4i/disp/de_bsp/de/disp_sprite.c
new file mode 100644
index 0000000..b338879
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_sprite.c
@@ -0,0 +1,1115 @@
+#include "disp_sprite.h"
+#include "disp_display.h"
+#include "disp_layer.h"
+#include "disp_event.h"
+
+static sprite_t gsprite[2];
+
+static __s32 Sprite_Get_Idle_Block_id(__u32 sel)
+{
+    __s32 i = 0;
+
+    for(i = 0;i<MAX_SPRITE_BLOCKS;i++)
+    {
+        if(!(gsprite[sel].block_status[i] & SPRITE_BLOCK_USED))
+        {
+            return i;
+        }
+    }
+    return (__s32)DIS_NO_RES;
+}
+
+static __s32 Sprite_Id_To_Hid(__u32 sel, __s32 id)
+{
+	if(id == -1)
+	{
+		return 0;
+	}
+	else
+	{
+		return gsprite[sel].sprite_hid[id];
+	}
+}
+
+static __s32 Sprite_Hid_To_Id(__u32 sel, __s32 hid)
+{
+	if(hid == 0)
+	{
+		return -1;
+	}
+	else
+	{
+		__s32 i =0;
+		for(i=0;i<MAX_SPRITE_BLOCKS;i++)
+		{
+			if(gsprite[sel].sprite_hid[i] == hid)
+			{
+				return i;
+			}
+		}
+		return -1;
+	}
+}
+
+//--hgl--用这个的前提：prev,next必须是存在的，否则崩溃。
+static __inline void ___list_add(list_head_t *node,list_head_t *prev,list_head_t *next)
+{
+	node->next = next;
+	node->prev = prev;
+	prev->next = node;
+	next->prev = node;
+}
+
+//将node添加到list的最后面，也既其前面
+static  __inline void list_add_node_tail(list_head_t *node, list_head_t **head)
+{
+	if(*head == NULL)
+	{
+		*head = node;
+	}
+	else
+	{
+		___list_add(node, (*head)->prev, *head);
+	}
+}
+
+//从list中删除entry
+static __inline void list_del_node(list_head_t *entry)
+{
+	entry->prev->next = entry->next;
+	entry->next->prev = entry->prev;
+	entry->next = entry;
+	entry->prev = entry;
+}
+
+//内部函数,释放该节点的空间
+static __inline void list_free_node(list_head_t * node)
+{
+	if(node != NULL)
+	{
+		OSAL_free((void *)(node->data));
+		OSAL_free((void *)node);
+		node = NULL;
+	}
+}
+
+//申请一个新的结点,并初始化
+static list_head_t * List_New_Sprite_Block(__u32 sel, __disp_sprite_block_para_t * para)
+{
+	list_head_t * node = NULL;
+	sprite_block_data_t * data = NULL;
+	__s32 id;
+
+	id = Sprite_Get_Idle_Block_id(sel);
+
+	if(id != DIS_NO_RES)
+	{
+		data = (sprite_block_data_t *)OSAL_malloc(sizeof(sprite_block_data_t));
+		data->enable = FALSE;
+		data->id = id;
+		data->src_win.x = para->src_win.x;
+		data->src_win.y = para->src_win.y;
+		data->scn_win.x = para->scn_win.x;
+		data->scn_win.y = para->scn_win.y;
+		data->scn_win.width = para->scn_win.width;
+		data->scn_win.height = para->scn_win.height;
+		data->address = (__u32)para->fb.addr[0];
+		data->size.width = para->fb.size.width;
+
+		node = (list_head_t *)OSAL_malloc(sizeof(list_head_t));
+		node->next = node->prev = node;
+		node->data = data;
+
+		return node;
+	}
+	else
+	{
+		return NULL;
+	}
+}
+
+//在链表的尾部增加新结点
+static void* List_Add_Sprite_Block(__u32 sel, __disp_sprite_block_para_t * para)
+{
+	list_head_t * node = NULL;
+
+	node = List_New_Sprite_Block(sel, para);
+
+	if(node != NULL)
+	{
+		list_add_node_tail(node,&gsprite[sel].header);
+		return node;
+	}
+	return NULL;
+}
+
+//在链表中寻找block id,并返回该结点的指针
+static list_head_t *  List_Find_Sprite_Block(__u32 sel, __s32 id)
+{
+	list_head_t * guard = NULL;
+
+	guard = gsprite[sel].header;
+
+	if(guard != NULL)
+	{
+		do
+		{
+			if(guard->data->id == id)
+			{
+				return guard;
+			}
+			guard = guard->next;
+		}
+		while(guard != gsprite[sel].header);
+	}
+
+	return NULL;
+
+}
+
+//从链表中删除block id,并返回该block的指针
+static list_head_t * List_Delete_Sprite_Block(__u32 sel, list_head_t * node)
+{
+	__s32 id = 0;
+
+	if(node != NULL)
+	{
+	    id = node->data->id;
+		if(id == 0)//delete the first block
+		{
+			__s32 next_id = 0;
+			list_head_t * next_node = NULL;
+
+			next_id = node->next->data->id;
+			next_node = node->next;
+
+			if(id == next_id)//free the only block
+			{
+				gsprite[sel].header = NULL;
+			}
+			else
+			{
+				__s32 id_tmp = 0;
+
+				id_tmp = gsprite[sel].sprite_hid[0];
+				gsprite[sel].sprite_hid[0] = gsprite[sel].sprite_hid[next_id];
+				gsprite[sel].sprite_hid[next_id] = id_tmp;
+
+				next_node->data->id = 0;
+				node->data->id = next_id;
+
+				gsprite[sel].header = next_node;
+			}
+		}
+		list_del_node(node);
+		return node;
+	}
+	else
+	{
+		return NULL;
+	}
+}
+
+//从链表中删除block id,并释放其空间,返回该block的id(该id可能不是其原来的id)
+static __s32 List_Delete_Free_Sprite_Block(__u32 sel, list_head_t * node)
+{
+    __s32 ret = -1;
+
+	if(node != NULL)
+	{
+	    List_Delete_Sprite_Block(sel, node);
+	    ret = node->data->id;
+		list_free_node(node);
+	}
+	return ret;
+}
+
+static __s32 List_Assert_Sprite_Block(__u32 sel, list_head_t * dst_node, list_head_t * node)
+{
+	list_head_t * next_node = NULL;
+
+	if(gsprite[sel].header == NULL)
+	{
+		gsprite[sel].header = node;
+		return DIS_SUCCESS;
+	}
+	else if(dst_node == NULL)//asset to the front of the list
+	{
+	    __s32 id = 0;
+		__s32 id_tmp = 0;
+
+		next_node = gsprite[sel].header;
+
+		id = node->data->id;
+		node->data->id = 0;
+		next_node->data->id = id;
+
+		id_tmp = gsprite[sel].sprite_hid[0];
+		gsprite[sel].sprite_hid[0] = gsprite[sel].sprite_hid[id];
+		gsprite[sel].sprite_hid[id] = id_tmp;
+
+		gsprite[sel].header = node;
+
+		dst_node = next_node->prev;
+	}
+	else
+	{
+		next_node = dst_node->next;
+	}
+	___list_add(node,dst_node,next_node);
+
+	return DIS_SUCCESS;
+}
+
+static __s32 List_Get_First_Sprite_Block_Id(__u32 sel)
+{
+	if(gsprite[sel].header == NULL)
+	{
+		return -1;
+	}
+	else
+	{
+		return gsprite[sel].header->data->id;
+	}
+}
+
+static __s32 List_Get_Last_Sprite_Block_Id(__u32 sel)
+{
+	if(gsprite[sel].header == NULL)
+	{
+		return -1;
+	}
+	else
+	{
+		return gsprite[sel].header->prev->data->id;
+	}
+}
+
+static __s32 sprite_set_sprite_block_para(__u32 sel, __u32 id, __u32 next_id, __disp_sprite_block_para_t * para)
+{
+    __u32 bpp, addr;
+
+    bpp = de_format_to_bpp(gsprite[sel].format);
+
+	addr = DE_BE_Offset_To_Addr((__u32)para->fb.addr[0] ,para->fb.size.width, para->src_win.x, para->src_win.y, bpp);
+	DE_BE_Sprite_Block_Set_fb(sel, id, (__u32)OSAL_VAtoPA((void*)addr), para->fb.size.width*(bpp>>3));
+	DE_BE_Sprite_Block_Set_Pos(sel, id, para->scn_win.x, para->scn_win.y);
+	DE_BE_Sprite_Block_Set_Size(sel, id, para->scn_win.width, para->scn_win.height);
+	DE_BE_Sprite_Block_Set_Next_Id(sel, id, next_id);
+
+    OSAL_CacheRangeFlush((void*)para->fb.addr[0], (para->fb.size.width * para->scn_win.height * bpp + 7)/8,CACHE_CLEAN_FLUSH_D_CACHE_REGION);
+
+    return 0;
+}
+
+__s32 BSP_disp_sprite_init(__u32 sel)
+{
+	__s32 i = 0;
+
+	memset(&gsprite[sel],0,sizeof(sprite_t));
+	gsprite[sel].status = 0;
+	for(i = 0;i<MAX_SPRITE_BLOCKS;i++)
+    {
+        gsprite[sel].block_status[i] = 0;
+        gsprite[sel].sprite_hid[i] = 100+i;
+    }
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_exit(__u32 sel)
+{
+	__s32 i = 0;
+	list_head_t * pGuard = NULL;
+	list_head_t * pNext = NULL;
+
+	gsprite[sel].status = 0;
+	for(i = 0;i<MAX_SPRITE_BLOCKS;i++)
+	{
+		gsprite[sel].block_status[i] = 0;
+		gsprite[sel].sprite_hid[i] = 100+i;
+	}
+
+	pGuard = gsprite[sel].header;
+	pGuard->prev->next = NULL;
+	while(pGuard != NULL)
+	{
+		pNext = pGuard->next;
+		list_free_node(pGuard);
+		pGuard = pNext;
+	}
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_open(__u32 sel)
+{
+    __u32 cpu_sr;
+
+	if(!gsprite[sel].status & SPRITE_OPENED)
+	{
+		DE_BE_Sprite_Enable(sel, TRUE);
+
+		OSAL_IrqLock(&cpu_sr);
+		gsprite[sel].enable = TRUE;
+		gsprite[sel].status|= SPRITE_OPENED;
+		OSAL_IrqUnLock(cpu_sr);
+	}
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_close(__u32 sel)
+{
+    __u32 cpu_sr;
+
+	if(gsprite[sel].status & SPRITE_OPENED)
+	{
+		DE_BE_Sprite_Enable(sel, FALSE);
+
+		OSAL_IrqLock(&cpu_sr);
+		gsprite[sel].enable = FALSE;
+		gsprite[sel].status &=SPRITE_OPENED_MASK;
+		OSAL_IrqUnLock(cpu_sr);
+	}
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_alpha_enable(__u32 sel)
+{
+	DE_BE_Sprite_Global_Alpha_Enable(sel, TRUE);
+	gsprite[sel].global_alpha_enable = TRUE;
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_alpha_disable(__u32 sel)
+{
+	DE_BE_Sprite_Global_Alpha_Enable(sel, FALSE);
+	gsprite[sel].global_alpha_enable = FALSE;
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_get_alpha_enable(__u32 sel)
+{
+	return gsprite[sel].global_alpha_enable;
+}
+
+__s32 BSP_disp_sprite_set_alpha_vale(__u32 sel, __u32 alpha)
+{
+	DE_BE_Sprite_Set_Global_Alpha(sel, alpha);
+	gsprite[sel].global_alpha_value = alpha;
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_get_alpha_value(__u32 sel)
+{
+	return gsprite[sel].global_alpha_value;
+}
+
+__s32 BSP_disp_sprite_set_format(__u32 sel, __disp_pixel_fmt_t format, __disp_pixel_seq_t pixel_seq)
+{
+	gsprite[sel].format = format;
+	gsprite[sel].pixel_seq = pixel_seq;
+	DE_BE_Sprite_Set_Format(sel, pixel_seq,(format==DISP_FORMAT_ARGB8888)?0:1);
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_set_palette_table(__u32 sel, __u32 *buffer, __u32 offset, __u32 size)
+{
+    if((buffer == NULL) || ((offset+size)>1024))
+    {
+        DE_WRN("para invalid in BSP_disp_sprite_set_palette_table\n");
+        return DIS_PARA_FAILED;
+    }
+
+    DE_BE_Sprite_Set_Palette_Table(sel, (__u32)buffer,offset,size);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_sprite_set_order(__u32 sel, __s32 hid,__s32 dst_hid)//todo
+{
+	__s32 id = 0, dst_id = 0;
+	list_head_t * node = NULL, * dst_node = NULL, *chg_node0 = NULL, *chg_node1 = NULL;
+	__disp_sprite_block_para_t para;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	dst_id = Sprite_Hid_To_Id(sel, dst_hid);
+	if((gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+		&& (dst_id == -1 || (gsprite[sel].block_status[dst_id] & SPRITE_BLOCK_USED)))
+	{
+		if(id == dst_id)//same block,not need to move
+		{
+			return DIS_SUCCESS;
+		}
+		if(dst_id != -1)
+		{
+			dst_node = List_Find_Sprite_Block(sel, dst_id);
+			if(dst_node->next->data->id == id && id != 0)//it is the order,not need to move
+			{
+				return DIS_SUCCESS;
+			}
+		}
+		else
+		{
+		    dst_node = NULL;
+		}
+
+		node = List_Find_Sprite_Block(sel, id);
+		if(id == 0)//the block is the first block
+		{
+			chg_node0 = node->next;
+		}
+		else
+		{
+			chg_node0 = node->prev;
+		}
+
+		if(dst_id == -1)//move to the front of the list
+		{
+			chg_node1 = gsprite[sel].header;
+		}
+		else
+		{
+			chg_node1 = List_Find_Sprite_Block(sel, dst_id);
+		}
+
+		List_Delete_Sprite_Block(sel, node);
+		List_Assert_Sprite_Block(sel, dst_node,node);
+
+		para.fb.addr[0] = node->data->address;
+		para.fb.size.width = node->data->size.width;
+		para.src_win.x = node->data->src_win.x;
+		para.src_win.y = node->data->src_win.y;
+		memcpy(&para.scn_win,&node->data->scn_win,sizeof(__disp_rect_t));
+		if(node->data->enable == FALSE)
+		{
+			para.scn_win.y = -2000;
+		}
+		sprite_set_sprite_block_para(sel, node->data->id,node->next->data->id,&para);
+
+		para.fb.addr[0] = chg_node0->data->address;
+		para.fb.size.width = chg_node0->data->size.width;
+		para.src_win.x = chg_node0->data->src_win.x;
+		para.src_win.y = chg_node0->data->src_win.y;
+		memcpy(&para.scn_win,&chg_node0->data->scn_win,sizeof(__disp_rect_t));
+		if(chg_node0->data->enable == FALSE)
+		{
+			para.scn_win.y = -2000;
+		}
+		sprite_set_sprite_block_para(sel, chg_node0->data->id,chg_node0->next->data->id,&para);
+
+		para.fb.addr[0] = chg_node1->data->address;
+		para.fb.size.width = chg_node1->data->size.width;
+		para.src_win.x = chg_node1->data->src_win.x;
+		para.src_win.y = chg_node1->data->src_win.y;
+		memcpy(&para.scn_win,&chg_node1->data->scn_win,sizeof(__disp_rect_t));
+		if(chg_node1->data->enable == FALSE)
+		{
+			para.scn_win.y = -2000;
+		}
+		sprite_set_sprite_block_para(sel, chg_node1->data->id,chg_node1->next->data->id,&para);
+
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+__s32 BSP_disp_sprite_get_top_block(__u32 sel)
+{
+	__u32 id;
+
+	id = List_Get_First_Sprite_Block_Id(sel);
+	return Sprite_Id_To_Hid(sel, id);
+}
+
+__s32 BSP_disp_sprite_get_bottom_block(__u32 sel)
+{
+	__u32 id;
+
+	id = List_Get_Last_Sprite_Block_Id(sel);
+	return Sprite_Id_To_Hid(sel, id);
+}
+
+__s32 BSP_disp_sprite_get_block_number(__u32 sel)
+{
+	return gsprite[sel].block_num;
+}
+
+//the para including fb address,fb width,fb height,source x/y offset,screen window
+__s32 BSP_disp_sprite_block_request(__u32 sel, __disp_sprite_block_para_t *para)
+{
+	__s32 id = 0;
+	__disp_sprite_block_para_t cur_para;
+	list_head_t * node = NULL;
+	__u32 cpu_sr;
+
+	if((para->scn_win.width != 8) && (para->scn_win.width != 16) && (para->scn_win.width != 32)
+		&& (para->scn_win.width != 64) && (para->scn_win.width != 128) && (para->scn_win.width != 256)
+		&& (para->scn_win.width != 512))
+	{
+		DE_WRN("BSP_disp_sprite_block_request,scn_win width invalid:%d\n",para->scn_win.width);
+		return DIS_NULL;
+	}
+	if((para->scn_win.height != 8) && (para->scn_win.height != 16) && (para->scn_win.height != 32)
+		&& (para->scn_win.height != 64) && (para->scn_win.height != 128) && (para->scn_win.height != 256)
+		&& (para->scn_win.height != 512) && (para->scn_win.height != 1024))
+	{
+		DE_WRN("BSP_disp_sprite_block_request,scn_win height invalid:%d\n",para->scn_win.height);
+		return DIS_NULL;
+	}
+
+    node = List_Add_Sprite_Block(sel, para);
+    if(node == NULL)
+    {
+        return (__s32)NULL;
+    }
+
+    id = node->data->id;
+	node->data->address = (__u32)para->fb.addr[0];
+	node->data->size.width = para->fb.size.width;
+	node->data->src_win.x = para->src_win.x;
+	node->data->src_win.y = para->src_win.y;
+	node->data->scn_win.x = para->scn_win.x;
+	node->data->scn_win.y = para->scn_win.y;
+	node->data->scn_win.width = para->scn_win.width;
+	node->data->scn_win.height = para->scn_win.height;
+
+    memcpy(&cur_para,para,sizeof(__disp_sprite_block_para_t));
+    cur_para.scn_win.y = -2000;
+
+	DE_BE_Sprite_Block_Set_Next_Id(sel, node->prev->data->id, id);
+	sprite_set_sprite_block_para(sel, id, 0, para);
+
+    OSAL_IrqLock(&cpu_sr);
+	gsprite[sel].block_status[id] |= SPRITE_BLOCK_USED;
+	gsprite[sel].block_num ++;
+    OSAL_IrqUnLock(cpu_sr);
+
+    return Sprite_Id_To_Hid(sel, id);
+
+}
+
+__s32 BSP_disp_sprite_block_release(__u32 sel, __s32 hid)
+{
+	__s32 id = 0,pre_id = 0,next_id = 0;
+	list_head_t * node = NULL, *next_node=NULL, *pre_node=NULL;
+	__s32 release_id = 0;
+	__u32 cpu_sr;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+		pre_node = node->prev;
+		next_node = node->next;
+		pre_id = node->prev->data->id;
+		next_id = node->next->data->id;
+		release_id = List_Delete_Free_Sprite_Block(sel, node);
+
+		if(id == pre_id)//release the only block
+		{
+			__disp_sprite_block_para_t para;
+
+			para.fb.addr[0] = 0;
+			para.fb.size.width = 8;
+			para.fb.format = DISP_FORMAT_ARGB8888;
+			para.src_win.x = 0;
+			para.src_win.y = 0;
+			para.scn_win.x = 0;
+			para.scn_win.y = -2000;
+			para.scn_win.width = 8;
+			para.scn_win.height = 8;
+
+			sprite_set_sprite_block_para(sel, id,0,&para);
+		}
+		else if(id == 0)//release the first block
+		{
+			__disp_sprite_block_para_t para;
+
+			para.fb.addr[0] = next_node->data->address;
+			para.fb.size.width = next_node->data->size.width;
+			para.src_win.x = next_node->data->src_win.x;
+			para.src_win.y = next_node->data->src_win.y;
+			para.scn_win.x = next_node->data->scn_win.x;
+			if(next_node->data->enable == FALSE)
+            {
+                para.scn_win.y = -2000;
+            }
+            else
+            {
+				para.scn_win.y = next_node->data->scn_win.y;
+			}
+			para.scn_win.width = next_node->data->scn_win.width;
+			para.scn_win.height = next_node->data->scn_win.height;
+			sprite_set_sprite_block_para(sel, 0,next_node->next->data->id,&para);
+
+			para.fb.addr[0] = 0;
+			para.fb.size.width= 8;
+			para.src_win.x = 0;
+			para.src_win.y = 0;
+			para.scn_win.x = 0;
+			para.scn_win.y = -2000;
+			para.scn_win.width = 8;
+			para.scn_win.height = 8;
+			sprite_set_sprite_block_para(sel, next_id,0,&para);
+		}
+		else
+		{
+			__disp_sprite_block_para_t para;
+
+			para.fb.addr[0] = pre_node->data->address;
+			para.fb.size.width= pre_node->data->size.width;
+			para.src_win.x = pre_node->data->src_win.x;
+			para.src_win.y = pre_node->data->src_win.y;
+			para.scn_win.x = pre_node->data->scn_win.x;
+            if(node->data->enable == FALSE)
+            {
+                para.scn_win.y = -2000;
+            }
+            else
+            {
+			    para.scn_win.y = pre_node->data->scn_win.y;
+            }
+			para.scn_win.width = pre_node->data->scn_win.width;
+			para.scn_win.height = pre_node->data->scn_win.height;
+			sprite_set_sprite_block_para(sel, pre_id,next_id,&para);
+
+			para.fb.addr[0] = 0;
+			para.fb.size.width = 8;
+			para.src_win.x = 0;
+			para.src_win.y = 0;
+			para.scn_win.x = 0;
+			para.scn_win.y = -2000;
+			para.scn_win.width = 8;
+			para.scn_win.height = 8;
+			sprite_set_sprite_block_para(sel, id,0,&para);
+		}
+
+		OSAL_IrqLock(&cpu_sr);
+		gsprite[sel].block_status[release_id] &= SPRITE_BLOCK_USED_MASK;
+		gsprite[sel].block_num --;
+		OSAL_IrqUnLock(cpu_sr);
+
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+//setting srceen window(x,y,width,height)
+__s32 BSP_disp_sprite_block_set_screen_win(__u32 sel, __s32 hid, __disp_rect_t * scn_win)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+	__disp_rect_t cur_scn;
+	__u32 cpu_sr;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		if((scn_win->width != 8) && (scn_win->width != 16) && (scn_win->width != 32)
+			&& (scn_win->width != 64) && (scn_win->width != 128) && (scn_win->width != 256)
+			&& (scn_win->width != 512))
+		{
+			DE_WRN("BSP_disp_sprite_block_set_screen_win,scn_win width invalid:%d\n",scn_win->width);
+			return DIS_PARA_FAILED;
+		}
+		if((scn_win->height != 8) && (scn_win->height != 16) && (scn_win->height != 32)
+			&& (scn_win->height != 64) && (scn_win->height != 128) && (scn_win->height != 256)
+			&& (scn_win->height != 512) && (scn_win->height != 1024))
+		{
+			DE_WRN("BSP_disp_sprite_block_set_screen_win,scn_win height invalid:%d\n",scn_win->height);
+			return DIS_PARA_FAILED;
+		}
+
+		node = List_Find_Sprite_Block(sel, id);
+		if(node == NULL)
+		{
+			return DIS_PARA_FAILED;
+		}
+
+		cur_scn.x = scn_win->x;
+		cur_scn.y = scn_win->y;
+		cur_scn.width = scn_win->width;
+		cur_scn.height = scn_win->height;
+
+		if(node->data->enable == FALSE)
+		{
+			cur_scn.y = -2000;
+		}
+    	DE_BE_Sprite_Block_Set_Pos(sel, id,cur_scn.x,cur_scn.y);
+    	DE_BE_Sprite_Block_Set_Size(sel, id,cur_scn.width,cur_scn.height);
+
+		OSAL_IrqLock(&cpu_sr);
+		node->data->scn_win.x = scn_win->x;
+		node->data->scn_win.y = scn_win->y;
+		node->data->scn_win.width = scn_win->width;
+		node->data->scn_win.height = scn_win->height;
+		OSAL_IrqUnLock(cpu_sr);
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+
+}
+
+__s32 BSP_disp_sprite_block_get_srceen_win(__u32 sel, __s32 hid, __disp_rect_t * scn_win)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+
+		scn_win->x = node->data->scn_win.x;
+		scn_win->y = node->data->scn_win.y;
+		scn_win->width = node->data->scn_win.width;
+		scn_win->height = node->data->scn_win.height;
+
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+//setting source x/y offset
+__s32 BSP_disp_sprite_block_set_src_win(__u32 sel, __s32 hid, __disp_rect_t * src_win)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+	__u32 cpu_sr;
+	__u32 bpp, addr;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+        node = List_Find_Sprite_Block(sel, id);
+
+        bpp = de_format_to_bpp(gsprite[sel].format);
+        addr = DE_BE_Offset_To_Addr(node->data->address, node->data->size.width, src_win->x, src_win->y, bpp);
+        DE_BE_Sprite_Block_Set_fb(sel, id,(__u32)OSAL_VAtoPA((void*)addr),node->data->size.width*(bpp>>3));
+
+        OSAL_IrqLock(&cpu_sr);
+        node->data->src_win.x = src_win->x;
+        node->data->src_win.y = src_win->y;
+        OSAL_IrqUnLock(cpu_sr);
+
+        return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+
+}
+
+__s32 BSP_disp_sprite_block_get_src_win(__u32 sel, __s32 hid, __disp_rect_t * src_win)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+
+		src_win->x = node->data->src_win.x;
+		src_win->y = node->data->src_win.y;
+		src_win->width = node->data->scn_win.width;
+		src_win->height = node->data->scn_win.height;
+
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+//setting fb address,fb width,fb height;keep the source x/y offset
+__s32 BSP_disp_sprite_block_set_framebuffer(__u32 sel, __s32 hid, __disp_fb_t * fb)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+	__s32 bpp = 0, addr;
+	__u32 cpu_sr;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+
+		bpp = de_format_to_bpp(gsprite[sel].format);
+		OSAL_CacheRangeFlush((void *)fb->addr[0], (fb->size.width * node->data->src_win.height * bpp + 7)/8,CACHE_CLEAN_FLUSH_D_CACHE_REGION);
+
+    	addr = DE_BE_Offset_To_Addr( fb->addr[0], fb->size.width, node->data->src_win.x, node->data->src_win.y, bpp);
+        DE_BE_Sprite_Block_Set_fb(sel, id,(__u32)OSAL_VAtoPA((void*)addr), fb->size.width*(bpp>>3));
+
+		OSAL_IrqLock(&cpu_sr);
+		node->data->address = fb->addr[0];
+		node->data->size.width = fb->size.width;
+		node->data->size.height = fb->size.height;
+		OSAL_IrqUnLock(cpu_sr);
+
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+
+}
+
+__s32 BSP_disp_sprite_block_get_framebufer(__u32 sel, __s32 hid,__disp_fb_t *fb)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+
+		fb->format = gsprite[sel].format;
+		fb->seq = gsprite[sel].pixel_seq;
+		fb->addr[0] = node->data->address;
+		fb->size.width = node->data->size.width;
+		fb->size.height = node->data->size.height;
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+//setting fb address,fb width,fb height,source x/y offset,screen window
+__s32 BSP_disp_sprite_block_set_para(__u32 sel, __u32 hid,__disp_sprite_block_para_t *para)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+	__disp_sprite_block_para_t cur_para;
+	__u32 cpu_sr;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+
+		memcpy(&cur_para,para,sizeof(__disp_sprite_block_para_t));
+		if(node->data->enable == FALSE)
+		{
+			cur_para.scn_win.y = -2000;
+		}
+
+	    sprite_set_sprite_block_para(sel, id, node->next->data->id, &cur_para);
+
+		OSAL_IrqLock(&cpu_sr);
+		node->data->address = para->fb.addr[0];
+		node->data->size.width = para->fb.size.width;
+		node->data->size.height = para->fb.size.height;
+		node->data->src_win.x = para->src_win.x;
+		node->data->src_win.y = para->src_win.y;
+		node->data->scn_win.x = para->scn_win.x;
+		node->data->scn_win.y = para->scn_win.y;
+		node->data->scn_win.width = para->scn_win.width;
+		node->data->scn_win.height = para->scn_win.height;
+		OSAL_IrqUnLock(cpu_sr);
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+__s32 BSP_disp_sprite_block_get_para(__u32 sel, __u32 hid,__disp_sprite_block_para_t *para)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+
+		para->fb.format = gsprite[sel].format;
+		para->fb.addr[0] = node->data->address;
+		para->fb.size.width = node->data->size.width;
+		para->fb.size.height = node->data->size.height;
+		para->src_win.x = node->data->src_win.x;
+		para->src_win.y = node->data->src_win.y;
+		para->src_win.width = node->data->scn_win.width;
+		para->src_win.height = node->data->scn_win.height;
+		para->scn_win.x = node->data->scn_win.x;
+		para->scn_win.y = node->data->scn_win.y;
+		para->scn_win.width = node->data->scn_win.width;
+		para->scn_win.height = node->data->scn_win.height;
+
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+__s32 BSP_disp_sprite_block_set_top(__u32 sel, __u32 hid)
+{
+	__u32 id;
+
+	id = List_Get_Last_Sprite_Block_Id(sel);
+	return BSP_disp_sprite_set_order(sel, hid,Sprite_Id_To_Hid(sel, id));
+}
+
+__s32 BSP_disp_sprite_block_set_bottom(__u32 sel, __u32 hid)
+{
+	return BSP_disp_sprite_set_order(sel, hid,0);
+}
+
+__s32 BSP_disp_sprite_block_get_pre_block(__u32 sel, __u32 hid)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+		if(node == gsprite[sel].header)//the block is the first
+		{
+			return 0;
+		}
+		return Sprite_Id_To_Hid(sel, node->prev->data->id);
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+__s32 BSP_disp_sprite_block_get_next_block(__u32 sel, __u32 hid)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+		if(node == gsprite[sel].header->prev)//the block is the last
+		{
+			return 0;
+		}
+		return Sprite_Id_To_Hid(sel, node->next->data->id);
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+__s32 BSP_disp_sprite_block_get_prio(__u32 sel, __u32 hid)
+{
+	__s32 id = 0;
+	__s32 prio = 0;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		list_head_t * guard = NULL;
+		guard = gsprite[sel].header;
+		if(guard != NULL)
+		{
+			do
+			{
+				if(guard->data->id == id)
+				{
+					return prio;
+				}
+				guard = guard->next;
+				prio ++;
+			}
+			while(guard != gsprite[sel].header);
+		}
+		return DIS_FAIL;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+__s32 BSP_disp_sprite_block_open(__u32 sel, __u32 hid)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+		if(node->data->enable == FALSE)
+		{
+        	DE_BE_Sprite_Block_Set_Pos(sel, id,node->data->scn_win.x,node->data->scn_win.y);
+        	DE_BE_Sprite_Block_Set_Size(sel, id,node->data->scn_win.width,node->data->scn_win.height);
+			node->data->enable = TRUE;
+		}
+		gsprite[sel].block_status[id] |= SPRITE_BLOCK_OPENED;
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
+__s32 BSP_disp_sprite_block_close(__u32 sel, __u32 hid)
+{
+	__s32 id = 0;
+	list_head_t * node = NULL;
+	__disp_rect_t scn_win;
+
+	id = Sprite_Hid_To_Id(sel, hid);
+	if(gsprite[sel].block_status[id] & SPRITE_BLOCK_USED)
+	{
+		node = List_Find_Sprite_Block(sel, id);
+		if(node->data->enable == TRUE)
+		{
+			scn_win.x = 0;
+			scn_win.y = -2000;
+			scn_win.width = node->data->scn_win.width;
+			scn_win.height = node->data->scn_win.height;
+        	DE_BE_Sprite_Block_Set_Pos(sel, id,scn_win.x,scn_win.y);
+        	DE_BE_Sprite_Block_Set_Size(sel, id,scn_win.width,scn_win.height);
+			node->data->enable = FALSE;
+		}
+		gsprite[sel].block_status[id] &= SPRITE_BLOCK_OPEN_MASK;
+		return DIS_SUCCESS;
+	}
+	else
+	{
+		return DIS_OBJ_NOT_INITED;
+	}
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_sprite.h b/drivers/video/sun4i/disp/de_bsp/de/disp_sprite.h
new file mode 100644
index 0000000..9334408
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_sprite.h
@@ -0,0 +1,52 @@
+#ifndef _DISP_SPRITE_H_
+#define _DISP_SPRITE_H_
+
+
+#include "disp_display_i.h"
+
+#define SPRITE_OPENED           0x00000001
+#define SPRITE_OPENED_MASK      (~(SPRITE_OPENED))
+#define SPRITE_USED	            0x00000002
+#define SPRITE_USED_MASK        (~(SPRITE_USED))
+
+#define SPRITE_BLOCK_OPENED     0x00000004
+#define SPRITE_BLOCK_OPEN_MASK  (~(SPRITE_OPENED))
+#define SPRITE_BLOCK_USED       0x00000008
+#define SPRITE_BLOCK_USED_MASK  (~(SPRITE_BLOCK_USED))
+
+typedef struct
+{
+	__s32   enable;
+	__s32	id;//0-31
+	__disp_rect_t src_win;
+	__disp_rect_t scn_win;
+	__u32	address;
+	__disp_rectsz_t size;
+}sprite_block_data_t;
+
+
+typedef struct my_list_head
+{
+	struct my_list_head * next;
+	struct my_list_head * prev;
+	sprite_block_data_t * data;
+}list_head_t;
+
+
+
+typedef struct
+{
+    __u32               status;
+    __u32               block_status[MAX_SPRITE_BLOCKS];
+    __bool 		        enable;
+	__disp_pixel_seq_t  pixel_seq;//0:argb,1:bgra
+	__disp_pixel_fmt_t  format;//0:32bpp; 1:8bpp
+	__bool 		        global_alpha_enable;
+	__u8 		        global_alpha_value;
+	__u8		        block_num;
+	__s32 	            sprite_hid[MAX_SPRITE_BLOCKS];
+	list_head_t *       header;
+}sprite_t;
+
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_tv.c b/drivers/video/sun4i/disp/de_bsp/de/disp_tv.c
new file mode 100644
index 0000000..2d3ab5f
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_tv.c
@@ -0,0 +1,453 @@
+#include "disp_tv.h"
+#include "disp_display.h"
+#include "disp_event.h"
+#include "disp_de.h"
+#include "disp_lcd.h"
+#include "disp_clk.h"
+
+__s32 Disp_Switch_Dram_Mode(__u32 type, __u8 tv_mod)
+{
+    return DIS_SUCCESS;
+}
+
+__s32 Disp_TVEC_Init(__u32 sel)
+{
+    __s32 ret = 0, value = 0;
+
+    tve_clk_init(sel);
+    tve_clk_on(sel);
+	TVE_init(sel);
+    tve_clk_off(sel);
+
+    gdisp.screen[sel].dac_source[0] = DISP_TV_DAC_SRC_Y;
+    gdisp.screen[sel].dac_source[1] = DISP_TV_DAC_SRC_PB;
+    gdisp.screen[sel].dac_source[2] = DISP_TV_DAC_SRC_PR;
+    gdisp.screen[sel].dac_source[3] = DISP_TV_DAC_SRC_COMPOSITE;
+
+    ret = OSAL_Script_FetchParser_Data("tv_out_dac_para", "dac_used", &value, 1);
+    if(ret < 0)
+    {
+        DE_INF("fetch script data tv_out_dac_para.dac_used fail\n");
+    }
+    else
+    {
+        DE_INF("tv_out_dac_para.dac_used=%d\n",value);
+
+	    if(value != 0)
+	    {
+	        __s32 i = 0;
+	        char sub_key[20];
+
+	        for(i=0; i<4; i++)
+	        {
+	            sprintf(sub_key, "dac%d_src", i);
+
+	            ret = OSAL_Script_FetchParser_Data("tv_out_dac_para", sub_key, &value, 1);
+	            if(ret < 0)
+	            {
+	                DE_INF("fetch script data tv_out_dac_para.%s fail\n", sub_key);
+	            }
+	            else
+	            {
+	                gdisp.screen[sel].dac_source[i] = value;
+	                DE_INF("tv_out_dac_para.%s = %d\n", sub_key, value);
+	            }
+	        }
+	    }
+    }
+
+    gdisp.screen[sel].tv_mode = DISP_TV_MOD_720P_50HZ;
+    return DIS_SUCCESS;
+}
+
+
+__s32 Disp_TVEC_Exit(__u32 sel)
+{
+    TVE_exit(sel);
+    tve_clk_exit(sel);
+
+    return DIS_SUCCESS;
+}
+
+__s32 Disp_TVEC_Open(__u32 sel)
+{
+	TVE_open(sel);
+	return DIS_SUCCESS;
+}
+
+__s32 Disp_TVEC_Close(__u32 sel)
+{
+	TVE_dac_disable(sel, 0);
+	TVE_dac_disable(sel, 1);
+	TVE_dac_disable(sel, 2);
+	TVE_dac_disable(sel, 3);
+
+	TVE_close(sel);
+
+	return DIS_SUCCESS;
+}
+
+static void Disp_TVEC_DacCfg(__u32 sel, __u8 mode)
+{
+    __u32 i = 0;
+
+	TVE_dac_disable(sel, 0);
+	TVE_dac_disable(sel, 1);
+	TVE_dac_disable(sel, 2);
+	TVE_dac_disable(sel, 3);
+
+	switch(mode)
+	{
+	case DISP_TV_MOD_NTSC:
+	case DISP_TV_MOD_PAL:
+	case DISP_TV_MOD_PAL_M:
+	case DISP_TV_MOD_PAL_NC:
+    	{
+    	    for(i=0; i<4; i++)
+    	    {
+    	        if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_COMPOSITE)
+    	        {
+    	            TVE_dac_set_source(sel, i, DISP_TV_DAC_SRC_COMPOSITE);
+    	            TVE_dac_enable(sel, i);
+    	            TVE_dac_sel(sel, i, i);
+    	        }
+    	    }
+    	}
+	    break;
+
+	case DISP_TV_MOD_NTSC_SVIDEO:
+	case DISP_TV_MOD_PAL_SVIDEO:
+	case DISP_TV_MOD_PAL_M_SVIDEO:
+	case DISP_TV_MOD_PAL_NC_SVIDEO:
+		{
+		    for(i=0; i<4; i++)
+		    {
+		        if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_LUMA)
+		        {
+		            TVE_dac_set_source(sel, i, DISP_TV_DAC_SRC_LUMA);
+		            TVE_dac_enable(sel, i);
+		            TVE_dac_sel(sel, i, i);
+		        }
+		        else if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_CHROMA)
+		        {
+		            TVE_dac_set_source(sel, i, DISP_TV_DAC_SRC_CHROMA);
+		            TVE_dac_enable(sel, i);
+		            TVE_dac_sel(sel, i, i);
+		        }
+		    }
+		}
+		break;
+
+	case DISP_TV_MOD_480I:
+	case DISP_TV_MOD_576I:
+	case DISP_TV_MOD_480P:
+	case DISP_TV_MOD_576P:
+	case DISP_TV_MOD_720P_50HZ:
+	case DISP_TV_MOD_720P_60HZ:
+	case DISP_TV_MOD_1080I_50HZ:
+	case DISP_TV_MOD_1080I_60HZ:
+	case DISP_TV_MOD_1080P_50HZ:
+	case DISP_TV_MOD_1080P_60HZ:
+        {
+    	    for(i=0; i<4; i++)
+    	    {
+    	        if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_Y)
+    	        {
+    	            TVE_dac_set_source(sel, i, DISP_TV_DAC_SRC_Y);
+		            TVE_dac_enable(sel, i);
+		            TVE_dac_sel(sel, i, i);
+    	        }
+    	        else if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_PB)
+    	        {
+    	            TVE_dac_set_source(sel, i, DISP_TV_DAC_SRC_PB);
+		            TVE_dac_enable(sel, i);
+		            TVE_dac_sel(sel, i, i);
+    	        }
+    	        else if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_PR)
+    	        {
+    	            TVE_dac_set_source(sel, i, DISP_TV_DAC_SRC_PR);
+		            TVE_dac_enable(sel, i);
+		            TVE_dac_sel(sel, i, i);
+    	        }
+    	    }
+    	}
+    	break;
+
+	default:
+		break;
+	}
+}
+
+__s32 BSP_disp_tv_open(__u32 sel)
+{
+    if(!(gdisp.screen[sel].status & TV_ON))
+    {
+        __disp_tv_mode_t     tv_mod;
+        __u32 scaler_index = 0;
+
+        tv_mod = gdisp.screen[sel].tv_mode;
+
+        image_clk_on(sel);
+        Image_open(sel);//set image normal channel start bit , because every de_clk_off( )will reset this bit
+
+        disp_clk_cfg(sel,DISP_OUTPUT_TYPE_TV, tv_mod);
+        tve_clk_on(sel);
+        lcdc_clk_on(sel);
+
+        BSP_disp_set_yuv_output(sel, TRUE);
+        DE_BE_set_display_size(sel, tv_mode_to_width(tv_mod), tv_mode_to_height(tv_mod));
+        DE_BE_Output_Select(sel, sel);
+		DE_BE_Set_Outitl_enable(sel, Disp_get_screen_scan_mode(tv_mod));
+
+        for(scaler_index=0; scaler_index<2; scaler_index++)
+        {
+            if((gdisp.scaler[scaler_index].status & SCALER_USED) && (gdisp.scaler[scaler_index].screen_index == sel))
+            {
+                if(Disp_get_screen_scan_mode(tv_mod) == 1)//interlace output
+                {
+                    Scaler_Set_Outitl(scaler_index, TRUE);
+                }
+                else
+                {
+                    Scaler_Set_Outitl(scaler_index, FALSE);
+                }
+            }
+        }
+
+        TCON1_set_tv_mode(sel,tv_mod);
+        TVE_set_tv_mode(sel, tv_mod);
+        Disp_TVEC_DacCfg(sel, tv_mod);
+
+        TCON1_open(sel);
+        Disp_TVEC_Open(sel);
+
+        Disp_Switch_Dram_Mode(DISP_OUTPUT_TYPE_TV, tv_mod);
+#ifdef __LINUX_OSAL__
+        {
+            user_gpio_set_t  gpio_info[1];
+            __hdle gpio_pa_shutdown;
+            __s32 ret;
+            __u32 reg_val;
+
+            memset(gpio_info, 0, sizeof(user_gpio_set_t));
+            ret = OSAL_Script_FetchParser_Data("audio_para","audio_pa_ctrl", (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+            if(ret < 0)
+            {
+                DE_WRN("fetch script data audio_para.audio_pa_ctrl fail\n");
+            }
+            else
+            {
+                gpio_pa_shutdown = OSAL_GPIO_Request(gpio_info, 1);
+                if(!gpio_pa_shutdown)
+                {
+                    DE_WRN("audio codec_wakeup request gpio fail!\n");
+                }
+                else
+                {
+                    OSAL_GPIO_DevWRITE_ONEPIN_DATA(gpio_pa_shutdown, 0, "audio_pa_ctrl");
+                }
+            }
+            /************for audio*****************/
+			reg_val = readl(0xf1c22c10);
+			reg_val &=~(1<<27);
+			reg_val |=(1<<27);
+			writel(reg_val, 0xf1c22c10);
+			/************for audio*****************/
+        }
+#endif
+        gdisp.screen[sel].b_out_interlace = Disp_get_screen_scan_mode(tv_mod);
+        gdisp.screen[sel].status |= TV_ON;
+        gdisp.screen[sel].lcdc_status |= LCDC_TCON1_USED;
+        gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_TV;
+    }
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_tv_close(__u32 sel)
+{
+    if(gdisp.screen[sel].status & TV_ON)
+    {
+        __u32 scaler_index = 0;
+
+        Image_close(sel);
+        TCON1_close(sel);
+        Disp_TVEC_Close(sel);
+
+        tve_clk_off(sel);
+        image_clk_off(sel);
+        lcdc_clk_off(sel);
+		DE_BE_Set_Outitl_enable(sel, FALSE);
+        for(scaler_index=0; scaler_index<2; scaler_index++)
+        {
+            if((gdisp.scaler[scaler_index].status & SCALER_USED) && (gdisp.scaler[scaler_index].screen_index == sel))
+            {
+                Scaler_Set_Outitl(scaler_index, FALSE);
+            }
+        }
+#ifdef __LINUX_OSAL__
+        {
+            user_gpio_set_t  gpio_info[1];
+            __hdle gpio_pa_shutdown;
+            __s32 ret;
+            __u32 reg_val;
+
+            memset(gpio_info, 0, sizeof(user_gpio_set_t));
+            ret = OSAL_Script_FetchParser_Data("audio_para","audio_pa_ctrl", (int *)gpio_info, sizeof(user_gpio_set_t)/sizeof(int));
+            if(ret < 0)
+            {
+                DE_WRN("fetch script data audio_para.audio_pa_ctrl fail\n");
+            }
+            else
+            {
+                gpio_pa_shutdown = OSAL_GPIO_Request(gpio_info, 1);
+                if(!gpio_pa_shutdown)
+                {
+                    DE_WRN("audio codec_wakeup request gpio fail!\n");
+                }
+                else
+                {
+                    OSAL_GPIO_DevWRITE_ONEPIN_DATA(gpio_pa_shutdown, 1, "audio_pa_ctrl");
+                }
+            }
+            /************for audio*****************/
+			reg_val = readl(0xf1c22c10);
+			reg_val &=~(1<<27);
+			writel(reg_val, 0xf1c22c10);
+			/************for audio*****************/
+        }
+#endif
+		gdisp.screen[sel].b_out_interlace = 0;
+        gdisp.screen[sel].status &= TV_OFF;
+        gdisp.screen[sel].lcdc_status &= LCDC_TCON1_USED_MASK;
+        gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_NONE;
+		gdisp.screen[sel].pll_use_status &= ((gdisp.screen[sel].pll_use_status == VIDEO_PLL0_USED)? VIDEO_PLL0_USED_MASK : VIDEO_PLL1_USED_MASK);
+    }
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_tv_set_mode(__u32 sel, __disp_tv_mode_t tv_mod)
+{
+    if(tv_mod >= DISP_TV_MODE_NUM)
+    {
+        DE_WRN("unsupported tv mode:%d in BSP_disp_tv_set_mode\n", tv_mod);
+        return DIS_FAIL;
+    }
+
+    gdisp.screen[sel].tv_mode = tv_mod;
+    gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_TV;
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_tv_get_mode(__u32 sel)
+{
+    return gdisp.screen[sel].tv_mode;
+}
+
+
+__s32 BSP_disp_tv_get_interface(__u32 sel)
+{
+    __u8 dac[4];
+    __s32 i = 0;
+	__u32  ret = DISP_TV_NONE;
+
+    for(i=0; i<4; i++)
+    {
+        dac[i] = TVE_get_dac_status(i);
+    }
+
+    if(dac[0]>1 || dac[1]>1 || dac[2]>1 || dac[3]>1)
+    {
+        DE_WRN("shor to ground\n");
+    }
+    else
+    {
+        for(i=0; i<4; i++)
+        {
+            if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_COMPOSITE && dac[i] == 1)
+            {
+                ret |= DISP_TV_CVBS;
+            }
+            else if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_Y && dac[i] == 1)
+            {
+                ret |= DISP_TV_YPBPR;
+            }
+            else if(gdisp.screen[sel].dac_source[i] == DISP_TV_DAC_SRC_LUMA && dac[i] == 1)
+            {
+                ret |= DISP_TV_SVIDEO;
+            }
+        }
+    }
+
+    return  ret;
+}
+
+
+
+__s32 BSP_disp_tv_get_dac_status(__u32 sel, __u32 index)
+{
+	return gdisp.screen[sel].dac_source[index];
+}
+
+__s32 BSP_disp_tv_set_dac_source(__u32 sel, __u32 index, __disp_tv_dac_source source)
+{
+    gdisp.screen[sel].dac_source[index] = source;
+
+    if(gdisp.screen[sel].status & TV_ON)
+    {
+        Disp_TVEC_DacCfg(sel, gdisp.screen[sel].tv_mode);
+    }
+
+    return  0;
+}
+
+__s32 BSP_disp_tv_get_dac_source(__u32 sel, __u32 index)
+{
+    return (__s32)gdisp.screen[sel].dac_source[index];
+}
+
+__s32 BSP_disp_tv_auto_check_enable(__u32 sel)
+{
+    TVE_dac_autocheck_enable(sel, 0);
+    TVE_dac_autocheck_enable(sel, 1);
+    TVE_dac_autocheck_enable(sel, 2);
+    TVE_dac_autocheck_enable(sel, 3);
+
+    return DIS_SUCCESS;
+}
+
+
+__s32 BSP_disp_tv_auto_check_disable(__u32 sel)
+{
+    TVE_dac_autocheck_disable(sel, 0);
+    TVE_dac_autocheck_disable(sel, 1);
+    TVE_dac_autocheck_disable(sel, 2);
+    TVE_dac_autocheck_disable(sel, 3);
+
+    return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_tv_set_src(__u32 sel, __disp_lcdc_src_t src)
+{
+    switch (src)
+    {
+        case DISP_LCDC_SRC_DE_CH1:
+            TCON1_select_src(sel, LCDC_SRC_DE1);
+            break;
+
+        case DISP_LCDC_SRC_DE_CH2:
+            TCON1_select_src(sel, LCDC_SRC_DE2);
+            break;
+
+        case DISP_LCDC_SRC_BLUT:
+            TCON1_select_src(sel, LCDC_SRC_BLUE);
+            break;
+
+        default:
+            DE_WRN("not supported lcdc src:%d in BSP_disp_tv_set_src\n", src);
+            return DIS_NOT_SUPPORT;
+    }
+    return DIS_SUCCESS;
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_tv.h b/drivers/video/sun4i/disp/de_bsp/de/disp_tv.h
new file mode 100644
index 0000000..04fceec
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_tv.h
@@ -0,0 +1,14 @@
+
+#ifndef __DISP_TV_H__
+#define __DISP_TV_H__
+
+#include "disp_display_i.h"
+
+__s32 Disp_TVEC_Init(__u32 sel);
+__s32 Disp_TVEC_Exit(__u32 sel);
+__s32 Disp_TVEC_Open(__u32 sel);
+__s32 Disp_TVEC_Close(__u32 sel);
+__s32 Disp_Switch_Dram_Mode(__u32 type, __u8 tv_mod);
+__s32 Disp_TVEC_Event_Proc(void *parg);
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_vga.c b/drivers/video/sun4i/disp/de_bsp/de/disp_vga.c
new file mode 100644
index 0000000..e48c179
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_vga.c
@@ -0,0 +1,121 @@
+#include "disp_vga.h"
+#include "disp_de.h"
+#include "disp_display.h"
+#include "disp_event.h"
+#include "disp_tv.h"
+#include "disp_lcd.h"
+#include "disp_clk.h"
+
+
+__s32 VGA_Init(void)
+{
+	gdisp.screen[0].vga_mode = DISP_VGA_H1024_V768;
+    gdisp.screen[1].vga_mode = DISP_VGA_H1024_V768;
+
+	return DIS_SUCCESS;
+}
+
+__s32 VGA_Exit(void)
+{
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_vga_open(__u32 sel)
+{
+    if(!(gdisp.screen[sel].status & VGA_ON))
+    {
+    	__disp_vga_mode_t vga_mode;
+
+    	vga_mode = gdisp.screen[sel].vga_mode;
+
+    	lcdc_clk_on(sel);
+    	image_clk_on(sel);
+        Image_open(sel);//set image normal channel start bit , because every de_clk_off( )will reset this bit
+    	tve_clk_on(sel);
+    	disp_clk_cfg(sel,DISP_OUTPUT_TYPE_VGA, vga_mode);
+    	Disp_lcdc_pin_cfg(sel, DISP_OUTPUT_TYPE_VGA, 1);
+
+        BSP_disp_set_yuv_output(sel, FALSE);
+        DE_BE_set_display_size(sel, vga_mode_to_width(vga_mode), vga_mode_to_height(vga_mode));
+        DE_BE_Output_Select(sel, sel);
+    	TCON1_set_vga_mode(sel,vga_mode);
+        TVE_set_vga_mode(sel);
+
+    	Disp_TVEC_Open(sel);
+    	TCON1_open(sel);
+
+    	Disp_Switch_Dram_Mode(DISP_OUTPUT_TYPE_VGA, vga_mode);
+
+        gdisp.screen[sel].b_out_interlace = 0;
+    	gdisp.screen[sel].status |= VGA_ON;
+    	gdisp.screen[sel].lcdc_status |= LCDC_TCON1_USED;
+    	gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_VGA;
+	}
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_vga_close(__u32 sel)
+{
+	if(gdisp.screen[sel].status & VGA_ON)
+	{
+        Image_close(sel);
+    	TCON1_close(sel);
+    	Disp_TVEC_Close(sel);
+
+    	tve_clk_off(sel);
+    	image_clk_off(sel);
+    	lcdc_clk_off(sel);
+    	Disp_lcdc_pin_cfg(sel, DISP_OUTPUT_TYPE_VGA, 0);
+
+        gdisp.screen[sel].b_out_interlace = 0;
+    	gdisp.screen[sel].status &= VGA_OFF;
+    	gdisp.screen[sel].lcdc_status &= LCDC_TCON1_USED_MASK;
+    	gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_NONE;
+		gdisp.screen[sel].pll_use_status &= ((gdisp.screen[sel].pll_use_status == VIDEO_PLL0_USED)? VIDEO_PLL0_USED_MASK : VIDEO_PLL1_USED_MASK);
+    }
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_vga_set_mode(__u32 sel, __disp_vga_mode_t  mode)
+{
+    if((mode >= DISP_VGA_MODE_NUM) || (mode == DISP_VGA_H1440_V900_RB) || (mode == DISP_VGA_H1680_V1050_RB))
+    {
+        DE_WRN("unsupported vga mode:%d in BSP_disp_vga_set_mode\n", mode);
+        return DIS_FAIL;
+    }
+
+	gdisp.screen[sel].vga_mode = mode;//save current mode
+	gdisp.screen[sel].output_type = DISP_OUTPUT_TYPE_VGA;
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_vga_get_mode(__u32 sel)
+{
+	return gdisp.screen[sel].vga_mode;
+}
+
+__s32 BSP_disp_vga_set_src(__u32 sel, __disp_lcdc_src_t src)
+{
+    switch (src)
+    {
+        case DISP_LCDC_SRC_DE_CH1:
+            TCON1_select_src(sel, LCDC_SRC_DE1);
+            break;
+
+        case DISP_LCDC_SRC_DE_CH2:
+            TCON1_select_src(sel, LCDC_SRC_DE2);
+            break;
+
+        case DISP_LCDC_SRC_BLUT:
+            TCON1_select_src(sel, LCDC_SRC_BLUE);
+            break;
+
+        default:
+            DE_WRN("not supported lcdc src:%d in BSP_disp_tv_set_src\n", src);
+            return DIS_NOT_SUPPORT;
+    }
+    return DIS_SUCCESS;
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_vga.h b/drivers/video/sun4i/disp/de_bsp/de/disp_vga.h
new file mode 100644
index 0000000..830205a
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_vga.h
@@ -0,0 +1,8 @@
+
+#ifndef __DISP_VGA_H__
+#define __DISP_VGA_H__
+
+#include "disp_display_i.h"
+
+#endif
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_video.c b/drivers/video/sun4i/disp/de_bsp/de/disp_video.c
new file mode 100644
index 0000000..9286d9b
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_video.c
@@ -0,0 +1,334 @@
+
+#include "disp_video.h"
+#include "disp_display.h"
+#include "disp_event.h"
+#include "disp_scaler.h"
+#include "disp_de.h"
+
+frame_para_t g_video[2][4];
+
+static __inline __s32 Hal_Set_Frame(__u32 sel, __u32 tcon_index, __u32 id)
+{
+    __u32 cur_line = 0, start_delay = 0;
+
+    cur_line = LCDC_get_cur_line(sel, tcon_index);
+    start_delay = LCDC_get_start_delay(sel, tcon_index);
+	if(cur_line > start_delay-5)
+	{
+	    //DE_INF("cur_line(%d) >= start_delay(%d)-3 in Hal_Set_Frame\n", cur_line, start_delay);
+		return DIS_FAIL;
+	}
+
+    if(g_video[sel][id].display_cnt == 0)
+    {
+	    g_video[sel][id].pre_frame_addr0 = g_video[sel][id].video_cur.addr[0];
+        memcpy(&g_video[sel][id].video_cur, &g_video[sel][id].video_new, sizeof(__disp_video_fb_t));
+    }
+
+    if(gdisp.screen[sel].layer_manage[id].para.mode == DISP_LAYER_WORK_MODE_SCALER)
+    {
+        __u32 scaler_index;
+    	__scal_buf_addr_t scal_addr;
+        __scal_src_size_t in_size;
+        __scal_out_size_t out_size;
+        __scal_src_type_t in_type;
+        __scal_out_type_t out_type;
+        __scal_scan_mod_t in_scan;
+        __scal_scan_mod_t out_scan;
+        __disp_scaler_t * scaler;
+        __u32 pre_frame_addr = 0;
+        __u32 maf_flag_addr = 0;
+        __u32 maf_linestride = 0;
+
+        scaler_index = gdisp.screen[sel].layer_manage[id].scaler_index;
+
+        scaler = &(gdisp.scaler[scaler_index]);
+
+    	if(g_video[sel][id].video_cur.interlace == TRUE)
+    	{
+    		g_video[sel][id].dit_enable = FALSE;//todo
+
+            g_video[sel][id].fetch_field = TRUE;
+        	if(g_video[sel][id].display_cnt == 0)
+        	{
+        	    g_video[sel][id].fetch_bot = (g_video[sel][id].video_cur.top_field_first)?0:1;
+        	}
+        	else
+        	{
+        		g_video[sel][id].fetch_bot = (g_video[sel][id].video_cur.top_field_first)?1:0;
+        	}
+
+    		if(g_video[sel][id].dit_enable == TRUE)
+    		{
+    			if(g_video[sel][id].video_cur.maf_valid == TRUE)
+    			{
+    				g_video[sel][id].dit_mode = DIT_MODE_MAF;
+                	maf_flag_addr = (__u32)OSAL_VAtoPA((void*)g_video[sel][id].video_cur.flag_addr);
+            		maf_linestride =  g_video[sel][id].video_cur.flag_stride;
+    			}
+    			else
+    			{
+    				g_video[sel][id].dit_mode = DIT_MODE_MAF_BOB;
+    			}
+
+    			if(g_video[sel][id].video_cur.pre_frame_valid == TRUE)
+    			{
+    				g_video[sel][id].tempdiff_en = TRUE;
+    				pre_frame_addr = (__u32)OSAL_VAtoPA((void*)g_video[sel][id].pre_frame_addr0);
+    			}
+    			else
+    			{
+    				g_video[sel][id].tempdiff_en = FALSE;
+    			}
+    			g_video[sel][id].diagintp_en = TRUE;
+    		}
+    		else
+    		{
+        	    g_video[sel][id].dit_mode = DIT_MODE_WEAVE;
+        	    g_video[sel][id].tempdiff_en = FALSE;
+        	    g_video[sel][id].diagintp_en = FALSE;
+    		}
+    	}
+    	else
+    	{
+    		g_video[sel][id].dit_enable = FALSE;
+    	    g_video[sel][id].fetch_field = FALSE;
+    	    g_video[sel][id].fetch_bot = FALSE;
+    	    g_video[sel][id].dit_mode = DIT_MODE_WEAVE;
+    	    g_video[sel][id].tempdiff_en = FALSE;
+    	    g_video[sel][id].diagintp_en = FALSE;
+    	}
+
+    	in_type.fmt= Scaler_sw_para_to_reg(0,scaler->in_fb.format);
+    	in_type.mod= Scaler_sw_para_to_reg(1,scaler->in_fb.mode);
+    	in_type.ps= Scaler_sw_para_to_reg(2,scaler->in_fb.seq);
+    	in_type.byte_seq = 0;
+
+    	scal_addr.ch0_addr= (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr[0]));
+    	scal_addr.ch1_addr= (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr[1]));
+    	scal_addr.ch2_addr= (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr[2]));
+
+    	in_size.src_width = scaler->in_fb.size.width;
+    	in_size.src_height = scaler->in_fb.size.height;
+    	in_size.x_off =  scaler->src_win.x;
+    	in_size.y_off =  scaler->src_win.y;
+    	in_size.scal_height=  scaler->src_win.height;
+    	in_size.scal_width=  scaler->src_win.width;
+
+    	out_type.byte_seq =  scaler->out_fb.seq;
+    	out_type.fmt =  scaler->out_fb.format;
+
+    	out_size.width =  scaler->out_size.width;
+    	out_size.height =  scaler->out_size.height;
+
+    	in_scan.field = g_video[sel][id].fetch_field;
+    	in_scan.bottom = g_video[sel][id].fetch_bot;
+
+    	out_scan.field = (gdisp.screen[sel].de_flicker_status == DE_FLICKER_USED)?0: gdisp.screen[sel].b_out_interlace;
+
+    	if(scaler->out_fb.cs_mode > DISP_VXYCC)
+    	{
+    		scaler->out_fb.cs_mode = DISP_BT601;
+    	}
+
+        if(scaler->in_fb.b_trd_src)
+        {
+            __scal_3d_inmode_t inmode;
+            __scal_3d_outmode_t outmode = 0;
+            __scal_buf_addr_t scal_addr_right;
+
+            inmode = Scaler_3d_sw_para_to_reg(0, scaler->in_fb.trd_mode, 0);
+            outmode = Scaler_3d_sw_para_to_reg(1, scaler->out_trd_mode, gdisp.screen[sel].b_out_interlace);
+
+            DE_SCAL_Get_3D_In_Single_Size(inmode, &in_size, &in_size);
+            if(scaler->b_trd_out)
+            {
+                DE_SCAL_Get_3D_Out_Single_Size(outmode, &out_size, &out_size);
+            }
+
+        	scal_addr_right.ch0_addr= (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr_right[0]));
+        	scal_addr_right.ch1_addr= (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr_right[1]));
+        	scal_addr_right.ch2_addr= (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr_right[2]));
+
+            DE_SCAL_Set_3D_Ctrl(scaler_index, scaler->b_trd_out, inmode, outmode);
+            DE_SCAL_Config_3D_Src(scaler_index, &scal_addr, &in_size, &in_type, inmode, &scal_addr_right);
+        }
+        else
+        {
+    	    DE_SCAL_Config_Src(scaler_index,&scal_addr,&in_size,&in_type,FALSE,FALSE);
+    	}
+
+    	if(g_video[sel][id].dit_enable == TRUE && gdisp.screen[sel].de_flicker_status == DE_FLICKER_USED)
+    	{
+    		Disp_de_flicker_enable(sel, FALSE);
+    	}
+    	DE_SCAL_Set_Init_Phase(scaler_index, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type, FALSE);
+    	DE_SCAL_Set_Scaling_Factor(scaler_index, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type);
+    	DE_SCAL_Set_Scaling_Coef(scaler_index, &in_scan, &in_size, &in_type, &out_scan, &out_size, &out_type,  scaler->smooth_mode);
+    	DE_SCAL_Set_Di_Ctrl(scaler_index,g_video[sel][id].dit_enable,g_video[sel][id].dit_mode,g_video[sel][id].diagintp_en,g_video[sel][id].tempdiff_en);
+    	DE_SCAL_Set_Di_PreFrame_Addr(scaler_index, pre_frame_addr);
+    	DE_SCAL_Set_Di_MafFlag_Src(scaler_index, maf_flag_addr, maf_linestride);
+        DE_SCAL_Set_Out_Size(scaler_index, &out_scan,&out_type, &out_size);
+
+        DE_SCAL_Set_Reg_Rdy(scaler_index);
+    }
+    else
+    {
+        __layer_man_t * layer_man;
+        __disp_fb_t fb;
+        layer_src_t layer_fb;
+
+        layer_man = &gdisp.screen[sel].layer_manage[id];
+
+        BSP_disp_layer_get_framebuffer(sel, id, &fb);
+        fb.addr[0] = (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr[0]));
+        fb.addr[1] = (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr[1]));
+        fb.addr[2] = (__u32)OSAL_VAtoPA((void*)(g_video[sel][id].video_cur.addr[2]));
+
+    	if(get_fb_type(fb.format) == DISP_FB_TYPE_YUV)
+    	{
+        	Yuv_Channel_adjusting(sel , fb.mode, fb.format, &layer_man->para.src_win.x, &layer_man->para.scn_win.width);
+    		Yuv_Channel_Set_framebuffer(sel, &fb, layer_man->para.src_win.x, layer_man->para.src_win.y);
+    	}
+    	else
+    	{
+            layer_fb.fb_addr    = (__u32)OSAL_VAtoPA((void*)fb.addr[0]);
+            layer_fb.pixseq     = img_sw_para_to_reg(3,0,fb.seq);
+            layer_fb.br_swap    = fb.br_swap;
+            layer_fb.fb_width   = fb.size.width;
+            layer_fb.offset_x   = layer_man->para.src_win.x;
+            layer_fb.offset_y   = layer_man->para.src_win.y;
+            layer_fb.format = fb.format;
+            DE_BE_Layer_Set_Framebuffer(sel, id,&layer_fb);
+        }
+        memcpy(&layer_man->para.fb,&fb,sizeof(__disp_fb_t));
+    }
+
+    g_video[sel][id].display_cnt++;
+
+	return DIS_SUCCESS;
+}
+
+
+__s32 Video_Operation_In_Vblanking(__u32 sel, __u32 tcon_index)
+{
+    __u32 id=0;
+
+    for(id = 0; id<4; id++)
+    {
+        if((g_video[sel][id].enable == TRUE) && (g_video[sel][id].have_got_frame == TRUE))
+        {
+    		Hal_Set_Frame(sel, tcon_index, id);
+    	}
+    }
+
+	return DIS_SUCCESS;
+}
+
+__s32 BSP_disp_video_set_fb(__u32 sel, __u32 hid, __disp_video_fb_t *in_addr)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(g_video[sel][hid].enable)
+    {
+    	memcpy(&g_video[sel][hid].video_new, in_addr, sizeof(__disp_video_fb_t));
+    	g_video[sel][hid].have_got_frame = TRUE;
+	    g_video[sel][hid].display_cnt = 0;
+
+    	return DIS_SUCCESS;
+    }
+    else
+    {
+        return DIS_FAIL;
+    }
+}
+
+
+__s32 BSP_disp_video_get_frame_id(__u32 sel, __u32 hid)//get the current displaying frame id
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(g_video[sel][hid].enable)
+    {
+        if(g_video[sel][hid].have_got_frame == TRUE)
+        {
+            return g_video[sel][hid].video_cur.id;
+        }
+        else
+        {
+            return DIS_FAIL;
+        }
+    }
+    else
+    {
+        return DIS_FAIL;
+    }
+}
+
+__s32 BSP_disp_video_get_dit_info(__u32 sel, __u32 hid, __disp_dit_info_t * dit_info)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(g_video[sel][hid].enable)
+    {
+    	dit_info->maf_enable = FALSE;
+    	dit_info->pre_frame_enable = FALSE;
+
+    	if(g_video[sel][hid].dit_enable)
+    	{
+    		if(g_video[sel][hid].dit_mode == DIT_MODE_MAF)
+    		{
+    			dit_info->maf_enable = TRUE;
+    		}
+    		if(g_video[sel][hid].tempdiff_en)
+    		{
+    			dit_info->pre_frame_enable = TRUE;
+    		}
+    	}
+    	return DIS_SUCCESS;
+	}
+    else
+    {
+        return DIS_FAIL;
+    }
+}
+
+__s32 BSP_disp_video_start(__u32 sel, __u32 hid)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(gdisp.screen[sel].layer_manage[hid].status & LAYER_USED)
+    {
+        memset(&g_video[sel][hid], 0, sizeof(frame_para_t));
+        g_video[sel][hid].video_cur.id = -1;
+        g_video[sel][hid].enable = TRUE;
+
+    	return DIS_SUCCESS;
+    }
+    else
+    {
+        return DIS_FAIL;
+    }
+}
+
+__s32 BSP_disp_video_stop(__u32 sel, __u32 hid)
+{
+    hid = HANDTOID(hid);
+    HLID_ASSERT(hid, gdisp.screen[sel].max_layers);
+
+    if(g_video[sel][hid].enable)
+    {
+        memset(&g_video[sel][hid], 0, sizeof(frame_para_t));
+
+    	return DIS_SUCCESS;
+    }
+    else
+    {
+        return DIS_FAIL;
+    }
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/disp_video.h b/drivers/video/sun4i/disp/de_bsp/de/disp_video.h
new file mode 100644
index 0000000..25e1adf
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/disp_video.h
@@ -0,0 +1,54 @@
+#ifndef __DISP_VIDEO_H_
+#define __DISP_VIDEO_H_
+
+#include "disp_display_i.h"
+
+#define CASE_P_SOURCE 0
+#define CASE_I_SAME_FRAME_RATE 1
+#define CASE_I_DIFF_FRAME_RATE 2
+
+typedef enum
+{
+    DIT_MODE_WEAVE = 0,
+    DIT_MODE_BOB = 1,
+    DIT_MODE_MAF = 2,
+    DIT_MODE_MAF_BOB = 3,
+}dit_mode_t;
+
+typedef struct frame_para
+{
+    __bool  enable;
+
+	__disp_video_fb_t video_cur;
+	__disp_video_fb_t video_new;
+	__u32 pre_frame_addr0;
+
+    __bool  have_got_frame;
+	__bool	fetch_field;//for scaler
+	__bool	fetch_bot;//for dit if dit enable,else for scaler
+	__u32   display_cnt;
+	__bool	out_field;
+	__bool	out_bot;
+	__bool  dit_enable;
+	dit_mode_t  dit_mode;
+	__bool  tempdiff_en;
+	__bool  diagintp_en;
+
+}frame_para_t;
+
+
+typedef struct tv_mode_info
+{
+	__u8	id;
+	__s32	width;
+	__s32	height;
+	__bool	interlace;
+	__s32	frame_rate;
+	__s32	vb_line;
+}tv_mode_info_t;
+
+__s32 Video_Operation_In_Vblanking(__u32 sel, __u32 tcon_index);
+extern frame_para_t g_video[2][4];
+
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.c b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.c
new file mode 100644
index 0000000..8f8e200
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.c
@@ -0,0 +1,752 @@
+#include "de_be.h"
+#include "de_fe.h"
+
+__u32 image_reg_base[2] = {0,0};//DISE_REGS_BASE;
+
+__u32  csc_tab[192] =
+{
+    //Y/G   Y/G      Y/G      Y/G      U/R      U/R     U/R        U/R     V/B      V/B       V/B       V/B
+    //bt601
+    0x04a7,0x1e6f,0x1cbf,0x0877,0x04a7,0x0000,0x0662,0x3211,0x04a7,0x0812,0x0000,0x2eb1,//yuv2rgb
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//yuv2yuv
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//rgb2rgb
+    0x0204,0x0107,0x0064,0x0100,0x1ed6,0x1f68,0x01c1,0x0800,0x1e87,0x01c1,0x1fb7,0x0800,//rgb2yuv
+
+    //bt709
+    0x04a7,0x1f25,0x1ddd,0x04cf,0x04a7,0x0000,0x072c,0x307d,0x04a7,0x0875,0x0000,0x2dea,//yuv2rgb
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//yuv2yuv
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//rgb2rgb
+    0x0274,0x00bb,0x003f,0x0100,0x1ea5,0x1f98,0x01c1,0x0800,0x1e67,0x01c1,0x1fd7,0x0800,//rgb2yuv
+
+    //DISP_YCC
+    0x0400,0x1e9e,0x1d24,0x087b,0x0400,0x0000,0x059b,0x34c8,0x0400,0x0715,0x0000,0x31d4,//yuv2rgb
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//yuv2yuv
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//rgb2rgb
+    0x0258,0x0132,0x0075,0x0000,0x1eac,0x1f53,0x0200,0x0800,0x1e53,0x0200,0x1fac,0x0800,//rgb2yuv
+
+    //xvYCC
+    0x04a7,0x1f25,0x1ddd,0x04cf,0x04a7,0x0000,0x072c,0x307d,0x04a7,0x0875,0x0000,0x2dea,//yuv2rgb
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//yuv2yuv
+    0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,//rgb2rgb
+    0x0274,0x00bb,0x003f,0x0100,0x1ea5,0x1f98,0x01c1,0x0800,0x1e67,0x01c1,0x1fd7,0x0800 //rgb2yuv
+};
+
+__u32  image_enhance_tab[224] =
+{
+    //csc convert table
+    0x00000107,0x00000204,0x00000064,0x00004000,0xffffff69,0xfffffed7,0x000001c1,0x00020000,
+    0x000001c1,0xfffffe88,0xffffffb8,0x00020000,0x00000000,0x00000000,0x00000000,0x00000400,
+    0x000004a7,0x00000000,0x00000662,0xfffc845b,0x000004a7,0xfffffe70,0xfffffcc0,0x00021df3,
+    0x000004a7,0x00000812,0x00000000,0xfffbac4a,0x00000000,0x00000000,0x00000000,0x00000400,
+
+    0x000000bb,0x00000274,0x0000003f,0x00004000,0xffffff99,0xfffffea6,0x000001c1,0x00020000,
+    0x000001c1,0xfffffe68,0xffffffd8,0x00020000,0x00000000,0x00000000,0x00000000,0x00000400,
+    0x000004a7,0x00000000,0x0000072c,0xfffc1f7d,0x000004a7,0xffffff26,0xfffffdde,0x000133f7,
+    0x000004a7,0x00000875,0x00000000,0xfffb7aa0,0x00000000,0x00000000,0x00000000,0x00000400,
+
+    0x00000132,0x00000258,0x00000075,0x00000000,0xffffff54,0xfffffead,0x00000200,0x00020000,
+    0x00000200,0xfffffe54,0xffffffad,0x00020000,0x00000000,0x00000000,0x00000000,0x00000400,
+    0x00000400,0x00000000,0x0000059b,0xfffd3213,0x00000400,0xfffffe9f,0xfffffd25,0x00021ec5,
+    0x00000400,0x00000715,0x00000000,0xfffc7540,0x00000000,0x00000000,0x00000000,0x00000400,
+    //sin table
+    0xffffffbd,0xffffffbf,0xffffffc1,0xffffffc2,0xffffffc4,0xffffffc6,0xffffffc8,0xffffffca,
+    0xffffffcc,0xffffffce,0xffffffd1,0xffffffd3,0xffffffd5,0xffffffd7,0xffffffd9,0xffffffdb,
+    0xffffffdd,0xffffffdf,0xffffffe2,0xffffffe4,0xffffffe6,0xffffffe8,0xffffffea,0xffffffec,
+    0xffffffef,0xfffffff1,0xfffffff3,0xfffffff5,0xfffffff8,0xfffffffa,0xfffffffc,0xfffffffe,
+    0x00000000,0x00000002,0x00000004,0x00000006,0x00000008,0x0000000b,0x0000000d,0x0000000f,
+    0x00000011,0x00000014,0x00000016,0x00000018,0x0000001a,0x0000001c,0x0000001e,0x00000021,
+    0x00000023,0x00000025,0x00000027,0x00000029,0x0000002b,0x0000002d,0x0000002f,0x00000032,
+    0x00000034,0x00000036,0x00000038,0x0000003a,0x0000003c,0x0000003e,0x0000003f,0x00000041,
+    //cos table
+    0x0000006c,0x0000006d,0x0000006e,0x0000006f,0x00000071,0x00000072,0x00000073,0x00000074,
+    0x00000074,0x00000075,0x00000076,0x00000077,0x00000078,0x00000079,0x00000079,0x0000007a,
+    0x0000007b,0x0000007b,0x0000007c,0x0000007c,0x0000007d,0x0000007d,0x0000007e,0x0000007e,
+    0x0000007e,0x0000007f,0x0000007f,0x0000007f,0x0000007f,0x0000007f,0x0000007f,0x0000007f,
+    0x00000080,0x0000007f,0x0000007f,0x0000007f,0x0000007f,0x0000007f,0x0000007f,0x0000007f,
+    0x0000007e,0x0000007e,0x0000007e,0x0000007d,0x0000007d,0x0000007c,0x0000007c,0x0000007b,
+    0x0000007b,0x0000007a,0x00000079,0x00000079,0x00000078,0x00000077,0x00000076,0x00000075,
+    0x00000074,0x00000074,0x00000073,0x00000072,0x00000071,0x0000006f,0x0000006e,0x0000006d
+};
+
+__u32  fir_tab[1792] =
+{
+    0x00004000,0x000140ff,0x00033ffe,0x00043ffd,0x00063efc,0xff083dfc,0x000a3bfb,0xff0d39fb,
+    0xff0f37fb,0xff1136fa,0xfe1433fb,0xfe1631fb,0xfd192ffb,0xfd1c2cfb,0xfd1f29fb,0xfc2127fc,
+    0xfc2424fc,0xfc2721fc,0xfb291ffd,0xfb2c1cfd,0xfb2f19fd,0xfb3116fe,0xfb3314fe,0xfa3611ff,
+    0xfb370fff,0xfb390dff,0xfb3b0a00,0xfc3d08ff,0xfc3e0600,0xfd3f0400,0xfe3f0300,0xff400100,
+    0x00004000,0x000140ff,0x00033ffe,0x00043ffd,0x00063efc,0xff083dfc,0x000a3bfb,0xff0d39fb,
+    0xff0f37fb,0xff1136fa,0xfe1433fb,0xfe1631fb,0xfd192ffb,0xfd1c2cfb,0xfd1f29fb,0xfc2127fc,
+    0xfc2424fc,0xfc2721fc,0xfb291ffd,0xfb2c1cfd,0xfb2f19fd,0xfb3116fe,0xfb3314fe,0xfa3611ff,
+    0xfb370fff,0xfb390dff,0xfb3b0a00,0xfc3d08ff,0xfc3e0600,0xfd3f0400,0xfe3f0300,0xff400100,
+    0x00053704,0x00063703,0x00073702,0x00093601,0x000b3500,0x000c3400,0x000e3200,0x000f3100,
+    0x00112f00,0x00132d00,0x00152b00,0x00162a00,0x00182800,0x001a2600,0x001c2400,0x001e2200,
+    0x00202000,0x00211f00,0x00231d00,0x00251b00,0x00271900,0x00291700,0x002a1600,0x002c1400,
+    0x002e1200,0x00301000,0x00310f00,0x00330d00,0x00340c00,0x01350a00,0x02360800,0x03360700,
+    0x00083008,0x00093007,0x000b3005,0x000d2f04,0x000e2f03,0x00102e02,0x00112e01,0x00132d00,
+    0x00142c00,0x00152b00,0x00172900,0x00182800,0x001a2600,0x001b2500,0x001d2300,0x001e2200,
+    0x00202000,0x00211f00,0x00221e00,0x00241c00,0x00251b00,0x00271900,0x00281800,0x002a1600,
+    0x002b1500,0x002d1300,0x012d1200,0x022e1000,0x032e0f00,0x042f0d00,0x052f0c00,0x072f0a00,
+    0x000b2a0b,0x000d2a09,0x000e2a08,0x000f2a07,0x00102a06,0x00122905,0x00132904,0x00142903,
+    0x00162802,0x00172702,0x00182701,0x001a2600,0x001b2500,0x001c2400,0x001d2300,0x001e2200,
+    0x00202000,0x00211f00,0x00221e00,0x00231d00,0x00241c00,0x00261a00,0x01261900,0x02271700,
+    0x02281600,0x03281500,0x04291300,0x05291200,0x06291100,0x072a0f00,0x082a0e00,0x092a0d00,
+    0x000d270c,0x000f260b,0x0010260a,0x00112609,0x00122608,0x00122608,0x00132607,0x00152506,
+    0x00162505,0x00172504,0x00192403,0x00192403,0x001b2302,0x001d2201,0x001d2201,0x001f2100,
+    0x00202000,0x00211f00,0x01211e00,0x01221d00,0x02221c00,0x03231a00,0x03241900,0x04241800,
+    0x05241700,0x06251500,0x07251400,0x08251300,0x08261200,0x09261100,0x0a261000,0x0b260f00,
+
+    0x000e240e,0x000f240d,0x0010240c,0x0012230b,0x0013230a,0x0013230a,0x00142309,0x00152308,
+    0x00162307,0x00182206,0x00182206,0x00192205,0x001b2104,0x001c2103,0x001d2003,0x011e1f02,
+    0x021e1e02,0x021f1e01,0x03201d00,0x03211c00,0x04211b00,0x05211a00,0x06211900,0x06221800,
+    0x07221700,0x08221600,0x09221500,0x0a221400,0x0a231300,0x0b231200,0x0c231100,0x0d231000,
+    0x0010210f,0x0011210e,0x0012210d,0x0012210d,0x0013210c,0x0014210b,0x0015210a,0x0015210a,
+    0x00162109,0x00182008,0x00182008,0x01191f07,0x011a1f06,0x021b1e05,0x021b1e05,0x031c1d04,
+    0x031d1d03,0x041d1c03,0x051e1b02,0x051e1b02,0x061f1a01,0x071f1901,0x07201801,0x08201800,
+    0x09201700,0x0a201600,0x0a211500,0x0b211400,0x0c211300,0x0d201300,0x0d211200,0x0e211100,
+    0x00102010,0x0011200f,0x0012200e,0x0012200e,0x0013200d,0x00151f0c,0x00151f0c,0x01151f0b,
+    0x01161e0b,0x01171e0a,0x02171e09,0x02181d09,0x03191d07,0x03191c08,0x041a1c06,0x041a1c06,
+    0x051b1b05,0x061b1b04,0x061c1a04,0x071c1904,0x071d1903,0x081d1803,0x091d1802,0x091e1702,
+    0x0a1e1602,0x0b1e1601,0x0c1f1500,0x0c1f1500,0x0d1f1400,0x0e1f1300,0x0e201200,0x0f1f1200,
+    0x00111e11,0x00121e10,0x00131e0f,0x00131e0f,0x01131e0e,0x01141d0e,0x02151d0c,0x02151d0c,
+    0x02161d0b,0x03161c0b,0x03171c0a,0x04171c09,0x04181b09,0x05181b08,0x05191b07,0x06191a07,
+    0x061a1a06,0x071a1906,0x071b1905,0x081b1805,0x091b1804,0x091c1704,0x0a1c1703,0x0a1c1604,
+    0x0b1d1602,0x0c1d1502,0x0c1d1502,0x0d1d1402,0x0e1d1401,0x0e1e1301,0x0f1e1300,0x101e1200,
+    0x02121b11,0x02121b11,0x02131b10,0x03131b0f,0x03131b0f,0x04141a0e,0x04141a0e,0x04151a0d,
+    0x05151a0c,0x05151a0c,0x0616190b,0x0616190b,0x0616190b,0x0716190a,0x0717180a,0x08171809,
+    0x08181808,0x09181708,0x09181708,0x0a181707,0x0a191607,0x0b191606,0x0b191606,0x0c1a1505,
+    0x0c1a1505,0x0d1a1504,0x0d1a1405,0x0e1a1404,0x0f1a1403,0x0f1b1303,0x101b1302,0x101b1203,
+    0x04121911,0x04121911,0x05121910,0x05121910,0x0513190f,0x0613180f,0x0614180e,0x0614180e,
+    0x0714180d,0x0714180d,0x0715180c,0x0815170c,0x0815170c,0x0915170b,0x0915170b,0x0916160b,
+    0x0a16160a,0x0a16160a,0x0b161609,0x0b161609,0x0b171509,0x0c171508,0x0c181507,0x0d171507,
+    0x0d181407,0x0e181406,0x0e181406,0x0f181306,0x0f191305,0x10181305,0x10181305,0x10191205,
+
+    0x06111811,0x06121711,0x06121711,0x06131710,0x0713170f,0x0713170f,0x0713170f,0x0813170e,
+    0x0813170e,0x0814160e,0x0914160d,0x0914160d,0x0914160d,0x0a14160c,0x0a14160c,0x0a15150c,
+    0x0b15150b,0x0b15150b,0x0c15150a,0x0c15150a,0x0c16140a,0x0d161409,0x0d161409,0x0d161409,
+    0x0e161408,0x0e171308,0x0f171307,0x0f171307,0x0f171307,0x10171306,0x10171207,0x11171206,
+    0x07121611,0x07121611,0x08121610,0x08121610,0x0813160f,0x0813160f,0x0912160f,0x0913160e,
+    0x0913150f,0x0a13150e,0x0a14150d,0x0a14150d,0x0a14150d,0x0b13150d,0x0b14150c,0x0b14150c,
+    0x0c14140c,0x0c15140b,0x0c15140b,0x0d14140b,0x0d15140a,0x0d15140a,0x0d15140a,0x0e15130a,
+    0x0e15130a,0x0e161309,0x0f151309,0x0f161308,0x0f161308,0x10161208,0x10161208,0x10161208,
+    0x0b111410,0x0b111410,0x0b111410,0x0b111410,0x0b121310,0x0b121310,0x0c12130f,0x0c12130f,
+    0x0c12130f,0x0c12130f,0x0c12130f,0x0c12130f,0x0d12130e,0x0d12130e,0x0d12130e,0x0d12130e,
+    0x0d13130d,0x0e12130d,0x0e13120d,0x0e13120d,0x0e13120d,0x0e13120d,0x0e13120d,0x0f13120c,
+    0x0f13120c,0x0f13120c,0x0f13120c,0x0f13120c,0x1013120b,0x1013120b,0x1013120b,0x1014110b,
+    0x0c111310,0x0c111211,0x0d111210,0x0d111210,0x0d111210,0x0d111210,0x0d111210,0x0d111210,
+    0x0d111210,0x0d12120f,0x0d12120f,0x0e11120f,0x0e11120f,0x0e11120f,0x0e12120e,0x0e12120e,
+    0x0e12120e,0x0e12120e,0x0e12120e,0x0f11120e,0x0f11120e,0x0f11120e,0x0f12120d,0x0f12120d,
+    0x0f12110e,0x0f12110e,0x0f12110e,0x0f12110e,0x1012110d,0x1012110d,0x1012110d,0x1012110d,
+    0x40000000,0x00000000,0x40fe0000,0x0000ff03,0x3ffd0000,0x0000ff05,0x3ffc0000,0x0000ff06,
+    0x3efb0000,0x0000ff08,0x3dfb0000,0x0000ff09,0x3bfa0000,0x0000fe0d,0x39fa0000,0x0000fe0f,
+    0x38fa0000,0x0000fe10,0x36fa0000,0x0000fe12,0x33fa0000,0x0000fd16,0x31fa0000,0x0000fd18,
+    0x2ffa0000,0x0000fd1a,0x2cfa0000,0x0000fc1e,0x29fa0000,0x0000fc21,0x27fb0000,0x0000fb23,
+    0x24fb0000,0x0000fb26,0x21fb0000,0x0000fb29,0x1ffc0000,0x0000fa2b,0x1cfc0000,0x0000fa2e,
+    0x19fd0000,0x0000fa30,0x16fd0000,0x0000fa33,0x14fd0000,0x0000fa35,0x11fe0000,0x0000fa37,
+    0x0ffe0000,0x0000fa39,0x0dfe0000,0x0000fa3b,0x0afe0000,0x0000fa3e,0x08ff0000,0x0000fb3e,
+    0x06ff0000,0x0000fb40,0x05ff0000,0x0000fc40,0x03ff0000,0x0000fd41,0x01ff0000,0x0000fe42,
+
+    0x40000000,0x00000000,0x40fe0000,0x0000ff03,0x3ffd0000,0x0000ff05,0x3ffc0000,0x0000ff06,
+    0x3efb0000,0x0000ff08,0x3dfb0000,0x0000ff09,0x3bfa0000,0x0000fe0d,0x39fa0000,0x0000fe0f,
+    0x38fa0000,0x0000fe10,0x36fa0000,0x0000fe12,0x33fa0000,0x0000fd16,0x31fa0000,0x0000fd18,
+    0x2ffa0000,0x0000fd1a,0x2cfa0000,0x0000fc1e,0x29fa0000,0x0000fc21,0x27fb0000,0x0000fb23,
+    0x24fb0000,0x0000fb26,0x21fb0000,0x0000fb29,0x1ffc0000,0x0000fa2b,0x1cfc0000,0x0000fa2e,
+    0x19fd0000,0x0000fa30,0x16fd0000,0x0000fa33,0x14fd0000,0x0000fa35,0x11fe0000,0x0000fa37,
+    0x0ffe0000,0x0000fa39,0x0dfe0000,0x0000fa3b,0x0afe0000,0x0000fa3e,0x08ff0000,0x0000fb3e,
+    0x06ff0000,0x0000fb40,0x05ff0000,0x0000fc40,0x03ff0000,0x0000fd41,0x01ff0000,0x0000fe42,
+    0x3a05fefe,0x00fefe09,0x3a04fefe,0x00fefe0a,0x3a02fffe,0x00fefe0b,0x3901fffe,0x00fefd0e,
+    0x3900fffe,0x00fefd0f,0x38fefffe,0x00fefd12,0x37fdfffe,0x00fefd14,0x36fcfffe,0x00fefc17,
+    0x34fcffff,0x00fefc18,0x33fbffff,0x00fefc1a,0x31fbffff,0x00fefb1d,0x2ffbffff,0x00fefb1f,
+    0x2dfaff00,0x00fefb21,0x2cfaff00,0x00fefb22,0x2afaff00,0x00fefa25,0x28faff00,0x00fefa27,
+    0x25fafe00,0x00fefa2b,0x23fafe00,0x00fffa2c,0x21fafe00,0x00fffa2e,0x1ffbfe00,0x00fffa2f,
+    0x1dfbfe00,0x00fffa31,0x1afbfe00,0x00fffb33,0x18fbfe00,0x00fffb35,0x16fcfe00,0x00fffb36,
+    0x14fcfe00,0x00fffc37,0x12fcfe00,0x00fffc39,0x0ffdfe00,0x00fffd3a,0x0dfdfe00,0x00fffe3b,
+    0x0cfdfe00,0x00ff003a,0x0afdfe00,0x00ff013b,0x08fefe00,0x00ff023b,0x06fefe00,0x00fe043c,
+    0x3409fdfe,0x00fefd0d,0x3408fdfe,0x00fefc0f,0x3406fdfe,0x00fefc11,0x3405fdfe,0x00fefc12,
+    0x3304fefe,0x00fefc13,0x3203fefe,0x00fefb16,0x3202fefe,0x00fefb17,0x3101fefe,0x00fffb18,
+    0x3000fefe,0x00fffb1a,0x2ffefffe,0x00fffb1c,0x2dfefffe,0x00fffb1e,0x2cfdfffe,0x00fffb20,
+    0x2bfcfffe,0x00fffb22,0x29fcfffe,0x00fffb24,0x28fcfffe,0x00fffb25,0x26fbfffe,0x00fffb28,
+    0x24fbfffe,0x00fffb2a,0x23fbfffe,0x00fffb2b,0x21fbfffe,0x00fffc2c,0x1ffbffff,0x00fffc2d,
+    0x1dfbffff,0x00fffc2f,0x1cfbffff,0x00fffd2f,0x1afbffff,0x00fffe30,0x18fbffff,0x00fffe32,
+    0x16fbff00,0x00fe0032,0x14fbff00,0x00fe0133,0x13fbfe00,0x00fe0234,0x11fcfe00,0x00fe0334,
+    0x0ffcfe00,0x00fe0435,0x0efcfe00,0x00fd0536,0x0cfcfe00,0x00fd0637,0x0bfcfe00,0x00fd0836,
+
+    0x2f0cfcff,0x00fffc0f,0x2f0bfcff,0x00fffb11,0x2f0afcff,0x00fffb12,0x2e09fcfe,0x00fffb15,
+    0x2e07fcfe,0x00fffb17,0x2d06fdfe,0x00fffb18,0x2d05fdfe,0x00fffb19,0x2c04fdfe,0x00fffb1b,
+    0x2c03fdfe,0x00fffb1c,0x2b02fdfe,0x00fffb1e,0x2a01fefe,0x00fffb1f,0x2901fefe,0x00fffb20,
+    0x2800fefe,0x00fffb22,0x27fefefe,0x00fffc24,0x26fefefe,0x00fffc25,0x24fdfefe,0x00fffc28,
+    0x23fdfffe,0x00fffd27,0x22fcfffe,0x00fefd2a,0x21fcfffe,0x00fefe2a,0x1ffcfffe,0x00fefe2c,
+    0x1efbfffe,0x00fe002c,0x1cfbfffe,0x00fe012d,0x1bfbfffe,0x00fe012e,0x19fbfffe,0x00fd0230,
+    0x18fbfffe,0x00fd0330,0x16fbfffe,0x00fd0431,0x15fbfffe,0x00fd0531,0x13fbfffe,0x00fd0632,
+    0x12fbfffe,0x00fc0733,0x10fbfffe,0x00fc0933,0x0ffbffff,0x00fc0a32,0x0efbffff,0x00fc0b32,
+    0x2a0efbff,0x00fffb14,0x2a0dfbff,0x00fffb15,0x2a0cfcff,0x00fffb15,0x2a0bfcff,0x00fffb16,
+    0x2a0afcff,0x00fffb17,0x2909fcff,0x00fffb19,0x2908fcff,0x00fffc19,0x2907fcff,0x00fffc1a,
+    0x2806fcff,0x00fffc1c,0x2705fcff,0x00fffc1e,0x2704fdff,0x00fefc1f,0x2603fdff,0x00fefd20,
+    0x2503fdff,0x00fefd21,0x2402fdfe,0x00fefe23,0x2401fdfe,0x00fefe24,0x2301fdfe,0x00fefe25,
+    0x2200fefe,0x00fe0024,0x21fefefe,0x00fd0127,0x20fefefe,0x00fd0128,0x1ffefefe,0x00fd0228,
+    0x1dfdfefe,0x00fd032a,0x1cfdfefe,0x00fd032b,0x1bfcfefe,0x00fd042c,0x1afcfffe,0x00fc052c,
+    0x19fcfffe,0x00fc062c,0x17fcfffe,0x00fc072d,0x16fcfffe,0x00fc082d,0x15fbfffe,0x00fc092e,
+    0x14fbfffe,0x00fc0a2e,0x12fbfffe,0x00fc0b2f,0x11fbfffe,0x00fb0c30,0x10fbfffe,0x00fb0d30,
+    0x2710fcff,0x00fffc13,0x270ffcff,0x00fffc14,0x270efcff,0x00fffc15,0x270dfcff,0x00fffc16,
+    0x260cfcff,0x00fefc19,0x260bfcff,0x00fefd19,0x260afcff,0x00fefd1a,0x2609fcff,0x00fefd1b,
+    0x2508fcff,0x00fefd1d,0x2507fcff,0x00fefe1d,0x2407fcff,0x00fefe1e,0x2406fcff,0x00feff1e,
+    0x2305fcff,0x00fd0020,0x2204fcff,0x00fd0022,0x2204fdff,0x00fd0120,0x2103fdff,0x00fd0221,
+    0x2002fdff,0x00fd0223,0x1f02fdff,0x00fd0323,0x1e01fdff,0x00fd0424,0x1e00fdff,0x00fc0426,
+    0x1d00fdff,0x00fc0526,0x1cfffeff,0x00fc0626,0x1bfefeff,0x00fc0727,0x1afefefe,0x00fc0729,
+    0x19fdfefe,0x00fc082a,0x18fdfefe,0x00fc092a,0x17fdfefe,0x00fc0a2a,0x16fdfefe,0x00fc0b2a,
+    0x14fcfefe,0x00fc0c2c,0x13fcfefe,0x00fc0d2c,0x12fcfffe,0x00fc0e2b,0x11fcfffe,0x00fc0f2b,
+
+    0x2411fdfe,0x00fefd15,0x2410fcfe,0x00fefd17,0x240ffcfe,0x00fefd18,0x240efcfe,0x00fefd19,
+    0x240efcff,0x00fefe17,0x240dfcff,0x00fefe18,0x230cfcff,0x00fdfe1b,0x230bfcff,0x00fdff1b,
+    0x230afcff,0x00fd001b,0x2209fcff,0x00fd001d,0x2209fcff,0x00fd011c,0x2108fcff,0x00fd011e,
+    0x2107fcff,0x00fd021e,0x2006fcff,0x00fd0220,0x2006fcff,0x00fc0320,0x1f05fcff,0x00fc0421,
+    0x1f04fcff,0x00fc0422,0x1e04fcff,0x00fc0522,0x1d03fcff,0x00fc0623,0x1c02fdff,0x00fc0624,
+    0x1c02fdff,0x00fc0723,0x1b01fdff,0x00fc0824,0x1a01fdff,0x00fc0924,0x1900fdff,0x00fc0926,
+    0x1800fdff,0x00fc0a26,0x17fffdff,0x00fc0b27,0x17fefdff,0x00fc0c27,0x16fefeff,0x00fc0d26,
+    0x15fefeff,0x00fc0e26,0x14fdfeff,0x00fc0e28,0x13fdfeff,0x00fc0f28,0x12fdfeff,0x00fc1028,
+    0x2212fefe,0x00fefe14,0x2211fefe,0x00fdfe16,0x2210fdfe,0x00fdfe18,0x220ffdfe,0x00fdff18,
+    0x220ffdfe,0x00fd0017,0x210efdfe,0x00fd0019,0x210dfdfe,0x00fd0119,0x210cfcfe,0x00fd011b,
+    0x210cfcfe,0x00fd021a,0x200bfcfe,0x00fd021c,0x200afcfe,0x00fc031d,0x1f09fcff,0x00fc031e,
+    0x1f09fcff,0x00fc041d,0x1f08fcff,0x00fc041e,0x1e07fcff,0x00fc051f,0x1e07fcff,0x00fc051f,
+    0x1d06fcff,0x00fc0620,0x1c05fcff,0x00fc0721,0x1c05fcff,0x00fc0721,0x1b04fcff,0x00fc0822,
+    0x1b04fcff,0x00fc0921,0x1a03fcff,0x00fc0923,0x1903fcff,0x00fc0a23,0x1802fdff,0x00fc0b23,
+    0x1802fdff,0x00fc0b23,0x1701fdff,0x00fc0c24,0x1601fdff,0x00fd0d23,0x1500fdff,0x00fd0e24,
+    0x1500fdff,0x00fd0e24,0x14fffdff,0x00fd0f25,0x13fefdff,0x00fd1026,0x12fefdff,0x00fe1125,
+    0x201200fd,0x00fd0014,0x2011fffd,0x00fd0016,0x2011fefd,0x00fd0116,0x2010fefd,0x00fd0117,
+    0x1f0ffefd,0x00fd0119,0x1f0ffefd,0x00fd0218,0x1f0efdfe,0x00fd0219,0x1f0dfdfe,0x00fc031a,
+    0x1f0dfdfe,0x00fc031a,0x1e0cfdfe,0x00fc041b,0x1e0bfdfe,0x00fc041c,0x1e0bfdfe,0x00fc051b,
+    0x1d0afdfe,0x00fc051d,0x1d09fdfe,0x00fc061d,0x1c09fcfe,0x00fc061f,0x1c08fcfe,0x00fc071f,
+    0x1c07fcfe,0x00fc0720,0x1b07fcff,0x00fc081f,0x1b06fcff,0x00fc091f,0x1a06fcff,0x00fd091f,
+    0x1905fcff,0x00fd0a20,0x1905fcff,0x00fd0a20,0x1804fcff,0x00fd0b21,0x1804fcff,0x00fd0c20,
+    0x1703fcff,0x00fd0c22,0x1603fcff,0x00fd0d22,0x1602fdff,0x00fd0e21,0x1502fdff,0x00fe0e21,
+    0x1401fdff,0x00fe0f22,0x1401fdff,0x00fe1021,0x1301fdff,0x00fe1022,0x1200fdff,0x00ff1122,
+
+    0x1c1202fd,0x00fd0214,0x1c1202fd,0x00fd0313,0x1c1102fd,0x00fd0314,0x1c1001fd,0x00fd0415,
+    0x1c1001fd,0x00fd0415,0x1c0f01fd,0x00fd0416,0x1b0f01fd,0x00fd0516,0x1b0e00fd,0x00fd0518,
+    0x1b0e00fd,0x00fd0617,0x1b0dfffd,0x00fd0619,0x1b0dfffd,0x00fd0718,0x1a0cfefd,0x00fd071b,
+    0x1a0cfefd,0x00fd071b,0x1a0bfefd,0x00fd081b,0x1a0afefd,0x00fd081c,0x190afefd,0x00fd091c,
+    0x1909fdfe,0x00fd091d,0x1809fdfe,0x00fe0a1c,0x1808fdfe,0x00fe0a1d,0x1808fdfe,0x00fe0b1c,
+    0x1707fdfe,0x00fe0b1e,0x1707fdfe,0x00fe0c1d,0x1606fdfe,0x00ff0c1e,0x1606fdfe,0x00ff0d1d,
+    0x1606fdfe,0x00000d1c,0x1505fdfe,0x00000e1d,0x1505fdfe,0x00010f1b,0x1404fdfe,0x00010f1d,
+    0x1404fdfe,0x0001101c,0x1303fdfe,0x0001101e,0x1303fdff,0x0002111b,0x1203fdff,0x0002111c,
+    0x181104fd,0x00fd0415,0x181104fd,0x00fd0514,0x181104fd,0x00fd0514,0x181003fd,0x00fd0516,
+    0x181003fd,0x00fd0615,0x180f03fd,0x00fd0616,0x180f02fd,0x00fe0715,0x180e02fd,0x00fe0716,
+    0x180e02fd,0x00fe0716,0x180e02fd,0x00fe0815,0x180d01fd,0x00fe0817,0x170d01fd,0x00fe0818,
+    0x170c01fd,0x00fe0918,0x170c01fd,0x00fe0918,0x170b00fd,0x00ff0a18,0x170b00fd,0x00ff0a18,
+    0x160b00fd,0x00000b17,0x160afffd,0x00000b19,0x160afffd,0x00000b19,0x1609fefd,0x00010c19,
+    0x1509fefd,0x00010c1a,0x1508fefd,0x00010d1a,0x1508fefd,0x00010d1a,0x1408fefd,0x00020d1a,
+    0x1407fefd,0x00020e1a,0x1407fefe,0x00020e19,0x1306fefe,0x00020f1a,0x1306fdfe,0x00030f1a,
+    0x1306fdfe,0x00031019,0x1205fdfe,0x0003101b,0x1205fdfe,0x0004101a,0x1205fdfe,0x00041119,
+    0x161006fe,0x00fe0612,0x161005fe,0x00fe0613,0x161005fe,0x00fe0613,0x160f05fe,0x00fe0713,
+    0x160f05fe,0x00fe0713,0x160f04fe,0x00ff0713,0x160f04fd,0x00ff0813,0x150e04fd,0x00ff0815,
+    0x150e03fd,0x00000815,0x150e03fd,0x00000914,0x150d03fd,0x00000915,0x150d03fd,0x00010914,
+    0x150c02fd,0x00010a15,0x150c02fd,0x00010a15,0x150c02fd,0x00010a15,0x150b02fd,0x00010b15,
+    0x140b01fd,0x00010b17,0x140b01fd,0x00020b16,0x140a01fd,0x00020c16,0x140a01fd,0x00020c16,
+    0x140a01fd,0x00020c16,0x130901fd,0x00030d16,0x130900fd,0x00030d17,0x130900fd,0x00030e16,
+    0x130800fd,0x00030e17,0x1208fffd,0x00040e18,0x1208fffd,0x00040f17,0x1207fffd,0x00040f18,
+    0x1207fefd,0x00050f18,0x1107fefd,0x00051018,0x1106fefd,0x00051019,0x1106fefd,0x00051019,
+
+    0x140f0700,0x0000070f,0x140f06ff,0x00000711,0x140f06ff,0x00000711,0x140f06ff,0x00000810,
+    0x130f06ff,0x00010810,0x140e05fe,0x00010812,0x130e05fe,0x00010813,0x130e05fe,0x00010912,
+    0x130d05fe,0x00010913,0x130d04fe,0x00010914,0x130d04fe,0x00020a12,0x130d04fe,0x00020a12,
+    0x130c04fe,0x00020a13,0x130c03fe,0x00020a14,0x130c03fe,0x00020b13,0x130c03fe,0x00030b12,
+    0x130b03fe,0x00030b13,0x120b03fe,0x00030c13,0x120b02fd,0x00030c15,0x120a02fd,0x00030c16,
+    0x120a02fd,0x00040c15,0x120a02fd,0x00040d14,0x120a02fd,0x00040d14,0x120901fd,0x00040d16,
+    0x110901fd,0x00050e15,0x110901fd,0x00050e15,0x110901fd,0x00050e15,0x110801fd,0x00050f15,
+    0x110801fd,0x00060f14,0x110800fd,0x00060f15,0x100700fd,0x00060f17,0x100700fd,0x00071015,
+    0x120f0701,0x0001070f,0x120e0701,0x0001080f,0x120e0701,0x0001080f,0x120e0701,0x0001080f,
+    0x120e0600,0x00020810,0x110e0600,0x00020910,0x120d0600,0x00020910,0x120d0600,0x00020910,
+    0x120d0600,0x00020910,0x120d05ff,0x00020a11,0x120d05ff,0x00030a10,0x120c05ff,0x00030a11,
+    0x120c05ff,0x00030a11,0x110c04ff,0x00030b12,0x110c04fe,0x00030b13,0x110c04fe,0x00040b12,
+    0x110b04fe,0x00040b13,0x110b04fe,0x00040c12,0x110b03fe,0x00040c13,0x110b03fe,0x00040c13,
+    0x110a03fe,0x00050c13,0x110a03fe,0x00050d12,0x110a03fe,0x00050d12,0x100a03fe,0x00050d13,
+    0x100a02fe,0x00060d13,0x100902fe,0x00060e13,0x100902fe,0x00060e13,0x100902fe,0x00060e13,
+    0x100902fe,0x00070e12,0x100802fe,0x00070f12,0x100801fe,0x00070f13,0x0f0801fd,0x00070f15,
+    0x100e0802,0x0002080e,0x100e0802,0x0002080e,0x110e0702,0x0002080e,0x110d0702,0x0002080f,
+    0x100d0701,0x0003090f,0x100d0701,0x0003090f,0x100d0701,0x0003090f,0x100d0601,0x00030910,
+    0x100d0601,0x00030a0f,0x100c0601,0x00030a10,0x100c0601,0x00040a0f,0x100c0601,0x00040a0f,
+    0x100c0500,0x00040a11,0x100c0500,0x00040b10,0x100c0500,0x00040b10,0x100b0500,0x00040b11,
+    0x100b0500,0x00050b10,0x100b05ff,0x00050b11,0x100b04ff,0x00050c11,0x100b04ff,0x00050c11,
+    0x100b04ff,0x00060c10,0x100a04ff,0x00060c11,0x100a04fe,0x00060d11,0x100a03fe,0x00060d12,
+    0x0f0a03fe,0x00060d13,0x0f0a03fe,0x00070d12,0x0f0903fe,0x00070d13,0x0f0903fe,0x00070e12,
+    0x0f0903fe,0x00070e12,0x0f0902fe,0x00080e12,0x0f0902fe,0x00080e12,0x0f0802fe,0x00080e13,
+
+    0x0f0d0803,0x0003080e,0x0f0d0803,0x0003080e,0x0f0d0802,0x0003090e,0x0f0d0802,0x0003090e,
+    0x0f0d0702,0x0003090f,0x0f0d0702,0x0003090f,0x0f0d0702,0x0004090e,0x0f0c0702,0x0004090f,
+    0x0f0c0702,0x00040a0e,0x0f0c0702,0x00040a0e,0x0f0c0601,0x00040a10,0x0f0c0601,0x00040a10,
+    0x0f0c0601,0x00050a0f,0x0e0c0601,0x00050b0f,0x0f0b0601,0x00050b0f,0x0f0b0601,0x00050b0f,
+    0x0f0b0501,0x00050b10,0x0f0b0501,0x00060b0f,0x0f0b0501,0x00060b0f,0x0f0b0500,0x00060c0f,
+    0x0f0b0500,0x00060c0f,0x0f0a0500,0x00060c10,0x0f0a0400,0x00070c10,0x0f0a0400,0x00070c10,
+    0x0e0a0400,0x00070d10,0x0f0a04ff,0x00070d10,0x0f0a04ff,0x00070d10,0x0e0904ff,0x00080d11,
+    0x0e0903ff,0x00080d12,0x0e0903ff,0x00080e11,0x0e0903ff,0x00080e11,0x0e0903fe,0x00080e12,
+    0x0f0d0803,0x0003080e,0x0e0d0803,0x0004090d,0x0e0d0803,0x0004090d,0x0e0d0803,0x0004090d,
+    0x0f0c0803,0x0004090d,0x0f0c0803,0x0004090d,0x0f0c0703,0x0004090e,0x0e0c0703,0x00040a0e,
+    0x0e0c0702,0x00050a0e,0x0e0c0702,0x00050a0e,0x0e0c0702,0x00050a0e,0x0e0c0702,0x00050a0e,
+    0x0e0b0702,0x00050a0f,0x0e0b0602,0x00050a10,0x0e0b0602,0x00060b0e,0x0e0b0602,0x00060b0e,
+    0x0e0b0601,0x00060b0f,0x0e0b0601,0x00060b0f,0x0e0b0601,0x00060b0f,0x0e0b0501,0x00060b10,
+    0x0e0a0501,0x00070c0f,0x0e0a0501,0x00070c0f,0x0e0a0501,0x00070c0f,0x0e0a0501,0x00070c0f,
+    0x0e0a0501,0x00070c0f,0x0d0a0501,0x00080c0f,0x0e0a0400,0x00080d0f,0x0e0a0400,0x00080d0f,
+    0x0e090400,0x00080d10,0x0e090400,0x00080d10,0x0e090400,0x00080d10,0x0e090400,0x00090d0f,
+    0x0c0c0905,0x0005090c,0x0d0c0904,0x0005090c,0x0d0c0804,0x0005090d,0x0d0c0804,0x0005090d,
+    0x0d0c0804,0x0005090d,0x0d0c0804,0x0005090d,0x0d0c0804,0x0005090d,0x0d0b0804,0x00050a0d,
+    0x0c0b0804,0x00060a0d,0x0c0b0804,0x00060a0d,0x0d0b0703,0x00060a0e,0x0d0b0703,0x00060a0e,
+    0x0d0b0703,0x00060a0e,0x0d0b0703,0x00060a0e,0x0d0b0703,0x00060a0e,0x0c0b0703,0x00070b0d,
+    0x0c0b0703,0x00070b0d,0x0c0b0703,0x00070b0d,0x0d0b0603,0x00070b0d,0x0d0a0602,0x00070b0f,
+    0x0d0a0602,0x00070b0f,0x0d0a0602,0x00070b0f,0x0d0a0602,0x00080b0e,0x0c0a0602,0x00080c0e,
+    0x0c0a0602,0x00080c0e,0x0c0a0602,0x00080c0e,0x0c0a0602,0x00080c0e,0x0d0a0502,0x00080c0e,
+    0x0c0a0502,0x00090c0e,0x0d090501,0x00090c0f,0x0d090501,0x00090c0f,0x0d090501,0x00090d0e,
+
+    0x0c0b0905,0x0005090d,0x0c0b0905,0x0006090c,0x0c0b0905,0x0006090c,0x0c0b0905,0x0006090c,
+    0x0c0b0805,0x0006090d,0x0c0b0805,0x0006090d,0x0c0b0805,0x0006090d,0x0c0b0805,0x00060a0c,
+    0x0c0b0805,0x00060a0c,0x0c0b0804,0x00060a0d,0x0c0b0804,0x00070a0c,0x0c0b0804,0x00070a0c,
+    0x0c0b0804,0x00070a0c,0x0c0b0804,0x00070a0c,0x0c0b0704,0x00070a0d,0x0c0b0704,0x00070a0d,
+    0x0c0a0704,0x00070a0e,0x0c0a0704,0x00070b0d,0x0c0a0704,0x00070b0d,0x0c0a0703,0x00080b0d,
+    0x0c0a0703,0x00080b0d,0x0c0a0703,0x00080b0d,0x0c0a0703,0x00080b0d,0x0c0a0703,0x00080b0d,
+    0x0c0a0603,0x00080b0e,0x0c0a0603,0x00080b0e,0x0c0a0603,0x00090b0d,0x0b0a0603,0x00090c0d,
+    0x0b0a0603,0x00090c0d,0x0b0a0603,0x00090c0d,0x0c090602,0x00090c0e,0x0c090602,0x00090c0e,
+};
+
+__s32 DE_Set_Reg_Base(__u32 sel, __u32 address)
+{
+	image_reg_base[sel] = address;
+	// memset((void*)(image0_reg_base+0x800), 0,0x1000-0x800);
+
+	return 0;
+}
+
+__u32 DE_Get_Reg_Base(__u32 sel)
+{
+
+   return image_reg_base[sel];
+
+}
+
+__u32 DE_BE_Reg_Init(__u32 sel)
+{
+	memset((void*)(image_reg_base[sel]+0x800), 0,0x1000-0x800);
+
+	return 0;
+}
+
+__s32 DE_BE_Set_SystemPalette(__u32 sel, __u32 * pbuffer, __u32 offset,__u32 size)
+{
+	__u32 *pdest_end;
+    __u32 *psrc_cur;
+    __u32 *pdest_cur;
+
+    if(size > DE_BE_PALETTE_TABLE_SIZE)
+    {
+        size = DE_BE_PALETTE_TABLE_SIZE;
+    }
+
+	psrc_cur = pbuffer;
+	pdest_cur = (__u32*)(DE_Get_Reg_Base(sel)+DE_BE_PALETTE_TABLE_ADDR_OFF  + offset);
+	pdest_end = pdest_cur + (size>>2);
+
+    while(pdest_cur < pdest_end)
+    {
+    	*(volatile __u32 *)pdest_cur++ = *psrc_cur++;
+    }
+
+   return 0;
+}
+
+__s32 DE_BE_Get_SystemPalette(__u32 sel, __u32 *pbuffer, __u32 offset,__u32 size)
+{
+	__u32 *pdest_end;
+    __u32 *psrc_cur;
+    __u32 *pdest_cur;
+
+    if(size > DE_BE_PALETTE_TABLE_SIZE)
+    {
+        size = DE_BE_PALETTE_TABLE_SIZE;
+    }
+
+	psrc_cur = (__u32*)(DE_Get_Reg_Base(sel)+DE_BE_PALETTE_TABLE_ADDR_OFF + offset);
+	pdest_cur = pbuffer;
+	pdest_end = pdest_cur + (size>>2);
+
+    while(pdest_cur < pdest_end)
+    {
+    	*(volatile __u32 *)pdest_cur++ = *psrc_cur++;
+    }
+
+    return 0;
+}
+
+__s32 DE_BE_Enable(__u32 sel)
+{
+    DE_BE_WUINT32(sel,DE_BE_MODE_CTL_OFF,DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF) | (0x01<<1));//start
+    DE_BE_WUINT32(sel,DE_BE_MODE_CTL_OFF,DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF) | 0x01);//enable
+
+    return 0;
+}
+
+__s32 DE_BE_Disable(__u32 sel)
+{
+    DE_BE_WUINT32(sel,DE_BE_MODE_CTL_OFF,DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF) & 0xfffffffd);//reset
+    DE_BE_WUINT32(sel,DE_BE_MODE_CTL_OFF,DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF) & 0xfffffffe);//disable
+
+    return 0;
+}
+
+// 0:lcd0 only; 1:lcd1 only
+// 2:lcd0+fe0; 3:lcd1+fe0
+// 4:lcd0+fe1; 5:lcd1+fe1
+// 6:fe0 only;  7:fe1 only
+__s32 DE_BE_Output_Select(__u32 sel, __u32 out_sel)
+{
+    DE_BE_WUINT32(sel,DE_BE_MODE_CTL_OFF,(DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF) & 0xff8fffff) | (out_sel << 20));//start
+
+    if((out_sel == 6) || (out_sel == 7))
+    {
+        DE_BE_WUINT32(sel, DE_BE_ERROR_CORRECTION, 0xffffffff);
+    }
+    else
+    {
+        DE_BE_WUINT32(sel, DE_BE_ERROR_CORRECTION, 0);
+    }
+
+    return 0;
+}
+
+__s32 DE_BE_Set_BkColor(__u32 sel, __disp_color_t bkcolor)
+{
+    DE_BE_WUINT32(sel,DE_BE_COLOR_CTL_OFF, (bkcolor.alpha<<24) | (bkcolor.red<<16) | (bkcolor.green<<8) | bkcolor.blue);
+
+    return 0;
+}
+
+__s32 DE_BE_Set_ColorKey(__u32 sel, __disp_color_t ck_max,__disp_color_t  ck_min,__u32 ck_red_match, __u32 ck_green_match, __u32 ck_blue_match)
+{
+    DE_BE_WUINT32(sel,DE_BE_CLRKEY_MAX_OFF,(ck_max.alpha<<24) | (ck_max.red<<16) | (ck_max.green<<8) | ck_max.blue);
+    DE_BE_WUINT32(sel,DE_BE_CLRKEY_MIN_OFF,(ck_min.alpha<<24) | (ck_min.red<<16) | (ck_min.green<<8) | ck_min.blue);
+    DE_BE_WUINT32(sel,DE_BE_CLRKEY_CFG_OFF,(ck_red_match<<4) | (ck_green_match<<2) | ck_blue_match);
+
+    return 0;
+}
+
+__s32 DE_BE_Cfg_Ready(__u32 sel)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_FRMBUF_CTL_OFF);
+    DE_BE_WUINT32(sel, DE_BE_FRMBUF_CTL_OFF, tmp | (0x1<<1) | 0x1);//bit1:enable, bit0:ready
+
+    return 0;
+}
+
+
+__s32 DE_BE_Sprite_Enable(__u32 sel, __bool enable)
+{
+	DE_BE_WUINT32(sel, DE_BE_SPRITE_EN_OFF,(DE_BE_RUINT32(sel, DE_BE_SPRITE_EN_OFF)&0xfffffffe) | enable);
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Disable(__u32 sel)
+{
+	DE_BE_WUINT32(sel, DE_BE_SPRITE_EN_OFF,DE_BE_RUINT32(sel, DE_BE_SPRITE_EN_OFF)&0xfffffffe);
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Set_Format(__u32 sel, __u8 pixel_seq,__u8 format)
+{
+	DE_BE_WUINT32(sel, DE_BE_SPRITE_FORMAT_CTRL_OFF,(pixel_seq<<12)|(format<<8));
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Global_Alpha_Enable(__u32 sel, __bool enable)
+{
+	DE_BE_WUINT32(sel, DE_BE_SPRITE_ALPHA_CTRL_OFF,enable);
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Set_Global_Alpha(__u32 sel, __u8 alpha_val)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_SPRITE_ALPHA_CTRL_OFF);
+    tmp = (tmp & 0x00ffffff) | (alpha_val << 24);
+
+	DE_BE_WUINT32(sel, DE_BE_SPRITE_ALPHA_CTRL_OFF,tmp);
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Block_Set_Pos(__u32 sel, __u8 blk_idx,__s16 x,__s16 y)
+{
+	__u32 reg = 0;
+
+	reg = DE_BE_RUINT32IDX(sel, DE_BE_SPRITE_POS_CTRL_OFF,blk_idx);
+
+  	DE_BE_WUINT32IDX(sel, DE_BE_SPRITE_POS_CTRL_OFF,blk_idx,reg | ((y&0xffff)<<16) | (x&0xffff));
+   	return 0;
+}
+
+__s32 DE_BE_Sprite_Block_Set_Size(__u32 sel, __u8 blk_idx,__u32 xsize,__u32 ysize)//todo
+{
+	__u32 tmp = 0;
+
+	tmp = DE_BE_RUINT32IDX(sel, DE_BE_SPRITE_ATTR_CTRL_OFF,blk_idx) & 0x0000003f;
+
+	DE_BE_WUINT32IDX(sel, DE_BE_SPRITE_ATTR_CTRL_OFF,blk_idx,tmp | (ysize<<20) | (xsize<<8));
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Block_Set_fb(__u32 sel, __u8 blk_idx,__u32 addr, __u32 line_width)
+{
+	DE_BE_WUINT32IDX(sel, DE_BE_SPRITE_ADDR_OFF,blk_idx,addr);
+	DE_BE_WUINT32IDX(sel, DE_BE_SPRITE_LINE_WIDTH_OFF,blk_idx, line_width<<3);
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Block_Set_Next_Id(__u32 sel, __u8 blk_idx,__u8 next_blk_id)
+{
+	DE_BE_WUINT32IDX(sel, DE_BE_SPRITE_ATTR_CTRL_OFF,blk_idx,next_blk_id);
+	return 0;
+}
+
+__s32 DE_BE_Sprite_Set_Palette_Table(__u32 sel, __u32 address, __u32 offset, __u32 size)
+{
+	__u32 *pdest_end;
+    __u32 *psrc_cur;
+    __u32 *pdest_cur;
+
+    if(size > DE_BE_SPRITE_PALETTE_TABLE_SIZE)
+    {
+        size = DE_BE_SPRITE_PALETTE_TABLE_SIZE;
+    }
+
+	psrc_cur = (__u32*)address;
+	pdest_cur = (__u32*)(DE_Get_Reg_Base(sel) + DE_BE_SPRITE_PALETTE_TABLE_ADDR_OFF + offset);
+	pdest_end = pdest_cur + (size>>2);
+
+    while(pdest_cur < pdest_end)
+    {
+    	*(volatile __u32 *)pdest_cur++ = *psrc_cur++;
+    }
+
+    return 0;
+}
+
+//brightness -100~100
+//contrast -100~100
+//saturaion -100~100
+__s32 DE_BE_Set_Enhance(__u8 sel,__u32 brightness, __u32 contrast, __u32 saturaion)
+{
+	__s32 Rr,Rg,Rb,Rc;
+	__s32 Gr,Gg,Gb,Gc;
+	__s32 Br,Bg,Bb,Bc;
+	__s32 max_rgb = (1<<14) - 1;
+	__s32 min_rgb = 0 - ((2<<14) - 1);
+	__s32 max_c = (1<<15) - 1;
+	__s32 min_c = 0 - ((1<<15) - 1);
+
+	brightness = brightness>100?100:(brightness<0?0:brightness);
+	contrast = contrast>100?100:(contrast<0?0:contrast);
+	saturaion = saturaion>100?100:(saturaion<0?0:saturaion);
+
+	brightness = (brightness-50) * 10;
+	saturaion = saturaion * 10 / 50;
+	contrast = contrast * 10 / 50;
+
+	Rr=(1164*183*contrast+1793*439*saturaion) / (1000*1000*10/1024);
+	Rg=(1164*614*contrast-1793*399*saturaion) / (1000*1000*10/1024);
+	Rb=(1164*62*contrast-1793*40*saturaion) / (1000*1000*10/1024);
+	Rc=((1164*(16*contrast*10+brightness*contrast-16*10*10))*0x10) / (1000*10*10);
+
+	Gr=(1164*183*contrast-534*439*saturaion+213*101*saturaion) / (1000*1000*10/1024);
+	Gg=(1164*614*contrast+534*399*saturaion+213*338*saturaion) / (1000*1000*10/1024);
+	Gb=(1164*62*contrast+534*40*saturaion-213*439*saturaion) / (1000*1000*10/1024);
+	Gc=((1164*(16*contrast*10+brightness*contrast-16*10*10))*0x10) / (1000*10*10);
+
+	Br=(1164*183*contrast-2115*101*saturaion) / (1000*1000*10/1024);
+	Bg=(1164*614*contrast-2115*338*saturaion) / (1000*1000*10/1024);
+	Bb=(1164*62*contrast+2115*439*saturaion) / (1000*1000*10/1024);
+	Bc=((1164*(16*contrast*10+brightness*contrast-16*10*10))*0x10) / (1000*10*10);
+
+	Rr = (Rr > max_rgb)?max_rgb:((Rr < min_rgb)?min_rgb:Rr);
+	Rg = (Rg > max_rgb)?max_rgb:((Rg < min_rgb)?min_rgb:Rg);
+	Rb = (Rb > max_rgb)?max_rgb:((Rb < min_rgb)?min_rgb:Rb);
+	Rc = (Rc > max_c)?max_c:((Rc < min_c)?min_c:Rc);
+
+	Gr = (Gr > max_rgb)?max_rgb:((Gr < min_rgb)?min_rgb:Gr);
+	Gg = (Gg > max_rgb)?max_rgb:((Gg < min_rgb)?min_rgb:Gg);
+	Gb = (Gb > max_rgb)?max_rgb:((Gb < min_rgb)?min_rgb:Gb);
+	Gc = (Gc > max_c)?max_c:((Gc < min_c)?min_c:Gc);
+
+	Br = (Br > max_rgb)?max_rgb:((Br < min_rgb)?min_rgb:Br);
+	Bg = (Bg > max_rgb)?max_rgb:((Bg < min_rgb)?min_rgb:Bg);
+	Bb = (Bb > max_rgb)?max_rgb:((Bb < min_rgb)?min_rgb:Bb);
+	Bc = (Bc > max_c)?max_c:((Bc < min_c)?min_c:Bc);
+
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_R_COEFF_OFF + 0, (__s32)Rr);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_R_COEFF_OFF + 4, (__s32)Rg);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_R_COEFF_OFF + 8, (__s32)Rb);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_R_CONSTANT_OFF, (__s32)Rc);
+
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_G_COEFF_OFF + 0, (__s32)Gr);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_G_COEFF_OFF + 4, (__s32)Gg);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_G_COEFF_OFF + 8, (__s32)Gb);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_G_CONSTANT_OFF, (__s32)Gc);
+
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_B_COEFF_OFF + 0, (__s32)Br);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_B_COEFF_OFF + 4, (__s32)Bg);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_B_COEFF_OFF + 8, (__s32)Bb);
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_B_CONSTANT_OFF, (__s32)Bc);
+
+    return 0;
+}
+
+__s32 DE_BE_enhance_enable(__u32 sel, __bool enable)
+{
+    DE_BE_WUINT32(sel, DE_BE_OUT_COLOR_CTRL_OFF, enable);
+
+    return 0;
+}
+
+__s32 DE_BE_deflicker_enable(__u32 sel, __bool enable)
+{
+	DE_BE_WUINT32(sel, DE_BE_MODE_CTL_OFF,(DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF)&(~(1<<4))) | (enable<<4));
+
+    return 0;
+}
+
+
+__s32 DE_BE_output_csc_enable(__u32 sel, __bool enable)
+{
+	DE_BE_WUINT32(sel, DE_BE_MODE_CTL_OFF,(DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF)&(~(1<<5))) | (enable<<5));
+
+    return 0;
+}
+
+__s32 DE_BE_Set_Outitl_enable(__u32 sel, __bool enable)
+{
+	DE_BE_WUINT32(sel, DE_BE_MODE_CTL_OFF,(DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF)&(~(1<<28))) | (enable<<28));
+
+    return 0;
+}
+
+__s32 DE_BE_Output_Cfg_Csc_Coeff(__u32 sel, __bool bout_yuv)
+{
+	if(bout_yuv)
+	{
+	    DE_BE_output_csc_enable(sel, 1);
+		DE_BE_WUINT32(sel, DE_BE_YG_COEFF_OFF + 0, (DE_BE_RUINT32(sel, DE_BE_YG_COEFF_OFF + 0) & 0x0000ffff) | (0x0274<<16));
+		DE_BE_WUINT32(sel, DE_BE_YG_COEFF_OFF + 4, (DE_BE_RUINT32(sel, DE_BE_YG_COEFF_OFF + 4) & 0x0000ffff) | (0x00bb<<16));
+		DE_BE_WUINT32(sel, DE_BE_YG_COEFF_OFF + 8, (DE_BE_RUINT32(sel, DE_BE_YG_COEFF_OFF + 8) & 0x0000ffff) | (0x003f<<16));
+		DE_BE_WUINT32(sel, DE_BE_YG_CONSTANT_OFF , (DE_BE_RUINT32(sel, DE_BE_YG_CONSTANT_OFF) & 0x0000ffff) | (0x0100<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_COEFF_OFF + 0, (DE_BE_RUINT32(sel, DE_BE_UR_COEFF_OFF + 0) & 0x0000ffff) | (0x1ea5<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_COEFF_OFF + 4, (DE_BE_RUINT32(sel, DE_BE_UR_COEFF_OFF + 4) & 0x0000ffff) | (0x1f98<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_COEFF_OFF + 8, (DE_BE_RUINT32(sel, DE_BE_UR_COEFF_OFF + 8) & 0x0000ffff) | (0x01c1<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_CONSTANT_OFF, (DE_BE_RUINT32(sel, DE_BE_UR_CONSTANT_OFF) & 0x0000ffff) | (0x0800<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_COEFF_OFF + 0, (DE_BE_RUINT32(sel, DE_BE_VB_COEFF_OFF + 0) & 0x0000ffff) | (0x1e67<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_COEFF_OFF + 4, (DE_BE_RUINT32(sel, DE_BE_VB_COEFF_OFF + 4) & 0x0000ffff) | (0x01c1<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_COEFF_OFF + 8, (DE_BE_RUINT32(sel, DE_BE_VB_COEFF_OFF + 8) & 0x0000ffff) | (0x1fd7<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_CONSTANT_OFF, (DE_BE_RUINT32(sel, DE_BE_VB_CONSTANT_OFF) & 0x0000ffff) | (0x0800<<16));
+	}
+	else
+	{
+	    DE_BE_output_csc_enable(sel, 0);
+		DE_BE_WUINT32(sel, DE_BE_YG_COEFF_OFF + 0, (DE_BE_RUINT32(sel, DE_BE_YG_COEFF_OFF + 0) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_YG_COEFF_OFF + 4, (DE_BE_RUINT32(sel, DE_BE_YG_COEFF_OFF + 4) & 0x0000ffff) | (0x0400<<16));
+		DE_BE_WUINT32(sel, DE_BE_YG_COEFF_OFF + 8, (DE_BE_RUINT32(sel, DE_BE_YG_COEFF_OFF + 8) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_YG_CONSTANT_OFF , (DE_BE_RUINT32(sel, DE_BE_YG_CONSTANT_OFF) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_COEFF_OFF + 0, (DE_BE_RUINT32(sel, DE_BE_UR_COEFF_OFF + 0) & 0x0000ffff) | (0x0400<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_COEFF_OFF + 4, (DE_BE_RUINT32(sel, DE_BE_UR_COEFF_OFF + 4) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_COEFF_OFF + 8, (DE_BE_RUINT32(sel, DE_BE_UR_COEFF_OFF + 8) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_UR_CONSTANT_OFF, (DE_BE_RUINT32(sel, DE_BE_UR_CONSTANT_OFF) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_COEFF_OFF + 0, (DE_BE_RUINT32(sel, DE_BE_VB_COEFF_OFF + 0) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_COEFF_OFF + 4, (DE_BE_RUINT32(sel, DE_BE_VB_COEFF_OFF + 4) & 0x0000ffff) | (0x0000<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_COEFF_OFF + 8, (DE_BE_RUINT32(sel, DE_BE_VB_COEFF_OFF + 8) & 0x0000ffff) | (0x0400<<16));
+		DE_BE_WUINT32(sel, DE_BE_VB_CONSTANT_OFF, (DE_BE_RUINT32(sel, DE_BE_VB_CONSTANT_OFF) & 0x0000ffff) | (0x0000<<16));
+	}
+
+    return 0;
+
+}
+
+#if 0
+__s32 DE_BE_Output_Cfg_Csc_Coeff(__u32 sel, __u8 cs_mode)//CS_MODE SET 1:BT709
+{
+	__u32 csc_coef_off;
+	__u32 *pdest_end;
+    __u32 *psrc_cur;
+    __u32 *pdest_cur;
+    __u32 temp;
+
+	csc_coef_off = (((cs_mode&0x3)<<7) + ((cs_mode&0x3)<<6)) + 1/*rgb in*/ + 1/*yuv out*/;
+
+	pdest_cur = (__u32*)(DE_Get_Reg_Base(sel)+DE_BE_YG_COEFF_OFF);
+	psrc_cur = (__u32*)(&csc_tab[csc_coef_off>>2]);
+	pdest_end = pdest_cur + 12;
+
+    while(pdest_cur < pdest_end)
+    {
+    	temp = *(volatile __u32 *)pdest_cur;
+		temp &= 0x0000ffff;
+		*(volatile __u32 *)pdest_cur++ = (((*psrc_cur++)&0xffff)<<16) | temp;
+    }
+
+	return 0;
+}
+#endif
+
+__s32 DE_BE_set_display_size(__u32 sel, __u32 width, __u32 height)
+{
+    DE_BE_WUINT32(sel, DE_BE_DISP_SIZE_OFF, ((height-1)<<16) | (width-1));
+    return 0;
+}
+
+__s32 DE_BE_get_display_width(__u32 sel)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_DISP_SIZE_OFF) & 0x0000ffff;
+
+    return tmp + 1;
+}
+
+__s32 DE_BE_get_display_height(__u32 sel)
+{
+    __u32 tmp;
+
+    tmp = (DE_BE_RUINT32(sel, DE_BE_DISP_SIZE_OFF) & 0xffff0000)>>16;
+
+    return tmp + 1;
+}
+
+__s32 DE_BE_EnableINT(__u8 sel,__u32 irqsrc)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_INT_EN_OFF);
+	DE_BE_WUINT32(sel, DE_BE_INT_EN_OFF, tmp | irqsrc);
+
+	return 0;
+}
+
+__s32 DE_BE_DisableINT(__u8 sel, __u32 irqsrc)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_INT_EN_OFF);
+	DE_BE_WUINT32(sel, DE_BE_INT_EN_OFF, tmp & (~irqsrc));
+
+	return 0;
+}
+
+__u32 DE_BE_QueryINT(__u8 sel)
+{
+	__u32 ret = 0;
+
+	ret = DE_BE_RUINT32(sel, DE_BE_INT_FLAG_OFF);
+
+	return ret;
+}
+
+__u32 DE_BE_ClearINT(__u8 sel,__u32 irqsrc)
+{
+	DE_BE_WUINT32(sel, DE_BE_INT_FLAG_OFF,irqsrc);
+
+	return 0;
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.h b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.h
new file mode 100644
index 0000000..5b905c8
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_be.h
@@ -0,0 +1,115 @@
+#ifndef __DE_BE_H__
+#define __DE_BE_H__
+
+#include "ebios_de.h"
+
+
+/*back-end registers offset*/
+#define DE_BE_MODE_CTL_OFF  		            0x800	/*back-end mode control register offset*/
+#define DE_BE_COLOR_CTL_OFF   		            0x804	/*back-end color control register offset*/
+#define DE_BE_DISP_SIZE_OFF                     0x808	/*back-end display size setting register offset*/
+#define DE_BE_ERROR_CORRECTION                  0x80c
+#define DE_BE_LAYER_SIZE_OFF  		            0x810	/*back-end layer size register offset*/
+#define DE_BE_LAYER_CRD_CTL_OFF  	            0x820	/*back-end layer coordinate control register offset*/
+#define DE_BE_FRMBUF_WLINE_OFF   	            0x840	/*back-end frame buffer line width register offset*/
+#define DE_BE_FRMBUF_LOW32ADDR_OFF  	        0X850	/*back-end frame buffer low 32bit address  register offset*/
+#define DE_BE_FRMBUF_HIGH4ADDR_OFF  	        0X860	/*back-end frame buffer high 4bit address  register offset*/
+#define DE_BE_FRMBUF_CTL_OFF  		            0X870	/*back-end frame buffer control register offset*/
+#define DE_BE_CLRKEY_MAX_OFF   	                0x880	/*back-end color key max register offset*/
+#define DE_BE_CLRKEY_MIN_OFF  		            0x884	/*back-end color key min register offset*/
+#define DE_BE_CLRKEY_CFG_OFF   		            0x888	/*back-end color key configuration register offset*/
+#define DE_BE_LAYER_ATTRCTL_OFF0  	            0x890	/*back-end layer attribute control register0 offset*/
+#define DE_BE_LAYER_ATTRCTL_OFF1  	            0x8a0	/*back-end layer attribute control register1 offset*/
+#define DE_BE_DLCDP_CTL_OFF  		            0x8b0	/*direct lcd pipe control register offset*/
+#define DE_BE_DLCDP_FRMBUF_ADDRCTL_OFF          0x8b4	/*direct lcd pipe frame buffer address control  register offset*/
+#define DE_BE_DLCDP_CRD_CTL_OFF0                0x8b8	/*direct lcd pipe coordinate control  register0 offset*/
+#define DE_BE_DLCDP_CRD_CTL_OFF1                0x8bc	/*direct lcd pipe coordinate control register1 offset*/
+#define DE_BE_INT_EN_OFF                        0x8c0
+#define DE_BE_INT_FLAG_OFF                      0x8c4
+#define DE_BE_HWC_CRD_CTL_OFF             	    0x8d8	/*hardware cursor coordinate control register offset*/
+#define DE_BE_HWC_FRMBUF_OFF                    0x8e0	/*hardware cursor framebuffer control*/
+#define DE_BE_WB_CTRL_OFF						0x8f0	/*back-end write back control */
+#define DE_BE_WB_ADDR_OFF						0x8f4	/*back-end write back address*/
+#define DE_BE_WB_LINE_WIDTH_OFF					0x8f8	/*back-end write back buffer line width*/
+#define DE_BE_SPRITE_EN_OFF						0x900	/*sprite enable*/
+#define DE_BE_SPRITE_FORMAT_CTRL_OFF			0x908	/*sprite format control*/
+#define DE_BE_SPRITE_ALPHA_CTRL_OFF				0x90c	/*sprite alpha control*/
+#define DE_BE_SPRITE_POS_CTRL_OFF				0xa00	/*sprite single block coordinate control*/
+#define DE_BE_SPRITE_ATTR_CTRL_OFF				0xb00	/*sprite single block attribute control*/
+#define DE_BE_SPRITE_ADDR_OFF					0xc00	/*sprite single block address setting SRAM array*/
+#define DE_BE_SPRITE_LINE_WIDTH_OFF             0xd00
+#define DE_BE_YUV_CTRL_OFF						0x920	/*back-end input YUV channel control*/
+#define DE_BE_YUV_ADDR_OFF						0x930	/*back-end YUV channel frame buffer address*/
+#define DE_BE_YUV_LINE_WIDTH_OFF				0x940	/*back-end YUV channel buffer line width*/
+#define DE_BE_YG_COEFF_OFF						0x950	/*back Y/G coefficient*/
+#define DE_BE_YG_CONSTANT_OFF					0x95c	/*back Y/G constant*/
+#define DE_BE_UR_COEFF_OFF						0x960	/*back U/R coefficient*/
+#define DE_BE_UR_CONSTANT_OFF					0x96c	/*back U/R constant*/
+#define DE_BE_VB_COEFF_OFF						0x970	/*back V/B coefficient*/
+#define DE_BE_VB_CONSTANT_OFF					0x97c	/*back V/B constant*/
+#define DE_BE_OUT_COLOR_CTRL_OFF                0x9c0
+#define DE_BE_OUT_COLOR_R_COEFF_OFF             0x9d0
+#define DE_BE_OUT_COLOR_R_CONSTANT_OFF          0x9dc
+#define DE_BE_OUT_COLOR_G_COEFF_OFF             0x9e0
+#define DE_BE_OUT_COLOR_G_CONSTANT_OFF          0x9ec
+#define DE_BE_OUT_COLOR_B_COEFF_OFF             0x9f0
+#define DE_BE_OUT_COLOR_B_CONSTANT_OFF          0x9fc
+
+#define DE_BE_REG_ADDR_OFF                      0x0
+
+#define DE_BE_HWC_PALETTE_TABLE_ADDR_OFF        0x4c00	/*back-end hardware cursor palette table address*/
+#define DE_BE_INTER_PALETTE_TABLE_ADDR_OFF      0x5000	/*back-end internal framebuffer or direct lcd pipe palette table*/
+#define DE_BE_SPRITE_PALETTE_TABLE_ADDR_OFF		0x4000	/*back-end sprite palette table address*/
+#define DE_BE_HWC_MEMORY_ADDR_OFF               0x4800	/*back-end hwc pattern memory block address*/
+#define DE_BE_INTERNAL_FB_ADDR_OFF              0x4000	/*back-end internal frame bufffer address definition*/
+#define DE_BE_GAMMA_TABLE_ADDR_OFF              0x4400	/*back-end gamma table address*/
+#define DE_BE_PALETTE_TABLE_ADDR_OFF            0x5000	/*back-end palette table address*/
+#define DE_FE_REG_ADDR_OFF                      0x20000
+#define DE_SCAL2_REG_ADDR_OFF                   0x40000
+
+#define DE_BE_REG_SIZE                      0x1000
+#define DE_BE_HWC_PALETTE_TABLE_SIZE        0x400	/*back-end hardware cursor palette table size*/
+#define DE_BE_INTER_PALETTE_TABLE_SIZE      0x400	/*back-end internal framebuffer or direct lcd pipe palette table size in bytes*/
+#define DE_BE_SPRITE_PALETTE_TABLE_SIZE		0x400	/*back-end sprite palette table size in bytes*/
+#define DE_BE_HWC_PATTERN_SIZE              0x400
+#define DE_BE_INTERNAL_FB_SIZE              0x1800	/**back-end internal frame buffer size in byte*/
+#define DE_BE_GAMMA_TABLE_SIZE              0x400	/*back-end gamma table size*/
+#define DE_BE_PALETTE_TABLE_SIZE            0x400	/*back-end palette table size in bytes*/
+#define DE_FE_REG_SIZE                      0x1000
+#define DE_SCAL2_REG_SIZE                   0x1000
+
+
+extern __u32 image_reg_base[2];
+#define DE_BE_GET_REG_BASE(sel)    (image_reg_base[sel])
+
+#define DE_WUINT8(offset,value)             (*((volatile __u8 *)(offset))=(value))
+#define DE_RUINT8(offset)                   (*((volatile __u8 *)(offset)))
+#define DE_WUINT16(offset,value)            (*((volatile __u16 *)(offset))=(value))
+#define DE_RUINT16(offset)                  (*((volatile __u16 *)(offset)))
+#define DE_WUINT32(offset,value)            (*((volatile __u32 *)(offset))=(value))
+#define DE_RUINT32(offset)                  (*((volatile __u32 *)(offset)))
+#define DE_WUINT8IDX(offset,index,value)    ((*((volatile __u8 *)(offset+index)))=(value))
+#define DE_RUINT8IDX(offset,index)          (*((volatile __u8 *)(offset+index)))
+#define DE_WUINT16IDX(offset,index,value)   (*((volatile __u16 *)(offset+2*index))=(value))
+#define DE_RUINT16IDX(offset,index)         ( *((volatile __u16 *)(offset+2*index)))
+#define DE_WUINT32IDX(offset,index,value)   (*((volatile __u32 *)(offset+4*index))=(value))
+#define DE_RUINT32IDX(offset,index)         (*((volatile __u32 *)(offset+4*index)))
+
+#define DE_BE_WUINT8(sel,offset,value)        DE_WUINT8(DE_BE_GET_REG_BASE(sel)+(offset),value)
+#define DE_BE_RUINT8(sel,offset)              DE_RUINT8(DE_BE_GET_REG_BASE(sel)+(offset))
+#define DE_BE_WUINT16(sel,offset,value)       DE_WUINT16(DE_BE_GET_REG_BASE(sel)+(offset),value)
+#define DE_BE_RUINT16(sel,offset)             DE_RUINT16(DE_BE_GET_REG_BASE(sel)+(offset))
+#define DE_BE_WUINT32(sel,offset,value)       DE_WUINT32(DE_BE_GET_REG_BASE(sel)+(offset),value)
+#define DE_BE_RUINT32(sel,offset)             DE_RUINT32(DE_BE_GET_REG_BASE(sel)+(offset))
+#define DE_BE_WUINT8IDX(sel,offset,index,value)  DE_WUINT8IDX(DE_BE_GET_REG_BASE(sel)+(offset),index,value)
+#define DE_BE_RUINT8IDX(sel,offset,index)        DE_RUINT8IDX(DE_BE_GET_REG_BASE(sel)+(offset),index)
+#define DE_BE_WUINT16IDX(sel,offset,index,value) DE_WUINT16IDX(DE_BE_GET_REG_BASE(sel)+(offset),index,value)
+#define DE_BE_RUINT16IDX(sel,offset,index)       DE_RUINT16IDX(DE_BE_GET_REG_BASE(sel)+(offset),index)
+#define DE_BE_WUINT32IDX(sel,offset,index,value) DE_WUINT32IDX(DE_BE_GET_REG_BASE(sel)+(offset),index,value)
+#define DE_BE_RUINT32IDX(sel,offset,index)       DE_RUINT32IDX(DE_BE_GET_REG_BASE(sel)+(offset),index)
+
+extern __u32  csc_tab[192];
+extern __u32  image_enhance_tab[224];
+extern __u32  fir_tab[1792];
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.c b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.c
new file mode 100644
index 0000000..1c9411e
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.c
@@ -0,0 +1,2550 @@
+//*****************************************************************************
+//  All Winner Micro, All Right Reserved. 2006-2011 Copyright (c)
+//
+//  File name   :        de_scal_bsp.c
+//
+//  Description :  display engine scaler base functions implement for aw1623
+//
+//  History       :
+//                 2011/05/03      zchmin       v1.0    Initial version
+//                 2011/05/13      vito            v1.1    added vpp function
+//                 2011/05/25      zchmin       v1.2    redefine 3d inmode
+//                 2011/07/01      zchmin       v1.3    modify set scal coef error
+//                 2011/07/14      zchmin       v1.4    added input/output rg swap
+//                 2011/08/04      zchmin       v1.5    added divisor no-zero limited
+//                 2011/09/28      zchmin       v1.6    added 3D interleaved input format support
+//******************************************************************************
+
+
+#include "de_fe.h"
+
+//static volatile __de_scal_dev_t *scal_dev[2];
+static __de_scal_dev_t * scal_dev[2];
+static __u32 de_scal_ch0_offset;
+static __u32 de_scal_ch1_offset;
+static __u32 de_scal_ch2_offset;
+static __u32 de_scal_trd_fp_en = 0;
+static __u32 de_scal_trd_itl_en = 0;
+static __u32 de_scal_ch0r_offset;
+static __u32 de_scal_ch1r_offset;
+static __u32 de_scal_ch2r_offset;
+
+//*********************************************************************************************
+// function          : DE_SCAL_Set_Reg_Base(__u8 sel, __u32 base)
+// description      : set scale reg base
+// parameters     :
+//                 sel <scaler select>
+//                 base  <reg base>
+// return              :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Reg_Base(__u8 sel, __u32 base)
+{
+	scal_dev[sel]=(__de_scal_dev_t *)base;
+
+	return 0;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Get_Reg_Base(__u8 sel)
+// description     : get scale reg base
+// parameters    :
+//                 sel <scaler select>
+// return            :
+//               reg base
+//***********************************************************************************************
+__u32 DE_SCAL_Get_Reg_Base(__u8 sel)
+{
+	__u32 ret = 0;
+
+	ret = (__u32)(scal_dev[sel]);
+
+	return ret;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Config_Src(__u8 sel, __scal_buf_addr_t *addr, __scal_src_size_t *size,
+//                                       __scal_src_type_t *type, __u8 field, __u8 dien)
+// description     : scaler source concerning parameter configure
+// parameters    :
+//                 sel <scaler select>
+//                 addr  <frame buffer address for 3 channel, 32 bit absolute address>
+//                 size <scale region define,  src size, offset, scal size>
+//                 type <src data type, include byte sequence, mode, format, pixel sequence>
+//                 field <frame/field data get>
+//                 dien <deinterlace enable>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Config_Src(__u8 sel, __scal_buf_addr_t *addr, __scal_src_size_t *size,
+                         __scal_src_type_t *type, __u8 field, __u8 dien)
+{
+    __u8 w_shift, h_shift;
+	__u32 image_w0, image_w1;
+	__u32 x_off0, y_off0, x_off1, y_off1;
+	__u32 in_w0, in_h0, in_w1, in_h1;
+
+	image_w0 = size->src_width;
+	in_w0 = size->scal_width;
+	in_h0 = size->scal_height;
+	x_off0 = size->x_off;
+	y_off0 = (field | dien) ? (size->y_off & 0xfffffffe) : size->y_off;  //scan mod enable or deinterlace, odd dy un-support
+
+//    if(sel == 0)   //scaler 0 scaler 1
+    {
+        if(type->fmt == DE_SCAL_INYUV422 || type->fmt == DE_SCAL_INYUV420)
+        {
+            w_shift = 1;
+        	image_w1 = (image_w0 + 0x1)>>w_shift;
+        	in_w1 = (in_w0 + 0x1)>>w_shift;
+        	x_off1 = (x_off0)>>w_shift;
+        	if(type->mod == DE_SCAL_INTER_LEAVED)
+        	{
+        	    image_w0 = (image_w0 + 0x1) & 0xfffffffe;
+                image_w1 = image_w0>>1;
+                in_w0 &= 0xfffffffe;
+                in_w1 = in_w0>>0x1;
+        	    x_off0 &= 0xfffffffe;
+        		x_off1 = x_off0>>w_shift;
+        	}
+        }
+        else if(type->fmt == DE_SCAL_INYUV411)
+        {
+            w_shift = 2;
+        	image_w1 = (image_w0 + 0x3)>>w_shift;
+        	in_w1 = (in_w0 + 0x3)>>w_shift;
+        	x_off1 = (x_off0)>>w_shift;
+        }
+        else
+        {
+            w_shift = 0;
+        	image_w1 = image_w0;
+        	in_w1 = in_w0;
+        	x_off1 = x_off0;
+        }
+        if(type->fmt == DE_SCAL_INYUV420 || type->fmt == DE_SCAL_INCSIRGB)
+        {
+            h_shift = 1;
+        	in_h1 = (in_h0 + 0x1)>>h_shift;
+        	y_off1 = (y_off0)>>h_shift;
+        }
+        else
+        {
+            h_shift = 0;
+        	in_h1 = in_h0;
+        	y_off1 = y_off0;
+        }
+    }
+    //added no-zero limited
+    in_h0 = (in_h0!=0) ? in_h0 : 1;
+	in_h1 = (in_h1!=0) ? in_h1 : 1;
+	in_w0 = (in_w0!=0) ? in_w0 : 1;
+	in_w1 = (in_w1!=0) ? in_w1 : 1;
+
+	if(type->mod == DE_SCAL_PLANNAR)
+	{
+	    scal_dev[sel]->linestrd0.dwval = image_w0;
+		scal_dev[sel]->linestrd1.dwval = image_w1;
+		scal_dev[sel]->linestrd2.dwval = image_w1;
+
+        de_scal_ch0_offset = image_w0 * y_off0 + x_off0;
+        de_scal_ch1_offset = image_w1 * y_off1 + x_off1;
+        de_scal_ch2_offset = image_w1 * y_off1 + x_off1;
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+	}
+	else if(type->mod == DE_SCAL_INTER_LEAVED)
+	{
+	    scal_dev[sel]->linestrd0.dwval = image_w0<<(0x2 - w_shift);
+		scal_dev[sel]->linestrd1.dwval = 0x0;
+		scal_dev[sel]->linestrd2.dwval = 0x0;
+
+        de_scal_ch0_offset = ((image_w0 * y_off0 + x_off0)<<(0x2 - w_shift));
+        de_scal_ch1_offset = 0x0;
+        de_scal_ch2_offset = 0x0;
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr;
+	}
+	else if(type->mod == DE_SCAL_UVCOMBINED)
+	{
+	    scal_dev[sel]->linestrd0.dwval = image_w0;
+		scal_dev[sel]->linestrd1.dwval = image_w1<<1;
+		scal_dev[sel]->linestrd2.dwval = 0x0;
+
+        de_scal_ch0_offset = image_w0 * y_off0 + x_off0;
+        de_scal_ch1_offset = (((image_w1) * (y_off1) + (x_off1))<<1);
+        de_scal_ch2_offset = 0x0;
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr;
+	}
+	else if(type->mod == DE_SCAL_PLANNARMB)
+	{
+	    image_w0 = (image_w0 + 0xf)&0xfff0;
+        image_w1 = (image_w1 + (0xf>>w_shift)) & (~(0xf>>w_shift));
+
+        //block offset
+        scal_dev[sel]->mb_off0.bits.x_offset0 = (x_off0 & 0x0f);
+        scal_dev[sel]->mb_off0.bits.y_offset0 = (y_off0 & 0x0f);
+        scal_dev[sel]->mb_off0.bits.x_offset1 = (((x_off0 & 0x0f) & (0x0f)) + in_w0 + 0x0f) & 0x0f;
+        scal_dev[sel]->mb_off1.bits.x_offset0 = ((x_off1)&(0x0f>>w_shift));
+        scal_dev[sel]->mb_off1.bits.y_offset0 = ((y_off1)&(0x0f>>h_shift));
+        scal_dev[sel]->mb_off1.bits.x_offset1 = ((((x_off1)&(0x0f>>w_shift)) & (0x0f>>w_shift)) + (in_w1) + (0x0f>>w_shift))&(0x0f>>w_shift);
+		scal_dev[sel]->mb_off2.bits.x_offset0 = scal_dev[sel]->mb_off1.bits.x_offset0;
+		scal_dev[sel]->mb_off2.bits.y_offset0 = scal_dev[sel]->mb_off1.bits.y_offset0;
+		scal_dev[sel]->mb_off2.bits.x_offset1 = scal_dev[sel]->mb_off1.bits.x_offset1;
+
+		scal_dev[sel]->linestrd0.dwval = (image_w0 - 0xf)<<4;
+		scal_dev[sel]->linestrd1.dwval = ((image_w1) <<(0x04-h_shift)) - ((0xf>>h_shift)<<(0x04-w_shift));
+		scal_dev[sel]->linestrd2.dwval = scal_dev[sel]->linestrd1.dwval;
+
+        de_scal_ch0_offset = ((image_w0 + 0x0f)&0xfff0) * (y_off0&0xfff0) + ((y_off0&0x00f)<<4) + ((x_off0&0xff0)<<4);
+        de_scal_ch1_offset = (((image_w1) + (0x0f>>w_shift)) &(0xfff0>>w_shift)) * ((y_off1) & (0xfff0>>h_shift)) +
+                             ((((y_off1) & (0x00f>>h_shift))<<(0x4 - w_shift))) + (((x_off1) & (0xfff0>>w_shift))<<(0x4 - h_shift));
+        de_scal_ch2_offset = de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+	}
+	else if(type->mod == DE_SCAL_UVCOMBINEDMB)
+	{
+	    image_w0 = (image_w0 + 0x1f)&0xffffffe0;
+		image_w1 = (image_w1 + 0x0f)&0xfffffff0;
+		//block offset
+		scal_dev[sel]->mb_off0.bits.x_offset0 = (x_off0 & 0x1f);
+        scal_dev[sel]->mb_off0.bits.y_offset0 = (y_off0 & 0x1f);
+		scal_dev[sel]->mb_off0.bits.x_offset1 = (((x_off0 & 0x1f) & 0x1f) + in_w0 + 0x1f) &0x1f;
+		scal_dev[sel]->mb_off1.bits.x_offset0 = (((x_off1)<<1)&0x1f);
+        scal_dev[sel]->mb_off1.bits.y_offset0 = ((y_off1)&0x1f);
+        scal_dev[sel]->mb_off1.bits.x_offset1 = (((((x_off1)<<1)&0x1f) & 0x1e) + ((in_w1)<<1) + 0x1f) & 0x1f;
+
+		scal_dev[sel]->linestrd0.dwval = (((image_w0 + 0x1f)&0xffe0) - 0x1f)<<0x05;
+        scal_dev[sel]->linestrd1.dwval = (((((image_w1)<<1)+0x1f)&0xffe0) - 0x1f) << 0x05;
+        scal_dev[sel]->linestrd2.dwval = 0x00;
+
+        de_scal_ch0_offset = ((image_w0 + 0x1f) &0xffe0) * (y_off0& 0xffe0) + ((y_off0& 0x01f)<<5) + ((x_off0& 0xffe0)<<5);
+        de_scal_ch1_offset = (((image_w1<< 0x01)+0x1f)&0xffe0) * ((y_off1) & 0xffe0) + (((y_off1) & 0x01f)<<5) + (((x_off1<<0x01) & 0xffe0)<<5);
+        de_scal_ch2_offset = 0x0;
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+        scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+        scal_dev[sel]->buf_addr2.dwval = 0x0;
+	}
+
+	scal_dev[sel]->input_fmt.bits.byte_seq = type->byte_seq;
+	scal_dev[sel]->input_fmt.bits.data_mod = type->mod;
+	scal_dev[sel]->input_fmt.bits.data_fmt = type->fmt;
+	scal_dev[sel]->input_fmt.bits.data_ps = type->ps;
+
+	scal_dev[sel]->ch0_insize.bits.in_width = in_w0 - 1;
+	scal_dev[sel]->ch0_insize.bits.in_height = in_h0 - 1;
+	scal_dev[sel]->ch1_insize.bits.in_width = in_w1 - 1;
+	scal_dev[sel]->ch1_insize.bits.in_height = in_h1 - 1;
+
+	scal_dev[sel]->trd_ctrl.dwval = 0;
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Fb_Addr(__u8 sel, __scal_buf_addr_t *addr)
+// description     : scaler change frame buffer address, only change start address parameters
+// parameters    :
+//                 sel <scaler select>
+//                 addr  <frame buffer address for 3 channel, 32 bit absolute address>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Fb_Addr(__u8 sel, __scal_buf_addr_t *addr)
+{
+    scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+    scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+    scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Init_Phase(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+//                                           __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+//                                           __scal_out_size_t *out_size, __scal_out_type_t *out_type, __u8 dien)
+// description     : set scaler init phase according to in/out information
+// parameters    :
+//                 sel <scaler select>
+//                 in_scan <scale src data scan mode, if deinterlaceing open, the scan mode is progressive for scale>
+//                 in_size <scale region define,  src size, offset, scal size>
+//                 in_type <src data type>
+//                 out_scan <scale output data scan mode>
+//                 out_size <scale out size>
+//                 out_type <output data format>
+//                 dien <deinterlace enable>
+// return           :
+//               success
+//note               : when 3D mode(when output mode is HDMI_FPI), the Function Set_3D_Ctrl msut carry out first.
+//                         when 3D mode(HDMI_FPI), this function used once
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Init_Phase(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+                             __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+                             __scal_out_size_t *out_size, __scal_out_type_t *out_type, __u8 dien)
+{
+     __s32 ch0_h_phase=0, ch0_v_phase0=0, ch0_v_phase1=0, ch12_h_phase=0, ch12_v_phase0=0, ch12_v_phase1=0;
+	 __u8 h_shift=0, w_shift=0;
+     __s32 in_h0, in_h1, out_h0, out_h1;
+
+
+     //set register value
+	 scal_dev[sel]->output_fmt.bits.scan_mod = out_scan->field;
+     scal_dev[sel]->input_fmt.bits.scan_mod = out_scan->field ? 0x0 : in_scan->field;  //out scan and in scan are not valid at the same time
+     if(de_scal_trd_itl_en == 0)   //added for 3D top_bottom mode, zchmin 2011-05-04, note: when HDMI_FPI, the input inscan mode must open,
+ 	{
+		 scal_dev[sel]->field_ctrl.bits.field_loop_mod = 0x0;
+		 scal_dev[sel]->field_ctrl.bits.valid_field_cnt = 0x1-0x1;
+		 scal_dev[sel]->field_ctrl.bits.field_cnt = in_scan->bottom;
+ 	}
+
+
+     //sampling method, phase
+	 if(in_type->fmt == DE_SCAL_INYUV420)
+	 {
+	     if(in_type->sample_method == 0x0)  //
+	     {
+	         ch0_h_phase = 0x0;
+			 ch0_v_phase0 = 0x0;
+			 ch0_v_phase1 = 0x0;
+			 ch12_h_phase = 0xfc000;   //-0.25
+			 ch12_v_phase0 = 0xfc000;  //-0.25
+			 ch12_v_phase1 = 0xfc000;  //-0.25
+	     }
+		 else
+		 {
+		     ch0_h_phase = 0x0;
+			 ch0_v_phase0 = 0x0;
+			 ch0_v_phase1 = 0x0;
+			 ch12_h_phase = 0x0;       //0
+			 ch12_v_phase0 = 0xfc000;  //-0.25
+			 ch12_v_phase1 = 0xfc000;  //-0.25
+		 }
+	 }
+	 else  //can added yuv411 or yuv420 init phase for sample method
+	 {
+	     ch0_h_phase = 0x0;
+		 ch0_v_phase0 = 0x0;
+		 ch0_v_phase1 = 0x0;
+		 ch12_h_phase = 0x0;
+		 ch12_v_phase0 = 0x0;
+		 ch12_v_phase1 = 0x0;
+	 }
+
+     //location offset
+     w_shift = (in_type->fmt == DE_SCAL_INYUV420 || in_type->fmt == DE_SCAL_INYUV422) ? 0x1 : ((in_type->fmt == DE_SCAL_INYUV411) ? 0x2 : 0x0);
+	 h_shift = (in_type->fmt == DE_SCAL_INYUV420 || in_type->fmt == DE_SCAL_INCSIRGB) ? 0x1 : 0x0;
+
+     //deinterlace and in scan mode enable, //dy
+     if(((dien == 0x01) || (in_scan->field== 0x1)) && (in_size->y_off & 0x1)&& (in_scan->bottom == 0x0))  //
+     {
+         ch0_v_phase0 = (ch0_v_phase0 + 0x10000) & SCALINITPASELMT;
+         ch12_v_phase0 = (ch12_v_phase0 + 0x10000) & SCALINITPASELMT;
+     }
+     else
+     {
+         ch12_v_phase0 = (ch12_v_phase0 + (in_size->y_off & ((1<<h_shift)-1))*(0x10000>>h_shift)) & SCALINITPASELMT;
+         ch12_v_phase1 = ch12_v_phase0;
+     }
+
+	 //dx
+	 scal_dev[sel]->ch0_horzphase.bits.phase = ch0_h_phase;
+	 scal_dev[sel]->ch1_horzphase.bits.phase = (ch12_h_phase + (in_size->x_off & ((1<<w_shift) - 1)) * (0x10000>>w_shift)) & SCALINITPASELMT;
+
+     //outinterlace,
+     if(out_scan->field == 0x1)  //outinterlace enable
+     {
+         in_h0 = in_size->scal_height;
+         in_h1 = (in_type->fmt == DE_SCAL_INYUV420) ? (in_h0+0x1)>>1: in_h0;
+         out_h0 = out_size->height;
+         out_h1 = (out_type->fmt == DE_SCAL_OUTPYUV420) ? (out_h0+0x1)>>1 : out_h0;
+
+		 //added no-zero limited
+		in_h0 = (in_h0!=0) ? in_h0 : 1;
+		in_h1 = (in_h1!=0) ? in_h1 : 1;
+		out_h0 = (out_h0!=0) ? out_h0 : 1;
+		out_h1 = (out_h1!=0) ? out_h1 : 1;
+
+         if(in_scan->bottom == 0x0)
+         {
+	         scal_dev[sel]->ch0_vertphase0.bits.phase = ch0_v_phase0;
+             scal_dev[sel]->ch0_vertphase1.bits.phase = ch0_v_phase0 + ((in_h0>>in_scan->field)<<16)/(out_h0);
+             scal_dev[sel]->ch1_vertphase0.bits.phase = ch12_v_phase0;
+             scal_dev[sel]->ch1_vertphase1.bits.phase = ch12_v_phase0 + ((in_h1>>in_scan->field)<<16)/(out_h1);
+         }
+         else
+         {
+             scal_dev[sel]->ch0_vertphase0.bits.phase = ch0_v_phase1;
+             scal_dev[sel]->ch0_vertphase1.bits.phase = ch0_v_phase1 + ((in_h0>>in_scan->field)<<16)/(out_h0);
+             scal_dev[sel]->ch1_vertphase0.bits.phase = ch12_v_phase1;
+             scal_dev[sel]->ch1_vertphase1.bits.phase = ch12_v_phase1 + ((in_h1>>in_scan->field)<<16)/(out_h1);
+         }
+     }
+     else  //outinterlace disable
+     {
+         scal_dev[sel]->ch0_vertphase0.bits.phase = ch0_v_phase0;
+         scal_dev[sel]->ch0_vertphase1.bits.phase = ch0_v_phase1;
+         scal_dev[sel]->ch1_vertphase0.bits.phase = ch12_v_phase0;
+         scal_dev[sel]->ch1_vertphase1.bits.phase = ch12_v_phase1;
+
+     }
+
+	 return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Scaling_Factor(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+//                                               __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+//                                               __scal_out_size_t *out_size, __scal_out_type_t *out_type)
+// description      : set scaler scaling factor, modify algorithm and tape offset
+// parameters       :
+//                 sel <scaler select>
+//                 in_scan <scale src data scan mode, if deinterlaceing open, the scan mode is progressive for scale>
+//                 in_size <scale region define,  src size, offset, scal size>
+//                 in_type <src data type>
+//                 out_scan <scale output data scan mode>
+//                 out_size <scale out size, when output interlace, the height is 2xoutheight ,for example 480i, the value is 480>
+//                 out_type <output data format>
+// return           :
+//               success
+//history           :  2011/03/31  modify channel 1/2 scaling factor
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Scaling_Factor(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+                                 __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+                                 __scal_out_size_t *out_size, __scal_out_type_t *out_type)
+{
+    __s32 in_w0, in_h0, out_w0, out_h0;
+    __s32 ch0_hstep, ch0_vstep ;
+	__u32 w_shift, h_shift;
+
+    in_w0 = in_size->scal_width;
+    in_h0 = in_size->scal_height;
+
+    out_w0 = out_size->width;
+    out_h0 = out_size->height + (out_scan->field & 0x1);	//modify by zchmin 110317
+
+	//sc0
+	if((in_type->mod == DE_SCAL_INTER_LEAVED) && (in_type->fmt == DE_SCAL_INYUV422))
+    {
+        in_w0 &=0xfffffffe;
+    }
+    //algorithm select
+    if(out_w0 > SCALLINEMAX)
+    {
+	    scal_dev[sel]->agth_sel.bits.linebuf_agth = 0x1;
+        if(in_w0>SCALLINEMAX)  //
+        {
+            in_w0 = SCALLINEMAX;
+        }
+    }
+    else
+    {
+        scal_dev[sel]->agth_sel.bits.linebuf_agth= 0x0;
+    }
+
+    w_shift = (in_type->fmt == DE_SCAL_INYUV411) ? 2 : ((in_type->fmt == DE_SCAL_INYUV420)||(in_type->fmt == DE_SCAL_INYUV422)) ? 1 : 0;
+	h_shift = ((in_type->fmt == DE_SCAL_INYUV420) || (in_type->fmt == DE_SCAL_INCSIRGB)) ? 1 : 0;
+
+
+    if((out_type->fmt == DE_SCAL_OUTPYUV420) || (out_type->fmt == DE_SCAL_OUTPYUV422))
+    {
+        w_shift -= 1 ;
+    }
+    else if(out_type->fmt == DE_SCAL_OUTPYUV411)
+    {
+        w_shift -= 2 ;
+    }
+    else
+    {
+        w_shift -= 0 ;;
+    }
+    if(out_type->fmt == DE_SCAL_OUTPYUV420)
+    {
+        h_shift -= 1;
+    }
+    else
+    {
+        h_shift -= 0;
+    }
+	//added no-zero limited
+    in_h0 = (in_h0!=0) ? in_h0 : 1;
+	in_w0 = (in_w0!=0) ? in_w0 : 1;
+	out_h0 = (out_h0!=0) ? out_h0 : 1;
+	out_w0 = (out_w0!=0) ? out_w0 : 1;
+
+    //step factor
+    ch0_hstep = (in_w0<<16)/out_w0;
+    ch0_vstep = ((in_h0>>in_scan->field)<<16)/( out_h0 );
+
+	scal_dev[sel]->ch0_horzfact.dwval = ch0_hstep;
+    scal_dev[sel]->ch0_vertfact.dwval = ch0_vstep<<(out_scan->field);
+    scal_dev[sel]->ch1_horzfact.dwval = ch0_hstep>>w_shift;
+    scal_dev[sel]->ch1_vertfact.dwval = (ch0_vstep>>h_shift)<<(out_scan->field);
+
+	return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Scaling_Coef(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+//                                             __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+//                                             __scal_out_size_t *out_size, __scal_out_type_t *out_type, __u8 smth_mode)
+// description      : set scaler scaling filter coefficients
+// parameters       :
+//                 sel <scaler select>
+//                 in_scan <scale src data scan mode, if deinterlaceing open, the scan mode is progressive for scale>
+//                 in_size <scale region define,  src size, offset, scal size>
+//                 in_type <src data type>
+//                 out_scan <scale output data scan mode>
+//                 out_size <scale out size>
+//                 out_type <output data format>
+//                 smth_mode <scaler filter effect select>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Scaling_Coef(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+                               __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+                               __scal_out_size_t *out_size, __scal_out_type_t *out_type, __u8 smth_mode)
+{
+    __s32 in_w0, in_h0, in_w1, in_h1, out_w0, out_h0, out_w1, out_h1;
+    __s32 ch0h_smth_level, ch0v_smth_level, ch1h_smth_level, ch1v_smth_level;
+    __u32 int_part, float_part;
+    __u32 zoom0_size, zoom1_size, zoom2_size, zoom3_size, zoom4_size, zoom5_size, al1_size;
+    __u32 ch0h_sc, ch0v_sc, ch1h_sc, ch1v_sc;
+    __u32 ch0v_fir_coef_addr, ch0h_fir_coef_addr, ch1v_fir_coef_addr, ch1h_fir_coef_addr;
+    __u32 ch0v_fir_coef_ofst, ch0h_fir_coef_ofst, ch1v_fir_coef_ofst, ch1h_fir_coef_ofst;
+    __s32 fir_ofst_tmp;
+    __u32 i;
+
+    in_w0 = in_size->scal_width;
+    in_h0 = in_size->scal_height;
+
+    out_w0 = out_size->width;
+    out_h0 = out_size->height;
+
+    zoom0_size = 1;
+    zoom1_size = 8;
+    zoom2_size = 4;
+    zoom3_size = 1;
+    zoom4_size = 1;
+    zoom5_size = 1;
+    al1_size = zoom0_size + zoom1_size + zoom2_size + zoom3_size + zoom4_size + zoom5_size;
+
+    if((in_type->mod == DE_SCAL_INTER_LEAVED) && (in_type->fmt == DE_SCAL_INYUV422))
+    {
+        in_w0 &=0xfffffffe;
+    }
+
+    //channel 1,2 size
+    if((in_type->fmt == DE_SCAL_INYUV420) || (in_type->fmt == DE_SCAL_INYUV422))
+    {
+        in_w1 = (in_w0 + 0x1)>>0x1;
+    }
+    else if(in_type->fmt == DE_SCAL_INYUV411)
+    {
+        in_w1 = (in_w0 + 0x3)>>0x2;
+    }
+    else
+    {
+        in_w1 = in_w0;
+    }
+    if((in_type->fmt == DE_SCAL_INYUV420) || (in_type->fmt == DE_SCAL_INCSIRGB))
+    {
+        in_h1 = (in_h0 + 0x1)>>0x1;
+    }
+    else
+    {
+        in_h1 = in_h0;
+    }
+    if((out_type->fmt == DE_SCAL_OUTPYUV420) || (out_type->fmt == DE_SCAL_OUTPYUV422))
+    {
+        out_w1 = (out_w0 + 0x1)>>0x1;
+    }
+    else if(out_type->fmt == DE_SCAL_OUTPYUV411)
+    {
+        out_w1 = (out_w0 + 0x3)>>0x2;
+    }
+    else
+    {
+        out_w1 = out_w0;
+    }
+    if(out_type->fmt == DE_SCAL_OUTPYUV420)
+    {
+        out_h1 = (out_h0+ 0x1)>>0x1;
+    }
+    else
+    {
+        out_h1 = out_h0;
+    }
+
+    //added no-zero limited
+    in_h0 = (in_h0!=0) ? in_h0 : 1;
+	in_h1 = (in_h1!=0) ? in_h1 : 1;
+	in_w0 = (in_w0!=0) ? in_w0 : 1;
+	in_w1 = (in_w1!=0) ? in_w1 : 1;
+	out_h0 = (out_h0!=0) ? out_h0 : 1;
+	out_h1 = (out_h1!=0) ? out_h1 : 1;
+	out_w0 = (out_w0!=0) ? out_w0 : 1;
+	out_w1 = (out_w1!=0) ? out_w1 : 1;
+
+    //smooth level for channel 0,1 in vertical and horizontal direction
+    ch0h_smth_level = (smth_mode&0x40)  ?  0 - (smth_mode&0x3f) : smth_mode&0x3f;
+    ch0v_smth_level = ch0h_smth_level;
+    if((smth_mode>>7) &0x01)
+    {
+      ch0v_smth_level = (smth_mode&0x4000) ? 0 - ((smth_mode&0x3f00)>>8) : ((smth_mode&0x3f00)>>8);
+    }
+    if((smth_mode>>31)&0x01)
+    {
+      ch1h_smth_level = (smth_mode&0x400000) ? 0 - ((smth_mode&0x3f0000)>>16) : ((smth_mode&0x3f0000)>>16);
+      ch1v_smth_level = ch1h_smth_level;
+      if((smth_mode >> 23)&0x1)
+      {
+        ch1v_smth_level = (smth_mode&0x40000000) ? 0 - ((smth_mode&0x3f000000)>>24) : ((smth_mode&0x3f000000)>>24);
+      }
+    }
+    //
+    ch0h_sc = (in_w0<<3)/out_w0;
+    ch0v_sc = (in_h0<<(3-in_scan->field))/(out_h0);
+    ch1h_sc = (in_w1<<3)/out_w1;
+    ch1v_sc = (in_h1<<(3-in_scan->field))/(out_h1);
+
+    //modify ch1 smooth level according to ratio to ch0
+    if(((smth_mode>>31)&0x01)==0x0)
+    {
+      if(!ch1h_sc)
+      {
+        ch1h_smth_level = 0;
+      }
+      else
+      {
+        ch1h_smth_level = ch0h_smth_level>>(ch0h_sc/ch1h_sc);
+      }
+
+      if(!ch1v_sc)
+      {
+        ch1v_smth_level = 0;
+      }
+      else
+      {
+        ch1v_smth_level = ch0v_smth_level>>(ch0v_sc/ch1v_sc);
+      }
+    }
+
+      //comput the fir coefficient offset in coefficient table
+      int_part = ch0v_sc>>3;
+      float_part = ch0v_sc & 0x7;
+      ch0v_fir_coef_ofst = (int_part==0)  ? zoom0_size :
+                           (int_part==1)  ? zoom0_size + float_part :
+                           (int_part==2)  ? zoom0_size + zoom1_size + (float_part>>1) :
+                           (int_part==3)  ? zoom0_size + zoom1_size + zoom2_size :
+                           (int_part==4)  ? zoom0_size + zoom1_size + zoom2_size +zoom3_size :
+                           zoom0_size + zoom1_size + zoom2_size + zoom3_size + zoom4_size;
+      int_part = ch0h_sc>>3;
+      float_part = ch0h_sc & 0x7;
+      ch0h_fir_coef_ofst = (int_part==0)  ? zoom0_size :
+                           (int_part==1)  ? zoom0_size + float_part :
+                           (int_part==2)  ? zoom0_size + zoom1_size + (float_part>>1) :
+                           (int_part==3)  ? zoom0_size + zoom1_size + zoom2_size :
+                           (int_part==4)  ? zoom0_size + zoom1_size + zoom2_size +zoom3_size :
+                           zoom0_size + zoom1_size + zoom2_size + zoom3_size + zoom4_size;
+      int_part = ch1v_sc>>3;
+      float_part = ch1v_sc & 0x7;
+      ch1v_fir_coef_ofst = (int_part==0)  ? zoom0_size :
+                           (int_part==1)  ? zoom0_size + float_part :
+                           (int_part==2)  ? zoom0_size + zoom1_size + (float_part>>1) :
+                           (int_part==3)  ? zoom0_size + zoom1_size + zoom2_size :
+                           (int_part==4)  ? zoom0_size + zoom1_size + zoom2_size +zoom3_size :
+                           zoom0_size + zoom1_size + zoom2_size + zoom3_size + zoom4_size;
+      int_part = ch1h_sc>>3;
+      float_part = ch1h_sc & 0x7;
+      ch1h_fir_coef_ofst =  (int_part==0)  ? zoom0_size :
+                            (int_part==1)  ? zoom0_size + float_part :
+                            (int_part==2)  ? zoom0_size + zoom1_size + (float_part>>1) :
+                            (int_part==3)  ? zoom0_size + zoom1_size + zoom2_size :
+                            (int_part==4)  ? zoom0_size + zoom1_size + zoom2_size +zoom3_size :
+                            zoom0_size + zoom1_size + zoom2_size + zoom3_size + zoom4_size;
+    //added smooth level for each channel in horizontal and vertical direction
+    fir_ofst_tmp = ch0v_fir_coef_ofst + ch0v_smth_level;
+    ch0v_fir_coef_ofst = (fir_ofst_tmp<0) ? 0 : fir_ofst_tmp;
+    fir_ofst_tmp = ch0h_fir_coef_ofst + ch0h_smth_level;
+    ch0h_fir_coef_ofst = (fir_ofst_tmp<0) ? 0 : fir_ofst_tmp;
+    fir_ofst_tmp = ch1v_fir_coef_ofst + ch1v_smth_level;
+    ch1v_fir_coef_ofst = (fir_ofst_tmp<0) ? 0 : fir_ofst_tmp;
+    fir_ofst_tmp = ch1h_fir_coef_ofst + ch1h_smth_level;
+    ch1h_fir_coef_ofst = (fir_ofst_tmp<0) ? 0 : fir_ofst_tmp;
+    //modify coefficient offset
+    ch0v_fir_coef_ofst = (ch0v_fir_coef_ofst > (al1_size - 1)) ? (al1_size - 1) : ch0v_fir_coef_ofst;
+    ch1v_fir_coef_ofst = (ch1v_fir_coef_ofst > (al1_size - 1)) ? (al1_size - 1) : ch1v_fir_coef_ofst;
+    ch0h_fir_coef_ofst = (ch0h_fir_coef_ofst > (al1_size - 1)) ? (al1_size - 1) : ch0h_fir_coef_ofst;
+    ch1h_fir_coef_ofst = (ch1h_fir_coef_ofst > (al1_size - 1)) ? (al1_size - 1) : ch1h_fir_coef_ofst;
+
+    //compute the fir coeficient address for each channel in horizontal and vertical direction
+    ch0v_fir_coef_addr = (ch0v_fir_coef_ofst<<7);
+    ch0h_fir_coef_addr = ((al1_size)<<7) + (ch0h_fir_coef_ofst<<8);
+    ch1v_fir_coef_addr = (ch1v_fir_coef_ofst<<7);
+    ch1h_fir_coef_addr = ((al1_size)<<7) + (ch1h_fir_coef_ofst<<8);
+
+    for(i=0; i<32; i++)
+    {
+	    scal_dev[sel]->ch0_horzcoef0[i].dwval = fir_tab[(ch0h_fir_coef_addr>>2) + 2*i];
+		scal_dev[sel]->ch0_horzcoef1[i].dwval = fir_tab[(ch0h_fir_coef_addr>>2) + 2*i + 1];
+        scal_dev[sel]->ch0_vertcoef[i].dwval  = fir_tab[(ch0v_fir_coef_addr>>2) + i];
+		scal_dev[sel]->ch1_horzcoef0[i].dwval = fir_tab[(ch1h_fir_coef_addr>>2) + 2*i];
+		scal_dev[sel]->ch1_horzcoef1[i].dwval = fir_tab[(ch1h_fir_coef_addr>>2) + 2*i + 1];
+        scal_dev[sel]->ch1_vertcoef[i].dwval  = fir_tab[(ch1v_fir_coef_addr>>2) + i];
+    }
+
+    scal_dev[sel]->frm_ctrl.bits.coef_rdy_en = 0x1;
+
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_CSC_Coef(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs, __u32  in_br_swap, __u32 out_br_swap)
+// description      : set scaler input/output color space convert coefficients
+// parameters       :
+//                 sel <scaler select>
+//                 in_csc_mode <color space select, bt601, bt709, ycc, xycc>
+//                 out_csc_mode <color space select, bt601, bt709, ycc, xycc>
+//                 incs <source color space>
+//                 |    0  rgb
+//                 |    1  yuv
+//                 outcs <destination color space>
+//                 |    0  rgb
+//                 |    1  yuv
+//                 in_br_swap <swap b r component>
+//                 |    0  normal
+//                 |    1  swap enable, note: when input yuv, then u v swap
+//                 out_br_swap <swap output b r component>
+//                 |    0  normal
+//                 |    1  swap enable, note: when output yuv, then u v swap
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_CSC_Coef(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs, __u32  in_br_swap, __u32 out_br_swap)
+{
+    __u8  csc_pass;
+    __u32 csc_coef_addr;
+    __u32 i;
+
+    //compute csc bypass enable
+    if(incs == 0x0)  //rgb
+    {
+        if(outcs == 0x0) //rgb
+        {
+            csc_pass = 0x01;
+            csc_coef_addr = (((in_csc_mode&0x3)<<7) + ((in_csc_mode&0x3)<<6)) + 0x60;
+        }
+        else
+        {
+        	//out_br_swap = 0;
+            csc_pass = 0x0;
+            csc_coef_addr = (((in_csc_mode&0x3)<<7) + ((in_csc_mode&0x3)<<6)) + 0x60 + 0x30;
+        }
+    }
+    else
+    {
+    	//in_br_swap = 0;
+        if(outcs == 0x0)
+        {
+            csc_pass = 0x00;
+            csc_coef_addr = (((in_csc_mode&0x3)<<7) + ((in_csc_mode&0x3)<<6));
+        }
+        else
+        {
+            csc_pass = 0x01;
+            csc_coef_addr = (((in_csc_mode&0x3)<<7) + ((in_csc_mode&0x3)<<6)) + 0x30;
+        }
+    }
+
+    if(in_br_swap || out_br_swap)
+   	{
+   		csc_pass = 0;
+   	}
+   	if(!csc_pass)
+    {
+        for(i=0; i<4; i++)
+        {
+            scal_dev[sel]->csc_coef[i].dwval = csc_tab[(csc_coef_addr>>2) + i];
+			scal_dev[sel]->csc_coef[i+4 + out_br_swap * 4].dwval = csc_tab[(csc_coef_addr>>2) + i + 4 + in_br_swap * 4];
+			scal_dev[sel]->csc_coef[i+8 - out_br_swap * 4].dwval = csc_tab[(csc_coef_addr>>2) + i + 8 - in_br_swap * 4];
+
+        }
+    }
+    scal_dev[sel]->bypass.bits.csc_bypass_en = csc_pass;
+
+
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Out_Format(__u8 sel, __scal_out_type_t *out_type)
+// description      : set scaler set output format
+// parameters       :
+//                 sel <scaler select>
+//                 out_type <output data format>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Out_Format(__u8 sel, __scal_out_type_t *out_type)
+{
+	scal_dev[sel]->output_fmt.bits.byte_seq = out_type->byte_seq;
+    scal_dev[sel]->output_fmt.bits.data_fmt = out_type->fmt;
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Out_Size(__u8 sel, __scal_scan_mod_t *out_scan, __scal_out_type_t *out_type,
+//                                         __scal_out_size_t *out_size)
+// description      : set scaler set output size
+// parameters       :
+//                 sel <scaler select>
+//                 out_scan <output data scan mode>
+//                 out_type <output data format>
+//                 out_size <scale out size>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Out_Size(__u8 sel, __scal_scan_mod_t *out_scan, __scal_out_type_t *out_type,
+                           __scal_out_size_t *out_size)
+{
+    __u32 out_w1, out_h1, out_w0, out_h0;
+	//sc0
+    if((out_type->fmt == DE_SCAL_OUTPYUV420) || (out_type->fmt == DE_SCAL_OUTPYUV422))
+    {
+        out_w1 = (out_size->width+ 0x1) >> 1;
+    }
+    else if(out_type->fmt == DE_SCAL_OUTPYUV411)
+    {
+        out_w1 = (out_size->width+ 0x3) >> 2;
+    }
+    else
+    {
+        out_w1 = out_size->width;
+    }
+
+    if(out_type->fmt == DE_SCAL_OUTPYUV420)
+    {
+        out_h1 = (out_size->height + 0x1) >> 1;
+    }
+    else
+    {
+        out_h1 = out_size->height;
+    }
+	out_h0 = out_size->height;
+	out_w0 = out_size->width;
+	//added no-zero limited
+    out_h0 = (out_h0!=0) ? out_h0 : 1;
+	out_h1 = (out_h1!=0) ? out_h1 : 1;
+	out_w0 = (out_w0!=0) ? out_w0 : 1;
+	out_w1 = (out_w1!=0) ? out_w1 : 1;
+
+	scal_dev[sel]->ch0_outsize.bits.out_height = ((out_h0 + (out_scan->field & 0x1))>>out_scan->field) - 1;
+    scal_dev[sel]->ch0_outsize.bits.out_width = out_w0 - 1;
+    scal_dev[sel]->ch1_outsize.bits.out_height = ((out_h1 + (out_scan->field & 0x1)) >>out_scan->field) - 1;
+    scal_dev[sel]->ch1_outsize.bits.out_width = out_w1 - 1;
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Trig_Line(__u8 sel, __u32 line)
+// description      : set scaler output trigger line
+// parameters       :
+//                 sel <scaler select>, //un support
+//                 line <line number, only valid for scaler output to display>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Trig_Line(__u8 sel, __u32 line)
+{
+	scal_dev[sel]->lint_ctrl.bits.field_sel = 0x0;
+    scal_dev[sel]->lint_ctrl.bits.trig_line = line;
+    return 0;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Int_En(__u8 sel, __u32 int_num)
+// description      : set scaler interrupt enable bit
+// parameters       :
+//                 sel <scaler select>, //un support
+//                 int_num <7, 9, 10>
+//                 |    7   write back interrupt
+//                 |    9   line interrupt
+//                 |    10  register ready load interrupt
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Int_En(__u8 sel, __u32 int_num)
+{
+    if(int_num == 7)
+    {
+        scal_dev[sel]->int_en.bits.wb_en = 0x1;
+    }
+    else if(int_num == 9)
+    {
+        scal_dev[sel]->int_en.bits.line_en = 0x1;
+    }
+    else if(int_num == 10)
+    {
+        scal_dev[sel]->int_en.bits.reg_load_en = 0x1;
+    }
+
+    return 0;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Di_Ctrl(__u8 sel, __u8 en, __u8 mode, __u8 diagintp_en, __u8 tempdiff_en)
+// description      : set scaler deinterlace control parameter
+// parameters       :
+//                 sel <scaler select>,
+//                 en <0,1>
+//                 |    0  deinterlace disable
+//                 |    1  deinterlace enable
+//                 mode <0,1,2,3>
+//                 |    0   weave
+//                 |    1   bob
+//                 |    2   maf
+//                 |    3   maf-bob
+//                 diagintp_en <0, 1>
+//                 tempdiff_en <0,1>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Di_Ctrl(__u8 sel, __u8 en, __u8 mode, __u8 diagintp_en, __u8 tempdiff_en)
+{
+	scal_dev[sel]->di_ctrl.bits.en = en;
+    scal_dev[sel]->di_ctrl.bits.mod = mode;
+    scal_dev[sel]->di_ctrl.bits.diagintp_en = diagintp_en;
+    scal_dev[sel]->di_ctrl.bits.tempdiff_en = tempdiff_en;
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_Di_PreFrame_Addr(__u8 sel, __u32 addr)
+// description      : set scaler deinterlace pre frame luma address
+// parameters       :
+//                 sel <scaler select>,
+//                 addr <pre frame address>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Di_PreFrame_Addr(__u8 sel, __u32 addr)
+{
+    scal_dev[sel]->di_preluma.dwval = addr;
+    return 0;
+}
+
+//*********************************************************************************************
+// function         :  DE_SCAL_Set_Di_MafFlag_Src(__u8 sel, __u32 addr, __u32 stride)
+// description      : set scaler deinterlace maf flag address and linestride
+// parameters       :
+//                 sel <scaler select>,
+//                 addr <maf flag address>
+//		 stride <maf line stride>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_Di_MafFlag_Src(__u8 sel, __u32 addr, __u32 stride)
+{
+    scal_dev[sel]->di_blkflag.dwval = addr;
+    scal_dev[sel]->di_flaglinestrd.dwval = stride;
+    return 0;
+}
+
+
+//**********************************************************************************
+// function         : DE_SCAL_Start(__u8 sel)
+// description      : scaler module  start set
+// parameters       :
+//                 sel <scaler select>
+// return           : success
+//***********************************************************************************
+__s32 DE_SCAL_Start(__u8 sel)
+{
+	scal_dev[sel]->frm_ctrl.bits.frm_start = 0x1;
+
+    return 0;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Set_Filtercoef_Ready(__u8 sel)
+// description      : scaler filter coefficient set ready
+// parameters       :
+//                 sel <scaler select>
+// return           : success
+//***********************************************************************************
+__s32 DE_SCAL_Set_Filtercoef_Ready(__u8 sel)
+{
+    scal_dev[sel]->frm_ctrl.bits.coef_rdy_en = 0x1;
+
+    return 0;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Set_Reg_Rdy(__u8 sel)
+// description      : scaler configure registers set ready
+// parameters       :
+//                 sel <scaler select>
+// return           : success
+//***********************************************************************************
+__s32 DE_SCAL_Set_Reg_Rdy(__u8 sel)
+{
+    scal_dev[sel]->frm_ctrl.bits.reg_rdy_en = 0x1;
+
+    return 0;
+}
+
+
+//**********************************************************************************
+// function         : DE_SCAL_Reset(__u8 sel)
+// description      : scaler module reset(reset module status machine)
+// parameters       :
+//                 sel <scaler select>
+// return            : success
+//***********************************************************************************
+__s32 DE_SCAL_Reset(__u8 sel)
+{
+    scal_dev[sel]->frm_ctrl.bits.frm_start = 0x0;
+
+    //clear wb err
+    scal_dev[sel]->status.bits.wb_err_status = 0x0;
+    scal_dev[sel]->status.bits.wb_err_losedata = 0x0;
+    scal_dev[sel]->status.bits.wb_err_sync = 0x0;
+
+    return 0;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Input_Port_Select(__u8 sel, __u8 port)
+// description      : scaler input source select
+// parameters       :
+//                 sel <scaler select>
+//                 port <scaler input port>
+//                 |    0   dram
+//                 |    4   interface of image0 to lcd
+//                 |    5   interface of image1 to lcd
+//                 |    6   image0
+//                 |    7   image1
+// return            : success
+//***********************************************************************************
+__s32 DE_SCAL_Input_Select(__u8 sel, __u32 source)
+{
+    scal_dev[sel]->frm_ctrl.bits.in_ctrl = source;
+    return 0;
+}
+
+
+//**********************************************************************************
+// function         : DE_SCAL_Output_Select(__u8 sel)
+// description      : scaler output select
+// parameters       :
+//                 sel <scaler select>
+//                 out<0:be0; 1:be1; 2:me; 3:writeback>
+// return            : success
+//***********************************************************************************
+__s32 DE_SCAL_Output_Select(__u8 sel, __u8 out)
+{
+    if(out == 3)//write back
+    {
+        scal_dev[sel]->frm_ctrl.bits.out_ctrl = 1;//disable scaler output to be/me
+        scal_dev[sel]->frm_ctrl.bits.out_port_sel = 0;
+    }
+    else if(out < 3)
+    {
+        scal_dev[sel]->frm_ctrl.bits.out_ctrl = 0;//enable scaler output to be/me
+        scal_dev[sel]->frm_ctrl.bits.out_port_sel = out;
+    }
+
+    return 0;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Writeback_Enable(__u8 sel)
+// description      : scaler write back enable
+// parameters       :
+//                 sel <scaler select>
+// return            : success
+//***********************************************************************************
+__s32 DE_SCAL_Writeback_Enable(__u8 sel)
+{
+    scal_dev[sel]->frm_ctrl.bits.wb_en = 0x1;
+
+    return 0;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Writeback_Disable(__u8 sel)
+// description      : scaler write back enable
+// parameters       :
+//                sel <0,1>
+//                |    0  scaler0
+//                |    1  scaler1
+// return            : success
+//***********************************************************************************
+__s32 DE_SCAL_Writeback_Disable(__u8 sel)
+{
+	scal_dev[sel]->frm_ctrl.bits.wb_en = 0x0;
+
+	return 0;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Enable(__u8 sel)
+// description      : scaler module enable
+// parameters       :
+//                 sel <scaler select>
+// return           : success
+//***********************************************************************************
+__s32 DE_SCAL_Enable(__u8 sel)
+{
+	de_scal_trd_fp_en = 0;
+	de_scal_trd_itl_en = 0;
+    scal_dev[sel]->modl_en.bits.en = 0x1;
+    //scal_dev[sel]->field_ctrl.sync_edge= 0x1;
+
+    return 0;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Disable(__u8 sel)
+// description      : scaler module disable
+// parameters       :
+//                 sel <scaler select>
+// return           : success
+//***********************************************************************************
+__s32 DE_SCAL_Disable(__u8 sel)
+{
+    scal_dev[sel]->modl_en.bits.en = 0x0;
+
+    return 0;
+}
+
+
+//**********************************************************************************
+// function         : DE_SCAL_Set_Writeback_Addr(__u8 sel, __scal_buf_addr_t *addr)
+// description      : scaler write back address set
+// parameters       :
+//                 sel <scaler select>
+//                 addr <address for wb>
+// return            : success
+//***********************************************************************************
+__s32 DE_SCAL_Set_Writeback_Addr(__u8 sel, __scal_buf_addr_t *addr)
+{
+    scal_dev[sel]->wb_addr0.dwval = addr->ch0_addr;
+    scal_dev[sel]->wb_addr1.dwval = addr->ch1_addr;
+    scal_dev[sel]->wb_addr2.dwval = addr->ch2_addr;
+
+
+    return 0;
+}
+
+
+//*********************************************************************************
+// function         : DE_SCAL_Get_Input_Format(__u8 sel)
+// description      : scaler input format get
+// parameters       :
+//                sel <scaler select>
+// return             :
+//                format<0,1,2,3,4,5>
+//                |    0  yuv444
+//                |    1  yuv422
+//                |    2  yuv420
+//                |    3  yuv411
+//                |    4  csirgb
+//                |    5  rgb888
+//*********************************************************************************
+__u8 DE_SCAL_Get_Input_Format(__u8 sel)
+{
+    __u8 fmt_ret;
+    fmt_ret = scal_dev[sel]->input_fmt.bits.data_fmt;
+
+    return fmt_ret;
+}
+
+//*********************************************************************************
+// function         : DE_SCAL_Get_Input_Mode(__u8 sel)
+// description      : scaler input mode get
+// parameters       :
+//                sel <scaler select>
+// return             :
+//                 mode<0,1,2,3,4>
+//                 |    0  non-macro block plannar data
+//                 |    1  interleaved data
+//                 |    2  non-macro block uv combined data
+//                 |    3  macro block plannar data
+//                 |    4  macro block uv combined data
+//*********************************************************************************
+__u8 DE_SCAL_Get_Input_Mode(__u8 sel)
+{
+    __u8 mode_ret;
+    mode_ret = scal_dev[sel]->input_fmt.bits.data_mod;
+
+    return mode_ret;
+}
+
+
+
+//**********************************************************************************
+// function         : DE_SCAL_Get_Output_Format(__u8 sel)
+// description      : display engine front-end output data format get
+// parameters       :
+//                sel <scaler select>
+//return              :
+//                format  <0, 1, 4, 5, 6, 7>
+//                |    0  plannar rgb output
+//                |    1  interleaved argb ouptut
+//                |    4  plannar yuv444
+//                |    5  plannar yuv420
+//                |    6  plannar yuv422
+//                |    7  plannar yuv411
+//***********************************************************************************
+__u8 DE_SCAL_Get_Output_Format(__u8 sel)
+{
+    __u8 fmt_ret;
+    fmt_ret = scal_dev[sel]->output_fmt.bits.data_fmt;
+
+    return fmt_ret;
+}
+
+
+//*********************************************************************************
+// function         : DE_SCAL_Get_Input_Width(__u8 sel)
+// description      : scaler input width get
+// parameters       :
+//                sel <scaler select>
+//return              :
+//                width  <8~8192>
+//*********************************************************************************
+__u16 DE_SCAL_Get_Input_Width(__u8 sel)
+{
+    __u16 in_w;
+    in_w = scal_dev[sel]->ch0_insize.bits.in_width + 0x1;
+
+    return in_w;
+}
+
+//*********************************************************************************
+// function         : DE_SCAL_Get_Input_Height(__u8 sel)
+// description      : scaler input height get
+// parameters       :
+//                sel <scaler select>
+//return               :
+//                 height  <8~8192>
+//*********************************************************************************
+__u16 DE_SCAL_Get_Input_Height(__u8 sel)
+{
+    __u16 in_h;
+    in_h = scal_dev[sel]->ch0_insize.bits.in_height + 0x1;
+
+    return in_h;
+}
+
+//*********************************************************************************
+// function         : DE_SCAL_Get_Output_Width(__u8 sel)
+// description      : scaler output width get
+// parameters       :
+//                sel <scaler select>
+//return              :
+//                width  <8~8192>
+//*********************************************************************************
+__u16 DE_SCAL_Get_Output_Width(__u8 sel)
+{
+  __u16 out_w;
+  out_w = scal_dev[sel]->ch0_outsize.bits.out_width + 0x1;
+
+  return out_w;
+}
+
+//*********************************************************************************
+// function         : DE_SCAL_Get_Output_Height(__u8 sel)
+// description      : scaler output height get
+// parameters       :
+//                sel <scaler select>
+//return              :
+//                height  <8~8192>
+//*********************************************************************************
+__u16 DE_SCAL_Get_Output_Height(__u8 sel)
+{
+    __u16 out_h;
+    out_h = scal_dev[sel]->ch0_outsize.bits.out_height + 0x1;
+
+    return out_h;
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Get_Start_Status(__u8 sel)
+// description      : scaler start status get
+// parameters       :
+//                sel <0,1>
+//                |    0  scaler0
+//                |    1  scaler1
+// return           :
+//                 0  scaler enable
+//                 -1 scaler disable
+//***********************************************************************************
+__s32 DE_SCAL_Get_Start_Status(__u8 sel)
+{
+     if(scal_dev[sel]->modl_en.bits.en  && scal_dev[sel]->frm_ctrl.bits.frm_start)
+     {
+         return 0;
+     }
+     else
+     {
+         return -1;
+     }
+}
+
+//**********************************************************************************
+// function         : DE_SCAL_Get_Field_Status(__u8 sel)
+// description      : lcd field status
+// parameters       :
+//                sel <0,1>
+//                |    0  scaler0
+//                |    1  scaler1
+// return           :
+//                 0  top field
+//                 1  bottom field
+//***********************************************************************************
+
+__s32 DE_SCAL_Get_Field_Status(__u8 sel)
+{
+	return scal_dev[sel]->status.bits.lcd_field;
+}
+
+
+//*********************************************************************************************
+// function         : iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_matrix4x4 *result)
+// description      : matrix multiple of 4x4, m1 * m2
+// parameters       :
+//                 in1/in2 <4x4 matrix>
+//                 result <>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_matrix4x4 *result)
+{
+	__scal_matrix4x4 tmp;
+
+	tmp.x00 = (in1.x00 * in2.x00 + in1.x01 * in2.x10 + in1.x02 * in2.x20 + in1.x03 * in2.x30) >> 10;
+	tmp.x01 = (in1.x00 * in2.x01 + in1.x01 * in2.x11 + in1.x02 * in2.x21 + in1.x03 * in2.x31) >> 10;
+	tmp.x02 = (in1.x00 * in2.x02 + in1.x01 * in2.x12 + in1.x02 * in2.x22 + in1.x03 * in2.x32) >> 10;
+	tmp.x03 = (in1.x00 * in2.x03 + in1.x01 * in2.x13 + in1.x02 * in2.x23 + in1.x03 * in2.x33) >> 10;
+	tmp.x10 = (in1.x10 * in2.x00 + in1.x11 * in2.x10 + in1.x12 * in2.x20 + in1.x13 * in2.x30) >> 10;
+	tmp.x11 = (in1.x10 * in2.x01 + in1.x11 * in2.x11 + in1.x12 * in2.x21 + in1.x13 * in2.x31) >> 10;
+	tmp.x12 = (in1.x10 * in2.x02 + in1.x11 * in2.x12 + in1.x12 * in2.x22 + in1.x13 * in2.x32) >> 10;
+	tmp.x13 = (in1.x10 * in2.x03 + in1.x11 * in2.x13 + in1.x12 * in2.x23 + in1.x13 * in2.x33) >> 10;
+	tmp.x20 = (in1.x20 * in2.x00 + in1.x21 * in2.x10 + in1.x22 * in2.x20 + in1.x23 * in2.x30) >> 10;
+	tmp.x21 = (in1.x20 * in2.x01 + in1.x21 * in2.x11 + in1.x22 * in2.x21 + in1.x23 * in2.x31) >> 10;
+	tmp.x22 = (in1.x20 * in2.x02 + in1.x21 * in2.x12 + in1.x22 * in2.x22 + in1.x23 * in2.x32) >> 10;
+	tmp.x23 = (in1.x20 * in2.x03 + in1.x21 * in2.x13 + in1.x22 * in2.x23 + in1.x23 * in2.x33) >> 10;
+	tmp.x30 = (in1.x30 * in2.x00 + in1.x31 * in2.x10 + in1.x32 * in2.x20 + in1.x33 * in2.x30) >> 10;
+	tmp.x31 = (in1.x30 * in2.x01 + in1.x31 * in2.x11 + in1.x32 * in2.x21 + in1.x33 * in2.x31) >> 10;
+	tmp.x32 = (in1.x30 * in2.x02 + in1.x31 * in2.x12 + in1.x32 * in2.x22 + in1.x33 * in2.x32) >> 10;
+	tmp.x33 = (in1.x30 * in2.x03 + in1.x31 * in2.x13 + in1.x32 * in2.x23 + in1.x33 * in2.x33) >> 10;
+
+
+	*result = tmp;
+
+	return 0;
+}
+
+
+//*********************************************************************************************
+// function         : iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
+// description      : csc coefficient and constant limited
+// parameters       :
+//                value<coefficient or constant>
+//                min/max <limited range>
+// return           :
+//               success
+//***********************************************************************************************
+__s32 iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit)
+{
+    __s32 tmp;
+    tmp = (*value)>>shift;
+   if(tmp < min)
+    *value = min & validbit;
+   else if(tmp > max)
+     *value = max & validbit;
+   else
+     *value = tmp & validbit;
+
+   return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs,
+//                                                   __s32  bright, __s32 contrast, __s32 saturaion, __s32 hue,
+//                                                   __u32  in_br_swap, __u32 out_br_swap)
+// description      : set scaler input/output color space convert coefficients
+// parameters       :
+//                 sel <scaler select>
+//                 in_csc_mode <color space select, bt601, bt709, ycc, xycc>
+//                 out_csc_mode <color space select, bt601, bt709, ycc, xycc>
+//                 incs <source color space>
+//                 |    0  rgb
+//                 |    1  yuv
+//                 outcs <destination color space>
+//                 |    0  rgb
+//                 |    1  yuv
+//                 brightness<0  ~ 63>  default 32
+//                 contrast <0 ~ 63> (0.0 ~ 2.0)*32, default 32
+//                 saturation<0~ 63> (0.0 ~ 2.0)*32, default 32
+//                 hue <0 ~ 63>  default 32
+//                 in_br_swap <swap b r component>
+//                 |    0  normal
+//                 |    1  swap enable, note: when input yuv, then u v swap
+//                 out_br_swap <swap output b r component>
+//                 |    0  normal
+//                 |    1  swap enable, note: when output yuv, then u v swap
+// return           :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs,
+                                                   __s32  bright, __s32 contrast, __s32 saturaion, __s32 hue,
+                                                   __u32  in_br_swap, __u32 out_br_swap)
+{
+	__scal_matrix4x4 matrixEn;
+	__scal_matrix4x4 matrixconv, *ptmatrix;
+	__scal_matrix4x4 matrixresult;
+    __s32 *pt;
+	__u32 i;
+	__s32 sinv, cosv;   //sin_tab: 7 bit fractional
+
+	sinv = image_enhance_tab[8*12 + (hue&0x3f)];
+	cosv = image_enhance_tab[8*12 + 8*8 + (hue&0x3f)];
+
+	matrixEn.x00 = contrast << 5;
+	matrixEn.x01 = 0;
+	matrixEn.x02 = 0;
+	matrixEn.x03 = (((bright - 32) + 16) <<10) - ( contrast << 9);
+	matrixEn.x10 = 0;
+	matrixEn.x11 = (contrast * saturaion * cosv) >> 7;
+	matrixEn.x12 = (contrast * saturaion * sinv) >> 7;
+	matrixEn.x13 = (1<<17) - ((matrixEn.x11 + matrixEn.x12)<<7);
+	matrixEn.x20 = 0;
+	matrixEn.x21 = (-contrast * saturaion * sinv)>>7;
+	matrixEn.x22 = (contrast * saturaion * cosv) >> 7;
+	matrixEn.x23 = (1<<17) - ((matrixEn.x22 + matrixEn.x21)<<7);
+	matrixEn.x30 = 0;
+	matrixEn.x31 = 0;
+	matrixEn.x32 = 0;
+	matrixEn.x33 = 1024;
+
+	if((incs == 0) && (outcs == 0))  //rgb to rgb
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7) + 0x40);
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7));
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixconv, &matrixconv);
+        matrixresult.x00 = matrixconv.x11;  matrixresult.x01 = matrixconv.x10;
+        matrixresult.x02 = matrixconv.x12;  matrixresult.x03 = matrixconv.x13;
+        matrixresult.x10 = matrixconv.x01;  matrixresult.x11 = matrixconv.x00;
+        matrixresult.x12 = matrixconv.x02;  matrixresult.x13 = matrixconv.x03;
+        matrixresult.x20 = matrixconv.x21;  matrixresult.x21 = matrixconv.x20;
+        matrixresult.x22 = matrixconv.x22;  matrixresult.x23 = matrixconv.x23;
+        matrixresult.x30 = matrixconv.x31;  matrixresult.x31 = matrixconv.x30;
+        matrixresult.x32 = matrixconv.x32;  matrixresult.x33 = matrixconv.x33;
+
+	}
+	else if((incs == 1) && (outcs == 0)) //yuv to rgb
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7) + 0x40);
+		iDE_SCAL_Matrix_Mul(*ptmatrix, matrixEn, &matrixconv);
+        matrixresult.x00 = matrixconv.x10;  matrixresult.x01 = matrixconv.x11;
+        matrixresult.x02 = matrixconv.x12;  matrixresult.x03 = matrixconv.x13;
+        matrixresult.x10 = matrixconv.x00;  matrixresult.x11 = matrixconv.x01;
+        matrixresult.x12 = matrixconv.x02;  matrixresult.x13 = matrixconv.x03;
+        matrixresult.x20 = matrixconv.x20;  matrixresult.x21 = matrixconv.x21;
+        matrixresult.x22 = matrixconv.x22;  matrixresult.x23 = matrixconv.x23;
+        matrixresult.x30 = matrixconv.x30;  matrixresult.x31 = matrixconv.x31;
+        matrixresult.x32 = matrixconv.x32;  matrixresult.x33 = matrixconv.x33;
+
+	}
+	else if((incs == 0) && (outcs == 1)) //rgb to yuv
+	{
+		ptmatrix = (__scal_matrix4x4 *)((__u32)image_enhance_tab + (in_csc_mode<<7));
+		iDE_SCAL_Matrix_Mul(matrixEn, *ptmatrix, &matrixconv);
+        matrixresult.x00 = matrixconv.x01;  matrixresult.x01 = matrixconv.x00;
+        matrixresult.x02 = matrixconv.x02;  matrixresult.x03 = matrixconv.x03;
+        matrixresult.x10 = matrixconv.x11;  matrixresult.x11 = matrixconv.x10;
+        matrixresult.x12 = matrixconv.x12;  matrixresult.x13 = matrixconv.x13;
+        matrixresult.x20 = matrixconv.x21;  matrixresult.x21 = matrixconv.x20;
+        matrixresult.x22 = matrixconv.x22;  matrixresult.x23 = matrixconv.x23;
+        matrixresult.x30 = matrixconv.x31;  matrixresult.x31 = matrixconv.x30;
+        matrixresult.x32 = matrixconv.x32;  matrixresult.x33 = matrixconv.x33;
+	}
+	else  //yuv to yuv
+	{
+		matrixresult = matrixEn;
+	}
+
+    //data bit convert, 1 bit  sign, 2 bit integer, 10 bits fractrional for coefficient; 1 bit sign,9 bit integer, 4 bit fractional for constant
+    //range limited
+    iDE_SCAL_Csc_Lmt(&matrixresult.x00, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x01, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x02, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x03, -8191, 8191, 6, 16383);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x10, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x11, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x12, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x13, -8191, 8191, 6, 16383);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x20, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x21, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x22, -4095, 4095, 0, 8191);
+    iDE_SCAL_Csc_Lmt(&matrixresult.x23, -8191, 8191, 6, 16383);
+
+    //write csc register
+    pt = &(matrixresult.x00);
+    for(i=0; i<4; i++)
+    {
+        scal_dev[sel]->csc_coef[i].dwval = *(pt + i);
+		scal_dev[sel]->csc_coef[i+4 + out_br_swap * 4].dwval =  *(pt + i + 4 + in_br_swap * 4);
+		scal_dev[sel]->csc_coef[i+8 - out_br_swap * 4].dwval =  *(pt + i + 8 - in_br_swap * 4);
+	}
+
+    scal_dev[sel]->bypass.bits.csc_bypass_en = 0;
+
+	return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Get_3D_In_Single_Size( __scal_3d_inmode_t inmode, __scal_src_size_t *fullsize,__scal_src_size_t *singlesize)
+// description     : get single image size according to 3D inmode and full size
+// parameters    :
+//                 sel <scaler select>
+//                 inmode <3D input mode>
+//                 fullsize <3D source size, maybe double width of left image or double heigth of left height>
+//                 singlesize <3D left image size>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Get_3D_In_Single_Size(__scal_3d_inmode_t inmode, __scal_src_size_t *fullsize,__scal_src_size_t *singlesize)
+{
+	switch(inmode)
+	{
+		case DE_SCAL_3DIN_TB:
+			singlesize->src_width = fullsize->src_width;
+			singlesize->src_height = fullsize->src_height>>1;
+			singlesize->scal_width = fullsize->scal_width;
+			singlesize->scal_height = fullsize->scal_height>>1;
+			singlesize->x_off = fullsize->x_off;
+			singlesize->y_off = fullsize->y_off;
+			break;
+		case DE_SCAL_3DIN_SSF:
+		case DE_SCAL_3DIN_SSH:
+			singlesize->src_width = fullsize->src_width>>1;
+			singlesize->src_height = fullsize->src_height;
+			singlesize->scal_width = fullsize->scal_width>>1;
+			singlesize->scal_height = fullsize->scal_height;
+			singlesize->x_off = fullsize->x_off;
+			singlesize->y_off = fullsize->y_off;
+			break;
+		case DE_SCAL_3DIN_LI:
+			singlesize->src_width = fullsize->src_width;
+			singlesize->src_height = fullsize->src_height>>1;
+			singlesize->scal_width = fullsize->scal_width;
+			singlesize->scal_height = fullsize->scal_height>>1;
+			singlesize->x_off = fullsize->x_off;
+			singlesize->y_off = fullsize->y_off>>1;
+			break;
+		case DE_SCAL_3DIN_FP:
+			singlesize->src_width = fullsize->src_width;
+			singlesize->src_height = fullsize->src_height;
+			singlesize->scal_width = fullsize->scal_width;
+			singlesize->scal_height = fullsize->scal_height;
+			singlesize->x_off = fullsize->x_off;
+			singlesize->y_off = fullsize->y_off;
+			break;
+		default:
+			//undefine input mode
+			break;
+	}
+
+	return 0;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Get_3D_Out_Single_Size( __scal_3d_outmode_t outmode, __scal_out_size_t *singlesize,__scal_out_size_t *fullsize)
+// description     : get 3D output single size according to 3D outmode and full image size
+// parameters    :
+//                 sel <scaler select>
+//                 inmode <3D output mode>
+//                 fullsize <3D source size, maybe double width of left image or double heigth of left height>
+//                 singlesize <3D left image size>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Get_3D_Out_Single_Size(__scal_3d_outmode_t outmode, __scal_out_size_t *singlesize,__scal_out_size_t *fullsize)
+{
+	switch(outmode)
+	{
+		case DE_SCAL_3DOUT_CI_1:
+		case DE_SCAL_3DOUT_CI_2:
+		case DE_SCAL_3DOUT_CI_3:
+		case DE_SCAL_3DOUT_CI_4:
+		case DE_SCAL_3DOUT_HDMI_SSF:
+		case DE_SCAL_3DOUT_HDMI_SSH:
+			singlesize->height = fullsize->height;
+			singlesize->width  = fullsize->width>>1;
+			break;
+		case DE_SCAL_3DOUT_LIRGB:
+		case DE_SCAL_3DOUT_HDMI_TB:
+		case DE_SCAL_3DOUT_HDMI_FPP:
+		case DE_SCAL_3DOUT_HDMI_FPI:
+		case DE_SCAL_3DOUT_HDMI_LI:
+			singlesize->height = fullsize->height>>1;
+			singlesize->width  = fullsize->width;
+			break;
+		case DE_SCAL_3DOUT_HDMI_FA:  //
+			singlesize->height = fullsize->height;
+			singlesize->width  = fullsize->width;
+		default:
+			//undefined mode
+			break;
+
+	}
+	return 0;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Get_3D_Out_Full_Size(__scal_3d_outmode_t outmode, __scal_out_size_t *singlesize,__scal_out_size_t *fullsize)
+// description     : get 3D output full size according to 3D outmode and left/right image size
+// parameters    :
+//                 sel <scaler select>
+//                 inmode <3D output mode>
+//                 fullsize <3D source size, maybe double width of left image or double heigth of left height>
+//                 singlesize <3D left image size>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Get_3D_Out_Full_Size(__scal_3d_outmode_t outmode, __scal_out_size_t *singlesize,__scal_out_size_t *fullsize)
+{
+	switch(outmode)
+	{
+		case DE_SCAL_3DOUT_CI_1:
+		case DE_SCAL_3DOUT_CI_2:
+		case DE_SCAL_3DOUT_CI_3:
+		case DE_SCAL_3DOUT_CI_4:
+		case DE_SCAL_3DOUT_HDMI_SSF:
+		case DE_SCAL_3DOUT_HDMI_SSH:
+			fullsize->height = singlesize->height;
+			fullsize->width  = singlesize->width<<1;
+			break;
+		case DE_SCAL_3DOUT_LIRGB:
+		case DE_SCAL_3DOUT_HDMI_TB:
+		case DE_SCAL_3DOUT_HDMI_FPP:
+		case DE_SCAL_3DOUT_HDMI_FPI:
+		case DE_SCAL_3DOUT_HDMI_LI:
+			fullsize->height = singlesize->height<<1;
+			fullsize->width  = singlesize->width;
+			break;
+		case DE_SCAL_3DOUT_HDMI_FA:  //
+			fullsize->height = singlesize->height;
+			fullsize->width  = singlesize->width;
+		default:
+			//undefined mode
+			break;
+
+	}
+	return 0;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_3D_Fb_Addr(__u8 sel, __scal_buf_addr_t *addr, __scal_buf_addr_t *addrtrd)
+// description     : scaler change frame buffer address, only change start address parameters
+// parameters    :
+//                 sel <scaler select>
+//                 addr  <frame buffer address for 3 channel, 32 bit absolute address>
+//                 addrtrd <3D source right image buffer address, only needed when 3dinmode is FP>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_3D_Fb_Addr(__u8 sel, __scal_buf_addr_t *addr, __scal_buf_addr_t *addrtrd)
+{
+    scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+    scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+    scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+	if(de_scal_trd_fp_en)
+	{
+		scal_dev[sel]->trd_buf_addr0.dwval = addrtrd->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addrtrd->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addrtrd->ch2_addr + de_scal_ch2r_offset;
+	}
+	else
+	{
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+
+    return 0;
+}
+
+
+//*********************************************************************************************
+// function         : DE_SCAL_Set_3D_Ctrl(__u8 sel, __u8 trden, __scal_3d_inmode_t inmode,
+//								__scal_3d_outmode_t outmode)
+// description     : scaler 3D control setting
+// parameters    :
+//                 sel <scaler select>
+//                 trden  <3D enable, when 3D mode close, left picture >
+//                 inmode <3D input mode>
+//                 outmode <3D output mode>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Set_3D_Ctrl(__u8 sel, __u8 trden, __scal_3d_inmode_t inmode,
+								__scal_3d_outmode_t outmode)
+{
+	__u8 in_li_en=0;
+	__u8 out_ci_en=0, out_tb_en=0, out_ss_en=0, out_itl_en=0;
+	__u8 model_sel=0;
+	__u8 ci_mod=0;
+
+	switch(inmode)
+	{
+		case DE_SCAL_3DIN_LI:;
+			in_li_en = 1;
+			break;
+		default:
+			in_li_en = 0;
+			break;
+	}
+
+    if(trden)
+    {
+    	switch(outmode)
+    	{
+    		case DE_SCAL_3DOUT_CI_1:;
+    			ci_mod = 0;out_ci_en = 1;break;
+    		case DE_SCAL_3DOUT_CI_2:
+    			ci_mod = 1;out_ci_en = 1;break;
+    		case DE_SCAL_3DOUT_CI_3:
+    			ci_mod = 2;out_ci_en = 1;break;
+    		case DE_SCAL_3DOUT_CI_4:
+    			ci_mod = 3;out_ci_en = 1;break;
+    		case DE_SCAL_3DOUT_HDMI_SSF:;
+    		case DE_SCAL_3DOUT_HDMI_SSH:
+    			out_ss_en = 1;
+    			break;
+    		case DE_SCAL_3DOUT_HDMI_TB:;
+    		case DE_SCAL_3DOUT_HDMI_FPP:
+    			out_tb_en = 1;
+    			break;
+    		case DE_SCAL_3DOUT_HDMI_FPI:
+    			out_tb_en = 1;
+    			out_itl_en = 1;
+    			break;
+    		case DE_SCAL_3DOUT_HDMI_FA:  //
+    			break;
+    		default:
+    			//undefined mode
+    			break;
+    	}
+	}
+	model_sel = trden? (out_tb_en ? 2 :1 ) : 0;
+
+	scal_dev[sel]->trd_ctrl.bits.mod_sel = model_sel;
+	scal_dev[sel]->trd_ctrl.bits.ci_out_en = out_ci_en;
+	scal_dev[sel]->trd_ctrl.bits.ss_out_en = out_ss_en;
+	scal_dev[sel]->trd_ctrl.bits.li_in_en = in_li_en;
+	scal_dev[sel]->trd_ctrl.bits.tb_out_scan_mod = out_itl_en;
+	scal_dev[sel]->trd_ctrl.bits.ci_out_mod = ci_mod;
+	scal_dev[sel]->trd_ctrl.bits.tb_out_mod_field = out_tb_en ? (out_itl_en ? 3 : 1) : 0;
+	scal_dev[sel]->field_ctrl.bits.valid_field_cnt = out_tb_en ? (out_itl_en ? 3 : 1) : 0;
+	scal_dev[sel]->field_ctrl.bits.field_cnt = out_tb_en ? (out_itl_en ? 0xC : 2) : 0;
+	de_scal_trd_itl_en = out_itl_en;
+	return 0;
+}
+
+//*********************************************************************************************
+// function         : DE_SCAL_Config_3D_Src(__u8 sel, __scal_buf_addr_t *addr, __scal_src_size_t *size,
+//                           __scal_src_type_t *type, __scal_3d_inmode_t trdinmode, __scal_buf_addr_t *addrtrd)
+// description     : scaler 3D source concerning parameter configure
+// parameters    :
+//                 sel <scaler select>
+//                 addr  <3D left image frame buffer address for 3 channel, 32 bit absolute address>
+//                 size <scale region define,  src size, offset, scal size>
+//                 type <src data type, include byte sequence, mode, format, pixel sequence>
+//                 trdinmode <3D input mode>
+//                 addrtrd <3D right image frame buffer address for 3 channel, this address must be set when 3d inmode
+//                              is FP_P/FP_M, for other mode, the right image buffer address can be get through left image address>
+// return            :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Config_3D_Src(__u8 sel, __scal_buf_addr_t *addr, __scal_src_size_t *size,
+                           __scal_src_type_t *type, __scal_3d_inmode_t trdinmode, __scal_buf_addr_t *addrtrd)
+{
+    __u8 w_shift, h_shift;
+	__u32 image_w0, image_w1, image_h0, image_h1;
+	__u32 x_off0, y_off0, x_off1, y_off1;
+	__u32 in_w0, in_h0, in_w1, in_h1;
+	__u8  de_scal_ch0_dx0,de_scal_ch0_dx1,de_scal_ch0_dy0;
+	__u8  de_scal_ch1_dx0,de_scal_ch1_dx1,de_scal_ch1_dy0;
+
+	image_w0 = size->src_width;
+	image_h0 = size->src_height;   //must be set in 3D mode, because of right address based on it !!!!
+	in_w0 = size->scal_width;
+	in_h0 = size->scal_height;
+	x_off0 = size->x_off;
+	y_off0 = size->y_off;
+
+	de_scal_trd_fp_en = 0;
+
+    if(type->fmt == DE_SCAL_INYUV422 || type->fmt == DE_SCAL_INYUV420)
+    {
+        w_shift = 1;
+        image_w0 = (image_w0 + 1)&0xfffffffe;
+    	image_w1 = (image_w0)>>w_shift;
+        in_w0 = in_w0 & 0xfffffffe;
+    	in_w1 = (in_w0 + 0x1)>>w_shift;
+        x_off0 = x_off0 & 0xfffffffe;
+    	x_off1 = (x_off0)>>w_shift;
+    }
+    else if(type->fmt == DE_SCAL_INYUV411)
+    {
+        w_shift = 2;
+    	image_w1 = (image_w0 + 0x3)>>w_shift;
+        in_w0 &= 0xfffffffc;
+    	in_w1 = (in_w0 + 0x3)>>w_shift;
+        x_off0 &= 0xfffffffc;
+    	x_off1 = (x_off0)>>w_shift;
+    }
+    else
+    {
+        w_shift = 0;
+    	image_w1 = image_w0;
+    	in_w1 = in_w0;
+    	x_off1 = x_off0;
+    }
+    if(type->fmt == DE_SCAL_INYUV420 || type->fmt == DE_SCAL_INCSIRGB)
+    {
+        h_shift = 1;
+		image_h0 &= 0xfffffffe;
+		image_h1 = ((image_h0 + 0x1) >> h_shift);
+        in_h0 &= 0xfffffffe;
+    	in_h1 = (in_h0 + 0x1)>>h_shift;
+        y_off0 &= 0xfffffffe;
+    	y_off1 = (y_off0)>>h_shift;
+    }
+    else
+    {
+        h_shift = 0;
+		image_h1 = image_h0;
+    	in_h1 = in_h0;
+    	y_off1 = y_off0;
+    }
+
+	//added no-zero limited
+    in_h0 = (in_h0!=0) ? in_h0 : 1;
+	in_h1 = (in_h1!=0) ? in_h1 : 1;
+	in_w0 = (in_w0!=0) ? in_w0 : 1;
+	in_w1 = (in_w1!=0) ? in_w1 : 1;
+
+	if((trdinmode == DE_SCAL_3DIN_TB) && (type->mod == DE_SCAL_PLANNAR))
+	{
+	    scal_dev[sel]->linestrd0.dwval = image_w0;
+		scal_dev[sel]->linestrd1.dwval = image_w1;
+		scal_dev[sel]->linestrd2.dwval = image_w1;
+
+        de_scal_ch0_offset = image_w0 * y_off0 + x_off0;
+        de_scal_ch1_offset = image_w1 * y_off1 + x_off1;
+        de_scal_ch2_offset = image_w1 * y_off1 + x_off1;
+
+		de_scal_ch0r_offset = image_w0 * image_h0 + de_scal_ch0_offset;
+		de_scal_ch1r_offset = image_w1 * image_h1 + de_scal_ch1_offset;
+		de_scal_ch2r_offset = image_w1 * image_h1 + de_scal_ch2_offset;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+
+	}
+	else if((trdinmode == DE_SCAL_3DIN_FP) && (type->mod == DE_SCAL_PLANNAR))
+	{
+	    scal_dev[sel]->linestrd0.dwval = image_w0;
+		scal_dev[sel]->linestrd1.dwval = image_w1;
+		scal_dev[sel]->linestrd2.dwval = image_w1;
+
+        de_scal_ch0_offset = image_w0 * y_off0 + x_off0;
+        de_scal_ch1_offset = image_w1 * y_off1 + x_off1;
+        de_scal_ch2_offset = image_w1 * y_off1 + x_off1;
+
+		de_scal_ch0r_offset = de_scal_ch0_offset;
+		de_scal_ch1r_offset = de_scal_ch1_offset;
+		de_scal_ch2r_offset = de_scal_ch2_offset;
+
+		de_scal_trd_fp_en = 1;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addrtrd->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addrtrd->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addrtrd->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if(((trdinmode == DE_SCAL_3DIN_SSF) || (trdinmode == DE_SCAL_3DIN_SSH)) && (type->mod == DE_SCAL_PLANNAR))
+	{
+	    scal_dev[sel]->linestrd0.dwval = image_w0<<1;
+		scal_dev[sel]->linestrd1.dwval = image_w1<<1;
+		scal_dev[sel]->linestrd2.dwval = image_w1<<1;
+
+        de_scal_ch0_offset = (image_w0<<1) * y_off0 + x_off0;
+        de_scal_ch1_offset = (image_w1<<1) * y_off1 + x_off1;
+        de_scal_ch2_offset = (image_w1<<1) * y_off1 + x_off1;
+
+		de_scal_ch0r_offset = image_w0 + de_scal_ch0_offset;
+		de_scal_ch1r_offset = image_w1 + de_scal_ch1_offset;
+		de_scal_ch2r_offset = image_w1 + de_scal_ch2_offset;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if((trdinmode == DE_SCAL_3DIN_LI) && (type->mod == DE_SCAL_PLANNAR))
+	{
+	    scal_dev[sel]->linestrd0.dwval = image_w0;
+		scal_dev[sel]->linestrd1.dwval = image_w1;
+		scal_dev[sel]->linestrd2.dwval = image_w1;
+
+        de_scal_ch0_offset = (image_w0) * (y_off0<<1) + x_off0;
+        de_scal_ch1_offset = (image_w1) * (y_off1<<1) + x_off1;
+        de_scal_ch2_offset = (image_w1) * (y_off1<<1) + x_off1;
+
+		de_scal_ch0r_offset = image_w0 + de_scal_ch0_offset;
+		de_scal_ch1r_offset = image_w1 + de_scal_ch1_offset;
+		de_scal_ch2r_offset = image_w1 + de_scal_ch2_offset;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if((trdinmode == DE_SCAL_3DIN_FP) && (type->mod == DE_SCAL_INTER_LEAVED))
+	{
+		scal_dev[sel]->linestrd0.dwval = image_w0<<(2-w_shift);
+		scal_dev[sel]->linestrd1.dwval = 0;
+		scal_dev[sel]->linestrd2.dwval = 0;
+
+        de_scal_ch0_offset = (image_w0<<(2-w_shift)) * y_off0 + x_off0;
+        de_scal_ch1_offset = 0;
+        de_scal_ch2_offset = 0;
+
+		de_scal_ch0r_offset = de_scal_ch0_offset;
+		de_scal_ch1r_offset = de_scal_ch1_offset;
+		de_scal_ch2r_offset = de_scal_ch2_offset;
+
+		de_scal_trd_fp_en = 1;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addrtrd->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addrtrd->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addrtrd->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if((trdinmode == DE_SCAL_3DIN_TB) && (type->mod == DE_SCAL_INTER_LEAVED))
+	{
+		scal_dev[sel]->linestrd0.dwval = image_w0<<(2-w_shift);
+		scal_dev[sel]->linestrd1.dwval = 0;
+		scal_dev[sel]->linestrd2.dwval = 0;
+
+        de_scal_ch0_offset = (image_w0<<(2-w_shift)) * y_off0 + x_off0;
+        de_scal_ch1_offset = 0;
+        de_scal_ch2_offset = 0;
+
+		de_scal_ch0r_offset = (image_w0<<(2-w_shift)) * image_h0 + de_scal_ch0_offset;
+		de_scal_ch1r_offset = de_scal_ch1_offset;
+		de_scal_ch2r_offset = de_scal_ch2_offset;
+
+		de_scal_trd_fp_en = 0;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if(((trdinmode == DE_SCAL_3DIN_SSF)||(trdinmode == DE_SCAL_3DIN_SSH)) && (type->mod == DE_SCAL_INTER_LEAVED))
+	{
+		scal_dev[sel]->linestrd0.dwval = image_w0<<(3-w_shift);
+		scal_dev[sel]->linestrd1.dwval = 0;
+		scal_dev[sel]->linestrd2.dwval = 0;
+
+        de_scal_ch0_offset = (image_w0<<(3-w_shift)) * y_off0 + x_off0;
+        de_scal_ch1_offset = 0;
+        de_scal_ch2_offset = 0;
+
+		de_scal_ch0r_offset = (image_w0<<(2-w_shift)) + de_scal_ch0_offset;
+		de_scal_ch1r_offset = de_scal_ch1_offset;
+		de_scal_ch2r_offset = de_scal_ch2_offset;
+
+		de_scal_trd_fp_en = 0;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if((trdinmode == DE_SCAL_3DIN_LI) && (type->mod == DE_SCAL_INTER_LEAVED))
+	{
+		scal_dev[sel]->linestrd0.dwval = image_w0<<(2-w_shift);
+		scal_dev[sel]->linestrd1.dwval = 0;
+		scal_dev[sel]->linestrd2.dwval = 0;
+
+        de_scal_ch0_offset = (image_w0<<(2-w_shift)) * (y_off0<<1) + x_off0;
+        de_scal_ch1_offset = 0;
+        de_scal_ch2_offset = 0;
+
+		de_scal_ch0r_offset = (image_w0<<(2-w_shift)) + de_scal_ch0_offset;
+		de_scal_ch1r_offset = de_scal_ch1_offset;
+		de_scal_ch2r_offset = de_scal_ch2_offset;
+
+		de_scal_trd_fp_en = 0;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if((trdinmode == DE_SCAL_3DIN_TB) && (type->mod == DE_SCAL_UVCOMBINEDMB))
+	{
+	    scal_dev[sel]->linestrd0.dwval = (((image_w0+0x1f)&0xffe0) - 0x1f)<<0x05;;
+		scal_dev[sel]->linestrd1.dwval = (((((image_w1)<<1)+0x1f)&0xffe0) - 0x1f) << 0x05;
+		scal_dev[sel]->linestrd2.dwval = 0x00;
+
+		//block offset
+		de_scal_ch0_dx0 = (x_off0 & 0x1f);
+		de_scal_ch0_dy0 = (y_off0 & 0x1f);
+		de_scal_ch0_dx1 = ((de_scal_ch0_dx0 & 0x1f) + in_w0 + 0x1f) &0x1f;
+		de_scal_ch1_dx0 = (((x_off1)<<1)&0x1f);
+		de_scal_ch1_dy0 = ((y_off1)&0x1f);
+		de_scal_ch1_dx1 = ((de_scal_ch1_dx0 & 0x1e) + ((in_w1)<<1) + 0x1f) & 0x1f;
+
+		scal_dev[sel]->mb_off0.bits.x_offset0 = de_scal_ch0_dx0;
+		scal_dev[sel]->mb_off0.bits.y_offset0 = de_scal_ch0_dy0;
+		scal_dev[sel]->mb_off0.bits.x_offset1 = de_scal_ch0_dx1;
+		scal_dev[sel]->mb_off1.bits.x_offset0 = de_scal_ch1_dx0;
+		scal_dev[sel]->mb_off1.bits.y_offset0 = de_scal_ch1_dy0;
+		scal_dev[sel]->mb_off1.bits.x_offset1 = de_scal_ch1_dx1;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset0 = de_scal_ch0_dx0;
+		scal_dev[sel]->trd_mb_off0.bits.y_offset0 = (image_h0 + y_off0) & 0x1f;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset1 = de_scal_ch0_dx1;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset0 = de_scal_ch1_dx0;
+		scal_dev[sel]->trd_mb_off1.bits.y_offset0 = (image_h1 + y_off1) & 0x1f;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset1 = de_scal_ch1_dx1;
+
+		de_scal_ch0_offset = ((image_w0 + 0x1f) &0xffe0) * (y_off0& 0xffe0) + ((y_off0& 0x01f)<<5) +
+                              ((x_off0& 0xffe0)<<5);
+        de_scal_ch1_offset = (((image_w1<< 0x01)+0x1f)&0xffe0) * ((y_off1) & 0xffe0) +
+                              (((y_off1) & 0x01f)<<5) + (((x_off1<<0x01) & 0xffe0)<<5);
+        de_scal_ch2_offset = 0x0;
+
+		de_scal_ch0r_offset = ((image_w0 + 0x1f) &0xffe0) * ((y_off0+ image_h0) & 0xffe0) +
+						(((y_off0+ image_h0)& 0x01f)<<5) + ((x_off0& 0xffe0)<<5);
+		de_scal_ch1r_offset = (((image_w1<< 0x01)+0x1f)&0xffe0) * ((y_off1+ image_h1) & 0xffe0) +
+                       (((y_off1+ image_h1) & 0x01f)<<5) + (((x_off1<<0x01) & 0xffe0)<<5);
+		de_scal_ch2r_offset = 0x0;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if((trdinmode == DE_SCAL_3DIN_FP) && (type->mod == DE_SCAL_UVCOMBINEDMB))
+	{
+		de_scal_trd_fp_en = 1;
+	    scal_dev[sel]->linestrd0.dwval = (((image_w0+0x1f)&0xffe0) - 0x1f)<<0x05;;
+		scal_dev[sel]->linestrd1.dwval = (((((image_w1)<<1)+0x1f)&0xffe0) - 0x1f) << 0x05;
+		scal_dev[sel]->linestrd2.dwval = 0x00;
+
+		//block offset
+		de_scal_ch0_dx0 = (x_off0 & 0x1f);
+		de_scal_ch0_dy0 = (y_off0 & 0x1f);
+		de_scal_ch0_dx1 = ((de_scal_ch0_dx0 & 0x1f) + in_w0 + 0x1f) &0x1f;
+		de_scal_ch1_dx0 = (((x_off1)<<1)&0x1f);
+		de_scal_ch1_dy0 = ((y_off1)&0x1f);
+		de_scal_ch1_dx1 = ((de_scal_ch1_dx0 & 0x1e) + ((in_w1)<<1) + 0x1f) & 0x1f;
+
+		scal_dev[sel]->mb_off0.bits.x_offset0 = de_scal_ch0_dx0;
+		scal_dev[sel]->mb_off0.bits.y_offset0 = de_scal_ch0_dy0;
+		scal_dev[sel]->mb_off0.bits.x_offset1 = de_scal_ch0_dx1;
+		scal_dev[sel]->mb_off1.bits.x_offset0 = de_scal_ch1_dx0;
+		scal_dev[sel]->mb_off1.bits.y_offset0 = de_scal_ch1_dy0;
+		scal_dev[sel]->mb_off1.bits.x_offset1 = de_scal_ch1_dx1;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset0 = de_scal_ch0_dx0;
+		scal_dev[sel]->trd_mb_off0.bits.y_offset0 = de_scal_ch0_dy0;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset1 = de_scal_ch0_dx1;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset0 = de_scal_ch1_dx0;
+		scal_dev[sel]->trd_mb_off1.bits.y_offset0 = de_scal_ch1_dy0;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset1 = de_scal_ch1_dx1;
+
+		de_scal_ch0_offset = ((image_w0 + 0x1f) &0xffe0) * (y_off0& 0xffe0) + ((y_off0& 0x01f)<<5) +
+                              ((x_off0& 0xffe0)<<5);
+        de_scal_ch1_offset = (((image_w1<< 0x01)+0x1f)&0xffe0) * ((y_off1) & 0xffe0) +
+                              (((y_off1) & 0x01f)<<5) + (((x_off1<<0x01) & 0xffe0)<<5);
+        de_scal_ch2_offset = 0x0;
+
+		de_scal_ch0r_offset = de_scal_ch0_offset;
+		de_scal_ch1r_offset = de_scal_ch1_offset;
+		de_scal_ch2r_offset = 0x0;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addrtrd->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addrtrd->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addrtrd->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if(((trdinmode == DE_SCAL_3DIN_SSF) ||(trdinmode == DE_SCAL_3DIN_SSH)) && (type->mod == DE_SCAL_UVCOMBINEDMB))
+	{
+	    scal_dev[sel]->linestrd0.dwval = (((2*image_w0+0x1f)&0xffe0) - 0x1f)<<0x05;;
+		scal_dev[sel]->linestrd1.dwval = (((((2*image_w1)<<1)+0x1f)&0xffe0) - 0x1f) << 0x05;
+		scal_dev[sel]->linestrd2.dwval = 0x00;
+
+		//block offset
+		de_scal_ch0_dx0 = (x_off0 & 0x1f);
+		de_scal_ch0_dy0 = (y_off0 & 0x1f);
+		de_scal_ch0_dx1 = ((de_scal_ch0_dx0 & 0x1f) + in_w0 + 0x1f) &0x1f;
+		de_scal_ch1_dx0 = (((x_off1)<<1)&0x1f);
+		de_scal_ch1_dy0 = ((y_off1)&0x1f);
+		de_scal_ch1_dx1 = ((de_scal_ch1_dx0 & 0x1e) + ((in_w1)<<1) + 0x1f) & 0x1f;
+
+		scal_dev[sel]->mb_off0.bits.x_offset0 = de_scal_ch0_dx0;
+		scal_dev[sel]->mb_off0.bits.y_offset0 = de_scal_ch0_dy0;
+		scal_dev[sel]->mb_off0.bits.x_offset1 = de_scal_ch0_dx1;
+		scal_dev[sel]->mb_off1.bits.x_offset0 = de_scal_ch1_dx0;
+		scal_dev[sel]->mb_off1.bits.y_offset0 = de_scal_ch1_dy0;
+		scal_dev[sel]->mb_off1.bits.x_offset1 = de_scal_ch1_dx1;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset0 = (image_w0 + x_off0) & 0x1f;
+		scal_dev[sel]->trd_mb_off0.bits.y_offset0 = de_scal_ch0_dy0;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset1 = (((image_w0 + x_off0) & 0x1f) + in_w0 + 0x1f)&0x1f;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset0 = ((2 * (image_w1 + x_off1)) & 0x1f);
+		scal_dev[sel]->trd_mb_off1.bits.y_offset0 = de_scal_ch1_dy0;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset1 = (((2 * (image_w1 + x_off1)) & 0x1f) + (in_w1<<1) + 0x1f)&0x1f;
+
+		de_scal_ch0_offset = ((2 *image_w0 + 0x1f) &0xffe0) * (y_off0& 0xffe0) + ((y_off0& 0x01f)<<5) +
+                              ((x_off0& 0xffe0)<<5);
+        de_scal_ch1_offset = ((((2 * image_w1)<< 0x01)+0x1f)&0xffe0) * ((y_off1) & 0xffe0) +
+                              (((y_off1) & 0x01f)<<5) + (((x_off1<<0x01) & 0xffe0)<<5);
+        de_scal_ch2_offset = 0x0;
+
+		de_scal_ch0r_offset = ((2 *image_w0 + 0x1f) &0xffe0) * (y_off0& 0xffe0) + ((y_off0& 0x01f)<<5) +
+                              (((image_w0 + x_off0) & 0xffe0)<<5);
+		de_scal_ch1r_offset = ((((2 * image_w1)<< 0x01)+0x1f)&0xffe0) * ((y_off1) & 0xffe0) +
+                              (((y_off1) & 0x01f)<<5) + ((((image_w1 + x_off1)<<0x01) & 0xffe0)<<5);
+		de_scal_ch2r_offset = 0x0;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+	else if((trdinmode == DE_SCAL_3DIN_LI) && (type->mod == DE_SCAL_UVCOMBINEDMB))
+	{
+	    scal_dev[sel]->linestrd0.dwval = ((((image_w0+0x1f)&0xffe0) - 0x1f)<<0x05);
+		scal_dev[sel]->linestrd1.dwval = ((((((image_w1)<<1)+0x1f)&0xffe0) - 0x1f) << 0x05);
+		scal_dev[sel]->linestrd2.dwval = 0x00;
+
+		//block offset
+		de_scal_ch0_dx0 = (x_off0 & 0x1f);
+		de_scal_ch0_dy0 = ((2*y_off0) & 0x1f);
+		de_scal_ch0_dx1 = ((de_scal_ch0_dx0 & 0x1f) + in_w0 + 0x1f) &0x1f;
+		de_scal_ch1_dx0 = (((x_off1)<<1)&0x1f);
+		de_scal_ch1_dy0 = ((2*y_off1)&0x1f);
+		de_scal_ch1_dx1 = ((de_scal_ch1_dx0 & 0x1e) + ((in_w1)<<1) + 0x1f) & 0x1f;
+
+		scal_dev[sel]->mb_off0.bits.x_offset0 = de_scal_ch0_dx0;
+		scal_dev[sel]->mb_off0.bits.y_offset0 = de_scal_ch0_dy0;
+		scal_dev[sel]->mb_off0.bits.x_offset1 = de_scal_ch0_dx1;
+		scal_dev[sel]->mb_off1.bits.x_offset0 = de_scal_ch1_dx0;
+		scal_dev[sel]->mb_off1.bits.y_offset0 = de_scal_ch1_dy0;
+		scal_dev[sel]->mb_off1.bits.x_offset1 = de_scal_ch1_dx1;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset0 = de_scal_ch0_dx0;
+		scal_dev[sel]->trd_mb_off0.bits.y_offset0 = (2*y_off0 + 1) & 0x1f;
+		scal_dev[sel]->trd_mb_off0.bits.x_offset1 = de_scal_ch0_dx1;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset0 = de_scal_ch1_dx0;
+		scal_dev[sel]->trd_mb_off1.bits.y_offset0 = (2*y_off1 + 1) & 0x1f;
+		scal_dev[sel]->trd_mb_off1.bits.x_offset1 = de_scal_ch1_dx1;
+
+		de_scal_ch0_offset = ((image_w0 + 0x1f) &0xffe0) * ((2*y_off0) & 0xffe0) + (((2*y_off0) & 0x01f)<<5) +
+                              ((x_off0& 0xffe0)<<5);
+        de_scal_ch1_offset = (((image_w1<< 0x01)+0x1f)&0xffe0) * ((2*y_off1) & 0xffe0) +
+                              (((2*y_off1) & 0x01f)<<5) + (((x_off1<<0x01) & 0xffe0)<<5);
+        de_scal_ch2_offset = 0x0;
+
+		de_scal_ch0r_offset = de_scal_ch0_offset + 32;
+		de_scal_ch1r_offset = de_scal_ch1_offset + 32;
+		de_scal_ch2r_offset = 0x0;
+
+		scal_dev[sel]->buf_addr0.dwval = addr->ch0_addr+ de_scal_ch0_offset;
+		scal_dev[sel]->buf_addr1.dwval = addr->ch1_addr+ de_scal_ch1_offset;
+		scal_dev[sel]->buf_addr2.dwval = addr->ch2_addr+ de_scal_ch2_offset;
+
+		scal_dev[sel]->trd_buf_addr0.dwval = addr->ch0_addr + de_scal_ch0r_offset;
+		scal_dev[sel]->trd_buf_addr1.dwval = addr->ch1_addr + de_scal_ch1r_offset;
+		scal_dev[sel]->trd_buf_addr2.dwval = addr->ch2_addr + de_scal_ch2r_offset;
+	}
+
+
+	scal_dev[sel]->input_fmt.bits.byte_seq = type->byte_seq;
+	scal_dev[sel]->input_fmt.bits.data_mod = type->mod;
+	scal_dev[sel]->input_fmt.bits.data_fmt = type->fmt;
+	scal_dev[sel]->input_fmt.bits.data_ps = type->ps;
+
+	scal_dev[sel]->ch0_insize.bits.in_width = in_w0 - 1;
+	scal_dev[sel]->ch0_insize.bits.in_height = in_h0 - 1;
+	scal_dev[sel]->ch1_insize.bits.in_width = in_w1 - 1;
+	scal_dev[sel]->ch1_insize.bits.in_height = in_h1 - 1;
+
+
+    return 0;
+}
+
+
+//vpp--by vito
+//*********************************************************************************************
+// function           : DE_SCAL_Vpp_Enable(__u8 sel, __u32 enable)
+// description     : Enable/Disable Video Post Processing
+// parameters     :
+//                 		sel <scaler select>
+//                 		enable  <vpp module enable/disable>	0:disable/	1:enable
+// return              :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Vpp_Enable(__u8 sel, __u32 enable)
+{
+	if(enable)
+	{
+		scal_dev[sel]->vpp_en.bits.en 	= 	0x1;
+	}
+	else
+	{
+		scal_dev[sel]->vpp_en.bits.en 	= 	0x0;
+		scal_dev[sel]->vpp_lp1.bits.lp_en 	= 	0x0;
+		scal_dev[sel]->vpp_dcti.bits.dcti_en = 	0x0;
+		scal_dev[sel]->vpp_ble.bits.ble_en 	= 	0x0;
+		scal_dev[sel]->vpp_wle.bits.wle_en 	= 	0x0;
+	}
+	return 0;
+}
+
+//*********************************************************************************************
+// function           : DE_SCAL_Vpp_Set_Luma_Sharpness_Level(__u8 sel, __u32 level)
+// description     : Set Luminance Sharpen Level
+// parameters     :
+//               		 	sel <scaler select>
+//                 		level  <sharpness level>	0: sharpen off/1~4: higher level, more sharper
+// return              :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Vpp_Set_Luma_Sharpness_Level(__u8 sel, __u32 level)
+{
+
+	scal_dev[sel]->vpp_lp2.bits.lpf_gain = 31;
+	scal_dev[sel]->vpp_lp2.bits.neggain = 3;
+	scal_dev[sel]->vpp_lp2.bits.delta = 3;
+	scal_dev[sel]->vpp_lp2.bits.limit_thr = 40;
+
+	switch(level)
+	{
+		case	0x0:
+			scal_dev[sel]->vpp_lp1.bits.tau = 0;
+			scal_dev[sel]->vpp_lp1.bits.alpha = 0;
+			scal_dev[sel]->vpp_lp1.bits.beta = 0;
+			scal_dev[sel]->vpp_lp2.bits.corthr = 255;
+			scal_dev[sel]->vpp_lp1.bits.lp_en = 0x0;
+		break;
+
+		case	0x1:
+			scal_dev[sel]->vpp_lp1.bits.tau = 4;
+			scal_dev[sel]->vpp_lp1.bits.alpha = 0;
+			scal_dev[sel]->vpp_lp1.bits.beta = 20;
+			scal_dev[sel]->vpp_lp2.bits.corthr = 2;
+			scal_dev[sel]->vpp_lp1.bits.lp_en = 0x1;
+		break;
+
+		case	0x2:
+			scal_dev[sel]->vpp_lp1.bits.tau = 11;
+			scal_dev[sel]->vpp_lp1.bits.alpha = 0;
+			scal_dev[sel]->vpp_lp1.bits.beta = 16;
+			scal_dev[sel]->vpp_lp2.bits.corthr = 5;
+			scal_dev[sel]->vpp_lp1.bits.lp_en = 0x1;
+
+		break;
+
+		case	0x3:
+			scal_dev[sel]->vpp_lp1.bits.tau = 15;
+			scal_dev[sel]->vpp_lp1.bits.alpha = 4;
+			scal_dev[sel]->vpp_lp1.bits.beta = 8;
+			scal_dev[sel]->vpp_lp2.bits.corthr = 5;
+			scal_dev[sel]->vpp_lp1.bits.lp_en = 0x1;
+		break;
+
+		case	0x4:
+			scal_dev[sel]->vpp_lp1.bits.tau = 8;
+			scal_dev[sel]->vpp_lp1.bits.alpha = 16;
+			scal_dev[sel]->vpp_lp1.bits.beta = 8;
+			scal_dev[sel]->vpp_lp2.bits.corthr = 5;
+			scal_dev[sel]->vpp_lp1.bits.lp_en = 0x1;
+
+		break;
+
+		default:
+			scal_dev[sel]->vpp_lp1.bits.tau = 0;
+			scal_dev[sel]->vpp_lp1.bits.alpha = 0;
+			scal_dev[sel]->vpp_lp1.bits.beta = 0;
+			scal_dev[sel]->vpp_lp2.bits.corthr = 255;
+			scal_dev[sel]->vpp_lp1.bits.lp_en = 0x0;
+		break;
+	}
+
+	return 0;
+}
+
+//*********************************************************************************************
+// function           : DE_SCAL_Vpp_Set_Chroma_Sharpness_Level(__u8 sel, __u32 level)
+// description     : Set Chrominance Sharpen Level
+// parameters     :
+//                 		sel <scaler select>
+//                 		level  <sharpness level>	0: sharpen off/1~4: higher level, more sharper
+// return              :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Vpp_Set_Chroma_Sharpness_Level(__u8 sel, __u32 level)
+{
+	scal_dev[sel]->vpp_dcti.bits.dcti_filter1_sel = 2;
+	scal_dev[sel]->vpp_dcti.bits.dcti_filter2_sel = 2;
+	scal_dev[sel]->vpp_dcti.bits.dcti_hill_en = 1;
+	scal_dev[sel]->vpp_dcti.bits.dcti_suphill_en = 1;
+	scal_dev[sel]->vpp_dcti.bits.uv_separate_en = 0;
+	scal_dev[sel]->vpp_dcti.bits.uv_same_sign_mode_sel = 3;
+	scal_dev[sel]->vpp_dcti.bits.uv_diff_sign_mode_sel = 3;
+
+	switch(level)
+	{
+		case	0x0:
+			scal_dev[sel]->vpp_dcti.bits.dcti_gain = 0;
+			scal_dev[sel]->vpp_dcti.bits.dcti_path_limit = 0;
+			scal_dev[sel]->vpp_dcti.bits.uv_same_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.uv_diff_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.dcti_en = 0x0;
+		break;
+
+		case	0x1:
+			scal_dev[sel]->vpp_dcti.bits.dcti_gain = 12;
+			scal_dev[sel]->vpp_dcti.bits.dcti_path_limit = 4;
+			scal_dev[sel]->vpp_dcti.bits.uv_same_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.uv_diff_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.dcti_en = 0x1;
+
+		break;
+
+		case	0x2:
+			scal_dev[sel]->vpp_dcti.bits.dcti_gain = 23;
+			scal_dev[sel]->vpp_dcti.bits.dcti_path_limit = 4;
+			scal_dev[sel]->vpp_dcti.bits.uv_same_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.uv_diff_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.dcti_en = 0x1;
+
+		break;
+
+		case	0x3:
+			scal_dev[sel]->vpp_dcti.bits.dcti_gain = 23;
+			scal_dev[sel]->vpp_dcti.bits.dcti_path_limit = 4;
+			scal_dev[sel]->vpp_dcti.bits.uv_same_sign_maxmin_mode_sel = 1;
+			scal_dev[sel]->vpp_dcti.bits.uv_diff_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.dcti_en = 0x1;
+
+		break;
+
+		case	0x4:
+			scal_dev[sel]->vpp_dcti.bits.dcti_gain = 32;
+			scal_dev[sel]->vpp_dcti.bits.dcti_path_limit = 5;
+			scal_dev[sel]->vpp_dcti.bits.uv_same_sign_maxmin_mode_sel = 1;
+			scal_dev[sel]->vpp_dcti.bits.uv_diff_sign_maxmin_mode_sel = 1;
+			scal_dev[sel]->vpp_dcti.bits.dcti_en = 0x1;
+
+		break;
+
+		default:
+			scal_dev[sel]->vpp_dcti.bits.dcti_gain = 0;
+			scal_dev[sel]->vpp_dcti.bits.dcti_path_limit = 0;
+			scal_dev[sel]->vpp_dcti.bits.uv_same_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.uv_diff_sign_maxmin_mode_sel = 0;
+			scal_dev[sel]->vpp_dcti.bits.dcti_en = 0x0;
+		break;
+	}
+
+	return 0;
+}
+
+//*********************************************************************************************
+// function           : DE_SCAL_Vpp_Set_White_Level_Extension(__u8 sel, __u32 level)
+// description     : Set White Level Extension Level
+// parameters     :
+//                 		 sel <scaler select>
+//                		 level  <sharpness level>	 0: function off/1~4: higher level, more obvious
+// return              :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Vpp_Set_White_Level_Extension(__u8 sel, __u32 level)
+{
+	scal_dev[sel]->vpp_wle.bits.wle_thr = 128;
+
+	switch(level)
+	{
+		case	0x0:
+			scal_dev[sel]->vpp_wle.bits.wle_gain = 64;
+			scal_dev[sel]->vpp_wle.bits.wle_en = 0x0;
+		break;
+
+		case	0x1:
+			scal_dev[sel]->vpp_wle.bits.wle_gain = 112;
+			scal_dev[sel]->vpp_wle.bits.wle_en = 0x1;
+		break;
+
+		case	0x2:
+			scal_dev[sel]->vpp_wle.bits.wle_gain = 160;
+			scal_dev[sel]->vpp_wle.bits.wle_en = 0x1;
+		break;
+
+		case	0x3:
+			scal_dev[sel]->vpp_wle.bits.wle_gain = 208;
+			scal_dev[sel]->vpp_wle.bits.wle_en = 0x1;
+		break;
+
+		case	0x4:
+			scal_dev[sel]->vpp_wle.bits.wle_gain = 255;
+			scal_dev[sel]->vpp_wle.bits.wle_en = 0x1;
+		break;
+
+		default:
+			scal_dev[sel]->vpp_wle.bits.wle_gain = 64;
+			scal_dev[sel]->vpp_wle.bits.wle_en = 0x0;
+		break;
+	}
+
+	return 0;
+}
+
+//*********************************************************************************************
+// function           : DE_SCAL_Vpp_Set_Black_Level_Extension(__u8 sel, __u32 level)
+// description     : Set Black Level Extension Level
+// parameters     :
+//                 		 sel <scaler select>
+//                		 level  <sharpness level>	 0: function off/1~4: higher level, more obvious
+// return              :
+//               success
+//***********************************************************************************************
+__s32 DE_SCAL_Vpp_Set_Black_Level_Extension(__u8 sel, __u32 level)
+{
+	scal_dev[sel]->vpp_ble.bits.ble_thr = 127;
+
+	switch(level)
+	{
+		case	0x0:
+			scal_dev[sel]->vpp_ble.bits.ble_gain = 0;
+			scal_dev[sel]->vpp_ble.bits.ble_en = 0x0;
+		break;
+
+		case	0x1:
+			scal_dev[sel]->vpp_ble.bits.ble_gain = 64;
+			scal_dev[sel]->vpp_ble.bits.ble_en = 0x1;
+		break;
+
+		case	0x2:
+			scal_dev[sel]->vpp_ble.bits.ble_gain = 128;
+			scal_dev[sel]->vpp_ble.bits.ble_en = 0x1;
+		break;
+
+		case	0x3:
+			scal_dev[sel]->vpp_ble.bits.ble_gain = 192;
+			scal_dev[sel]->vpp_ble.bits.ble_en = 0x1;
+		break;
+
+		case	0x4:
+			scal_dev[sel]->vpp_ble.bits.ble_gain = 255;
+			scal_dev[sel]->vpp_ble.bits.ble_en = 0x0;
+		break;
+
+		default:
+			scal_dev[sel]->vpp_ble.bits.ble_gain = 0;
+			scal_dev[sel]->vpp_ble.bits.ble_en = 0x0;
+		break;
+
+	}
+
+	return 0;
+}
+
+__s32 DE_SCAL_EnableINT(__u8 sel,__u32 irqsrc)
+{
+	scal_dev[sel]->int_en.dwval |= irqsrc;
+
+	return 0;
+}
+
+__s32 DE_SCAL_DisableINT(__u8 sel, __u32 irqsrc)
+{
+	scal_dev[sel]->int_en.dwval &= (~irqsrc);
+
+	return 0;
+}
+
+__u32 DE_SCAL_QueryINT(__u8 sel)
+{
+	return scal_dev[sel]->int_status.dwval;
+}
+
+//write 1 to clear
+__u32 DE_SCAL_ClearINT(__u8 sel,__u32 irqsrc)
+{
+		scal_dev[sel]->int_status.dwval |= DE_WB_END_IE;
+	return 0;
+}
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.h b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.h
new file mode 100644
index 0000000..04d61cc
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_fe.h
@@ -0,0 +1,1519 @@
+//*****************************************************************************
+//  All Winner Micro, All Right Reserved. 2006-2011 Copyright (c)
+//
+//  File name   :        de_scal_bsp.h
+//
+//  Description :  display engine scaler registers and interface functions define
+//                 for aw1623
+//  History     :
+//                2011/05/03      zchmin       v0.1    Initial version
+//******************************************************************************
+#ifndef __DE_FE_H__
+#define __DE_FE_H__
+
+#include "de_be.h"
+
+//macro define
+#define SCALINITPASELMT (0xfffff)
+#define SCALLINEMAX (2048)
+
+//
+// Detail information of registers
+//
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 right_ch0_addr                    ;    // Default: 0x0; RIGHT_CH0_ADDR , 3D mode channel 0 buffer address, This address is
+                                                   // the start address of right image in 3D mode,
+	} bits;
+} SCAL_3D_BUF_ADDR0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 right_ch1_addr                    ;    // Default: 0x0; RIGHT_CH1_ADDR , 3D mode channel 1 buffer address, This address is
+                                                   // the start address of right image in 3D mode,
+	} bits;
+} SCAL_3D_BUF_ADDR1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 right_ch2_addr                    ;    // Default: 0x0; RIGHT_CH2_ADDR , 3D mode channel 2 buffer address, This address is
+                                                   // the start address of right image in 3D mode,
+	} bits;
+} SCAL_3D_BUF_ADDR2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 mod_sel                      :  2 ;    // Default: 0x0; MOD_SEL , 3D mode select, 00: normal output mode(2D mode), 01: 3D
+                                                   // side by side/line interleaved/column interleaved output mode, 10: 3D top/bottom
+                                                   // output mode, 11: reserved, When 3D mode is enable, scaler will enter 3D mode(source
+                                                   // will be composed of left and right frame, output will be composed of left and right
+                                                   // frame).,
+		u32 res0                         :  6 ;    // Default: ; /
+		u32 ci_out_en                    :  1 ;    // Default: 0x0; CI_OUT_EN , 3D Column interleaved mode output enable
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 ss_out_en                    :  1 ;    // Default: 0x0; SS_OUT_EN , 3D output side by side mode enable
+		u32 li_in_en                     :  1 ;    // Default: 0x0; LI_IN_EN , 3D input line interleaved enable
+		u32 tb_out_scan_mod              :  1 ;    // Default: 0x0; TB_OUT_SCAN_MOD , Output top/bottom scan mode selection, 0: progressive,
+                                                   // 1: interlace
+		u32 res2                         :  3 ;    // Default: ; /
+		u32 ci_out_mod                   :  3 ;    // Default: 0x0; CI_OUT_MOD , 3D column interleaved mode, 0: CI_1, 1: CI_2, 2: CI_3,
+                                                   // 3: CI_4, Other: reserved
+		u32 res3                         :  5 ;    // Default: ; /
+		u32 tb_out_mod_field             :  2 ;    // Default: 0x0; TB_OUT_MOD_FIELD , Top/bottom output mode field number, 0: left or
+                                                   // left 1st field(determined by reg0x2c), 1: right or right 1st field, 2: left 2nd
+                                                   // field, 3: right 2nd field
+		u32 res4                         :  6 ;    // Default: ; /
+	} bits;
+} SCAL_3D_CTRL_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 x_offset0                    :  5 ;    // Default: 0x0; X_OFFSET0 , The x offset of the top-left point in the first macro
+                                                   // block, This value is the start offset of right image in 3D mode,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 y_offset0                    :  5 ;    // Default: 0x0; Y_OFFSET0 , The y offset of the top-left point in the first macro
+                                                   // block
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 x_offset1                    :  5 ;    // Default: 0x0; X_OFFSET1 , The x offset of the bottom-right point in the first macro
+                                                   // block
+		u32 res2                         : 11 ;    // Default: ; /
+	} bits;
+} SCAL_3D_MB_OFF0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 x_offset0                    :  5 ;    // Default: 0x0; X_OFFSET0 , The x offset of the top-left point in the first macro
+                                                   // block, This value is the start offset of right image in 3D mode,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 y_offset0                    :  5 ;    // Default: 0x0; Y_OFFSET0 , The y offset of the top-left point in the first macro
+                                                   // block
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 x_offset1                    :  5 ;    // Default: 0x0; X_OFFSET1 , The x offset of the bottom-right point in the first macro
+                                                   // block
+		u32 res2                         : 11 ;    // Default: ; /
+	} bits;
+} SCAL_3D_MB_OFF1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 x_offset0                    :  5 ;    // Default: 0x0; X_OFFSET0 , The x offset of the top-left point in the first macro
+                                                   // block, This value is the start offset of right image in 3D mode,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 y_offset0                    :  5 ;    // Default: 0x0; Y_OFFSET0 , The y offset of the top-left point in the first macro
+                                                   // block
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 x_offset1                    :  5 ;    // Default: 0x0; X_OFFSET1 , The x offset of the bottom-right point in the first macro
+                                                   // block
+		u32 res2                         : 11 ;    // Default: ; /
+	} bits;
+} SCAL_3D_MB_OFF2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 res0                         :  8 ;    // Default: ; / ,
+		u32 linebuf_agth                 :  1 ;    // Default: 0x0; LINEBUF_AGTH , Scaler line buffer algorithm select, 0: horizontal
+                                                   // filtered result, 1: original data
+		u32 res1                         : 23 ;    // Default: ; /
+	} bits;
+} SCAL_AGTH_SEL_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 buf_addr                          ;    // Default: 0x0; BUF_ADDR , Scaler frame buffer address, , In macro block type:, The
+                                                   // address is the start address of the line in the first macro block used to generating
+                                                   // output frame., , In non-macro block type:, The address is the start address of the
+                                                   // first line.,
+	} bits;
+} SCAL_BUF_ADDR0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 buf_addr                          ;    // Default: 0x0; BUF_ADDR , Scaler frame buffer address, , In macro block type:, The
+                                                   // address is the start address of the line in the first macro block used to generating
+                                                   // output frame., , In non-macro block type:, The address is the start address of the
+                                                   // first line.,
+	} bits;
+} SCAL_BUF_ADDR1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 buf_addr                          ;    // Default: 0x0; BUF_ADDR , Scaler frame buffer address, , In macro block type:, The
+                                                   // address is the start address of the line in the first macro block used to generating
+                                                   // output frame., , In non-macro block type:, The address is the start address of the
+                                                   // first line.,
+	} bits;
+} SCAL_BUF_ADDR2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 res0                         :  1 ;    // Default: ; / ,
+		u32 csc_bypass_en                :  1 ;    // Default: 0x0; CSC_BYPASS_EN , CSC by-pass enable, 0: CSC enable, 1: CSC will be
+                                                   // by-passed, , Actually, in order ensure the module working be correct, This bit only
+                                                   // can be set when input data format is the same as output data format (both YUV or
+                                                   // both RGB)
+		u32 res1                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_BYPASS_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Horizontal tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Horizontal tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Horizontal tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Horizontal tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH0_HORZCOEF0_REGNN0;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Horizontal tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Horizontal tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Horizontal tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Horizontal tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH0_HORZCOEF0_REGN;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap4                         :  8 ;    // Default: 0x0; TAP4 , Horizontal tap4 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap5                         :  8 ;    // Default: 0x0; TAP5 , Horizontal tap5 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap6                         :  8 ;    // Default: 0x0; TAP6 , Horizontal tap6 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap7                         :  8 ;    // Default: 0x0; TAP7 , Horizontal tap7 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH0_HORZCOEF1_REGNN0;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap4                         :  8 ;    // Default: 0x0; TAP4 , Horizontal tap4 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap5                         :  8 ;    // Default: 0x0; TAP5 , Horizontal tap5 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap6                         :  8 ;    // Default: 0x0; TAP6 , Horizontal tap6 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap7                         :  8 ;    // Default: 0x0; TAP7 , Horizontal tap7 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH0_HORZCOEF1_REGN;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 factor_frac                  : 16 ;    // Default: 0x0; FACTOR_FRAC , The fractional part of the horizontal scaling ratio,
+                                                   // the horizontal scaling ratio = input width/output width, ,
+		u32 factor_int                   :  8 ;    // Default: 0x0; FACTOR_INT , The integer part of the horizontal scaling ratio, the
+                                                   // horizontal scaling ratio = input width/output width,
+		u32 res0                         :  8 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_HORZFACT_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 phase                        : 20 ;    // Default: 0x0; PHASE , Y/G component initial phase in horizontal (complement), This
+                                                   // value equals to initial phase * 216,
+		u32 res0                         : 12 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_HORZPHASE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  7 ;    // Default: 0x7D; TAP0 , Tap 0 offset in horizontal,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap1                         :  7 ;    // Default: 0x1; TAP1 , Tap 1 offset in horizontal
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap2                         :  7 ;    // Default: 0x1; TAP2 , Tap 2 offset in horizontal
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap3                         :  7 ;    // Default: 0x1; TAP3 , Tap 3 offset in horizontal
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_HORZTAP0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap4                         :  7 ;    // Default: 0x1; TAP4 , Tap 4 offset in horizontal,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap5                         :  7 ;    // Default: 0x1; TAP5 , Tap 5 offset in horizontal
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap6                         :  7 ;    // Default: 0x1; TAP6 , Tap 6 offset in horizontal
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap7                         :  7 ;    // Default: 0x1; TAP7 , Tap 7 offset in horizontal
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_HORZTAP1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 in_width                     : 13 ;    // Default: 0x0; IN_WIDTH , Input image Y/G component width, The image width = The
+                                                   // value of these bits add 1, , When line buffer result selection is original data,
+                                                   // the maximum width is 2048.,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 in_height                    : 13 ;    // Default: 0x0; IN_HEIGHT , Input image Y/G component height, Input image height
+                                                   // = The value of these bits add 1,
+		u32 res1                         :  3 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_INSIZE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 out_width                    : 13 ;    // Default: 0x0; OUT_WIDTH , Output layer Y/G component width, The output layer width
+                                                   // = The value of these bits add 1, , When line buffer result selection is horizontal
+                                                   // filtered result, the maximum width is 2048,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 out_height                   : 13 ;    // Default: 0x0; OUT_HEIGHT , Output layer Y/G component height, The output layer
+                                                   // height = The value of these bits add 1,
+		u32 res1                         :  3 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_OUTSIZE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Vertical tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Vertical tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Vertical tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Vertical tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH0_VERTCOEF_REGNN0;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Vertical tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Vertical tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Vertical tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Vertical tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH0_VERTCOEF_REGN;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 factor_frac                  : 16 ;    // Default: 0x0; FACTOR_FRAC , The fractional part of the vertical scaling ratio,
+                                                   // the vertical scaling ratio = input height /output height, ,
+		u32 factor_int                   :  8 ;    // Default: 0x0; FACTOR_INT , The integer part of the vertical scaling ratio, the
+                                                   // vertical scaling ratio = input height/output height,
+		u32 res0                         :  8 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_VERTFACT_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 phase                        : 20 ;    // Default: 0x0; PHASE , Y/G component initial phase in vertical for top field (complement),
+                                                   // This value equals to initial phase * 216,
+		u32 res0                         : 12 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_VERTPHASE0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 phase                        : 20 ;    // Default: 0x0; PHASE , Y/G component initial phase in vertical for bottom field
+                                                   // (complement), This value equals to initial phase * 216,
+		u32 res0                         : 12 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_VERTPHASE1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  7 ;    // Default: 0x7F; TAP0 , Tap 0 offset in vertical,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap1                         :  7 ;    // Default: 0x1; TAP1 , Tap 1 offset in vertical
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap2                         :  7 ;    // Default: 0x1; TAP2 , Tap 2 offset in vertical
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap3                         :  7 ;    // Default: 0x1; TAP3 , Tap 3 offset in vertical
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_VERTTAP;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  7 ;    // Default: 0x7F; TAP0 , Tap 0 offset in vertical,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap1                         :  7 ;    // Default: 0x1; TAP1 , Tap 1 offset in vertical
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap2                         :  7 ;    // Default: 0x1; TAP2 , Tap 2 offset in vertical
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap3                         :  7 ;    // Default: 0x1; TAP3 , Tap 3 offset in vertical
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH0_VERTTAP_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Horizontal tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Horizontal tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Horizontal tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Horizontal tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH1_HORZCOEF0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Horizontal tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Horizontal tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Horizontal tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Horizontal tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH1_HORZCOEF0_REGN;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap4                         :  8 ;    // Default: 0x0; TAP4 , Horizontal tap4 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap5                         :  8 ;    // Default: 0x0; TAP5 , Horizontal tap5 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap6                         :  8 ;    // Default: 0x0; TAP6 , Horizontal tap6 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap7                         :  8 ;    // Default: 0x0; TAP7 , Horizontal tap7 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH1_HORZCOEF1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap4                         :  8 ;    // Default: 0x0; TAP4 , Horizontal tap4 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap5                         :  8 ;    // Default: 0x0; TAP5 , Horizontal tap5 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap6                         :  8 ;    // Default: 0x0; TAP6 , Horizontal tap6 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap7                         :  8 ;    // Default: 0x0; TAP7 , Horizontal tap7 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH1_HORZCOEF1_REGN;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 factor_frac                  : 16 ;    // Default: 0x0; FACTOR_FRAC , The fractional part of the horizontal scaling ratio,
+                                                   // the horizontal scaling ratio = input width/output width, ,
+		u32 factor_int                   :  8 ;    // Default: 0x0; FACTOR_INT , The integer part of the horizontal scaling ratio, the
+                                                   // horizontal scaling ratio = input width/output width,
+		u32 res0                         :  8 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_HORZFACT_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 phase                        : 20 ;    // Default: 0x0; PHASE , U/R component initial phase in horizontal (complement), This
+                                                   // value equals to initial phase * 216,
+		u32 res0                         : 12 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_HORZPHASE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  7 ;    // Default: 0x7D; TAP0 , Tap 0 offset in horizontal,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap1                         :  7 ;    // Default: 0x1; TAP1 , Tap 1 offset in horizontal
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap2                         :  7 ;    // Default: 0x1; TAP2 , Tap 2 offset in horizontal
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap3                         :  7 ;    // Default: 0x1; TAP3 , Tap 3 offset in horizontal
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_HORZTAP0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap4                         :  7 ;    // Default: 0x1; TAP4 , Tap 4 offset in horizontal,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap5                         :  7 ;    // Default: 0x1; TAP5 , Tap 5 offset in horizontal
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap6                         :  7 ;    // Default: 0x1; TAP6 , Tap 6 offset in horizontal
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap7                         :  7 ;    // Default: 0x1; TAP7 , Tap 7 offset in horizontal
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_HORZTAP1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 in_width                     : 13 ;    // Default: 0x0; IN_WIDTH , Input image U/R component width, The image width = The
+                                                   // value of these bits add 1, , When line buffer result selection is original data,
+                                                   // the maximum width is 2048,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 in_height                    : 13 ;    // Default: 0x0; IN_HEIGHT , Input image U/R component height, Input image height
+                                                   // = The value of these bits add 1,
+		u32 res1                         :  3 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_INSIZE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 out_width                    : 13 ;    // Default: 0x0; OUT_WIDTH , Output layer U/R component width, The output layer width
+                                                   // = The value of these bits add 1, , When line buffer result selection is horizontal
+                                                   // filtered result, the maximum width is 2048,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 out_height                   : 13 ;    // Default: 0x0; OUT_HEIGHT , Output layer U/R component height, The output layer
+                                                   // height = The value of these bits add 1,
+		u32 res1                         :  3 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_OUTSIZE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Vertical tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Vertical tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Vertical tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Vertical tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH1_VERTCOEF_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  8 ;    // Default: 0x0; TAP0 , Vertical tap0 coefficient, The value equals to coefficient*26,
+                                                   // ,
+		u32 tap1                         :  8 ;    // Default: 0x0; TAP1 , Vertical tap1 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap2                         :  8 ;    // Default: 0x0; TAP2 , Vertical tap2 coefficient, The value equals to coefficient*26,
+                                                   //
+		u32 tap3                         :  8 ;    // Default: 0x0; TAP3 , Vertical tap3 coefficient, The value equals to coefficient*26,
+                                                   //
+	} bits;
+} SCAL_CH1_VERTCOEF_REGN;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 factor_frac                  : 16 ;    // Default: 0x0; FACTOR_FRAC , The fractional part of the vertical scaling ratio,
+                                                   // the vertical scaling ratio = input height /output height, ,
+		u32 factor_int                   :  8 ;    // Default: 0x0; FACTOR_INT , The integer part of the vertical scaling ratio, the
+                                                   // vertical scaling ratio = input height/output height,
+		u32 res0                         :  8 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_VERTFACT_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 phase                        : 20 ;    // Default: 0x0; PHASE , U/R component initial phase in vertical for top field (complement),
+                                                   // This value equals to initial phase * 216,
+		u32 res0                         : 12 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_VERTPHASE0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 phase                        : 20 ;    // Default: 0x0; PHASE , U/R component initial phase in vertical for bottom field
+                                                   // (complement), This value equals to initial phase * 216,
+		u32 res0                         : 12 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_VERTPHASE1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  7 ;    // Default: 0x7F; TAP0 , Tap 0 offset in vertical,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap1                         :  7 ;    // Default: 0x1; TAP1 , Tap 1 offset in vertical
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap2                         :  7 ;    // Default: 0x1; TAP2 , Tap 2 offset in vertical
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap3                         :  7 ;    // Default: 0x1; TAP3 , Tap 3 offset in vertical
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_VERTTAP;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 tap0                         :  7 ;    // Default: 0x7F; TAP0 , Tap 0 offset in vertical,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 tap1                         :  7 ;    // Default: 0x1; TAP1 , Tap 1 offset in vertical
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 tap2                         :  7 ;    // Default: 0x1; TAP2 , Tap 2 offset in vertical
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 tap3                         :  7 ;    // Default: 0x1; TAP3 , Tap 3 offset in vertical
+		u32 res3                         :  1 ;    // Default: ; /
+	} bits;
+} SCAL_CH1_VERTTAP_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the Y/G coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF00_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the Y/G coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF01_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the Y/G coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF02_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 cont                         : 14 ;    // Default: 0x0; CONT , the Y/G constant, the value equals to coefficient*24,
+		u32 res0                         : 18 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF03_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the U/R coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF10_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the U/R coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF11_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the U/R coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF12_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 cont                         : 14 ;    // Default: 0x0; CONT , the U/R constant, the value equals to coefficient*24,
+		u32 res0                         : 18 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF13_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the V/B coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF20_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the V/B coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF21_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 coef                         : 13 ;    // Default: 0x0; COEF , the V/B coefficient, the value equals to coefficient*210,
+                                                   //
+		u32 res0                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF22_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 cont                         : 14 ;    // Default: 0x0; CONT , the V/B constant, the value equals to coefficient*24,
+		u32 res0                         : 18 ;    // Default: ; /
+	} bits;
+} SCAL_CSC_COEF23_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 blk_flag_addr                     ;    // Default: 0x0; BLK_FLAG_ADDR , Current frame block flag buffer address,
+	} bits;
+} SCAL_DI_BLKFLAG_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 luma                         :  6 ;    // Default: 0x1F; LUMA , Luma burst length,
+		u32 res0                         :  2 ;    // Default: ; /
+		u32 chroma                       :  6 ;    // Default: 0x1F; CHROMA , Chroma burst length
+		u32 res1                         : 18 ;    // Default: ; /
+	} bits;
+} SCAL_DI_BURSTLEN_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 en                           :  1 ;    // Default: 0x0; EN , De-interlacing enable, 0: de-interlacing disable, 1: de-interlacing
+                                                   // enable,
+		u32 res0                         : 15 ;    // Default: ; /
+		u32 mod                          :  2 ;    // Default: 0x0; MOD , De-interlacing mode select, 00: weave, 01: bob, 10: DI-MAF,
+                                                   // 11: DI-MAF-BOB
+		u32 res1                         :  6 ;    // Default: ; /
+		u32 diagintp_en                  :  1 ;    // Default: 0x0; DIAGINTP_EN , De-interlacing diagonal interpolate enable, 0: disable,
+                                                   // 1: enable
+		u32 tempdiff_en                  :  1 ;    // Default: 0x0; TEMPDIFF_EN , Temporal difference compare enable, 0: disable, 1:
+                                                   // enable
+		u32 res2                         :  6 ;    // Default: ; /
+	} bits;
+} SCAL_DI_CTRL_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 th0                          :  7 ;    // Default: 0x4F; TH0 , Diagintp_th0,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 th1                          :  7 ;    // Default: 0x5; TH1 , Diagintp_th1
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 th2                          :  8 ;    // Default: 0x10; TH2 , Diagintp_th2
+		u32 th3                          :  8 ;    // Default: 0x8; TH3 , Diagintp_th3
+	} bits;
+} SCAL_DI_DIAGINTP_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 blk_flag_linestrd                 ;    // Default: 0x40; BLK_FLAG_LINESTRD , block flag line-stride,
+	} bits;
+} SCAL_DI_FLAGLINESTRD_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 prefrm_addr                       ;    // Default: 0x0; PREFRM_ADDR , Pre-frame buffer address of luma,
+	} bits;
+} SCAL_DI_PRELUMA_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 th1                          :  8 ;    // Default: 0x14; TH1 , Sawtooth_th1,
+		u32 th2                          :  8 ;    // Default: 0x8; TH2 , sawtooth_th2
+		u32 res0                         : 16 ;    // Default: ; /
+	} bits;
+} SCAL_DI_SAWTOOTH_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 th0                          :  9 ;    // Default: 0x64; TH0 , spatial_th0,
+		u32 res0                         :  7 ;    // Default: ; /
+		u32 th1                          :  9 ;    // Default: 0xA; TH1 , spatial_th1
+		u32 res1                         :  7 ;    // Default: ; /
+	} bits;
+} SCAL_DI_SPATCOMP_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 res0                         :  8 ;    // Default: ; / ,
+		u32 th                           :  5 ;    // Default: 0xF; TH , Temporal_th
+		u32 res1                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_DI_TEMPDIFF_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 en                           :  1 ;    // Default: 0x0; EN , Scaler enable, 0: Disable, 1: Enable, When scaler enable bit
+                                                   // is disabled, the clock of scaler module will be disabled, If this bit is transition
+                                                   // from 0 to 1, the frame process control register and the interrupt enable register
+                                                   // will be initialed to default value, and the state machine of the module is reset,
+                                                   //
+		u32 res0                         : 31 ;    // Default: ; /
+	} bits;
+} SCAL_EN_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 field_cnt                    :  8 ;    // Default: 0x0; FIELD_CNT , Field counter, each bit specify a field to display，0：top
+                                                   // field，1：bottom field,
+		u32 valid_field_cnt              :  3 ;    // Default: 0x0; VALID_FIELD_CNT , Valid field counter bit, the valid value = this
+                                                   // value + 1；
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 field_loop_mod               :  1 ;    // Default: 0x0; FIELD_LOOP_MOD , Field loop mode, 0：the last field； 1：the full
+                                                   // frame
+		u32 res1                         : 19 ;    // Default: ; /
+	} bits;
+} SCAL_FIELD_CTRL_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 reg_rdy_en                   :  1 ;    // Default: 0x0; REG_RDY_EN , Register ready enable, 0: not ready, 1: registers configuration
+                                                   // ready, , As same as filter coefficients configuration, in order to ensure the display
+                                                   // be correct, the correlative display configuration registers are buffered too, the
+                                                   // programmer also can change the value of correlative registers in any time. When
+                                                   // the registers setti, g is finished, the programmer should set the bit if the programmer
+                                                   // need the new configuration in next scaling frame., When the new frame start, the
+                                                   // bit will also be self-cleared.,
+		u32 coef_rdy_en                  :  1 ;    // Default: 0x0; COEF_RDY_EN , Filter coefficients ready enable, 0: not ready, 1:
+                                                   // filter coefficients configuration ready, , In order to avoid the noise, you have
+                                                   // to ensure the same set filter coefficients are used in one frame, so the filter
+                                                   // coefficients are buffered, the programmer can change the coefficients in any time.
+                                                   // When the filter coefficients setting is finished, the pro, rammer should set the
+                                                   // bit if the programmer need the new coefficients in next scaling frame., When the
+                                                   // new frame start, the bit will be self-cleared.
+		u32 wb_en                        :  1 ;    // Default: 0x0; WB_EN , Write back enable, 0: Disable, 1: Enable, , If output to
+                                                   // image is enable, the writing back process will start when write back enable bit
+                                                   // is set and a new frame processing begins. The bit will be self-cleared when writing-back
+                                                   // frame process starts.
+		u32 res0                         :  5 ;    // Default: ; /
+		u32 out_port_sel                 :  2 ;    // Default: 0x0; OUT_PORT_SEL , Scaler output port select, 00: image0, 01: image1,
+                                                   // other: reserved
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 out_ctrl                     :  1 ;    // Default: 0x0; OUT_CTRL , Scaler output control, 0: enable scaler output to image,
+                                                   // 1: disable scaler output to image, , If scaler write back function is enable, scaler
+                                                   // output to image isn’t recommended.
+		u32 in_ctrl                      :  3 ;    // Default: 0x0; IN_CTRL , Scaler input source control, 000: from dram, 100: from
+                                                   // image0 interface of image2lcd (don’t influence the interface timing of image),
+                                                   // 101: from image1 interface of image2lcd(don’t influence the interface timing of
+                                                   // image), 110: from image0(influence the interface timing of image), 111: from image1(influence
+                                                   // the interface timing of image), Other: reserved
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 frm_start                    :  1 ;    // Default: 0x0; FRM_START , Frame start & reset control, 0: reset, 1: start, , If
+                                                   // the bit is written to zero, the whole state machine and data paths of scaler module
+                                                   // will be reset., When the bit is written to 1, Scaler will start a new frame process.
+                                                   //
+		u32 res3                         : 15 ;    // Default: ; /
+	} bits;
+} SCAL_FRM_CTRL_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 data_ps                      :  2 ;    // Default: 0x0; DATA_PS , Pixel sequence, In interleaved YUV422 data mode:, 00: Y1V0Y0U0,
+                                                   // 01: V0Y1U0Y0, 10: Y1U0Y0V0, 11: U0Y1V0Y0, , In interleaved YUV444 data mode:, 00:
+                                                   // VUYA, 01: AYUV, Other: reserved, , In UV combined data mode: (UV component), 00:
+                                                   // V1U1V0U0, 01: U1V1U0V0, Other: reserved, , In interleaved ARGB8888 data mode:, 00:
+                                                   // BGRA, 01: ARGB, Other: reserved,
+		u32 res0                         :  2 ;    // Default: ; /
+		u32 data_fmt                     :  3 ;    // Default: 0x0; DATA_FMT , Input component data format, In non-macro block planar
+                                                   // data mode:, 000: YUV 4:4:4, 001: YUV 4:2:2, 010: YUV 4:2:0, 011: YUV 4:1:1, 100:
+                                                   // CSI RGB data, 101: RGB888, Other: Reserved, , In interleaved data mode:, 000: YUV
+                                                   // 4:4:4, 001: YUV 4:2:2, 101: ARGB8888, Other: reserved, , In non-macro block UV combined
+                                                   // data mode:, 001: YUV 4:2:2, 010: YUV 4:2:0, 011: YUV 4:1:1, Other: reserved, , In
+                                                   // macro block planar data mode:, 001: YUV 4:2:2, 010: YUV 4:2:0, 011: YUV 4:1:1, Other:
+                                                   // Reserved, , In macro block UV combined data mode:, 001: YUV 4:2:2, 010: YUV 4:2:0,
+                                                   // 011: YUV 4:1:1, Other: reserved
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 data_mod                     :  3 ;    // Default: 0x0; DATA_MOD , Input data mode selection, 000: non-macro block planar
+                                                   // data, 001: interleaved data, 010: non-macro block UV combined data, 100: macro block
+                                                   // planar data, 110: macro block UV combined data, other: reserved
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 scan_mod                     :  1 ;    // Default: 0x0; SCAN_MOD , Scanning Mode selection, 0: non-interlace, 1: interlace
+                                                   //
+		u32 res3                         :  3 ;    // Default: ; /
+		u32 byte_seq                     :  1 ;    // Default: 0x0; BYTE_SEQ , Input data byte sequence selection, 0: P3P2P1P0(word),
+                                                   // 1: P0P1P2P3(word)
+		u32 res4                         : 15 ;    // Default: ; /
+	} bits;
+} SCAL_INPUT_FMT_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 res0                         :  7 ;    // Default: ; / ,
+		u32 wb_en                        :  1 ;    // Default: 0x0; WB_EN , Write-back end interrupt enable, 0: Disable, 1: Enable
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 line_en                      :  1 ;    // Default: 0x0; LINE_EN , Line interrupt enable
+		u32 reg_load_en                  :  1 ;    // Default: 0x0; REG_LOAD_EN , Register ready load interrupt enable
+		u32 res2                         : 21 ;    // Default: ; /
+	} bits;
+} SCAL_INT_EN_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 res0                         :  7 ;    // Default: ; / ,
+		u32 wb_status                    :  1 ;    // Default: 0x0; WB_STATUS , Write-back end interrupt status
+		u32 res1                         :  1 ;    // Default: ; /
+		u32 line_status                  :  1 ;    // Default: 0x0; LINE_STATUS , Line interrupt status
+		u32 reg_load_status              :  1 ;    // Default: 0x0; REG_LOAD_STATUS , Register ready load interrupt status
+		u32 res2                         : 21 ;    // Default: ; /
+	} bits;
+} SCAL_INT_STATUS_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 line_stride                       ;    // Default: 0x0; LINE_STRIDE , In macro block type, The stride length is the distance
+                                                   // from the start of the end line in one macro block to the start of the first line
+                                                   // in next macro block(here next macro block is in vertical direction), , In no macro
+                                                   // block type, The stride length is the distance from the start of one line to the
+                                                   // start of the next line.,
+	} bits;
+} SCAL_LINESTRD0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 line_stride                       ;    // Default: 0x0; LINE_STRIDE , In macro block type, The stride length is the distance
+                                                   // from the start of the end line in one macro block to the start of the first line
+                                                   // in next macro block(here next macro block is in vertical direction), , In no macro
+                                                   // block type, The stride length is the distance from the start of one line to the
+                                                   // start of the next line.,
+	} bits;
+} SCAL_LINESTRD1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 line_stride                       ;    // Default: 0x0; LINE_STRIDE , In macro block type, The stride length is the distance
+                                                   // from the start of the end line in one macro block to the start of the first line
+                                                   // in next macro block(here next macro block is in vertical direction), , In no macro
+                                                   // block type, The stride length is the distance from the start of one line to the
+                                                   // start of the next line.,
+	} bits;
+} SCAL_LINESTRD2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 trig_line                    : 13 ;    // Default: 0x0; TRIG_LINE , Trigger line number of line interrupt,
+		u32 res0                         :  2 ;    // Default: ; /
+		u32 field_sel                    :  1 ;    // Default: 0x0; FIELD_SEL , Field select, 0: each field, 1: end field(field counter
+                                                   // in reg0x2c)
+		u32 current_line                 : 12 ;    // Default: 0x0; CURRENT_LINE
+		u32 res1                         :  4 ;    // Default: ; /
+	} bits;
+} SCAL_LINT_CTRL_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 x_offset0                    :  5 ;    // Default: 0x0; X_OFFSET0 , The x offset of the top-left point in the first macro
+                                                   // block, ,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 y_offset0                    :  5 ;    // Default: 0x0; Y_OFFSET0 , The y offset of the top-left point in the first macro
+                                                   // block,
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 x_offset1                    :  5 ;    // Default: 0x0; X_OFFSET1 , The x offset of the bottom-right point in the end macro
+                                                   // block,
+		u32 res2                         : 11 ;    // Default: ; /
+	} bits;
+} SCAL_MB_OFF0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 x_offset0                    :  5 ;    // Default: 0x0; X_OFFSET0 , The x offset of the top-left point in the first macro
+                                                   // block, ,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 y_offset0                    :  5 ;    // Default: 0x0; Y_OFFSET0 , The y offset of the top-left point in the first macro
+                                                   // block,
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 x_offset1                    :  5 ;    // Default: 0x0; X_OFFSET1 , The x offset of the bottom-right point in the end macro
+                                                   // block,
+		u32 res2                         : 11 ;    // Default: ; /
+	} bits;
+} SCAL_MB_OFF1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 x_offset0                    :  5 ;    // Default: 0x0; X_OFFSET0 , The x offset of the top-left point in the first macro
+                                                   // block, ,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 y_offset0                    :  5 ;    // Default: 0x0; Y_OFFSET0 , The y offset of the top-left point in the first macro
+                                                   // block,
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 x_offset1                    :  5 ;    // Default: 0x0; X_OFFSET1 , The x offset of the bottom-right point in the end macro
+                                                   // block,
+		u32 res2                         : 11 ;    // Default: ; /
+	} bits;
+} SCAL_MB_OFF2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 data_fmt                     :  3 ;    // Default: 0x0; DATA_FMT , Data format, 000: planar RGB888 conversion data format,
+                                                   // 001: interleaved BGRA8888 conversion data format(A component always be pad 0xff),
+                                                   // 010: interleaved ARGB8888 conversion data format(A component always be pad 0xff),
+                                                   // 100: planar YUV 444, 101: planar YUV 420(only support YUV input and not interleaved
+                                                   // mode), 110: planar YUV 422(only support YUV input), 111: planar YUV 411(only support
+                                                   // YUV input), Other: reserved, ,
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 scan_mod                     :  1 ;    // Default: 0x0; SCAN_MOD , Output interlace enable, 0: disable, 1: enable, When output
+                                                   // interlace enable, scaler selects YUV initial phase according to LCD field signal
+                                                   //
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 byte_seq                     :  1 ;    // Default: 0x0; BYTE_SEQ , Output data byte sequence selection, 0: P3P2P1P0(word),
+                                                   // 1: P0P1P2P3(word), For ARGB, when this bit is 0, the byte sequence is BGRA, and
+                                                   // when this bit is 1, the byte sequence is ARGB;
+		u32 res2                         : 23 ;    // Default: ; /
+	} bits;
+} SCAL_OUTPUT_FMT_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 frm_busy                     :  1 ;    // Default: 0x0; FRM_BUSY , Frame busy., This flag indicates that the frame is being
+                                                   // processed. , , The bit will be set when frame process reset & start is set, and
+                                                   // be cleared when frame process reset or disabled.,
+		u32 wb_status                    :  1 ;    // Default: 0x0; WB_STATUS , Write-back process status, 0: write-back end or write-back
+                                                   // disable, 1: write-back in process, , This flag indicates that a full frame has not
+                                                   // been written back to memory. The bit will be set when write-back enable bit is set,
+                                                   // and be cleared when write-back process end.
+		u32 cfg_pending                  :  1 ;    // Default: 0x0; CFG_PENDING , Register configuration pending, 0: no pending, 1: configuration
+                                                   // pending, , This bit indicates the registers for the next frame has been configured.
+                                                   // This bit will be set when configuration ready bit is set and this bit will be cleared
+                                                   // when a new frame process begin.
+		u32 res0                         :  1 ;    // Default: ; /
+		u32 dram_status                  :  1 ;    // Default: 0x0; DRAM_STATUS , Access dram status, 0: idle, 1: busy, This flag indicates
+                                                   // whether scaler is accessing dram
+		u32 lcd_field                    :  1 ;    // Default: 0x0; LCD_FIELD , LCD field status, 0: top field, 1: bottom field
+		u32 res1                         :  6 ;    // Default: ; /
+		u32 wb_err_status                :  1 ;    // Default: 0x0; WB_ERR_STATUS , write-back error status, 0: valid write back, 1:
+                                                   // un-valid write back, This bit is cleared through write 0 to reset/start bit in frame
+                                                   // control register
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 wb_err_losedata              :  1 ;    // Default: 0x0; WB_ERR_LOSEDATA , Lose data flag when capture in process
+		u32 wb_err_sync                  :  1 ;    // Default: 0x0; WB_ERR_SYNC , Sync reach flag when capture in process
+		u32 line_on_sync                 : 13 ;    // Default: 0x0; LINE_ON_SYNC , Line number(when sync reached)
+		u32 res3                         :  3 ;    // Default: ; /
+	} bits;
+} SCAL_STATUS_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 ble_en                       :  1 ;    // Default: 0x0; BLE_EN , BLE enable,
+		u32 res0                         :  7 ;    // Default: ; /
+		u32 ble_thr                      :  8 ;    // Default: 0x0; BLE_THR , BLE threshold, Note: MUST BE set 0~127.
+		u32 ble_gain                     :  8 ;    // Default: 0x0; BLE_GAIN , BLE gain
+		u32 res1                         :  8 ;    // Default: ; /
+	} bits;
+} SCAL_VPP_BLE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 dcti_en                      :  1 ;    // Default: 0x0; DCTI_EN , 0: Disable, 1: Enable,
+		u32 res0                         :  5 ;    // Default: ; /
+		u32 dcti_hill_en                 :  1 ;    // Default: 0x0; DCTI_HILL_EN , DCTI hill protection enable, 0: Disable, 1: Enable
+                                                   //
+		u32 dcti_suphill_en              :  1 ;    // Default: 0x0; DCTI_SUPHILL_EN , DCTI super hill protection enable, 0: Disable,
+                                                   // 1: Enable
+		u32 dcti_filter1_sel             :  2 ;    // Default: 0x0; DCTI_FILTER1_SEL , DCTI 1st filter algorithm selection, 00: algorithm0,
+                                                   // 01: algorithm1, 10: algorithm2, 11: reserved
+		u32 dcti_filter2_sel             :  2 ;    // Default: 0x0; DCTI_FILTER2_SEL , DCTI 2nd filter algorithm selection, 00: algorithm0,
+                                                   // 01: algorithm1, 10: algorithm2, 11: reserved
+		u32 dcti_path_limit              :  4 ;    // Default: 0x0; DCTI_PATH_LIMIT , Max path limit equal to 12
+		u32 dcti_gain                    :  6 ;    // Default: 0x0; DCTI_GAIN
+		u32 res1                         :  2 ;    // Default: ; /
+		u32 uv_diff_sign_mode_sel        :  2 ;    // Default: 0x0; UV_DIFF_SIGN_MODE_SEL , UV separate mode in different sign condition,
+                                                   // 00: Using U always, 01: Using V always, 10: Using 0 always, 11: Using Max/Min mode
+                                                   //
+		u32 uv_same_sign_mode_sel        :  2 ;    // Default: 0x0; UV_SAME_SIGN_MODE_SEL , UV separate mode in same sign condition,
+                                                   // 00: Using U always, 01: Using V always, 10: Using 0 always, 11: Using Max/Min mode
+                                                   //
+		u32 uv_diff_sign_maxmin_mode_sel :  1 ;    // Default: 0x0; UV_DIFF_SIGN_ MAX/MIN_MODE_SEL , UV direction detection using max
+                                                   // or min of |U|/|V| in different sign condition, when related separate mode select
+                                                   // “Using Max/Min mode” and U/V path shift are in the different sign, path shift
+                                                   // use, 0: min(|U|,|V|), 1: max(|U|,|V|)
+		u32 uv_same_sign_maxmin_mode_sel :  1 ;    // Default: 0x0; UV_SAME_SIGN_MAX/MIN_MODE_SEL , UV direction detection using max
+                                                   // or min of |U|/|V| in same sign condition, when related separate mode select “Using
+                                                   // Max/Min mode” and U/V path shift are in the same sign, path shift use, 0: min(|U|,|V|),
+                                                   // 1: max(|U|,|V|)
+		u32 res2                         :  1 ;    // Default: ; /
+		u32 uv_separate_en               :  1 ;    // Default: 0x0; UV_SEPARATE_EN , UV separate enable, 0: U/V will be under direction
+                                                   // detection control, 1: U/V wont be under direction detection control
+	} bits;
+} SCAL_VPP_DCTI_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 en                           :  1 ;    // Default: 0x0; EN , VPP enable, 0: Disable, 1: Enable,
+		u32 res0                         : 31 ;    // Default: ; /
+	} bits;
+} SCAL_VPP_EN_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 lp_en                        :  1 ;    // Default: 0x0; LP_EN , 0: Disable, 1: Enable,
+		u32 res0                         :  7 ;    // Default: ; /
+		u32 tau                          :  5 ;    // Default: 0x0; TAU , LP band-pass filter1 gain(TAU)
+		u32 res1                         :  3 ;    // Default: ; /
+		u32 alpha                        :  5 ;    // Default: 0x0; ALPHA , LP band-pass filter2 gain(ALPHA)
+		u32 res2                         :  3 ;    // Default: ; /
+		u32 beta                         :  5 ;    // Default: 0x0; BETA , LP high-pass filter gain(BETA)
+		u32 res3                         :  3 ;    // Default: ; /
+	} bits;
+} SCAL_VPP_LP1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 lpf_gain                     :  5 ;    // Default: 0x0; LPF_GAIN , LP low-pass-filter gain,
+		u32 res0                         :  3 ;    // Default: ; /
+		u32 corthr                       :  8 ;    // Default: 0x0; CORTHR , LP coring threshold(CORTHR)
+		u32 neggain                      :  2 ;    // Default: 0x0; NEGGAIN , LP LUT selection for undershot(NEGGAIN), 00: NEGGAIN0,
+                                                   // 01: NEGGAIN025, 10: NEGGAIN05, 11: NEGGAIN1
+		u32 res1                         :  4 ;    // Default: ; /
+		u32 delta                        :  2 ;    // Default: 0x0; DELTA , LP LUT selection for overshoot(DELTA), 00: DELTA0, 01: DELTA025,
+                                                   // 10: DELTA05, 11: DELTA1
+		u32 limit_thr                    :  8 ;    // Default: 0x0; LIMIT_THR , LP limit threshold
+	} bits;
+} SCAL_VPP_LP2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 wle_en                       :  1 ;    // Default: 0x0; WLE_EN , WLE enable,
+		u32 res0                         :  7 ;    // Default: ; /
+		u32 wle_thr                      :  8 ;    // Default: 0x0; WLE_THR , WLE threshold, Note: MUST BE set 128~255.
+		u32 wle_gain                     :  8 ;    // Default: 0x0; WLE_GAIN , WLE gain
+		u32 res1                         :  8 ;    // Default: ; /
+	} bits;
+} SCAL_VPP_WLE_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 wb_addr                           ;    // Default: 0x0; WB_ADDR , Write-back address setting for scaled data., ,
+	} bits;
+} SCAL_WB_ADDR0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 wb_addr                           ;    // Default: 0x0; WB_ADDR , Write-back address setting for scaled data., ,
+	} bits;
+} SCAL_WB_ADDR1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 wb_addr                           ;    // Default: 0x0; WB_ADDR , Write-back address setting for scaled data., ,
+	} bits;
+} SCAL_WB_ADDR2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 line_strd                         ;    // Default: 0x0; LINE_STRD , Ch3 write back line-stride,
+	} bits;
+} SCAL_WB_LINESTRD0_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 line_strd                         ;    // Default: 0x0; LINE_STRD , Ch4 write back line-stride,
+	} bits;
+} SCAL_WB_LINESTRD1_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 line_strd                         ;    // Default: 0x0; LINE_STRD , Ch5 write back line-stride,
+	} bits;
+} SCAL_WB_LINESTRD2_REG;
+
+typedef union
+{
+	u32 dwval;
+	struct
+	{
+		u32 en                           :  1 ;    // Default: 0x0; EN , Write back line-stride enable, 0: disable, 1: enable,
+		u32 res0                         : 31 ;    // Default: ; /
+	} bits;
+} SCAL_WB_LINESTRD_EN_REG;
+
+typedef union
+{
+	__u32 dwval;
+	struct
+	{
+		__u32 res0                         ;    // Default: 0x0; LINE_STRD , Ch5 write back line-stride,
+	} bits;
+} SCAL_RESERVED_REG;
+
+//device define
+typedef struct __DE_SCAL_DEV
+{
+	SCAL_EN_REG              		modl_en            ;//0x00
+	SCAL_FRM_CTRL_REG        		frm_ctrl           ;//0x04
+	SCAL_BYPASS_REG          		bypass             ;//0x08
+	SCAL_AGTH_SEL_REG        		agth_sel           ;//0x0c
+	SCAL_LINT_CTRL_REG       		lint_ctrl          ;//0x10
+	SCAL_RESERVED_REG               res0x14[3]         ;//0x14~0x1f
+	SCAL_BUF_ADDR0_REG       		buf_addr0          ;//0x20
+	SCAL_BUF_ADDR1_REG       		buf_addr1          ;//0x24
+	SCAL_BUF_ADDR2_REG       		buf_addr2          ;//0x28
+	SCAL_FIELD_CTRL_REG      		field_ctrl         ;//0x2c
+	SCAL_MB_OFF0_REG         		mb_off0            ;//0x30
+	SCAL_MB_OFF1_REG         		mb_off1            ;//0x34
+	SCAL_MB_OFF2_REG         		mb_off2            ;//0x38
+	SCAL_RESERVED_REG               res0x3c            ;//0x3c
+	SCAL_LINESTRD0_REG       		linestrd0          ;//0x40
+	SCAL_LINESTRD1_REG       		linestrd1          ;//0x44
+	SCAL_LINESTRD2_REG       		linestrd2          ;//0x48
+	SCAL_INPUT_FMT_REG       		input_fmt          ;//0x4c
+	SCAL_WB_ADDR0_REG        		wb_addr0           ;//0x50
+	SCAL_WB_ADDR1_REG        		wb_addr1           ;//0x54
+	SCAL_WB_ADDR2_REG        		wb_addr2           ;//0x58
+	SCAL_OUTPUT_FMT_REG      		output_fmt         ;//0x5c
+	SCAL_INT_EN_REG          		int_en             ;//0x60
+	SCAL_INT_STATUS_REG      		int_status         ;//0x64
+	SCAL_STATUS_REG          		status             ;//0x68
+	SCAL_RESERVED_REG               res0x6c            ;//0x6c
+	SCAL_CSC_COEF03_REG             csc_coef[12]       ;//0x70~0x9f
+	SCAL_DI_CTRL_REG         		di_ctrl            ;//0xa0
+	SCAL_DI_DIAGINTP_REG     		di_diagintp        ;//0xa4
+	SCAL_DI_TEMPDIFF_REG     		di_tempdiff        ;//0xa8
+	SCAL_DI_SAWTOOTH_REG     		di_sawtooth        ;//0xac
+	SCAL_DI_SPATCOMP_REG     		di_spatcomp        ;//0xb0
+	SCAL_DI_BURSTLEN_REG     		di_burstlen        ;//0xb4
+	SCAL_DI_PRELUMA_REG      		di_preluma         ;//0xb8
+	SCAL_DI_BLKFLAG_REG      		di_blkflag         ;//0xbc
+	SCAL_DI_FLAGLINESTRD_REG 		di_flaglinestrd    ;//0xc0
+	SCAL_RESERVED_REG               res0xc4[3]         ;//0xc4~0xcf
+	SCAL_WB_LINESTRD_EN_REG  		wb_linestrd_en     ;//0xd0
+	SCAL_WB_LINESTRD0_REG    		wb_linestrd0       ;//0xd4
+	SCAL_WB_LINESTRD1_REG    		wb_linestrd1       ;//0xd8
+	SCAL_WB_LINESTRD2_REG    		wb_linestrd2       ;//0xdc
+	SCAL_3D_CTRL_REG         		trd_ctrl           ;//0xe0
+	SCAL_3D_BUF_ADDR0_REG    		trd_buf_addr0      ;//0xe4
+	SCAL_3D_BUF_ADDR1_REG    		trd_buf_addr1      ;//0xe8
+	SCAL_3D_BUF_ADDR2_REG    		trd_buf_addr2      ;//0xec
+	SCAL_3D_MB_OFF0_REG      		trd_mb_off0        ;//0xf0
+	SCAL_3D_MB_OFF1_REG      		trd_mb_off1        ;//0xf4
+	SCAL_3D_MB_OFF2_REG      		trd_mb_off2        ;//0xf8
+	SCAL_RESERVED_REG               res0xfc            ;//0xfc
+	SCAL_CH0_INSIZE_REG      		ch0_insize         ;//0x100
+	SCAL_CH0_OUTSIZE_REG     		ch0_outsize        ;//0x104
+	SCAL_CH0_HORZFACT_REG    		ch0_horzfact       ;//0x108
+	SCAL_CH0_VERTFACT_REG    		ch0_vertfact       ;//0x10c
+	SCAL_CH0_HORZPHASE_REG   		ch0_horzphase      ;//0x110
+	SCAL_CH0_VERTPHASE0_REG  		ch0_vertphase0     ;//0x114
+	SCAL_CH0_VERTPHASE1_REG  		ch0_vertphase1     ;//0x118
+	SCAL_RESERVED_REG               res0x11c           ;//0x11c
+	SCAL_CH0_HORZTAP0_REG    		ch0_horztap0       ;//0x120
+	SCAL_CH0_HORZTAP1_REG    		ch0_horztap1       ;//0x124
+	SCAL_CH0_VERTTAP_REG     		ch0_verttap        ;//0x128
+	SCAL_RESERVED_REG               res0x12c[53]       ;//0x12c~0x1FF
+	SCAL_CH1_INSIZE_REG      		ch1_insize         ;//0x200
+	SCAL_CH1_OUTSIZE_REG     		ch1_outsize        ;//0x204
+	SCAL_CH1_HORZFACT_REG    		ch1_horzfact       ;//0x208
+	SCAL_CH1_VERTFACT_REG    		ch1_vertfact       ;//0x20c
+	SCAL_CH1_HORZPHASE_REG   		ch1_horzphase      ;//0x210
+	SCAL_CH1_VERTPHASE0_REG  		ch1_vertphase0     ;//0x214
+	SCAL_CH1_VERTPHASE1_REG  		ch1_vertphase1     ;//0x218
+	SCAL_RESERVED_REG               res0x21c           ;//0x21c
+	SCAL_CH1_HORZTAP0_REG    		ch1_horztap0       ;//0x220
+	SCAL_CH1_HORZTAP1_REG    		ch1_horztap1       ;//0x224
+	SCAL_CH1_VERTTAP_REG     		ch1_verttap        ;//0x228
+	SCAL_RESERVED_REG               res0x22c[117]      ;//0x22c~0x3FF
+	SCAL_CH0_HORZCOEF0_REGN  		ch0_horzcoef0[32]  ;//0x400~0x47f
+	SCAL_CH0_HORZCOEF1_REGN  		ch0_horzcoef1[32]  ;//0x480~0x4ff
+	SCAL_CH0_VERTCOEF_REGN   		ch0_vertcoef[32]   ;//0x500~0x5ff
+	SCAL_RESERVED_REG               res0x580[32]       ;//0x580~0x57f
+	SCAL_CH1_HORZCOEF0_REGN  		ch1_horzcoef0[32]  ;//0x600~0x67f
+	SCAL_CH1_HORZCOEF1_REGN  		ch1_horzcoef1[32]  ;//0x680~6ff
+	SCAL_CH1_VERTCOEF_REGN   		ch1_vertcoef[32]   ;//0x700~0x77f
+	SCAL_RESERVED_REG               res0x780[32]       ;//0x780~0x7ff
+	SCAL_RESERVED_REG               res0x800[128]      ;//0x800~0x9ff
+	SCAL_VPP_EN_REG          		vpp_en             ;//0xA00
+	SCAL_VPP_DCTI_REG        		vpp_dcti           ;//0xa04
+	SCAL_VPP_LP1_REG         		vpp_lp1            ;//0xa08
+	SCAL_VPP_LP2_REG         		vpp_lp2            ;//0xa0c
+	SCAL_VPP_WLE_REG         		vpp_wle            ;//0xa10
+	SCAL_VPP_BLE_REG         	    vpp_ble            ;//0xa14
+}__de_scal_dev_t;
+
+
+typedef struct __SCAL_MATRIX4X4
+{
+	__s32 x00;
+	__s32 x01;
+	__s32 x02;
+	__s32 x03;
+	__s32 x10;
+	__s32 x11;
+	__s32 x12;
+	__s32 x13;
+	__s32 x20;
+	__s32 x21;
+	__s32 x22;
+	__s32 x23;
+	__s32 x30;
+	__s32 x31;
+	__s32 x32;
+	__s32 x33;
+}__scal_matrix4x4;
+
+extern __s32 iDE_SCAL_Matrix_Mul(__scal_matrix4x4 in1, __scal_matrix4x4 in2, __scal_matrix4x4 *result);
+extern __s32 iDE_SCAL_Csc_Lmt(__s32 *value, __s32 min, __s32 max, __s32 shift, __s32 validbit);
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_hwc.c b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_hwc.c
new file mode 100644
index 0000000..a26db50
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_hwc.c
@@ -0,0 +1,131 @@
+
+#include "de_be.h"
+
+__s32 DE_BE_HWC_Enable(__u32 sel,__bool enable)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF);
+    tmp &= (~(1<<16));
+    DE_BE_WUINT32(sel, DE_BE_MODE_CTL_OFF , tmp | (enable<<16));
+
+    return 0;
+}
+
+__s32  DE_BE_HWC_Set_Pos(__u32 sel, __disp_pos_t *pos)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_HWC_CRD_CTL_OFF);
+    DE_BE_WUINT32(sel, DE_BE_HWC_CRD_CTL_OFF,(tmp & 0xf800f800)|(pos->y & 0x7ff)<<16|(pos->x & 0x7ff));
+
+    return 0;
+}
+
+__s32 DE_BE_HWC_Get_Pos(__u32 sel, __disp_pos_t *pos)
+{
+    __u32 readval;
+
+    readval = DE_BE_RUINT32(sel, DE_BE_HWC_CRD_CTL_OFF);
+    pos->y = (readval & 0x07ff0000)>>16;
+    pos->x = (readval & 0x07ff);
+
+    return 0;
+
+}
+
+__s32 DE_BE_HWC_Set_Palette(__u32 sel, __u32 address,__u32 offset,__u32 size)
+{
+    __u16 i;
+    __u32 read_val;
+	__u32 reg_addr;
+
+	reg_addr = DE_BE_HWC_PALETTE_TABLE_ADDR_OFF+offset;
+
+    for(i = 0; i < size; i = i + 4)
+    {
+       read_val = DE_RUINT32( address + i);
+       DE_BE_WUINT32(sel, reg_addr, read_val);
+	   reg_addr = reg_addr + 4;
+    }
+
+    return 0;
+}
+
+__s32 DE_BE_HWC_Set_Src(__u32 sel, de_hwc_src_t *hwc_pat)
+{
+    __u32 tmp;
+    __u32 x_size=0,y_size=0,pixel_fmt=0;
+    __u32 i;
+    __u32 size;
+
+	switch (hwc_pat->mode)
+	{
+		 case DE_H32_V32_8BPP:
+		      x_size = DE_N32PIXELS;
+		      y_size = DE_N32PIXELS;
+		      pixel_fmt = DE_IF8BPP;
+		      size = 32*32;
+		 	  break;
+
+		 case DE_H64_V64_2BPP:
+		      x_size = DE_N64PIXELS;
+		      y_size = DE_N64PIXELS;
+		      pixel_fmt = DE_IF2BPP;
+		      size = 64*64/4;
+		 	  break;
+
+		 case DE_H64_V32_4BPP:
+		      x_size = DE_N64PIXELS;
+		      y_size = DE_N32PIXELS;
+		      pixel_fmt = DE_IF4BPP;
+		      size = 64*32/2;
+		 	  break;
+
+		 case DE_H32_V64_4BPP:
+		      x_size = DE_N32PIXELS;
+		      y_size = DE_N64PIXELS;
+		      pixel_fmt = DE_IF4BPP;
+		      size = 32*64/2;
+		 	  break;
+
+		 default:
+		 	break;
+	}
+
+	if(hwc_pat->paddr & 0x3)//地址非32位对齐
+	{
+		for(i = 0; i < size; i+=4)
+		{
+			__u32 value = 0;
+
+			tmp = DE_RUINT8(hwc_pat->paddr + i );
+			value = tmp;
+			tmp = DE_RUINT8(hwc_pat->paddr + i + 1 );
+			value |= (tmp<<8);
+			tmp = DE_RUINT8(hwc_pat->paddr + i + 2);
+			value |= (tmp<<16);
+			tmp = DE_RUINT8(hwc_pat->paddr + i + 3);
+			value |= (tmp<<24);
+			DE_BE_WUINT32(sel, DE_BE_HWC_MEMORY_ADDR_OFF + i, value);
+		}
+	}
+	else
+	{
+		for(i = 0; i < size; i+=4)
+		{
+			tmp = DE_RUINT32(hwc_pat->paddr + i );
+			DE_BE_WUINT32(sel, DE_BE_HWC_MEMORY_ADDR_OFF + i, tmp);
+		}
+	}
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_HWC_FRMBUF_OFF);
+    DE_BE_WUINT32(sel, DE_BE_HWC_FRMBUF_OFF,(tmp & 0xffffffc3) | (x_size<<2) | (y_size<<4));//xsize and ysize
+
+    tmp=DE_BE_RUINT32(sel, DE_BE_HWC_FRMBUF_OFF);
+    DE_BE_WUINT32(sel, DE_BE_HWC_FRMBUF_OFF, (tmp & 0xfffffffc) | pixel_fmt);//format
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_HWC_CRD_CTL_OFF);
+    DE_BE_WUINT32(sel, DE_BE_HWC_CRD_CTL_OFF, (tmp & 0x07ff07ff ) | 0 << 27 | 0<<11);  //offset
+    return 0;
+}
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_layer.c b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_layer.c
new file mode 100644
index 0000000..36d961f31
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_layer.c
@@ -0,0 +1,436 @@
+
+#include "de_be.h"
+
+__s32 DE_BE_Format_To_Bpp(__u32 sel, __u8 format)
+{
+    __u8 bpp = 0;
+
+	switch(format)
+	{
+		case  DE_MONO_1BPP:
+			bpp = 1;
+			break;
+
+		case DE_MONO_2BPP:
+			bpp = 2;
+			break;
+
+		case DE_MONO_4BPP:
+			bpp = 4;
+			break;
+
+		case DE_MONO_8BPP:
+			bpp = 8;
+			break;
+
+		case DE_COLOR_RGB655:
+		case DE_COLOR_RGB565:
+		case DE_COLOR_RGB556:
+		case DE_COLOR_ARGB1555:
+		case DE_COLOR_RGBA5551:
+		case DE_COLOR_ARGB4444:
+			bpp=16;
+			break;
+
+		case DE_COLOR_RGB0888:
+			bpp = 32;
+			break;
+
+		case DE_COLOR_ARGB8888:
+			bpp = 32;
+			break;
+
+		case DE_COLOR_RGB888:
+			bpp = 24;
+			break;
+
+		default:
+		    bpp = 0;
+			break;
+	}
+
+    return bpp;
+}
+
+__u32 DE_BE_Offset_To_Addr(__u32 src_addr,__u32 width,__u32 x,__u32 y,__u32 bpp)
+{
+    __u32 addr;
+
+    addr = src_addr + ((y*(width*bpp))>>3) + ((x*bpp)>>3);
+
+    return addr;
+}
+
+__u32  DE_BE_Addr_To_Offset(__u32 src_addr,__u32 off_addr,__u32 width,__u32 bpp,__disp_pos_t *pos)
+{
+    __u32    dist;
+    __disp_pos_t  offset;
+
+    dist        = off_addr-src_addr;
+    offset.y    = (dist<<3)/(width*bpp);
+    offset.x    = ((dist<<3)%(width*bpp))/bpp;
+    pos->x      = offset.x;
+    pos->y      = offset.y;
+
+    return 0;
+
+}
+
+__s32 DE_BE_Layer_Set_Work_Mode(__u32 sel, __u8 layidx,__u8 mode)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xff3fffff)|mode<<22);
+
+    return 0;
+}
+
+static __s32 DE_BE_Layer_Set_Addr(__u32 sel, __u8 layidx,__u32 addr)   //bit
+{
+	__u32 tmp_l,tmp_h,tmp;
+	tmp_l = addr<<3;
+	tmp_h = (__u8)(addr&0xe0000000)>>29;
+    DE_BE_WUINT32IDX(sel, DE_BE_FRMBUF_LOW32ADDR_OFF,layidx,tmp_l);
+
+    tmp = DE_BE_RUINT32(sel,DE_BE_FRMBUF_HIGH4ADDR_OFF) & (~(0xff<<(layidx*8)));
+    DE_BE_WUINT32(sel, DE_BE_FRMBUF_HIGH4ADDR_OFF, tmp | (tmp_h << (layidx*8)));
+
+    return 0;
+}
+
+static __s32 DE_BE_Layer_Set_Line_Width(__u32 sel, __u8 layidx,__u32 width)    //byte
+{
+    DE_BE_WUINT32IDX(sel, DE_BE_FRMBUF_WLINE_OFF,layidx,width);
+    return 0;
+}
+
+
+__s32 DE_BE_Layer_Set_Format(__u32 sel, __u8 layidx,__u8 format,__bool br_swap,__u8 order)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF1,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF1,layidx,(tmp&0xfffff000)|format<<8|br_swap<<2|order);
+
+    return 0;
+}
+
+__s32 DE_BE_Layer_Set_Framebuffer(__u32 sel, __u8 layidx, layer_src_t *layer_fb)
+{
+	__s32 bpp;
+	__u32 addr;
+
+	bpp = DE_BE_Format_To_Bpp(sel, layer_fb->format);
+	if(bpp <= 0)
+	{
+		return -1;
+	}
+	addr = DE_BE_Offset_To_Addr(layer_fb->fb_addr, layer_fb->fb_width, layer_fb->offset_x, layer_fb->offset_y,bpp);
+    DE_BE_Layer_Set_Format(sel, layidx,layer_fb->format,layer_fb->br_swap,layer_fb->pixseq);
+
+    DE_BE_Layer_Set_Addr(sel, layidx,addr);
+    DE_BE_Layer_Set_Line_Width(sel, layidx,layer_fb->fb_width*bpp);
+
+	return 0;
+}
+
+
+__s32 DE_BE_Layer_Set_Screen_Win(__u32 sel, __u8 layidx, __disp_rect_t * win)
+{
+    __u32 tmp;
+
+    tmp = ((((__u32)(win->y))>>31)<<31)|((((__u32)(win->y))&0x7fff)<<16)|((((__u32)(win->x))>>31)<<15)|(((__u32)(win->x))&0x7fff);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_CRD_CTL_OFF,layidx,tmp);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_SIZE_OFF,layidx,(win->height-1)<<16|(win->width-1));
+
+    return 0;
+}
+__s32 DE_BE_Layer_Video_Enable(__u32 sel, __u8 layidx,__bool video_en)
+{
+
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xfffffffd)|video_en<<1);
+
+
+    return 0;
+}
+
+__s32 DE_BE_Layer_Video_Ch_Sel(__u32 sel, __u8 layidx,__bool scaler_index)
+{
+
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xffffffef)|scaler_index<<4);
+
+
+    return 0;
+}
+
+__s32 DE_BE_Layer_Yuv_Ch_Enable(__u32 sel, __u8 layidx,__bool yuv_en)
+{
+
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xfffffffb)|yuv_en<<2);
+
+
+    return 0;
+}
+
+__s32 DE_BE_Layer_Set_Prio(__u32 sel, __u8 layidx,__u8 prio)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xfffff3ff)|prio<<10);
+
+    return 0;
+ }
+
+__s32 DE_BE_Layer_Set_Pipe(__u32 sel, __u8 layidx,__u8 pipe)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xffff7fff)|pipe<<15);
+
+    return 0;
+}
+
+
+__s32 DE_BE_Layer_ColorKey_Enable(__u32 sel, __u8 layidx, __bool enable)
+{
+
+    __u32 tmp;
+
+    if(enable)
+    {
+        tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+        DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xfff3ffff)|1<<18);
+    }
+    else
+    {
+        tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+        DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xfff3ffff));
+    }
+
+    return 0;
+}
+
+__s32 DE_BE_Layer_Alpha_Enable(__u32 sel, __u8 layidx, __bool enable)
+{
+    __u32 tmp;
+
+    if(enable)
+    {
+        tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+        DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xfffffffe)|0x01);
+    }
+    else
+    {
+        tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+        DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0xfffffffe));
+    }
+
+    return 0;
+}
+
+__s32 DE_BE_Layer_Set_Alpha_Value(__u32 sel, __u8 layidx,__u8 alpha_val)//todo,why???
+{
+
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx);
+    DE_BE_WUINT32IDX(sel, DE_BE_LAYER_ATTRCTL_OFF0,layidx,(tmp&0x0ffffff)|alpha_val<<24);
+
+    return 0;
+}
+
+__s32 DE_BE_Layer_Enable(__u32 sel, __u8 layidx, __bool enable)
+{
+	if(enable)
+	{
+	    DE_BE_WUINT32(sel, DE_BE_MODE_CTL_OFF,DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF)|(1<<layidx)<<8);
+	}
+	else
+	{
+	    DE_BE_WUINT32(sel, DE_BE_MODE_CTL_OFF,DE_BE_RUINT32(sel, DE_BE_MODE_CTL_OFF)&(~((1<<layidx)<<8)));
+	}
+
+    return 0;
+}
+
+
+static __s32 DE_BE_YUV_CH_Cfg_Csc_Coeff(__u32 sel, __u8 cs_mode)//todo
+{
+	__u32 csc_coef_off;
+	__u32 *pdest_end;
+    __u32 *psrc_cur;
+    __u32 *pdest_cur;
+    __u32 temp;
+
+	csc_coef_off = (((cs_mode&0x3)<<7) + ((cs_mode&0x3)<<6)) + 0/*yuv in*/ + 0/*rgb out*/;
+
+	pdest_cur = (__u32*)(DE_Get_Reg_Base(sel)+DE_BE_YG_COEFF_OFF);
+	psrc_cur = (__u32*)(&csc_tab[csc_coef_off>>2]);
+	pdest_end = pdest_cur + 12;
+
+    while(pdest_cur < pdest_end)
+    {
+    	temp = *(volatile __u32 *)pdest_cur;
+		temp &= 0xffff0000;
+		*(volatile __u32 *)pdest_cur++ = ((*psrc_cur++)&0xffff) | temp;
+    }
+
+	return 0;
+}
+
+//==================================================================
+//function name:    DE_BE_YUV_CH_Set_Format
+//author:
+//date:             2009-9-28
+//description:      de be input YUV channel format setting
+//parameters:	----format(0-4)
+//					0:	planar YUV 411
+//					1:	planar YUV 422
+//					2:	planar YUV 444
+//					3:	interleaved YUV 422
+//					4:	interleaved YUV 444
+//				----pixel_seq(0-3)
+//					in planar data format mode
+//						0:Y3Y2Y1Y0
+//						1:Y0Y1Y2Y3
+//					in interleaved YUV 422 data format mode
+//						0:DE_SCAL_UYVY
+//						1:DE_SCAL_YUYV
+//						2:DE_SCAL_VYUY
+//						3:DE_SCAL_YVYU
+//					in interleaved YUV 444 format mode
+//						0:DE_SCAL_AYUV
+//						1:DE_SCAL_VUYA
+//return:           if success return DIS_SUCCESS
+//                  if fail return the number of fail
+//modify history:
+//==================================================================
+static __s32 DE_BE_YUV_CH_Set_Format(__u32 sel, __u8 format,__u8 pixel_seq)
+{
+    __u32 tmp;
+
+    tmp = DE_BE_RUINT32(sel, DE_BE_YUV_CTRL_OFF);
+    tmp &= 0xffff8cff;//clear bit14:12, bit9:8
+	DE_BE_WUINT32(sel, DE_BE_YUV_CTRL_OFF, tmp | (format<<12) | (pixel_seq<<8));
+
+	return 0;
+}
+
+static __s32 DE_BE_YUV_CH_Set_Addr(__u32 sel, __u8 ch_no,__u32 addr)
+{
+	DE_BE_WUINT32IDX(sel, DE_BE_YUV_ADDR_OFF,ch_no,addr);//addr in BYTE
+	return 0;
+}
+
+static __s32 DE_BE_YUV_CH_Set_Line_Width(__u32 sel, __u8 ch_no,__u32 width)
+{
+	DE_BE_WUINT32IDX(sel, DE_BE_YUV_LINE_WIDTH_OFF,ch_no,width);
+	return 0;
+}
+
+__s32 DE_BE_YUV_CH_Set_Src(__u32 sel, de_yuv_ch_src_t * in_src)
+{
+	__u32 ch0_base, ch1_base, ch2_base;
+	__u32 image_w;
+	__u32 offset_x, offset_y;
+    __u8 in_fmt,in_mode,pixseq;
+    __u32 ch0_addr, ch1_addr, ch2_addr;
+    __u32 ch0_line_stride, ch1_line_stride, ch2_line_stride;
+    __u8 w_shift, h_shift;
+	__u32 de_scal_ch0_offset;
+	__u32 de_scal_ch1_offset;
+	__u32 de_scal_ch2_offset;
+
+    ch0_base = in_src->ch0_base;
+    ch1_base = in_src->ch1_base;
+    ch2_base = in_src->ch2_base;
+    image_w = in_src->line_width;
+    offset_x = in_src->offset_x;
+    offset_y = in_src->offset_y;
+    in_fmt = in_src->format;
+    in_mode = in_src->mode;
+    pixseq = in_src->pixseq;
+
+    w_shift = (in_fmt==0x1 || in_fmt==0x3) ? 1 : ((in_fmt==0x0)? 2: 0);
+    h_shift = 0;
+    //modify offset and input size
+    offset_x = (offset_x>>w_shift)<<w_shift;
+    offset_y = (offset_y>>h_shift)<<h_shift;
+    image_w =((image_w+((1<<w_shift)-1))>>w_shift)<<w_shift;
+    //compute buffer address
+    //--the size ratio of Y/G to UV/RB must be fit with input format and mode &&&&
+    if(in_mode == 0x00)    //non macro block plannar
+    {
+        //line stride
+        ch0_line_stride = image_w;
+        ch1_line_stride = image_w>>(w_shift);
+        ch2_line_stride = image_w>>(w_shift);
+        //buffer address
+        de_scal_ch0_offset = image_w * offset_y + offset_x;
+        de_scal_ch1_offset = (image_w>>w_shift) * (offset_y>>h_shift) + (offset_x>>w_shift); //image_w'
+        de_scal_ch2_offset = (image_w>>w_shift) * (offset_y>>h_shift) + (offset_x>>w_shift); //image_w'
+
+        ch0_addr = ch0_base + de_scal_ch0_offset;
+        ch1_addr = ch1_base + de_scal_ch1_offset;
+        ch2_addr = ch2_base + de_scal_ch2_offset;
+    }
+    else if(in_mode == 0x01) //interleaved data
+    {
+        //line stride
+        ch0_line_stride = image_w<<(0x02 - w_shift);
+        ch1_line_stride = 0x00;
+        ch2_line_stride = 0x00;
+        //buffer address
+        de_scal_ch0_offset = ((image_w * offset_y + offset_x)<<(0x02 - w_shift));
+        de_scal_ch1_offset = 0x0;
+        de_scal_ch2_offset = 0x0;
+
+        ch0_addr = ch0_base + de_scal_ch0_offset;
+        ch1_addr = 0x00;
+        ch2_addr = 0x00;
+    }
+    else
+    {
+    	return 0;
+    }
+
+    DE_BE_YUV_CH_Set_Format(sel, in_fmt,pixseq);
+    //set line stride
+    DE_BE_YUV_CH_Set_Line_Width(sel, 0x00, ch0_line_stride<<3);
+    DE_BE_YUV_CH_Set_Line_Width(sel, 0x01, ch1_line_stride<<3);
+    DE_BE_YUV_CH_Set_Line_Width(sel, 0x02, ch2_line_stride<<3);
+    //set buffer address
+    DE_BE_YUV_CH_Set_Addr(sel, 0x00, ch0_addr);
+    DE_BE_YUV_CH_Set_Addr(sel, 0x01, ch1_addr);
+    DE_BE_YUV_CH_Set_Addr(sel, 0x02, ch2_addr);
+
+    DE_BE_YUV_CH_Cfg_Csc_Coeff(sel, in_src->cs_mode);
+    return 0;
+}
+
+__s32 DE_BE_YUV_CH_Enable(__u32 sel, __bool enable)
+{
+    if(enable)
+    {
+	    DE_BE_WUINT32(sel, DE_BE_YUV_CTRL_OFF,DE_BE_RUINT32(sel, DE_BE_YUV_CTRL_OFF)|0x00000001);
+	}
+	else
+	{
+	    DE_BE_WUINT32(sel, DE_BE_YUV_CTRL_OFF,DE_BE_RUINT32(sel, DE_BE_YUV_CTRL_OFF)&0xfffffffe);
+	}
+	return 0;
+}
+
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc.c b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc.c
new file mode 100644
index 0000000..5af60ba
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc.c
@@ -0,0 +1,1619 @@
+
+#include "ebios_lcdc_tve.h"
+#include "de_lcdc_i.h"
+
+__u32 lcdc_reg_base0 = 0;
+__u32 lcdc_reg_base1 = 0;
+
+
+#define ____SEPARATOR_LCDC____
+
+__s32 LCDC_set_reg_base(__u32 sel, __u32 address)
+{
+    if(sel == 0)
+    {
+	    lcdc_reg_base0 = address;
+	}
+	else if(sel == 1)
+	{
+	    lcdc_reg_base1 = address;
+	}
+	return 0;
+}
+
+__u32 LCDC_get_reg_base(__u32 sel)
+{
+    if(sel == 0)
+    {
+	    return lcdc_reg_base0;
+	}
+	else if(sel == 1)
+	{
+	    return lcdc_reg_base1;
+	}
+	return 0;
+}
+
+__s32 LCDC_init(__u32 sel)
+{
+	TCON0_close(sel);
+	TCON1_close(sel);
+
+	LCDC_enable_int(sel, LCDC_VBI_LCD_EN);
+	LCDC_enable_int(sel, LCDC_VBI_HD_EN);
+	LCDC_enable_int(sel, LCDC_LTI_LCD_EN);
+	LCDC_enable_int(sel, LCDC_LTI_HD_EN);
+
+	TCON0_select_src(sel,0);
+	TCON1_select_src(sel,0);
+
+	LCDC_open(sel);
+
+	return 0;
+}
+
+__s32 LCDC_exit(__u32 sel)
+{
+	LCDC_disable_int(sel, LCDC_VBI_LCD_EN | LCDC_VBI_HD_EN | LCDC_LTI_LCD_EN | LCDC_LTI_HD_EN);
+	LCDC_close(sel);
+	return 0;
+}
+
+void LCDC_open(__u32 sel)
+{
+	LCDC_SET_BIT(sel,LCDC_DCLK_OFF,LCDC_BIT31 | LCDC_BIT30 | LCDC_BIT29 | LCDC_BIT28);
+	LCDC_SET_BIT(sel,LCDC_GCTL_OFF,LCDC_BIT31);
+}
+
+void LCDC_close(__u32 sel)
+{
+	LCDC_CLR_BIT(sel,LCDC_DCLK_OFF,LCDC_BIT31 | LCDC_BIT30 | LCDC_BIT29 | LCDC_BIT28);
+	LCDC_CLR_BIT(sel,LCDC_GCTL_OFF,LCDC_BIT31);
+}
+
+__s32 LCDC_set_start_delay(__u32 sel, __u32 tcon_index, __u8 delay)
+{
+	__u32 tmp;
+
+    if(tcon_index == 0)
+    {
+	    tmp = LCDC_RUINT32(sel, LCDC_CTL_OFF)&0xfffffe0f;//clear bit8:4
+	    tmp |= ((delay&0x1f)<<4);
+	    LCDC_WUINT32(sel, LCDC_CTL_OFF,tmp);
+	}
+	else if(tcon_index == 1)
+	{
+		tmp = LCDC_RUINT32(sel, LCDC_HDTVIF_OFF)&0xfffffe0f;//clear bit8:4
+	    tmp |= ((delay&0x1f)<<4);
+	    LCDC_WUINT32(sel, LCDC_HDTVIF_OFF,tmp);
+	}
+    return 0;
+}
+
+__s32 LCDC_get_start_delay(__u32 sel,__u32 tcon_index)
+{
+	__u32 tmp;
+
+	if(tcon_index == 0)
+	{
+	    tmp = LCDC_RUINT32(sel, LCDC_CTL_OFF)&0x000001f0;
+	    tmp >>= 4;
+	    return tmp;
+	}
+	else if(tcon_index == 1)
+	{
+	    tmp = LCDC_RUINT32(sel, LCDC_HDTVIF_OFF)&0x000001f0;
+	    tmp >>= 4;
+	    return tmp;
+	}
+
+    return 0;
+}
+
+__u32 LCDC_get_cur_line(__u32 sel, __u32 tcon_index)
+{
+	__u32 tmp;
+
+    if(tcon_index == 0)
+    {
+        tmp = LCDC_RUINT32(sel, LCDC_DUBUG_OFF)&0x03ff0000;
+        tmp >>= 16;
+    }
+    else
+    {
+        tmp = LCDC_RUINT32(sel, LCDC_DUBUG_OFF)&0x00000fff;
+    }
+
+    return tmp;
+}
+
+__s32 LCDC_set_int_line(__u32 sel,__u32 tcon_index, __u32 num)
+{
+    __u32 tmp = 0;
+
+    tmp = LCDC_RUINT32(sel, LCDC_GINT0_OFF);
+
+	if(tcon_index==0)
+	{
+		LCDC_CLR_BIT(sel,LCDC_GINT0_OFF,1<<29);
+		LCDC_INIT_BIT(sel,LCDC_GINT1_OFF,0x7ff<<16,num<<16);
+	}
+	else
+	{
+		LCDC_CLR_BIT(sel,LCDC_GINT0_OFF,1<<28);
+		LCDC_INIT_BIT(sel,LCDC_GINT1_OFF,0x7ff,num);
+    }
+
+    LCDC_WUINT32(sel, LCDC_GINT0_OFF, tmp);
+
+	return 0;
+}
+
+__s32 LCDC_enable_int(__u32 sel, __u32 irqsrc)
+{
+	LCDC_SET_BIT(sel,LCDC_GINT0_OFF,irqsrc);
+    return 0;
+}
+
+__s32 LCDC_disable_int(__u32 sel,__u32 irqsrc)
+{
+	LCDC_CLR_BIT(sel,LCDC_GINT0_OFF,irqsrc);
+    return 0;
+}
+
+__u32 LCDC_query_int(__u32 sel)
+{
+    __u32 tmp;
+
+    tmp = LCDC_RUINT32(sel, LCDC_GINT0_OFF) & 0x0000f000;
+
+    return  tmp ;
+}
+
+__s32 LCDC_clear_int(__u32 sel,__u32 irqsrc)
+{
+	LCDC_CLR_BIT(sel,LCDC_GINT0_OFF,irqsrc);
+	return 0;
+}
+
+#define ____SEPARATOR_TCON0____
+
+
+__s32 TCON0_open(__u32 sel)
+{
+	LCDC_SET_BIT(sel, LCDC_CTL_OFF,LCDC_BIT31);
+    return 0;
+}
+
+__s32 TCON0_close(__u32 sel)
+{
+	LCDC_CLR_BIT(sel, LCDC_CTL_OFF,LCDC_BIT31);
+	LCDC_WUINT32(sel, LCDC_IOCTL1_OFF, 0xffffffff);//?
+	return 0;
+}
+
+void TCON0_cfg(__u32 sel, __panel_para_t * info)
+{
+	__u32 vblank_len;
+	__u32 lcd_if_reg = 0;
+
+    vblank_len = info->lcd_vt/2 - info->lcd_y;
+
+	if(vblank_len >= 32)
+	{
+		info->start_delay	= 30;
+	}
+	else
+	{
+		info->start_delay	= vblank_len - 2;
+	}
+
+	switch(info->lcd_if)
+	{
+		case LCDC_LCDIF_HV:
+			lcd_if_reg = 0;
+			break;
+		case LCDC_LCDIF_CPU:
+			lcd_if_reg = 1;
+			break;
+		case LCDC_LCDIF_TTL:
+			lcd_if_reg = 2;
+			break;
+		case LCDC_LCDIF_LVDS:
+			lcd_if_reg = 0;
+			break;
+	}
+
+
+
+	LCDC_INIT_BIT(sel, LCDC_CTL_OFF,0x0ffffff0,(lcd_if_reg <<24) | (info->lcd_swap<< 23) | (0<<20) | (info->start_delay<<4));
+
+	LCDC_SET_BIT(sel, LCDC_DCLK_OFF, (__u32)1<<31);
+
+	LCDC_WUINT32(sel, LCDC_BASIC0_OFF,((info->lcd_x - 1)<<16) | (info->lcd_y - 1) );
+
+	LCDC_WUINT32(sel, LCDC_BASIC1_OFF,((info->lcd_ht-1) <<16) | (info->lcd_hbp-1));
+
+	LCDC_WUINT32(sel, LCDC_BASIC2_OFF,(info->lcd_vt <<16) | (info->lcd_vbp-1));
+
+	if(info->lcd_if == LCDC_LCDIF_HV)
+	{
+	    __u32 hspw_tmp = 0;
+		__u32 vspw_tmp = 0;
+
+		if(info->lcd_hv_hspw != 0)
+			hspw_tmp --;
+		if(info->lcd_hv_vspw != 0)
+			vspw_tmp --;
+		LCDC_WUINT32(sel, LCDC_BASIC3_OFF,(hspw_tmp <<16) | vspw_tmp);
+
+		LCDC_WUINT32(sel, LCDC_HVIF_OFF,(info->lcd_hv_if<<31) | (info->lcd_hv_smode<<30) |(info->lcd_hv_s888_if<<24) |
+                                    (info->lcd_hv_syuv_if<<20));
+	}
+	else if(info->lcd_if == LCDC_LCDIF_TTL)
+	{
+	    LCDC_WUINT32(sel, LCDC_TTL0_OFF,(info->lcd_ttl_stvh<<20) | (info->lcd_ttl_stvdl<<10) |(info->lcd_ttl_stvdp));
+
+		LCDC_WUINT32(sel, LCDC_TTL1_OFF,(info->lcd_ttl_ckvt<<30) |(info->lcd_ttl_ckvh<<10) | (info->lcd_ttl_ckvd<<0));
+
+		LCDC_WUINT32(sel, LCDC_TTL2_OFF,(info->lcd_ttl_oevt<<30) |(info->lcd_ttl_oevh<<10) | (info->lcd_ttl_oevd<<0));
+
+		LCDC_WUINT32(sel, LCDC_TTL3_OFF,(info->lcd_ttl_sthh<<26) |(info->lcd_ttl_sthd<<16) | (info->lcd_ttl_oehh<<10) |
+		                    (info->lcd_ttl_oehd<<0));
+
+		LCDC_WUINT32(sel, LCDC_TTL4_OFF,(info->lcd_ttl_datarate<<23) |(info->lcd_ttl_revsel<<22) |
+							(info->lcd_ttl_datainv_en<<21) | (info->lcd_ttl_datainv_sel<<20) |info->lcd_ttl_revd);
+
+	}
+	else if(info->lcd_if == LCDC_LCDIF_CPU)
+	{
+		LCDC_WUINT32(sel, LCDC_CPUIF_OFF,(info->lcd_cpu_if<<29) |(1<<26));
+	}
+	else if(info->lcd_if == LCDC_LCDIF_LVDS)
+	{
+		LCDC_WUINT32(sel, LCDC_LVDS_OFF,(info->lcd_lvds_ch<<30) |(0<<29) |
+							 (0<<28) | (info->lcd_lvds_mode<<27) | (info->lcd_lvds_bitwidth<<26) | (0<<23) );
+
+
+
+		LCDC_WUINT32(sel, LCDC_LVDS_ANA0,(0<<30) + (3<<28) + (3<<26) + (6<<23) +
+					                     (6<<19) + (0<<17) + (1<<16) + (0<<15) +
+					                     (0<<14) + (0<<12));
+
+		LCDC_SET_BIT(sel, LCDC_LVDS_ANA0,0x01<<22);		   					//mb
+
+
+		LCDC_WUINT32(sel, LCDC_LVDS_ANA1,	(0x1f<<26) + (0x1f<<10));	//pren
+
+		if(info->lcd_lvds_io_cross==0)
+	    	LCDC_WUINT32(sel, LCDC_LVDS_ANA1,	(0x1f<<26) + (0x1f<<10)+ (0x00<<21)+ (0x00<<5));
+	    else
+	    	LCDC_WUINT32(sel, LCDC_LVDS_ANA1,	(0x1f<<26) + (0x1f<<10)+ (0x1f<<21)+ (0x1f<<5));
+	}
+	else
+	{
+	   ;
+	}
+
+	if(info->lcd_frm == LCDC_FRM_RGB666)
+	{
+		LCDC_CLR_BIT(sel,LCDC_FRM0_OFF,(__u32)0x7<<4);
+	}
+	else if(info->lcd_frm == LCDC_FRM_RGB656)
+	{
+		LCDC_INIT_BIT(sel,LCDC_FRM0_OFF,0x7<<4,0x5<<4);
+	}
+	else
+	{
+		LCDC_CLR_BIT(sel,LCDC_FRM0_OFF,LCDC_BIT31);
+	}
+
+	if(info->lcd_frm == LCDC_FRM_RGB666 || info->lcd_frm == LCDC_FRM_RGB656)
+	{
+    	LCDC_WUINT32(sel, LCDC_FRM1_OFF+0x00,0x11111111);
+    	LCDC_WUINT32(sel, LCDC_FRM1_OFF+0x04,0x11111111);
+       	LCDC_WUINT32(sel, LCDC_FRM1_OFF+0x08,0x11111111);
+    	LCDC_WUINT32(sel, LCDC_FRM1_OFF+0x0c,0x11111111);
+       	LCDC_WUINT32(sel, LCDC_FRM1_OFF+0x10,0x11111111);
+    	LCDC_WUINT32(sel, LCDC_FRM1_OFF+0x14,0x11111111);
+	    LCDC_WUINT32(sel, LCDC_FRM2_OFF+0x00,0x01010000);
+	 	LCDC_WUINT32(sel, LCDC_FRM2_OFF+0x04,0x15151111);
+	 	LCDC_WUINT32(sel, LCDC_FRM2_OFF+0x08,0x57575555);
+		LCDC_WUINT32(sel, LCDC_FRM2_OFF+0x0c,0x7f7f7777);
+		LCDC_SET_BIT(sel,LCDC_FRM0_OFF,LCDC_BIT31);
+	}
+
+	if(info->lcd_gamma_correction_en)
+	{
+	    TCON1_set_gamma_table(sel, (__u32)(info->lcd_gamma_tbl), 1024);
+	    TCON1_set_gamma_Enable(sel, 1);
+	}
+
+	LCDC_WUINT32(sel, LCDC_IOCTL0_OFF,info->lcd_io_cfg0);
+    LCDC_WUINT32(sel, LCDC_IOCTL1_OFF,info->lcd_io_cfg1);
+
+    LCDC_set_int_line(sel, 0,info->start_delay + 2);
+}
+
+
+__s32 TCON0_select_src(__u32 sel, __u8 src)
+{
+    __u32 tmp;
+
+    tmp = LCDC_RUINT32(sel, LCDC_CTL_OFF);
+    tmp = tmp&0xffbffffc;
+    switch(src)
+    {
+        case LCDC_SRC_DE1:
+             tmp = tmp|0x00;
+             break;
+
+        case LCDC_SRC_DE2:
+             tmp = tmp|0x01;
+             break;
+
+        case LCDC_SRC_DMA:
+             tmp = tmp|0x02;
+             break;
+
+        case LCDC_SRC_WHITE:
+             tmp = tmp|0x00400003;
+             break;
+
+        case LCDC_SRC_BLACK:
+             tmp = tmp|0x03;
+             break;
+    }
+	LCDC_WUINT32(sel,LCDC_CTL_OFF,tmp);
+    return 0;
+}
+
+
+__s32 TCON0_get_width(__u32 sel)
+{
+    return -1;
+}
+
+__s32 TCON0_get_height(__u32 sel)
+{
+    return -1;
+}
+
+__s32 TCON0_set_dclk_div(__u32 sel, __u8 div)
+{
+	LCDC_INIT_BIT(sel, LCDC_DCLK_OFF, 0xff, div);
+	return 0;
+}
+
+
+#define ____SEPARATOR_TCON1____
+
+__u32 TCON1_open(__u32 sel)
+{
+	LCDC_SET_BIT(sel, LCDC_HDTVIF_OFF, LCDC_BIT31);
+	return 0;
+}
+
+__u32 TCON1_close(__u32 sel)
+{
+	__u32  tmp;
+
+	LCDC_CLR_BIT(sel, LCDC_HDTVIF_OFF, LCDC_BIT31);
+
+	tmp = LCDC_RUINT32(sel, LCDC_GCTL_OFF);//?
+	tmp &= (~(1 << 0));//disable hdif
+	LCDC_WUINT32(sel, LCDC_GCTL_OFF,tmp);
+
+	LCDC_WUINT32(sel, LCDC_IOCTL3_OFF, 0xffffffff);//?
+
+	return 0;
+}
+
+__u32  TCON1_cfg(__u32 sel, __tcon1_cfg_t *cfg)
+{
+	__u32 vblank_len;
+    __u32 reg_val;
+
+    vblank_len = cfg->vt/2 - cfg->src_y - 2;
+	if(vblank_len >= 32)
+	{
+		cfg->start_delay	= 30;
+	}
+	else
+	{
+		cfg->start_delay	= vblank_len - 2;//23 modify//old:cfg->start_delay	= vblank_len - 1
+	}
+
+    if (cfg->b_remap_if)
+    {
+		LCDC_SET_BIT(sel,LCDC_GCTL_OFF,LCDC_BIT0);
+    }
+    else
+    {
+ 		LCDC_CLR_BIT(sel,LCDC_GCTL_OFF,LCDC_BIT0);
+	}
+
+    reg_val = LCDC_RUINT32(sel, LCDC_HDTVIF_OFF);
+    reg_val &= 0xffeffe0f;
+    if (cfg->b_interlace)
+    {
+        reg_val |= (1<<20);
+    }
+
+
+    reg_val |= ((cfg->start_delay&0x1f)<<4);
+
+    LCDC_WUINT32(sel, LCDC_HDTVIF_OFF,reg_val);
+
+    LCDC_WUINT32(sel, LCDC_HDTV0_OFF,(((cfg->src_x - 1)&0xfff)<<16)|((cfg->src_y - 1)&0xfff));
+    LCDC_WUINT32(sel, LCDC_HDTV1_OFF,(((cfg->scl_x - 1)&0xfff)<<16)|((cfg->scl_y - 1)&0xfff));
+    LCDC_WUINT32(sel, LCDC_HDTV2_OFF,(((cfg->out_x - 1)&0xfff)<<16)|((cfg->out_y - 1)&0xfff));
+    LCDC_WUINT32(sel, LCDC_HDTV3_OFF,(((cfg->ht - 1)&0xffff)<<16)|((cfg->hbp - 1)&0xfff));
+    LCDC_WUINT32(sel, LCDC_HDTV4_OFF,(((cfg->vt)&0xffff)<<16)|((cfg->vbp - 1)&0xfff));
+    LCDC_WUINT32(sel, LCDC_HDTV5_OFF,(((cfg->hspw - 1)&0x3ff)<<16)|((cfg->vspw - 1)&0x3ff));
+    LCDC_WUINT32(sel, LCDC_IOCTL2_OFF,cfg->io_pol);//add
+    LCDC_WUINT32(sel, LCDC_IOCTL3_OFF,cfg->io_out);//add
+
+
+	LCDC_set_int_line(sel,1, cfg->start_delay + 2);
+
+
+    return 0;
+}
+
+__u32 TCON1_cfg_ex(__u32 sel, __panel_para_t * info)
+{
+    __tcon1_cfg_t tcon1_cfg;
+
+    tcon1_cfg.b_interlace = 0;
+    tcon1_cfg.b_rgb_internal_hd = 0;
+    tcon1_cfg.b_rgb_remap_io = 1;//rgb
+    tcon1_cfg.b_remap_if = 1;	//remap tcon1 to io
+    tcon1_cfg.src_x = info->lcd_x;
+    tcon1_cfg.src_y = info->lcd_y;
+    tcon1_cfg.scl_x = info->lcd_x;
+    tcon1_cfg.scl_y = info->lcd_y;
+    tcon1_cfg.out_x = info->lcd_x;
+    tcon1_cfg.out_y = info->lcd_y;
+    tcon1_cfg.ht = info->lcd_ht;
+    tcon1_cfg.hbp = info->lcd_hbp;
+    tcon1_cfg.vt = info->lcd_vt;
+    tcon1_cfg.vbp = info->lcd_vbp;
+    tcon1_cfg.vspw = info->lcd_hv_vspw;
+    tcon1_cfg.hspw = info->lcd_hv_hspw;
+    tcon1_cfg.io_pol = info->lcd_io_cfg0;
+    tcon1_cfg.io_out = info->lcd_io_cfg1;
+
+    TCON1_cfg(sel, &tcon1_cfg);
+
+    return 0;
+}
+
+__u32 TCON1_set_hdmi_mode(__u32 sel, __u8 mode)
+{
+	__tcon1_cfg_t cfg;
+
+	switch(mode)
+	{
+        case DISP_TV_MOD_480I:
+        cfg.b_interlace   = 1;
+        cfg.src_x       = 720;
+        cfg.src_y       = 240;
+        cfg.scl_x       = 720;
+        cfg.scl_y       = 240;
+        cfg.out_x       = 720;
+        cfg.out_y       = 240;
+        cfg.ht       = 858;
+        cfg.hbp      = 118;
+        cfg.vt       = 525;
+        cfg.vbp      = 19;
+        cfg.vspw     = 3;
+        cfg.hspw     = 62;
+        cfg.io_pol      = 0x04000000;
+        break;
+     case DISP_TV_MOD_576I:
+        cfg.b_interlace   = 1;
+        cfg.src_x       = 720;
+        cfg.src_y       = 288;
+        cfg.scl_x       = 720;
+        cfg.scl_y       = 288;
+        cfg.out_x       = 720;
+        cfg.out_y       = 288;
+        cfg.ht       = 864;
+        cfg.hbp      = 132;
+        cfg.vt       = 625;
+        cfg.vbp      = 22;
+        cfg.vspw     = 3;
+        cfg.hspw     = 63;
+        cfg.io_pol      = 0x04000000;
+        break;
+     case DISP_TV_MOD_480P:
+        cfg.b_interlace   = 0;
+        cfg.src_x       = 720;
+        cfg.src_y       = 480;
+        cfg.scl_x       = 720;
+        cfg.scl_y       = 480;
+        cfg.out_x       = 720;
+        cfg.out_y       = 480;
+        cfg.ht       = 858;
+        cfg.hbp      = 122;
+        cfg.vt       = 1050;
+        cfg.vbp      = 42 - 6;
+        cfg.vspw     = 6;
+        cfg.hspw     = 62;
+        cfg.io_pol      = 0x04000000;
+        break;
+     case DISP_TV_MOD_576P:
+        cfg.b_interlace   = 0;
+        cfg.src_x       = 720;
+        cfg.src_y       = 576;
+        cfg.scl_x       = 720;
+        cfg.scl_y       = 576;
+        cfg.out_x       = 720;
+        cfg.out_y       = 576;
+        cfg.ht       = 864;
+        cfg.hbp      = 132;
+        cfg.vt       = 1250;
+        cfg.vbp      = 44;
+        cfg.vspw     = 5;
+        cfg.hspw     = 64;
+        cfg.io_pol      = 0x04000000;
+        break;
+
+    case DISP_TV_MOD_720P_50HZ:
+        cfg.b_interlace   = 0;
+        cfg.src_x      = 1280;
+        cfg.src_y      = 720;
+        cfg.scl_x      = 1280;
+        cfg.scl_y      = 720;
+        cfg.out_x      = 1280;
+        cfg.out_y      = 720;
+        cfg.ht       = 1980;
+        cfg.hbp      = 260;
+        cfg.vt       = 1500;
+        cfg.vbp      = 25;
+        cfg.vspw     = 5;
+        cfg.hspw     = 40;
+        cfg.io_pol      = 0x07000000;
+        break;
+    case DISP_TV_MOD_720P_60HZ:
+        cfg.b_interlace   = 0;
+        cfg.src_x       = 1280;
+        cfg.src_y       = 720;
+        cfg.scl_x       = 1280;
+        cfg.scl_y       = 720;
+        cfg.out_x       = 1280;
+        cfg.out_y       = 720;
+        cfg.ht       = 1650;
+        cfg.hbp      = 260;
+        cfg.vt       = 1500;
+        cfg.vbp      = 25;
+        cfg.vspw     = 5;
+        cfg.hspw     = 40;
+        cfg.io_pol      = 0x07000000;
+        break;
+    case DISP_TV_MOD_1080I_50HZ:
+        cfg.b_interlace   = 1;
+        cfg.src_x       = 1920;
+        cfg.src_y       = 540;
+        cfg.scl_x       = 1920;
+        cfg.scl_y       = 540;
+        cfg.out_x       = 1920;
+        cfg.out_y       = 540;
+        cfg.ht       = 2640;
+        cfg.hbp      = 192;
+        cfg.vt       = 1125;
+        cfg.vbp      = 20;
+        cfg.vspw     = 5;
+        cfg.hspw     = 44;
+        cfg.io_pol      = 0x07000000;
+        break;
+    case DISP_TV_MOD_1080I_60HZ:
+        cfg.b_interlace   = 1;
+        cfg.src_x       = 1920;
+        cfg.src_y       = 540;
+        cfg.scl_x       = 1920;
+        cfg.scl_y       = 540;
+        cfg.out_x       = 1920;
+        cfg.out_y       = 540;
+        cfg.ht       = 2200;
+        cfg.hbp      = 192;
+        cfg.vt       = 1125;
+        cfg.vbp      = 20;
+        cfg.vspw     = 5;
+        cfg.hspw     = 44;
+        cfg.io_pol      = 0x07000000;
+        break;
+    case DISP_TV_MOD_1080P_24HZ:
+		cfg.b_interlace   = 0;
+        cfg.src_x       = 1920;
+        cfg.src_y       = 1080;
+        cfg.scl_x       = 1920;
+        cfg.scl_y       = 1080;
+        cfg.out_x       = 1920;
+        cfg.out_y       = 1080;
+        cfg.ht       = 2750;
+        cfg.hbp      = 192;
+        cfg.vt       = 2250;
+        cfg.vbp      = 41;
+        cfg.vspw     = 5;
+        cfg.hspw     = 44;
+        cfg.io_pol      = 0x07000000;
+        break;
+     case DISP_TV_MOD_1080P_50HZ:
+        cfg.b_interlace   = 0;
+        cfg.src_x       = 1920;
+        cfg.src_y       = 1080;
+        cfg.scl_x       = 1920;
+        cfg.scl_y       = 1080;
+        cfg.out_x       = 1920;
+        cfg.out_y       = 1080;
+        cfg.ht       = 2640;
+        cfg.hbp      = 192;
+        cfg.vt       = 2250;
+        cfg.vbp      = 41;
+        cfg.vspw     = 5;
+        cfg.hspw     = 44;
+        cfg.io_pol      = 0x07000000;
+        break;
+     case DISP_TV_MOD_1080P_60HZ:
+        cfg.b_interlace   = 0;
+        cfg.src_x       = 1920;
+        cfg.src_y       = 1080;
+        cfg.scl_x       = 1920;
+        cfg.scl_y       = 1080;
+        cfg.out_x       = 1920;
+        cfg.out_y       = 1080;
+        cfg.ht       = 2200;
+        cfg.hbp      = 192;
+        cfg.vt       = 2250;
+        cfg.vbp      = 41;
+        cfg.vspw     = 5;
+        cfg.hspw     = 44;
+        cfg.io_pol      = 0x07000000;
+        break;
+     case DISP_TV_MOD_1080P_24HZ_3D_FP:
+        cfg.b_interlace   = 0;
+        cfg.src_x       = 1920;
+        cfg.src_y       = 2160;
+        cfg.scl_x       = 1920;
+        cfg.scl_y       = 2160 + 45;
+        cfg.out_x       = 1920;
+        cfg.out_y       = 2160 + 45;
+        cfg.ht       = 2750;
+        cfg.hbp      = 192;
+        cfg.vt       = (1125*4);
+        cfg.vbp      = 41;
+        cfg.vspw     = 5;
+        cfg.hspw     = 44;
+        cfg.io_pol      = 0x07000000;
+        LCDC_WUINT32(sel, LCDC_3DF_A1B,(1125 + 1)<<12);
+        LCDC_WUINT32(sel, LCDC_3DF_A1E,(1125 + 45)<<12);
+        LCDC_WUINT32(sel, LCDC_3DF_D1, 0);
+        LCDC_SET_BIT(sel, LCDC_3DF_CTL,1<<31);
+        break;
+    default:
+        return 0;
+    }
+	cfg.io_out      = 0x00000000;
+	cfg.b_rgb_internal_hd = 0;
+	cfg.b_rgb_remap_io = 1;//rgb
+	cfg.b_remap_if      = 1;
+	TCON1_cfg(sel, &cfg);
+    TCON_set_hdmi_src(sel);
+
+    return 0;
+}
+
+__u32 TCON1_set_tv_mode(__u32 sel, __u8 mode)
+{
+    __tcon1_cfg_t          cfg;
+
+    switch(mode)
+    {
+        case DISP_TV_MOD_576I:
+        case DISP_TV_MOD_PAL:
+       	case DISP_TV_MOD_PAL_SVIDEO:
+        case DISP_TV_MOD_PAL_NC:
+        case DISP_TV_MOD_PAL_NC_SVIDEO:
+            cfg.b_interlace   = 1;
+            cfg.src_x       = 720;
+            cfg.src_y       = 288;
+            cfg.scl_x       = 720;
+            cfg.scl_y       = 288;
+            cfg.out_x       = 720;
+            cfg.out_y       = 288;
+            cfg.ht       = 864;
+            cfg.hbp      = 139;
+            cfg.vt       = 625;
+            cfg.vbp      = 22;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_480I:
+        case DISP_TV_MOD_NTSC:
+        case DISP_TV_MOD_NTSC_SVIDEO:
+        case DISP_TV_MOD_PAL_M:
+        case DISP_TV_MOD_PAL_M_SVIDEO:
+            cfg.b_interlace   = 1;
+            cfg.src_x       = 720;
+            cfg.src_y       = 240;
+            cfg.scl_x       = 720;
+            cfg.scl_y       = 240;
+            cfg.out_x       = 720;
+            cfg.out_y       = 240;
+            cfg.ht       = 858;
+            cfg.hbp      = 118;
+            cfg.vt       = 525;
+            cfg.vbp      = 18;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_480P:
+        	cfg.b_interlace   = 0;
+            cfg.src_x       = 720;
+            cfg.src_y       = 480;
+            cfg.scl_x       = 720;
+            cfg.scl_y       = 480;
+            cfg.out_x       = 720;
+            cfg.out_y       = 480;
+            cfg.ht       = 858;
+            cfg.hbp      = 118;
+            cfg.vt       = 1050;
+            cfg.vbp      = 22;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_576P:
+        	cfg.b_interlace   = 0;
+            cfg.src_x       = 720;
+            cfg.src_y       = 576;
+            cfg.scl_x       = 720;
+            cfg.scl_y       = 576;
+            cfg.out_x       = 720;
+            cfg.out_y       = 576;
+            cfg.ht       = 864;
+            cfg.hbp      = 139;
+            cfg.vt       = 1250;
+            cfg.vbp      = 22;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_720P_50HZ:
+       	 	cfg.b_interlace   = 0;
+            cfg.src_x       = 1280;
+            cfg.src_y       = 720;
+            cfg.scl_x       = 1280;
+            cfg.scl_y       = 720;
+            cfg.out_x       = 1280;
+            cfg.out_y       = 720;
+            cfg.ht       = 1980;
+            cfg.hbp      = 260;
+            cfg.vt       = 1500;
+            cfg.vbp      = 24;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_720P_60HZ:
+        	cfg.b_interlace   = 0;
+            cfg.src_x       = 1280;
+            cfg.src_y       = 720;
+            cfg.scl_x       = 1280;
+            cfg.scl_y       = 720;
+            cfg.out_x       = 1280;
+            cfg.out_y       = 720;
+            cfg.ht       = 1650;
+            cfg.hbp      = 260;
+            cfg.vt       = 1500;
+            cfg.vbp      = 24;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_1080I_50HZ:
+            cfg.b_interlace   = 0;
+            cfg.src_x       = 1920;
+            cfg.src_y       = 540;
+            cfg.scl_x       = 1920;
+            cfg.scl_y       = 540;
+            cfg.out_x       = 1920;
+            cfg.out_y       = 540;
+            cfg.ht       = 2640;
+            cfg.hbp      = 192;
+            cfg.vt       = 1125;
+            cfg.vbp      = 16;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_1080I_60HZ:
+            cfg.b_interlace   = 1;
+            cfg.src_x       = 1920;
+            cfg.src_y       = 540;
+            cfg.scl_x       = 1920;
+            cfg.scl_y       = 540;
+            cfg.out_x       = 1920;
+            cfg.out_y       = 540;
+            cfg.ht       = 2200;
+            cfg.hbp      = 192;
+            cfg.vt       = 1125;
+            cfg.vbp      = 16;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_1080P_50HZ:
+            cfg.b_interlace   = 0;
+            cfg.src_x       = 1920;
+            cfg.src_y       = 1080;
+            cfg.scl_x       = 1920;
+            cfg.scl_y       = 1080;
+            cfg.out_x       = 1920;
+            cfg.out_y       = 1080;
+            cfg.ht       = 2640;
+            cfg.hbp      = 192;
+            cfg.vt       = 2250;
+            cfg.vbp      = 44;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        case DISP_TV_MOD_1080P_60HZ:
+            cfg.b_interlace   = 0;
+            cfg.src_x       = 1920;
+            cfg.src_y       = 1080;
+            cfg.scl_x       = 1920;
+            cfg.scl_y       = 1080;
+            cfg.out_x       = 1920;
+            cfg.out_y       = 1080;
+            cfg.ht       = 2200;
+            cfg.hbp      = 192;
+            cfg.vt       = 2250;
+            cfg.vbp      = 44;
+            cfg.vspw     = 2;
+            cfg.hspw     = 2;
+            break;
+
+        default:
+            return 0;
+    }
+    cfg.io_pol      = 0x00000000;
+    cfg.io_out      = 0x0fffffff;
+    cfg.b_rgb_internal_hd = 0;//yuv
+    cfg.b_rgb_remap_io = 0;
+    cfg.b_remap_if      = 0;
+    TCON1_cfg(sel, &cfg);
+
+    TCON_set_tv_src(sel, sel);
+
+    return 0;
+}
+
+
+// set mode
+////////////////////////////////////////////////////////////////////////////////
+__s32 TCON1_set_vga_mode(__u32 sel, __u8 mode)
+{
+    __tcon1_cfg_t          cfg;
+
+	switch(mode)
+	{
+	case DISP_VGA_H640_V480:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 640;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 480;//VA
+      cfg.ht       = 0x320;//HT-1=-1
+      cfg.hbp      = 0x90;//HS+HBP-1=+-1
+      cfg.vt       = 0x41a;//VT*2=*2
+      cfg.vbp      = 0x22;//VS+VBP-1=+-1
+      cfg.vspw     = 0x2;//VS-1=-1
+      cfg.hspw     = 0x60;//HS-1=-1
+		break;
+	case DISP_VGA_H800_V600:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 800;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 600;//VA
+      cfg.ht       = 0x420;//HT-1=-1
+      cfg.hbp      = 0xd8;//HS+HBP-1=+-1
+      cfg.vt       = 0x4e8;//VT*2=*2
+      cfg.vbp      = 0x1a;//VS+VBP-1=+-1
+      cfg.vspw     = 0x4;//VS-1=-1
+      cfg.hspw     = 0x80;//HS-1=-1
+		break;
+	case  DISP_VGA_H1024_V768:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 1024;
+      cfg.src_y = cfg.scl_y = cfg.out_y = 768;
+      cfg.ht       = 1344;//HT-1=1344-1
+      cfg.hbp      = 296;//HS+HBP-1=136+160-1
+      cfg.vt       = 1612;//VT*2=806*2
+      cfg.vbp      = 34;//VS+VBP-1=6+29-1
+      cfg.vspw     = 6;//VS-1=6-1
+      cfg.hspw     = 136;//HS-1=136-1
+		break;
+	case  DISP_VGA_H1280_V1024:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 1280;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 1024;//VA
+      cfg.ht       = 0x698;//HT-1=-1
+      cfg.hbp      = 0x168;//HS+HBP-1=+-1
+      cfg.vt       = 0x854;//VT*2=*2
+      cfg.vbp      = 0x28;//VS+VBP-1=+-1
+      cfg.vspw     = 0x3;//VS-1=-1
+      cfg.hspw     = 0x70;//HS-1=-1
+		break;
+	case  DISP_VGA_H1360_V768:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 1360;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 768;//VA
+      cfg.ht       = 0x700;//HT-1=-1
+      cfg.hbp      = 0x170;//HS+HBP-1=+-1
+      cfg.vt       = 0x636;//VT*2=*2
+      cfg.vbp      = 0x17;//VS+VBP-1=+-1
+      cfg.vspw     = 0x6;//VS-1=-1
+      cfg.hspw     = 0x70;//HS-1=-1
+		break;
+	case  DISP_VGA_H1440_V900:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 1440;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 900;//VA
+      cfg.ht       = 0x770;//HT-1=-1
+      cfg.hbp      = 0x180;//HS+HBP-1=+-1
+      cfg.vt       = 0x74c;//VT*2=*2
+      cfg.vbp      = 0x1e;//VS+VBP-1=+-1
+      cfg.vspw     = 0x6;//VS-1=-1
+      cfg.hspw     = 0x98;//HS-1=-1
+		break;
+	case  DISP_VGA_H1680_V1050:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 1680;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 1050;//VA
+      cfg.ht       = 2240;//HT-1=-1
+      cfg.hbp      = 464;//HS+HBP-1=+-1
+      cfg.vt       = 2178;//VT*2=*2
+      cfg.vbp      = 35;//VS+VBP-1=+-1
+      cfg.vspw     = 6;//VS-1=-1
+      cfg.hspw     = 176;//HS-1=-1
+		break;
+	case  DISP_VGA_H1920_V1080_RB:
+      cfg.src_x = cfg.scl_x = cfg.out_x = 1920;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 1080;//VA
+      cfg.ht       = 2017;//HT-1=-1
+      cfg.hbp      = 63;//HS+HBP-1=+-1
+      cfg.vt       = 2222;//VT*2=*2
+      cfg.vbp      = 27;//VS+VBP-1=+-1
+      cfg.vspw     = 5;//VS-1=-1
+      cfg.hspw     = 32;//HS-1=-1
+		break;
+	case  DISP_VGA_H1920_V1080://TBD
+      cfg.src_x = cfg.scl_x = cfg.out_x = 1920;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 1080;//VA
+      cfg.ht       = 2200;//HT-1=-1
+      cfg.hbp      = 148+44;//HS+HBP-1=+-1
+      cfg.vt       = 1125*2;//VT*2=*2
+      cfg.vbp      = 36+5;//VS+VBP-1=+-1
+      cfg.vspw     = 5;//VS-1=-1
+      cfg.hspw     = 44;//HS-1=-1
+      cfg.io_pol   = 0x03000000;
+		break;
+	case  DISP_VGA_H1280_V720://TBD
+	  cfg.src_x = cfg.scl_x = cfg.out_x = 1280;//HA
+      cfg.src_y = cfg.scl_y = cfg.out_y = 720;//VA
+      cfg.ht       = 1650;//HT-1=-1
+      cfg.hbp      = 220+40;//HS+HBP-1=+-1
+      cfg.vt       = 750*2;//VT*2=*2
+      cfg.vbp      = 5+20;//VS+VBP-1=+-1
+      cfg.vspw     = 5;//VS-1=-1
+      cfg.hspw     = 40;//HS-1=-1
+      cfg.io_pol   = 0x03000000;
+		break;
+	default:
+		return 0;
+	}
+    cfg.b_interlace   = 0;
+    cfg.io_pol      = 0x00000000;
+    cfg.io_out      = 0x0cffffff;//hs vs is use
+    cfg.b_rgb_internal_hd = 1;//rgb
+    cfg.b_rgb_remap_io = 0;
+    cfg.b_remap_if      = 1;
+    TCON1_cfg(sel, &cfg);
+    TCON_set_tv_src(sel, sel);
+
+    return 0;
+}
+
+
+__s32 TCON1_select_src(__u32 sel, __u8 src)
+{
+    __u32 tv_tmp;
+
+	tv_tmp = LCDC_RUINT32(sel, LCDC_HDTVIF_OFF);
+
+    tv_tmp = tv_tmp&0xfffffffc;
+	if(src == LCDC_SRC_DE1)
+	{
+		tv_tmp = tv_tmp|0x00;
+	}
+	else if(src == LCDC_SRC_DE2)
+	{
+		tv_tmp = tv_tmp|0x01;
+	}
+	else if(src == LCDC_SRC_BLUE)
+	{
+		tv_tmp = tv_tmp|0x02;
+	}
+
+	LCDC_WUINT32(sel, LCDC_HDTVIF_OFF,tv_tmp);
+
+	return 0;
+}
+
+
+__bool TCON1_in_valid_regn(__u32 sel, __u32 juststd)			//???
+{
+   __u32         readval;
+   __u32         SY2;
+   __u32         VT;
+
+   readval      = LCDC_RUINT32(sel, LCDC_HDTV4_OFF);
+   VT           = (readval & 0xffff0000)>>17;
+
+   readval      = LCDC_RUINT32(sel, LCDC_DUBUG_OFF);
+   SY2          = (readval)&0xfff;
+
+   if((SY2 < juststd) ||(SY2 > VT))
+   {
+       return 1;
+   }
+   else
+   {
+       return 0;
+   }
+}
+
+__s32 TCON1_get_width(__u32 sel)
+{
+    return -1;
+}
+
+__s32 TCON1_get_height(__u32 sel)
+{
+    return -1;
+}
+
+__s32 TCON1_set_gamma_table(__u32 sel, __u32 address,__u32 size)	//add next time
+{
+    __u32 tmp;
+
+	__s32 *pmem_align_dest;
+    __s32 *pmem_align_src;
+    __s32 *pmem_dest_cur;
+
+    tmp = LCDC_RUINT32(sel, LCDC_GCTL_OFF);
+    LCDC_WUINT32(sel, LCDC_GCTL_OFF,tmp&(~(1<<30)));//disable gamma correction sel
+
+	pmem_dest_cur = (__s32*)(LCDC_get_reg_base(sel)+LCDC_GAMMA_TABLE_OFF);
+	pmem_align_src = (__s32*)address;
+	pmem_align_dest = pmem_dest_cur + (size>>2);
+
+    while(pmem_dest_cur < pmem_align_dest)
+    {
+    	*(volatile __u32 *)pmem_dest_cur++ = *pmem_align_src++;
+    }
+
+    LCDC_WUINT32(sel, LCDC_GCTL_OFF,tmp);
+
+    return 0;
+}
+
+__s32 TCON1_set_gamma_Enable(__u32 sel, __bool enable)
+{
+	__u32 tmp;
+
+	tmp = LCDC_RUINT32(sel, LCDC_GCTL_OFF);
+	if(enable)
+	{
+		LCDC_WUINT32(sel, LCDC_GCTL_OFF,tmp| (1<<30));
+	}
+	else
+	{
+		LCDC_WUINT32(sel, LCDC_GCTL_OFF,tmp&(~(1<<30)));
+	}
+	return 0;
+}
+
+#define ____SEPARATOR_CPU____
+
+//__asm void my_stmia(int addr,int data1,int data2)
+//{
+//    stmia r0!, {r1,r2}
+//    BX    lr
+//}
+
+void LCD_CPU_Burst_Write(__u32 sel, int addr,int data1,int data2)
+{
+	//my_stmia(LCDC_GET_REG_BASE(sel) + addr,data1,data2);
+}
+
+__u32 LCD_CPU_Busy(__u32 sel)
+{
+	volatile __u32 i;
+	__u32 counter=0;
+	__u32 reg_val;
+
+	LCDC_SET_BIT(sel, LCDC_CPUIF_OFF,LCDC_BIT0);
+	for(i=0;i<80;i++);
+
+	while(1)
+	{
+		reg_val = LCDC_RUINT32(sel, LCDC_CPUIF_OFF);
+		if(reg_val & 0x00c00000)
+		{
+			if(counter>200)
+				return 0;
+		    else
+		    	counter++;
+		}
+		else
+		{
+			return 0;
+		}
+	}
+
+//	return (LCDC_RUINT32(sel, LCDC_CPUIF_OFF) & (LCDC_BIT23 | LCDC_BIT22));
+}
+
+void LCD_CPU_WR_INDEX_24b(__u32 sel, __u32 index)
+{
+	while(LCD_CPU_Busy(sel));                             	//check wr finish
+	LCDC_CLR_BIT(sel, LCDC_CPUIF_OFF,LCDC_BIT25);         	//ca =0
+	while(LCD_CPU_Busy(sel));                             	//check wr finish
+	LCDC_WUINT32(sel, LCDC_CPUWR_OFF, index);				// write data on 8080 bus
+//	while(LCD_CPU_Busy(sel));                             	//check wr finish
+}
+
+void LCD_CPU_WR_DATA_24b(__u32 sel, __u32 data)
+{
+	while(LCD_CPU_Busy(sel));                             	//check wr finish
+	LCDC_SET_BIT(sel, LCDC_CPUIF_OFF,LCDC_BIT25);     			//ca =1
+	while(LCD_CPU_Busy(sel));                             	//check wr finish
+	LCDC_WUINT32(sel, LCDC_CPUWR_OFF,data);
+//	while(LCD_CPU_Busy(sel));                             	//check wr finish
+}
+
+void LCD_CPU_WR_24b(__u32 sel, __u32 index, __u32 data)
+{
+	LCD_CPU_WR_INDEX_24b(sel,index);
+	LCD_CPU_WR_DATA_24b(sel,data);
+}
+
+void LCD_CPU_RD_24b(__u32 sel, __u32 index, __u32 *data)
+{
+}
+
+///////////////////////////////////////////////////////////////////////////////////////////////
+//16bit
+
+__u32 LCD_CPU_IO_extend_16b(__u32 value)
+{
+	return
+		  ((value & 0xfc00)<<8)
+		| ((value & 0x0300)<<6)
+		| ((value & 0x00e0)<<5)
+		| ((value & 0x001f)<<3);
+}
+
+__u32 LCD_CPU_IO_shrink_16b(__u32 value)
+{
+	return
+		  ((value & 0xfc0000)>>8)
+		| ((value & 0x00c000)>>6)
+		| ((value & 0x001c00)>>5)
+		| ((value & 0x0000f8)>>3);
+}
+
+void LCD_CPU_WR(__u32 sel, __u32 index, __u32 data)
+{
+	LCD_CPU_WR_24b(sel,LCD_CPU_IO_extend_16b(index),LCD_CPU_IO_extend_16b(data));
+}
+
+void LCD_CPU_WR_INDEX(__u32 sel, __u32 index)
+{
+    LCD_CPU_WR_INDEX_24b(sel,LCD_CPU_IO_extend_16b(index));
+}
+
+void LCD_CPU_WR_DATA(__u32 sel, __u32 data)
+{
+	LCD_CPU_WR_DATA_24b(sel,LCD_CPU_IO_extend_16b(data));
+}
+
+void LCD_CPU_RD(__u32 sel, __u32 index, __u32 *data)
+{
+}
+
+void LCD_CPU_AUTO_FLUSH(__u32 sel, __u8 en)
+{
+	if(en ==0)
+		LCDC_CLR_BIT(sel, LCDC_CPUIF_OFF,LCDC_BIT28);
+	else
+		LCDC_SET_BIT(sel, LCDC_CPUIF_OFF,LCDC_BIT28);
+}
+
+void LCD_CPU_DMA_FLUSH(__u32 sel, __u8 en)
+{
+	if(en ==0)
+		LCDC_CLR_BIT(sel, LCDC_CPUIF_OFF,LCDC_BIT27);
+	else
+		LCDC_SET_BIT(sel, LCDC_CPUIF_OFF,LCDC_BIT27);
+}
+
+void LCD_XY_SWAP(__u32 sel)
+{
+	__u32 reg,x,y;
+	reg = LCDC_RUINT32(sel, LCDC_BASIC0_OFF);
+	y   = reg & 0x7ff;
+	x   = (reg>>16) & 0x7ff;
+	LCDC_WUINT32(sel, LCDC_BASIC0_OFF,(y<<16) | x);
+}
+
+
+__s32 LCD_LVDS_open(__u32 sel)
+{
+	__u32 reg_val;
+	LCDC_SET_BIT(sel, LCDC_LVDS_OFF,(__u32)1<<31);
+
+	reg_val = LCDC_RUINT32(sel, LCDC_LVDS_ANA1);
+	reg_val |= (0x1f<<16)| (0x1f<<0);
+	LCDC_WUINT32(sel, LCDC_LVDS_ANA1,reg_val);
+    return 0;
+}
+
+__s32 LCD_LVDS_close(__u32 sel)
+{
+	LCDC_WUINT32(sel, LCDC_LVDS_ANA0,0);
+	LCDC_WUINT32(sel, LCDC_LVDS_ANA1,0);
+	LCDC_CLR_BIT(sel, LCDC_LVDS_OFF,(__u32)1<<31);
+	return 0;
+}
+
+#define ____TCON_MUX_CTL____
+
+__u8 TCON_mux_init(void)
+{
+	LCDC_CLR_BIT(0,LCDC_MUX_CTRL,LCDC_BIT31);
+	LCDC_INIT_BIT(0,LCDC_MUX_CTRL,0xf<<4,0<<4);
+	LCDC_INIT_BIT(0,LCDC_MUX_CTRL,0xf,1);
+	return 0;
+}
+
+__u8 TCON_set_hdmi_src(__u8 src)
+{
+	LCDC_INIT_BIT(0,LCDC_MUX_CTRL,0x3<<8,src<<8);
+	return 0;
+}
+
+__u8 TCON_set_tv_src(__u32 tv_index, __u8 src)
+{
+    if(tv_index == 0)
+    {
+	    LCDC_INIT_BIT(0,LCDC_MUX_CTRL,0x3<<4,src<<4);
+	}
+	else
+	{
+	    LCDC_INIT_BIT(0,LCDC_MUX_CTRL,0x3<<0,src<<0);
+	}
+	return 0;
+}
+
+#define ____TCON_CEU____
+
+
+static __u32 range_cut(__s32 *x_value,__s32 x_min,__s32 x_max)
+{
+	if(*x_value>x_max)
+	{
+		*x_value = x_max;
+		return 1;
+	}
+	else if(*x_value<x_min)
+	{
+		*x_value = x_min;
+		return 1;
+	}
+	else
+		return 0;
+}
+
+static void rect_multi(__s32 *dest, __s32 *src1, __s32 *src2)
+{
+	__u32 x,y,z;
+	__s64 val_int64;
+
+	for(x=0;x<4;x++)
+		for(y=0;y<4;y++)
+		{
+			val_int64 = 0;
+			for(z=0;z<4;z++)
+				val_int64 += (__s64)src1[x*4+z]*src2[z*4+y];
+			val_int64 = (val_int64+512)>>10;
+			dest[x*4+y] = val_int64;
+		}
+}
+
+static __s32 reg_corr(__s32 val,__u32 bit)
+{
+	if(val>=0)
+		return val;
+	else
+		return (bit) | (__u32)(-val);
+}
+
+static void rect_ceu_pro(__s32 *p_rect,__s32 b,__s32 c,__s32 s,__s32 h)
+{
+	const __u8 table_sin[91]=
+	{
+		  0,     2,     4,     7,     9,    11,    13,    16,    18,    20,
+		 22,    24,    27,    29,    31,    33,    35,    37,    40,    42,
+		 44,    46,    48,    50,    52,    54,    56,    58,    60,    62,
+		 64,    66,    68,    70,    72,    73,    75,    77,    79,    81,
+		 82,    84,    86,    87,    89,    91,    92,    94,    95,    97,
+		 98,    99,   101,   102,   104,   105,   106,   107,   109,   110,
+		111,   112,   113,   114,   115,   116,   117,   118,   119,   119,
+		120,   121,   122,   122,   123,   124,   124,   125,   125,   126,
+		126,   126,   127,   127,   127,   128,   128,   128,   128,   128,
+		128
+	};
+
+	const __s32 f_csh=1024;
+	const __s32 f_sh=8;
+	__s32 h1=0,h2=0,h3=0,h4=0;
+
+	if(h>=0 && h<90)
+	{
+		h1 =  table_sin[90-h];
+		h2 =  table_sin[h];
+		h3 = -table_sin[h];
+		h4 =  table_sin[90-h];
+	}
+	else if(h>=90 && h<180)
+	{
+		h1 = -table_sin[h-90];
+		h2 =  table_sin[180-h];
+		h3 = -table_sin[180-h];
+		h4 = -table_sin[h-90];
+	}
+	else if(h>=180 && h<270)
+	{
+		h1 = -table_sin[270-h];
+		h2 = -table_sin[h-180];
+		h3 =  table_sin[h-180];
+		h4 = -table_sin[270-h];
+	}
+	else if(h>=270 && h<=360)
+	{
+		h1 =  table_sin[h-270];
+		h2 = -table_sin[360-h];
+		h3 =  table_sin[360-h];
+		h4 =  table_sin[h-270];
+	}
+
+	p_rect[0] = c*f_sh;
+	p_rect[1] = 0;
+	p_rect[2] = 0;
+	p_rect[3] = -16*c*f_sh+(b+16)*f_csh;
+	p_rect[4] = 0;
+	p_rect[5] = (c*s*h1) >>11;
+	p_rect[6] = (c*s*h2) >>11;
+	p_rect[7] = 128*(1*f_csh-p_rect[5]-p_rect[6]);
+	p_rect[8] = 0;
+	p_rect[9] = (c*s*h3) >>11;
+	p_rect[10] = (c*s*h4) >>11;
+	p_rect[11] = 128*(1*f_csh-p_rect[9]-p_rect[10]);
+	p_rect[12] = 0;
+	p_rect[13] = 0;
+	p_rect[14] = 0;
+	p_rect[15] = 1024;
+}
+
+static void lcd_ceu(__u32 r2y_type,__u32 cen_type,__u32 y2r_type, __s32 b,__s32 c,__s32 s,__s32 h,__s32* p_coff)
+{
+	const __s32 rect_1[16]=
+	{
+		1024,	   0,	   0,	   0,
+			0,	1024,	   0,	   0,
+			0,	   0,	1024,	   0,
+			0,	   0,      0,	1024
+	};
+
+	const __s32 rect_r2y_sd[16]=
+	{
+		 263,	 516,	100,	 16384,
+		-152,	-298,	450,    131072,
+		 450,	-377,	-73,	131072,
+		   0,	   0,	  0,	  1024
+	};
+
+	const __s32 rect_r2y_hd[16]=
+	{
+		 187,	 629,	 63,	16384,
+		-103,	-346,	450,	131072,
+		 450,	-409,	-41,	131072,
+		   0,	   0,	  0,	  1024
+	};
+
+	const __s32 rect_y2r_sd[16]=
+	{
+		1192,	   0,	1634,	-228262,
+		1192,	-400,	-833,	 138740,
+		1192,	2066,	   0,	-283574,
+		   0,	   0,      0,	   1024
+	};
+
+	const __s32 rect_y2r_hd[16]=
+	{
+		1192,	   0,	1836,	-254083,
+		1192,	-218,	-547,	  78840,
+		1192,	2166,	   0,	-296288,
+		   0,	   0,      0,	   1024
+	};
+
+	__s32 rect_tmp0[16];
+	__s32 rect_tmp1[16];
+
+	__s32* p_rect = 0;
+	__s32* p_r2y = 0;
+	__s32* p_y2r = 0;
+	__s32* p_ceu = 0;
+	__u32 i = 0;
+
+	if(r2y_type)
+	{
+		if(r2y_type==1)
+			p_r2y = (__s32*)rect_r2y_sd;
+		else if(r2y_type==2)
+			p_r2y = (__s32*)rect_r2y_hd;
+		p_rect = p_r2y;
+	}
+	else
+		p_rect = (__s32*)rect_1;
+
+	if(cen_type)
+	{
+		range_cut(&b,-600,600);
+		range_cut(&c,   0,300);
+		range_cut(&s,   0,300);
+		range_cut(&h,   0,360);
+		p_ceu = rect_tmp1;
+		rect_ceu_pro(p_ceu,b,c,s,h);
+		rect_multi(rect_tmp0,p_ceu,p_rect);
+		p_rect = rect_tmp0;
+	}
+
+	if(y2r_type)
+	{
+		if(y2r_type==1)
+			p_y2r = (__s32*)rect_y2r_sd;
+		else if(y2r_type==2)
+			p_y2r = (__s32*)rect_y2r_hd;
+		rect_multi(rect_tmp1,p_y2r,p_rect);
+		p_rect = rect_tmp1;
+	}
+/*
+	const __s32 rect_srgb_warm[16]=
+	{
+		 1280,	   0,	   0,	   0,
+			0,	1024,	   0,	   0,
+			0,	   0,	 819,	   0,
+			0,	   0,      0,	1024
+	};
+
+	const __s32 rect_srgb_cool[16]=
+	{
+		 819,	   0,	   0,	   0,
+			0,	1024,	   0,	   0,
+			0,	   0,	1280,	   0,
+			0,	   0,      0,	1024
+	};
+
+	if(srgb_type)
+	{
+		if(srgb_type==1)
+			p_srgb == (__s32*)rect_srgb_warm;
+		else if(srgb_type==2)
+			p_srgb == (__s32*)rect_srgb_cool;
+		rect_multi(rect_tmp0,p_srgb,p_rect);
+		p_rect = rect_tmp0;
+	}
+*/
+	for(i=0;i<12;i++)
+		*(p_coff+i) = *(p_rect+i);
+}
+
+//*********************************************************************************************
+// function         : LCDC_ceu(__u32 sel,__u32 func,__s32 b,__s32 c,__s32 s,__s32 h)
+// description      : lcdc color enhance
+// parameters       :
+//              	sel:	sel tcon
+//					func:	0:disable
+//							1:rgb->rgb
+//							2:yuv->yuv
+//                	b:		brightness		(-600 - 600)	default
+//					c:		contastness		(0 - 300)
+//					s:		saturture		(0 - 300)
+// 					h:		hue				(0 - 360)
+//***********************************************************************************************
+
+void LCDC_ceu(__u32 sel,__u32 func,__s32 b,__s32 c,__s32 s,__s32 h)
+{
+	__s32 ceu_coff[12];
+	__u32 error;
+
+	if(func==1 || func==2)
+	{
+		if(func==1)
+		{
+			lcd_ceu(1,1,1,b,c,s,h,ceu_coff);
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x40, 0x000000ff);
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x44, 0x000000ff);
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x48, 0x000000ff);
+		}
+		else if(func==2)
+		{
+			lcd_ceu(0,1,0,b,c,s,h,ceu_coff);
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x40, 0x000000eb);
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x44, 0x000000f0);
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x48, 0x000000f0);
+		}
+
+		ceu_coff[0]  = (ceu_coff[0] +2)  >>2;
+		ceu_coff[1]  = (ceu_coff[1] +2)  >>2;
+		ceu_coff[2]  = (ceu_coff[2] +2)  >>2;
+		ceu_coff[3]  = (ceu_coff[3] +32) >>6;
+		ceu_coff[4]  = (ceu_coff[4] +2)  >>2;
+		ceu_coff[5]  = (ceu_coff[5] +2)  >>2;
+		ceu_coff[6]  = (ceu_coff[6] +2)  >>2;
+		ceu_coff[7]  = (ceu_coff[7] +32) >>6;
+		ceu_coff[8]  = (ceu_coff[8] +2)  >>2;
+		ceu_coff[9]  = (ceu_coff[9] +2)  >>2;
+		ceu_coff[10] = (ceu_coff[10]+2)  >>2;
+		ceu_coff[11] = (ceu_coff[11]+32) >>6;
+
+		error = 0;
+		error |= range_cut(ceu_coff+0,-4095,4095);
+		error |= range_cut(ceu_coff+1,-4095,4095);
+		error |= range_cut(ceu_coff+2,-4095,4095);
+		error |= range_cut(ceu_coff+3,-262143,262143);
+		error |= range_cut(ceu_coff+4,-4095,4095);
+		error |= range_cut(ceu_coff+5,-4095,4095);
+		error |= range_cut(ceu_coff+6,-4095,4095);
+		error |= range_cut(ceu_coff+7,-262143,262143);
+		error |= range_cut(ceu_coff+8,-4095,4095);
+		error |= range_cut(ceu_coff+9,-4095,4095);
+		error |= range_cut(ceu_coff+10,-4095,4095);
+		error |= range_cut(ceu_coff+11,-262143,262143);
+
+		if(error)
+		{
+			LCDC_CLR_BIT(sel, LCDC_CEU_OFF, (__u32)1<<31);
+			return;
+		}
+		else
+		{
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x10, reg_corr(ceu_coff[0],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x14, reg_corr(ceu_coff[1],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x18, reg_corr(ceu_coff[2],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x1c, reg_corr(ceu_coff[3],1<<18));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x20, reg_corr(ceu_coff[4],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x24, reg_corr(ceu_coff[5],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x28, reg_corr(ceu_coff[6],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x2c, reg_corr(ceu_coff[7],1<<18));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x30, reg_corr(ceu_coff[8],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x34, reg_corr(ceu_coff[9],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x38, reg_corr(ceu_coff[10],1<<12));
+			LCDC_WUINT32(sel, LCDC_CEU_OFF+0x3c, reg_corr(ceu_coff[11],1<<18));
+			LCDC_SET_BIT(sel, LCDC_CEU_OFF, (__u32)1<<31);
+		}
+	}
+	else
+	{
+		LCDC_CLR_BIT(sel, LCDC_CEU_OFF, (__u32)1<<31);
+	}
+}
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc_i.h b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc_i.h
new file mode 100644
index 0000000..b70ab2c
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_lcdc_i.h
@@ -0,0 +1,104 @@
+
+#ifndef __DE_LCDC_I_H__
+#define __DE_LCDC_I_H__
+
+#define LCDC_BIT0         (0x00000001)
+#define LCDC_BIT1		  (0x00000002)
+#define LCDC_BIT2		  (0x00000004)
+#define LCDC_BIT3		  (0x00000008)
+#define LCDC_BIT4		  (0x00000010)
+#define LCDC_BIT5		  (0x00000020)
+#define LCDC_BIT6		  (0x00000040)
+#define LCDC_BIT7		  (0x00000080)
+#define LCDC_BIT8		  (0x00000100)
+#define LCDC_BIT9		  (0x00000200)
+#define LCDC_BIT10		  (0x00000400)
+#define LCDC_BIT11		  (0x00000800)
+#define LCDC_BIT12		  (0x00001000)
+#define LCDC_BIT13		  (0x00002000)
+#define LCDC_BIT14		  (0x00004000)
+#define LCDC_BIT15		  (0x00008000)
+#define LCDC_BIT16		  (0x00010000)
+#define LCDC_BIT17		  (0x00020000)
+#define LCDC_BIT18		  (0x00040000)
+#define LCDC_BIT19		  (0x00080000)
+#define LCDC_BIT20		  (0x00100000)
+#define LCDC_BIT21		  (0x00200000)
+#define LCDC_BIT22		  (0x00400000)
+#define LCDC_BIT23		  (0x00800000)
+#define LCDC_BIT24		  (0x01000000)
+#define LCDC_BIT25		  (0x02000000)
+#define LCDC_BIT26		  (0x04000000)
+#define LCDC_BIT27		  (0x08000000)
+#define LCDC_BIT28		  (0x10000000)
+#define LCDC_BIT29		  (0x20000000)
+#define LCDC_BIT30		  (0x40000000)
+#define LCDC_BIT31		  (0x80000000)
+
+
+#define LCDC_GCTL_OFF   		(0x000)				/*LCD Controller global control registers offset*/
+#define LCDC_GINT0_OFF   		(0x004)				/*LCD Controller interrupt registers offset*/
+#define LCDC_GINT1_OFF   		(0x008)				/*LCD Controller interrupt registers offset*/
+#define LCDC_FRM0_OFF   		(0x010)				/*LCD Controller frm registers offset*/
+#define LCDC_FRM1_OFF   		(0x014)				/*LCD Controller frm registers offset*/
+#define LCDC_FRM2_OFF   		(0x02c)				/*LCD Controller frm registers offset*/
+#define LCDC_CTL_OFF   			(0x040)				/*LCD Controller control registers offset*/
+#define LCDC_DCLK_OFF			(0x044)				/*LCD Controller dot clock registers offset*/
+#define LCDC_BASIC0_OFF  		(0x048)				/*LCD Controller base0 registers offset*/
+#define LCDC_BASIC1_OFF  		(0x04c)				/*LCD Controller base1 registers offset*/
+#define LCDC_BASIC2_OFF  		(0x050)				/*LCD Controller base2 registers offset*/
+#define LCDC_BASIC3_OFF  		(0x054)				/*LCD Controller base3 registers offset*/
+#define LCDC_HVIF_OFF  			(0x058)				/*LCD Controller hv interface registers offset*/
+#define LCDC_CPUIF_OFF  		(0x060)				/*LCD Controller cpu interface registers offset*/
+#define LCDC_CPUWR_OFF		    (0x064)				/*LCD Controller cpu wr registers offset*/
+#define LCDC_CPURD_OFF		    (0x068)				/*LCD Controller cpu rd registers offset*/
+#define LCDC_CPURDNX_OFF        (0x06c)				/*LCD Controller cpu rdnx registers offset*/
+#define LCDC_TTL0_OFF			(0x070)				/*LCD Controller TTL0 registers offset*/
+#define LCDC_TTL1_OFF			(0x074)				/*LCD Controller TTL1 registers offset*/
+#define LCDC_TTL2_OFF			(0x078)				/*LCD Controller TTL2 registers offset*/
+#define LCDC_TTL3_OFF			(0x07c)				/*LCD Controller TTL3 registers offset*/
+#define LCDC_TTL4_OFF			(0x080)				/*LCD Controller TTL4 registers offset*/
+#define LCDC_LVDS_OFF			(0x084)				/*LCD Controller LVDS registers offset*/
+#define LCDC_IOCTL0_OFF		    (0x088)				/*LCD Controller io control0 registers offset*/
+#define LCDC_IOCTL1_OFF			(0x08c)				/*LCD Controller io control1 registers offset*/
+
+#define LCDC_HDTVIF_OFF			(0x090)				/*LCD Controller tv interface  registers offset*/
+#define LCDC_HDTV0_OFF			(0x094)				/*LCD Controller HDTV0 registers offset*/
+#define LCDC_HDTV1_OFF			(0x098)				/*LCD Controller HDTV1 registers offset*/
+#define LCDC_HDTV2_OFF			(0x09c)				/*LCD Controller HDTV2 registers offset*/
+#define LCDC_HDTV3_OFF			(0x0a0)				/*LCD Controller HDTV3 registers offset*/
+#define LCDC_HDTV4_OFF			(0x0a4)				/*LCD Controller HDTV4 registers offset*/
+#define LCDC_HDTV5_OFF			(0x0a8)				/*LCD Controller HDTV5 registers offset*/
+#define LCDC_IOCTL2_OFF		    (0x0f0)				/*LCD Controller io control2 registers offset*/
+#define LCDC_IOCTL3_OFF			(0x0f4)				/*LCD Controller io control3 registers offset*/
+#define LCDC_DUBUG_OFF          (0x0fc)             /*LCD Controller debug register*/
+
+#define LCDC_CEU_OFF          	(0x100)
+#define	LCDC_MUX_CTRL			(0x200)
+#define	LCDC_LVDS_ANA0			(0x220)
+#define	LCDC_LVDS_ANA1			(0x224)
+
+#define	LCDC_3DF_CTL			(0x300)
+#define	LCDC_3DF_A1B			(0x304)
+#define	LCDC_3DF_A1E			(0x308)
+#define	LCDC_3DF_D1				(0x30C)
+#define	LCDC_3DF_A2B			(0x310)
+#define	LCDC_3DF_A2E			(0x314)
+#define	LCDC_3DF_D2				(0x318)
+#define	LCDC_3DF_A3B			(0x31C)
+#define	LCDC_3DF_A3E			(0x320)
+#define	LCDC_3DF_D3				(0x318)
+
+#define LCDC_GAMMA_TABLE_OFF    (0x400)
+
+#define LCDC_GET_REG_BASE(sel)    ((sel)==0?(lcdc_reg_base0):(lcdc_reg_base1))
+
+#define LCDC_WUINT32(sel,offset,value)          (*((volatile __u32 *)( LCDC_GET_REG_BASE(sel) + (offset) ))=(value))
+#define LCDC_RUINT32(sel,offset)                (*((volatile __u32 *)( LCDC_GET_REG_BASE(sel) + (offset) )))
+
+#define LCDC_SET_BIT(sel,offset,bit)            (*((volatile __u32 *)( LCDC_GET_REG_BASE(sel) + (offset) )) |=(bit))
+#define LCDC_CLR_BIT(sel,offset,bit)            (*((volatile __u32 *)( LCDC_GET_REG_BASE(sel) + (offset) )) &=(~(bit)))
+#define LCDC_INIT_BIT(sel,offset,c,s)			(*((volatile __u32 *)( LCDC_GET_REG_BASE(sel) + (offset) )) = \
+												(((*(volatile __u32 *)( LCDC_GET_REG_BASE(sel) + (offset) )) & (~(c))) | (s)))
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec.c b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec.c
new file mode 100644
index 0000000..a55b168
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec.c
@@ -0,0 +1,673 @@
+
+#include "ebios_lcdc_tve.h"
+#include "de_tvec_i.h"
+
+__u32 tve_reg_base0;
+__u32 tve_reg_base1;
+
+__s32 TVE_set_reg_base(__u32 sel,__u32 address)
+{
+	if(sel == 0)
+    {
+	    tve_reg_base0 = address;
+	}
+	else if(sel == 1)
+	{
+	    tve_reg_base1 = address;
+	}
+	return 0;
+}
+
+//tve
+// init module
+////////////////////////////////////////////////////////////////////////////////
+__s32  TVE_init(__u32 sel)
+{
+	TVE_close(sel);
+
+	TVE_dac_set_de_bounce(sel,0,0);
+	TVE_dac_set_de_bounce(sel,1,0);
+	TVE_dac_set_de_bounce(sel,2,0);
+	TVE_dac_set_de_bounce(sel,3,0);
+	TVE_dac_int_disable(sel,0);
+	TVE_dac_int_disable(sel,1);
+	TVE_dac_int_disable(sel,2);
+	TVE_dac_int_disable(sel,3);
+	TVE_dac_autocheck_enable(sel,0);
+	TVE_dac_autocheck_enable(sel,1);
+	TVE_dac_autocheck_enable(sel,2);
+	TVE_dac_autocheck_enable(sel,3);
+	TVE_csc_init(sel,0);
+
+	if(sel == 0)
+	{
+	    TVE_dac_sel(0, 0, 0);
+	    TVE_dac_sel(0, 1, 1);
+	    TVE_dac_sel(0, 2, 2);
+	    TVE_dac_sel(0, 3, 3);
+	}
+	TVE_SET_BIT(sel,TVE_008,0x3<<16);
+	TVE_WUINT32(sel,TVE_024,0x18181818);
+
+	return 0;
+}
+
+__s32 TVE_exit(__u32 sel)
+{
+	TVE_dac_int_disable(sel,0);
+	TVE_dac_int_disable(sel,1);
+	TVE_dac_int_disable(sel,2);
+	TVE_dac_int_disable(sel,3);
+	TVE_dac_autocheck_disable(sel,0);
+	TVE_dac_autocheck_disable(sel,1);
+	TVE_dac_autocheck_disable(sel,2);
+	TVE_dac_autocheck_disable(sel,3);
+
+	return 0;
+}
+
+// open module
+////////////////////////////////////////////////////////////////////////////////
+__s32 TVE_open(__u32 sel)
+{
+    TVE_SET_BIT(sel,TVE_000, 0x1<<0);
+
+	return 0;
+}
+
+__s32 TVE_close(__u32 sel)
+{
+    TVE_CLR_BIT(sel,TVE_000, 0x1<<0);
+
+    return 0;
+}
+
+// set mode
+////////////////////////////////////////////////////////////////////////////////
+//15~13     12~10       9~7         6~4
+//DAC3      DAC2        DAC1        DAC0
+
+//CVBS(0)
+//             CR(4)         CB(5)        Y(6)
+//                            Chroma(1)    Luma(2)
+
+__s32 TVE_set_tv_mode(__u32 sel, __u8 mode)
+{
+	switch(mode)
+	{
+	case DISP_TV_MOD_PAL_SVIDEO:
+	case DISP_TV_MOD_PAL:
+		TVE_WUINT32(sel,TVE_004, 0x07030001);
+		TVE_WUINT32(sel,TVE_014, 0x008a0018);
+		TVE_WUINT32(sel,TVE_01C, 0x00160271);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x800D000C);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_10C, 0x00002828);
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_118, 0x0000e0e0);
+		TVE_WUINT32(sel,TVE_12C, 0x00000101);//
+		break;
+
+	case DISP_TV_MOD_PAL_M:
+	case DISP_TV_MOD_PAL_M_SVIDEO:
+		TVE_WUINT32(sel,TVE_004, 0x07030000);//ntsc
+		TVE_WUINT32(sel,TVE_014, 0x00760020);
+		TVE_WUINT32(sel,TVE_01C, 0x0016020d);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x000e000c);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00f0011a);
+		TVE_WUINT32(sel,TVE_10C, 0x0000004f);
+		TVE_WUINT32(sel,TVE_110, 0x00000000);
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		TVE_WUINT32(sel,TVE_11C, 0x001000f0);
+		TVE_WUINT32(sel,TVE_010, 0x21e6efe3);//add for pal-m
+		TVE_WUINT32(sel,TVE_100, 0x00000000);//add for pal-m
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_12C, 0x00000101);//
+		break;
+
+	case DISP_TV_MOD_PAL_NC:
+	case DISP_TV_MOD_PAL_NC_SVIDEO:
+		TVE_WUINT32(sel,TVE_004, 0x07030001);//PAL
+		TVE_WUINT32(sel,TVE_014, 0x008a0018);
+		TVE_WUINT32(sel,TVE_01C, 0x00160271);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x800D000C);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_10C, 0x00002828);
+		TVE_WUINT32(sel,TVE_010, 0x21F69446);//add for PAL-NC
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_118, 0x0000e0e0);
+		TVE_WUINT32(sel,TVE_12C, 0x00000101);//
+		break;
+
+	case DISP_TV_MOD_NTSC:
+	case DISP_TV_MOD_NTSC_SVIDEO:
+		TVE_WUINT32(sel,TVE_004, 0x07030000);
+		TVE_WUINT32(sel,TVE_014, 0x00760020);
+		TVE_WUINT32(sel,TVE_01C, 0x0016020d);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x000e000c);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00f0011a);
+		TVE_WUINT32(sel,TVE_10C, 0x0000004f);
+		TVE_WUINT32(sel,TVE_110, 0x00000000);
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		TVE_WUINT32(sel,TVE_11C, 0x001000f0);
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_12C, 0x00000101);//
+		break;
+
+	case DISP_TV_MOD_480I:
+		TVE_WUINT32(sel,TVE_004, 0x07040000);
+		TVE_WUINT32(sel,TVE_014, 0x00760020);
+		TVE_WUINT32(sel,TVE_01C, 0x0016020d);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x000e000c);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_10C, 0x0000004f);
+		TVE_WUINT32(sel,TVE_110, 0x00000000);
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		TVE_WUINT32(sel,TVE_11C, 0x001000fc);
+		break;
+
+	case DISP_TV_MOD_576I:
+		TVE_WUINT32(sel,TVE_004, 0x07040001);
+		TVE_WUINT32(sel,TVE_014, 0x008a0018);
+		TVE_WUINT32(sel,TVE_01C, 0x00160271);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x800D000C);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_10C, 0x00002828);
+		break;
+
+	case DISP_TV_MOD_480P:
+		TVE_WUINT32(sel,TVE_004, 0x07040002);
+		TVE_WUINT32(sel,TVE_014, 0x00760020);
+		TVE_WUINT32(sel,TVE_01C, 0x002c020d);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x000e000C);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		break;
+
+	case DISP_TV_MOD_576P:
+		TVE_WUINT32(sel,TVE_004, 0x07040003);
+		TVE_WUINT32(sel,TVE_014, 0x008a0018);
+		TVE_WUINT32(sel,TVE_01C, 0x002c0271);
+		TVE_WUINT32(sel,TVE_114, 0x0016447e);
+		TVE_WUINT32(sel,TVE_124, 0x000005a0);
+		TVE_WUINT32(sel,TVE_130, 0x800B000C);
+		TVE_WUINT32(sel,TVE_13C, 0x00000000);
+		TVE_WUINT32(sel,TVE_00C, 0x00000120);
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		break;
+
+	case DISP_TV_MOD_720P_50HZ:
+		TVE_WUINT32(sel,TVE_004, 0x0004000a);
+		TVE_WUINT32(sel,TVE_014, 0x01040190);
+		TVE_WUINT32(sel,TVE_018, 0x05000190);
+		TVE_WUINT32(sel,TVE_01C, 0x001902ee);
+		TVE_WUINT32(sel,TVE_114, 0xdc280228);
+		TVE_WUINT32(sel,TVE_124, 0x00000500);
+		TVE_WUINT32(sel,TVE_130, 0x000e000c);
+		TVE_WUINT32(sel,TVE_13C, 0x07000000);
+		TVE_WUINT32(sel,TVE_00C, 0x01be0124);
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		break;
+
+	case DISP_TV_MOD_720P_60HZ:
+		TVE_WUINT32(sel,TVE_004, 0x0004000a);
+		TVE_WUINT32(sel,TVE_014, 0x01040046);
+		TVE_WUINT32(sel,TVE_018, 0x05000046);
+		TVE_WUINT32(sel,TVE_01C, 0x001902ee);
+		TVE_WUINT32(sel,TVE_114, 0xdc280228);
+		TVE_WUINT32(sel,TVE_124, 0x00000500);
+		TVE_WUINT32(sel,TVE_130, 0x000c0008);
+		TVE_WUINT32(sel,TVE_13C, 0x07000000);
+		TVE_WUINT32(sel,TVE_00C, 0x01be0124);
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		break;
+
+	case DISP_TV_MOD_1080I_50HZ:
+		TVE_WUINT32(sel,TVE_004, 0x0004000c);
+		TVE_WUINT32(sel,TVE_014, 0x00c001e4);
+		TVE_WUINT32(sel,TVE_018, 0x03700108);
+		TVE_WUINT32(sel,TVE_01C, 0x00140465);
+		TVE_WUINT32(sel,TVE_114, 0x582c442c);
+		TVE_WUINT32(sel,TVE_124, 0x00000780);
+		TVE_WUINT32(sel,TVE_130, 0x000e0008);
+		TVE_WUINT32(sel,TVE_13C, 0x07000000);
+		TVE_WUINT32(sel,TVE_00C, 0x01be0124);
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		TVE_WUINT32(sel,TVE_104, 0x00000000);
+		break;
+
+	case DISP_TV_MOD_1080I_60HZ:
+		TVE_WUINT32(sel,TVE_004, 0x0004000c);
+		TVE_WUINT32(sel,TVE_014, 0x00c0002c);
+		TVE_WUINT32(sel,TVE_018, 0x0370002c);
+		TVE_WUINT32(sel,TVE_01C, 0x00140465);
+		TVE_WUINT32(sel,TVE_114, 0x582c442c);
+		TVE_WUINT32(sel,TVE_124, 0x00000780);
+		TVE_WUINT32(sel,TVE_130, 0x000e0008);
+		TVE_WUINT32(sel,TVE_13C, 0x07000000);
+		TVE_WUINT32(sel,TVE_00C, 0x01be0124);
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_020, 0x00fc00fc);
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		TVE_WUINT32(sel,TVE_104, 0x00000000);
+		break;
+
+	case DISP_TV_MOD_1080P_50HZ:
+		TVE_WUINT32(sel,TVE_004, 0x0004000e);//
+		TVE_WUINT32(sel,TVE_014, 0x00c001e4);//50hz
+		TVE_WUINT32(sel,TVE_018, 0x07bc01e4);//50hz
+		TVE_WUINT32(sel,TVE_01C, 0x00290465);//
+		TVE_WUINT32(sel,TVE_114, 0x582c022c);//
+		TVE_WUINT32(sel,TVE_124, 0x00000780);//
+		TVE_WUINT32(sel,TVE_130, 0x000e000c);//
+		TVE_WUINT32(sel,TVE_13C, 0x07000000);
+		TVE_WUINT32(sel,TVE_00C, 0x01be0124);
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_020, 0x00fc00c0);//0x00fc00fc重影？
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		break;
+
+	case DISP_TV_MOD_1080P_60HZ:
+		TVE_WUINT32(sel,TVE_004, 0x0004000e);//
+		TVE_WUINT32(sel,TVE_00C, 0x01be0124);
+		TVE_WUINT32(sel,TVE_014, 0x00c0002c);//60hz
+		TVE_WUINT32(sel,TVE_018, 0x07bc002c);//60hz
+		TVE_WUINT32(sel,TVE_01C, 0x00290465);//
+		TVE_WUINT32(sel,TVE_020, 0x00fc00c0);//0x00fc00fc重影？
+		TVE_WUINT32(sel,TVE_114, 0x582c022c);//
+		TVE_WUINT32(sel,TVE_118, 0x0000a0a0);
+		TVE_WUINT32(sel,TVE_124, 0x00000780);//
+		TVE_WUINT32(sel,TVE_128, 0x00000000);//
+		TVE_WUINT32(sel,TVE_130, 0x000e000c);//
+		TVE_WUINT32(sel,TVE_13C, 0x07000000);
+		break;
+
+	default:
+		return 0;
+	}
+	TVE_CLR_BIT(sel,TVE_008,0xfff<<4);
+	TVE_SET_BIT(sel,TVE_008,0x3<<16);
+	TVE_SET_BIT(sel,TVE_008,0xf<<18);
+	TVE_WUINT32(sel,TVE_024,0x1F1F1F1F);
+	return 0;
+}
+
+__s32 TVE_set_vga_mode(__u32 sel)
+{
+    TVE_WUINT32(sel,TVE_004, 0x20000000);
+    TVE_WUINT32(sel,TVE_008, 0x40031ac7);
+    TVE_WUINT32(sel,TVE_024, 0x00000000);
+    TVE_INIT_BIT(0,TVE_000, 0xfff<<4,0x321<<4);
+	return 0;
+}
+
+__u8 TVE_query_int(__u32 sel)
+{
+    __u8    sts = 0;
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_034);
+    sts = readval & 0x0f;
+
+    return sts;
+}
+
+__u8  TVE_clear_int(__u32 sel)
+{
+    __u32    sts = 0;
+    __u32    readval;
+
+    readval = TVE_RUINT32(sel,TVE_034);
+    sts = readval & 0x0f;
+    TVE_WUINT32(sel,TVE_034,sts);
+
+    return 0;
+}
+
+//0:unconnected; 1:connected; 3:short to ground
+__s32 TVE_get_dac_status(__u32 index)
+{
+    __u32 reg_000,map,sel,dac;
+    __s32 status;
+
+    reg_000 = TVE_RUINT32(0,TVE_000);
+    map = (reg_000>>(4*(index+1))) & 0xf;
+    if(map>=1 && map<=4)
+    {
+        sel = 0;
+        dac = map-1;
+    }
+    else if(map>=5 && map<=8)
+    {
+        sel = 1;
+        dac = map-5;
+    }
+    else
+    {
+        return -1;
+    }
+
+    TVE_SET_BIT(sel,TVE_008,0x3<<16);
+    TVE_SET_BIT(sel,TVE_008,0xf<<18);
+    TVE_WUINT32(sel,TVE_024,0x18181818);
+
+    status = TVE_RUINT32(sel,TVE_038)>>(dac*8);
+    status &= 0x3;
+
+    return status;
+}
+
+__u8 TVE_dac_int_enable(__u32 sel,__u8 index)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_030);
+    readval |= (1<<(16+index));
+    TVE_WUINT32(sel,TVE_030,readval);
+
+    return 0;
+}
+
+__u8 TVE_dac_int_disable(__u32 sel,__u8 index)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_030);
+    readval &= (~(1<<(16+index)));
+    TVE_WUINT32(sel,TVE_030,readval);
+
+    return 0;
+}
+
+__u8 TVE_dac_autocheck_enable(__u32 sel,__u8 index)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_030);
+    readval |= (1<<index);
+    TVE_WUINT32(sel,TVE_030,readval);
+
+    return 0;
+}
+
+__u8 TVE_dac_autocheck_disable(__u32 sel,__u8 index)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_030);
+    readval &= (~(1<<index));
+    TVE_WUINT32(sel,TVE_030,readval);
+
+    return 0;
+}
+
+__u8 TVE_dac_enable(__u32 sel,__u8 index)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_008);
+
+    TVE_SET_BIT(sel,TVE_008, readval | (1<<index));
+
+    return 0;
+}
+
+__u8 TVE_dac_disable(__u32 sel,__u8 index)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_008);
+
+    TVE_WUINT32(sel,TVE_008,readval & (~(1<<index)));
+
+
+    return 0;
+}
+
+__s32 TVE_dac_set_source(__u32 sel,__u32 index,__u32 source)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_008);
+
+    if(index == 0)
+    {
+        readval = (readval & 0xffffff8f)|((source & 0x7)<<4);
+    }
+    else if(index == 1)
+    {
+        readval = (readval & 0xfffffc7f)|((source & 0x7)<<7);
+    }
+    else if(index == 2)
+    {
+        readval = (readval & 0xffffe3ff)|((source & 0x7)<<10);
+    }
+    else if(index == 3)
+    {
+        readval = (readval & 0xffff1fff)|((source & 0x7)<<13);
+    }
+    else
+    {
+        return 0;
+    }
+    TVE_WUINT32(sel,TVE_008,readval);
+
+    return 0;
+}
+
+
+__s32 TVE_dac_get_source(__u32 sel,__u32 index)
+{
+    __u32   readval = 0;
+
+    readval = TVE_RUINT32(sel,TVE_008);
+
+    if(index == 0)
+    {
+        readval = (readval >> 4) & 0x7;
+    }
+    else if(index == 1)
+    {
+        readval = (readval >> 7) & 0x7;
+    }
+    else if(index == 2)
+    {
+        readval = (readval >> 10) & 0x7;
+    }
+    else if(index == 3)
+    {
+        readval = (readval >> 13) & 0x7;
+    }
+
+    return readval;
+}
+
+__u8 TVE_dac_set_de_bounce(__u32 sel,__u8 index,__u32 times)
+{
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_03C);
+
+    if(index == 0)
+    {
+        readval = (readval & 0xfffffff0)|(times & 0xf);
+    }
+    else if(index == 1)
+    {
+        readval = (readval & 0xfffff0ff)|((times & 0xf)<<8);
+    }
+    else if(index == 2)
+    {
+        readval = (readval & 0xfff0ffff)|((times & 0xf)<<16);
+    }
+    else if(index == 3)
+    {
+        readval = (readval & 0xfff0ffff)|((times & 0xf)<<20);
+    }
+    else
+    {
+        return 0;
+    }
+    TVE_WUINT32(sel,TVE_03C,readval);
+
+    return 0;
+}
+
+__u8 TVE_dac_get_de_bounce(__u32 sel,__u8 index)
+{
+    __u8    sts = 0;
+    __u32   readval;
+
+    readval = TVE_RUINT32(sel,TVE_03C);
+
+    if(index == 0)
+    {
+        sts = readval & 0xf;
+    }
+    else if(index == 1)
+    {
+        sts = (readval & 0xf00)>>8;
+    }
+    else if(index == 2)
+    {
+        sts = (readval & 0xf0000)>>16;
+    }
+    else if(index == 3)
+    {
+        sts = (readval & 0xf000000)>>20;
+    }
+    else
+    {
+        return 0;
+    }
+
+    return sts;
+}
+
+//dac: 0~3
+//index: 0~3
+__s32 TVE_dac_sel(__u32 sel,__u32 dac, __u32 index)
+{
+	__u32   readval;
+
+	if(dac == 0)
+	{
+        readval = TVE_RUINT32(sel,TVE_000);
+    	readval &= (~(0xf<<4));
+    	readval |= ((sel*4+index+1)<<4);
+    	TVE_WUINT32(sel,TVE_000,readval);
+
+    	if(sel == 1)
+    	{
+            readval = TVE_RUINT32(0,TVE_000);
+        	readval &= (~(0xf<<4));
+        	readval |= ((sel*4+index+1)<<4);
+        	TVE_WUINT32(0,TVE_000,readval);
+    	}
+	}
+	else if(dac == 1)
+	{
+        readval = TVE_RUINT32(sel,TVE_000);
+    	readval &= (~(0xf<<8));
+    	readval |= ((sel*4+index+1)<<8);
+    	TVE_WUINT32(sel,TVE_000,readval);
+    	if(sel == 1)
+    	{
+            readval = TVE_RUINT32(0,TVE_000);
+        	readval &= (~(0xf<<8));
+        	readval |= ((sel*4+index+1)<<8);
+        	TVE_WUINT32(0,TVE_000,readval);
+    	}
+	}
+	else if(dac == 2)
+	{
+        readval = TVE_RUINT32(sel,TVE_000);
+    	readval &= (~(0xf<<12));
+    	readval |= ((sel*4+index+1)<<12);
+    	TVE_WUINT32(sel,TVE_000,readval);
+    	if(sel == 1)
+    	{
+            readval = TVE_RUINT32(0,TVE_000);
+        	readval &= (~(0xf<<12));
+        	readval |= ((sel*4+index+1)<<12);
+        	TVE_WUINT32(0,TVE_000,readval);
+    	}
+	}
+	else if(dac == 3)
+	{
+        readval = TVE_RUINT32(sel,TVE_000);
+    	readval &= (~(0xf<<16));
+    	readval |= ((sel*4+index+1)<<16);
+    	TVE_WUINT32(sel,TVE_000,readval);
+    	if(sel == 1)
+    	{
+            readval = TVE_RUINT32(0,TVE_000);
+        	readval &= (~(0xf<<16));
+        	readval |= ((sel*4+index+1)<<16);
+        	TVE_WUINT32(0,TVE_000,readval);
+    	}
+	}
+	return 0;
+}
+
+
+__u8 TVE_csc_init(__u32 sel,__u8 type)
+{
+	if(sel==0)
+	{
+		TVE_WUINT32(sel, TVE_040, 0x08440832);
+		TVE_WUINT32(sel, TVE_044, 0x3B6DACE1);
+		TVE_WUINT32(sel, TVE_048, 0x0E1D13DC);
+		TVE_WUINT32(sel, TVE_04C, 0x00108080);
+		return 0;
+	}
+	else
+		return 0;
+}
+
+__u8 TVE_csc_enable(__u32 sel)
+{
+	TVE_SET_BIT(sel,TVE_040, (__u32)(0x1<<31));
+	return 0;
+}
+
+__u8 TVE_csc_disable(__u32 sel)
+{
+	TVE_CLR_BIT(sel,TVE_040, 0x1<<31);
+	return 0;
+}
+
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec_i.h b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec_i.h
new file mode 100644
index 0000000..7c614eb
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/de_tvec_i.h
@@ -0,0 +1,49 @@
+
+#ifndef __DE_TVE_I_H__
+#define __DE_TVE_I_H__
+
+
+/*tv encoder registers offset*/
+#define TVE_000    (0x000)
+#define TVE_004    (0x004)
+#define TVE_008    (0x008)
+#define TVE_00C    (0x00c)
+#define TVE_010    (0x010)
+#define TVE_014    (0x014)
+#define TVE_018    (0x018)
+#define TVE_01C    (0x01c)
+#define TVE_020    (0x020)
+#define TVE_024    (0x024)
+#define TVE_030    (0X030)
+#define TVE_034    (0x034)
+#define TVE_038    (0x038)
+#define TVE_03C    (0x03c)
+#define TVE_040    (0x040)
+#define TVE_044    (0x044)
+#define TVE_048    (0x048)
+#define TVE_04C    (0x04c)
+#define TVE_100    (0x100)
+#define TVE_104    (0x104)
+#define TVE_10C    (0x10c)
+#define TVE_110    (0x110)
+#define TVE_114    (0x114)
+#define TVE_118    (0x118)
+#define TVE_11C    (0x11c)
+#define TVE_124    (0x124)
+#define TVE_128    (0x128)
+#define TVE_12C    (0x12c)
+#define TVE_130    (0x130)
+#define TVE_138    (0x138)
+#define TVE_13C    (0x13C)
+
+#define TVE_GET_REG_BASE(sel)					((sel)==0?(tve_reg_base0):(tve_reg_base1))
+
+#define TVE_WUINT32(sel,offset,value)			(*((volatile __u32 *)( TVE_GET_REG_BASE(sel) + (offset) ))=(value))
+#define TVE_RUINT32(sel,offset)					(*((volatile __u32 *)( TVE_GET_REG_BASE(sel) + (offset) )))
+
+#define TVE_SET_BIT(sel,offset,bit)				(*((volatile __u32 *)( TVE_GET_REG_BASE(sel) + (offset) )) |= (bit))
+#define TVE_CLR_BIT(sel,offset,bit)				(*((volatile __u32 *)( TVE_GET_REG_BASE(sel) + (offset) )) &= (~(bit)))
+#define TVE_INIT_BIT(sel,offset,c,s)			(*((volatile __u32 *)( TVE_GET_REG_BASE(sel) + (offset) )) = \
+												(((*(volatile __u32 *)( TVE_GET_REG_BASE(sel) + (offset) )) & (~(c))) | (s)))
+
+#endif
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_de.h b/drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_de.h
new file mode 100644
index 0000000..6d568ab
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_de.h
@@ -0,0 +1,348 @@
+#ifndef __EBIOS_DE_H__
+#define __EBIOS_DE_H__
+
+#include "../../bsp_display.h"
+
+#define DE_WB_END_IE    			(1<<7)      /*write back end interrupt */
+#define DE_FE_INTEN_ALL             0x1ff     /*front-end all interrupt enable*/
+#define DE_IMG_IRDY_IE  (1<<6)
+
+#define SCAL_WB_ERR_SYNC (1<<15) //sync reach flag when capture in process
+#define SCAL_WB_ERR_LOSEDATA (1<<14) //lose data flag when capture in process
+#define SCAL_WB_ERR_STATUS (1<<12) //unvalid write back
+
+typedef enum   		/*layer framebuffer format enum definition*/
+{
+	DE_MONO_1BPP=0,
+	DE_MONO_2BPP,
+	DE_MONO_4BPP,
+	DE_MONO_8BPP,
+	DE_COLOR_RGB655,
+	DE_COLOR_RGB565,
+	DE_COLOR_RGB556,
+	DE_COLOR_ARGB1555,
+	DE_COLOR_RGBA5551,
+	DE_COLOR_RGB0888,
+	DE_COLOR_ARGB8888,
+	DE_COLOR_RGB888,
+	DE_COLOR_ARGB4444,
+
+}de_fbfmt_e;
+
+typedef enum     		/*internal layer framebuffer format enum definition*/
+{
+	DE_IF1BPP=0,
+	DE_IF2BPP,
+	DE_IF4BPP,
+	DE_IF8BPP
+}de_inter_fbfmt_e;
+
+typedef enum
+{
+  DE_H32_V32_8BPP,
+  DE_H64_V64_2BPP,
+  DE_H64_V32_4BPP,
+  DE_H32_V64_4BPP
+}de_hwc_mode_e;
+
+
+typedef enum
+{
+   DE_N32PIXELS=0,
+   DE_N64PIXELS
+}de_pixels_num_t;
+
+
+typedef enum __SCAL_PS
+{
+	DE_SCAL_BGRA=0,  //rgb
+	DE_SCAL_ARGB=1,
+	DE_SCAL_AYUV=0,
+	DE_SCAL_VUYA=1,
+	DE_SCAL_UVUV=0, //for uv combined
+	DE_SCAL_VUVU=1,
+	DE_SCAL_UYVY=0,
+	DE_SCAL_YUYV=1,
+	DE_SCAL_VYUY=2,
+	DE_SCAL_YVYU=3,
+}__scal_ps_t;
+
+typedef enum __SCAL_INMODE
+{
+	DE_SCAL_PLANNAR=0,
+	DE_SCAL_INTER_LEAVED,
+	DE_SCAL_UVCOMBINED,
+	DE_SCAL_PLANNARMB=4,
+	DE_SCAL_UVCOMBINEDMB=6
+}__scal_inmode_t;
+
+
+typedef enum __SCAL_INFMT
+{
+	DE_SCAL_INYUV444=0,
+	DE_SCAL_INYUV422,
+	DE_SCAL_INYUV420,
+	DE_SCAL_INYUV411,
+	DE_SCAL_INCSIRGB,
+	DE_SCAL_INRGB888
+}__scal_infmt_t;
+
+typedef enum __SCAL_OUTFMT
+{
+	DE_SCAL_OUTPRGB888=0,
+	DE_SCAL_OUTI0RGB888,
+	DE_SCAL_OUTI1RGB888,
+	DE_SCAL_OUTPYUV444=4,
+	DE_SCAL_OUTPYUV420,
+	DE_SCAL_OUTPYUV422,
+	DE_SCAL_OUTPYUV411
+}__scal_outfmt_t;
+//for 3D inmod,  source mod must  be DE_SCAL_PLANNAR or DE_SCAL_UVCOMBINEDMB
+//DE_SCAL_INTER_LEAVED and DE_SCAL_UVCOMBINED maybe supported in future====
+typedef enum __SCAL_3D_INMODE
+{
+	DE_SCAL_3DIN_TB=0,
+	DE_SCAL_3DIN_FP=1,
+	DE_SCAL_3DIN_SSF=2,
+	DE_SCAL_3DIN_SSH=3,
+	DE_SCAL_3DIN_LI=4,
+}__scal_3d_inmode_t;
+
+typedef enum __SCAL_3D_OUTMODE
+{
+	DE_SCAL_3DOUT_CI_1=0,    //for lcd
+	DE_SCAL_3DOUT_CI_2,
+	DE_SCAL_3DOUT_CI_3,
+	DE_SCAL_3DOUT_CI_4,
+	DE_SCAL_3DOUT_LIRGB,
+	DE_SCAL_3DOUT_HDMI_FPP,   //for hdmi
+	DE_SCAL_3DOUT_HDMI_FPI,
+	DE_SCAL_3DOUT_HDMI_TB,
+	DE_SCAL_3DOUT_HDMI_FA,
+	DE_SCAL_3DOUT_HDMI_SSH,
+	DE_SCAL_3DOUT_HDMI_SSF,
+	DE_SCAL_3DOUT_HDMI_LI,
+}__scal_3d_outmode_t;
+
+typedef struct layer_input_src
+{
+   __u8     format;
+   __u8     pixseq;
+   __u8     br_swap;
+   __u32    fb_width;
+   __u32    fb_addr;
+   __u32    offset_x;
+   __u32    offset_y;
+
+   __bool yuv_ch;
+}layer_src_t;
+
+typedef struct dlcdp_src         /*direct lcd pipe input source definition */
+{
+   __u8     format;
+   __u8     pixseq;
+   __u32    fb_width;
+   __u32    fb_addr;
+   __u32    offset_x;
+   __u32    offset_y;
+}de_dlcdp_src_t;
+
+typedef struct hwc_src
+{
+    __u8    mode;
+    __u32   paddr;
+}de_hwc_src_t;
+
+typedef struct yuv_ch_src
+{
+   __u8     format;
+   __u8     mode;
+   __u8     pixseq;
+   __u32    ch0_base;	//in bits
+   __u32    ch1_base;	//in bits
+   __u32    ch2_base;	//in bits
+   __u32    line_width;	//in bits
+   __u32    offset_x;
+   __u32    offset_y;
+   __u8     cs_mode;    //0:DISP_BT601; 1:DISP_BT709; 2:DISP_YCC; 3:DISP_VXYCC
+}de_yuv_ch_src_t;
+
+typedef struct sprite_src
+{
+	__u8    pixel_seq;//0,1
+	__u8    format;//0:32bpp; 1:8bpp
+   __u32    offset_x;
+   __u32    offset_y;
+   __u32    fb_addr;
+   __u32    fb_width;
+}de_sprite_src_t;
+
+
+typedef struct __SCAL_SRC_TYPE
+{
+    __u8    sample_method; //for yuv420, 0: uv_hphase=-0.25, uv_vphase=-0.25; other : uv_hphase = 0, uv_vphase = -0.25
+    __u8    byte_seq;  //0:byte0,byte1, byte2, byte3; 1: byte3, byte2, byte1, byte0
+    __u8    mod;       //0:plannar; 1: interleaved; 2: plannar uv combined; 4: plannar mb; 6: uv combined mb
+    __u8    fmt;       //0:yuv444; 1: yuv422; 2: yuv420; 3:yuv411; 4: csi rgb; 5:rgb888
+    __u8    ps;        //
+}__scal_src_type_t;
+
+typedef struct __SCAL_OUT_TYPE
+{
+    __u8    byte_seq;  //0:byte0,byte1, byte2, byte3; 1: byte3, byte2, byte1, byte0
+    __u8    fmt;       //0:plannar rgb; 1: argb(byte0,byte1, byte2, byte3); 2:bgra; 4:yuv444; 5:yuv420; 6:yuv422; 7:yuv411
+}__scal_out_type_t;
+
+typedef struct __SCAL_SRC_SIZE
+{
+    __u32   src_width;
+	__u32   src_height;
+    __u32   x_off;
+    __u32   y_off;
+    __u32   scal_width;
+    __u32   scal_height;
+}__scal_src_size_t;
+
+typedef struct __SCAL_OUT_SIZE
+{
+    __u32   width;
+    __u32   height;  //when ouput interlace enable,  the height is the 2x height of scale, for example, ouput is 480i, this value is 480
+}__scal_out_size_t;
+
+typedef struct _SCAL_BUF_ADDR
+{
+    __u32   ch0_addr;   //
+    __u32   ch1_addr;
+    __u32   ch2_addr;
+}__scal_buf_addr_t;
+
+typedef struct _SCAL_SCAN_MOD
+{
+    __u8    field;    //0:frame scan; 1:field scan
+    __u8    bottom;      //0:top field; 1:bottom field
+}__scal_scan_mod_t;
+
+
+
+__s32 DE_SCAL_Set_Reg_Base(__u8 sel, __u32 base);
+__u32 DE_SCAL_Get_Reg_Base(__u8 sel);
+__s32 DE_SCAL_Config_Src(__u8 sel, __scal_buf_addr_t *addr, __scal_src_size_t *size,
+                         __scal_src_type_t *type, __u8 field, __u8 dien);
+__s32 DE_SCAL_Set_Fb_Addr(__u8 sel, __scal_buf_addr_t *addr);
+__s32 DE_SCAL_Set_Init_Phase(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+                             __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+                             __scal_out_size_t *out_size, __scal_out_type_t *out_type, __u8 dien);
+__s32 DE_SCAL_Set_Scaling_Factor(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+                                 __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+                                 __scal_out_size_t *out_size, __scal_out_type_t *out_type);
+__s32 DE_SCAL_Set_Scaling_Coef(__u8 sel, __scal_scan_mod_t *in_scan, __scal_src_size_t *in_size,
+                               __scal_src_type_t *in_type, __scal_scan_mod_t *out_scan,
+                               __scal_out_size_t *out_size, __scal_out_type_t *out_type, __u8 smth_mode);
+__s32 DE_SCAL_Set_CSC_Coef(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs, __u32  in_br_swap, __u32 out_br_swap);
+__s32 DE_SCAL_Set_Out_Format(__u8 sel, __scal_out_type_t *out_type);
+__s32 DE_SCAL_Set_Out_Size(__u8 sel, __scal_scan_mod_t *out_scan, __scal_out_type_t *out_type, __scal_out_size_t *out_size);
+__s32 DE_SCAL_Set_Trig_Line(__u8 sel, __u32 line);
+__s32 DE_SCAL_Set_Int_En(__u8 sel, __u32 int_num);
+__s32 DE_SCAL_Set_Di_Ctrl(__u8 sel, __u8 en, __u8 mode, __u8 diagintp_en, __u8 tempdiff_en);
+__s32 DE_SCAL_Set_Di_PreFrame_Addr(__u8 sel, __u32 addr);
+__s32 DE_SCAL_Set_Di_MafFlag_Src(__u8 sel, __u32 addr, __u32 stride);
+__s32 DE_SCAL_Set_Filtercoef_Ready(__u8 sel);
+__s32 DE_SCAL_Output_Select(__u8 sel, __u8 out);
+__s32 DE_SCAL_Writeback_Enable(__u8 sel);
+__s32 DE_SCAL_Writeback_Disable(__u8 sel);
+__s32 DE_SCAL_Set_Writeback_Addr(__u8 sel, __scal_buf_addr_t *addr);
+__s32 DE_SCAL_Set_CSC_Coef_Enhance(__u8 sel, __u8 in_csc_mode, __u8 out_csc_mode, __u8 incs, __u8 outcs,
+                                                   __s32  bright, __s32 contrast, __s32 saturaion, __s32 hue,
+                                                   __u32  in_br_swap, __u32 out_br_swap);
+__s32 DE_SCAL_Get_3D_In_Single_Size(__scal_3d_inmode_t inmode, __scal_src_size_t *fullsize,__scal_src_size_t *singlesize);
+__s32 DE_SCAL_Get_3D_Out_Single_Size(__scal_3d_outmode_t outmode, __scal_out_size_t *singlesize,__scal_out_size_t *fullsize);
+__s32 DE_SCAL_Get_3D_Out_Full_Size(__scal_3d_outmode_t outmode, __scal_out_size_t *singlesize,__scal_out_size_t *fullsize);
+__s32 DE_SCAL_Set_3D_Fb_Addr(__u8 sel, __scal_buf_addr_t *addr, __scal_buf_addr_t *addrtrd);
+__s32 DE_SCAL_Set_3D_Ctrl(__u8 sel, __u8 trden, __scal_3d_inmode_t inmode,
+								__scal_3d_outmode_t outmode);
+__s32 DE_SCAL_Config_3D_Src(__u8 sel, __scal_buf_addr_t *addr, __scal_src_size_t *size,
+                           __scal_src_type_t *type, __scal_3d_inmode_t trdinmode, __scal_buf_addr_t *addrtrd);
+__s32 DE_SCAL_Input_Port_Select(__u8 sel, __u8 port);
+
+__s32 DE_SCAL_Vpp_Enable(__u8 sel, __u32 enable);
+__s32 DE_SCAL_Vpp_Set_Luma_Sharpness_Level(__u8 sel, __u32 level);
+__s32 DE_SCAL_Vpp_Set_Chroma_Sharpness_Level(__u8 sel, __u32 level);
+__s32 DE_SCAL_Vpp_Set_White_Level_Extension(__u8 sel, __u32 level);
+__s32 DE_SCAL_Vpp_Set_Black_Level_Extension(__u8 sel, __u32 level);
+__s32 DE_SCAL_Reset(__u8 sel);
+__s32 DE_SCAL_Start(__u8 sel);
+__s32 DE_SCAL_Set_Reg_Rdy(__u8 sel);
+__s32 DE_SCAL_Enable(__u8 sel);
+__s32 DE_SCAL_Disable(__u8 sel);
+__s32 DE_SCAL_Get_Field_Status(__u8 sel);
+__s32 DE_SCAL_EnableINT(__u8 sel, __u32 irqsrc);
+__s32 DE_SCAL_DisableINT(__u8 sel, __u32 irqsrc);
+__u32 DE_SCAL_QueryINT(__u8 sel);
+__u32 DE_SCAL_ClearINT(__u8 sel, __u32 irqsrc);
+__s32 DE_SCAL_Input_Select(__u8 sel, __u32 source);
+
+__s32 DE_Set_Reg_Base(__u32 sel, __u32 address);
+__u32 DE_Get_Reg_Base(__u32 sel);
+__u32 DE_BE_Reg_Init(__u32 sel);
+__s32 DE_BE_Enable(__u32 sel);
+__s32 DE_BE_Disable(__u32 sel);
+__s32 DE_BE_Output_Select(__u32 sel, __u32 out_sel);
+__s32 DE_BE_Set_BkColor(__u32 sel, __disp_color_t bkcolor);
+__s32 DE_BE_Set_ColorKey(__u32 sel, __disp_color_t ck_max,__disp_color_t  ck_min,__u32 ck_red_match, __u32 ck_green_match, __u32 ck_blue_match);
+__s32 DE_BE_Set_SystemPalette(__u32 sel, __u32 * pbuffer, __u32 offset,__u32 size);
+__s32 DE_BE_Get_SystemPalette(__u32 sel, __u32 *pbuffer, __u32 offset,__u32 size);
+__s32 DE_BE_Cfg_Ready(__u32 sel);
+__s32 DE_BE_EnableINT(__u8 sel,__u32 irqsrc);
+__s32 DE_BE_DisableINT(__u8 sel, __u32 irqsrc);
+__u32 DE_BE_QueryINT(__u8 sel);
+__u32 DE_BE_ClearINT(__u8 sel,__u32 irqsrc);
+
+__s32 DE_BE_Layer_Enable(__u32 sel, __u8 layidx, __bool enable);
+__s32 DE_BE_Layer_Set_Format(__u32 sel, __u8 layidx,__u8 format,__bool br_swap,__u8 order);
+__s32 DE_BE_Layer_Set_Framebuffer(__u32 sel, __u8 layidx,layer_src_t *layer_fb);
+__s32 DE_BE_Layer_Set_Screen_Win(__u32 sel, __u8 layidx, __disp_rect_t * win);
+__s32 DE_BE_Layer_Video_Enable(__u32 sel, __u8 layidx,__bool video_en);
+__s32 DE_BE_Layer_Video_Ch_Sel(__u32 sel, __u8 layidx,__bool scaler_index);
+__s32 DE_BE_Layer_Yuv_Ch_Enable(__u32 sel, __u8 layidx,__bool yuv_en);
+__s32 DE_BE_Layer_Set_Prio(__u32 sel, __u8 layidx,__u8 prio);
+__s32 DE_BE_Layer_Set_Pipe(__u32 sel, __u8 layidx,__u8 pipe);
+__s32 DE_BE_Layer_Alpha_Enable(__u32 sel, __u8 layidx, __bool enable);
+__s32 DE_BE_Layer_Set_Alpha_Value(__u32 sel, __u8 layidx,__u8 alpha_val);
+__s32 DE_BE_Layer_ColorKey_Enable(__u32 sel, __u8 layidx, __bool enable);
+__s32 DE_BE_Layer_Set_Work_Mode(__u32 sel, __u8 layidx,__u8 mode);
+
+__s32 DE_BE_YUV_CH_Enable(__u32 sel, __bool enable);
+__s32 DE_BE_YUV_CH_Set_Src(__u32 sel, de_yuv_ch_src_t * in_src);
+
+__s32 DE_BE_HWC_Enable(__u32 sel, __bool enable);
+__s32 DE_BE_HWC_Set_Pos(__u32 sel, __disp_pos_t * pos);
+__s32 DE_BE_HWC_Get_Pos(__u32 sel, __disp_pos_t * pos);
+__s32 DE_BE_HWC_Set_Palette(__u32 sel, __u32 address,__u32 offset,__u32 size);
+__s32 DE_BE_HWC_Get_Format(void);
+__s32 DE_BE_HWC_Set_Src(__u32 sel, de_hwc_src_t *hwc_pat);
+
+__s32 DE_BE_Sprite_Enable(__u32 sel, __bool enable);
+__s32 DE_BE_Sprite_Set_Format(__u32 sel, __u8 pixel_seq,__u8 format);
+__s32 DE_BE_Sprite_Global_Alpha_Enable(__u32 sel, __bool enable);
+__s32 DE_BE_Sprite_Set_Global_Alpha(__u32 sel, __u8 alpha_val);
+__s32 DE_BE_Sprite_Block_Set_Pos(__u32 sel, __u8 blk_idx,__s16 x,__s16 y);
+__s32 DE_BE_Sprite_Block_Set_Size(__u32 sel, __u8 blk_idx,__u32 xsize,__u32 ysize);
+__s32 DE_BE_Sprite_Block_Set_fb(__u32 sel, __u8 blk_idx,__u32 addr, __u32 line_width);
+__s32 DE_BE_Sprite_Block_Set_Next_Id(__u32 sel, __u8 blk_idx,__u8 next_blk_id);
+__s32 DE_BE_Sprite_Set_Palette_Table(__u32 sel, __u32 address, __u32 offset, __u32 size);
+__s32 DE_BE_Set_Enhance(__u8 sel,__u32 brightness, __u32 contrast, __u32 saturaion);
+__s32 DE_BE_enhance_enable(__u32 sel, __bool enable);
+__s32 DE_BE_set_display_size(__u32 sel, __u32 width, __u32 height);
+__s32 DE_BE_get_display_width(__u32 sel);
+__s32 DE_BE_get_display_height(__u32 sel);
+__s32 DE_BE_deflicker_enable(__u32 sel, __bool enable);
+__s32 DE_BE_output_csc_enable(__u32 sel, __bool enable);
+__s32 DE_BE_Set_Outitl_enable(__u32 sel, __bool enable);
+__s32 DE_BE_Output_Cfg_Csc_Coeff(__u32 sel, __bool bout_yuv);
+//__s32 DE_BE_Output_Cfg_Csc_Coeff(__u32 sel, __u8 cs_mode);
+__s32 DE_BE_Format_To_Bpp(__u32 sel, __u8 format);
+__u32 DE_BE_Offset_To_Addr(__u32 src_addr,__u32 width,__u32 x,__u32 y,__u32 bpp);
+__u32 DE_BE_Addr_To_Offset(__u32 src_addr,__u32 off_addr,__u32 width,__u32 bpp,__disp_pos_t *pos);
+
+
+#endif  /* __EBIOS_DE_H__ */
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_lcdc_tve.h b/drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_lcdc_tve.h
new file mode 100644
index 0000000..253cd1e
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/ebios_lcdc_tve.h
@@ -0,0 +1,190 @@
+#ifndef _LCDC_TVE_H_
+#define _LCDC_TVE_H_
+
+#include "../../bsp_display.h"
+
+#define LCDC_VBI_LCD_EN 0x80000000
+#define LCDC_VBI_HD_EN 0x40000000
+#define LCDC_LTI_LCD_EN 0x20000000
+#define LCDC_LTI_HD_EN 0x10000000
+#define LCDC_VBI_LCD 0x00008000
+#define LCDC_VBI_HD 0x00004000
+#define LCDC_LTI_LCD_FLAG 0x00002000
+#define LCDC_LTI_HD_FLAG 0x00001000
+
+typedef enum
+{
+    LCDC_SRC_DE1 		= 	0,
+    LCDC_SRC_DE2 		= 	1,
+    LCDC_SRC_DMA 		= 	2,
+    LCDC_SRC_BLACK 		= 	3,
+    LCDC_SRC_WHITE 		= 	4,
+    LCDC_SRC_BLUE 		= 	5,
+}__lcdc_src_t;
+
+typedef enum
+{
+    LCDC_LCDIF_HV 			= 0,
+    LCDC_LCDIF_CPU 			= 1,
+    LCDC_LCDIF_TTL 			= 2,
+    LCDC_LCDIF_LVDS			= 3,
+}__lcdc_lcdif_t;
+
+
+typedef enum
+{
+    LCDC_FRM_RGB888 	= 	0,
+    LCDC_FRM_RGB666 	= 	1,
+    LCDC_FRM_RGB656 	= 	2,
+}__lcdc_frm_t;
+
+typedef struct
+{
+    __bool  b_interlace;        //1=b_interlace, 0=progressive
+    __bool  b_rgb_internal_hd;  //used when TV and VGA output, 0:YUV, 1:RGB
+    __bool  b_rgb_remap_io;     //used when LCD and HDMI output, 0:YUV, 1:RGB
+    __bool  b_remap_if;         //used when LCD and HDMI output, 0:LCD, 1:HDMI
+    __u16   src_x;              //tcon1 source width in pixels
+    __u16   src_y;              //tcon1 source height in pixels
+    __u16   scl_x;              //tcon1 scale output width size
+    __u16   scl_y;              //tcon1 scale output height size
+    __u16   out_x;              //tcon1 output width in pixels
+    __u16   out_y;              //tcon1 output height in pixels
+    __u16   ht;                 //tcon1 horizontal total time
+    __u16   hbp;                //tcon1 back porch
+    __u16   vt;                 //tcon1 vertical total time
+    __u16   vbp;                //tcon1 vertical back porch
+    __u16   vspw;               //tcon1 vertical sync pulse width in pixels
+    __u16   hspw;               //tcon1 horizontal sync pulse width
+    __u32   io_pol;             //tcon1 io polarity, 0=normal, 1=inverse
+    __u32   io_out;             //tcon1 io output enable, 0=enable output, 1=disable output, be careful!
+    __u8    start_delay;
+}__tcon1_cfg_t;
+
+
+#define TVE_D0ActFlags  (0x01)
+#define TVE_D1ActFlags  (0x01<<1)
+#define TVE_D2ActFlags  (0x01<<2)
+#define TVE_D3ActFlags  (0x01<<3)
+
+typedef enum
+{
+    TVE_MODE_NTSC = 0,
+    TVE_MODE_PAL,
+    TVE_MODE_480I,
+    TVE_MODE_576I,
+    TVE_MODE_480P,
+    TVE_MODE_576P,
+    TVE_MODE_720P_50HZ,
+    TVE_MODE_720P_60HZ,
+    TVE_MODE_1080I_50HZ,
+    TVE_MODE_1080I_60HZ,
+    TVE_MODE_1080P_50HZ,
+    TVE_MODE_1080P_60HZ,
+    TVE_MODE_VGA
+}__tve_mode_t;
+
+typedef enum tag_TVE_DAC
+{
+    DAC1 = 1, //bit0
+    DAC2 = 2, //bit1
+    DAC3 = 4  //bit2
+}__tve_dac_t;
+
+typedef enum tag_TVE_SRC
+{
+    CVBS = 0,
+    SVIDEO_Y = 1,
+    SVIDEO_C = 2,
+    COMPONENT_Y = 4,
+    COMPONENT_PB = 5,
+    COMPONENT_PR = 6,
+    VGA_R = 4,
+    VGA_G = 5,
+    VGA_B = 6
+}__tve_src_t;
+
+
+__s32   LCDC_set_reg_base(__u32 sel, __u32 address);
+__u32   LCDC_get_reg_base(__u32 sel);
+__s32   LCDC_init(__u32 sel);
+__s32   LCDC_exit(__u32 sel);
+void    LCDC_open(__u32 sel);
+void    LCDC_close(__u32 sel);
+__s32   LCDC_set_int_line(__u32 sel, __u32 tcon_index,__u32 num);
+__s32   LCDC_clear_int(__u32 sel, __u32 irqsrc);
+__s32   LCDC_enable_int(__u32 sel, __u32 irqsrc);
+__s32   LCDC_disable_int(__u32 sel, __u32 irqsrc);
+__u32    LCDC_query_int(__u32 sel);
+__s32   LCDC_set_start_delay(__u32 sel, __u32 tcon_index, __u8 delay);
+__s32   LCDC_get_start_delay(__u32 sel, __u32 tcon_index);
+__u32   LCDC_get_cur_line(__u32 sel, __u32 tcon_index);
+__s32 	LCDC_enable_output(__u32 sel);
+__s32 	LCDC_disable_output(__u32 sel);
+__s32 	LCDC_set_output(__u32 sel, __bool value);
+
+void    LCD_CPU_WR(__u32 sel, __u32 index, __u32 data);
+void    LCD_CPU_WR_INDEX(__u32 sel, __u32 index);
+void    LCD_CPU_WR_DATA(__u32 sel, __u32 data);
+void    LCD_CPU_RD(__u32 sel, __u32 index, __u32 *data);
+void    LCD_CPU_AUTO_FLUSH(__u32 sel, __u8 en);
+void    LCD_CPU_DMA_FLUSH(__u32 sel, __u8 en);
+void    LCD_XY_SWAP(__u32 sel);
+__s32	LCD_LVDS_open(__u32 sel);
+__s32	LCD_LVDS_close(__u32 sel);
+
+__s32   TCON0_open(__u32 sel);
+__s32   TCON0_close(__u32 sel);
+void    TCON0_cfg(__u32 sel, __panel_para_t * info);
+__s32   TCON0_get_width(__u32 sel);
+__s32   TCON0_get_height(__u32 sel);
+__s32   TCON0_set_dclk_div(__u32 sel, __u8 div);
+__s32   TCON0_select_src(__u32 sel, __u8 src);
+
+
+__u32 	TCON1_open(__u32 sel);
+__u32 	TCON1_close	(__u32 sel);
+__u32   TCON1_cfg(__u32 sel, __tcon1_cfg_t *cfg);
+__u32   TCON1_cfg_ex(__u32 sel, __panel_para_t * info);
+__u32 	TCON1_set_hdmi_mode(__u32 sel, __u8 mode);
+__u32 	TCON1_set_tv_mode(__u32 sel,__u8 mode);
+__s32   TCON1_set_vga_mode(__u32 sel, __u8 mode);
+__s32   TCON1_select_src(__u32 sel, __u8 src);
+__bool  TCON1_in_valid_regn(__u32 sel, __u32 juststd);
+__s32   TCON1_get_width(__u32 sel);
+__s32   TCON1_get_height(__u32 sel);
+__s32   TCON1_set_gamma_table(__u32 sel, __u32 address,__u32 size);
+__s32   TCON1_set_gamma_Enable(__u32 sel, __bool enable);
+
+__u8 	TCON_mux_init(void);
+__u8    TCON_set_hdmi_src(__u8 src);
+__u8    TCON_set_tv_src(__u32 tv_index, __u8 src);
+
+__s32   TVE_set_reg_base(__u32 sel,__u32 address);
+__u32   TVE_get_reg_base(__u32 sel);
+__s32   TVE_init(__u32 sel);
+__s32   TVE_exit(__u32 sel);
+__s32   TVE_open(__u32 sel);
+__s32   TVE_close(__u32 sel);
+__s32   TVE_set_vga_mode(__u32 sel);
+__s32   TVE_set_tv_mode(__u32 sel, __u8 mode);
+__u8    TVE_query_interface(__u32 sel,__u8 index);
+__u8    TVE_query_int(__u32 sel);
+__u8    TVE_clear_int (__u32 sel);
+__u8    TVE_dac_int_enable(__u32 sel,__u8 index);
+__u8    TVE_dac_int_disable(__u32 sel,__u8 index);
+__u8    TVE_dac_autocheck_enable(__u32 sel,__u8 index);
+__u8    TVE_dac_autocheck_disable(__u32 sel,__u8 index);
+__u8    TVE_dac_enable(__u32 sel,__u8 index);
+__u8    TVE_dac_disable(__u32 sel,__u8 index);
+__u8    TVE_dac_set_de_bounce(__u32 sel,__u8 index,__u32 times);
+__u8    TVE_dac_get_de_bounce(__u32 sel,__u8 index);
+__s32   TVE_dac_set_source(__u32 sel,__u32 index,__u32 source);
+__s32   TVE_dac_get_source(__u32 sel,__u32 index);
+__s32   TVE_get_dac_status(__u32 index);
+__u8 	TVE_csc_init(__u32 sel,__u8 type);
+__s32   TVE_dac_sel(__u32 sel,__u32 dac, __u32 index);
+
+
+#endif
+
diff --git a/drivers/video/sun4i/disp/de_bsp/de/ebios/vga_std.c b/drivers/video/sun4i/disp/de_bsp/de/ebios/vga_std.c
new file mode 100644
index 0000000..aa43e14
--- /dev/null
+++ b/drivers/video/sun4i/disp/de_bsp/de/ebios/vga_std.c
@@ -0,0 +1,31 @@
+/*
+const __disp_vga_t disp_vga_h1024_v768 =
+{
+	//__u32	pixel_clk;
+	65000000,
+	//__u16	hor_pixels;
+	1024,
+	//__u16	ver_pixels;
+	768,
+	//__u16	hor_total_time;
+	1344,
+	//__u16	hor_front_porch;
+	24,
+	//__u16	hor_sync_time;
+	136,
+	//__u16	hor_back_porch;
+	160,
+	//__u16	ver_total_time;
+	806,
+	//__u16	ver_front_porch;
+	3,
+	//__u16	ver_sync_time;
+	6,
+	//__u16	ver_back_porch;
+	9,
+	//__bool	hor_sync_polarity;
+	0,
+	//__bool	ver_sync_polarity;
+	0,
+};
+*/
diff --git a/drivers/video/sun4i/disp/dev_disp.c b/drivers/video/sun4i/disp/dev_disp.c
new file mode 100644
index 0000000..d6c2b37
--- /dev/null
+++ b/drivers/video/sun4i/disp/dev_disp.c
@@ -0,0 +1,2017 @@
+#include "dev_disp.h"
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+
+fb_info_t g_fbi;
+__disp_drv_t g_disp_drv;
+
+#define MY_BYTE_ALIGN(x) ( ( (x + (4*1024-1)) >> 12) << 12)             /* alloc based on 4K byte */
+static struct alloc_struct_t boot_heap_head, boot_heap_tail;
+
+
+static unsigned int gbuffer[4096];
+static __u32 output_type[2] = {0,0};
+static __u32 suspend_status = 0;//0:normal; suspend_status&1 != 0:in early_suspend; suspend_status&2 != 0:in suspend;
+
+static struct info_mm  g_disp_mm[10];
+static int g_disp_mm_sel = 0;
+
+atomic_t cmd_index;
+//static __u32 cmd_index = 0;
+
+static struct cdev *my_cdev;
+static dev_t devid ;
+static struct class *disp_class;
+
+static struct resource disp_resource[DISP_IO_NUM] =
+{
+	[DISP_IO_SCALER0] = {
+		.start = 0x01e00000,
+		.end   = 0x01e0077f,
+		.flags = IORESOURCE_MEM,
+	},
+	[DISP_IO_SCALER1] = {
+		.start = 0x01e20000,
+		.end   = 0x01e2077f,
+		.flags = IORESOURCE_MEM,
+	},
+	[DISP_IO_IMAGE0] = {
+		.start = 0x01e60000,
+		.end   = 0x01e657ff,
+		.flags = IORESOURCE_MEM,
+	},
+	[DISP_IO_IMAGE1] = {
+		.start = 0x01e40000,
+		.end   = 0x01e457ff,
+		.flags = IORESOURCE_MEM,
+	},
+	[DISP_IO_LCDC0] = {
+		.start = 0x01c0c000,
+		.end   = 0x01c0cfff,
+		.flags = IORESOURCE_MEM,
+	},
+	[DISP_IO_LCDC1] = {
+		.start = 0x01c0d000,
+		.end   = 0x01c0dfff,
+		.flags = IORESOURCE_MEM,
+	},
+	[DISP_IO_TVEC0] = {
+		.start = 0x01c0a000,
+		.end   = 0x01c0afff,
+		.flags = IORESOURCE_MEM,
+	},
+	[DISP_IO_TVEC1] = {
+		.start = 0x01c1b000,
+		.end   = 0x01c1bfff,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+
+__s32 disp_create_heap(__u32 pHeapHead, __u32 nHeapSize)
+{
+    boot_heap_head.size    = boot_heap_tail.size = 0;
+    boot_heap_head.address = pHeapHead;
+    boot_heap_tail.address = pHeapHead + nHeapSize;
+    boot_heap_head.next    = &boot_heap_tail;
+    boot_heap_tail.next    = 0;
+
+    __inf("head:%x,tail:%x\n" ,boot_heap_head.address, boot_heap_tail.address);
+    return 0;
+}
+
+void *disp_malloc(__u32 num_bytes)
+{
+    struct alloc_struct_t *ptr, *newptr;
+    __u32  actual_bytes;
+
+    if (!num_bytes)
+    {
+        return 0;
+    }
+
+    actual_bytes = MY_BYTE_ALIGN(num_bytes);    /* translate the byte count to size of long type       */
+
+    ptr = &boot_heap_head;                      /* scan from the boot_heap_head of the heap            */
+
+    while (ptr && ptr->next)                    /* look for enough memory for alloc                    */
+    {
+        if (ptr->next->address >= (ptr->address + ptr->size + (8 * 1024) + actual_bytes))
+        {
+            break;
+        }
+                                                /* find enough memory to alloc                         */
+        ptr = ptr->next;
+    }
+
+    if (!ptr->next)
+    {
+        __wrn(" it has reached the boot_heap_tail of the heap now\n");
+        return 0;                   /* it has reached the boot_heap_tail of the heap now              */
+    }
+
+    newptr = (struct alloc_struct_t *)(ptr->address + ptr->size);
+                                                /* create a new node for the memory block             */
+    if (!newptr)
+    {
+        __wrn(" create the node failed, can't manage the block\n");
+        return 0;                               /* create the node failed, can't manage the block     */
+    }
+
+    /* set the memory block chain, insert the node to the chain */
+    newptr->address = ptr->address + ptr->size + 4*1024;
+    newptr->size    = actual_bytes;
+    newptr->o_size  = num_bytes;
+    newptr->next    = ptr->next;
+    ptr->next       = newptr;
+
+    return (void *)newptr->address;
+}
+
+void  disp_free(void *p)
+{
+    struct alloc_struct_t *ptr, *prev;
+
+	if( p == NULL )
+		return;
+
+    ptr = &boot_heap_head;                /* look for the node which po__s32 this memory block                     */
+    while (ptr && ptr->next)
+    {
+        if (ptr->next->address == (__u32)p)
+            break;              /* find the node which need to be release                              */
+        ptr = ptr->next;
+    }
+
+	prev = ptr;
+	ptr = ptr->next;
+
+    if (!ptr) return;           /* the node is heap boot_heap_tail                                               */
+
+    prev->next = ptr->next;     /* delete the node which need be released from the memory block chain  */
+
+    return ;
+}
+
+__s32 DRV_lcd_open(__u32 sel)
+{
+    __u32 i = 0;
+    __lcd_flow_t *flow;
+
+	if(g_disp_drv.b_lcd_open[sel] == 0)
+	{
+	    BSP_disp_lcd_open_before(sel);
+
+	    flow = BSP_disp_lcd_get_open_flow(sel);
+	    for(i=0; i<flow->func_num; i++)
+	    {
+	        __u32 timeout = flow->func[i].delay*HZ/1000;
+
+	        flow->func[i].func(sel);
+
+	    	set_current_state(TASK_INTERRUPTIBLE);
+	    	schedule_timeout(timeout);
+
+	    }
+
+	    BSP_disp_lcd_open_after(sel);
+
+		g_disp_drv.b_lcd_open[sel] = 1;
+	}
+
+    return 0;
+}
+
+__s32 DRV_lcd_close(__u32 sel)
+{
+    __u32 i = 0;
+    __lcd_flow_t *flow;
+
+	if(g_disp_drv.b_lcd_open[sel] == 1)
+	{
+	    BSP_disp_lcd_close_befor(sel);
+
+	    flow = BSP_disp_lcd_get_close_flow(sel);
+	    for(i=0; i<flow->func_num; i++)
+	    {
+	        __u32 timeout = flow->func[i].delay*HZ/1000;
+
+	        flow->func[i].func(sel);
+
+	    	set_current_state(TASK_INTERRUPTIBLE);
+	    	schedule_timeout(timeout);
+
+	    }
+
+	    BSP_disp_lcd_close_after(sel);
+
+		g_disp_drv.b_lcd_open[sel] = 0;
+	}
+    return 0;
+}
+
+__s32 DRV_scaler_begin(__u32 sel)
+{
+    long timeout = (100 * HZ)/1000;//100ms
+
+    g_disp_drv.b_scaler_finished[sel] = 1;
+    timeout = wait_event_interruptible_timeout(g_disp_drv.scaler_queue[sel], g_disp_drv.b_scaler_finished[sel] == 2, timeout);
+    g_disp_drv.b_scaler_finished[sel] = 0;
+    if(timeout == 0)
+    {
+        __wrn("wait scaler %d finished timeout\n", sel);
+        return -1;
+    }
+    return 0;
+}
+
+void DRV_scaler_finish(__u32 sel)
+{
+    if(g_disp_drv.b_scaler_finished[sel] == 1)
+    {
+        g_disp_drv.b_scaler_finished[sel] = 2;
+        wake_up_interruptible(&g_disp_drv.scaler_queue[sel]);
+    }
+    else
+    {
+        __wrn("not scaler %d begin in DRV_scaler_finish\n", sel);
+    }
+}
+
+
+void DRV_disp_wait_cmd_finish(__u32 sel)
+{
+#if 0
+    sys_put_wvalue((__u32)g_fbi.io[DISP_IO_SCALER0] + 0x04, 0x00010001);
+    while(1)
+    {
+        __u32 value = sys_get_wvalue((__u32)g_fbi.io[DISP_IO_SCALER0] + 0x64);
+        if((value & (0x1 << 10)) != 0)
+        {
+            sys_put_wvalue((__u32)g_fbi.io[DISP_IO_SCALER0] + 0x64, (0x1 << 10));
+
+            //value = sys_get_wvalue((__u32)g_fbi.io[DISP_IO_LCDC0] + 0xfc);
+
+            //__inf("%d\n", (value & 0x03ff0000)>>16);
+            break;
+        }
+    }
+#endif
+
+#if 0
+    __inf("1:%d\n", (sys_get_wvalue((__u32)g_fbi.io[DISP_IO_LCDC0] + 0xfc) & 0x03ff0000) >> 16);
+    sys_put_wvalue((__u32)g_fbi.io[DISP_IO_IMAGE0] + 0x870, 3);
+    while(1)
+    {
+        __u32 value = sys_get_wvalue((__u32)g_fbi.io[DISP_IO_IMAGE0] + 0x870);
+        if((value & 1) == 0)
+        {
+            break;
+        }
+    }
+    __inf("2:%d\n", (sys_get_wvalue((__u32)g_fbi.io[DISP_IO_LCDC0] + 0xfc) & 0x03ff0000) >> 16);
+#endif
+
+#if 1
+	__u32 timeout = (20 * HZ)/1000,ret;//20ms
+	__u32 i;
+
+    timeout = (HZ * 2) / BSP_disp_get_frame_rate(sel);//wait two frame
+
+    if(g_disp_drv.b_cache[sel] == 0 && BSP_disp_get_output_type(sel)!= DISP_OUTPUT_TYPE_NONE)
+    {
+        if(atomic_read(&cmd_index) >= 20)
+        {
+            atomic_set(&cmd_index, 0);
+        }
+        i = atomic_read(&cmd_index);
+        atomic_inc(&cmd_index);
+
+        g_disp_drv.b_cmd_finished[sel][i] = 1;
+    	ret = wait_event_interruptible_timeout(g_disp_drv.my_queue[sel][i], g_disp_drv.b_cmd_finished[sel][i] == 2, timeout);
+    	g_disp_drv.b_cmd_finished[sel][i] = 0;
+    	if(ret == 0)
+        {
+            __inf("timeout,%d,%d,%d\n", sel,BSP_disp_get_frame_rate(sel),timeout);
+        }
+    }
+#endif
+}
+
+__s32 DRV_disp_int_process(__u32 sel)
+{
+#if 1
+    __u32 i = 0;
+
+    for(i=0; i<20; i++)
+    {
+        if(g_disp_drv.b_cmd_finished[sel][i] == 1)
+        {
+            g_disp_drv.b_cmd_finished[sel][i] = 2;
+            wake_up_interruptible(&g_disp_drv.my_queue[sel][i]);
+            break;
+        }
+    }
+#endif
+    return 0;
+}
+
+__s32 disp_set_hdmi_func(__disp_hdmi_func * func)
+{
+    BSP_disp_set_hdmi_func(func);
+
+    return 0;
+}
+
+__s32 DRV_DISP_Init(void)
+{
+    __disp_bsp_init_para para;
+    __u32 i = 0;
+
+    memset(&para, 0, sizeof(__disp_bsp_init_para));
+    para.base_image0    = (__u32)g_fbi.io[DISP_IO_IMAGE0];
+    para.base_image1    = (__u32)g_fbi.io[DISP_IO_IMAGE1];
+    para.base_scaler0   = (__u32)g_fbi.io[DISP_IO_SCALER0];
+    para.base_scaler1   = (__u32)g_fbi.io[DISP_IO_SCALER1];
+    para.base_lcdc0     = (__u32)g_fbi.io[DISP_IO_LCDC0];
+    para.base_lcdc1     = (__u32)g_fbi.io[DISP_IO_LCDC1];
+    para.base_tvec0      = (__u32)g_fbi.io[DISP_IO_TVEC0];
+    para.base_tvec1      = (__u32)g_fbi.io[DISP_IO_TVEC1];
+    para.base_ccmu      = (__u32)g_fbi.base_ccmu;
+    para.base_sdram     = (__u32)g_fbi.base_sdram;
+    para.base_pioc      = (__u32)g_fbi.base_pioc;
+    para.base_pwm       = (__u32)g_fbi.base_pwm;
+    para.scaler_begin   		= DRV_scaler_begin;
+    para.scaler_finish  		= DRV_scaler_finish;
+	para.disp_int_process       = DRV_disp_int_process;
+
+	memset(&g_disp_drv, 0, sizeof(__disp_drv_t));
+
+    for(i=0; i<20; i++)
+    {
+        init_waitqueue_head(&g_disp_drv.my_queue[0][i]);
+        init_waitqueue_head(&g_disp_drv.my_queue[1][i]);
+    }
+    init_waitqueue_head(&g_disp_drv.scaler_queue[0]);
+    init_waitqueue_head(&g_disp_drv.scaler_queue[1]);
+
+    BSP_disp_init(&para);
+    BSP_disp_open();
+
+    return 0;
+}
+
+__s32 DRV_DISP_Exit(void)
+{
+    Fb_Exit();
+    BSP_disp_close();
+    BSP_disp_exit(g_disp_drv.exit_mode);
+
+    return 0;
+}
+
+
+int disp_mem_request(int sel,__u32 size)
+{
+#ifndef FB_RESERVED_MEM
+	unsigned map_size = 0;
+	struct page *page;
+
+	if(g_disp_mm[sel].info_base != 0)
+		return -EINVAL;
+
+	g_disp_mm[sel].mem_len = size;
+	map_size = PAGE_ALIGN(g_disp_mm[sel].mem_len);
+
+	page = alloc_pages(GFP_KERNEL,get_order(map_size));
+	if(page != NULL)
+	{
+		g_disp_mm[sel].info_base = page_address(page);
+		if(g_disp_mm[sel].info_base == 0)
+		{
+			free_pages((unsigned long)(page),get_order(map_size));
+			__wrn("page_address fail!\n");
+			return -ENOMEM;
+		}
+		g_disp_mm[sel].mem_start = virt_to_phys(g_disp_mm[sel].info_base);
+		memset(g_disp_mm[sel].info_base,0,size);
+
+		__inf("pa=0x%08lx va=0x%p size:0x%x\n",g_disp_mm[sel].mem_start, g_disp_mm[sel].info_base, size);
+		return 0;
+	}
+	else
+	{
+		__wrn("alloc_pages fail!\n");
+		return -ENOMEM;
+	}
+#else
+    __u32 ret = 0;
+
+	ret = (__u32)disp_malloc(size);
+	if(ret != 0)
+	{
+	    g_disp_mm[sel].info_base = (void*)ret;
+	    g_disp_mm[sel].mem_start = virt_to_phys(g_disp_mm[sel].info_base);
+	    memset(g_disp_mm[sel].info_base,0,size);
+	    __inf("pa=0x%08lx va=0x%p size:0x%x\n",g_disp_mm[sel].mem_start, g_disp_mm[sel].info_base, size);
+
+	    return 0;
+	}
+	else
+	{
+		__wrn("disp_malloc fail!\n");
+		return -ENOMEM;
+	}
+#endif
+
+}
+
+int disp_mem_release(int sel)
+{
+#ifndef FB_RESERVED_MEM
+	unsigned map_size = PAGE_ALIGN(g_disp_mm[sel].mem_len);
+	unsigned page_size = map_size;
+
+	if(g_disp_mm[sel].info_base == 0)
+		return -EINVAL;
+
+	free_pages((unsigned long)(g_disp_mm[sel].info_base),get_order(page_size));
+	memset(&g_disp_mm[sel],0,sizeof(struct info_mm));
+#else
+	if(g_disp_mm[sel].info_base == 0)
+		return -EINVAL;
+
+    disp_free((void *)g_disp_mm[sel].info_base);
+    memset(&g_disp_mm[sel],0,sizeof(struct info_mm));
+#endif
+
+	return 0;
+
+}
+
+int disp_mmap(struct file *file, struct vm_area_struct * vma)
+{
+	unsigned long  physics =  g_disp_mm[g_disp_mm_sel].mem_start;// - PAGE_OFFSET;
+	unsigned long mypfn = physics >> PAGE_SHIFT;
+	unsigned long vmsize = vma->vm_end-vma->vm_start;
+
+	if(remap_pfn_range(vma,vma->vm_start,mypfn,vmsize,vma->vm_page_prot))
+		return -EAGAIN;
+
+	return 0;
+}
+
+int disp_open(struct inode *inode, struct file *file)
+{
+    return 0;
+}
+
+int disp_release(struct inode *inode, struct file *file)
+{
+    return 0;
+}
+ssize_t disp_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
+{
+	return 0;
+}
+
+ssize_t disp_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
+{
+    return 0;
+}
+
+static int __init disp_probe(struct platform_device *pdev)//called when platform_driver_register
+{
+	fb_info_t * info = NULL;
+	struct resource *res;
+	int ret = 0;
+	int size;
+	int i;
+
+	__inf("disp_probe call\n");
+
+	info = &g_fbi;
+	atomic_set(&cmd_index, 0);
+
+	info->dev = &pdev->dev;
+	platform_set_drvdata(pdev,info);
+
+	for(i=0;i<DISP_IO_NUM;i++)
+	{
+		res = platform_get_resource(pdev, IORESOURCE_MEM, i);
+		if (res == NULL)
+		{
+			__wrn("platform_get_resource fail\n");
+			ret = -ENXIO;
+			if(i==DISP_IO_SCALER0)
+			{
+				goto dealloc_fb;
+			}
+			else if(i==DISP_IO_SCALER1)
+			{
+				goto release_regs0;
+			}
+			else if(i==DISP_IO_IMAGE0)
+			{
+				goto release_regs1;
+			}
+			else if(i==DISP_IO_IMAGE1)
+			{
+				goto release_regs2;
+			}
+			else if(i==DISP_IO_LCDC0)
+			{
+				goto release_regs3;
+			}
+			else if(i==DISP_IO_LCDC1)
+			{
+				goto release_regs4;
+			}
+			else if(i==DISP_IO_TVEC0)
+			{
+				goto release_regs5;
+			}
+			else if(i==DISP_IO_TVEC1)
+			{
+				goto release_regs6;
+			}
+		}
+
+		size = (res->end - res->start) + 1;
+		info->mem[i] = request_mem_region(res->start, size, pdev->name);
+		if (info->mem[i] == NULL)
+		{
+			__wrn("request_mem_region fail\n");
+			ret = -ENOENT;
+			if(i==DISP_IO_SCALER0)
+			{
+				goto dealloc_fb;
+			}
+			else if(i==DISP_IO_SCALER1)
+			{
+				goto release_regs0;
+			}
+			else if(i==DISP_IO_IMAGE0)
+			{
+				goto release_regs1;
+			}
+			else if(i==DISP_IO_IMAGE1)
+			{
+				goto release_regs2;
+			}
+			else if(i==DISP_IO_LCDC0)
+			{
+				goto release_regs3;
+			}
+			else if(i==DISP_IO_LCDC1)
+			{
+				goto release_regs4;
+			}
+			else if(i==DISP_IO_TVEC0)
+			{
+				goto release_regs5;
+			}
+			else if(i==DISP_IO_TVEC1)
+			{
+				goto release_regs6;
+			}
+		}
+
+		info->io[i] = ioremap(res->start, size);
+		if (info->io[i] == NULL)
+		{
+			__wrn("ioremap() fail\n");
+			ret = -ENXIO;
+			if(i==DISP_IO_SCALER0)
+			{
+				goto release_mem0;
+			}
+			else if(i==DISP_IO_SCALER1)
+			{
+				goto release_mem1;
+			}
+			else if(i==DISP_IO_IMAGE0)
+			{
+				goto release_mem2;
+			}
+			else if(i==DISP_IO_IMAGE1)
+			{
+				goto release_mem3;
+			}
+			else if(i==DISP_IO_LCDC0)
+			{
+				goto release_mem4;
+			}
+			else if(i==DISP_IO_LCDC1)
+			{
+				goto release_mem5;
+			}
+			else if(i==DISP_IO_TVEC0)
+			{
+				goto release_mem6;
+			}
+			else if(i==DISP_IO_TVEC1)
+			{
+				goto release_mem7;
+			}
+	    }
+	}
+
+	info->base_ccmu = 0xf1c20000;
+	info->base_sdram = 0xf1c01000;
+	info->base_pioc = 0xf1c20800;
+	info->base_pwm = 0xf1c20c00;
+
+	__inf("SCALER0 base 0x%08x\n", (__u32)info->io[DISP_IO_SCALER0]);
+	__inf("SCALER1 base 0x%08x\n", (__u32)info->io[DISP_IO_SCALER1]);
+	__inf("IMAGE0 base 0x%08x\n", (__u32)info->io[DISP_IO_IMAGE0] + 0x800);
+	__inf("IMAGE1 base 0x%08x\n", (__u32)info->io[DISP_IO_IMAGE1] + 0x800);
+	__inf("LCDC0 base 0x%08x\n", (__u32)info->io[DISP_IO_LCDC0]);
+	__inf("LCDC1 base 0x%08x\n", (__u32)info->io[DISP_IO_LCDC1]);
+	__inf("TVEC0 base 0x%08x\n", (__u32)info->io[DISP_IO_TVEC0]);
+	__inf("TVEC1 base 0x%08x\n", (__u32)info->io[DISP_IO_TVEC1]);
+	__inf("CCMU base 0x%08x\n", info->base_ccmu);
+	__inf("SDRAM base 0x%08x\n", info->base_sdram);
+	__inf("PIO base 0x%08x\n", info->base_pioc);
+	__inf("PWM base 0x%08x\n", info->base_pwm);
+
+
+	return 0;
+
+release_mem7:
+	release_resource(info->mem[7]);
+	kfree(info->mem[7]);
+
+release_regs6:
+	iounmap(info->io[6]);
+release_mem6:
+	release_resource(info->mem[6]);
+	kfree(info->mem[6]);
+
+release_regs5:
+	iounmap(info->io[5]);
+release_mem5:
+	release_resource(info->mem[5]);
+	kfree(info->mem[5]);
+
+release_regs4:
+	iounmap(info->io[4]);
+release_mem4:
+	release_resource(info->mem[4]);
+	kfree(info->mem[4]);
+
+release_regs3:
+	iounmap(info->io[3]);
+release_mem3:
+	release_resource(info->mem[3]);
+	kfree(info->mem[3]);
+
+release_regs2:
+	iounmap(info->io[2]);
+release_mem2:
+	release_resource(info->mem[2]);
+	kfree(info->mem[2]);
+
+release_regs1:
+	iounmap(info->io[1]);
+release_mem1:
+	release_resource(info->mem[1]);
+	kfree(info->mem[1]);
+
+release_regs0:
+	iounmap(info->io[0]);
+release_mem0:
+	release_resource(info->mem[0]);
+	kfree(info->mem[0]);
+
+dealloc_fb:
+	platform_set_drvdata(pdev, NULL);
+	kfree(info);
+
+	return ret;
+}
+
+
+
+static int disp_remove(struct platform_device *pdev)
+{
+	fb_info_t *info = platform_get_drvdata(pdev);
+	int i;
+
+	__inf("disp_remove call\n");
+
+	for(i=0;i<DISP_IO_NUM - 3;i++)
+	{
+		iounmap(info->io[i]);
+
+		release_resource(info->mem[i]);
+		kfree(info->mem[i]);
+	}
+
+	platform_set_drvdata(pdev, NULL);
+
+	return 0;
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+void backlight_early_suspend(struct early_suspend *h)
+{
+    int i = 0;
+
+    printk("display early suspend: %s\n", __func__);
+
+    for(i=0; i<2; i++)
+    {
+        output_type[i] = BSP_disp_get_output_type(i);
+        if(output_type[i] == DISP_OUTPUT_TYPE_LCD)
+        {
+            DRV_lcd_close(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_TV)
+        {
+            BSP_disp_tv_close(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_VGA)
+        {
+            BSP_disp_vga_close(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_HDMI)
+        {
+            BSP_disp_hdmi_close(i);
+        }
+    }
+
+    BSP_disp_clk_off(2);
+
+    suspend_status |= 1;
+}
+
+void backlight_late_resume(struct early_suspend *h)
+{
+    int i = 0;
+
+    printk("display late resume enter: %s\n", __func__);
+
+    BSP_disp_clk_on(2);
+
+    for(i=0; i<2; i++)
+    {
+        if(output_type[i] == DISP_OUTPUT_TYPE_LCD)
+        {
+            DRV_lcd_open(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_TV)
+        {
+            BSP_disp_tv_open(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_VGA)
+        {
+            BSP_disp_vga_open(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_HDMI)
+        {
+            BSP_disp_hdmi_open(i);
+        }
+    }
+
+    suspend_status &= (~1);
+
+    printk("display late resume done: %s\n", __func__);
+}
+
+static struct early_suspend backlight_early_suspend_handler =
+{
+    .level   = EARLY_SUSPEND_LEVEL_DISABLE_FB,
+	.suspend = backlight_early_suspend,
+	.resume = backlight_late_resume,
+};
+
+#endif
+
+int disp_suspend(struct platform_device *pdev, pm_message_t state)
+{
+#ifndef CONFIG_HAS_EARLYSUSPEND
+    int i = 0;
+
+    __inf("disp_suspend call\n");
+
+    for(i=0; i<2; i++)
+    {
+        output_type[i] = BSP_disp_get_output_type(i);
+        if(output_type[i] == DISP_OUTPUT_TYPE_LCD)
+        {
+            DRV_lcd_close(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_TV)
+        {
+            BSP_disp_tv_close(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_VGA)
+        {
+            BSP_disp_vga_close(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_HDMI)
+        {
+            BSP_disp_hdmi_close(i);
+        }
+    }
+    BSP_disp_clk_off(3);
+#else
+    BSP_disp_clk_off(1);
+#endif
+
+    suspend_status |= 2;
+
+    return 0;
+}
+
+int disp_resume(struct platform_device *pdev)
+{
+#ifndef CONFIG_HAS_EARLYSUSPEND
+    int i = 0;
+
+    __inf("disp_resume call\n");
+
+    BSP_disp_clk_on(3);
+
+    for(i=0; i<2; i++)
+    {
+        if(output_type[i] == DISP_OUTPUT_TYPE_LCD)
+        {
+            DRV_lcd_open(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_TV)
+        {
+            BSP_disp_tv_open(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_VGA)
+        {
+            BSP_disp_vga_open(i);
+        }
+        else if(output_type[i] == DISP_OUTPUT_TYPE_HDMI)
+        {
+            BSP_disp_hdmi_open(i);
+        }
+    }
+#else
+    BSP_disp_clk_on(1);
+#endif
+
+    suspend_status &= (~2);
+
+    return 0;
+}
+
+void disp_shutdown(struct platform_device *pdev)
+{
+    __u32 type = 0, i = 0;
+
+    for(i=0; i<2; i++)
+    {
+        type = BSP_disp_get_output_type(i);
+        if(type == DISP_OUTPUT_TYPE_LCD)
+        {
+            DRV_lcd_close(i);
+        }
+    }
+}
+
+long disp_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	unsigned long karg[4];
+	unsigned long ubuffer[4] = {0};
+	__s32 ret = 0;
+
+	if (copy_from_user((void*)karg,(void __user*)arg,4*sizeof(unsigned long)))
+	{
+		__wrn("copy_from_user fail\n");
+		return -EFAULT;
+	}
+
+	ubuffer[0] = *(unsigned long*)karg;
+	ubuffer[1] = (*(unsigned long*)(karg+1));
+	ubuffer[2] = (*(unsigned long*)(karg+2));
+	ubuffer[3] = (*(unsigned long*)(karg+3));
+
+    if(cmd < DISP_CMD_FB_REQUEST)
+    {
+        if((ubuffer[0] != 0) && (ubuffer[0] != 1))
+        {
+            __wrn("para err in disp_ioctl, screen id = %d\n", (int)ubuffer[0]);
+            return -1;
+        }
+    }
+    if(suspend_status & 2)
+    {
+        __wrn("ioctl:%x fail when in suspend!\n", cmd);
+        return -1;
+    }
+
+	//__inf("disp_ioctl,cmd:%x\n",cmd);
+    switch(cmd)
+    {
+    //----disp global----
+    	case DISP_CMD_SET_BKCOLOR:
+	    {
+	        __disp_color_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[1],sizeof(__disp_color_t)))
+    		{
+    			return  -EFAULT;
+    		}
+		    ret = BSP_disp_set_bk_color(ubuffer[0], &para);
+		    break;
+	    }
+
+    	case DISP_CMD_SET_COLORKEY:
+    	{
+    	    __disp_colorkey_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[1],sizeof(__disp_colorkey_t)))
+    		{
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_set_color_key(ubuffer[0], &para);
+		    break;
+		}
+
+    	case DISP_CMD_SET_PALETTE_TBL:
+    	    if((ubuffer[1] == 0) || ((int)ubuffer[3] <= 0))
+    	    {
+    	        __wrn("para invalid in disp ioctrl DISP_CMD_SET_PALETTE_TBL,buffer:0x%x, size:0x%x\n", (unsigned int)ubuffer[1], (unsigned int)ubuffer[3]);
+    	        return -1;
+    	    }
+    		if(copy_from_user(gbuffer, (void __user *)ubuffer[1],ubuffer[3]))
+    		{
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_set_palette_table(ubuffer[0], (__u32 *)gbuffer, ubuffer[2], ubuffer[3]);
+    		break;
+
+    	case DISP_CMD_GET_PALETTE_TBL:
+    	    if((ubuffer[1] == 0) || ((int)ubuffer[3] <= 0))
+    	    {
+    	        __wrn("para invalid in disp ioctrl DISP_CMD_GET_PALETTE_TBL,buffer:0x%x, size:0x%x\n", (unsigned int)ubuffer[1], (unsigned int)ubuffer[3]);
+    	        return -1;
+    	    }
+    		ret = BSP_disp_get_palette_table(ubuffer[0], (__u32 *)gbuffer, ubuffer[2], ubuffer[3]);
+    		if(copy_to_user((void __user *)ubuffer[1], gbuffer,ubuffer[3]))
+    		{
+    			return  -EFAULT;
+    		}
+    		break;
+
+    	case DISP_CMD_START_CMD_CACHE:
+    		ret = BSP_disp_cmd_cache(ubuffer[0]);
+    		g_disp_drv.b_cache[ubuffer[0]] = 1;
+    		break;
+
+    	case DISP_CMD_EXECUTE_CMD_AND_STOP_CACHE:
+    	    g_disp_drv.b_cache[ubuffer[0]] = 0;
+    		ret = BSP_disp_cmd_submit(ubuffer[0]);
+    		//DRV_disp_wait_cmd_finish(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_GET_OUTPUT_TYPE:
+    		ret =  BSP_disp_get_output_type(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SCN_GET_WIDTH:
+    		ret = BSP_disp_get_screen_width(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SCN_GET_HEIGHT:
+    		ret = BSP_disp_get_screen_height(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SET_GAMMA_TABLE:
+    	    if((ubuffer[1] == 0) || ((int)ubuffer[2] <= 0))
+    	    {
+    	        __wrn("para invalid in disp ioctrl DISP_CMD_SET_GAMMA_TABLE,buffer:0x%x, size:0x%x\n", (unsigned int)ubuffer[1], (unsigned int)ubuffer[2]);
+    	        return -1;
+    	    }
+    		if(copy_from_user(gbuffer, (void __user *)ubuffer[1],ubuffer[2]))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_set_gamma_table(ubuffer[0], (__u32 *)gbuffer, ubuffer[2]);
+    		break;
+
+    	case DISP_CMD_GAMMA_CORRECTION_ON:
+    		ret = BSP_disp_gamma_correction_enable(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_GAMMA_CORRECTION_OFF:
+    		ret = BSP_disp_gamma_correction_disable(ubuffer[0]);
+    		break;
+
+        case DISP_CMD_SET_BRIGHT:
+            ret = BSP_disp_set_bright(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_GET_BRIGHT:
+            ret = BSP_disp_get_bright(ubuffer[0]);
+    		break;
+
+        case DISP_CMD_SET_CONTRAST:
+            ret = BSP_disp_set_contrast(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_GET_CONTRAST:
+            ret = BSP_disp_get_contrast(ubuffer[0]);
+    		break;
+
+        case DISP_CMD_SET_SATURATION:
+            ret = BSP_disp_set_saturation(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_GET_SATURATION:
+            ret = BSP_disp_get_saturation(ubuffer[0]);
+    		break;
+
+        case DISP_CMD_ENHANCE_ON:
+            ret = BSP_disp_enhance_enable(ubuffer[0], 1);
+    		break;
+
+        case DISP_CMD_ENHANCE_OFF:
+            ret = BSP_disp_enhance_enable(ubuffer[0], 0);
+    		break;
+
+        case DISP_CMD_GET_ENHANCE_EN:
+            ret = BSP_disp_get_enhance_enable(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_CAPTURE_SCREEN:
+    	    ret = BSP_disp_capture_screen(ubuffer[0], (__disp_capture_screen_para_t *)ubuffer[1]);
+    	    break;
+
+        case DISP_CMD_SET_SCREEN_SIZE:
+            ret = BSP_disp_set_screen_size(ubuffer[0], (__disp_rectsz_t*)ubuffer[1]);
+            break;
+
+        case DISP_CMD_DE_FLICKER_ON:
+            ret = BSP_disp_de_flicker_enable(ubuffer[0], 1);
+            break;
+
+        case DISP_CMD_DE_FLICKER_OFF:
+            ret = BSP_disp_de_flicker_enable(ubuffer[0], 0);
+            break;
+
+    //----layer----
+    	case DISP_CMD_LAYER_REQUEST:
+    		ret = BSP_disp_layer_request(ubuffer[0], (__disp_layer_work_mode_t)ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_RELEASE:
+    		ret = BSP_disp_layer_release(ubuffer[0], ubuffer[1]);
+    		DRV_disp_wait_cmd_finish(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_LAYER_OPEN:
+    		ret = BSP_disp_layer_open(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_CLOSE:
+    		ret = BSP_disp_layer_close(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_SET_FB:
+    	{
+    	    __disp_fb_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_fb_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_layer_set_framebuffer(ubuffer[0], ubuffer[1], &para);
+    		//DRV_disp_wait_cmd_finish(ubuffer[0]);
+    		break;
+    	}
+
+    	case DISP_CMD_LAYER_GET_FB:
+    	{
+    	    __disp_fb_t para;
+
+    		ret = BSP_disp_layer_get_framebuffer(ubuffer[0], ubuffer[1], &para);
+    		if(copy_to_user((void __user *)ubuffer[2], &para,sizeof(__disp_fb_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_LAYER_SET_SRC_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_layer_set_src_window(ubuffer[0],ubuffer[1], &para);
+    		//DRV_disp_wait_cmd_finish(ubuffer[0]);
+    		break;
+        }
+
+    	case DISP_CMD_LAYER_GET_SRC_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		ret = BSP_disp_layer_get_src_window(ubuffer[0],ubuffer[1], &para);
+    		if(copy_to_user((void __user *)ubuffer[2], &para, sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_LAYER_SET_SCN_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_layer_set_screen_window(ubuffer[0],ubuffer[1], &para);
+    		//DRV_disp_wait_cmd_finish(ubuffer[0]);
+    		break;
+        }
+
+    	case DISP_CMD_LAYER_GET_SCN_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		ret = BSP_disp_layer_get_screen_window(ubuffer[0],ubuffer[1], &para);
+    		if(copy_to_user((void __user *)ubuffer[2], &para, sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_LAYER_SET_PARA:
+    	{
+    	    __disp_layer_info_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_layer_info_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_layer_set_para(ubuffer[0], ubuffer[1], &para);
+    		//DRV_disp_wait_cmd_finish(ubuffer[0]);
+    		break;
+        }
+
+    	case DISP_CMD_LAYER_GET_PARA:
+    	{
+    	    __disp_layer_info_t para;
+
+    		ret = BSP_disp_layer_get_para(ubuffer[0], ubuffer[1], &para);
+    		if(copy_to_user((void __user *)ubuffer[2],&para, sizeof(__disp_layer_info_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_LAYER_TOP:
+    		ret = BSP_disp_layer_set_top(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_BOTTOM:
+    		ret = BSP_disp_layer_set_bottom(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_ALPHA_ON:
+    		ret = BSP_disp_layer_alpha_enable(ubuffer[0], ubuffer[1], 1);
+    		break;
+
+    	case DISP_CMD_LAYER_ALPHA_OFF:
+    		ret = BSP_disp_layer_alpha_enable(ubuffer[0], ubuffer[1], 0);
+    		break;
+
+    	case DISP_CMD_LAYER_SET_ALPHA_VALUE:
+    		ret = BSP_disp_layer_set_alpha_value(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		//DRV_disp_wait_cmd_finish(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_LAYER_CK_ON:
+    		ret = BSP_disp_layer_colorkey_enable(ubuffer[0], ubuffer[1], 1);
+    		break;
+
+    	case DISP_CMD_LAYER_CK_OFF:
+    		ret = BSP_disp_layer_colorkey_enable(ubuffer[0], ubuffer[1], 0);
+    		break;
+
+    	case DISP_CMD_LAYER_SET_PIPE:
+    		ret = BSP_disp_layer_set_pipe(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+    	case DISP_CMD_LAYER_GET_ALPHA_VALUE:
+    		ret = BSP_disp_layer_get_alpha_value(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_GET_ALPHA_EN:
+    		ret = BSP_disp_layer_get_alpha_enable(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_GET_CK_EN:
+    		ret = BSP_disp_layer_get_colorkey_enable(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_GET_PRIO:
+    		ret = BSP_disp_layer_get_piro(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LAYER_GET_PIPE:
+    		ret = BSP_disp_layer_get_pipe(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_SMOOTH:
+            ret = BSP_disp_layer_set_smooth(ubuffer[0], ubuffer[1],(__disp_video_smooth_t) ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_SMOOTH:
+            ret = BSP_disp_layer_get_smooth(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_BRIGHT:
+            ret = BSP_disp_layer_set_bright(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_BRIGHT:
+            ret = BSP_disp_layer_get_bright(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_CONTRAST:
+            ret = BSP_disp_layer_set_contrast(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_CONTRAST:
+            ret = BSP_disp_layer_get_contrast(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_SATURATION:
+            ret = BSP_disp_layer_set_saturation(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_SATURATION:
+            ret = BSP_disp_layer_get_saturation(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_HUE:
+            ret = BSP_disp_layer_set_hue(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_HUE:
+            ret = BSP_disp_layer_get_hue(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_ENHANCE_ON:
+            ret = BSP_disp_layer_enhance_enable(ubuffer[0], ubuffer[1], 1);
+    		break;
+
+        case DISP_CMD_LAYER_ENHANCE_OFF:
+            ret = BSP_disp_layer_enhance_enable(ubuffer[0], ubuffer[1], 0);
+    		break;
+
+        case DISP_CMD_LAYER_GET_ENHANCE_EN:
+            ret = BSP_disp_layer_get_enhance_enable(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_VPP_ON:
+            ret = BSP_disp_layer_vpp_enable(ubuffer[0], ubuffer[1], 1);
+    		break;
+
+        case DISP_CMD_LAYER_VPP_OFF:
+            ret = BSP_disp_layer_vpp_enable(ubuffer[0], ubuffer[1], 0);
+    		break;
+
+        case DISP_CMD_LAYER_GET_VPP_EN:
+            ret = BSP_disp_layer_get_vpp_enable(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_LUMA_SHARP_LEVEL:
+            ret = BSP_disp_layer_set_luma_sharp_level(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_LUMA_SHARP_LEVEL:
+            ret = BSP_disp_layer_get_luma_sharp_level(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_CHROMA_SHARP_LEVEL:
+            ret = BSP_disp_layer_set_chroma_sharp_level(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_CHROMA_SHARP_LEVEL:
+            ret = BSP_disp_layer_get_chroma_sharp_level(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_WHITE_EXTEN_LEVEL:
+            ret = BSP_disp_layer_set_white_exten_level(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_WHITE_EXTEN_LEVEL:
+            ret = BSP_disp_layer_get_white_exten_level(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LAYER_SET_BLACK_EXTEN_LEVEL:
+            ret = BSP_disp_layer_set_black_exten_level(ubuffer[0], ubuffer[1], ubuffer[2]);
+    		break;
+
+        case DISP_CMD_LAYER_GET_BLACK_EXTEN_LEVEL:
+            ret = BSP_disp_layer_get_black_exten_level(ubuffer[0], ubuffer[1]);
+    		break;
+
+    //----scaler----
+    	case DISP_CMD_SCALER_REQUEST:
+    		ret = BSP_disp_scaler_request();
+    		break;
+
+    	case DISP_CMD_SCALER_RELEASE:
+    		ret = BSP_disp_scaler_release(ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SCALER_EXECUTE:
+    	{
+    	    __disp_scaler_para_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_scaler_para_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_scaler_start(ubuffer[1],&para);
+    		break;
+        }
+
+    //----hwc----
+    	case DISP_CMD_HWC_OPEN:
+    		ret =  BSP_disp_hwc_enable(ubuffer[0], 1);
+    		break;
+
+    	case DISP_CMD_HWC_CLOSE:
+    		ret =  BSP_disp_hwc_enable(ubuffer[0], 0);
+    		break;
+
+    	case DISP_CMD_HWC_SET_POS:
+    	{
+    	    __disp_pos_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[1],sizeof(__disp_pos_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_hwc_set_pos(ubuffer[0], &para);
+    		break;
+        }
+
+    	case DISP_CMD_HWC_GET_POS:
+    	{
+    	    __disp_pos_t para;
+
+    		ret = BSP_disp_hwc_get_pos(ubuffer[0], &para);
+    		if(copy_to_user((void __user *)ubuffer[1],&para, sizeof(__disp_pos_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_HWC_SET_FB:
+    	{
+    	    __disp_hwc_pattern_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[1],sizeof(__disp_hwc_pattern_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_hwc_set_framebuffer(ubuffer[0], &para);
+    		break;
+        }
+
+    	case DISP_CMD_HWC_SET_PALETTE_TABLE:
+			if((ubuffer[1] == 0) || ((int)ubuffer[3] <= 0))
+            {
+                __wrn("para invalid in display ioctrl DISP_CMD_HWC_SET_PALETTE_TABLE,buffer:0x%x, size:0x%x\n", (unsigned int)ubuffer[1], (unsigned int)ubuffer[3]);
+                return -1;
+            }
+    		if(copy_from_user(gbuffer, (void __user *)ubuffer[1],ubuffer[3]))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_hwc_set_palette(ubuffer[0], (void*)gbuffer, ubuffer[2], ubuffer[3]);
+    		break;
+
+
+    //----video----
+    	case DISP_CMD_VIDEO_START:
+    		ret = BSP_disp_video_start(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_VIDEO_STOP:
+    		ret = BSP_disp_video_stop(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_VIDEO_SET_FB:
+    	{
+    	    __disp_video_fb_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_video_fb_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_video_set_fb(ubuffer[0], ubuffer[1], &para);
+    		break;
+        }
+
+        case DISP_CMD_VIDEO_GET_FRAME_ID:
+            ret = BSP_disp_video_get_frame_id(ubuffer[0], ubuffer[1]);
+    		break;
+
+        case DISP_CMD_VIDEO_GET_DIT_INFO:
+        {
+            __disp_dit_info_t para;
+
+            ret = BSP_disp_video_get_dit_info(ubuffer[0], ubuffer[1],&para);
+    		if(copy_to_user((void __user *)ubuffer[2],&para, sizeof(__disp_dit_info_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    //----lcd----
+    	case DISP_CMD_LCD_ON:
+    		ret = DRV_lcd_open(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_LCD_OFF:
+    		ret = DRV_lcd_close(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_LCD_SET_BRIGHTNESS:
+    		ret = BSP_disp_lcd_set_bright(ubuffer[0], (__disp_lcd_bright_t)ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LCD_GET_BRIGHTNESS:
+    		ret = BSP_disp_lcd_get_bright(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_LCD_CPUIF_XY_SWITCH:
+    		ret = BSP_disp_lcd_xy_switch(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_LCD_SET_SRC:
+    		ret = BSP_disp_lcd_set_src(ubuffer[0], (__disp_lcdc_src_t)ubuffer[1]);
+    		break;
+
+        case DISP_CMD_LCD_USER_DEFINED_FUNC:
+            ret = BSP_disp_lcd_user_defined_func(ubuffer[0], ubuffer[1], ubuffer[2], ubuffer[3]);
+            break;
+
+	//----pwm----
+        case DISP_CMD_PWM_SET_PARA:
+            ret = pwm_set_para(ubuffer[0], (__pwm_info_t *)ubuffer[1]);
+            break;
+
+        case DISP_CMD_PWM_GET_PARA:
+            ret = pwm_get_para(ubuffer[0], (__pwm_info_t *)ubuffer[1]);
+            break;
+
+
+    //----tv----
+    	case DISP_CMD_TV_ON:
+    		ret = BSP_disp_tv_open(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_TV_OFF:
+    		ret = BSP_disp_tv_close(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_TV_SET_MODE:
+    		ret = BSP_disp_tv_set_mode(ubuffer[0], (__disp_tv_mode_t)ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_TV_GET_MODE:
+    		ret = BSP_disp_tv_get_mode(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_TV_AUTOCHECK_ON:
+    		ret = BSP_disp_tv_auto_check_enable(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_TV_AUTOCHECK_OFF:
+    		ret = BSP_disp_tv_auto_check_disable(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_TV_GET_INTERFACE:
+    	    if(suspend_status != 0)
+    	    {
+    	        ret = DISP_TV_NONE;
+    	    }
+    	    else
+    	    {
+    		    ret = BSP_disp_tv_get_interface(ubuffer[0]);
+            }
+    		break;
+
+    	case DISP_CMD_TV_SET_SRC:
+    		ret = BSP_disp_tv_set_src(ubuffer[0], (__disp_lcdc_src_t)ubuffer[1]);
+    		break;
+
+        case DISP_CMD_TV_GET_DAC_STATUS:
+            if(suspend_status != 0)
+            {
+                ret = 0;
+            }
+            else
+            {
+                ret =  BSP_disp_tv_get_dac_status(ubuffer[0], ubuffer[1]);
+            }
+            break;
+
+        case DISP_CMD_TV_SET_DAC_SOURCE:
+            ret =  BSP_disp_tv_set_dac_source(ubuffer[0], ubuffer[1], (__disp_tv_dac_source)ubuffer[2]);
+            break;
+
+        case DISP_CMD_TV_GET_DAC_SOURCE:
+            ret =  BSP_disp_tv_get_dac_source(ubuffer[0], ubuffer[1]);
+            break;
+
+    //----hdmi----
+    	case DISP_CMD_HDMI_ON:
+    		ret = BSP_disp_hdmi_open(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_HDMI_OFF:
+    		ret = BSP_disp_hdmi_close(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_HDMI_SET_MODE:
+    		ret = BSP_disp_hdmi_set_mode(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_HDMI_GET_MODE:
+    		ret = BSP_disp_hdmi_get_mode(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_HDMI_GET_HPD_STATUS:
+    	    if(suspend_status != 0)
+    	    {
+    	        ret = 0;
+    	    }
+    	    else
+    	    {
+    	        ret = BSP_disp_hdmi_get_hpd_status(ubuffer[0]);
+    	    }
+    		break;
+
+    	case DISP_CMD_HDMI_SUPPORT_MODE:
+    		ret = BSP_disp_hdmi_check_support_mode(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_HDMI_SET_SRC:
+    		ret = BSP_disp_hdmi_set_src(ubuffer[0], (__disp_lcdc_src_t)ubuffer[1]);
+    		break;
+
+    //----vga----
+    	case DISP_CMD_VGA_ON:
+    		ret = BSP_disp_vga_open(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_VGA_OFF:
+    		ret = BSP_disp_vga_close(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_VGA_SET_MODE:
+    		ret = BSP_disp_vga_set_mode(ubuffer[0], (__disp_vga_mode_t)ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_VGA_GET_MODE:
+    		ret = BSP_disp_vga_get_mode(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_VGA_SET_SRC:
+    		ret = BSP_disp_vga_set_src(ubuffer[0], (__disp_lcdc_src_t)ubuffer[1]);
+    		break;
+
+    //----sprite----
+    	case DISP_CMD_SPRITE_OPEN:
+    		ret = BSP_disp_sprite_open(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_CLOSE:
+    		ret = BSP_disp_sprite_close(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_SET_FORMAT:
+    		ret = BSP_disp_sprite_set_format(ubuffer[0], (__disp_pixel_fmt_t)ubuffer[1], (__disp_pixel_seq_t)ubuffer[2]);
+    		break;
+
+    	case DISP_CMD_SPRITE_GLOBAL_ALPHA_ENABLE:
+    		ret = BSP_disp_sprite_alpha_enable(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_GLOBAL_ALPHA_DISABLE:
+    		ret = BSP_disp_sprite_alpha_disable(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_GET_GLOBAL_ALPHA_ENABLE:
+    		ret = BSP_disp_sprite_get_alpha_enable(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_SET_GLOBAL_ALPHA_VALUE:
+    		ret = BSP_disp_sprite_set_alpha_vale(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_GET_GLOBAL_ALPHA_VALUE:
+    		ret = BSP_disp_sprite_get_alpha_value(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_SET_ORDER:
+    		ret = BSP_disp_sprite_set_order(ubuffer[0], ubuffer[1],ubuffer[2]);
+    		break;
+
+    	case DISP_CMD_SPRITE_GET_TOP_BLOCK:
+    		ret = BSP_disp_sprite_get_top_block(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_GET_BOTTOM_BLOCK:
+    		ret = BSP_disp_sprite_get_bottom_block(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_SET_PALETTE_TBL:
+            if((ubuffer[1] == 0) || ((int)ubuffer[3] <= 0))
+            {
+                __wrn("para invalid in display ioctrl DISP_CMD_SPRITE_SET_PALETTE_TBL,buffer:0x%x, size:0x%x\n", (unsigned int)ubuffer[1], (unsigned int)ubuffer[3]);
+                return -1;
+            }
+    		if(copy_from_user(gbuffer, (void __user *)ubuffer[1],ubuffer[3]))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret =  BSP_disp_sprite_set_palette_table(ubuffer[0], (__u32 * )gbuffer,ubuffer[2],ubuffer[3]);
+    		break;
+
+    	case DISP_CMD_SPRITE_GET_BLOCK_NUM:
+    		ret = BSP_disp_sprite_get_block_number(ubuffer[0]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_REQUEST:
+    	{
+    	    __disp_sprite_block_para_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[1],sizeof(__disp_sprite_block_para_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_sprite_block_request(ubuffer[0], &para);
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_RELEASE:
+    		ret = BSP_disp_sprite_block_release(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_SET_SCREEN_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_sprite_block_set_screen_win(ubuffer[0], ubuffer[1],&para);
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_GET_SCREEN_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		ret = BSP_disp_sprite_block_get_srceen_win(ubuffer[0], ubuffer[1],&para);
+    		if(copy_to_user((void __user *)ubuffer[2],&para, sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_SET_SOURCE_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_sprite_block_set_src_win(ubuffer[0], ubuffer[1],&para);
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_GET_SOURCE_WINDOW:
+    	{
+    	    __disp_rect_t para;
+
+    		ret = BSP_disp_sprite_block_get_src_win(ubuffer[0], ubuffer[1],&para);
+    		if(copy_to_user((void __user *)ubuffer[2],&para, sizeof(__disp_rect_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_SET_FB:
+    	{
+    	    __disp_fb_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_fb_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_sprite_block_set_framebuffer(ubuffer[0], ubuffer[1],&para);
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_GET_FB:
+    	{
+    	    __disp_fb_t para;
+
+    		ret = BSP_disp_sprite_block_get_framebufer(ubuffer[0], ubuffer[1],&para);
+    		if(copy_to_user((void __user *)ubuffer[2],&para, sizeof(__disp_fb_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_SET_TOP:
+    		ret = BSP_disp_sprite_block_set_top(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_SET_BOTTOM:
+    		ret = BSP_disp_sprite_block_set_bottom(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_GET_PREV_BLOCK:
+    		ret = BSP_disp_sprite_block_get_pre_block(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_GET_NEXT_BLOCK:
+    		ret = BSP_disp_sprite_block_get_next_block(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_GET_PRIO:
+    		ret = BSP_disp_sprite_block_get_prio(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_OPEN:
+    		ret = BSP_disp_sprite_block_open(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_CLOSE:
+    		ret = BSP_disp_sprite_block_close(ubuffer[0], ubuffer[1]);
+    		break;
+
+    	case DISP_CMD_SPRITE_BLOCK_SET_PARA:
+    	{
+    	    __disp_sprite_block_para_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[2],sizeof(__disp_sprite_block_para_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		ret = BSP_disp_sprite_block_set_para(ubuffer[0], ubuffer[1],&para);
+    		break;
+        }
+
+    	case DISP_CMD_SPRITE_BLOCK_GET_PARA:
+    	{
+    	    __disp_sprite_block_para_t para;
+
+    		ret = BSP_disp_sprite_block_get_para(ubuffer[0], ubuffer[1],&para);
+    		if(copy_to_user((void __user *)ubuffer[2],&para, sizeof(__disp_sprite_block_para_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+    		break;
+        }
+
+	//----framebuffer----
+    	case DISP_CMD_FB_REQUEST:
+    	{
+    	    __disp_fb_create_para_t para;
+
+    		if(copy_from_user(&para, (void __user *)ubuffer[1],sizeof(__disp_fb_create_para_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+			ret = Display_Fb_Request(ubuffer[0], &para);
+			break;
+        }
+
+		case DISP_CMD_FB_RELEASE:
+			ret = Display_Fb_Release(ubuffer[0]);
+			break;
+
+	    case DISP_CMD_FB_GET_PARA:
+	    {
+    	    __disp_fb_create_para_t para;
+
+			ret = Display_Fb_get_para(ubuffer[0], &para);
+    		if(copy_to_user((void __user *)ubuffer[1],&para, sizeof(__disp_fb_create_para_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+			break;
+        }
+
+	    case DISP_CMD_GET_DISP_INIT_PARA:
+	    {
+    	    __disp_init_t para;
+
+			ret = Display_get_disp_init_para(&para);
+    		if(copy_to_user((void __user *)ubuffer[0],&para, sizeof(__disp_init_t)))
+    		{
+    		    __wrn("copy_from_user fail\n");
+    			return  -EFAULT;
+    		}
+			break;
+        }
+
+		case DISP_CMD_MEM_REQUEST:
+			ret =  disp_mem_request(ubuffer[0],ubuffer[1]);
+			break;
+
+	//----for test----
+		case DISP_CMD_MEM_RELASE:
+			ret =  disp_mem_release(ubuffer[0]);
+			break;
+
+		case DISP_CMD_MEM_SELIDX:
+			g_disp_mm_sel = ubuffer[0];
+			break;
+
+		case DISP_CMD_MEM_GETADR:
+			ret = g_disp_mm[ubuffer[0]].mem_start;
+			break;
+
+		case DISP_CMD_SUSPEND:
+		{
+		    pm_message_t state;
+
+			ret = disp_suspend(0, state);
+			break;
+        }
+
+		case DISP_CMD_RESUME:
+			ret = disp_resume(0);
+			break;
+
+        case DISP_CMD_PRINT_REG:
+            ret = BSP_disp_print_reg(1, ubuffer[0]);
+            break;
+
+		default:
+		    break;
+    }
+
+	return ret;
+}
+
+static const struct file_operations disp_fops =
+{
+	.owner		= THIS_MODULE,
+	.open		= disp_open,
+	.release    = disp_release,
+	.write      = disp_write,
+	.read		= disp_read,
+	.unlocked_ioctl	= disp_ioctl,
+	.mmap       = disp_mmap,
+};
+
+static struct platform_driver disp_driver =
+{
+	.probe		= disp_probe,
+	.remove		= disp_remove,
+	.suspend    = disp_suspend,
+	.resume    = disp_resume,
+	.shutdown   = disp_shutdown,
+	.driver		=
+	{
+		.name	= "disp",
+		.owner	= THIS_MODULE,
+	},
+};
+
+
+struct platform_device disp_device =
+{
+	.name           = "disp",
+	.id		        = -1,
+	.num_resources  = ARRAY_SIZE(disp_resource),
+	.resource	    = disp_resource,
+	.dev            = {}
+};
+
+int __init disp_module_init(void)
+{
+	int ret, err;
+
+	__inf("disp_module_init\n");
+
+    alloc_chrdev_region(&devid, 0, 1, "disp");
+    my_cdev = cdev_alloc();
+    cdev_init(my_cdev, &disp_fops);
+    my_cdev->owner = THIS_MODULE;
+    err = cdev_add(my_cdev, devid, 1);
+    if (err)
+    {
+        __wrn("cdev_add fail\n");
+        return -1;
+    }
+
+    disp_class = class_create(THIS_MODULE, "disp");
+    if (IS_ERR(disp_class))
+    {
+        __wrn("class_create fail\n");
+        return -1;
+    }
+
+    device_create(disp_class, NULL, devid, NULL, "disp");
+
+	ret = platform_device_register(&disp_device);
+
+	if (ret == 0)
+	{
+		ret = platform_driver_register(&disp_driver);
+	}
+#ifdef CONFIG_HAS_EARLYSUSPEND
+    register_early_suspend(&backlight_early_suspend_handler);
+#endif
+
+	return ret;
+}
+
+static void __exit disp_module_exit(void)
+{
+	__inf("disp_module_exit\n");
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+    unregister_early_suspend(&backlight_early_suspend_handler);
+#endif
+    DRV_DISP_Exit();
+
+	platform_driver_unregister(&disp_driver);
+	platform_device_unregister(&disp_device);
+
+    device_destroy(disp_class,  devid);
+    class_destroy(disp_class);
+
+    cdev_del(my_cdev);
+}
+
+EXPORT_SYMBOL(disp_set_hdmi_func);
+EXPORT_SYMBOL(DRV_DISP_Init);
+
+
+late_initcall(disp_module_init);
+//module_init(disp_module_init);
+module_exit(disp_module_exit);
+
+MODULE_AUTHOR("danling_xiao");
+MODULE_DESCRIPTION("display driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:disp");
+
diff --git a/drivers/video/sun4i/disp/dev_disp.h b/drivers/video/sun4i/disp/dev_disp.h
new file mode 100644
index 0000000..e11d438
--- /dev/null
+++ b/drivers/video/sun4i/disp/dev_disp.h
@@ -0,0 +1,94 @@
+#ifndef __DEV_DISP_H__
+#define __DEV_DISP_H__
+
+#include "drv_disp_i.h"
+
+// 1M + 64M(ve) + 16M(fb)
+#define FB_RESERVED_MEM
+
+
+struct info_mm {
+	void *info_base;	/* Virtual address */
+	unsigned long mem_start;	/* Start of frame buffer mem */
+					/* (physical address) */
+	__u32 mem_len;			/* Length of frame buffer mem */
+};
+
+
+
+typedef struct
+{
+	struct device   *       dev;
+	struct resource *       mem[DISP_IO_NUM];
+	void __iomem    *       io[DISP_IO_NUM];
+
+	__u32                   base_ccmu;
+	__u32                   base_sdram;
+    __u32                   base_pioc;
+	__u32                   base_pwm;
+
+    __disp_init_t           disp_init;
+
+    __bool                  fb_enable[FB_MAX];
+    __fb_mode_t             fb_mode[FB_MAX];
+    __u32                   layer_hdl[FB_MAX][2];//[fb_id][0]:screen0 layer handle;[fb_id][1]:screen1 layer handle
+    struct fb_info *        fbinfo[FB_MAX];
+    __disp_fb_create_para_t fb_para[FB_MAX];
+}fb_info_t;
+
+typedef struct
+{
+    __u32         	    mid;
+    __u32         	    used;
+    __u32         	    status;
+    __u32    		    exit_mode;//0:clean all  1:disable interrupt
+    __bool              b_cache[2];
+	__bool			    b_lcd_open[2];
+	wait_queue_head_t   my_queue[2][20];
+	__bool              b_cmd_finished[2][20];
+    wait_queue_head_t   scaler_queue[2];
+    __bool              b_scaler_finished[2];
+}__disp_drv_t;
+
+
+struct alloc_struct_t
+{
+    __u32 address;                      //申请内存的地址
+    __u32 size;                         //分配的内存大小，用户实际得到的内存大小
+    __u32 o_size;                       //用户申请的内存大小
+    struct alloc_struct_t *next;
+};
+
+int disp_open(struct inode *inode, struct file *file);
+int disp_release(struct inode *inode, struct file *file);
+ssize_t disp_read(struct file *file, char __user *buf, size_t count, loff_t *ppos);
+ssize_t disp_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos);
+int disp_mmap(struct file *file, struct vm_area_struct * vma);
+long disp_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+
+__s32 disp_create_heap(__u32 pHeapHead, __u32 nHeapSize);
+void *disp_malloc(__u32 num_bytes);
+void  disp_free(void *p);
+
+
+extern __s32 Display_Fb_Request(__u32 fb_id, __disp_fb_create_para_t *fb_para);
+extern __s32 Display_Fb_Release(__u32 fb_id);
+extern __s32 Display_Fb_get_para(__u32 fb_id, __disp_fb_create_para_t *fb_para);
+extern __s32 Display_get_disp_init_para(__disp_init_t * init_para);
+
+extern __s32 DRV_disp_int_process(__u32 sel);
+extern void DRV_disp_wait_cmd_finish(__u32 sel);
+
+extern __s32 DRV_DISP_Init(void);
+extern __s32 DRV_DISP_Exit(void);
+
+extern fb_info_t g_fbi;
+
+extern __disp_drv_t    g_disp_drv;
+
+extern __s32 DRV_lcd_open(__u32 sel);
+extern __s32 DRV_lcd_close(__u32 sel);
+extern __s32 Fb_Init(__u32 from);
+extern __s32 Fb_Exit(void);
+
+#endif
diff --git a/drivers/video/sun4i/disp/dev_fb.c b/drivers/video/sun4i/disp/dev_fb.c
new file mode 100644
index 0000000..99ffc1b
--- /dev/null
+++ b/drivers/video/sun4i/disp/dev_fb.c
@@ -0,0 +1,1431 @@
+#include "drv_disp_i.h"
+#include "dev_disp.h"
+
+
+extern fb_info_t g_fbi;
+
+
+#define FBHANDTOID(handle)  ((handle) - 100)
+#define FBIDTOHAND(ID)  ((ID) + 100)
+
+
+//              0:ARGB    1:BRGA    2:ABGR    3:RGBA
+//seq           ARGB        BRGA       ARGB       BRGA
+//br_swqp    0              0            1              1
+__s32 parser_disp_init_para(__disp_init_t * init_para)
+{
+    int  value;
+    int  i;
+
+    memset(init_para, 0, sizeof(__disp_init_t));
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "disp_init_enable", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.disp_init_enable fail\n");
+        return -1;
+    }
+    init_para->b_init = value;
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "disp_mode", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.disp_mode fail\n");
+        return -1;
+    }
+    init_para->disp_mode= value;
+
+//screen0
+    if(OSAL_Script_FetchParser_Data("disp_init", "screen0_output_type", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.screen0_output_type fail\n");
+        return -1;
+    }
+    if(value == 0)
+    {
+        init_para->output_type[0] = DISP_OUTPUT_TYPE_NONE;
+    }
+    else if(value == 1)
+    {
+        init_para->output_type[0] = DISP_OUTPUT_TYPE_LCD;
+    }
+    else if(value == 2)
+    {
+        init_para->output_type[0] = DISP_OUTPUT_TYPE_TV;
+    }
+    else if(value == 3)
+    {
+        init_para->output_type[0] = DISP_OUTPUT_TYPE_HDMI;
+    }
+    else if(value == 4)
+    {
+        init_para->output_type[0] = DISP_OUTPUT_TYPE_VGA;
+    }
+    else
+    {
+        __wrn("invalid screen0_output_type %d\n", init_para->output_type[0]);
+        return -1;
+    }
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "screen0_output_mode", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.screen0_output_mode fail\n");
+        return -1;
+    }
+    if(init_para->output_type[0] == DISP_OUTPUT_TYPE_TV || init_para->output_type[0] == DISP_OUTPUT_TYPE_HDMI)
+    {
+        init_para->tv_mode[0]= (__disp_tv_mode_t)value;
+    }
+    else if(init_para->output_type[0] == DISP_OUTPUT_TYPE_VGA)
+    {
+        init_para->vga_mode[0]= (__disp_vga_mode_t)value;
+    }
+
+//screen1
+    if(OSAL_Script_FetchParser_Data("disp_init", "screen1_output_type", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.screen1_output_type fail\n");
+        return -1;
+    }
+    if(value == 0)
+    {
+        init_para->output_type[1] = DISP_OUTPUT_TYPE_NONE;
+    }
+    else if(value == 1)
+    {
+        init_para->output_type[1] = DISP_OUTPUT_TYPE_LCD;
+    }
+    else if(value == 2)
+    {
+        init_para->output_type[1] = DISP_OUTPUT_TYPE_TV;
+    }
+    else if(value == 3)
+    {
+        init_para->output_type[1] = DISP_OUTPUT_TYPE_HDMI;
+    }
+    else if(value == 4)
+    {
+        init_para->output_type[1] = DISP_OUTPUT_TYPE_VGA;
+    }
+    else
+    {
+        __wrn("invalid screen1_output_type %d\n", init_para->output_type[1]);
+        return -1;
+    }
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "screen1_output_mode", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.screen1_output_mode fail\n");
+        return -1;
+    }
+    if(init_para->output_type[1] == DISP_OUTPUT_TYPE_TV || init_para->output_type[1] == DISP_OUTPUT_TYPE_HDMI)
+    {
+        init_para->tv_mode[1]= (__disp_tv_mode_t)value;
+    }
+    else if(init_para->output_type[1] == DISP_OUTPUT_TYPE_VGA)
+    {
+        init_para->vga_mode[1]= (__disp_vga_mode_t)value;
+    }
+
+//fb0
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb0_framebuffer_num", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb0_framebuffer_num fail\n");
+        return -1;
+    }
+    init_para->buffer_num[0]= value;
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb0_format", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb0_format fail\n");
+        return -1;
+    }
+    init_para->format[0]= value;
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb0_pixel_sequence", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb0_pixel_sequence fail\n");
+        return -1;
+    }
+    init_para->seq[0]= value;
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb0_scaler_mode_enable", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb0_scaler_mode_enable fail\n");
+        return -1;
+    }
+    init_para->scaler_mode[0]= value;
+
+//fb1
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb1_framebuffer_num", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb1_framebuffer_num fail\n");
+        return -1;
+    }
+    init_para->buffer_num[1]= value;
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb1_format", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb1_format fail\n");
+        return -1;
+    }
+    init_para->format[1]= value;
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb1_pixel_sequence", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb1_pixel_sequence fail\n");
+        return -1;
+    }
+    init_para->seq[1]= value;
+
+    if(OSAL_Script_FetchParser_Data("disp_init", "fb1_scaler_mode_enable", &value, 1) < 0)
+    {
+        __wrn("fetch script data disp_init.fb1_scaler_mode_enable fail\n");
+        return -1;
+    }
+    init_para->scaler_mode[1]= value;
+
+
+    __inf("====display init para begin====\n");
+    __inf("b_init:%d\n", init_para->b_init);
+    __inf("disp_mode:%d\n\n", init_para->disp_mode);
+    for(i=0; i<2; i++)
+    {
+        __inf("output_type[%d]:%d\n", i, init_para->output_type[i]);
+        __inf("tv_mode[%d]:%d\n", i, init_para->tv_mode[i]);
+        __inf("vga_mode[%d]:%d\n\n", i, init_para->vga_mode[i]);
+    }
+    for(i=0; i<2; i++)
+    {
+        __inf("buffer_num[%d]:%d\n", i, init_para->buffer_num[i]);
+        __inf("format[%d]:%d\n", i, init_para->format[i]);
+        __inf("seq[%d]:%d\n", i, init_para->seq[i]);
+        __inf("br_swap[%d]:%d\n", i, init_para->br_swap[i]);
+        __inf("b_scaler_mode[%d]:%d\n", i, init_para->scaler_mode[i]);
+    }
+    __inf("====display init para end====\n");
+
+    return 0;
+}
+
+__s32 fb_draw_colorbar(__u32 base, __u32 width, __u32 height, struct fb_var_screeninfo *var)
+{
+    __u32 i=0, j=0;
+
+    for(i = 0; i<height; i++)
+    {
+        for(j = 0; j<width/4; j++)
+        {
+            __u32 offset = 0;
+
+            if(var->bits_per_pixel == 32)
+            {
+                offset = width * i + j;
+                sys_put_wvalue(base + offset*4, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->red.length)-1)<<var->red.offset));
+
+                offset = width * i + j + width/4;
+                sys_put_wvalue(base + offset*4, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->green.length)-1)<<var->green.offset));
+
+                offset = width * i + j + width/4*2;
+                sys_put_wvalue(base + offset*4, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->blue.length)-1)<<var->blue.offset));
+
+                offset = width * i + j + width/4*3;
+                sys_put_wvalue(base + offset*4, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->red.length)-1)<<var->red.offset) | (((1<<var->green.length)-1)<<var->green.offset));
+            }
+            else if(var->bits_per_pixel == 16)
+            {
+                offset = width * i + j;
+                sys_put_hvalue(base + offset*2, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->red.length)-1)<<var->red.offset));
+
+                offset = width * i + j + width/4;
+                sys_put_hvalue(base + offset*2, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->green.length)-1)<<var->green.offset));
+
+                offset = width * i + j + width/4*2;
+                sys_put_hvalue(base + offset*2, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->blue.length)-1)<<var->blue.offset));
+
+                offset = width * i + j + width/4*3;
+                sys_put_hvalue(base + offset*2, (((1<<var->transp.length)-1)<<var->transp.offset) | (((1<<var->red.length)-1)<<var->red.offset) | (((1<<var->green.length)-1)<<var->green.offset));
+            }
+        }
+    }
+
+    return 0;
+}
+
+__s32 fb_draw_gray_pictures(__u32 base, __u32 width, __u32 height, struct fb_var_screeninfo *var)
+{
+    __u32 time = 0;
+
+    for(time = 0; time<18; time++)
+    {
+        __u32 i=0, j=0;
+
+        for(i = 0; i<height; i++)
+        {
+            for(j = 0; j<width; j++)
+            {
+                __u32 addr = base + (i*width+ j)*4;
+                __u32 value = (0xff<<24) | ((time*15)<<16) | ((time*15)<<8) | (time*15);
+
+                sys_put_wvalue(addr, value);
+            }
+        }
+        OSAL_PRINTF("----%d\n", time*15);
+        msleep(1000 * 5);
+    }
+    return 0;
+}
+
+static int __init Fb_map_video_memory(struct fb_info *info)
+{
+#ifndef FB_RESERVED_MEM
+	unsigned map_size = PAGE_ALIGN(info->fix.smem_len);
+	struct page *page;
+
+	page = alloc_pages(GFP_KERNEL,get_order(map_size));
+	if(page != NULL)
+	{
+		info->screen_base = page_address(page);
+		info->fix.smem_start = virt_to_phys(info->screen_base);
+		memset(info->screen_base,0,info->fix.smem_len);
+		__inf("Fb_map_video_memory, pa=0x%08lx size:0x%x\n",info->fix.smem_start, info->fix.smem_len);
+		return 0;
+	}
+	else
+	{
+		__wrn("alloc_pages fail!\n");
+		return -ENOMEM;
+	}
+#else
+    info->screen_base = (char __iomem *)disp_malloc(info->fix.smem_len);
+    info->fix.smem_start = (unsigned long)__pa(info->screen_base);
+    memset(info->screen_base,0,info->fix.smem_len);
+
+    __inf("Fb_map_video_memory, pa=0x%08lx size:0x%x\n",info->fix.smem_start, info->fix.smem_len);
+
+    return 0;
+#endif
+}
+
+
+static inline void Fb_unmap_video_memory(struct fb_info *info)
+{
+#ifndef FB_RESERVED_MEM
+	unsigned map_size = PAGE_ALIGN(info->fix.smem_len);
+
+	free_pages((unsigned long)info->screen_base,get_order(map_size));
+#else
+    disp_free((void *)info->screen_base);
+#endif
+}
+
+
+
+__s32 disp_fb_to_var(__disp_pixel_fmt_t format, __disp_pixel_seq_t seq, __bool br_swap, struct fb_var_screeninfo *var)//todo
+{
+    if(format==DISP_FORMAT_ARGB8888)
+    {
+        var->bits_per_pixel = 32;
+        var->transp.length = 8;
+        var->red.length = 8;
+        var->green.length = 8;
+        var->blue.length = 8;
+        if(seq == DISP_SEQ_ARGB && br_swap == 0)//argb
+        {
+            var->blue.offset = 0;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+            var->transp.offset = var->red.offset + var->red.length;
+        }
+        else if(seq == DISP_SEQ_BGRA && br_swap == 0)//bgra
+        {
+            var->transp.offset = 0;
+            var->red.offset = var->transp.offset + var->transp.length;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+        }
+        else if(seq == DISP_SEQ_ARGB && br_swap == 1)//abgr
+        {
+            var->red.offset = 0;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+            var->transp.offset = var->blue.offset + var->blue.length;
+        }
+        else if(seq == DISP_SEQ_BGRA && br_swap == 1)//rgba
+        {
+            var->transp.offset = 0;
+            var->blue.offset = var->transp.offset + var->transp.length;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+        }
+    }
+    else if(format==DISP_FORMAT_RGB888)
+    {
+        var->bits_per_pixel = 24;
+        var->transp.length = 0;
+        var->red.length = 8;
+        var->green.length = 8;
+        var->blue.length = 8;
+        if(br_swap == 0)//rgb
+        {
+            var->blue.offset = 0;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+        }
+        else//bgr
+        {
+            var->red.offset = 0;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+        }
+    }
+    else if(format==DISP_FORMAT_RGB655)
+    {
+        var->bits_per_pixel = 16;
+        var->transp.length = 0;
+        var->red.length = 6;
+        var->green.length = 5;
+        var->blue.length = 5;
+        if(br_swap == 0)//rgb
+        {
+            var->blue.offset = 0;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+        }
+        else//bgr
+        {
+            var->red.offset = 0;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+        }
+    }
+    else if(format==DISP_FORMAT_RGB565)
+    {
+        var->bits_per_pixel = 16;
+        var->transp.length = 0;
+        var->red.length = 5;
+        var->green.length = 6;
+        var->blue.length = 5;
+        if(br_swap == 0)//rgb
+        {
+            var->blue.offset = 0;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+        }
+        else//bgr
+        {
+            var->red.offset = 0;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+        }
+    }
+    else if(format==DISP_FORMAT_RGB556)
+    {
+        var->bits_per_pixel = 16;
+        var->transp.length = 0;
+        var->red.length = 5;
+        var->green.length = 5;
+        var->blue.length = 6;
+        if(br_swap == 0)//rgb
+        {
+            var->blue.offset = 0;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+        }
+        else//bgr
+        {
+            var->red.offset = 0;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->blue.offset + var->blue.length;
+        }
+    }
+    else if(format==DISP_FORMAT_ARGB1555)
+    {
+        var->bits_per_pixel = 16;
+        var->transp.length = 1;
+        var->red.length = 5;
+        var->green.length = 5;
+        var->blue.length = 5;
+        if(br_swap == 0)//rgb
+        {
+            var->blue.offset = 0;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+            var->transp.offset = var->red.offset + var->red.length;
+        }
+        else//bgr
+        {
+            var->red.offset = 0;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+            var->transp.offset = var->blue.offset + var->blue.length;
+        }
+    }
+    else if(format==DISP_FORMAT_RGBA5551)
+    {
+        var->bits_per_pixel = 16;
+        var->red.length = 5;
+        var->green.length = 5;
+        var->blue.length = 5;
+        var->transp.length = 1;
+        if(br_swap == 0)//rgba
+        {
+            var->transp.offset = 0;
+            var->blue.offset = var->transp.offset + var->transp.length;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+        }
+        else//bgra
+        {
+            var->transp.offset = 0;
+            var->red.offset = var->transp.offset + var->transp.length;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+        }
+    }
+    else if(format==DISP_FORMAT_ARGB4444)
+    {
+        var->bits_per_pixel = 16;
+        var->transp.length = 4;
+        var->red.length = 4;
+        var->green.length = 4;
+        var->blue.length = 4;
+        if(br_swap == 0)//argb
+        {
+            var->blue.offset = 0;
+            var->green.offset = var->blue.offset + var->blue.length;
+            var->red.offset = var->green.offset + var->green.length;
+            var->transp.offset = var->red.offset + var->red.length;
+        }
+        else//abgr
+        {
+            var->red.offset = 0;
+            var->green.offset = var->red.offset + var->red.length;
+            var->blue.offset = var->green.offset + var->green.length;
+            var->transp.offset = var->blue.offset + var->blue.length;
+        }
+    }
+
+    return 0;
+}
+
+__s32 var_to_disp_fb(__disp_fb_t *fb, struct fb_var_screeninfo *var, struct fb_fix_screeninfo * fix)//todo
+{
+    if(var->nonstd == 0)//argb
+    {
+		var->reserved[0] = DISP_MOD_INTERLEAVED;
+		var->reserved[1] = DISP_FORMAT_ARGB8888;
+		var->reserved[2] = DISP_SEQ_ARGB;
+		var->reserved[3] = 0;
+
+		switch (var->bits_per_pixel)
+		{
+		case 1:
+		    var->red.offset = var->green.offset = var->blue.offset	= 0;
+			var->red.length	= var->green.length = var->blue.length	= 1;
+			var->reserved[1] = DISP_FORMAT_1BPP;
+			break;
+
+		case 2:
+		    var->red.offset = var->green.offset = var->blue.offset	= 0;
+			var->red.length	= var->green.length = var->blue.length	= 2;
+			var->reserved[1] = DISP_FORMAT_2BPP;
+			break;
+
+		case 4:
+		    var->red.offset = var->green.offset = var->blue.offset	= 0;
+			var->red.length	= var->green.length = var->blue.length	= 4;
+			var->reserved[1] = DISP_FORMAT_4BPP;
+			break;
+
+		case 8:
+		    var->red.offset = var->green.offset = var->blue.offset	= 0;
+			var->red.length	= var->green.length = var->blue.length	= 8;
+			var->reserved[1] = DISP_FORMAT_8BPP;
+			break;
+
+		case 16:
+			if(var->red.length==6 && var->green.length==5 && var->blue.length==5)
+			{
+			    var->reserved[1] = DISP_FORMAT_RGB655;
+			    if(var->red.offset == 10 && var->green.offset == 5 && var->blue.offset == 0)//rgb
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			    else if(var->blue.offset == 11 && var->green.offset == 6 && var->red.offset == 0)//bgr
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 1;
+			    }
+			    else
+			    {
+			        __wrn("invalid RGB655 format<red.offset:%d,green.offset:%d,blue.offset:%d>\n",var->red.offset,var->green.offset,var->blue.offset);
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+
+			}
+			else if(var->red.length==5 && var->green.length==6 && var->blue.length==5)
+			{
+				var->reserved[1] = DISP_FORMAT_RGB565;
+				if(var->red.offset == 11 && var->green.offset == 5 && var->blue.offset == 0)//rgb
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			    else if(var->blue.offset == 11 && var->green.offset == 5 && var->red.offset == 0)//bgr
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 1;
+			    }
+			    else
+			    {
+			        __wrn("invalid RGB565 format<red.offset:%d,green.offset:%d,blue.offset:%d>\n",var->red.offset,var->green.offset,var->blue.offset);
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			}
+			else if(var->red.length==5 && var->green.length==5 && var->blue.length==6)
+			{
+				var->reserved[1] = DISP_FORMAT_RGB556;
+				if(var->red.offset == 11 && var->green.offset == 6 && var->blue.offset == 0)//rgb
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			    else if(var->blue.offset == 10 && var->green.offset == 5 && var->red.offset == 0)//bgr
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 1;
+			    }
+			    else
+			    {
+			        __wrn("invalid RGB556 format<red.offset:%d,green.offset:%d,blue.offset:%d>\n",var->red.offset,var->green.offset,var->blue.offset);
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			}
+			else if(var->transp.length==1 && var->red.length==5 && var->green.length==5 && var->blue.length==5)
+			{
+				var->reserved[1] = DISP_FORMAT_ARGB1555;
+				if(var->transp.offset == 15 && var->red.offset == 10 && var->green.offset == 5 && var->blue.offset == 0)//argb
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			    else if(var->transp.offset == 15 && var->blue.offset == 10 && var->green.offset == 5 && var->red.offset == 0)//abgr
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 1;
+			    }
+			    else
+			    {
+			        __wrn("invalid ARGB1555 format<transp.offset:%d,red.offset:%d,green.offset:%d,blue.offset:%d>\n",var->transp.offset,var->red.offset,var->green.offset,var->blue.offset);
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			}
+			else if(var->transp.length==4 && var->red.length==4 && var->green.length==4 && var->blue.length==4)
+			{
+				var->reserved[1] = DISP_FORMAT_ARGB4444;
+				if(var->transp.offset == 12 && var->red.offset == 8 && var->green.offset == 4 && var->blue.offset == 0)//argb
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			    else if(var->transp.offset == 12 && var->blue.offset == 8 && var->green.offset == 4 && var->red.offset == 0)//abgr
+			    {
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 1;
+			    }
+			    else
+			    {
+			        __wrn("invalid ARGB4444 format<transp.offset:%d,red.offset:%d,green.offset:%d,blue.offset:%d>\n",var->transp.offset,var->red.offset,var->green.offset,var->blue.offset);
+			        var->reserved[2] = DISP_SEQ_ARGB;
+			        var->reserved[3] = 0;
+			    }
+			}
+			else
+			{
+			    __wrn("invalid bits_per_pixel :%d\n", var->bits_per_pixel);
+				return -EINVAL;
+			}
+			break;
+
+		case 24:
+			var->red.length		= 8;
+			var->green.length	= 8;
+			var->blue.length	= 8;
+			var->reserved[1] = DISP_FORMAT_RGB888;
+			if(var->red.offset == 16 && var->green.offset == 8 && var->blue.offset == 0)//rgb
+		    {
+		        var->reserved[2] = DISP_SEQ_ARGB;
+		        var->reserved[3] = 0;
+		    }
+		    else if(var->blue.offset == 16 && var->green.offset == 8&& var->red.offset == 0)//bgr
+		    {
+		        var->reserved[2] = DISP_SEQ_ARGB;
+		        var->reserved[3] = 1;
+		    }
+		    else
+		    {
+		        __wrn("invalid RGB888 format<red.offset:%d,green.offset:%d,blue.offset:%d>\n",var->red.offset,var->green.offset,var->blue.offset);
+		        var->reserved[2] = DISP_SEQ_ARGB;
+		        var->reserved[3] = 0;
+		    }
+			break;
+
+		case 32:
+			var->transp.length  = 8;
+			var->red.length		= 8;
+			var->green.length	= 8;
+			var->blue.length	= 8;
+			var->reserved[1] = DISP_FORMAT_ARGB8888;
+
+			if(var->red.offset == 16 && var->green.offset == 8 && var->blue.offset == 0)//argb
+			{
+			    var->reserved[2] = DISP_SEQ_ARGB;
+			    var->reserved[3] = 0;
+ 			}
+			else if(var->blue.offset == 24 && var->green.offset == 16 && var->red.offset == 8)//bgra
+			{
+			    var->reserved[2] = DISP_SEQ_BGRA;
+			    var->reserved[3] = 0;
+			}
+			else if(var->blue.offset == 16 && var->green.offset == 8 && var->red.offset == 0)//abgr
+			{
+			    var->reserved[2] = DISP_SEQ_ARGB;
+			    var->reserved[3] = 1;
+			}
+			else if(var->red.offset == 24 && var->green.offset == 16 && var->blue.offset == 8)//rgba
+			{
+			    var->reserved[2] = DISP_SEQ_BGRA;
+			    var->reserved[3] = 1;
+			}
+			else
+			{
+			    __wrn("invalid argb format<transp.offset:%d,red.offset:%d,green.offset:%d,blue.offset:%d>\n",var->transp.offset,var->red.offset,var->green.offset,var->blue.offset);
+			    var->reserved[2] = DISP_SEQ_ARGB;
+			    var->reserved[3] = 0;
+			}
+			break;
+
+		default:
+		    __wrn("invalid bits_per_pixel :%d\n", var->bits_per_pixel);
+			return -EINVAL;
+		}
+	}
+
+    fb->mode = var->reserved[0];
+    fb->format = var->reserved[1];
+    fb->seq = var->reserved[2];
+    fb->br_swap = var->reserved[3];
+    fb->size.width = var->xres_virtual;
+
+    fix->line_length = (var->xres_virtual * var->bits_per_pixel) / 8;
+
+	return 0;
+}
+
+
+static int Fb_open(struct fb_info *info, int user)
+{
+	return 0;
+}
+static int Fb_release(struct fb_info *info, int user)
+{
+	return 0;
+}
+
+static int Fb_pan_display(struct fb_var_screeninfo *var,struct fb_info *info)
+{
+	__u32 sel = 0;
+
+	//__inf("Fb_pan_display\n");
+
+    for(sel = 0; sel < 2; sel++)
+    {
+        if(((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1))
+            || ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)))
+        {
+            __s32 layer_hdl = g_fbi.layer_hdl[info->node][sel];
+            __disp_layer_info_t layer_para;
+            __u32 buffer_num = 1;
+            __u32 y_offset = 0;
+
+            if(g_fbi.fb_mode[info->node] == FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS)
+            {
+                if(sel != var->reserved[0])
+                {
+                    return -1;
+                }
+            }
+
+            if(g_fbi.fb_mode[info->node] == FB_MODE_DUAL_SAME_SCREEN_TB)
+            {
+                buffer_num = 2;
+            }
+            if((sel==1) && (g_fbi.fb_mode[info->node] == FB_MODE_DUAL_SAME_SCREEN_TB))
+            {
+                y_offset = var->yres / 2;
+            }
+
+        	BSP_disp_layer_get_para(sel, layer_hdl, &layer_para);
+
+        	if(layer_para.mode == DISP_LAYER_WORK_MODE_SCALER)
+        	{
+            	layer_para.src_win.x = var->xoffset;
+            	layer_para.src_win.y = var->yoffset + y_offset;
+            	layer_para.src_win.width = var->xres;
+            	layer_para.src_win.height = var->yres / buffer_num;
+
+            	BSP_disp_layer_set_src_window(sel, layer_hdl, &(layer_para.src_win));
+            	DRV_disp_wait_cmd_finish(sel);
+            }
+            else
+            {
+            	layer_para.src_win.x = var->xoffset;
+            	layer_para.src_win.y = var->yoffset + y_offset;
+            	layer_para.src_win.width = var->xres;
+            	layer_para.src_win.height = var->yres / buffer_num;
+
+            	layer_para.scn_win.width = var->xres;
+            	layer_para.scn_win.height = var->yres / buffer_num;
+
+                BSP_disp_layer_set_src_window(sel, layer_hdl, &(layer_para.src_win));
+            	BSP_disp_layer_set_screen_window(sel, layer_hdl, &(layer_para.scn_win));
+            	DRV_disp_wait_cmd_finish(sel);
+            }
+        }
+    }
+
+	return 0;
+}
+
+static int Fb_check_var(struct fb_var_screeninfo *var, struct fb_info *info)//todo
+{
+	return 0;
+}
+
+static int Fb_set_par(struct fb_info *info)//todo
+{
+	__u32 sel = 0;
+
+	__inf("Fb_set_par\n");
+
+    for(sel = 0; sel < 2; sel++)
+    {
+        if(((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1))
+            || ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)))
+        {
+            struct fb_var_screeninfo *var = &info->var;
+            struct fb_fix_screeninfo * fix = &info->fix;
+            __s32 layer_hdl = g_fbi.layer_hdl[info->node][sel];
+            __disp_layer_info_t layer_para;
+            __u32 buffer_num = 1;
+            __u32 y_offset = 0;
+
+            if(g_fbi.fb_mode[info->node] == FB_MODE_DUAL_SAME_SCREEN_TB)
+            {
+                buffer_num = 2;
+            }
+            if((sel==1) && (g_fbi.fb_mode[info->node] == FB_MODE_DUAL_SAME_SCREEN_TB))
+            {
+                y_offset = var->yres / 2;
+            }
+            BSP_disp_layer_get_para(sel, layer_hdl, &layer_para);
+
+            var_to_disp_fb(&(layer_para.fb), var, fix);
+        	layer_para.src_win.x = var->xoffset;
+        	layer_para.src_win.y = var->yoffset + y_offset;
+        	layer_para.src_win.width = var->xres;
+        	layer_para.src_win.height = var->yres / buffer_num;
+        	if(layer_para.mode != DISP_LAYER_WORK_MODE_SCALER)
+        	{
+            	layer_para.scn_win.width = layer_para.src_win.width;
+            	layer_para.scn_win.height = layer_para.src_win.height;
+        	}
+            BSP_disp_layer_set_para(sel, layer_hdl, &layer_para);
+        }
+    }
+	return 0;
+}
+
+
+static int Fb_setcolreg(unsigned regno,unsigned red, unsigned green, unsigned blue,unsigned transp, struct fb_info *info)
+{
+    __u32 sel = 0;
+
+	 __inf("Fb_setcolreg,regno=%d,a=%d,r=%d,g=%d,b=%d\n",regno, transp,red, green, blue);
+
+    for(sel = 0; sel < 2; sel++)
+    {
+        if(((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1))
+            || ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)))
+        {
+            unsigned int val;
+
+        	switch (info->fix.visual)
+        	{
+        	case FB_VISUAL_PSEUDOCOLOR:
+        		if (regno < 256)
+        		{
+        			val = (transp<<24) | (red<<16) | (green<<8) | blue;
+        			BSP_disp_set_palette_table(sel, &val, regno*4, 4);
+        		}
+        		break;
+
+        	default:
+        		break;
+        	}
+    	}
+	}
+
+	return 0;
+}
+
+static int Fb_setcmap(struct fb_cmap *cmap, struct fb_info *info)
+{
+    __u32 sel = 0;
+
+	__inf("Fb_setcmap\n");
+
+    for(sel = 0; sel < 2; sel++)
+    {
+        if(((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1))
+            || ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)))
+        {
+            unsigned int j = 0, val = 0;
+            unsigned char hred, hgreen, hblue, htransp = 0xff;
+            unsigned short *red, *green, *blue, *transp;
+
+            red = cmap->red;
+            green = cmap->green;
+            blue = cmap->blue;
+            transp = cmap->transp;
+
+        	for (j = 0; j < cmap->len; j++)
+        	{
+        		hred = (*red++)&0xff;
+        		hgreen = (*green++)&0xff;
+        		hblue = (*blue++)&0xff;
+        		if (transp)
+        		{
+        			htransp = (*transp++)&0xff;
+        		}
+        		else
+        		{
+        		    htransp = 0xff;
+        		}
+
+        		val = (htransp<<24) | (hred<<16) | (hgreen<<8) |hblue;
+        		BSP_disp_set_palette_table(sel, &val, (cmap->start + j) * 4, 4);
+        	}
+    	}
+	}
+	return 0;
+}
+
+int Fb_blank(int blank_mode, struct fb_info *info)
+{
+    __u32 sel = 0;
+
+	__inf("Fb_blank,mode:%d\n",blank_mode);
+
+    for(sel = 0; sel < 2; sel++)
+    {
+        if(((sel==0) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1))
+            || ((sel==1) && (g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)))
+        {
+            __s32 layer_hdl = g_fbi.layer_hdl[info->node][sel];
+
+        	if (blank_mode == FB_BLANK_POWERDOWN)
+        	{
+        		BSP_disp_layer_close(sel, layer_hdl);
+        	}
+        	else
+        	{
+        		BSP_disp_layer_open(sel, layer_hdl);
+        	}
+            //DRV_disp_wait_cmd_finish(sel);
+        }
+    }
+	return 0;
+}
+
+static int Fb_cursor(struct fb_info *info, struct fb_cursor *cursor)
+{
+    __inf("Fb_cursor\n");
+
+    return 0;
+}
+
+
+static int Fb_ioctl(struct fb_info *info, unsigned int cmd,unsigned long arg)
+{
+	long ret = 0;
+	__u32 sel = 0;
+	unsigned long layer_hdl = 0;
+
+	switch (cmd)
+	{
+    case FBIOGET_LAYER_HDL_0:
+        if(g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1)
+        {
+            layer_hdl = g_fbi.layer_hdl[info->node][0];
+            copy_to_user((void __user *)arg, &layer_hdl, sizeof(unsigned long));
+        }
+        else
+        {
+            ret = -1;
+        }
+        break;
+
+    case FBIOGET_LAYER_HDL_1:
+        if(g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)
+        {
+            layer_hdl = g_fbi.layer_hdl[info->node][1];
+            copy_to_user((void __user *)arg, &layer_hdl, sizeof(unsigned long));
+        }
+        else
+        {
+            ret = -1;
+        }
+        break;
+
+    case FBIO_OPEN:
+        if(g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1)
+        {
+            BSP_disp_layer_open(sel, g_fbi.layer_hdl[info->node][0]);
+	        DRV_disp_wait_cmd_finish(sel);
+        }
+	    if(g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)
+	    {
+            BSP_disp_layer_open(sel, g_fbi.layer_hdl[info->node][1]);
+    	    DRV_disp_wait_cmd_finish(sel);
+	    }
+        break;
+
+    case FBIO_CLOSE:
+        if(g_fbi.fb_mode[info->node] != FB_MODE_SCREEN1)
+        {
+            BSP_disp_layer_close(sel, g_fbi.layer_hdl[info->node][0]);
+	        DRV_disp_wait_cmd_finish(sel);
+        }
+	    if(g_fbi.fb_mode[info->node] != FB_MODE_SCREEN0)
+	    {
+            BSP_disp_layer_close(sel, g_fbi.layer_hdl[info->node][1]);
+    	    DRV_disp_wait_cmd_finish(sel);
+	    }
+        break;
+
+   	default:
+   	    //__inf("not supported fb io cmd:%x\n", cmd);
+		break;
+	}
+	return ret;
+}
+
+static struct fb_ops dispfb_ops =
+{
+	.owner		    = THIS_MODULE,
+	.fb_open        = Fb_open,
+	.fb_release     = Fb_release,
+	.fb_pan_display	= Fb_pan_display,
+	.fb_ioctl       = Fb_ioctl,
+	.fb_check_var   = Fb_check_var,
+	.fb_set_par     = Fb_set_par,
+	.fb_setcolreg   = Fb_setcolreg,
+	.fb_setcmap     = Fb_setcmap,
+	.fb_blank       = Fb_blank,
+	.fb_cursor      = Fb_cursor,
+};
+
+__s32 Display_Fb_Request(__u32 fb_id, __disp_fb_create_para_t *fb_para)
+{
+	struct fb_info *info = NULL;
+	__s32 hdl = 0;
+	__disp_layer_info_t layer_para;
+	__u32 sel;
+	__u32 xres, yres;
+
+	__inf("Display_Fb_Request,fb_id:%d\n", fb_id);
+
+    info = g_fbi.fbinfo[fb_id];
+
+    xres = fb_para->width;
+    yres = fb_para->height;
+
+	info->var.xoffset       = 0;
+	info->var.yoffset       = 0;
+	info->var.xres          = xres;
+	info->var.yres          = yres;
+	info->var.xres_virtual  = xres;
+	info->var.yres_virtual  = yres * fb_para->buffer_num;
+    info->fix.line_length   = (fb_para->width * info->var.bits_per_pixel) >> 3;
+    info->fix.smem_len      = info->fix.line_length * fb_para->height * fb_para->buffer_num;
+    Fb_map_video_memory(info);
+
+    for(sel = 0; sel < 2; sel++)
+    {
+        if(((sel==0) && (fb_para->fb_mode != FB_MODE_SCREEN1))
+        || ((sel==1) && (fb_para->fb_mode != FB_MODE_SCREEN0)))
+        {
+    	    __u32 y_offset = 0, src_width = xres, src_height = yres;
+
+            if(fb_para->fb_mode == FB_MODE_DUAL_SAME_SCREEN_TB)
+            {
+                src_height = yres/ 2;
+                if(sel == 1)
+                {
+                    y_offset = yres / 2;
+                }
+            }
+
+            memset(&layer_para, 0, sizeof(__disp_layer_info_t));
+            layer_para.mode = fb_para->mode;
+            layer_para.scn_win.width = src_width;
+            layer_para.scn_win.height = src_height;
+            if(fb_para->fb_mode == FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS)
+            {
+                if(sel != fb_para->primary_screen_id)
+                {
+                    layer_para.mode = DISP_LAYER_WORK_MODE_SCALER;
+                    layer_para.scn_win.width = fb_para->aux_output_width;
+                    layer_para.scn_win.height = fb_para->aux_output_height;
+                }
+                else if(fb_para->mode == DISP_LAYER_WORK_MODE_SCALER)
+                {
+                    layer_para.scn_win.width = fb_para->output_width;
+                    layer_para.scn_win.height = fb_para->output_height;
+                }
+            }
+            else if(fb_para->mode == DISP_LAYER_WORK_MODE_SCALER)
+            {
+                layer_para.scn_win.width = fb_para->output_width;
+                layer_para.scn_win.height = fb_para->output_height;
+            }
+
+            hdl = BSP_disp_layer_request(sel, layer_para.mode);
+
+            layer_para.pipe = 0;
+            layer_para.alpha_en = 1;
+            layer_para.alpha_val = 0xff;
+            layer_para.ck_enable = 0;
+            layer_para.src_win.x = 0;
+            layer_para.src_win.y = y_offset;
+            layer_para.src_win.width = src_width;
+            layer_para.src_win.height = src_height;
+            layer_para.scn_win.x = 0;
+            layer_para.scn_win.y = 0;
+            var_to_disp_fb(&(layer_para.fb), &(info->var), &(info->fix));
+            layer_para.fb.addr[0] = (__u32)info->fix.smem_start;
+            layer_para.fb.addr[1] = 0;
+            layer_para.fb.addr[2] = 0;
+            layer_para.fb.size.width = fb_para->width;
+            layer_para.fb.size.height = fb_para->height;
+            layer_para.fb.cs_mode = DISP_BT601;
+            layer_para.b_from_screen = 0;
+            BSP_disp_layer_set_para(sel, hdl, &layer_para);
+
+            BSP_disp_layer_open(sel, hdl);
+
+        	g_fbi.layer_hdl[fb_id][sel] = hdl;
+    	}
+	}
+
+    g_fbi.fb_enable[fb_id] = 1;
+	g_fbi.fb_mode[fb_id] = fb_para->fb_mode;
+    memcpy(&g_fbi.fb_para[fb_id], fb_para, sizeof(__disp_fb_create_para_t));
+
+    return DIS_SUCCESS;
+}
+
+__s32 Display_Fb_Release(__u32 fb_id)
+{
+    __inf("Display_Fb_Release, fb_id:%d\n", fb_id);
+
+	if((fb_id >= 0) && g_fbi.fb_enable[fb_id])
+	{
+        __u32 sel = 0;
+        struct fb_info * info = g_fbi.fbinfo[fb_id];
+
+        for(sel = 0; sel < 2; sel++)
+        {
+            if(((sel==0) && (g_fbi.fb_mode[fb_id] != FB_MODE_SCREEN1))
+            || ((sel==1) && (g_fbi.fb_mode[fb_id] != FB_MODE_SCREEN0)))
+            {
+                __s32 layer_hdl = g_fbi.layer_hdl[fb_id][sel];
+
+                BSP_disp_layer_release(sel, layer_hdl);
+            }
+        }
+        g_fbi.layer_hdl[fb_id][0] = 0;
+        g_fbi.layer_hdl[fb_id][1] = 0;
+        g_fbi.fb_mode[fb_id] = FB_MODE_SCREEN0;
+        memset(&g_fbi.fb_para[fb_id], 0, sizeof(__disp_fb_create_para_t));
+        g_fbi.fb_enable[fb_id] = 0;
+
+    	Fb_unmap_video_memory(info);
+
+	    return DIS_SUCCESS;
+	}
+	else
+	{
+	    __wrn("invalid paras fb_id:%d in Display_Fb_Release\n", fb_id);
+	    return DIS_FAIL;
+	}
+}
+
+__s32 Display_Fb_get_para(__u32 fb_id, __disp_fb_create_para_t *fb_para)
+{
+    __inf("Display_Fb_Release, fb_id:%d\n", fb_id);
+
+	if((fb_id >= 0) && g_fbi.fb_enable[fb_id])
+	{
+        memcpy(fb_para, &g_fbi.fb_para[fb_id], sizeof(__disp_fb_create_para_t));
+
+	    return DIS_SUCCESS;
+	}
+	else
+	{
+	    __wrn("invalid paras fb_id:%d in Display_Fb_get_para\n", fb_id);
+	    return DIS_FAIL;
+	}
+}
+
+__s32 Display_get_disp_init_para(__disp_init_t * init_para)
+{
+    memcpy(init_para, &g_fbi.disp_init, sizeof(__disp_init_t));
+
+    return 0;
+}
+
+extern unsigned long fb_start;
+extern unsigned long fb_size;
+
+__s32 Fb_Init(__u32 from)
+{
+    __disp_fb_create_para_t fb_para;
+    __s32 i;
+    __bool need_open_hdmi = 0;
+
+    if(from == 0)//call from lcd driver
+    {
+#ifdef FB_RESERVED_MEM
+        __inf("fbmem: fb_start=%lu, fb_size=%lu\n", fb_start, fb_size);
+        disp_create_heap((unsigned long)(__va(fb_start)),  fb_size);
+#endif
+
+        for(i=0; i<8; i++)
+        {
+        	g_fbi.fbinfo[i] = framebuffer_alloc(0, g_fbi.dev);
+        	g_fbi.fbinfo[i]->fbops   = &dispfb_ops;
+        	g_fbi.fbinfo[i]->flags   = 0;
+        	g_fbi.fbinfo[i]->device  = g_fbi.dev;
+        	g_fbi.fbinfo[i]->par     = &g_fbi;
+        	g_fbi.fbinfo[i]->var.xoffset         = 0;
+        	g_fbi.fbinfo[i]->var.yoffset         = 0;
+        	g_fbi.fbinfo[i]->var.xres            = 800;
+        	g_fbi.fbinfo[i]->var.yres            = 480;
+        	g_fbi.fbinfo[i]->var.xres_virtual    = 800;
+        	g_fbi.fbinfo[i]->var.yres_virtual    = 480*2;
+        	g_fbi.fbinfo[i]->var.nonstd = 0;
+            g_fbi.fbinfo[i]->var.bits_per_pixel = 32;
+            g_fbi.fbinfo[i]->var.transp.length = 8;
+            g_fbi.fbinfo[i]->var.red.length = 8;
+            g_fbi.fbinfo[i]->var.green.length = 8;
+            g_fbi.fbinfo[i]->var.blue.length = 8;
+            g_fbi.fbinfo[i]->var.transp.offset = 24;
+            g_fbi.fbinfo[i]->var.red.offset = 16;
+            g_fbi.fbinfo[i]->var.green.offset = 8;
+            g_fbi.fbinfo[i]->var.blue.offset = 0;
+            g_fbi.fbinfo[i]->var.activate = FB_ACTIVATE_FORCE;
+        	g_fbi.fbinfo[i]->fix.type	    = FB_TYPE_PACKED_PIXELS;
+        	g_fbi.fbinfo[i]->fix.type_aux	= 0;
+        	g_fbi.fbinfo[i]->fix.visual 	= FB_VISUAL_TRUECOLOR;
+        	g_fbi.fbinfo[i]->fix.xpanstep	= 1;
+        	g_fbi.fbinfo[i]->fix.ypanstep	= 1;
+        	g_fbi.fbinfo[i]->fix.ywrapstep	= 0;
+        	g_fbi.fbinfo[i]->fix.accel	    = FB_ACCEL_NONE;
+            g_fbi.fbinfo[i]->fix.line_length = g_fbi.fbinfo[i]->var.xres_virtual * 4;
+            g_fbi.fbinfo[i]->fix.smem_len = g_fbi.fbinfo[i]->fix.line_length * g_fbi.fbinfo[i]->var.yres_virtual * 2;
+            g_fbi.fbinfo[i]->screen_base = 0x0;
+            g_fbi.fbinfo[i]->fix.smem_start = 0x0;
+
+        	register_framebuffer(g_fbi.fbinfo[i]);
+        }
+
+        parser_disp_init_para(&(g_fbi.disp_init));
+    }
+
+
+    if(g_fbi.disp_init.b_init)
+    {
+        __u32 sel = 0;
+
+        for(sel = 0; sel<2; sel++)
+        {
+            if(((sel==0) && (g_fbi.disp_init.disp_mode!=DISP_INIT_MODE_SCREEN1)) ||
+                ((sel==1) && (g_fbi.disp_init.disp_mode!=DISP_INIT_MODE_SCREEN0)))
+            {
+                if(g_fbi.disp_init.output_type[sel] == DISP_OUTPUT_TYPE_HDMI)
+                {
+                    need_open_hdmi = 1;
+                }
+            }
+        }
+    }
+
+    if(need_open_hdmi == 1 && from == 0)//it is called from lcd driver, but hdmi need to be opened
+    {
+        return 0;
+    }
+    else if(need_open_hdmi == 0 && from == 1)//it is called from hdmi driver, but hdmi need not be opened
+    {
+        return 0;
+    }
+
+    if(g_fbi.disp_init.b_init)
+    {
+        __u32 fb_num = 0, sel = 0;
+
+        for(sel = 0; sel<2; sel++)
+        {
+            if(((sel==0) && (g_fbi.disp_init.disp_mode!=DISP_INIT_MODE_SCREEN1)) ||
+                ((sel==1) && (g_fbi.disp_init.disp_mode!=DISP_INIT_MODE_SCREEN0)))
+            {
+                if(g_fbi.disp_init.output_type[sel] == DISP_OUTPUT_TYPE_LCD)
+                {
+                    DRV_lcd_open(sel);
+                }
+                else if(g_fbi.disp_init.output_type[sel] == DISP_OUTPUT_TYPE_TV)
+                {
+                    BSP_disp_tv_set_mode(sel, g_fbi.disp_init.tv_mode[sel]);
+                    BSP_disp_tv_open(sel);
+                }
+                 else if(g_fbi.disp_init.output_type[sel] == DISP_OUTPUT_TYPE_HDMI)
+                {
+                    BSP_disp_hdmi_set_mode(sel, g_fbi.disp_init.tv_mode[sel]);
+                    BSP_disp_hdmi_open(sel);
+                }
+                 else if(g_fbi.disp_init.output_type[sel] == DISP_OUTPUT_TYPE_VGA)
+                {
+                    BSP_disp_vga_set_mode(sel, g_fbi.disp_init.vga_mode[sel]);
+                    BSP_disp_vga_open(sel);
+                }
+            }
+        }
+
+        fb_num = (g_fbi.disp_init.disp_mode==DISP_INIT_MODE_TWO_DIFF_SCREEN)?2:1;
+        for(i = 0; i<fb_num; i++)
+        {
+            __u32 screen_id = i;
+
+            disp_fb_to_var(g_fbi.disp_init.format[i], g_fbi.disp_init.seq[i], g_fbi.disp_init.br_swap[i], &(g_fbi.fbinfo[i]->var));
+
+            if(g_fbi.disp_init.disp_mode == DISP_INIT_MODE_SCREEN1)
+            {
+                screen_id = 1;
+            }
+            fb_para.buffer_num= g_fbi.disp_init.buffer_num[i];
+            fb_para.width = BSP_disp_get_screen_width(screen_id);
+            fb_para.height = BSP_disp_get_screen_height(screen_id);
+            fb_para.output_width = BSP_disp_get_screen_width(screen_id);
+            fb_para.output_height = BSP_disp_get_screen_height(screen_id);
+            fb_para.mode = (g_fbi.disp_init.scaler_mode[i]==0)?DISP_LAYER_WORK_MODE_NORMAL:DISP_LAYER_WORK_MODE_SCALER;
+            if(g_fbi.disp_init.disp_mode == DISP_INIT_MODE_SCREEN0)
+            {
+                fb_para.fb_mode = FB_MODE_SCREEN0;
+            }
+            else if(g_fbi.disp_init.disp_mode == DISP_INIT_MODE_SCREEN1)
+            {
+                fb_para.fb_mode = FB_MODE_SCREEN1;
+            }
+            else if(g_fbi.disp_init.disp_mode == DISP_INIT_MODE_TWO_DIFF_SCREEN)
+            {
+                if(i == 0)
+                {
+                    fb_para.fb_mode = FB_MODE_SCREEN0;
+                }
+                else
+                {
+                    fb_para.fb_mode = FB_MODE_SCREEN1;
+                }
+            }
+            else if(g_fbi.disp_init.disp_mode == DISP_INIT_MODE_TWO_SAME_SCREEN)
+            {
+                fb_para.fb_mode = FB_MODE_DUAL_SAME_SCREEN_TB;
+                fb_para.height *= 2;
+                fb_para.output_height *= 2;
+            }
+            else if(g_fbi.disp_init.disp_mode == DISP_INIT_MODE_TWO_DIFF_SCREEN_SAME_CONTENTS)
+            {
+                fb_para.fb_mode = FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS;
+                fb_para.output_width = BSP_disp_get_screen_width(fb_para.primary_screen_id);
+                fb_para.output_height = BSP_disp_get_screen_height(fb_para.primary_screen_id);
+                fb_para.aux_output_width = BSP_disp_get_screen_width(1 - fb_para.primary_screen_id);
+                fb_para.aux_output_height = BSP_disp_get_screen_height(1 - fb_para.primary_screen_id);
+            }
+            Display_Fb_Request(i, &fb_para);
+
+            fb_draw_colorbar((__u32)g_fbi.fbinfo[i]->screen_base, fb_para.width, fb_para.height*fb_para.buffer_num, &(g_fbi.fbinfo[i]->var));
+        }
+
+        if(g_fbi.disp_init.scaler_mode[0])
+        {
+            BSP_disp_print_reg(0, DISP_REG_SCALER0);
+        }
+        if(g_fbi.disp_init.scaler_mode[1])
+        {
+            BSP_disp_print_reg(0, DISP_REG_SCALER1);
+        }
+    	if(g_fbi.disp_init.disp_mode != DISP_INIT_MODE_SCREEN1)
+    	{
+            BSP_disp_print_reg(0, DISP_REG_IMAGE0);
+            BSP_disp_print_reg(0, DISP_REG_LCDC0);
+            if((g_fbi.disp_init.output_type[0] == DISP_OUTPUT_TYPE_TV) || (g_fbi.disp_init.output_type[0] == DISP_OUTPUT_TYPE_VGA))
+            {
+                BSP_disp_print_reg(0, DISP_REG_TVEC0);
+            }
+        }
+        if(g_fbi.disp_init.disp_mode != DISP_INIT_MODE_SCREEN0)
+        {
+    	    BSP_disp_print_reg(0, DISP_REG_IMAGE1);
+    	    BSP_disp_print_reg(0, DISP_REG_LCDC1);
+    	    if((g_fbi.disp_init.output_type[1] == DISP_OUTPUT_TYPE_TV) || (g_fbi.disp_init.output_type[1] == DISP_OUTPUT_TYPE_VGA))
+            {
+                BSP_disp_print_reg(0, DISP_REG_TVEC1);
+            }
+        }
+        BSP_disp_print_reg(0, DISP_REG_CCMU);
+        BSP_disp_print_reg(0, DISP_REG_PWM);
+        BSP_disp_print_reg(0, DISP_REG_PIOC);
+    }
+
+	return 0;
+}
+
+__s32 Fb_Exit(void)
+{
+	__u8 fb_id=0;
+
+	for(fb_id=0; fb_id<FB_MAX; fb_id++)
+	{
+		if(g_fbi.fbinfo[fb_id] != NULL)
+		{
+			Display_Fb_Release(FBIDTOHAND(fb_id));
+		}
+	}
+
+	for(fb_id=0; fb_id<8; fb_id++)
+	{
+    	unregister_framebuffer(g_fbi.fbinfo[fb_id]);
+    	framebuffer_release(g_fbi.fbinfo[fb_id]);
+    	g_fbi.fbinfo[fb_id] = NULL;
+	}
+
+	return 0;
+}
+
+EXPORT_SYMBOL(Fb_Init);
+
diff --git a/drivers/video/sun4i/disp/drv_disp_i.h b/drivers/video/sun4i/disp/drv_disp_i.h
new file mode 100644
index 0000000..6817db5
--- /dev/null
+++ b/drivers/video/sun4i/disp/drv_disp_i.h
@@ -0,0 +1,43 @@
+#ifndef __DRV_DISP_I_H__
+#define __DRV_DISP_I_H__
+
+#include <linux/drv_display.h>
+#include "de_bsp/bsp_display.h"
+
+
+typedef enum
+{
+   DIS_SUCCESS=0,
+   DIS_FAIL=-1,
+   DIS_PARA_FAILED=-2,
+   DIS_PRIO_ERROR=-3,
+   DIS_OBJ_NOT_INITED=-4,
+   DIS_NOT_SUPPORT=-5,
+   DIS_NO_RES=-6,
+   DIS_OBJ_COLLISION=-7,
+   DIS_DEV_NOT_INITED=-8,
+   DIS_DEV_SRAM_COLLISION=-9,
+   DIS_TASK_ERROR = -10,
+   DIS_PRIO_COLLSION = -11
+}__disp_return_value;
+
+#define HANDTOID(handle)  ((handle) - 100)
+#define IDTOHAND(ID)  ((ID) + 100)
+
+
+#define DISP_IO_NUM     8
+#define DISP_IO_SCALER0 0
+#define DISP_IO_SCALER1 1
+#define DISP_IO_IMAGE0  2
+#define DISP_IO_IMAGE1  3
+#define DISP_IO_LCDC0   4
+#define DISP_IO_LCDC1   5
+#define DISP_IO_TVEC0    6
+#define DISP_IO_TVEC1    7
+
+#define sys_get_hvalue(n)   (*((volatile __u16 *)(n)))         /* half word input */
+#define sys_put_hvalue(n,c) (*((volatile __u16 *)(n)) = (c))   /* half word output */
+#define sys_get_wvalue(n)   (*((volatile __u32 *)(n)))          /* word input */
+#define sys_put_wvalue(n,c) (*((volatile __u32 *)(n))  = (c))   /* word output */
+
+#endif
diff --git a/drivers/video/sun4i/disp/list.txt b/drivers/video/sun4i/disp/list.txt
new file mode 100644
index 0000000..d0b53c5
--- /dev/null
+++ b/drivers/video/sun4i/disp/list.txt
@@ -0,0 +1,22238 @@
+
+========================================================================
+
+** ELF Header Information
+
+    File Name: disp.ko
+
+    Machine class: ELFCLASS32 (32-bit)
+    Data encoding: ELFDATA2LSB (Little endian)
+    Header version: EV_CURRENT (Current version)
+    Operating System ABI: none
+    ABI Version: 0
+    File Type: ET_REL (Relocatable object) (1)
+    Machine: EM_ARM (ARM)
+
+    Entry offset (in SHF_ENTRYSECT section): 0x00000000
+    Flags: None (0x05000000)
+
+    ABI conformance : ABI for the ARM Architecture v2.0
+
+    Header size: 52 bytes (0x34)
+    Program header entry size: 0 bytes (0x0)
+    Section header entry size: 40 bytes (0x28)
+
+    Program header entries: 0
+    Section header entries: 40
+
+    Program header offset: 0 (0x00000000)
+    Section header offset: 2283436 (0x0022d7ac)
+
+    Section header string table index: 37
+
+========================================================================
+
+** Section #1 '.text' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
+    Size   : 81320 bytes (alignment 4)
+
+    DRV_Hdmi_open
+    $a
+        0x00000000:    e1a0c00d    ....    MOV      r12,r13
+        0x00000004:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000008:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000000c:    e3a00000    ....    MOV      r0,#0
+        0x00000010:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DRV_Hdmi_close
+        0x00000014:    e1a0c00d    ....    MOV      r12,r13
+        0x00000018:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000001c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000020:    e3a00000    ....    MOV      r0,#0
+        0x00000024:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DRV_hdmi_set_mode
+        0x00000028:    e1a0c00d    ....    MOV      r12,r13
+        0x0000002c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000030:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000034:    e3a00000    ....    MOV      r0,#0
+        0x00000038:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DRV_hdmi_mode_support
+        0x0000003c:    e1a0c00d    ....    MOV      r12,r13
+        0x00000040:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000044:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000048:    e3a00000    ....    MOV      r0,#0
+        0x0000004c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DRV_hdmi_get_HPD_status
+        0x00000050:    e1a0c00d    ....    MOV      r12,r13
+        0x00000054:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000058:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000005c:    e3a00000    ....    MOV      r0,#0
+        0x00000060:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    disp_remove
+        0x00000064:    e1a0c00d    ....    MOV      r12,r13
+        0x00000068:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000006c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000070:    e2806008    .`..    ADD      r6,r0,#8
+        0x00000074:    e1a00006    ....    MOV      r0,r6
+        0x00000078:    ebfffffe    ....    BL       dev_get_drvdata  ;
+        0x0000007c:    e1a05000    .P..    MOV      r5,r0
+        0x00000080:    e59f003c    <...    LDR      r0,[pc,#60]   ; [[Section 10] = 0xc4] = 0
+        0x00000084:    e1a04005    .@..    MOV      r4,r5
+        0x00000088:    ebfffffe    ....    BL       printk  ;
+        0x0000008c:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x00000090:    ebfffffe    ....    BL       __iounmap  ;
+        0x00000094:    e5940004    ....    LDR      r0,[r4,#4]
+        0x00000098:    ebfffffe    ....    BL       release_resource  ;
+        0x0000009c:    e5b40004    ....    LDR      r0,[r4,#4]!
+        0x000000a0:    ebfffffe    ....    BL       kfree  ;
+        0x000000a4:    e2853014    .0..    ADD      r3,r5,#0x14
+        0x000000a8:    e1540003    ..T.    CMP      r4,r3
+        0x000000ac:    1afffff6    ....    BNE      {pc} - 0x20  ; 0x8c
+        0x000000b0:    e1a00006    ....    MOV      r0,r6
+        0x000000b4:    e3a01000    ....    MOV      r1,#0
+        0x000000b8:    ebfffffe    ....    BL       dev_set_drvdata  ;
+        0x000000bc:    e3a00000    ....    MOV      r0,#0
+        0x000000c0:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000000c4:    00000000    ....    DCD    0 ; [Section 10]
+    DRV_DISP_Exit
+    $a
+        0x000000c8:    e1a0c00d    ....    MOV      r12,r13
+        0x000000cc:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000000d0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000000d4:    e59f4024    $@..    LDR      r4,[pc,#36]   ; [[Section 17] = 0x100] = 0
+        0x000000d8:    ebfffffe    ....    BL       Fb_Exit  ; 0x28bc Section #1
+        0x000000dc:    ebfffffe    ....    BL       BSP_disp_close  ; 0xc730 Section #1
+        0x000000e0:    e5940018    ....    LDR      r0,[r4,#0x18]
+        0x000000e4:    ebfffffe    ....    BL       BSP_disp_exit  ; 0xc7ec Section #1
+        0x000000e8:    e594001c    ....    LDR      r0,[r4,#0x1c]
+        0x000000ec:    ebfffffe    ....    BL       kfree  ;
+        0x000000f0:    e5940020     ...    LDR      r0,[r4,#0x20]
+        0x000000f4:    ebfffffe    ....    BL       kfree  ;
+        0x000000f8:    e3a00000    ....    MOV      r0,#0
+        0x000000fc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00000100:    00000000    ....    DCD    0 ; [Section 17]
+    DRV_DISP_Init
+    $a
+        0x00000104:    e1a0c00d    ....    MOV      r12,r13
+        0x00000108:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000010c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000110:    e24dd054    T.M.    SUB      r13,r13,#0x54
+        0x00000114:    e59f9164    d...    LDR      r9,[pc,#356]  ; [[Section 17] = 0x280] = 0
+        0x00000118:    e3a01030    0...    MOV      r1,#0x30
+        0x0000011c:    e59f8160    `...    LDR      r8,[pc,#352]  ; [malloc_sizes = 0x284] = 0
+        0x00000120:    e3a0a000    ....    MOV      r10,#0
+        0x00000124:    e289000c    ....    ADD      r0,r9,#0xc
+        0x00000128:    e50ba048    H...    STR      r10,[r11,#-0x48]
+        0x0000012c:    e5993068    h0..    LDR      r3,[r9,#0x68]
+        0x00000130:    e599206c    l ..    LDR      r2,[r9,#0x6c]
+        0x00000134:    e599c060    `...    LDR      r12,[r9,#0x60]
+        0x00000138:    e50b307c    |0..    STR      r3,[r11,#-0x7c]
+        0x0000013c:    e5993080    .0..    LDR      r3,[r9,#0x80]
+        0x00000140:    e599e064    d...    LDR      r14,[r9,#0x64]
+        0x00000144:    e5994070    p@..    LDR      r4,[r9,#0x70]
+        0x00000148:    e50b3054    T0..    STR      r3,[r11,#-0x54]
+        0x0000014c:    e5993084    .0..    LDR      r3,[r9,#0x84]
+        0x00000150:    e5995074    tP..    LDR      r5,[r9,#0x74]
+        0x00000154:    e5996078    x`..    LDR      r6,[r9,#0x78]
+        0x00000158:    e50b3058    X0..    STR      r3,[r11,#-0x58]
+        0x0000015c:    e5993088    .0..    LDR      r3,[r9,#0x88]
+        0x00000160:    e599707c    |p..    LDR      r7,[r9,#0x7c]
+        0x00000164:    e50b2078    x ..    STR      r2,[r11,#-0x78]
+        0x00000168:    e50b305c    \0..    STR      r3,[r11,#-0x5c]
+        0x0000016c:    e59f3114    .1..    LDR      r3,[pc,#276]  ; [DRV_scaler_begin = 0x288] = 0
+        0x00000170:    e50bc074    t...    STR      r12,[r11,#-0x74]
+        0x00000174:    e50be070    p...    STR      r14,[r11,#-0x70]
+        0x00000178:    e50b3050    P0..    STR      r3,[r11,#-0x50]
+        0x0000017c:    e59f3108    .1..    LDR      r3,[pc,#264]  ; [DRV_scaler_finish = 0x28c] = 0
+        0x00000180:    e50b406c    l@..    STR      r4,[r11,#-0x6c]
+        0x00000184:    e50b5068    hP..    STR      r5,[r11,#-0x68]
+        0x00000188:    e50b304c    L0..    STR      r3,[r11,#-0x4c]
+        0x0000018c:    e59f30fc    .0..    LDR      r3,[pc,#252]  ; [DRV_hdmi_set_mode = 0x290] = 0
+        0x00000190:    e50b6064    d`..    STR      r6,[r11,#-0x64]
+        0x00000194:    e50b7060    `p..    STR      r7,[r11,#-0x60]
+        0x00000198:    e50b3044    D0..    STR      r3,[r11,#-0x44]
+        0x0000019c:    e59f30f0    .0..    LDR      r3,[pc,#240]  ; [DRV_Hdmi_open = 0x294] = 0
+        0x000001a0:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x000001a4:    e59f30ec    .0..    LDR      r3,[pc,#236]  ; [DRV_Hdmi_close = 0x298] = 0
+        0x000001a8:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x000001ac:    e59f30e8    .0..    LDR      r3,[pc,#232]  ; [DRV_hdmi_mode_support = 0x29c] = 0
+        0x000001b0:    e50b3038    80..    STR      r3,[r11,#-0x38]
+        0x000001b4:    e59f30e4    .0..    LDR      r3,[pc,#228]  ; [DRV_hdmi_get_HPD_status = 0x2a0] = 0
+        0x000001b8:    e50b3034    40..    STR      r3,[r11,#-0x34]
+        0x000001bc:    e59f30e0    .0..    LDR      r3,[pc,#224]  ; [DRV_disp_int_process = 0x2a4] = 0
+        0x000001c0:    e50b3030    00..    STR      r3,[r11,#-0x30]
+        0x000001c4:    ebfffffe    ....    BL       __memzero  ;
+        0x000001c8:    e5980004    ....    LDR      r0,[r8,#4]
+        0x000001cc:    e30810d0    ....    MOV      r1,#0x80d0
+        0x000001d0:    ebfffffe    ....    BL       kmem_cache_alloc  ;
+        0x000001d4:    e150000a    ..P.    CMP      r0,r10
+        0x000001d8:    e1a04000    .@..    MOV      r4,r0
+        0x000001dc:    e589001c    ....    STR      r0,[r9,#0x1c]
+        0x000001e0:    059f00c0    ....    LDREQ    r0,[pc,#192]  ; [([Section 10] + 140) = 0x2a8]  = 0x8c
+        0x000001e4:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0x224
+        0x000001e8:    e1a0100a    ....    MOV      r1,r10
+        0x000001ec:    e3a0200c    . ..    MOV      r2,#0xc
+        0x000001f0:    ebfffffe    ....    BL       memset  ;
+        0x000001f4:    e2843004    .0..    ADD      r3,r4,#4
+        0x000001f8:    e584a000    ....    STR      r10,[r4,#0]
+        0x000001fc:    e30810d0    ....    MOV      r1,#0x80d0
+        0x00000200:    e5843008    .0..    STR      r3,[r4,#8]
+        0x00000204:    e5843004    .0..    STR      r3,[r4,#4]
+        0x00000208:    e5980004    ....    LDR      r0,[r8,#4]
+        0x0000020c:    ebfffffe    ....    BL       kmem_cache_alloc  ;
+        0x00000210:    e3500000    ..P.    CMP      r0,#0
+        0x00000214:    e1a04000    .@..    MOV      r4,r0
+        0x00000218:    e5890020     ...    STR      r0,[r9,#0x20]
+        0x0000021c:    1a000003    ....    BNE      {pc} + 0x14  ; 0x230
+        0x00000220:    e59f0084    ....    LDR      r0,[pc,#132]  ; [([Section 10] + 177) = 0x2ac]  = 0xb1
+        0x00000224:    ebfffffe    ....    BL       printk  ;
+        0x00000228:    e3e00000    ....    MVN      r0,#0
+        0x0000022c:    ea000011    ....    B        {pc} + 0x4c  ; 0x278
+        0x00000230:    e3a0200c    . ..    MOV      r2,#0xc
+        0x00000234:    e1a0100a    ....    MOV      r1,r10
+        0x00000238:    ebfffffe    ....    BL       memset  ;
+        0x0000023c:    e2843004    .0..    ADD      r3,r4,#4
+        0x00000240:    e2890028    (...    ADD      r0,r9,#0x28
+        0x00000244:    e5843008    .0..    STR      r3,[r4,#8]
+        0x00000248:    e5843004    .0..    STR      r3,[r4,#4]
+        0x0000024c:    e2891e21    !...    ADD      r1,r9,#0x210
+        0x00000250:    e584a000    ....    STR      r10,[r4,#0]
+        0x00000254:    ebfffffe    ....    BL       __init_waitqueue_head  ;
+        0x00000258:    e2891e21    !...    ADD      r1,r9,#0x210
+        0x0000025c:    e2890030    0...    ADD      r0,r9,#0x30
+        0x00000260:    ebfffffe    ....    BL       __init_waitqueue_head  ;
+        0x00000264:    e24b007c    |.K.    SUB      r0,r11,#0x7c
+        0x00000268:    ebfffffe    ....    BL       BSP_disp_init  ; 0xc8c0 Section #1
+        0x0000026c:    ebfffffe    ....    BL       BSP_disp_open  ; 0xc71c Section #1
+        0x00000270:    ebfffffe    ....    BL       Fb_Init  ; 0x23ac Section #1
+        0x00000274:    e1a0000a    ....    MOV      r0,r10
+        0x00000278:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000027c:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00000280:    00000000    ....    DCD    0 ; [Section 17]
+        0x00000284:    00000000    ....    DCD    0 ; malloc_sizes
+        0x00000288:    00000000    ....    DCD    0 ; DRV_scaler_begin
+        0x0000028c:    00000000    ....    DCD    0 ; DRV_scaler_finish
+        0x00000290:    00000000    ....    DCD    0 ; DRV_hdmi_set_mode
+        0x00000294:    00000000    ....    DCD    0 ; DRV_Hdmi_open
+        0x00000298:    00000000    ....    DCD    0 ; DRV_Hdmi_close
+        0x0000029c:    00000000    ....    DCD    0 ; DRV_hdmi_mode_support
+        0x000002a0:    00000000    ....    DCD    0 ; DRV_hdmi_get_HPD_status
+        0x000002a4:    00000000    ....    DCD    0 ; DRV_disp_int_process
+        0x000002a8:    0000008c    ....    DCD    140 ; [Section 10]
+        0x000002ac:    000000b1    ....    DCD    177 ; [Section 10]
+    DRV_scaler_finish
+    $a
+        0x000002b0:    e1a0c00d    ....    MOV      r12,r13
+        0x000002b4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000002b8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000002bc:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [[Section 17] = 0x2d0] = 0
+        0x000002c0:    e0833100    .1..    ADD      r3,r3,r0,LSL #2
+        0x000002c4:    e593001c    ....    LDR      r0,[r3,#0x1c]
+        0x000002c8:    ebfffffe    ....    BL       up  ;
+        0x000002cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000002d0:    00000000    ....    DCD    0 ; [Section 17]
+    DRV_scaler_begin
+    $a
+        0x000002d4:    e1a0c00d    ....    MOV      r12,r13
+        0x000002d8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000002dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000002e0:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [[Section 17] = 0x2f8] = 0
+        0x000002e4:    e0833100    .1..    ADD      r3,r3,r0,LSL #2
+        0x000002e8:    e593001c    ....    LDR      r0,[r3,#0x1c]
+        0x000002ec:    ebfffffe    ....    BL       down  ;
+        0x000002f0:    e3a00000    ....    MOV      r0,#0
+        0x000002f4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000002f8:    00000000    ....    DCD    0 ; [Section 17]
+    DRV_lcd_close
+    $a
+        0x000002fc:    e1a0c00d    ....    MOV      r12,r13
+        0x00000300:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00000304:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000308:    e59f30a8    .0..    LDR      r3,[pc,#168]  ; [([Section 17] + 36) = 0x3b8]  = 0x24
+        0x0000030c:    e1a08000    ....    MOV      r8,r0
+        0x00000310:    e0803003    .0..    ADD      r3,r0,r3
+        0x00000314:    e1d330d2    .0..    LDRSB    r3,[r3,#2]
+        0x00000318:    e3530001    ..S.    CMP      r3,#1
+        0x0000031c:    1a000023    #...    BNE      {pc} + 0x94  ; 0x3b0
+        0x00000320:    ebfffffe    ....    BL       BSP_disp_lcd_close_befor  ; 0xf6b4 Section #1
+        0x00000324:    e1a00008    ....    MOV      r0,r8
+        0x00000328:    e1a0300d    .0..    MOV      r3,r13
+        0x0000032c:    e3c3ad7f    ....    BIC      r10,r3,#0x1fc0
+        0x00000330:    ebfffffe    ....    BL       BSP_disp_lcd_get_close_flow  ; 0xf704 Section #1
+        0x00000334:    e3a06000    .`..    MOV      r6,#0
+        0x00000338:    e3caa03f    ?...    BIC      r10,r10,#0x3f
+        0x0000033c:    e1a05006    .P..    MOV      r5,r6
+        0x00000340:    e1a07000    .p..    MOV      r7,r0
+        0x00000344:    ea00000e    ....    B        {pc} + 0x40  ; 0x384
+        0x00000348:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x0000034c:    e3a00064    d...    MOV      r0,#0x64
+        0x00000350:    e0000390    ....    MUL      r0,r0,r3
+        0x00000354:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x00000358:    e1a04000    .@..    MOV      r4,r0
+        0x0000035c:    e1a00008    ....    MOV      r0,r8
+        0x00000360:    e1a0e00f    ....    MOV      r14,pc
+        0x00000364:    e797f005    ....    LDR      pc,[r7,r5]
+        0x00000368:    e59a200c    . ..    LDR      r2,[r10,#0xc]
+        0x0000036c:    e3a03001    .0..    MOV      r3,#1
+        0x00000370:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00000374:    e1a00004    ....    MOV      r0,r4
+        0x00000378:    e0866003    .`..    ADD      r6,r6,r3
+        0x0000037c:    ebfffffe    ....    BL       schedule_timeout  ;
+        0x00000380:    e2855008    .P..    ADD      r5,r5,#8
+        0x00000384:    e5973028    (0..    LDR      r3,[r7,#0x28]
+        0x00000388:    e0872005    . ..    ADD      r2,r7,r5
+        0x0000038c:    e3a01ffa    ....    MOV      r1,#0x3e8
+        0x00000390:    e1560003    ..V.    CMP      r6,r3
+        0x00000394:    3affffeb    ...:    BCC      {pc} - 0x4c  ; 0x348
+        0x00000398:    e1a00008    ....    MOV      r0,r8
+        0x0000039c:    ebfffffe    ....    BL       BSP_disp_lcd_close_after  ; 0xf954 Section #1
+        0x000003a0:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 36) = 0x3b8]  = 0x24
+        0x000003a4:    e3a02000    . ..    MOV      r2,#0
+        0x000003a8:    e0883003    .0..    ADD      r3,r8,r3
+        0x000003ac:    e5c32002    . ..    STRB     r2,[r3,#2]
+        0x000003b0:    e3a00000    ....    MOV      r0,#0
+        0x000003b4:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x000003b8:    00000024    $...    DCD    36 ; [Section 17]
+    disp_suspend
+    $a
+        0x000003bc:    e1a0c00d    ....    MOV      r12,r13
+        0x000003c0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000003c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000003c8:    e59f00c0    ....    LDR      r0,[pc,#192]  ; [([Section 10] + 535) = 0x490]  = 0x217
+        0x000003cc:    ebfffffe    ....    BL       printk  ;
+        0x000003d0:    e3a00000    ....    MOV      r0,#0
+        0x000003d4:    ebfffffe    ....    BL       BSP_disp_get_output_type  ; 0xf604 Section #1
+        0x000003d8:    e59f30b4    .0..    LDR      r3,[pc,#180]  ; [[Section 17] = 0x494] = 0
+        0x000003dc:    e3500001    ..P.    CMP      r0,#1
+        0x000003e0:    e5830210    ....    STR      r0,[r3,#0x210]
+        0x000003e4:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0x424
+        0x000003e8:    e3500002    ..P.    CMP      r0,#2
+        0x000003ec:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x418
+        0x000003f0:    e3500008    ..P.    CMP      r0,#8
+        0x000003f4:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x40c
+        0x000003f8:    e3500004    ..P.    CMP      r0,#4
+        0x000003fc:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x42c
+        0x00000400:    e3a00000    ....    MOV      r0,#0
+        0x00000404:    ebfffffe    ....    BL       BSP_disp_hdmi_close  ; 0xcde4 Section #1
+        0x00000408:    ea000007    ....    B        {pc} + 0x24  ; 0x42c
+        0x0000040c:    e3a00000    ....    MOV      r0,#0
+        0x00000410:    ebfffffe    ....    BL       BSP_disp_vga_close  ; 0x13148 Section #1
+        0x00000414:    ea000004    ....    B        {pc} + 0x18  ; 0x42c
+        0x00000418:    e3a00000    ....    MOV      r0,#0
+        0x0000041c:    ebfffffe    ....    BL       BSP_disp_tv_close  ; 0x12c88 Section #1
+        0x00000420:    ea000001    ....    B        {pc} + 0xc  ; 0x42c
+        0x00000424:    e3a00000    ....    MOV      r0,#0
+        0x00000428:    ebfffffe    ....    BL       DRV_lcd_close  ; 0x2fc Section #1
+        0x0000042c:    e3a00001    ....    MOV      r0,#1
+        0x00000430:    ebfffffe    ....    BL       BSP_disp_get_output_type  ; 0xf604 Section #1
+        0x00000434:    e59f3058    X0..    LDR      r3,[pc,#88]   ; [[Section 17] = 0x494] = 0
+        0x00000438:    e3500001    ..P.    CMP      r0,#1
+        0x0000043c:    e5830214    ....    STR      r0,[r3,#0x214]
+        0x00000440:    1a000001    ....    BNE      {pc} + 0xc  ; 0x44c
+        0x00000444:    ebfffffe    ....    BL       DRV_lcd_close  ; 0x2fc Section #1
+        0x00000448:    ea00000d    ....    B        {pc} + 0x3c  ; 0x484
+        0x0000044c:    e3500002    ..P.    CMP      r0,#2
+        0x00000450:    1a000002    ....    BNE      {pc} + 0x10  ; 0x460
+        0x00000454:    e3a00001    ....    MOV      r0,#1
+        0x00000458:    ebfffffe    ....    BL       BSP_disp_tv_close  ; 0x12c88 Section #1
+        0x0000045c:    ea000008    ....    B        {pc} + 0x28  ; 0x484
+        0x00000460:    e3500008    ..P.    CMP      r0,#8
+        0x00000464:    1a000002    ....    BNE      {pc} + 0x10  ; 0x474
+        0x00000468:    e3a00001    ....    MOV      r0,#1
+        0x0000046c:    ebfffffe    ....    BL       BSP_disp_vga_close  ; 0x13148 Section #1
+        0x00000470:    ea000003    ....    B        {pc} + 0x14  ; 0x484
+        0x00000474:    e3500004    ..P.    CMP      r0,#4
+        0x00000478:    1a000001    ....    BNE      {pc} + 0xc  ; 0x484
+        0x0000047c:    e3a00001    ....    MOV      r0,#1
+        0x00000480:    ebfffffe    ....    BL       BSP_disp_hdmi_close  ; 0xcde4 Section #1
+        0x00000484:    ebfffffe    ....    BL       BSP_disp_clk_off  ; 0xa970 Section #1
+        0x00000488:    e3a00000    ....    MOV      r0,#0
+        0x0000048c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00000490:    00000217    ....    DCD    535 ; [Section 10]
+        0x00000494:    00000000    ....    DCD    0 ; [Section 17]
+    DRV_lcd_open
+    $a
+        0x00000498:    e1a0c00d    ....    MOV      r12,r13
+        0x0000049c:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x000004a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000004a4:    e59f30a8    .0..    LDR      r3,[pc,#168]  ; [([Section 17] + 36) = 0x554]  = 0x24
+        0x000004a8:    e1a08000    ....    MOV      r8,r0
+        0x000004ac:    e0803003    .0..    ADD      r3,r0,r3
+        0x000004b0:    e1d330d2    .0..    LDRSB    r3,[r3,#2]
+        0x000004b4:    e3530000    ..S.    CMP      r3,#0
+        0x000004b8:    1a000023    #...    BNE      {pc} + 0x94  ; 0x54c
+        0x000004bc:    e1a07003    .p..    MOV      r7,r3
+        0x000004c0:    ebfffffe    ....    BL       BSP_disp_lcd_open_before  ; 0xf9b0 Section #1
+        0x000004c4:    e1a00008    ....    MOV      r0,r8
+        0x000004c8:    e1a0300d    .0..    MOV      r3,r13
+        0x000004cc:    e3c3ad7f    ....    BIC      r10,r3,#0x1fc0
+        0x000004d0:    ebfffffe    ....    BL       BSP_disp_lcd_get_open_flow  ; 0xf694 Section #1
+        0x000004d4:    e3caa03f    ?...    BIC      r10,r10,#0x3f
+        0x000004d8:    e1a05007    .P..    MOV      r5,r7
+        0x000004dc:    e1a06000    .`..    MOV      r6,r0
+        0x000004e0:    ea00000e    ....    B        {pc} + 0x40  ; 0x520
+        0x000004e4:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000004e8:    e3a00064    d...    MOV      r0,#0x64
+        0x000004ec:    e0000390    ....    MUL      r0,r0,r3
+        0x000004f0:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x000004f4:    e1a04000    .@..    MOV      r4,r0
+        0x000004f8:    e1a00008    ....    MOV      r0,r8
+        0x000004fc:    e1a0e00f    ....    MOV      r14,pc
+        0x00000500:    e796f005    ....    LDR      pc,[r6,r5]
+        0x00000504:    e59a200c    . ..    LDR      r2,[r10,#0xc]
+        0x00000508:    e3a03001    .0..    MOV      r3,#1
+        0x0000050c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00000510:    e1a00004    ....    MOV      r0,r4
+        0x00000514:    e0877003    .p..    ADD      r7,r7,r3
+        0x00000518:    ebfffffe    ....    BL       schedule_timeout  ;
+        0x0000051c:    e2855008    .P..    ADD      r5,r5,#8
+        0x00000520:    e5963028    (0..    LDR      r3,[r6,#0x28]
+        0x00000524:    e0862005    . ..    ADD      r2,r6,r5
+        0x00000528:    e3a01ffa    ....    MOV      r1,#0x3e8
+        0x0000052c:    e1570003    ..W.    CMP      r7,r3
+        0x00000530:    3affffeb    ...:    BCC      {pc} - 0x4c  ; 0x4e4
+        0x00000534:    e1a00008    ....    MOV      r0,r8
+        0x00000538:    ebfffffe    ....    BL       BSP_disp_lcd_open_after  ; 0xf654 Section #1
+        0x0000053c:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 36) = 0x554]  = 0x24
+        0x00000540:    e3a02001    . ..    MOV      r2,#1
+        0x00000544:    e0883003    .0..    ADD      r3,r8,r3
+        0x00000548:    e5c32002    . ..    STRB     r2,[r3,#2]
+        0x0000054c:    e3a00000    ....    MOV      r0,#0
+        0x00000550:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00000554:    00000024    $...    DCD    36 ; [Section 17]
+    disp_resume
+    $a
+        0x00000558:    e1a0c00d    ....    MOV      r12,r13
+        0x0000055c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000560:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000564:    e59f00b0    ....    LDR      r0,[pc,#176]  ; [([Section 10] + 554) = 0x61c]  = 0x22a
+        0x00000568:    ebfffffe    ....    BL       printk  ;
+        0x0000056c:    ebfffffe    ....    BL       BSP_disp_clk_on  ; 0xab80 Section #1
+        0x00000570:    e59f30a8    .0..    LDR      r3,[pc,#168]  ; [[Section 17] = 0x620] = 0
+        0x00000574:    e5933210    .2..    LDR      r3,[r3,#0x210]
+        0x00000578:    e3530001    ..S.    CMP      r3,#1
+        0x0000057c:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0x5bc
+        0x00000580:    e3530002    ..S.    CMP      r3,#2
+        0x00000584:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x5b0
+        0x00000588:    e3530008    ..S.    CMP      r3,#8
+        0x0000058c:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x5a4
+        0x00000590:    e3530004    ..S.    CMP      r3,#4
+        0x00000594:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x5c4
+        0x00000598:    e3a00000    ....    MOV      r0,#0
+        0x0000059c:    ebfffffe    ....    BL       BSP_disp_hdmi_open  ; 0xce7c Section #1
+        0x000005a0:    ea000007    ....    B        {pc} + 0x24  ; 0x5c4
+        0x000005a4:    e3a00000    ....    MOV      r0,#0
+        0x000005a8:    ebfffffe    ....    BL       BSP_disp_vga_open  ; 0x131e4 Section #1
+        0x000005ac:    ea000004    ....    B        {pc} + 0x18  ; 0x5c4
+        0x000005b0:    e3a00000    ....    MOV      r0,#0
+        0x000005b4:    ebfffffe    ....    BL       BSP_disp_tv_open  ; 0x12d2c Section #1
+        0x000005b8:    ea000001    ....    B        {pc} + 0xc  ; 0x5c4
+        0x000005bc:    e3a00000    ....    MOV      r0,#0
+        0x000005c0:    ebfffffe    ....    BL       DRV_lcd_open  ; 0x498 Section #1
+        0x000005c4:    e59f3054    T0..    LDR      r3,[pc,#84]   ; [[Section 17] = 0x620] = 0
+        0x000005c8:    e5930214    ....    LDR      r0,[r3,#0x214]
+        0x000005cc:    e3500001    ..P.    CMP      r0,#1
+        0x000005d0:    1a000001    ....    BNE      {pc} + 0xc  ; 0x5dc
+        0x000005d4:    ebfffffe    ....    BL       DRV_lcd_open  ; 0x498 Section #1
+        0x000005d8:    ea00000d    ....    B        {pc} + 0x3c  ; 0x614
+        0x000005dc:    e3500002    ..P.    CMP      r0,#2
+        0x000005e0:    1a000002    ....    BNE      {pc} + 0x10  ; 0x5f0
+        0x000005e4:    e3a00001    ....    MOV      r0,#1
+        0x000005e8:    ebfffffe    ....    BL       BSP_disp_tv_open  ; 0x12d2c Section #1
+        0x000005ec:    ea000008    ....    B        {pc} + 0x28  ; 0x614
+        0x000005f0:    e3500008    ..P.    CMP      r0,#8
+        0x000005f4:    1a000002    ....    BNE      {pc} + 0x10  ; 0x604
+        0x000005f8:    e3a00001    ....    MOV      r0,#1
+        0x000005fc:    ebfffffe    ....    BL       BSP_disp_vga_open  ; 0x131e4 Section #1
+        0x00000600:    ea000003    ....    B        {pc} + 0x14  ; 0x614
+        0x00000604:    e3500004    ..P.    CMP      r0,#4
+        0x00000608:    1a000001    ....    BNE      {pc} + 0xc  ; 0x614
+        0x0000060c:    e3a00001    ....    MOV      r0,#1
+        0x00000610:    ebfffffe    ....    BL       BSP_disp_hdmi_open  ; 0xce7c Section #1
+        0x00000614:    e3a00000    ....    MOV      r0,#0
+        0x00000618:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000061c:    0000022a    *...    DCD    554 ; [Section 10]
+        0x00000620:    00000000    ....    DCD    0 ; [Section 17]
+    DRV_disp_wait_cmd_finish
+    $a
+        0x00000624:    e1a0c00d    ....    MOV      r12,r13
+        0x00000628:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000062c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000630:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DRV_disp_int_process
+        0x00000634:    e1a0c00d    ....    MOV      r12,r13
+        0x00000638:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000063c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000640:    e3a00000    ....    MOV      r0,#0
+        0x00000644:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    disp_open
+        0x00000648:    e1a0c00d    ....    MOV      r12,r13
+        0x0000064c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000650:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000654:    e3a00000    ....    MOV      r0,#0
+        0x00000658:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    disp_release
+        0x0000065c:    e1a0c00d    ....    MOV      r12,r13
+        0x00000660:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000664:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000668:    e3a00000    ....    MOV      r0,#0
+        0x0000066c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    disp_read
+        0x00000670:    e1a0c00d    ....    MOV      r12,r13
+        0x00000674:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00000678:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000067c:    e3a00000    ....    MOV      r0,#0
+        0x00000680:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    disp_write
+        0x00000684:    e1a0c00d    ....    MOV      r12,r13
+        0x00000688:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000068c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000690:    e3a00000    ....    MOV      r0,#0
+        0x00000694:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    disp_mmap
+        0x00000698:    e1a0c00d    ....    MOV      r12,r13
+        0x0000069c:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x000006a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000006a4:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x000006a8:    e59f4040    @@..    LDR      r4,[pc,#64]   ; [([Section 17] + 536) = 0x6f0]  = 0x218
+        0x000006ac:    e1a02001    . ..    MOV      r2,r1
+        0x000006b0:    e5923008    .0..    LDR      r3,[r2,#8]
+        0x000006b4:    e1a00002    ....    MOV      r0,r2
+        0x000006b8:    e592e014    ....    LDR      r14,[r2,#0x14]
+        0x000006bc:    e3a0200c    . ..    MOV      r2,#0xc
+        0x000006c0:    e594c018    ....    LDR      r12,[r4,#0x18]
+        0x000006c4:    e5911004    ....    LDR      r1,[r1,#4]
+        0x000006c8:    e58de000    ....    STR      r14,[r13,#0]
+        0x000006cc:    e02c4c92    .L,.    MLA      r12,r2,r12,r4
+        0x000006d0:    e0613003    .0a.    RSB      r3,r1,r3
+        0x000006d4:    e59c2004    . ..    LDR      r2,[r12,#4]
+        0x000006d8:    e1a02622    "&..    LSR      r2,r2,#12
+        0x000006dc:    ebfffffe    ....    BL       remap_pfn_range  ;
+        0x000006e0:    e3500000    ..P.    CMP      r0,#0
+        0x000006e4:    13e0000a    ....    MVNNE    r0,#0xa
+        0x000006e8:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x000006ec:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x000006f0:    00000218    ....    DCD    536 ; [Section 17]
+    disp_mem_release
+    $a
+        0x000006f4:    e1a0c00d    ....    MOV      r12,r13
+        0x000006f8:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000006fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000700:    e3a0300c    .0..    MOV      r3,#0xc
+        0x00000704:    e59f2064    d ..    LDR      r2,[pc,#100]  ; [([Section 17] + 536) = 0x770]  = 0x218
+        0x00000708:    e0030093    ....    MUL      r3,r3,r0
+        0x0000070c:    e1a05000    .P..    MOV      r5,r0
+        0x00000710:    e0821003    ....    ADD      r1,r2,r3
+        0x00000714:    e7920003    ....    LDR      r0,[r2,r3]
+        0x00000718:    e5913008    .0..    LDR      r3,[r1,#8]
+        0x0000071c:    e3500000    ..P.    CMP      r0,#0
+        0x00000720:    03e00015    ....    MVNEQ    r0,#0x15
+        0x00000724:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x00000728:    e2833eff    .>..    ADD      r3,r3,#0xff0
+        0x0000072c:    e3e01000    ....    MVN      r1,#0
+        0x00000730:    e283300f    .0..    ADD      r3,r3,#0xf
+        0x00000734:    e3c33eff    .>..    BIC      r3,r3,#0xff0
+        0x00000738:    e3c3300f    .0..    BIC      r3,r3,#0xf
+        0x0000073c:    e0833001    .0..    ADD      r3,r3,r1
+        0x00000740:    e1a045a3    .E..    LSR      r4,r3,#11
+        0x00000744:    e1b040a4    .@..    LSRS     r4,r4,#1
+        0x00000748:    e2811001    ....    ADD      r1,r1,#1
+        0x0000074c:    1afffffc    ....    BNE      {pc} - 0x8  ; 0x744
+        0x00000750:    ebfffffe    ....    BL       free_pages  ;
+        0x00000754:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 17] + 536) = 0x770]  = 0x218
+        0x00000758:    e3a0300c    .0..    MOV      r3,#0xc
+        0x0000075c:    e1a01003    ....    MOV      r1,r3
+        0x00000760:    e0200593    .. .    MLA      r0,r3,r5,r0
+        0x00000764:    ebfffffe    ....    BL       __memzero  ;
+        0x00000768:    e1a00004    ....    MOV      r0,r4
+        0x0000076c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00000770:    00000218    ....    DCD    536 ; [Section 17]
+    disp_mem_request
+    $a
+        0x00000774:    e1a0c00d    ....    MOV      r12,r13
+        0x00000778:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000077c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000780:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x00000784:    e3a0300c    .0..    MOV      r3,#0xc
+        0x00000788:    e59f2100    .!..    LDR      r2,[pc,#256]  ; [([Section 17] + 536) = 0x890]  = 0x218
+        0x0000078c:    e0030093    ....    MUL      r3,r3,r0
+        0x00000790:    e1a06000    .`..    MOV      r6,r0
+        0x00000794:    e1a05001    .P..    MOV      r5,r1
+        0x00000798:    e0820003    ....    ADD      r0,r2,r3
+        0x0000079c:    e7923003    .0..    LDR      r3,[r2,r3]
+        0x000007a0:    e3530000    ..S.    CMP      r3,#0
+        0x000007a4:    13e00015    ....    MVNNE    r0,#0x15
+        0x000007a8:    1a000036    6...    BNE      {pc} + 0xe0  ; 0x888
+        0x000007ac:    e2813eff    .>..    ADD      r3,r1,#0xff0
+        0x000007b0:    e3e01000    ....    MVN      r1,#0
+        0x000007b4:    e283300f    .0..    ADD      r3,r3,#0xf
+        0x000007b8:    e5805008    .P..    STR      r5,[r0,#8]
+        0x000007bc:    e3c33eff    .>..    BIC      r3,r3,#0xff0
+        0x000007c0:    e3c3300f    .0..    BIC      r3,r3,#0xf
+        0x000007c4:    e0833001    .0..    ADD      r3,r3,r1
+        0x000007c8:    e1a045a3    .E..    LSR      r4,r3,#11
+        0x000007cc:    e1a03004    .0..    MOV      r3,r4
+        0x000007d0:    e1b030a3    .0..    LSRS     r3,r3,#1
+        0x000007d4:    e2811001    ....    ADD      r1,r1,#1
+        0x000007d8:    1afffffc    ....    BNE      {pc} - 0x8  ; 0x7d0
+        0x000007dc:    e3a000d0    ....    MOV      r0,#0xd0
+        0x000007e0:    e59f20ac    . ..    LDR      r2,[pc,#172]  ; [(contig_page_data + 2208) = 0x894]  = 0x8a0
+        0x000007e4:    ebfffffe    ....    BL       __alloc_pages_nodemask  ;
+        0x000007e8:    e2507000    .pP.    SUBS     r7,r0,#0
+        0x000007ec:    0a000022    "...    BEQ      {pc} + 0x90  ; 0x87c
+        0x000007f0:    ebfffffe    ....    BL       page_address  ;
+        0x000007f4:    e3a0300c    .0..    MOV      r3,#0xc
+        0x000007f8:    e0030693    ....    MUL      r3,r3,r6
+        0x000007fc:    e59f208c    . ..    LDR      r2,[pc,#140]  ; [([Section 17] + 536) = 0x890]  = 0x218
+        0x00000800:    e082c003    ....    ADD      r12,r2,r3
+        0x00000804:    e3500000    ..P.    CMP      r0,#0
+        0x00000808:    e7820003    ....    STR      r0,[r2,r3]
+        0x0000080c:    1a000009    ....    BNE      {pc} + 0x2c  ; 0x838
+        0x00000810:    e3e01000    ....    MVN      r1,#0
+        0x00000814:    e1b040a4    .@..    LSRS     r4,r4,#1
+        0x00000818:    e2811001    ....    ADD      r1,r1,#1
+        0x0000081c:    1afffffc    ....    BNE      {pc} - 0x8  ; 0x814
+        0x00000820:    e1a00007    ....    MOV      r0,r7
+        0x00000824:    ebfffffe    ....    BL       free_pages  ;
+        0x00000828:    e3a01038    8...    MOV      r1,#0x38
+        0x0000082c:    e59f0064    d...    LDR      r0,[pc,#100]  ; [([Section 10] + 572) = 0x898]  = 0x23c
+        0x00000830:    ebfffffe    ....    BL       printk  ;
+        0x00000834:    ea000012    ....    B        {pc} + 0x50  ; 0x884
+        0x00000838:    e3550000    ..U.    CMP      r5,#0
+        0x0000083c:    e58c0004    ....    STR      r0,[r12,#4]
+        0x00000840:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x84c
+        0x00000844:    e1a01005    ....    MOV      r1,r5
+        0x00000848:    ebfffffe    ....    BL       __memzero  ;
+        0x0000084c:    e3a0200c    . ..    MOV      r2,#0xc
+        0x00000850:    e59f3038    80..    LDR      r3,[pc,#56]   ; [([Section 17] + 536) = 0x890]  = 0x218
+        0x00000854:    e0020692    ....    MUL      r2,r2,r6
+        0x00000858:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x0000085c:    e1a01006    ....    MOV      r1,r6
+        0x00000860:    e59f0034    4...    LDR      r0,[pc,#52]   ; [([Section 10] + 603) = 0x89c]  = 0x25b
+        0x00000864:    e083c002    ....    ADD      r12,r3,r2
+        0x00000868:    e7933002    .0..    LDR      r3,[r3,r2]
+        0x0000086c:    e59c2004    . ..    LDR      r2,[r12,#4]
+        0x00000870:    ebfffffe    ....    BL       printk  ;
+        0x00000874:    e3a00000    ....    MOV      r0,#0
+        0x00000878:    ea000002    ....    B        {pc} + 0x10  ; 0x888
+        0x0000087c:    e59f001c    ....    LDR      r0,[pc,#28]   ; [([Section 10] + 649) = 0x8a0]  = 0x289
+        0x00000880:    ebfffffe    ....    BL       printk  ;
+        0x00000884:    e3e0000b    ....    MVN      r0,#0xb
+        0x00000888:    e24bd01c    ..K.    SUB      r13,r11,#0x1c
+        0x0000088c:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00000890:    00000218    ....    DCD    536 ; [Section 17]
+        0x00000894:    000008a0    ....    DCD    2208 ; contig_page_data
+        0x00000898:    0000023c    <...    DCD    572 ; [Section 10]
+        0x0000089c:    0000025b    [...    DCD    603 ; [Section 10]
+        0x000008a0:    00000289    ....    DCD    649 ; [Section 10]
+    disp_ioctl
+    $a
+        0x000008a4:    e1a0c00d    ....    MOV      r12,r13
+        0x000008a8:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x000008ac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000008b0:    e24dd070    p.M.    SUB      r13,r13,#0x70
+        0x000008b4:    e1a0000d    ....    MOV      r0,r13
+        0x000008b8:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x000008bc:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000008c0:    e1a04001    .@..    MOV      r4,r1
+        0x000008c4:    e24b0034    4.K.    SUB      r0,r11,#0x34
+        0x000008c8:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000008cc:    e2921010    ....    ADDS     r1,r2,#0x10
+        0x000008d0:    30d11003    ...0    SBCSCC   r1,r1,r3
+        0x000008d4:    33a03000    .0.3    MOVCC    r3,#0
+        0x000008d8:    e3530000    ..S.    CMP      r3,#0
+        0x000008dc:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x8f8
+        0x000008e0:    e1a01002    ....    MOV      r1,r2
+        0x000008e4:    e3a02010    . ..    MOV      r2,#0x10
+        0x000008e8:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x000008ec:    e3500000    ..P.    CMP      r0,#0
+        0x000008f0:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x910
+        0x000008f4:    ea000001    ....    B        {pc} + 0xc  ; 0x900
+        0x000008f8:    e3a01010    ....    MOV      r1,#0x10
+        0x000008fc:    ebfffffe    ....    BL       __memzero  ;
+        0x00000900:    e59f0f48    H...    LDR      r0,[pc,#3912] ; [([Section 10] + 672) = 0x1850]  = 0x2a0
+        0x00000904:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00000908:    ebfffffe    ....    BL       printk  ;
+        0x0000090c:    ea000672    r...    B        {pc} + 0x19d0  ; 0x22dc
+        0x00000910:    e2442d0b    .-D.    SUB      r2,r4,#0x2c0
+        0x00000914:    e30032c3    .2..    MOV      r3,#0x2c3
+        0x00000918:    e1540003    ..T.    CMP      r4,r3
+        0x0000091c:    13520001    ..R.    CMPNE    r2,#1
+        0x00000920:    e24b6034    4`K.    SUB      r6,r11,#0x34
+        0x00000924:    e89601c0    ....    LDM      r6,{r6-r8}
+        0x00000928:    e51b5028    (P..    LDR      r5,[r11,#-0x28]
+        0x0000092c:    9a000009    ....    BLS      {pc} + 0x2c  ; 0x958
+        0x00000930:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00000934:    e1540003    ..T.    CMP      r4,r3
+        0x00000938:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x958
+        0x0000093c:    e3560001    ..V.    CMP      r6,#1
+        0x00000940:    9a000004    ....    BLS      {pc} + 0x18  ; 0x958
+        0x00000944:    e1a01006    ....    MOV      r1,r6
+        0x00000948:    e59f0f04    ....    LDR      r0,[pc,#3844] ; [([Section 10] + 693) = 0x1854]  = 0x2b5
+        0x0000094c:    ebfffffe    ....    BL       printk  ;
+        0x00000950:    e3e04000    .@..    MVN      r4,#0
+        0x00000954:    ea000660    `...    B        {pc} + 0x1988  ; 0x22dc
+        0x00000958:    e59f0ef8    ....    LDR      r0,[pc,#3832] ; [([Section 10] + 733) = 0x1858]  = 0x2dd
+        0x0000095c:    e1a01004    ....    MOV      r1,r4
+        0x00000960:    ebfffffe    ....    BL       printk  ;
+        0x00000964:    e3003101    .1..    MOV      r3,#0x101
+        0x00000968:    e1540003    ..T.    CMP      r4,r3
+        0x0000096c:    0a000418    ....    BEQ      {pc} + 0x1068  ; 0x19d4
+        0x00000970:    8a000091    ....    BHI      {pc} + 0x24c  ; 0xbbc
+        0x00000974:    e354004d    M.T.    CMP      r4,#0x4d
+        0x00000978:    0a0002ee    ....    BEQ      {pc} + 0xbc0  ; 0x1538
+        0x0000097c:    8a00004b    K...    BHI      {pc} + 0x134  ; 0xab0
+        0x00000980:    e3540018    ..T.    CMP      r4,#0x18
+        0x00000984:    0a00021b    ....    BEQ      {pc} + 0x874  ; 0x11f8
+        0x00000988:    8a000020     ...    BHI      {pc} + 0x88  ; 0xa10
+        0x0000098c:    e354000e    ..T.    CMP      r4,#0xe
+        0x00000990:    0a0001f9    ....    BEQ      {pc} + 0x7ec  ; 0x117c
+        0x00000994:    8a00000e    ....    BHI      {pc} + 0x40  ; 0x9d4
+        0x00000998:    e3540008    ..T.    CMP      r4,#8
+        0x0000099c:    0a0001cb    ....    BEQ      {pc} + 0x734  ; 0x10d0
+        0x000009a0:    8a000005    ....    BHI      {pc} + 0x1c  ; 0x9bc
+        0x000009a4:    e3540006    ..T.    CMP      r4,#6
+        0x000009a8:    0a000172    r...    BEQ      {pc} + 0x5d0  ; 0xf78
+        0x000009ac:    8a000195    ....    BHI      {pc} + 0x65c  ; 0x1008
+        0x000009b0:    e3540004    ..T.    CMP      r4,#4
+        0x000009b4:    1a000137    7...    BNE      {pc} + 0x4e4  ; 0xe98
+        0x000009b8:    ea000153    S...    B        {pc} + 0x554  ; 0xf0c
+        0x000009bc:    e354000a    ..T.    CMP      r4,#0xa
+        0x000009c0:    0a0001be    ....    BEQ      {pc} + 0x700  ; 0x10c0
+        0x000009c4:    3a0001c5    ...:    BCC      {pc} + 0x71c  ; 0x10e0
+        0x000009c8:    e354000d    ..T.    CMP      r4,#0xd
+        0x000009cc:    1a000131    1...    BNE      {pc} + 0x4cc  ; 0xe98
+        0x000009d0:    ea0001c6    ....    B        {pc} + 0x720  ; 0x10f0
+        0x000009d4:    e3540012    ..T.    CMP      r4,#0x12
+        0x000009d8:    0a0001ef    ....    BEQ      {pc} + 0x7c4  ; 0x119c
+        0x000009dc:    8a000003    ....    BHI      {pc} + 0x14  ; 0x9f0
+        0x000009e0:    e3540010    ..T.    CMP      r4,#0x10
+        0x000009e4:    0a0001a5    ....    BEQ      {pc} + 0x69c  ; 0x1080
+        0x000009e8:    8a0001ac    ....    BHI      {pc} + 0x6b8  ; 0x10a0
+        0x000009ec:    ea0001e6    ....    B        {pc} + 0x7a0  ; 0x118c
+        0x000009f0:    e3540014    ..T.    CMP      r4,#0x14
+        0x000009f4:    0a0001fa    ....    BEQ      {pc} + 0x7f0  ; 0x11e4
+        0x000009f8:    3a0001f0    ...:    BCC      {pc} + 0x7c8  ; 0x11c0
+        0x000009fc:    e3540016    ..T.    CMP      r4,#0x16
+        0x00000a00:    0a0001ea    ....    BEQ      {pc} + 0x7b0  ; 0x11b0
+        0x00000a04:    e3540017    ..T.    CMP      r4,#0x17
+        0x00000a08:    1a000122    "...    BNE      {pc} + 0x490  ; 0xe98
+        0x00000a0c:    ea0001f0    ....    B        {pc} + 0x7c8  ; 0x11d4
+        0x00000a10:    e3540044    D.T.    CMP      r4,#0x44
+        0x00000a14:    0a00021d    ....    BEQ      {pc} + 0x87c  ; 0x1290
+        0x00000a18:    8a000011    ....    BHI      {pc} + 0x4c  ; 0xa64
+        0x00000a1c:    e354003f    ?.T.    CMP      r4,#0x3f
+        0x00000a20:    0a00011e    ....    BEQ      {pc} + 0x480  ; 0xea0
+        0x00000a24:    8a000006    ....    BHI      {pc} + 0x20  ; 0xa44
+        0x00000a28:    e354001b    ..T.    CMP      r4,#0x1b
+        0x00000a2c:    0a0001fa    ....    BEQ      {pc} + 0x7f0  ; 0x121c
+        0x00000a30:    e354001c    ..T.    CMP      r4,#0x1c
+        0x00000a34:    0a0001fd    ....    BEQ      {pc} + 0x7fc  ; 0x1230
+        0x00000a38:    e354001a    ..T.    CMP      r4,#0x1a
+        0x00000a3c:    1a000115    ....    BNE      {pc} + 0x45c  ; 0xe98
+        0x00000a40:    ea0001f0    ....    B        {pc} + 0x7c8  ; 0x1208
+        0x00000a44:    e3540041    A.T.    CMP      r4,#0x41
+        0x00000a48:    0a000201    ....    BEQ      {pc} + 0x80c  ; 0x1254
+        0x00000a4c:    3a0001fb    ...:    BCC      {pc} + 0x7f4  ; 0x1240
+        0x00000a50:    e3540042    B.T.    CMP      r4,#0x42
+        0x00000a54:    0a000203    ....    BEQ      {pc} + 0x814  ; 0x1268
+        0x00000a58:    e3540043    C.T.    CMP      r4,#0x43
+        0x00000a5c:    1a00010d    ....    BNE      {pc} + 0x43c  ; 0xe98
+        0x00000a60:    ea000205    ....    B        {pc} + 0x81c  ; 0x127c
+        0x00000a64:    e3540048    H.T.    CMP      r4,#0x48
+        0x00000a68:    0a00024e    N...    BEQ      {pc} + 0x940  ; 0x13a8
+        0x00000a6c:    8a000007    ....    BHI      {pc} + 0x24  ; 0xa90
+        0x00000a70:    e3540046    F.T.    CMP      r4,#0x46
+        0x00000a74:    0a000228    (...    BEQ      {pc} + 0x8a8  ; 0x131c
+        0x00000a78:    e1a0200d    . ..    MOV      r2,r13
+        0x00000a7c:    e3c2ad7f    ....    BIC      r10,r2,#0x1fc0
+        0x00000a80:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00000a84:    e3caa03f    ?...    BIC      r10,r10,#0x3f
+        0x00000a88:    8a00023f    ?...    BHI      {pc} + 0x904  ; 0x138c
+        0x00000a8c:    ea00021b    ....    B        {pc} + 0x874  ; 0x1300
+        0x00000a90:    e354004a    J.T.    CMP      r4,#0x4a
+        0x00000a94:    0a000268    h...    BEQ      {pc} + 0x9a8  ; 0x143c
+        0x00000a98:    3a00025e    ^..:    BCC      {pc} + 0x980  ; 0x1418
+        0x00000a9c:    e354004b    K.T.    CMP      r4,#0x4b
+        0x00000aa0:    0a000281    ....    BEQ      {pc} + 0xa0c  ; 0x14ac
+        0x00000aa4:    e354004c    L.T.    CMP      r4,#0x4c
+        0x00000aa8:    1a0000fa    ....    BNE      {pc} + 0x3f0  ; 0xe98
+        0x00000aac:    ea00029b    ....    B        {pc} + 0xa74  ; 0x1520
+        0x00000ab0:    e354005e    ^.T.    CMP      r4,#0x5e
+        0x00000ab4:    0a000302    ....    BEQ      {pc} + 0xc10  ; 0x16c4
+        0x00000ab8:    8a00001c    ....    BHI      {pc} + 0x78  ; 0xb30
+        0x00000abc:    e3540055    U.T.    CMP      r4,#0x55
+        0x00000ac0:    0a0002ce    ....    BEQ      {pc} + 0xb40  ; 0x1600
+        0x00000ac4:    8a00000a    ....    BHI      {pc} + 0x30  ; 0xaf4
+        0x00000ac8:    e3540051    Q.T.    CMP      r4,#0x51
+        0x00000acc:    0a0002a5    ....    BEQ      {pc} + 0xa9c  ; 0x1568
+        0x00000ad0:    8a000003    ....    BHI      {pc} + 0x14  ; 0xae4
+        0x00000ad4:    e354004f    O.T.    CMP      r4,#0x4f
+        0x00000ad8:    0a00029c    ....    BEQ      {pc} + 0xa78  ; 0x1550
+        0x00000adc:    8a0002b3    ....    BHI      {pc} + 0xad4  ; 0x15b0
+        0x00000ae0:    ea0002b7    ....    B        {pc} + 0xae4  ; 0x15c4
+        0x00000ae4:    e3540053    S.T.    CMP      r4,#0x53
+        0x00000ae8:    0a0002ba    ....    BEQ      {pc} + 0xaf0  ; 0x15d8
+        0x00000aec:    8a0002a9    ....    BHI      {pc} + 0xaac  ; 0x1598
+        0x00000af0:    ea0002a2    ....    B        {pc} + 0xa90  ; 0x1580
+        0x00000af4:    e3540059    Y.T.    CMP      r4,#0x59
+        0x00000af8:    0a0002c5    ....    BEQ      {pc} + 0xb1c  ; 0x1614
+        0x00000afc:    8a000003    ....    BHI      {pc} + 0x14  ; 0xb10
+        0x00000b00:    e3540057    W.T.    CMP      r4,#0x57
+        0x00000b04:    0a000280    ....    BEQ      {pc} + 0xa08  ; 0x150c
+        0x00000b08:    8a0002b7    ....    BHI      {pc} + 0xae4  ; 0x15ec
+        0x00000b0c:    ea000279    y...    B        {pc} + 0x9ec  ; 0x14f8
+        0x00000b10:    e354005b    [.T.    CMP      r4,#0x5b
+        0x00000b14:    0a0002c9    ....    BEQ      {pc} + 0xb2c  ; 0x1640
+        0x00000b18:    3a0002c3    ...:    BCC      {pc} + 0xb14  ; 0x162c
+        0x00000b1c:    e354005c    \.T.    CMP      r4,#0x5c
+        0x00000b20:    0a0002d1    ....    BEQ      {pc} + 0xb4c  ; 0x166c
+        0x00000b24:    e354005d    ].T.    CMP      r4,#0x5d
+        0x00000b28:    1a0000da    ....    BNE      {pc} + 0x370  ; 0xe98
+        0x00000b2c:    ea0002d9    ....    B        {pc} + 0xb6c  ; 0x1698
+        0x00000b30:    e3540081    ..T.    CMP      r4,#0x81
+        0x00000b34:    0a000301    ....    BEQ      {pc} + 0xc0c  ; 0x1740
+        0x00000b38:    8a00000e    ....    BHI      {pc} + 0x40  ; 0xb78
+        0x00000b3c:    e3540062    b.T.    CMP      r4,#0x62
+        0x00000b40:    0a0002e5    ....    BEQ      {pc} + 0xb9c  ; 0x16dc
+        0x00000b44:    8a000003    ....    BHI      {pc} + 0x14  ; 0xb58
+        0x00000b48:    e3540060    `.T.    CMP      r4,#0x60
+        0x00000b4c:    0a0002cc    ....    BEQ      {pc} + 0xb38  ; 0x1684
+        0x00000b50:    8a0002d6    ....    BHI      {pc} + 0xb60  ; 0x16b0
+        0x00000b54:    ea0002bf    ....    B        {pc} + 0xb04  ; 0x1658
+        0x00000b58:    e3540064    d.T.    CMP      r4,#0x64
+        0x00000b5c:    0a0002e9    ....    BEQ      {pc} + 0xbac  ; 0x1708
+        0x00000b60:    3a0002e2    ...:    BCC      {pc} + 0xb90  ; 0x16f0
+        0x00000b64:    e3540065    e.T.    CMP      r4,#0x65
+        0x00000b68:    0a0002ec    ....    BEQ      {pc} + 0xbb8  ; 0x1720
+        0x00000b6c:    e3540080    ..T.    CMP      r4,#0x80
+        0x00000b70:    1a0000c8    ....    BNE      {pc} + 0x328  ; 0xe98
+        0x00000b74:    ea0002ee    ....    B        {pc} + 0xbc0  ; 0x1734
+        0x00000b78:    e35400c2    ..T.    CMP      r4,#0xc2
+        0x00000b7c:    0a000318    ....    BEQ      {pc} + 0xc68  ; 0x17e4
+        0x00000b80:    8a000005    ....    BHI      {pc} + 0x1c  ; 0xb9c
+        0x00000b84:    e35400c0    ..T.    CMP      r4,#0xc0
+        0x00000b88:    0a00030b    ....    BEQ      {pc} + 0xc34  ; 0x17bc
+        0x00000b8c:    8a00030f    ....    BHI      {pc} + 0xc44  ; 0x17d0
+        0x00000b90:    e3540082    ..T.    CMP      r4,#0x82
+        0x00000b94:    1a0000bf    ....    BNE      {pc} + 0x304  ; 0xe98
+        0x00000b98:    ea0002ec    ....    B        {pc} + 0xbb8  ; 0x1750
+        0x00000b9c:    e35400c4    ..T.    CMP      r4,#0xc4
+        0x00000ba0:    0a000347    G...    BEQ      {pc} + 0xd24  ; 0x18c4
+        0x00000ba4:    3a000334    4..:    BCC      {pc} + 0xcd8  ; 0x187c
+        0x00000ba8:    e35400c5    ..T.    CMP      r4,#0xc5
+        0x00000bac:    0a00035f    _...    BEQ      {pc} + 0xd84  ; 0x1930
+        0x00000bb0:    e3540c01    ..T.    CMP      r4,#0x100
+        0x00000bb4:    1a0000b7    ....    BNE      {pc} + 0x2e4  ; 0xe98
+        0x00000bb8:    ea000380    ....    B        {pc} + 0xe08  ; 0x19c0
+        0x00000bbc:    e3003242    B2..    MOV      r3,#0x242
+        0x00000bc0:    e1540003    ..T.    CMP      r4,r3
+        0x00000bc4:    0a000445    E...    BEQ      {pc} + 0x111c  ; 0x1ce0
+        0x00000bc8:    8a00005a    Z...    BHI      {pc} + 0x170  ; 0xd38
+        0x00000bcc:    e24330bb    .0C.    SUB      r3,r3,#0xbb
+        0x00000bd0:    e1540003    ..T.    CMP      r4,r3
+        0x00000bd4:    0a0003ef    ....    BEQ      {pc} + 0xfc4  ; 0x1b98
+        0x00000bd8:    8a000029    )...    BHI      {pc} + 0xac  ; 0xc84
+        0x00000bdc:    e2433041    A0C.    SUB      r3,r3,#0x41
+        0x00000be0:    e1540003    ..T.    CMP      r4,r3
+        0x00000be4:    0a0003c4    ....    BEQ      {pc} + 0xf18  ; 0x1afc
+        0x00000be8:    8a000011    ....    BHI      {pc} + 0x4c  ; 0xc34
+        0x00000bec:    e3540d05    ..T.    CMP      r4,#0x140
+        0x00000bf0:    0a0003b0    ....    BEQ      {pc} + 0xec8  ; 0x1ab8
+        0x00000bf4:    8a000006    ....    BHI      {pc} + 0x20  ; 0xc14
+        0x00000bf8:    e2433043    C0C.    SUB      r3,r3,#0x43
+        0x00000bfc:    e1540003    ..T.    CMP      r4,r3
+        0x00000c00:    0a000394    ....    BEQ      {pc} + 0xe58  ; 0x1a58
+        0x00000c04:    3a000377    w..:    BCC      {pc} + 0xde4  ; 0x19e8
+        0x00000c08:    e3540f41    A.T.    CMP      r4,#0x104
+        0x00000c0c:    1a0000a1    ....    BNE      {pc} + 0x28c  ; 0xe98
+        0x00000c10:    ea000395    ....    B        {pc} + 0xe5c  ; 0x1a6c
+        0x00000c14:    e3003142    B1..    MOV      r3,#0x142
+        0x00000c18:    e1540003    ..T.    CMP      r4,r3
+        0x00000c1c:    0a0003ad    ....    BEQ      {pc} + 0xebc  ; 0x1ad8
+        0x00000c20:    3a0003a8    ...:    BCC      {pc} + 0xea8  ; 0x1ac8
+        0x00000c24:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000c28:    e1540003    ..T.    CMP      r4,r3
+        0x00000c2c:    1a000099    ....    BNE      {pc} + 0x26c  ; 0xe98
+        0x00000c30:    ea0003ad    ....    B        {pc} + 0xebc  ; 0x1aec
+        0x00000c34:    e3003182    .1..    MOV      r3,#0x182
+        0x00000c38:    e1540003    ..T.    CMP      r4,r3
+        0x00000c3c:    0a0003c0    ....    BEQ      {pc} + 0xf08  ; 0x1b44
+        0x00000c40:    8a000005    ....    BHI      {pc} + 0x1c  ; 0xc5c
+        0x00000c44:    e3540d06    ..T.    CMP      r4,#0x180
+        0x00000c48:    0a0003b5    ....    BEQ      {pc} + 0xedc  ; 0x1b24
+        0x00000c4c:    8a0003b8    ....    BHI      {pc} + 0xee8  ; 0x1b34
+        0x00000c50:    e3540f53    S.T.    CMP      r4,#0x14c
+        0x00000c54:    1a00008f    ....    BNE      {pc} + 0x244  ; 0xe98
+        0x00000c58:    ea0003ac    ....    B        {pc} + 0xeb8  ; 0x1b10
+        0x00000c5c:    e3540f61    a.T.    CMP      r4,#0x184
+        0x00000c60:    0a0003c0    ....    BEQ      {pc} + 0xf08  ; 0x1b68
+        0x00000c64:    3a0003bb    ...:    BCC      {pc} + 0xef4  ; 0x1b58
+        0x00000c68:    e3003185    .1..    MOV      r3,#0x185
+        0x00000c6c:    e1540003    ..T.    CMP      r4,r3
+        0x00000c70:    0a0003c0    ....    BEQ      {pc} + 0xf08  ; 0x1b78
+        0x00000c74:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000c78:    e1540003    ..T.    CMP      r4,r3
+        0x00000c7c:    1a000085    ....    BNE      {pc} + 0x21c  ; 0xe98
+        0x00000c80:    ea0003c0    ....    B        {pc} + 0xf08  ; 0x1b88
+        0x00000c84:    e30031c5    .1..    MOV      r3,#0x1c5
+        0x00000c88:    e1540003    ..T.    CMP      r4,r3
+        0x00000c8c:    0a0003e7    ....    BEQ      {pc} + 0xfa4  ; 0x1c30
+        0x00000c90:    8a000014    ....    BHI      {pc} + 0x58  ; 0xce8
+        0x00000c94:    e3540d07    ..T.    CMP      r4,#0x1c0
+        0x00000c98:    0a0003d3    ....    BEQ      {pc} + 0xf54  ; 0x1bec
+        0x00000c9c:    8a000007    ....    BHI      {pc} + 0x24  ; 0xcc0
+        0x00000ca0:    e243303c    <0C.    SUB      r3,r3,#0x3c
+        0x00000ca4:    e1540003    ..T.    CMP      r4,r3
+        0x00000ca8:    0a0003c4    ....    BEQ      {pc} + 0xf18  ; 0x1bc0
+        0x00000cac:    3a0003be    ...:    BCC      {pc} + 0xf00  ; 0x1bac
+        0x00000cb0:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000cb4:    e1540003    ..T.    CMP      r4,r3
+        0x00000cb8:    1a000076    v...    BNE      {pc} + 0x1e0  ; 0xe98
+        0x00000cbc:    ea0003c5    ....    B        {pc} + 0xf1c  ; 0x1bd8
+        0x00000cc0:    e30031c2    .1..    MOV      r3,#0x1c2
+        0x00000cc4:    e1540003    ..T.    CMP      r4,r3
+        0x00000cc8:    0a0003cf    ....    BEQ      {pc} + 0xf44  ; 0x1c0c
+        0x00000ccc:    3a0003ca    ...:    BCC      {pc} + 0xf30  ; 0x1bfc
+        0x00000cd0:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000cd4:    e1540003    ..T.    CMP      r4,r3
+        0x00000cd8:    0a0003d0    ....    BEQ      {pc} + 0xf48  ; 0x1c20
+        0x00000cdc:    e3540f71    q.T.    CMP      r4,#0x1c4
+        0x00000ce0:    1a00006c    l...    BNE      {pc} + 0x1b8  ; 0xe98
+        0x00000ce4:    ea0003d5    ....    B        {pc} + 0xf5c  ; 0x1c40
+        0x00000ce8:    e3003202    .2..    MOV      r3,#0x202
+        0x00000cec:    e1540003    ..T.    CMP      r4,r3
+        0x00000cf0:    0a0003e4    ....    BEQ      {pc} + 0xf98  ; 0x1c88
+        0x00000cf4:    8a000006    ....    BHI      {pc} + 0x20  ; 0xd14
+        0x00000cf8:    e3540c02    ..T.    CMP      r4,#0x200
+        0x00000cfc:    0a0003d9    ....    BEQ      {pc} + 0xf6c  ; 0x1c68
+        0x00000d00:    8a0003dc    ....    BHI      {pc} + 0xf78  ; 0x1c78
+        0x00000d04:    e243303c    <0C.    SUB      r3,r3,#0x3c
+        0x00000d08:    e1540003    ..T.    CMP      r4,r3
+        0x00000d0c:    1a000061    a...    BNE      {pc} + 0x18c  ; 0xe98
+        0x00000d10:    ea0003cf    ....    B        {pc} + 0xf44  ; 0x1c54
+        0x00000d14:    e3540f81    ..T.    CMP      r4,#0x204
+        0x00000d18:    0a0003e3    ....    BEQ      {pc} + 0xf94  ; 0x1cac
+        0x00000d1c:    3a0003de    ...:    BCC      {pc} + 0xf80  ; 0x1c9c
+        0x00000d20:    e3540d09    ..T.    CMP      r4,#0x240
+        0x00000d24:    0a0003e5    ....    BEQ      {pc} + 0xf9c  ; 0x1cc0
+        0x00000d28:    e3003241    A2..    MOV      r3,#0x241
+        0x00000d2c:    e1540003    ..T.    CMP      r4,r3
+        0x00000d30:    1a000058    X...    BNE      {pc} + 0x168  ; 0xe98
+        0x00000d34:    ea0003e5    ....    B        {pc} + 0xf9c  ; 0x1cd0
+        0x00000d38:    e3540f95    ..T.    CMP      r4,#0x254
+        0x00000d3c:    0a0004e2    ....    BEQ      {pc} + 0x1390  ; 0x20cc
+        0x00000d40:    8a000029    )...    BHI      {pc} + 0xac  ; 0xdec
+        0x00000d44:    e300324b    K2..    MOV      r3,#0x24b
+        0x00000d48:    e1540003    ..T.    CMP      r4,r3
+        0x00000d4c:    0a0004a5    ....    BEQ      {pc} + 0x129c  ; 0x1fe8
+        0x00000d50:    8a000011    ....    BHI      {pc} + 0x4c  ; 0xd9c
+        0x00000d54:    e2433005    .0C.    SUB      r3,r3,#5
+        0x00000d58:    e1540003    ..T.    CMP      r4,r3
+        0x00000d5c:    0a0003fa    ....    BEQ      {pc} + 0xff0  ; 0x1d4c
+        0x00000d60:    8a000003    ....    BHI      {pc} + 0x14  ; 0xd74
+        0x00000d64:    e3540f91    ..T.    CMP      r4,#0x244
+        0x00000d68:    0a0003e6    ....    BEQ      {pc} + 0xfa0  ; 0x1d08
+        0x00000d6c:    8a0003ed    ....    BHI      {pc} + 0xfbc  ; 0x1d28
+        0x00000d70:    ea0003e0    ....    B        {pc} + 0xf88  ; 0x1cf8
+        0x00000d74:    e3540f92    ..T.    CMP      r4,#0x248
+        0x00000d78:    0a000429    )...    BEQ      {pc} + 0x10ac  ; 0x1e24
+        0x00000d7c:    3a000400    ...:    BCC      {pc} + 0x1008  ; 0x1d84
+        0x00000d80:    e3003249    I2..    MOV      r3,#0x249
+        0x00000d84:    e1540003    ..T.    CMP      r4,r3
+        0x00000d88:    0a000440    @...    BEQ      {pc} + 0x1108  ; 0x1e90
+        0x00000d8c:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000d90:    e1540003    ..T.    CMP      r4,r3
+        0x00000d94:    1a00003f    ?...    BNE      {pc} + 0x104  ; 0xe98
+        0x00000d98:    ea000441    A...    B        {pc} + 0x110c  ; 0x1ea4
+        0x00000d9c:    e300324f    O2..    MOV      r3,#0x24f
+        0x00000da0:    e1540003    ..T.    CMP      r4,r3
+        0x00000da4:    0a0004c3    ....    BEQ      {pc} + 0x1314  ; 0x20b8
+        0x00000da8:    8a000004    ....    BHI      {pc} + 0x18  ; 0xdc0
+        0x00000dac:    e2433002    .0C.    SUB      r3,r3,#2
+        0x00000db0:    e1540003    ..T.    CMP      r4,r3
+        0x00000db4:    0a0004a7    ....    BEQ      {pc} + 0x12a4  ; 0x2058
+        0x00000db8:    8a0004b9    ....    BHI      {pc} + 0x12ec  ; 0x20a4
+        0x00000dbc:    ea000454    T...    B        {pc} + 0x1158  ; 0x1f14
+        0x00000dc0:    e3003251    Q2..    MOV      r3,#0x251
+        0x00000dc4:    e1540003    ..T.    CMP      r4,r3
+        0x00000dc8:    0a0003e9    ....    BEQ      {pc} + 0xfac  ; 0x1d74
+        0x00000dcc:    3a0003e4    ...:    BCC      {pc} + 0xf98  ; 0x1d64
+        0x00000dd0:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000dd4:    e1540003    ..T.    CMP      r4,r3
+        0x00000dd8:    0a0003ce    ....    BEQ      {pc} + 0xf40  ; 0x1d18
+        0x00000ddc:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000de0:    e1540003    ..T.    CMP      r4,r3
+        0x00000de4:    1a00002b    +...    BNE      {pc} + 0xb4  ; 0xe98
+        0x00000de8:    ea0003d3    ....    B        {pc} + 0xf54  ; 0x1d3c
+        0x00000dec:    e300325d    ]2..    MOV      r3,#0x25d
+        0x00000df0:    e1540003    ..T.    CMP      r4,r3
+        0x00000df4:    0a0004e9    ....    BEQ      {pc} + 0x13ac  ; 0x21a0
+        0x00000df8:    8a000011    ....    BHI      {pc} + 0x4c  ; 0xe44
+        0x00000dfc:    e3540f96    ..T.    CMP      r4,#0x258
+        0x00000e00:    0a0004c5    ....    BEQ      {pc} + 0x131c  ; 0x211c
+        0x00000e04:    8a000004    ....    BHI      {pc} + 0x18  ; 0xe1c
+        0x00000e08:    e2433007    .0C.    SUB      r3,r3,#7
+        0x00000e0c:    e1540003    ..T.    CMP      r4,r3
+        0x00000e10:    0a0004b7    ....    BEQ      {pc} + 0x12e4  ; 0x20f4
+        0x00000e14:    8a0004bb    ....    BHI      {pc} + 0x12f4  ; 0x2108
+        0x00000e18:    ea0004b0    ....    B        {pc} + 0x12c8  ; 0x20e0
+        0x00000e1c:    e300325a    Z2..    MOV      r3,#0x25a
+        0x00000e20:    e1540003    ..T.    CMP      r4,r3
+        0x00000e24:    0a000440    @...    BEQ      {pc} + 0x1108  ; 0x1f2c
+        0x00000e28:    3a0003f9    ...:    BCC      {pc} + 0xfec  ; 0x1e14
+        0x00000e2c:    e2833001    .0..    ADD      r3,r3,#1
+        0x00000e30:    e1540003    ..T.    CMP      r4,r3
+        0x00000e34:    0a000458    X...    BEQ      {pc} + 0x1168  ; 0x1f9c
+        0x00000e38:    e3540f97    ..T.    CMP      r4,#0x25c
+        0x00000e3c:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xe98
+        0x00000e40:    ea0004ba    ....    B        {pc} + 0x12f0  ; 0x2130
+        0x00000e44:    e30032c1    .2..    MOV      r3,#0x2c1
+        0x00000e48:    e1540003    ..T.    CMP      r4,r3
+        0x00000e4c:    0a00050e    ....    BEQ      {pc} + 0x1440  ; 0x228c
+        0x00000e50:    8a000007    ....    BHI      {pc} + 0x24  ; 0xe74
+        0x00000e54:    e2433040    @0C.    SUB      r3,r3,#0x40
+        0x00000e58:    e1540003    ..T.    CMP      r4,r3
+        0x00000e5c:    0a000500    ....    BEQ      {pc} + 0x1408  ; 0x2264
+        0x00000e60:    e3540d0b    ..T.    CMP      r4,#0x2c0
+        0x00000e64:    0a000503    ....    BEQ      {pc} + 0x1414  ; 0x2278
+        0x00000e68:    e3540d0a    ..T.    CMP      r4,#0x280
+        0x00000e6c:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xe98
+        0x00000e70:    ea0004e0    ....    B        {pc} + 0x1388  ; 0x21f8
+        0x00000e74:    e30032c3    .2..    MOV      r3,#0x2c3
+        0x00000e78:    e1540003    ..T.    CMP      r4,r3
+        0x00000e7c:    0a000506    ....    BEQ      {pc} + 0x1420  ; 0x229c
+        0x00000e80:    3a000509    ...:    BCC      {pc} + 0x142c  ; 0x22ac
+        0x00000e84:    e3540fb1    ..T.    CMP      r4,#0x2c4
+        0x00000e88:    0a00050c    ....    BEQ      {pc} + 0x1438  ; 0x22c0
+        0x00000e8c:    e2833002    .0..    ADD      r3,r3,#2
+        0x00000e90:    e1540003    ..T.    CMP      r4,r3
+        0x00000e94:    0a00050c    ....    BEQ      {pc} + 0x1438  ; 0x22cc
+        0x00000e98:    e3a04000    .@..    MOV      r4,#0
+        0x00000e9c:    ea00050e    ....    B        {pc} + 0x1440  ; 0x22dc
+        0x00000ea0:    e1a0000d    ....    MOV      r0,r13
+        0x00000ea4:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00000ea8:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00000eac:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00000eb0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00000eb4:    e2972004    . ..    ADDS     r2,r7,#4
+        0x00000eb8:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00000ebc:    33a03000    .0.3    MOVCC    r3,#0
+        0x00000ec0:    e3530000    ..S.    CMP      r3,#0
+        0x00000ec4:    1a000006    ....    BNE      {pc} + 0x20  ; 0xee4
+        0x00000ec8:    e1a01007    ....    MOV      r1,r7
+        0x00000ecc:    e1a00005    ....    MOV      r0,r5
+        0x00000ed0:    e3a02004    . ..    MOV      r2,#4
+        0x00000ed4:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00000ed8:    e3500000    ..P.    CMP      r0,#0
+        0x00000edc:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xef8
+        0x00000ee0:    ea0004fc    ....    B        {pc} + 0x13f8  ; 0x22d8
+        0x00000ee4:    e1a00005    ....    MOV      r0,r5
+        0x00000ee8:    e3a01004    ....    MOV      r1,#4
+        0x00000eec:    ebfffffe    ....    BL       __memzero  ;
+        0x00000ef0:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00000ef4:    ea0004f8    ....    B        {pc} + 0x13e8  ; 0x22dc
+        0x00000ef8:    e1a00006    ....    MOV      r0,r6
+        0x00000efc:    e1a01005    ....    MOV      r1,r5
+        0x00000f00:    ebfffffe    ....    BL       BSP_disp_set_bk_color  ; 0xc460 Section #1
+        0x00000f04:    e1a04000    .@..    MOV      r4,r0
+        0x00000f08:    ea0004f3    ....    B        {pc} + 0x13d4  ; 0x22dc
+        0x00000f0c:    e1a0200d    . ..    MOV      r2,r13
+        0x00000f10:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00000f14:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00000f18:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00000f1c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00000f20:    e2972014    . ..    ADDS     r2,r7,#0x14
+        0x00000f24:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00000f28:    33a03000    .0.3    MOVCC    r3,#0
+        0x00000f2c:    e3530000    ..S.    CMP      r3,#0
+        0x00000f30:    1a000006    ....    BNE      {pc} + 0x20  ; 0xf50
+        0x00000f34:    e1a01007    ....    MOV      r1,r7
+        0x00000f38:    e1a00005    ....    MOV      r0,r5
+        0x00000f3c:    e3a02014    . ..    MOV      r2,#0x14
+        0x00000f40:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00000f44:    e3500000    ..P.    CMP      r0,#0
+        0x00000f48:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xf64
+        0x00000f4c:    ea0004e1    ....    B        {pc} + 0x138c  ; 0x22d8
+        0x00000f50:    e1a00005    ....    MOV      r0,r5
+        0x00000f54:    e3a01014    ....    MOV      r1,#0x14
+        0x00000f58:    ebfffffe    ....    BL       __memzero  ;
+        0x00000f5c:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00000f60:    ea0004dd    ....    B        {pc} + 0x137c  ; 0x22dc
+        0x00000f64:    e1a00006    ....    MOV      r0,r6
+        0x00000f68:    e1a01005    ....    MOV      r1,r5
+        0x00000f6c:    ebfffffe    ....    BL       BSP_disp_set_color_key  ; 0xc3c4 Section #1
+        0x00000f70:    e1a04000    .@..    MOV      r4,r0
+        0x00000f74:    ea0004d8    ....    B        {pc} + 0x1368  ; 0x22dc
+        0x00000f78:    e3570000    ..W.    CMP      r7,#0
+        0x00000f7c:    0a000001    ....    BEQ      {pc} + 0xc  ; 0xf88
+        0x00000f80:    e3550000    ..U.    CMP      r5,#0
+        0x00000f84:    ca000003    ....    BGT      {pc} + 0x14  ; 0xf98
+        0x00000f88:    e59f08cc    ....    LDR      r0,[pc,#2252] ; [([Section 10] + 752) = 0x185c]  = 0x2f0
+        0x00000f8c:    e3e04000    .@..    MVN      r4,#0
+        0x00000f90:    ebfffffe    ....    BL       printk  ;
+        0x00000f94:    ea0004d0    ....    B        {pc} + 0x1348  ; 0x22dc
+        0x00000f98:    e1a0000d    ....    MOV      r0,r13
+        0x00000f9c:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00000fa0:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00000fa4:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00000fa8:    e0972005    . ..    ADDS     r2,r7,r5
+        0x00000fac:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00000fb0:    33a03000    .0.3    MOVCC    r3,#0
+        0x00000fb4:    e3530000    ..S.    CMP      r3,#0
+        0x00000fb8:    1a000006    ....    BNE      {pc} + 0x20  ; 0xfd8
+        0x00000fbc:    e1a01007    ....    MOV      r1,r7
+        0x00000fc0:    e59f08ac    ....    LDR      r0,[pc,#2220] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00000fc4:    e1a02005    . ..    MOV      r2,r5
+        0x00000fc8:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00000fcc:    e3500000    ..P.    CMP      r0,#0
+        0x00000fd0:    1a0004c0    ....    BNE      {pc} + 0x1308  ; 0x22d8
+        0x00000fd4:    ea000004    ....    B        {pc} + 0x18  ; 0xfec
+        0x00000fd8:    e1a01005    ....    MOV      r1,r5
+        0x00000fdc:    e59f0890    ....    LDR      r0,[pc,#2192] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00000fe0:    ebfffffe    ....    BL       __memzero  ;
+        0x00000fe4:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00000fe8:    ea0004bb    ....    B        {pc} + 0x12f4  ; 0x22dc
+        0x00000fec:    e1a00006    ....    MOV      r0,r6
+        0x00000ff0:    e1a02008    . ..    MOV      r2,r8
+        0x00000ff4:    e1a03005    .0..    MOV      r3,r5
+        0x00000ff8:    e59f1874    t...    LDR      r1,[pc,#2164] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00000ffc:    ebfffffe    ....    BL       BSP_disp_set_palette_table  ; 0xc34c Section #1
+        0x00001000:    e1a04000    .@..    MOV      r4,r0
+        0x00001004:    ea0004b4    ....    B        {pc} + 0x12d8  ; 0x22dc
+        0x00001008:    e3570000    ..W.    CMP      r7,#0
+        0x0000100c:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x1018
+        0x00001010:    e3550000    ..U.    CMP      r5,#0
+        0x00001014:    ca000003    ....    BGT      {pc} + 0x14  ; 0x1028
+        0x00001018:    e59f0840    @...    LDR      r0,[pc,#2112] ; [([Section 10] + 809) = 0x1860]  = 0x329
+        0x0000101c:    e3e04000    .@..    MVN      r4,#0
+        0x00001020:    ebfffffe    ....    BL       printk  ;
+        0x00001024:    ea0004ac    ....    B        {pc} + 0x12b8  ; 0x22dc
+        0x00001028:    e1a02008    . ..    MOV      r2,r8
+        0x0000102c:    e1a03005    .0..    MOV      r3,r5
+        0x00001030:    e1a00006    ....    MOV      r0,r6
+        0x00001034:    e59f1838    8...    LDR      r1,[pc,#2104] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001038:    ebfffffe    ....    BL       BSP_disp_get_palette_table  ; 0xc30c Section #1
+        0x0000103c:    e1a0200d    . ..    MOV      r2,r13
+        0x00001040:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001044:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001048:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x0000104c:    e0972005    . ..    ADDS     r2,r7,r5
+        0x00001050:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001054:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001058:    e3530000    ..S.    CMP      r3,#0
+        0x0000105c:    e1a04000    .@..    MOV      r4,r0
+        0x00001060:    1a000004    ....    BNE      {pc} + 0x18  ; 0x1078
+        0x00001064:    e1a02005    . ..    MOV      r2,r5
+        0x00001068:    e1a00007    ....    MOV      r0,r7
+        0x0000106c:    e59f1800    ....    LDR      r1,[pc,#2048] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001070:    ebfffffe    ....    BL       __copy_to_user  ;
+        0x00001074:    e1a05000    .P..    MOV      r5,r0
+        0x00001078:    e3550000    ..U.    CMP      r5,#0
+        0x0000107c:    ea00045b    [...    B        {pc} + 0x1174  ; 0x21f0
+        0x00001080:    e1a00006    ....    MOV      r0,r6
+        0x00001084:    ebfffffe    ....    BL       BSP_disp_cmd_cache  ; 0xca34 Section #1
+        0x00001088:    e59f37d4    .7..    LDR      r3,[pc,#2004] ; [g_disp_drv = 0x1864] = 0
+        0x0000108c:    e3a02001    . ..    MOV      r2,#1
+        0x00001090:    e0833006    .0..    ADD      r3,r3,r6
+        0x00001094:    e5c32018    . ..    STRB     r2,[r3,#0x18]
+        0x00001098:    e1a04000    .@..    MOV      r4,r0
+        0x0000109c:    ea00048e    ....    B        {pc} + 0x1240  ; 0x22dc
+        0x000010a0:    e59f37bc    .7..    LDR      r3,[pc,#1980] ; [g_disp_drv = 0x1864] = 0
+        0x000010a4:    e3a02000    . ..    MOV      r2,#0
+        0x000010a8:    e1a00006    ....    MOV      r0,r6
+        0x000010ac:    e0833006    .0..    ADD      r3,r3,r6
+        0x000010b0:    e5c32018    . ..    STRB     r2,[r3,#0x18]
+        0x000010b4:    ebfffffe    ....    BL       BSP_disp_cmd_submit  ; 0xca5c Section #1
+        0x000010b8:    e1a04000    .@..    MOV      r4,r0
+        0x000010bc:    ea000486    ....    B        {pc} + 0x1220  ; 0x22dc
+        0x000010c0:    e1a00006    ....    MOV      r0,r6
+        0x000010c4:    ebfffffe    ....    BL       BSP_disp_get_output_type  ; 0xf604 Section #1
+        0x000010c8:    e1a04000    .@..    MOV      r4,r0
+        0x000010cc:    ea000482    ....    B        {pc} + 0x1210  ; 0x22dc
+        0x000010d0:    e1a00006    ....    MOV      r0,r6
+        0x000010d4:    ebfffffe    ....    BL       BSP_disp_get_screen_width  ; 0xf530 Section #1
+        0x000010d8:    e1a04000    .@..    MOV      r4,r0
+        0x000010dc:    ea00047e    ~...    B        {pc} + 0x1200  ; 0x22dc
+        0x000010e0:    e1a00006    ....    MOV      r0,r6
+        0x000010e4:    ebfffffe    ....    BL       BSP_disp_get_screen_height  ; 0xf598 Section #1
+        0x000010e8:    e1a04000    .@..    MOV      r4,r0
+        0x000010ec:    ea00047a    z...    B        {pc} + 0x11f0  ; 0x22dc
+        0x000010f0:    e3570000    ..W.    CMP      r7,#0
+        0x000010f4:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x1100
+        0x000010f8:    e3580000    ..X.    CMP      r8,#0
+        0x000010fc:    ca000003    ....    BGT      {pc} + 0x14  ; 0x1110
+        0x00001100:    e59f0760    `...    LDR      r0,[pc,#1888] ; [([Section 10] + 866) = 0x1868]  = 0x362
+        0x00001104:    e3e04000    .@..    MVN      r4,#0
+        0x00001108:    ebfffffe    ....    BL       printk  ;
+        0x0000110c:    ea000472    r...    B        {pc} + 0x11d0  ; 0x22dc
+        0x00001110:    e1a0000d    ....    MOV      r0,r13
+        0x00001114:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00001118:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x0000111c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001120:    e0972008    . ..    ADDS     r2,r7,r8
+        0x00001124:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001128:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000112c:    e3530000    ..S.    CMP      r3,#0
+        0x00001130:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1150
+        0x00001134:    e1a01007    ....    MOV      r1,r7
+        0x00001138:    e59f0734    4...    LDR      r0,[pc,#1844] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x0000113c:    e1a02008    . ..    MOV      r2,r8
+        0x00001140:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001144:    e3500000    ..P.    CMP      r0,#0
+        0x00001148:    1a000462    b...    BNE      {pc} + 0x1190  ; 0x22d8
+        0x0000114c:    ea000004    ....    B        {pc} + 0x18  ; 0x1164
+        0x00001150:    e1a01008    ....    MOV      r1,r8
+        0x00001154:    e59f0718    ....    LDR      r0,[pc,#1816] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001158:    ebfffffe    ....    BL       __memzero  ;
+        0x0000115c:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001160:    ea00045d    ]...    B        {pc} + 0x117c  ; 0x22dc
+        0x00001164:    e1a00006    ....    MOV      r0,r6
+        0x00001168:    e1a02008    . ..    MOV      r2,r8
+        0x0000116c:    e59f1700    ....    LDR      r1,[pc,#1792] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001170:    ebfffffe    ....    BL       BSP_disp_set_gamma_table  ; 0xf8ac Section #1
+        0x00001174:    e1a04000    .@..    MOV      r4,r0
+        0x00001178:    ea000457    W...    B        {pc} + 0x1164  ; 0x22dc
+        0x0000117c:    e1a00006    ....    MOV      r0,r6
+        0x00001180:    ebfffffe    ....    BL       BSP_disp_gamma_correction_enable  ; 0xf890 Section #1
+        0x00001184:    e1a04000    .@..    MOV      r4,r0
+        0x00001188:    ea000453    S...    B        {pc} + 0x1154  ; 0x22dc
+        0x0000118c:    e1a00006    ....    MOV      r0,r6
+        0x00001190:    ebfffffe    ....    BL       BSP_disp_gamma_correction_disable  ; 0xf874 Section #1
+        0x00001194:    e1a04000    .@..    MOV      r4,r0
+        0x00001198:    ea00044f    O...    B        {pc} + 0x1144  ; 0x22dc
+        0x0000119c:    e1a00006    ....    MOV      r0,r6
+        0x000011a0:    e1a01007    ....    MOV      r1,r7
+        0x000011a4:    ebfffffe    ....    BL       BSP_disp_set_bright  ; 0xc5c4 Section #1
+        0x000011a8:    e1a04000    .@..    MOV      r4,r0
+        0x000011ac:    ea00044a    J...    B        {pc} + 0x1130  ; 0x22dc
+        0x000011b0:    e1a00006    ....    MOV      r0,r6
+        0x000011b4:    ebfffffe    ....    BL       BSP_disp_get_bright  ; 0xc4b4 Section #1
+        0x000011b8:    e1a04000    .@..    MOV      r4,r0
+        0x000011bc:    ea000446    F...    B        {pc} + 0x1120  ; 0x22dc
+        0x000011c0:    e1a00006    ....    MOV      r0,r6
+        0x000011c4:    e1a01007    ....    MOV      r1,r7
+        0x000011c8:    ebfffffe    ....    BL       BSP_disp_set_contrast  ; 0xc57c Section #1
+        0x000011cc:    e1a04000    .@..    MOV      r4,r0
+        0x000011d0:    ea000441    A...    B        {pc} + 0x110c  ; 0x22dc
+        0x000011d4:    e1a00006    ....    MOV      r0,r6
+        0x000011d8:    ebfffffe    ....    BL       BSP_disp_get_contrast  ; 0xc4d4 Section #1
+        0x000011dc:    e1a04000    .@..    MOV      r4,r0
+        0x000011e0:    ea00043d    =...    B        {pc} + 0x10fc  ; 0x22dc
+        0x000011e4:    e1a00006    ....    MOV      r0,r6
+        0x000011e8:    e1a01007    ....    MOV      r1,r7
+        0x000011ec:    ebfffffe    ....    BL       BSP_disp_set_saturation  ; 0xc534 Section #1
+        0x000011f0:    e1a04000    .@..    MOV      r4,r0
+        0x000011f4:    ea000438    8...    B        {pc} + 0x10e8  ; 0x22dc
+        0x000011f8:    e1a00006    ....    MOV      r0,r6
+        0x000011fc:    ebfffffe    ....    BL       BSP_disp_get_saturation  ; 0xc4f4 Section #1
+        0x00001200:    e1a04000    .@..    MOV      r4,r0
+        0x00001204:    ea000434    4...    B        {pc} + 0x10d8  ; 0x22dc
+        0x00001208:    e1a00006    ....    MOV      r0,r6
+        0x0000120c:    e3a01001    ....    MOV      r1,#1
+        0x00001210:    ebfffffe    ....    BL       BSP_disp_enhance_enable  ; 0xc608 Section #1
+        0x00001214:    e1a04000    .@..    MOV      r4,r0
+        0x00001218:    ea00042f    /...    B        {pc} + 0x10c4  ; 0x22dc
+        0x0000121c:    e1a00006    ....    MOV      r0,r6
+        0x00001220:    e3a01000    ....    MOV      r1,#0
+        0x00001224:    ebfffffe    ....    BL       BSP_disp_enhance_enable  ; 0xc608 Section #1
+        0x00001228:    e1a04000    .@..    MOV      r4,r0
+        0x0000122c:    ea00042a    *...    B        {pc} + 0x10b0  ; 0x22dc
+        0x00001230:    e1a00006    ....    MOV      r0,r6
+        0x00001234:    ebfffffe    ....    BL       BSP_disp_get_enhance_enable  ; 0xc514 Section #1
+        0x00001238:    e1a04000    .@..    MOV      r4,r0
+        0x0000123c:    ea000426    &...    B        {pc} + 0x10a0  ; 0x22dc
+        0x00001240:    e1a00006    ....    MOV      r0,r6
+        0x00001244:    e1a01007    ....    MOV      r1,r7
+        0x00001248:    ebfffffe    ....    BL       BSP_disp_layer_request  ; 0xee78 Section #1
+        0x0000124c:    e1a04000    .@..    MOV      r4,r0
+        0x00001250:    ea000421    !...    B        {pc} + 0x108c  ; 0x22dc
+        0x00001254:    e1a00006    ....    MOV      r0,r6
+        0x00001258:    e1a01007    ....    MOV      r1,r7
+        0x0000125c:    ebfffffe    ....    BL       BSP_disp_layer_release  ; 0xecc0 Section #1
+        0x00001260:    e1a04000    .@..    MOV      r4,r0
+        0x00001264:    ea00041c    ....    B        {pc} + 0x1078  ; 0x22dc
+        0x00001268:    e1a00006    ....    MOV      r0,r6
+        0x0000126c:    e1a01007    ....    MOV      r1,r7
+        0x00001270:    ebfffffe    ....    BL       BSP_disp_layer_open  ; 0xec1c Section #1
+        0x00001274:    e1a04000    .@..    MOV      r4,r0
+        0x00001278:    ea000417    ....    B        {pc} + 0x1064  ; 0x22dc
+        0x0000127c:    e1a00006    ....    MOV      r0,r6
+        0x00001280:    e1a01007    ....    MOV      r1,r7
+        0x00001284:    ebfffffe    ....    BL       BSP_disp_layer_close  ; 0xeb78 Section #1
+        0x00001288:    e1a04000    .@..    MOV      r4,r0
+        0x0000128c:    ea000412    ....    B        {pc} + 0x1050  ; 0x22dc
+        0x00001290:    e1a0200d    . ..    MOV      r2,r13
+        0x00001294:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001298:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x0000129c:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x000012a0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000012a4:    e2982028    ( ..    ADDS     r2,r8,#0x28
+        0x000012a8:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x000012ac:    33a03000    .0.3    MOVCC    r3,#0
+        0x000012b0:    e3530000    ..S.    CMP      r3,#0
+        0x000012b4:    1a000006    ....    BNE      {pc} + 0x20  ; 0x12d4
+        0x000012b8:    e1a01008    ....    MOV      r1,r8
+        0x000012bc:    e1a00005    ....    MOV      r0,r5
+        0x000012c0:    e3a02028    ( ..    MOV      r2,#0x28
+        0x000012c4:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x000012c8:    e3500000    ..P.    CMP      r0,#0
+        0x000012cc:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x12e8
+        0x000012d0:    ea000400    ....    B        {pc} + 0x1008  ; 0x22d8
+        0x000012d4:    e1a00005    ....    MOV      r0,r5
+        0x000012d8:    e3a01028    (...    MOV      r1,#0x28
+        0x000012dc:    ebfffffe    ....    BL       __memzero  ;
+        0x000012e0:    e3e0400d    .@..    MVN      r4,#0xd
+        0x000012e4:    ea0003fc    ....    B        {pc} + 0xff8  ; 0x22dc
+        0x000012e8:    e1a00006    ....    MOV      r0,r6
+        0x000012ec:    e1a01007    ....    MOV      r1,r7
+        0x000012f0:    e1a02005    . ..    MOV      r2,r5
+        0x000012f4:    ebfffffe    ....    BL       BSP_disp_layer_set_framebuffer  ; 0xe954 Section #1
+        0x000012f8:    e1a04000    .@..    MOV      r4,r0
+        0x000012fc:    ea0003f6    ....    B        {pc} + 0xfe0  ; 0x22dc
+        0x00001300:    e1a00006    ....    MOV      r0,r6
+        0x00001304:    e1a01007    ....    MOV      r1,r7
+        0x00001308:    e1a02005    . ..    MOV      r2,r5
+        0x0000130c:    ebfffffe    ....    BL       BSP_disp_layer_get_framebuffer  ; 0xe7d0 Section #1
+        0x00001310:    e59a3008    .0..    LDR      r3,[r10,#8]
+        0x00001314:    e1a04000    .@..    MOV      r4,r0
+        0x00001318:    ea000358    X...    B        {pc} + 0xd68  ; 0x2080
+        0x0000131c:    e1a0000d    ....    MOV      r0,r13
+        0x00001320:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00001324:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001328:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x0000132c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001330:    e2982010    . ..    ADDS     r2,r8,#0x10
+        0x00001334:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001338:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000133c:    e3530000    ..S.    CMP      r3,#0
+        0x00001340:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1360
+        0x00001344:    e1a01008    ....    MOV      r1,r8
+        0x00001348:    e1a00005    ....    MOV      r0,r5
+        0x0000134c:    e3a02010    . ..    MOV      r2,#0x10
+        0x00001350:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001354:    e3500000    ..P.    CMP      r0,#0
+        0x00001358:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1374
+        0x0000135c:    ea0003dd    ....    B        {pc} + 0xf7c  ; 0x22d8
+        0x00001360:    e1a00005    ....    MOV      r0,r5
+        0x00001364:    e3a01010    ....    MOV      r1,#0x10
+        0x00001368:    ebfffffe    ....    BL       __memzero  ;
+        0x0000136c:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001370:    ea0003d9    ....    B        {pc} + 0xf6c  ; 0x22dc
+        0x00001374:    e1a00006    ....    MOV      r0,r6
+        0x00001378:    e1a01007    ....    MOV      r1,r7
+        0x0000137c:    e1a02005    . ..    MOV      r2,r5
+        0x00001380:    ebfffffe    ....    BL       BSP_disp_layer_set_src_window  ; 0xe5fc Section #1
+        0x00001384:    e1a04000    .@..    MOV      r4,r0
+        0x00001388:    ea0003d3    ....    B        {pc} + 0xf54  ; 0x22dc
+        0x0000138c:    e1a00006    ....    MOV      r0,r6
+        0x00001390:    e1a01007    ....    MOV      r1,r7
+        0x00001394:    e1a02005    . ..    MOV      r2,r5
+        0x00001398:    ebfffffe    ....    BL       BSP_disp_layer_get_src_window  ; 0xe530 Section #1
+        0x0000139c:    e59a3008    .0..    LDR      r3,[r10,#8]
+        0x000013a0:    e1a04000    .@..    MOV      r4,r0
+        0x000013a4:    ea000306    ....    B        {pc} + 0xc20  ; 0x1fc4
+        0x000013a8:    e1a0200d    . ..    MOV      r2,r13
+        0x000013ac:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x000013b0:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000013b4:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x000013b8:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000013bc:    e2982010    . ..    ADDS     r2,r8,#0x10
+        0x000013c0:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x000013c4:    33a03000    .0.3    MOVCC    r3,#0
+        0x000013c8:    e3530000    ..S.    CMP      r3,#0
+        0x000013cc:    1a000006    ....    BNE      {pc} + 0x20  ; 0x13ec
+        0x000013d0:    e1a01008    ....    MOV      r1,r8
+        0x000013d4:    e1a00005    ....    MOV      r0,r5
+        0x000013d8:    e3a02010    . ..    MOV      r2,#0x10
+        0x000013dc:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x000013e0:    e3500000    ..P.    CMP      r0,#0
+        0x000013e4:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1400
+        0x000013e8:    ea0003ba    ....    B        {pc} + 0xef0  ; 0x22d8
+        0x000013ec:    e1a00005    ....    MOV      r0,r5
+        0x000013f0:    e3a01010    ....    MOV      r1,#0x10
+        0x000013f4:    ebfffffe    ....    BL       __memzero  ;
+        0x000013f8:    e3e0400d    .@..    MVN      r4,#0xd
+        0x000013fc:    ea0003b6    ....    B        {pc} + 0xee0  ; 0x22dc
+        0x00001400:    e1a00006    ....    MOV      r0,r6
+        0x00001404:    e1a01007    ....    MOV      r1,r7
+        0x00001408:    e1a02005    . ..    MOV      r2,r5
+        0x0000140c:    ebfffffe    ....    BL       BSP_disp_layer_set_screen_window  ; 0xe34c Section #1
+        0x00001410:    e1a04000    .@..    MOV      r4,r0
+        0x00001414:    ea0003b0    ....    B        {pc} + 0xec8  ; 0x22dc
+        0x00001418:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x0000141c:    e1a00006    ....    MOV      r0,r6
+        0x00001420:    e1a01007    ....    MOV      r1,r7
+        0x00001424:    e1a02005    . ..    MOV      r2,r5
+        0x00001428:    ebfffffe    ....    BL       BSP_disp_layer_get_screen_window  ; 0xdae8 Section #1
+        0x0000142c:    e1a04000    .@..    MOV      r4,r0
+        0x00001430:    e1a0000d    ....    MOV      r0,r13
+        0x00001434:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00001438:    ea0002df    ....    B        {pc} + 0xb84  ; 0x1fbc
+        0x0000143c:    e1a0200d    . ..    MOV      r2,r13
+        0x00001440:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001444:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001448:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x0000144c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001450:    e2982054    T ..    ADDS     r2,r8,#0x54
+        0x00001454:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001458:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000145c:    e3530000    ..S.    CMP      r3,#0
+        0x00001460:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1480
+        0x00001464:    e1a01008    ....    MOV      r1,r8
+        0x00001468:    e1a00005    ....    MOV      r0,r5
+        0x0000146c:    e3a02054    T ..    MOV      r2,#0x54
+        0x00001470:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001474:    e3500000    ..P.    CMP      r0,#0
+        0x00001478:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1494
+        0x0000147c:    ea000395    ....    B        {pc} + 0xe5c  ; 0x22d8
+        0x00001480:    e1a00005    ....    MOV      r0,r5
+        0x00001484:    e3a01054    T...    MOV      r1,#0x54
+        0x00001488:    ebfffffe    ....    BL       __memzero  ;
+        0x0000148c:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001490:    ea000391    ....    B        {pc} + 0xe4c  ; 0x22dc
+        0x00001494:    e1a00006    ....    MOV      r0,r6
+        0x00001498:    e1a01007    ....    MOV      r1,r7
+        0x0000149c:    e1a02005    . ..    MOV      r2,r5
+        0x000014a0:    ebfffffe    ....    BL       BSP_disp_layer_set_para  ; 0xddcc Section #1
+        0x000014a4:    e1a04000    .@..    MOV      r4,r0
+        0x000014a8:    ea00038b    ....    B        {pc} + 0xe34  ; 0x22dc
+        0x000014ac:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x000014b0:    e1a01007    ....    MOV      r1,r7
+        0x000014b4:    e1a00006    ....    MOV      r0,r6
+        0x000014b8:    e1a02005    . ..    MOV      r2,r5
+        0x000014bc:    ebfffffe    ....    BL       BSP_disp_layer_get_para  ; 0xe874 Section #1
+        0x000014c0:    e1a04000    .@..    MOV      r4,r0
+        0x000014c4:    e1a0000d    ....    MOV      r0,r13
+        0x000014c8:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x000014cc:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000014d0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000014d4:    e2982054    T ..    ADDS     r2,r8,#0x54
+        0x000014d8:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x000014dc:    33a03000    .0.3    MOVCC    r3,#0
+        0x000014e0:    e3530000    ..S.    CMP      r3,#0
+        0x000014e4:    01a00008    ....    MOVEQ    r0,r8
+        0x000014e8:    01a01005    ....    MOVEQ    r1,r5
+        0x000014ec:    03a02054    T ..    MOVEQ    r2,#0x54
+        0x000014f0:    1a000378    x...    BNE      {pc} + 0xde8  ; 0x22d8
+        0x000014f4:    ea00033b    ;...    B        {pc} + 0xcf4  ; 0x21e8
+        0x000014f8:    e1a00006    ....    MOV      r0,r6
+        0x000014fc:    e1a01007    ....    MOV      r1,r7
+        0x00001500:    ebfffffe    ....    BL       BSP_disp_layer_set_top  ; 0xc154 Section #1
+        0x00001504:    e1a04000    .@..    MOV      r4,r0
+        0x00001508:    ea000373    s...    B        {pc} + 0xdd4  ; 0x22dc
+        0x0000150c:    e1a00006    ....    MOV      r0,r6
+        0x00001510:    e1a01007    ....    MOV      r1,r7
+        0x00001514:    ebfffffe    ....    BL       BSP_disp_layer_set_bottom  ; 0xbff8 Section #1
+        0x00001518:    e1a04000    .@..    MOV      r4,r0
+        0x0000151c:    ea00036e    n...    B        {pc} + 0xdc0  ; 0x22dc
+        0x00001520:    e1a00006    ....    MOV      r0,r6
+        0x00001524:    e1a01007    ....    MOV      r1,r7
+        0x00001528:    e3a02001    . ..    MOV      r2,#1
+        0x0000152c:    ebfffffe    ....    BL       BSP_disp_layer_alpha_enable  ; 0xbf20 Section #1
+        0x00001530:    e1a04000    .@..    MOV      r4,r0
+        0x00001534:    ea000368    h...    B        {pc} + 0xda8  ; 0x22dc
+        0x00001538:    e1a00006    ....    MOV      r0,r6
+        0x0000153c:    e1a01007    ....    MOV      r1,r7
+        0x00001540:    e3a02000    . ..    MOV      r2,#0
+        0x00001544:    ebfffffe    ....    BL       BSP_disp_layer_alpha_enable  ; 0xbf20 Section #1
+        0x00001548:    e1a04000    .@..    MOV      r4,r0
+        0x0000154c:    ea000362    b...    B        {pc} + 0xd90  ; 0x22dc
+        0x00001550:    e1a00006    ....    MOV      r0,r6
+        0x00001554:    e1a01007    ....    MOV      r1,r7
+        0x00001558:    e6ef2078    x ..    UXTB     r2,r8
+        0x0000155c:    ebfffffe    ....    BL       BSP_disp_layer_set_alpha_value  ; 0xbf8c Section #1
+        0x00001560:    e1a04000    .@..    MOV      r4,r0
+        0x00001564:    ea00035c    \...    B        {pc} + 0xd78  ; 0x22dc
+        0x00001568:    e1a00006    ....    MOV      r0,r6
+        0x0000156c:    e1a01007    ....    MOV      r1,r7
+        0x00001570:    e3a02001    . ..    MOV      r2,#1
+        0x00001574:    ebfffffe    ....    BL       BSP_disp_layer_colorkey_enable  ; 0xbe3c Section #1
+        0x00001578:    e1a04000    .@..    MOV      r4,r0
+        0x0000157c:    ea000356    V...    B        {pc} + 0xd60  ; 0x22dc
+        0x00001580:    e1a00006    ....    MOV      r0,r6
+        0x00001584:    e1a01007    ....    MOV      r1,r7
+        0x00001588:    e3a02000    . ..    MOV      r2,#0
+        0x0000158c:    ebfffffe    ....    BL       BSP_disp_layer_colorkey_enable  ; 0xbe3c Section #1
+        0x00001590:    e1a04000    .@..    MOV      r4,r0
+        0x00001594:    ea000350    P...    B        {pc} + 0xd48  ; 0x22dc
+        0x00001598:    e1a00006    ....    MOV      r0,r6
+        0x0000159c:    e1a01007    ....    MOV      r1,r7
+        0x000015a0:    e6ef2078    x ..    UXTB     r2,r8
+        0x000015a4:    ebfffffe    ....    BL       BSP_disp_layer_set_pipe  ; 0xbea8 Section #1
+        0x000015a8:    e1a04000    .@..    MOV      r4,r0
+        0x000015ac:    ea00034a    J...    B        {pc} + 0xd30  ; 0x22dc
+        0x000015b0:    e1a00006    ....    MOV      r0,r6
+        0x000015b4:    e1a01007    ....    MOV      r1,r7
+        0x000015b8:    ebfffffe    ....    BL       BSP_disp_layer_get_alpha_value  ; 0xbc84 Section #1
+        0x000015bc:    e1a04000    .@..    MOV      r4,r0
+        0x000015c0:    ea000345    E...    B        {pc} + 0xd1c  ; 0x22dc
+        0x000015c4:    e1a00006    ....    MOV      r0,r6
+        0x000015c8:    e1a01007    ....    MOV      r1,r7
+        0x000015cc:    ebfffffe    ....    BL       BSP_disp_layer_get_alpha_enable  ; 0xbcdc Section #1
+        0x000015d0:    e1a04000    .@..    MOV      r4,r0
+        0x000015d4:    ea000340    @...    B        {pc} + 0xd08  ; 0x22dc
+        0x000015d8:    e1a00006    ....    MOV      r0,r6
+        0x000015dc:    e1a01007    ....    MOV      r1,r7
+        0x000015e0:    ebfffffe    ....    BL       BSP_disp_layer_get_colorkey_enable  ; 0xbd8c Section #1
+        0x000015e4:    e1a04000    .@..    MOV      r4,r0
+        0x000015e8:    ea00033b    ;...    B        {pc} + 0xcf4  ; 0x22dc
+        0x000015ec:    e1a00006    ....    MOV      r0,r6
+        0x000015f0:    e1a01007    ....    MOV      r1,r7
+        0x000015f4:    ebfffffe    ....    BL       BSP_disp_layer_get_piro  ; 0xbde4 Section #1
+        0x000015f8:    e1a04000    .@..    MOV      r4,r0
+        0x000015fc:    ea000336    6...    B        {pc} + 0xce0  ; 0x22dc
+        0x00001600:    e1a00006    ....    MOV      r0,r6
+        0x00001604:    e1a01007    ....    MOV      r1,r7
+        0x00001608:    ebfffffe    ....    BL       BSP_disp_layer_get_pipe  ; 0xbd34 Section #1
+        0x0000160c:    e1a04000    .@..    MOV      r4,r0
+        0x00001610:    ea000331    1...    B        {pc} + 0xccc  ; 0x22dc
+        0x00001614:    e1a00006    ....    MOV      r0,r6
+        0x00001618:    e1a01007    ....    MOV      r1,r7
+        0x0000161c:    e1a02008    . ..    MOV      r2,r8
+        0x00001620:    ebfffffe    ....    BL       BSP_disp_layer_set_smooth  ; 0xdb8c Section #1
+        0x00001624:    e1a04000    .@..    MOV      r4,r0
+        0x00001628:    ea00032b    +...    B        {pc} + 0xcb4  ; 0x22dc
+        0x0000162c:    e1a00006    ....    MOV      r0,r6
+        0x00001630:    e1a01007    ....    MOV      r1,r7
+        0x00001634:    ebfffffe    ....    BL       BSP_disp_layer_get_smooth  ; 0xd740 Section #1
+        0x00001638:    e1a04000    .@..    MOV      r4,r0
+        0x0000163c:    ea000326    &...    B        {pc} + 0xca0  ; 0x22dc
+        0x00001640:    e1a00006    ....    MOV      r0,r6
+        0x00001644:    e1a01007    ....    MOV      r1,r7
+        0x00001648:    e1a02008    . ..    MOV      r2,r8
+        0x0000164c:    ebfffffe    ....    BL       BSP_disp_layer_set_bright  ; 0xd688 Section #1
+        0x00001650:    e1a04000    .@..    MOV      r4,r0
+        0x00001654:    ea000320     ...    B        {pc} + 0xc88  ; 0x22dc
+        0x00001658:    e1a00006    ....    MOV      r0,r6
+        0x0000165c:    e1a01007    ....    MOV      r1,r7
+        0x00001660:    ebfffffe    ....    BL       BSP_disp_layer_get_bright  ; 0xd120 Section #1
+        0x00001664:    e1a04000    .@..    MOV      r4,r0
+        0x00001668:    ea00031b    ....    B        {pc} + 0xc74  ; 0x22dc
+        0x0000166c:    e1a00006    ....    MOV      r0,r6
+        0x00001670:    e1a01007    ....    MOV      r1,r7
+        0x00001674:    e1a02008    . ..    MOV      r2,r8
+        0x00001678:    ebfffffe    ....    BL       BSP_disp_layer_set_contrast  ; 0xd5d0 Section #1
+        0x0000167c:    e1a04000    .@..    MOV      r4,r0
+        0x00001680:    ea000315    ....    B        {pc} + 0xc5c  ; 0x22dc
+        0x00001684:    e1a00006    ....    MOV      r0,r6
+        0x00001688:    e1a01007    ....    MOV      r1,r7
+        0x0000168c:    ebfffffe    ....    BL       BSP_disp_layer_get_contrast  ; 0xd198 Section #1
+        0x00001690:    e1a04000    .@..    MOV      r4,r0
+        0x00001694:    ea000310    ....    B        {pc} + 0xc48  ; 0x22dc
+        0x00001698:    e1a00006    ....    MOV      r0,r6
+        0x0000169c:    e1a01007    ....    MOV      r1,r7
+        0x000016a0:    e1a02008    . ..    MOV      r2,r8
+        0x000016a4:    ebfffffe    ....    BL       BSP_disp_layer_set_saturation  ; 0xd518 Section #1
+        0x000016a8:    e1a04000    .@..    MOV      r4,r0
+        0x000016ac:    ea00030a    ....    B        {pc} + 0xc30  ; 0x22dc
+        0x000016b0:    e1a00006    ....    MOV      r0,r6
+        0x000016b4:    e1a01007    ....    MOV      r1,r7
+        0x000016b8:    ebfffffe    ....    BL       BSP_disp_layer_get_saturation  ; 0xd210 Section #1
+        0x000016bc:    e1a04000    .@..    MOV      r4,r0
+        0x000016c0:    ea000305    ....    B        {pc} + 0xc1c  ; 0x22dc
+        0x000016c4:    e1a00006    ....    MOV      r0,r6
+        0x000016c8:    e1a01007    ....    MOV      r1,r7
+        0x000016cc:    e1a02008    . ..    MOV      r2,r8
+        0x000016d0:    ebfffffe    ....    BL       BSP_disp_layer_set_hue  ; 0xd460 Section #1
+        0x000016d4:    e1a04000    .@..    MOV      r4,r0
+        0x000016d8:    ea0002ff    ....    B        {pc} + 0xc04  ; 0x22dc
+        0x000016dc:    e1a00006    ....    MOV      r0,r6
+        0x000016e0:    e1a01007    ....    MOV      r1,r7
+        0x000016e4:    ebfffffe    ....    BL       BSP_disp_layer_get_hue  ; 0xd288 Section #1
+        0x000016e8:    e1a04000    .@..    MOV      r4,r0
+        0x000016ec:    ea0002fa    ....    B        {pc} + 0xbf0  ; 0x22dc
+        0x000016f0:    e1a00006    ....    MOV      r0,r6
+        0x000016f4:    e1a01007    ....    MOV      r1,r7
+        0x000016f8:    e3a02001    . ..    MOV      r2,#1
+        0x000016fc:    ebfffffe    ....    BL       BSP_disp_layer_enhance_enable  ; 0xd37c Section #1
+        0x00001700:    e1a04000    .@..    MOV      r4,r0
+        0x00001704:    ea0002f4    ....    B        {pc} + 0xbd8  ; 0x22dc
+        0x00001708:    e1a00006    ....    MOV      r0,r6
+        0x0000170c:    e1a01007    ....    MOV      r1,r7
+        0x00001710:    e3a02000    . ..    MOV      r2,#0
+        0x00001714:    ebfffffe    ....    BL       BSP_disp_layer_enhance_enable  ; 0xd37c Section #1
+        0x00001718:    e1a04000    .@..    MOV      r4,r0
+        0x0000171c:    ea0002ee    ....    B        {pc} + 0xbc0  ; 0x22dc
+        0x00001720:    e1a00006    ....    MOV      r0,r6
+        0x00001724:    e1a01007    ....    MOV      r1,r7
+        0x00001728:    ebfffffe    ....    BL       BSP_disp_layer_get_enhance_enable  ; 0xd300 Section #1
+        0x0000172c:    e1a04000    .@..    MOV      r4,r0
+        0x00001730:    ea0002e9    ....    B        {pc} + 0xbac  ; 0x22dc
+        0x00001734:    ebfffffe    ....    BL       BSP_disp_scaler_request  ; 0x10e50 Section #1
+        0x00001738:    e1a04000    .@..    MOV      r4,r0
+        0x0000173c:    ea0002e6    ....    B        {pc} + 0xba0  ; 0x22dc
+        0x00001740:    e1a00007    ....    MOV      r0,r7
+        0x00001744:    ebfffffe    ....    BL       BSP_disp_scaler_release  ; 0x10d5c Section #1
+        0x00001748:    e1a04000    .@..    MOV      r4,r0
+        0x0000174c:    ea0002e2    ....    B        {pc} + 0xb90  ; 0x22dc
+        0x00001750:    e1a0200d    . ..    MOV      r2,r13
+        0x00001754:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001758:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x0000175c:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001760:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001764:    e2982060    ` ..    ADDS     r2,r8,#0x60
+        0x00001768:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x0000176c:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001770:    e3530000    ..S.    CMP      r3,#0
+        0x00001774:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1794
+        0x00001778:    e1a01008    ....    MOV      r1,r8
+        0x0000177c:    e1a00005    ....    MOV      r0,r5
+        0x00001780:    e3a02060    ` ..    MOV      r2,#0x60
+        0x00001784:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001788:    e3500000    ..P.    CMP      r0,#0
+        0x0000178c:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x17a8
+        0x00001790:    ea0002d0    ....    B        {pc} + 0xb48  ; 0x22d8
+        0x00001794:    e1a00005    ....    MOV      r0,r5
+        0x00001798:    e3a01060    `...    MOV      r1,#0x60
+        0x0000179c:    ebfffffe    ....    BL       __memzero  ;
+        0x000017a0:    e3e0400d    .@..    MVN      r4,#0xd
+        0x000017a4:    ea0002cc    ....    B        {pc} + 0xb38  ; 0x22dc
+        0x000017a8:    e1a00007    ....    MOV      r0,r7
+        0x000017ac:    e1a01005    ....    MOV      r1,r5
+        0x000017b0:    ebfffffe    ....    BL       BSP_disp_scaler_start  ; 0x10418 Section #1
+        0x000017b4:    e1a04000    .@..    MOV      r4,r0
+        0x000017b8:    ea0002c7    ....    B        {pc} + 0xb24  ; 0x22dc
+        0x000017bc:    e1a00006    ....    MOV      r0,r6
+        0x000017c0:    e3a01001    ....    MOV      r1,#1
+        0x000017c4:    ebfffffe    ....    BL       BSP_disp_hwc_enable  ; 0xd010 Section #1
+        0x000017c8:    e1a04000    .@..    MOV      r4,r0
+        0x000017cc:    ea0002c2    ....    B        {pc} + 0xb10  ; 0x22dc
+        0x000017d0:    e1a00006    ....    MOV      r0,r6
+        0x000017d4:    e3a01000    ....    MOV      r1,#0
+        0x000017d8:    ebfffffe    ....    BL       BSP_disp_hwc_enable  ; 0xd010 Section #1
+        0x000017dc:    e1a04000    .@..    MOV      r4,r0
+        0x000017e0:    ea0002bd    ....    B        {pc} + 0xafc  ; 0x22dc
+        0x000017e4:    e1a0000d    ....    MOV      r0,r13
+        0x000017e8:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x000017ec:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000017f0:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x000017f4:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000017f8:    e2972008    . ..    ADDS     r2,r7,#8
+        0x000017fc:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001800:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001804:    e3530000    ..S.    CMP      r3,#0
+        0x00001808:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1828
+        0x0000180c:    e1a01007    ....    MOV      r1,r7
+        0x00001810:    e1a00005    ....    MOV      r0,r5
+        0x00001814:    e3a02008    . ..    MOV      r2,#8
+        0x00001818:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x0000181c:    e3500000    ..P.    CMP      r0,#0
+        0x00001820:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x183c
+        0x00001824:    ea0002ab    ....    B        {pc} + 0xab4  ; 0x22d8
+        0x00001828:    e1a00005    ....    MOV      r0,r5
+        0x0000182c:    e3a01008    ....    MOV      r1,#8
+        0x00001830:    ebfffffe    ....    BL       __memzero  ;
+        0x00001834:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001838:    ea0002a7    ....    B        {pc} + 0xaa4  ; 0x22dc
+        0x0000183c:    e1a00006    ....    MOV      r0,r6
+        0x00001840:    e1a01005    ....    MOV      r1,r5
+        0x00001844:    ebfffffe    ....    BL       BSP_disp_hwc_set_pos  ; 0xcff8 Section #1
+        0x00001848:    e1a04000    .@..    MOV      r4,r0
+        0x0000184c:    ea0002a2    ....    B        {pc} + 0xa90  ; 0x22dc
+    $d
+        0x00001850:    000002a0    ....    DCD    672 ; [Section 10]
+        0x00001854:    000002b5    ....    DCD    693 ; [Section 10]
+        0x00001858:    000002dd    ....    DCD    733 ; [Section 10]
+        0x0000185c:    000002f0    ....    DCD    752 ; [Section 10]
+        0x00001860:    00000329    )...    DCD    809 ; [Section 10]
+        0x00001864:    00000000    ....    DCD    0 ; g_disp_drv
+        0x00001868:    00000362    b...    DCD    866 ; [Section 10]
+        0x0000186c:    0000039b    ....    DCD    923 ; [Section 10]
+        0x00001870:    000003da    ....    DCD    986 ; [Section 10]
+        0x00001874:    00000234    4...    DCD    564 ; [Section 17]
+        0x00001878:    00000218    ....    DCD    536 ; [Section 17]
+    $a
+        0x0000187c:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001880:    e1a00006    ....    MOV      r0,r6
+        0x00001884:    e1a01005    ....    MOV      r1,r5
+        0x00001888:    ebfffffe    ....    BL       BSP_disp_hwc_get_pos  ; 0xcfe0 Section #1
+        0x0000188c:    e1a0200d    . ..    MOV      r2,r13
+        0x00001890:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001894:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001898:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x0000189c:    e2972008    . ..    ADDS     r2,r7,#8
+        0x000018a0:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x000018a4:    33a03000    .0.3    MOVCC    r3,#0
+        0x000018a8:    e3530000    ..S.    CMP      r3,#0
+        0x000018ac:    01a01005    ....    MOVEQ    r1,r5
+        0x000018b0:    03a02008    . ..    MOVEQ    r2,#8
+        0x000018b4:    e1a04000    .@..    MOV      r4,r0
+        0x000018b8:    01a00007    ....    MOVEQ    r0,r7
+        0x000018bc:    1a000285    ....    BNE      {pc} + 0xa1c  ; 0x22d8
+        0x000018c0:    ea000248    H...    B        {pc} + 0x928  ; 0x21e8
+        0x000018c4:    e1a0000d    ....    MOV      r0,r13
+        0x000018c8:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x000018cc:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000018d0:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x000018d4:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000018d8:    e2972008    . ..    ADDS     r2,r7,#8
+        0x000018dc:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x000018e0:    33a03000    .0.3    MOVCC    r3,#0
+        0x000018e4:    e3530000    ..S.    CMP      r3,#0
+        0x000018e8:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1908
+        0x000018ec:    e1a01007    ....    MOV      r1,r7
+        0x000018f0:    e1a00005    ....    MOV      r0,r5
+        0x000018f4:    e3a02008    . ..    MOV      r2,#8
+        0x000018f8:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x000018fc:    e3500000    ..P.    CMP      r0,#0
+        0x00001900:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x191c
+        0x00001904:    ea000273    s...    B        {pc} + 0x9d4  ; 0x22d8
+        0x00001908:    e1a00005    ....    MOV      r0,r5
+        0x0000190c:    e3a01008    ....    MOV      r1,#8
+        0x00001910:    ebfffffe    ....    BL       __memzero  ;
+        0x00001914:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001918:    ea00026f    o...    B        {pc} + 0x9c4  ; 0x22dc
+        0x0000191c:    e1a00006    ....    MOV      r0,r6
+        0x00001920:    e1a01005    ....    MOV      r1,r5
+        0x00001924:    ebfffffe    ....    BL       BSP_disp_hwc_set_framebuffer  ; 0xcfa0 Section #1
+        0x00001928:    e1a04000    .@..    MOV      r4,r0
+        0x0000192c:    ea00026a    j...    B        {pc} + 0x9b0  ; 0x22dc
+        0x00001930:    e3570000    ..W.    CMP      r7,#0
+        0x00001934:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x1940
+        0x00001938:    e3550000    ..U.    CMP      r5,#0
+        0x0000193c:    ca000003    ....    BGT      {pc} + 0x14  ; 0x1950
+        0x00001940:    e51f00dc    ....    LDR      r0,[pc,#-220] ; [([Section 10] + 923) = 0x186c]  = 0x39b
+        0x00001944:    e3e04000    .@..    MVN      r4,#0
+        0x00001948:    ebfffffe    ....    BL       printk  ;
+        0x0000194c:    ea000262    b...    B        {pc} + 0x990  ; 0x22dc
+        0x00001950:    e1a0200d    . ..    MOV      r2,r13
+        0x00001954:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001958:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x0000195c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001960:    e0972005    . ..    ADDS     r2,r7,r5
+        0x00001964:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001968:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000196c:    e3530000    ..S.    CMP      r3,#0
+        0x00001970:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1990
+        0x00001974:    e1a01007    ....    MOV      r1,r7
+        0x00001978:    e51f010c    ....    LDR      r0,[pc,#-268] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x0000197c:    e1a02005    . ..    MOV      r2,r5
+        0x00001980:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001984:    e3500000    ..P.    CMP      r0,#0
+        0x00001988:    1a000252    R...    BNE      {pc} + 0x950  ; 0x22d8
+        0x0000198c:    ea000004    ....    B        {pc} + 0x18  ; 0x19a4
+        0x00001990:    e1a01005    ....    MOV      r1,r5
+        0x00001994:    e51f0128    (...    LDR      r0,[pc,#-296] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001998:    ebfffffe    ....    BL       __memzero  ;
+        0x0000199c:    e3e0400d    .@..    MVN      r4,#0xd
+        0x000019a0:    ea00024d    M...    B        {pc} + 0x93c  ; 0x22dc
+        0x000019a4:    e1a00006    ....    MOV      r0,r6
+        0x000019a8:    e1a02008    . ..    MOV      r2,r8
+        0x000019ac:    e1a03005    .0..    MOV      r3,r5
+        0x000019b0:    e51f1144    D...    LDR      r1,[pc,#-324] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x000019b4:    ebfffffe    ....    BL       BSP_disp_hwc_set_palette  ; 0xcf60 Section #1
+        0x000019b8:    e1a04000    .@..    MOV      r4,r0
+        0x000019bc:    ea000246    F...    B        {pc} + 0x920  ; 0x22dc
+        0x000019c0:    e1a00006    ....    MOV      r0,r6
+        0x000019c4:    e1a01007    ....    MOV      r1,r7
+        0x000019c8:    ebfffffe    ....    BL       BSP_disp_video_start  ; 0x134a0 Section #1
+        0x000019cc:    e1a04000    .@..    MOV      r4,r0
+        0x000019d0:    ea000241    A...    B        {pc} + 0x90c  ; 0x22dc
+        0x000019d4:    e1a00006    ....    MOV      r0,r6
+        0x000019d8:    e1a01007    ....    MOV      r1,r7
+        0x000019dc:    ebfffffe    ....    BL       BSP_disp_video_stop  ; 0x13414 Section #1
+        0x000019e0:    e1a04000    .@..    MOV      r4,r0
+        0x000019e4:    ea00023c    <...    B        {pc} + 0x8f8  ; 0x22dc
+        0x000019e8:    e1a0000d    ....    MOV      r0,r13
+        0x000019ec:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x000019f0:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000019f4:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x000019f8:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000019fc:    e2982024    $ ..    ADDS     r2,r8,#0x24
+        0x00001a00:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001a04:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001a08:    e3530000    ..S.    CMP      r3,#0
+        0x00001a0c:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1a2c
+        0x00001a10:    e1a01008    ....    MOV      r1,r8
+        0x00001a14:    e1a00005    ....    MOV      r0,r5
+        0x00001a18:    e3a02024    $ ..    MOV      r2,#0x24
+        0x00001a1c:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001a20:    e3500000    ..P.    CMP      r0,#0
+        0x00001a24:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1a40
+        0x00001a28:    ea00022a    *...    B        {pc} + 0x8b0  ; 0x22d8
+        0x00001a2c:    e1a00005    ....    MOV      r0,r5
+        0x00001a30:    e3a01024    $...    MOV      r1,#0x24
+        0x00001a34:    ebfffffe    ....    BL       __memzero  ;
+        0x00001a38:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001a3c:    ea000226    &...    B        {pc} + 0x8a0  ; 0x22dc
+        0x00001a40:    e1a00006    ....    MOV      r0,r6
+        0x00001a44:    e1a01007    ....    MOV      r1,r7
+        0x00001a48:    e1a02005    . ..    MOV      r2,r5
+        0x00001a4c:    ebfffffe    ....    BL       BSP_disp_video_set_fb  ; 0x13540 Section #1
+        0x00001a50:    e1a04000    .@..    MOV      r4,r0
+        0x00001a54:    ea000220     ...    B        {pc} + 0x888  ; 0x22dc
+        0x00001a58:    e1a00006    ....    MOV      r0,r6
+        0x00001a5c:    e1a01007    ....    MOV      r1,r7
+        0x00001a60:    ebfffffe    ....    BL       BSP_disp_video_get_frame_id  ; 0x132d4 Section #1
+        0x00001a64:    e1a04000    .@..    MOV      r4,r0
+        0x00001a68:    ea00021b    ....    B        {pc} + 0x874  ; 0x22dc
+        0x00001a6c:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001a70:    e1a01007    ....    MOV      r1,r7
+        0x00001a74:    e1a00006    ....    MOV      r0,r6
+        0x00001a78:    e1a02005    . ..    MOV      r2,r5
+        0x00001a7c:    ebfffffe    ....    BL       BSP_disp_video_get_dit_info  ; 0x13360 Section #1
+        0x00001a80:    e1a0200d    . ..    MOV      r2,r13
+        0x00001a84:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001a88:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001a8c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001a90:    e2982002    . ..    ADDS     r2,r8,#2
+        0x00001a94:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001a98:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001a9c:    e3530000    ..S.    CMP      r3,#0
+        0x00001aa0:    01a01005    ....    MOVEQ    r1,r5
+        0x00001aa4:    03a02002    . ..    MOVEQ    r2,#2
+        0x00001aa8:    e1a04000    .@..    MOV      r4,r0
+        0x00001aac:    01a00008    ....    MOVEQ    r0,r8
+        0x00001ab0:    1a000208    ....    BNE      {pc} + 0x828  ; 0x22d8
+        0x00001ab4:    ea0001cb    ....    B        {pc} + 0x734  ; 0x21e8
+        0x00001ab8:    e1a00006    ....    MOV      r0,r6
+        0x00001abc:    ebfffffe    ....    BL       DRV_lcd_open  ; 0x498 Section #1
+        0x00001ac0:    e1a04000    .@..    MOV      r4,r0
+        0x00001ac4:    ea000204    ....    B        {pc} + 0x818  ; 0x22dc
+        0x00001ac8:    e1a00006    ....    MOV      r0,r6
+        0x00001acc:    ebfffffe    ....    BL       DRV_lcd_close  ; 0x2fc Section #1
+        0x00001ad0:    e1a04000    .@..    MOV      r4,r0
+        0x00001ad4:    ea000200    ....    B        {pc} + 0x808  ; 0x22dc
+        0x00001ad8:    e1a00006    ....    MOV      r0,r6
+        0x00001adc:    e1a01007    ....    MOV      r1,r7
+        0x00001ae0:    ebfffffe    ....    BL       BSP_disp_lcd_set_bright  ; 0xf724 Section #1
+        0x00001ae4:    e1a04000    .@..    MOV      r4,r0
+        0x00001ae8:    ea0001fb    ....    B        {pc} + 0x7f4  ; 0x22dc
+        0x00001aec:    e1a00006    ....    MOV      r0,r6
+        0x00001af0:    ebfffffe    ....    BL       BSP_disp_lcd_get_bright  ; 0xf7a8 Section #1
+        0x00001af4:    e1a04000    .@..    MOV      r4,r0
+        0x00001af8:    ea0001f7    ....    B        {pc} + 0x7e4  ; 0x22dc
+        0x00001afc:    e1a00006    ....    MOV      r0,r6
+        0x00001b00:    e1a01007    ....    MOV      r1,r7
+        0x00001b04:    ebfffffe    ....    BL       BSP_disp_lcd_xy_switch  ; 0xf8f8 Section #1
+        0x00001b08:    e1a04000    .@..    MOV      r4,r0
+        0x00001b0c:    ea0001f2    ....    B        {pc} + 0x7d0  ; 0x22dc
+        0x00001b10:    e1a00006    ....    MOV      r0,r6
+        0x00001b14:    e1a01007    ....    MOV      r1,r7
+        0x00001b18:    ebfffffe    ....    BL       BSP_disp_lcd_set_src  ; 0xf804 Section #1
+        0x00001b1c:    e1a04000    .@..    MOV      r4,r0
+        0x00001b20:    ea0001ed    ....    B        {pc} + 0x7bc  ; 0x22dc
+        0x00001b24:    e1a00006    ....    MOV      r0,r6
+        0x00001b28:    ebfffffe    ....    BL       BSP_disp_tv_open  ; 0x12d2c Section #1
+        0x00001b2c:    e1a04000    .@..    MOV      r4,r0
+        0x00001b30:    ea0001e9    ....    B        {pc} + 0x7ac  ; 0x22dc
+        0x00001b34:    e1a00006    ....    MOV      r0,r6
+        0x00001b38:    ebfffffe    ....    BL       BSP_disp_tv_close  ; 0x12c88 Section #1
+        0x00001b3c:    e1a04000    .@..    MOV      r4,r0
+        0x00001b40:    ea0001e5    ....    B        {pc} + 0x79c  ; 0x22dc
+        0x00001b44:    e1a00006    ....    MOV      r0,r6
+        0x00001b48:    e1a01007    ....    MOV      r1,r7
+        0x00001b4c:    ebfffffe    ....    BL       BSP_disp_tv_set_mode  ; 0x12950 Section #1
+        0x00001b50:    e1a04000    .@..    MOV      r4,r0
+        0x00001b54:    ea0001e0    ....    B        {pc} + 0x788  ; 0x22dc
+        0x00001b58:    e1a00006    ....    MOV      r0,r6
+        0x00001b5c:    ebfffffe    ....    BL       BSP_disp_tv_get_mode  ; 0x128c4 Section #1
+        0x00001b60:    e1a04000    .@..    MOV      r4,r0
+        0x00001b64:    ea0001dc    ....    B        {pc} + 0x778  ; 0x22dc
+        0x00001b68:    e1a00006    ....    MOV      r0,r6
+        0x00001b6c:    ebfffffe    ....    BL       BSP_disp_tv_auto_check_enable  ; 0x129e0 Section #1
+        0x00001b70:    e1a04000    .@..    MOV      r4,r0
+        0x00001b74:    ea0001d8    ....    B        {pc} + 0x768  ; 0x22dc
+        0x00001b78:    e1a00006    ....    MOV      r0,r6
+        0x00001b7c:    ebfffffe    ....    BL       BSP_disp_tv_auto_check_disable  ; 0x1299c Section #1
+        0x00001b80:    e1a04000    .@..    MOV      r4,r0
+        0x00001b84:    ea0001d4    ....    B        {pc} + 0x758  ; 0x22dc
+        0x00001b88:    e1a00006    ....    MOV      r0,r6
+        0x00001b8c:    ebfffffe    ....    BL       BSP_disp_tv_get_interface  ; 0x12b04 Section #1
+        0x00001b90:    e1a04000    .@..    MOV      r4,r0
+        0x00001b94:    ea0001d0    ....    B        {pc} + 0x748  ; 0x22dc
+        0x00001b98:    e1a00006    ....    MOV      r0,r6
+        0x00001b9c:    e1a01007    ....    MOV      r1,r7
+        0x00001ba0:    ebfffffe    ....    BL       BSP_disp_tv_set_src  ; 0x12908 Section #1
+        0x00001ba4:    e1a04000    .@..    MOV      r4,r0
+        0x00001ba8:    ea0001cb    ....    B        {pc} + 0x734  ; 0x22dc
+        0x00001bac:    e1a00006    ....    MOV      r0,r6
+        0x00001bb0:    e1a01007    ....    MOV      r1,r7
+        0x00001bb4:    ebfffffe    ....    BL       BSP_disp_tv_get_dac_status  ; 0x12aa0 Section #1
+        0x00001bb8:    e1a04000    .@..    MOV      r4,r0
+        0x00001bbc:    ea0001c6    ....    B        {pc} + 0x720  ; 0x22dc
+        0x00001bc0:    e1a00006    ....    MOV      r0,r6
+        0x00001bc4:    e1a01007    ....    MOV      r1,r7
+        0x00001bc8:    e1a02008    . ..    MOV      r2,r8
+        0x00001bcc:    ebfffffe    ....    BL       BSP_disp_tv_set_dac_source  ; 0x12a24 Section #1
+        0x00001bd0:    e1a04000    .@..    MOV      r4,r0
+        0x00001bd4:    ea0001c0    ....    B        {pc} + 0x708  ; 0x22dc
+        0x00001bd8:    e1a00006    ....    MOV      r0,r6
+        0x00001bdc:    e1a01007    ....    MOV      r1,r7
+        0x00001be0:    ebfffffe    ....    BL       BSP_disp_tv_get_dac_source  ; 0x128e4 Section #1
+        0x00001be4:    e1a04000    .@..    MOV      r4,r0
+        0x00001be8:    ea0001bb    ....    B        {pc} + 0x6f4  ; 0x22dc
+        0x00001bec:    e1a00006    ....    MOV      r0,r6
+        0x00001bf0:    ebfffffe    ....    BL       BSP_disp_hdmi_open  ; 0xce7c Section #1
+        0x00001bf4:    e1a04000    .@..    MOV      r4,r0
+        0x00001bf8:    ea0001b7    ....    B        {pc} + 0x6e4  ; 0x22dc
+        0x00001bfc:    e1a00006    ....    MOV      r0,r6
+        0x00001c00:    ebfffffe    ....    BL       BSP_disp_hdmi_close  ; 0xcde4 Section #1
+        0x00001c04:    e1a04000    .@..    MOV      r4,r0
+        0x00001c08:    ea0001b3    ....    B        {pc} + 0x6d4  ; 0x22dc
+        0x00001c0c:    e1a00006    ....    MOV      r0,r6
+        0x00001c10:    e1a01007    ....    MOV      r1,r7
+        0x00001c14:    ebfffffe    ....    BL       BSP_disp_hdmi_set_mode  ; 0xcd88 Section #1
+        0x00001c18:    e1a04000    .@..    MOV      r4,r0
+        0x00001c1c:    ea0001ae    ....    B        {pc} + 0x6c0  ; 0x22dc
+        0x00001c20:    e1a00006    ....    MOV      r0,r6
+        0x00001c24:    ebfffffe    ....    BL       BSP_disp_hdmi_get_mode  ; 0xccdc Section #1
+        0x00001c28:    e1a04000    .@..    MOV      r4,r0
+        0x00001c2c:    ea0001aa    ....    B        {pc} + 0x6b0  ; 0x22dc
+        0x00001c30:    e1a00006    ....    MOV      r0,r6
+        0x00001c34:    ebfffffe    ....    BL       BSP_disp_hdmi_get_hpd_status  ; 0xcd20 Section #1
+        0x00001c38:    e1a04000    .@..    MOV      r4,r0
+        0x00001c3c:    ea0001a6    ....    B        {pc} + 0x6a0  ; 0x22dc
+        0x00001c40:    e1a00006    ....    MOV      r0,r6
+        0x00001c44:    e6ef1077    w...    UXTB     r1,r7
+        0x00001c48:    ebfffffe    ....    BL       BSP_disp_hdmi_check_support_mode  ; 0xccfc Section #1
+        0x00001c4c:    e1a04000    .@..    MOV      r4,r0
+        0x00001c50:    ea0001a1    ....    B        {pc} + 0x68c  ; 0x22dc
+        0x00001c54:    e1a00006    ....    MOV      r0,r6
+        0x00001c58:    e1a01007    ....    MOV      r1,r7
+        0x00001c5c:    ebfffffe    ....    BL       BSP_disp_hdmi_set_src  ; 0xcd40 Section #1
+        0x00001c60:    e1a04000    .@..    MOV      r4,r0
+        0x00001c64:    ea00019c    ....    B        {pc} + 0x678  ; 0x22dc
+        0x00001c68:    e1a00006    ....    MOV      r0,r6
+        0x00001c6c:    ebfffffe    ....    BL       BSP_disp_vga_open  ; 0x131e4 Section #1
+        0x00001c70:    e1a04000    .@..    MOV      r4,r0
+        0x00001c74:    ea000198    ....    B        {pc} + 0x668  ; 0x22dc
+        0x00001c78:    e1a00006    ....    MOV      r0,r6
+        0x00001c7c:    ebfffffe    ....    BL       BSP_disp_vga_close  ; 0x13148 Section #1
+        0x00001c80:    e1a04000    .@..    MOV      r4,r0
+        0x00001c84:    ea000194    ....    B        {pc} + 0x658  ; 0x22dc
+        0x00001c88:    e1a00006    ....    MOV      r0,r6
+        0x00001c8c:    e1a01007    ....    MOV      r1,r7
+        0x00001c90:    ebfffffe    ....    BL       BSP_disp_vga_set_mode  ; 0x130fc Section #1
+        0x00001c94:    e1a04000    .@..    MOV      r4,r0
+        0x00001c98:    ea00018f    ....    B        {pc} + 0x644  ; 0x22dc
+        0x00001c9c:    e1a00006    ....    MOV      r0,r6
+        0x00001ca0:    ebfffffe    ....    BL       BSP_disp_vga_get_mode  ; 0x13094 Section #1
+        0x00001ca4:    e1a04000    .@..    MOV      r4,r0
+        0x00001ca8:    ea00018b    ....    B        {pc} + 0x634  ; 0x22dc
+        0x00001cac:    e1a00006    ....    MOV      r0,r6
+        0x00001cb0:    e1a01007    ....    MOV      r1,r7
+        0x00001cb4:    ebfffffe    ....    BL       BSP_disp_vga_set_src  ; 0x130b4 Section #1
+        0x00001cb8:    e1a04000    .@..    MOV      r4,r0
+        0x00001cbc:    ea000186    ....    B        {pc} + 0x620  ; 0x22dc
+        0x00001cc0:    e1a00006    ....    MOV      r0,r6
+        0x00001cc4:    ebfffffe    ....    BL       BSP_disp_sprite_open  ; 0x127f0 Section #1
+        0x00001cc8:    e1a04000    .@..    MOV      r4,r0
+        0x00001ccc:    ea000182    ....    B        {pc} + 0x610  ; 0x22dc
+        0x00001cd0:    e1a00006    ....    MOV      r0,r6
+        0x00001cd4:    ebfffffe    ....    BL       BSP_disp_sprite_close  ; 0x12784 Section #1
+        0x00001cd8:    e1a04000    .@..    MOV      r4,r0
+        0x00001cdc:    ea00017e    ~...    B        {pc} + 0x600  ; 0x22dc
+        0x00001ce0:    e1a00006    ....    MOV      r0,r6
+        0x00001ce4:    e1a01007    ....    MOV      r1,r7
+        0x00001ce8:    e1a02008    . ..    MOV      r2,r8
+        0x00001cec:    ebfffffe    ....    BL       BSP_disp_sprite_set_format  ; 0x12698 Section #1
+        0x00001cf0:    e1a04000    .@..    MOV      r4,r0
+        0x00001cf4:    ea000178    x...    B        {pc} + 0x5e8  ; 0x22dc
+        0x00001cf8:    e1a00006    ....    MOV      r0,r6
+        0x00001cfc:    ebfffffe    ....    BL       BSP_disp_sprite_alpha_enable  ; 0x1274c Section #1
+        0x00001d00:    e1a04000    .@..    MOV      r4,r0
+        0x00001d04:    ea000174    t...    B        {pc} + 0x5d8  ; 0x22dc
+        0x00001d08:    e1a00006    ....    MOV      r0,r6
+        0x00001d0c:    ebfffffe    ....    BL       BSP_disp_sprite_alpha_disable  ; 0x12714 Section #1
+        0x00001d10:    e1a04000    .@..    MOV      r4,r0
+        0x00001d14:    ea000170    p...    B        {pc} + 0x5c8  ; 0x22dc
+        0x00001d18:    e1a00006    ....    MOV      r0,r6
+        0x00001d1c:    ebfffffe    ....    BL       BSP_disp_sprite_get_alpha_enable  ; 0x11190 Section #1
+        0x00001d20:    e1a04000    .@..    MOV      r4,r0
+        0x00001d24:    ea00016c    l...    B        {pc} + 0x5b8  ; 0x22dc
+        0x00001d28:    e1a00006    ....    MOV      r0,r6
+        0x00001d2c:    e1a01007    ....    MOV      r1,r7
+        0x00001d30:    ebfffffe    ....    BL       BSP_disp_sprite_set_alpha_vale  ; 0x126dc Section #1
+        0x00001d34:    e1a04000    .@..    MOV      r4,r0
+        0x00001d38:    ea000167    g...    B        {pc} + 0x5a4  ; 0x22dc
+        0x00001d3c:    e1a00006    ....    MOV      r0,r6
+        0x00001d40:    ebfffffe    ....    BL       BSP_disp_sprite_get_alpha_value  ; 0x111b4 Section #1
+        0x00001d44:    e1a04000    .@..    MOV      r4,r0
+        0x00001d48:    ea000163    c...    B        {pc} + 0x594  ; 0x22dc
+        0x00001d4c:    e1a00006    ....    MOV      r0,r6
+        0x00001d50:    e1a01007    ....    MOV      r1,r7
+        0x00001d54:    e1a02008    . ..    MOV      r2,r8
+        0x00001d58:    ebfffffe    ....    BL       BSP_disp_sprite_set_order  ; 0x11a98 Section #1
+        0x00001d5c:    e1a04000    .@..    MOV      r4,r0
+        0x00001d60:    ea00015d    ]...    B        {pc} + 0x57c  ; 0x22dc
+        0x00001d64:    e1a00006    ....    MOV      r0,r6
+        0x00001d68:    ebfffffe    ....    BL       BSP_disp_sprite_get_top_block  ; 0x111d8 Section #1
+        0x00001d6c:    e1a04000    .@..    MOV      r4,r0
+        0x00001d70:    ea000159    Y...    B        {pc} + 0x56c  ; 0x22dc
+        0x00001d74:    e1a00006    ....    MOV      r0,r6
+        0x00001d78:    ebfffffe    ....    BL       BSP_disp_sprite_get_bottom_block  ; 0x11210 Section #1
+        0x00001d7c:    e1a04000    .@..    MOV      r4,r0
+        0x00001d80:    ea000155    U...    B        {pc} + 0x55c  ; 0x22dc
+        0x00001d84:    e3570000    ..W.    CMP      r7,#0
+        0x00001d88:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x1d94
+        0x00001d8c:    e3550000    ..U.    CMP      r5,#0
+        0x00001d90:    ca000003    ....    BGT      {pc} + 0x14  ; 0x1da4
+        0x00001d94:    e51f052c    ,...    LDR      r0,[pc,#-1324] ; [([Section 10] + 986) = 0x1870]  = 0x3da
+        0x00001d98:    e3e04000    .@..    MVN      r4,#0
+        0x00001d9c:    ebfffffe    ....    BL       printk  ;
+        0x00001da0:    ea00014d    M...    B        {pc} + 0x53c  ; 0x22dc
+        0x00001da4:    e1a0000d    ....    MOV      r0,r13
+        0x00001da8:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00001dac:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001db0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001db4:    e0972005    . ..    ADDS     r2,r7,r5
+        0x00001db8:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001dbc:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001dc0:    e3530000    ..S.    CMP      r3,#0
+        0x00001dc4:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1de4
+        0x00001dc8:    e1a01007    ....    MOV      r1,r7
+        0x00001dcc:    e51f0560    `...    LDR      r0,[pc,#-1376] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001dd0:    e1a02005    . ..    MOV      r2,r5
+        0x00001dd4:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001dd8:    e3500000    ..P.    CMP      r0,#0
+        0x00001ddc:    1a00013d    =...    BNE      {pc} + 0x4fc  ; 0x22d8
+        0x00001de0:    ea000004    ....    B        {pc} + 0x18  ; 0x1df8
+        0x00001de4:    e1a01005    ....    MOV      r1,r5
+        0x00001de8:    e51f057c    |...    LDR      r0,[pc,#-1404] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001dec:    ebfffffe    ....    BL       __memzero  ;
+        0x00001df0:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001df4:    ea000138    8...    B        {pc} + 0x4e8  ; 0x22dc
+        0x00001df8:    e1a00006    ....    MOV      r0,r6
+        0x00001dfc:    e1a02008    . ..    MOV      r2,r8
+        0x00001e00:    e1a03005    .0..    MOV      r3,r5
+        0x00001e04:    e51f1598    ....    LDR      r1,[pc,#-1432] ; [([Section 17] + 564) = 0x1874]  = 0x234
+        0x00001e08:    ebfffffe    ....    BL       BSP_disp_sprite_set_palette_table  ; 0x12658 Section #1
+        0x00001e0c:    e1a04000    .@..    MOV      r4,r0
+        0x00001e10:    ea000131    1...    B        {pc} + 0x4cc  ; 0x22dc
+        0x00001e14:    e1a00006    ....    MOV      r0,r6
+        0x00001e18:    ebfffffe    ....    BL       BSP_disp_sprite_get_block_number  ; 0x11234 Section #1
+        0x00001e1c:    e1a04000    .@..    MOV      r4,r0
+        0x00001e20:    ea00012d    -...    B        {pc} + 0x4bc  ; 0x22dc
+        0x00001e24:    e1a0200d    . ..    MOV      r2,r13
+        0x00001e28:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001e2c:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001e30:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001e34:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001e38:    e2972048    H ..    ADDS     r2,r7,#0x48
+        0x00001e3c:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001e40:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001e44:    e3530000    ..S.    CMP      r3,#0
+        0x00001e48:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1e68
+        0x00001e4c:    e1a01007    ....    MOV      r1,r7
+        0x00001e50:    e1a00005    ....    MOV      r0,r5
+        0x00001e54:    e3a02048    H ..    MOV      r2,#0x48
+        0x00001e58:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001e5c:    e3500000    ..P.    CMP      r0,#0
+        0x00001e60:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1e7c
+        0x00001e64:    ea00011b    ....    B        {pc} + 0x474  ; 0x22d8
+        0x00001e68:    e1a00005    ....    MOV      r0,r5
+        0x00001e6c:    e3a01048    H...    MOV      r1,#0x48
+        0x00001e70:    ebfffffe    ....    BL       __memzero  ;
+        0x00001e74:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001e78:    ea000117    ....    B        {pc} + 0x464  ; 0x22dc
+        0x00001e7c:    e1a00006    ....    MOV      r0,r6
+        0x00001e80:    e1a01005    ....    MOV      r1,r5
+        0x00001e84:    ebfffffe    ....    BL       BSP_disp_sprite_block_request  ; 0x123b4 Section #1
+        0x00001e88:    e1a04000    .@..    MOV      r4,r0
+        0x00001e8c:    ea000112    ....    B        {pc} + 0x450  ; 0x22dc
+        0x00001e90:    e1a00006    ....    MOV      r0,r6
+        0x00001e94:    e1a01007    ....    MOV      r1,r7
+        0x00001e98:    ebfffffe    ....    BL       BSP_disp_sprite_block_release  ; 0x1205c Section #1
+        0x00001e9c:    e1a04000    .@..    MOV      r4,r0
+        0x00001ea0:    ea00010d    ....    B        {pc} + 0x43c  ; 0x22dc
+        0x00001ea4:    e1a0000d    ....    MOV      r0,r13
+        0x00001ea8:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00001eac:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001eb0:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001eb4:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001eb8:    e2982010    . ..    ADDS     r2,r8,#0x10
+        0x00001ebc:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001ec0:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001ec4:    e3530000    ..S.    CMP      r3,#0
+        0x00001ec8:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1ee8
+        0x00001ecc:    e1a01008    ....    MOV      r1,r8
+        0x00001ed0:    e1a00005    ....    MOV      r0,r5
+        0x00001ed4:    e3a02010    . ..    MOV      r2,#0x10
+        0x00001ed8:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001edc:    e3500000    ..P.    CMP      r0,#0
+        0x00001ee0:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1efc
+        0x00001ee4:    ea0000fb    ....    B        {pc} + 0x3f4  ; 0x22d8
+        0x00001ee8:    e1a00005    ....    MOV      r0,r5
+        0x00001eec:    e3a01010    ....    MOV      r1,#0x10
+        0x00001ef0:    ebfffffe    ....    BL       __memzero  ;
+        0x00001ef4:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001ef8:    ea0000f7    ....    B        {pc} + 0x3e4  ; 0x22dc
+        0x00001efc:    e1a00006    ....    MOV      r0,r6
+        0x00001f00:    e1a01007    ....    MOV      r1,r7
+        0x00001f04:    e1a02005    . ..    MOV      r2,r5
+        0x00001f08:    ebfffffe    ....    BL       BSP_disp_sprite_block_set_screen_win  ; 0x11ed4 Section #1
+        0x00001f0c:    e1a04000    .@..    MOV      r4,r0
+        0x00001f10:    ea0000f1    ....    B        {pc} + 0x3cc  ; 0x22dc
+        0x00001f14:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001f18:    e1a00006    ....    MOV      r0,r6
+        0x00001f1c:    e1a01007    ....    MOV      r1,r7
+        0x00001f20:    e1a02005    . ..    MOV      r2,r5
+        0x00001f24:    ebfffffe    ....    BL       BSP_disp_sprite_block_get_srceen_win  ; 0x11258 Section #1
+        0x00001f28:    ea000020     ...    B        {pc} + 0x88  ; 0x1fb0
+        0x00001f2c:    e1a0000d    ....    MOV      r0,r13
+        0x00001f30:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00001f34:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001f38:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001f3c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001f40:    e2982010    . ..    ADDS     r2,r8,#0x10
+        0x00001f44:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001f48:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001f4c:    e3530000    ..S.    CMP      r3,#0
+        0x00001f50:    1a000006    ....    BNE      {pc} + 0x20  ; 0x1f70
+        0x00001f54:    e1a01008    ....    MOV      r1,r8
+        0x00001f58:    e1a00005    ....    MOV      r0,r5
+        0x00001f5c:    e3a02010    . ..    MOV      r2,#0x10
+        0x00001f60:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00001f64:    e3500000    ..P.    CMP      r0,#0
+        0x00001f68:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1f84
+        0x00001f6c:    ea0000d9    ....    B        {pc} + 0x36c  ; 0x22d8
+        0x00001f70:    e1a00005    ....    MOV      r0,r5
+        0x00001f74:    e3a01010    ....    MOV      r1,#0x10
+        0x00001f78:    ebfffffe    ....    BL       __memzero  ;
+        0x00001f7c:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00001f80:    ea0000d5    ....    B        {pc} + 0x35c  ; 0x22dc
+        0x00001f84:    e1a00006    ....    MOV      r0,r6
+        0x00001f88:    e1a01007    ....    MOV      r1,r7
+        0x00001f8c:    e1a02005    . ..    MOV      r2,r5
+        0x00001f90:    ebfffffe    ....    BL       BSP_disp_sprite_block_set_src_win  ; 0x117c4 Section #1
+        0x00001f94:    e1a04000    .@..    MOV      r4,r0
+        0x00001f98:    ea0000cf    ....    B        {pc} + 0x344  ; 0x22dc
+        0x00001f9c:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001fa0:    e1a00006    ....    MOV      r0,r6
+        0x00001fa4:    e1a01007    ....    MOV      r1,r7
+        0x00001fa8:    e1a02005    . ..    MOV      r2,r5
+        0x00001fac:    ebfffffe    ....    BL       BSP_disp_sprite_block_get_src_win  ; 0x112dc Section #1
+        0x00001fb0:    e1a0200d    . ..    MOV      r2,r13
+        0x00001fb4:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00001fb8:    e1a04000    .@..    MOV      r4,r0
+        0x00001fbc:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001fc0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001fc4:    e2982010    . ..    ADDS     r2,r8,#0x10
+        0x00001fc8:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00001fcc:    33a03000    .0.3    MOVCC    r3,#0
+        0x00001fd0:    e3530000    ..S.    CMP      r3,#0
+        0x00001fd4:    01a00008    ....    MOVEQ    r0,r8
+        0x00001fd8:    01a01005    ....    MOVEQ    r1,r5
+        0x00001fdc:    03a02010    . ..    MOVEQ    r2,#0x10
+        0x00001fe0:    1a0000bc    ....    BNE      {pc} + 0x2f8  ; 0x22d8
+        0x00001fe4:    ea00007f    ....    B        {pc} + 0x204  ; 0x21e8
+        0x00001fe8:    e1a0000d    ....    MOV      r0,r13
+        0x00001fec:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00001ff0:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00001ff4:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00001ff8:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00001ffc:    e2982028    ( ..    ADDS     r2,r8,#0x28
+        0x00002000:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00002004:    33a03000    .0.3    MOVCC    r3,#0
+        0x00002008:    e3530000    ..S.    CMP      r3,#0
+        0x0000200c:    1a000006    ....    BNE      {pc} + 0x20  ; 0x202c
+        0x00002010:    e1a01008    ....    MOV      r1,r8
+        0x00002014:    e1a00005    ....    MOV      r0,r5
+        0x00002018:    e3a02028    ( ..    MOV      r2,#0x28
+        0x0000201c:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00002020:    e3500000    ..P.    CMP      r0,#0
+        0x00002024:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x2040
+        0x00002028:    ea0000aa    ....    B        {pc} + 0x2b0  ; 0x22d8
+        0x0000202c:    e1a00005    ....    MOV      r0,r5
+        0x00002030:    e3a01028    (...    MOV      r1,#0x28
+        0x00002034:    ebfffffe    ....    BL       __memzero  ;
+        0x00002038:    e3e0400d    .@..    MVN      r4,#0xd
+        0x0000203c:    ea0000a6    ....    B        {pc} + 0x2a0  ; 0x22dc
+        0x00002040:    e1a00006    ....    MOV      r0,r6
+        0x00002044:    e1a01007    ....    MOV      r1,r7
+        0x00002048:    e1a02005    . ..    MOV      r2,r5
+        0x0000204c:    ebfffffe    ....    BL       BSP_disp_sprite_block_set_framebuffer  ; 0x11dc8 Section #1
+        0x00002050:    e1a04000    .@..    MOV      r4,r0
+        0x00002054:    ea0000a0    ....    B        {pc} + 0x288  ; 0x22dc
+        0x00002058:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x0000205c:    e1a00006    ....    MOV      r0,r6
+        0x00002060:    e1a01007    ....    MOV      r1,r7
+        0x00002064:    e1a02005    . ..    MOV      r2,r5
+        0x00002068:    ebfffffe    ....    BL       BSP_disp_sprite_block_get_framebufer  ; 0x11360 Section #1
+        0x0000206c:    e1a0200d    . ..    MOV      r2,r13
+        0x00002070:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x00002074:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00002078:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x0000207c:    e1a04000    .@..    MOV      r4,r0
+        0x00002080:    e2982028    ( ..    ADDS     r2,r8,#0x28
+        0x00002084:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00002088:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000208c:    e3530000    ..S.    CMP      r3,#0
+        0x00002090:    01a00008    ....    MOVEQ    r0,r8
+        0x00002094:    01a01005    ....    MOVEQ    r1,r5
+        0x00002098:    03a02028    ( ..    MOVEQ    r2,#0x28
+        0x0000209c:    1a00008d    ....    BNE      {pc} + 0x23c  ; 0x22d8
+        0x000020a0:    ea000050    P...    B        {pc} + 0x148  ; 0x21e8
+        0x000020a4:    e1a00006    ....    MOV      r0,r6
+        0x000020a8:    e1a01007    ....    MOV      r1,r7
+        0x000020ac:    ebfffffe    ....    BL       BSP_disp_sprite_block_set_top  ; 0x11d90 Section #1
+        0x000020b0:    e1a04000    .@..    MOV      r4,r0
+        0x000020b4:    ea000088    ....    B        {pc} + 0x228  ; 0x22dc
+        0x000020b8:    e1a00006    ....    MOV      r0,r6
+        0x000020bc:    e1a01007    ....    MOV      r1,r7
+        0x000020c0:    ebfffffe    ....    BL       BSP_disp_sprite_block_set_bottom  ; 0x11d78 Section #1
+        0x000020c4:    e1a04000    .@..    MOV      r4,r0
+        0x000020c8:    ea000083    ....    B        {pc} + 0x214  ; 0x22dc
+        0x000020cc:    e1a00006    ....    MOV      r0,r6
+        0x000020d0:    e1a01007    ....    MOV      r1,r7
+        0x000020d4:    ebfffffe    ....    BL       BSP_disp_sprite_block_get_pre_block  ; 0x114d8 Section #1
+        0x000020d8:    e1a04000    .@..    MOV      r4,r0
+        0x000020dc:    ea00007e    ~...    B        {pc} + 0x200  ; 0x22dc
+        0x000020e0:    e1a00006    ....    MOV      r0,r6
+        0x000020e4:    e1a01007    ....    MOV      r1,r7
+        0x000020e8:    ebfffffe    ....    BL       BSP_disp_sprite_block_get_next_block  ; 0x1154c Section #1
+        0x000020ec:    e1a04000    .@..    MOV      r4,r0
+        0x000020f0:    ea000079    y...    B        {pc} + 0x1ec  ; 0x22dc
+        0x000020f4:    e1a00006    ....    MOV      r0,r6
+        0x000020f8:    e1a01007    ....    MOV      r1,r7
+        0x000020fc:    ebfffffe    ....    BL       BSP_disp_sprite_block_get_prio  ; 0x115c4 Section #1
+        0x00002100:    e1a04000    .@..    MOV      r4,r0
+        0x00002104:    ea000074    t...    B        {pc} + 0x1d8  ; 0x22dc
+        0x00002108:    e1a00006    ....    MOV      r0,r6
+        0x0000210c:    e1a01007    ....    MOV      r1,r7
+        0x00002110:    ebfffffe    ....    BL       BSP_disp_sprite_block_open  ; 0x11708 Section #1
+        0x00002114:    e1a04000    .@..    MOV      r4,r0
+        0x00002118:    ea00006f    o...    B        {pc} + 0x1c4  ; 0x22dc
+        0x0000211c:    e1a00006    ....    MOV      r0,r6
+        0x00002120:    e1a01007    ....    MOV      r1,r7
+        0x00002124:    ebfffffe    ....    BL       BSP_disp_sprite_block_close  ; 0x11644 Section #1
+        0x00002128:    e1a04000    .@..    MOV      r4,r0
+        0x0000212c:    ea00006a    j...    B        {pc} + 0x1b0  ; 0x22dc
+        0x00002130:    e1a0000d    ....    MOV      r0,r13
+        0x00002134:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00002138:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x0000213c:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00002140:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00002144:    e2982048    H ..    ADDS     r2,r8,#0x48
+        0x00002148:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x0000214c:    33a03000    .0.3    MOVCC    r3,#0
+        0x00002150:    e3530000    ..S.    CMP      r3,#0
+        0x00002154:    1a000006    ....    BNE      {pc} + 0x20  ; 0x2174
+        0x00002158:    e1a01008    ....    MOV      r1,r8
+        0x0000215c:    e1a00005    ....    MOV      r0,r5
+        0x00002160:    e3a02048    H ..    MOV      r2,#0x48
+        0x00002164:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00002168:    e3500000    ..P.    CMP      r0,#0
+        0x0000216c:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x2188
+        0x00002170:    ea000058    X...    B        {pc} + 0x168  ; 0x22d8
+        0x00002174:    e1a00005    ....    MOV      r0,r5
+        0x00002178:    e3a01048    H...    MOV      r1,#0x48
+        0x0000217c:    ebfffffe    ....    BL       __memzero  ;
+        0x00002180:    e3e0400d    .@..    MVN      r4,#0xd
+        0x00002184:    ea000054    T...    B        {pc} + 0x158  ; 0x22dc
+        0x00002188:    e1a00006    ....    MOV      r0,r6
+        0x0000218c:    e1a01007    ....    MOV      r1,r7
+        0x00002190:    e1a02005    . ..    MOV      r2,r5
+        0x00002194:    ebfffffe    ....    BL       BSP_disp_sprite_block_set_para  ; 0x1197c Section #1
+        0x00002198:    e1a04000    .@..    MOV      r4,r0
+        0x0000219c:    ea00004e    N...    B        {pc} + 0x140  ; 0x22dc
+        0x000021a0:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x000021a4:    e1a00006    ....    MOV      r0,r6
+        0x000021a8:    e1a01007    ....    MOV      r1,r7
+        0x000021ac:    e1a02005    . ..    MOV      r2,r5
+        0x000021b0:    ebfffffe    ....    BL       BSP_disp_sprite_block_get_para  ; 0x113f0 Section #1
+        0x000021b4:    e1a0200d    . ..    MOV      r2,r13
+        0x000021b8:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x000021bc:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000021c0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000021c4:    e2982048    H ..    ADDS     r2,r8,#0x48
+        0x000021c8:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x000021cc:    33a03000    .0.3    MOVCC    r3,#0
+        0x000021d0:    e3530000    ..S.    CMP      r3,#0
+        0x000021d4:    e1a04000    .@..    MOV      r4,r0
+        0x000021d8:    1a00003e    >...    BNE      {pc} + 0x100  ; 0x22d8
+        0x000021dc:    e1a00008    ....    MOV      r0,r8
+        0x000021e0:    e1a01005    ....    MOV      r1,r5
+        0x000021e4:    e3a02048    H ..    MOV      r2,#0x48
+        0x000021e8:    ebfffffe    ....    BL       __copy_to_user  ;
+        0x000021ec:    e3500000    ..P.    CMP      r0,#0
+        0x000021f0:    0a000039    9...    BEQ      {pc} + 0xec  ; 0x22dc
+        0x000021f4:    ea000037    7...    B        {pc} + 0xe4  ; 0x22d8
+        0x000021f8:    e1a0000d    ....    MOV      r0,r13
+        0x000021fc:    e3c03d7f    .=..    BIC      r3,r0,#0x1fc0
+        0x00002200:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00002204:    e24b5094    .PK.    SUB      r5,r11,#0x94
+        0x00002208:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x0000220c:    e2972020      ..    ADDS     r2,r7,#0x20
+        0x00002210:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x00002214:    33a03000    .0.3    MOVCC    r3,#0
+        0x00002218:    e3530000    ..S.    CMP      r3,#0
+        0x0000221c:    1a000006    ....    BNE      {pc} + 0x20  ; 0x223c
+        0x00002220:    e1a01007    ....    MOV      r1,r7
+        0x00002224:    e1a00005    ....    MOV      r0,r5
+        0x00002228:    e3a02020      ..    MOV      r2,#0x20
+        0x0000222c:    ebfffffe    ....    BL       __copy_from_user  ;
+        0x00002230:    e3500000    ..P.    CMP      r0,#0
+        0x00002234:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x2250
+        0x00002238:    ea000026    &...    B        {pc} + 0xa0  ; 0x22d8
+        0x0000223c:    e1a00005    ....    MOV      r0,r5
+        0x00002240:    e3a01020     ...    MOV      r1,#0x20
+        0x00002244:    ebfffffe    ....    BL       __memzero  ;
+        0x00002248:    e3e0400d    .@..    MVN      r4,#0xd
+        0x0000224c:    ea000022    "...    B        {pc} + 0x90  ; 0x22dc
+        0x00002250:    e1a00006    ....    MOV      r0,r6
+        0x00002254:    e1a01005    ....    MOV      r1,r5
+        0x00002258:    ebfffffe    ....    BL       Display_Fb_Request  ; 0x2ca8 Section #1
+        0x0000225c:    e1a04000    .@..    MOV      r4,r0
+        0x00002260:    ea00001d    ....    B        {pc} + 0x7c  ; 0x22dc
+        0x00002264:    e1a00006    ....    MOV      r0,r6
+        0x00002268:    e1a01007    ....    MOV      r1,r7
+        0x0000226c:    ebfffffe    ....    BL       Display_Fb_Release  ; 0x27d4 Section #1
+        0x00002270:    e1a04000    .@..    MOV      r4,r0
+        0x00002274:    ea000018    ....    B        {pc} + 0x68  ; 0x22dc
+        0x00002278:    e1a00006    ....    MOV      r0,r6
+        0x0000227c:    e1a01007    ....    MOV      r1,r7
+        0x00002280:    ebfffffe    ....    BL       disp_mem_request  ; 0x774 Section #1
+        0x00002284:    e1a04000    .@..    MOV      r4,r0
+        0x00002288:    ea000013    ....    B        {pc} + 0x54  ; 0x22dc
+        0x0000228c:    e1a00006    ....    MOV      r0,r6
+        0x00002290:    ebfffffe    ....    BL       disp_mem_release  ; 0x6f4 Section #1
+        0x00002294:    e1a04000    .@..    MOV      r4,r0
+        0x00002298:    ea00000f    ....    B        {pc} + 0x44  ; 0x22dc
+        0x0000229c:    e51f3a2c    ,:..    LDR      r3,[pc,#-2604] ; [([Section 17] + 536) = 0x1878]  = 0x218
+        0x000022a0:    e3a04000    .@..    MOV      r4,#0
+        0x000022a4:    e5836018    .`..    STR      r6,[r3,#0x18]
+        0x000022a8:    ea00000b    ....    B        {pc} + 0x34  ; 0x22dc
+        0x000022ac:    e51f2a3c    <*..    LDR      r2,[pc,#-2620] ; [([Section 17] + 536) = 0x1878]  = 0x218
+        0x000022b0:    e3a0300c    .0..    MOV      r3,#0xc
+        0x000022b4:    e0232693    .&#.    MLA      r3,r3,r6,r2
+        0x000022b8:    e5934004    .@..    LDR      r4,[r3,#4]
+        0x000022bc:    ea000006    ....    B        {pc} + 0x20  ; 0x22dc
+        0x000022c0:    ebfffffe    ....    BL       BSP_disp_clk_off  ; 0xa970 Section #1
+        0x000022c4:    e3a04000    .@..    MOV      r4,#0
+        0x000022c8:    ea000003    ....    B        {pc} + 0x14  ; 0x22dc
+        0x000022cc:    ebfffffe    ....    BL       BSP_disp_clk_on  ; 0xab80 Section #1
+        0x000022d0:    e3a04000    .@..    MOV      r4,#0
+        0x000022d4:    ea000000    ....    B        {pc} + 0x8  ; 0x22dc
+        0x000022d8:    e3e0400d    .@..    MVN      r4,#0xd
+        0x000022dc:    e1a00004    ....    MOV      r0,r4
+        0x000022e0:    e24bd024    $.K.    SUB      r13,r11,#0x24
+        0x000022e4:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    fb_free
+    $a
+        0x000022e8:    e1a0c00d    ....    MOV      r12,r13
+        0x000022ec:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000022f0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000022f4:    e3500000    ..P.    CMP      r0,#0
+        0x000022f8:    159f1034    4...    LDRNE    r1,[pc,#52]   ; [([Section 17] + 16948) = 0x2334]  = 0x4234
+        0x000022fc:    1a000004    ....    BNE      {pc} + 0x18  ; 0x2314
+        0x00002300:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00002304:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00002308:    e1500003    ..P.    CMP      r0,r3
+        0x0000230c:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x2320
+        0x00002310:    e1a01002    ....    MOV      r1,r2
+        0x00002314:    e591200c    . ..    LDR      r2,[r1,#0xc]
+        0x00002318:    e3520000    ..R.    CMP      r2,#0
+        0x0000231c:    1afffff8    ....    BNE      {pc} - 0x18  ; 0x2304
+        0x00002320:    e591300c    .0..    LDR      r3,[r1,#0xc]
+        0x00002324:    e3530000    ..S.    CMP      r3,#0
+        0x00002328:    1593300c    .0..    LDRNE    r3,[r3,#0xc]
+        0x0000232c:    1581300c    .0..    STRNE    r3,[r1,#0xc]
+        0x00002330:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00002334:    00004234    4B..    DCD    16948 ; [Section 17]
+    layer_hdl_to_fb_id
+    $a
+        0x00002338:    e1a0c00d    ....    MOV      r12,r13
+        0x0000233c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002340:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002344:    e59f2034    4 ..    LDR      r2,[pc,#52]   ; [g_fbi = 0x2380] = 0
+        0x00002348:    e1a0c000    ....    MOV      r12,r0
+        0x0000234c:    e3a00000    ....    MOV      r0,#0
+        0x00002350:    e5923050    P0..    LDR      r3,[r2,#0x50]
+        0x00002354:    e153000c    ..S.    CMP      r3,r12
+        0x00002358:    1a000002    ....    BNE      {pc} + 0x10  ; 0x2368
+        0x0000235c:    e59230d0    .0..    LDR      r3,[r2,#0xd0]
+        0x00002360:    e1530001    ..S.    CMP      r3,r1
+        0x00002364:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x00002368:    e2800001    ....    ADD      r0,r0,#1
+        0x0000236c:    e2822004    . ..    ADD      r2,r2,#4
+        0x00002370:    e3500020     .P.    CMP      r0,#0x20
+        0x00002374:    1afffff5    ....    BNE      {pc} - 0x24  ; 0x2350
+        0x00002378:    e3e00000    ....    MVN      r0,#0
+        0x0000237c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00002380:    00000000    ....    DCD    0 ; g_fbi
+    Fb_open
+    $a
+        0x00002384:    e1a0c00d    ....    MOV      r12,r13
+        0x00002388:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000238c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002390:    e3a00000    ....    MOV      r0,#0
+        0x00002394:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    Fb_release
+        0x00002398:    e1a0c00d    ....    MOV      r12,r13
+        0x0000239c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000023a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000023a4:    e3a00000    ....    MOV      r0,#0
+        0x000023a8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    Fb_Init
+        0x000023ac:    e1a0c00d    ....    MOV      r12,r13
+        0x000023b0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000023b4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000023b8:    e3a00000    ....    MOV      r0,#0
+        0x000023bc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    Fb_cursor
+        0x000023c0:    e1a0c00d    ....    MOV      r12,r13
+        0x000023c4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000023c8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000023cc:    e59f0008    ....    LDR      r0,[pc,#8]    ; [([Section 10] + 1050) = 0x23dc]  = 0x41a
+        0x000023d0:    ebfffffe    ....    BL       printk  ;
+        0x000023d4:    e3a00000    ....    MOV      r0,#0
+        0x000023d8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000023dc:    0000041a    ....    DCD    1050 ; [Section 10]
+    Fb_check_var
+    $a
+        0x000023e0:    e1a0c00d    ....    MOV      r12,r13
+        0x000023e4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000023e8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000023ec:    e59f0008    ....    LDR      r0,[pc,#8]    ; [([Section 10] + 1061) = 0x23fc]  = 0x425
+        0x000023f0:    ebfffffe    ....    BL       printk  ;
+        0x000023f4:    e3a00000    ....    MOV      r0,#0
+        0x000023f8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000023fc:    00000425    %...    DCD    1061 ; [Section 10]
+    var_to_fb
+    $a
+        0x00002400:    e1a0c00d    ....    MOV      r12,r13
+        0x00002404:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00002408:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000240c:    e591c050    P...    LDR      r12,[r1,#0x50]
+        0x00002410:    e1a05000    .P..    MOV      r5,r0
+        0x00002414:    e1a06002    .`..    MOV      r6,r2
+        0x00002418:    e35c0000    ..\.    CMP      r12,#0
+        0x0000241c:    1a000091    ....    BNE      {pc} + 0x24c  ; 0x2668
+        0x00002420:    e5912018    . ..    LDR      r2,[r1,#0x18]
+        0x00002424:    e3a03001    .0..    MOV      r3,#1
+        0x00002428:    e581308c    .0..    STR      r3,[r1,#0x8c]
+        0x0000242c:    e3520008    ..R.    CMP      r2,#8
+        0x00002430:    0a000020     ...    BEQ      {pc} + 0x88  ; 0x24b8
+        0x00002434:    8a000006    ....    BHI      {pc} + 0x20  ; 0x2454
+        0x00002438:    e3520002    ..R.    CMP      r2,#2
+        0x0000243c:    0a000011    ....    BEQ      {pc} + 0x4c  ; 0x2488
+        0x00002440:    e3520004    ..R.    CMP      r2,#4
+        0x00002444:    0a000017    ....    BEQ      {pc} + 0x64  ; 0x24a8
+        0x00002448:    e1520003    ..R.    CMP      r2,r3
+        0x0000244c:    1a000055    U...    BNE      {pc} + 0x15c  ; 0x25a8
+        0x00002450:    ea000006    ....    B        {pc} + 0x20  ; 0x2470
+        0x00002454:    e3520018    ..R.    CMP      r2,#0x18
+        0x00002458:    0a000045    E...    BEQ      {pc} + 0x11c  ; 0x2574
+        0x0000245c:    e3520020     .R.    CMP      r2,#0x20
+        0x00002460:    0a000049    I...    BEQ      {pc} + 0x12c  ; 0x258c
+        0x00002464:    e3520010    ..R.    CMP      r2,#0x10
+        0x00002468:    1a00004e    N...    BNE      {pc} + 0x140  ; 0x25a8
+        0x0000246c:    ea000015    ....    B        {pc} + 0x5c  ; 0x24c8
+        0x00002470:    e5812024    $ ..    STR      r2,[r1,#0x24]
+        0x00002474:    e581c090    ....    STR      r12,[r1,#0x90]
+        0x00002478:    e581c038    8...    STR      r12,[r1,#0x38]
+        0x0000247c:    e581c02c    ,...    STR      r12,[r1,#0x2c]
+        0x00002480:    e581c020     ...    STR      r12,[r1,#0x20]
+        0x00002484:    ea000004    ....    B        {pc} + 0x18  ; 0x249c
+        0x00002488:    e581c020     ...    STR      r12,[r1,#0x20]
+        0x0000248c:    e5812024    $ ..    STR      r2,[r1,#0x24]
+        0x00002490:    e5813090    .0..    STR      r3,[r1,#0x90]
+        0x00002494:    e581c038    8...    STR      r12,[r1,#0x38]
+        0x00002498:    e581c02c    ,...    STR      r12,[r1,#0x2c]
+        0x0000249c:    e581203c    < ..    STR      r2,[r1,#0x3c]
+        0x000024a0:    e5812030    0 ..    STR      r2,[r1,#0x30]
+        0x000024a4:    ea000044    D...    B        {pc} + 0x118  ; 0x25bc
+        0x000024a8:    e581c020     ...    STR      r12,[r1,#0x20]
+        0x000024ac:    e3a03002    .0..    MOV      r3,#2
+        0x000024b0:    e5812024    $ ..    STR      r2,[r1,#0x24]
+        0x000024b4:    eafffff5    ....    B        {pc} - 0x24  ; 0x2490
+        0x000024b8:    e581c020     ...    STR      r12,[r1,#0x20]
+        0x000024bc:    e3a03003    .0..    MOV      r3,#3
+        0x000024c0:    e5812024    $ ..    STR      r2,[r1,#0x24]
+        0x000024c4:    eafffff1    ....    B        {pc} - 0x34  ; 0x2490
+        0x000024c8:    e5912024    $ ..    LDR      r2,[r1,#0x24]
+        0x000024cc:    e3520006    ..R.    CMP      r2,#6
+        0x000024d0:    1a000007    ....    BNE      {pc} + 0x24  ; 0x24f4
+        0x000024d4:    e5913030    00..    LDR      r3,[r1,#0x30]
+        0x000024d8:    e3530005    ..S.    CMP      r3,#5
+        0x000024dc:    1a000013    ....    BNE      {pc} + 0x54  ; 0x2530
+        0x000024e0:    e591303c    <0..    LDR      r3,[r1,#0x3c]
+        0x000024e4:    e3530005    ..S.    CMP      r3,#5
+        0x000024e8:    03a03004    .0..    MOVEQ    r3,#4
+        0x000024ec:    1a00000f    ....    BNE      {pc} + 0x44  ; 0x2530
+        0x000024f0:    ea00001a    ....    B        {pc} + 0x70  ; 0x2560
+        0x000024f4:    e3520005    ..R.    CMP      r2,#5
+        0x000024f8:    1a00000c    ....    BNE      {pc} + 0x38  ; 0x2530
+        0x000024fc:    e5913030    00..    LDR      r3,[r1,#0x30]
+        0x00002500:    e3530006    ..S.    CMP      r3,#6
+        0x00002504:    1a000004    ....    BNE      {pc} + 0x18  ; 0x251c
+        0x00002508:    e591303c    <0..    LDR      r3,[r1,#0x3c]
+        0x0000250c:    e3530005    ..S.    CMP      r3,#5
+        0x00002510:    05812090    . ..    STREQ    r2,[r1,#0x90]
+        0x00002514:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x2530
+        0x00002518:    ea000027    '...    B        {pc} + 0xa4  ; 0x25bc
+        0x0000251c:    e3530005    ..S.    CMP      r3,#5
+        0x00002520:    1a000002    ....    BNE      {pc} + 0x10  ; 0x2530
+        0x00002524:    e591303c    <0..    LDR      r3,[r1,#0x3c]
+        0x00002528:    e3530006    ..S.    CMP      r3,#6
+        0x0000252c:    0a00000b    ....    BEQ      {pc} + 0x34  ; 0x2560
+        0x00002530:    e5913048    H0..    LDR      r3,[r1,#0x48]
+        0x00002534:    e3530001    ..S.    CMP      r3,#1
+        0x00002538:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x2568
+        0x0000253c:    e3520005    ..R.    CMP      r2,#5
+        0x00002540:    1a000008    ....    BNE      {pc} + 0x28  ; 0x2568
+        0x00002544:    e5913030    00..    LDR      r3,[r1,#0x30]
+        0x00002548:    e3530005    ..S.    CMP      r3,#5
+        0x0000254c:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x2568
+        0x00002550:    e591303c    <0..    LDR      r3,[r1,#0x3c]
+        0x00002554:    e3530005    ..S.    CMP      r3,#5
+        0x00002558:    1a000002    ....    BNE      {pc} + 0x10  ; 0x2568
+        0x0000255c:    e2833002    .0..    ADD      r3,r3,#2
+        0x00002560:    e5813090    .0..    STR      r3,[r1,#0x90]
+        0x00002564:    ea000014    ....    B        {pc} + 0x58  ; 0x25bc
+        0x00002568:    e59f013c    <...    LDR      r0,[pc,#316]  ; [([Section 10] + 1075) = 0x26ac]  = 0x433
+        0x0000256c:    e3a01010    ....    MOV      r1,#0x10
+        0x00002570:    ea00000e    ....    B        {pc} + 0x40  ; 0x25b0
+        0x00002574:    e3a02008    . ..    MOV      r2,#8
+        0x00002578:    e3a03009    .0..    MOV      r3,#9
+        0x0000257c:    e581203c    < ..    STR      r2,[r1,#0x3c]
+        0x00002580:    e5812024    $ ..    STR      r2,[r1,#0x24]
+        0x00002584:    e5813090    .0..    STR      r3,[r1,#0x90]
+        0x00002588:    eaffffc4    ....    B        {pc} - 0xe8  ; 0x24a0
+        0x0000258c:    e3a02008    . ..    MOV      r2,#8
+        0x00002590:    e3a0300a    .0..    MOV      r3,#0xa
+        0x00002594:    e581203c    < ..    STR      r2,[r1,#0x3c]
+        0x00002598:    e5812048    H ..    STR      r2,[r1,#0x48]
+        0x0000259c:    e5813090    .0..    STR      r3,[r1,#0x90]
+        0x000025a0:    e5812024    $ ..    STR      r2,[r1,#0x24]
+        0x000025a4:    eaffffbd    ....    B        {pc} - 0x104  ; 0x24a0
+        0x000025a8:    e59f00fc    ....    LDR      r0,[pc,#252]  ; [([Section 10] + 1075) = 0x26ac]  = 0x433
+        0x000025ac:    e1a01002    ....    MOV      r1,r2
+        0x000025b0:    ebfffffe    ....    BL       printk  ;
+        0x000025b4:    e3e00015    ....    MVN      r0,#0x15
+        0x000025b8:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x000025bc:    e5913018    .0..    LDR      r3,[r1,#0x18]
+        0x000025c0:    e353000f    ..S.    CMP      r3,#0xf
+        0x000025c4:    9a000027    '...    BLS      {pc} + 0xa4  ; 0x2668
+        0x000025c8:    e5910098    ....    LDR      r0,[r1,#0x98]
+        0x000025cc:    e5913094    .0..    LDR      r3,[r1,#0x94]
+        0x000025d0:    e3500000    ..P.    CMP      r0,#0
+        0x000025d4:    1a00000f    ....    BNE      {pc} + 0x44  ; 0x2618
+        0x000025d8:    e3530000    ..S.    CMP      r3,#0
+        0x000025dc:    e5914024    $@..    LDR      r4,[r1,#0x24]
+        0x000025e0:    e591c030    0...    LDR      r12,[r1,#0x30]
+        0x000025e4:    0591203c    < ..    LDREQ    r2,[r1,#0x3c]
+        0x000025e8:    05813038    80..    STREQ    r3,[r1,#0x38]
+        0x000025ec:    0082300c    .0..    ADDEQ    r3,r2,r12
+        0x000025f0:    05813020     0..    STREQ    r3,[r1,#0x20]
+        0x000025f4:    0a00000f    ....    BEQ      {pc} + 0x44  ; 0x2638
+        0x000025f8:    e5912048    H ..    LDR      r2,[r1,#0x48]
+        0x000025fc:    e5810044    D...    STR      r0,[r1,#0x44]
+        0x00002600:    e0823004    .0..    ADD      r3,r2,r4
+        0x00002604:    e581302c    ,0..    STR      r3,[r1,#0x2c]
+        0x00002608:    e5812020      ..    STR      r2,[r1,#0x20]
+        0x0000260c:    e083300c    .0..    ADD      r3,r3,r12
+        0x00002610:    e5813038    80..    STR      r3,[r1,#0x38]
+        0x00002614:    ea000013    ....    B        {pc} + 0x54  ; 0x2668
+        0x00002618:    e3530000    ..S.    CMP      r3,#0
+        0x0000261c:    e591c030    0...    LDR      r12,[r1,#0x30]
+        0x00002620:    e591403c    <@..    LDR      r4,[r1,#0x3c]
+        0x00002624:    1a000007    ....    BNE      {pc} + 0x24  ; 0x2648
+        0x00002628:    e5912024    $ ..    LDR      r2,[r1,#0x24]
+        0x0000262c:    e5813020     0..    STR      r3,[r1,#0x20]
+        0x00002630:    e082300c    .0..    ADD      r3,r2,r12
+        0x00002634:    e5813038    80..    STR      r3,[r1,#0x38]
+        0x00002638:    e0833004    .0..    ADD      r3,r3,r4
+        0x0000263c:    e581202c    , ..    STR      r2,[r1,#0x2c]
+        0x00002640:    e5813044    D0..    STR      r3,[r1,#0x44]
+        0x00002644:    ea000007    ....    B        {pc} + 0x24  ; 0x2668
+        0x00002648:    e5912048    H ..    LDR      r2,[r1,#0x48]
+        0x0000264c:    e3a03000    .0..    MOV      r3,#0
+        0x00002650:    e5813044    D0..    STR      r3,[r1,#0x44]
+        0x00002654:    e0823004    .0..    ADD      r3,r2,r4
+        0x00002658:    e581302c    ,0..    STR      r3,[r1,#0x2c]
+        0x0000265c:    e5812038    8 ..    STR      r2,[r1,#0x38]
+        0x00002660:    e083300c    .0..    ADD      r3,r3,r12
+        0x00002664:    e5813020     0..    STR      r3,[r1,#0x20]
+        0x00002668:    e591308c    .0..    LDR      r3,[r1,#0x8c]
+        0x0000266c:    e3a00000    ....    MOV      r0,#0
+        0x00002670:    e585301c    .0..    STR      r3,[r5,#0x1c]
+        0x00002674:    e5913090    .0..    LDR      r3,[r1,#0x90]
+        0x00002678:    e5853014    .0..    STR      r3,[r5,#0x14]
+        0x0000267c:    e5913094    .0..    LDR      r3,[r1,#0x94]
+        0x00002680:    e5853018    .0..    STR      r3,[r5,#0x18]
+        0x00002684:    e5913098    .0..    LDR      r3,[r1,#0x98]
+        0x00002688:    e5c53020     0..    STRB     r3,[r5,#0x20]
+        0x0000268c:    e5913008    .0..    LDR      r3,[r1,#8]
+        0x00002690:    e585300c    .0..    STR      r3,[r5,#0xc]
+        0x00002694:    e5913008    .0..    LDR      r3,[r1,#8]
+        0x00002698:    e5912018    . ..    LDR      r2,[r1,#0x18]
+        0x0000269c:    e0030293    ....    MUL      r3,r3,r2
+        0x000026a0:    e1a031a3    .1..    LSR      r3,r3,#3
+        0x000026a4:    e586302c    ,0..    STR      r3,[r6,#0x2c]
+        0x000026a8:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000026ac:    00000433    3...    DCD    1075 ; [Section 10]
+    fb_malloc
+    $a
+        0x000026b0:    e1a0c00d    ....    MOV      r12,r13
+        0x000026b4:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000026b8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000026bc:    e2507000    .pP.    SUBS     r7,r0,#0
+        0x000026c0:    01a00007    ....    MOVEQ    r0,r7
+        0x000026c4:    089da8f0    ....    LDMEQ    r13,{r4-r7,r11,r13,pc}
+        0x000026c8:    e2873eff    .>..    ADD      r3,r7,#0xff0
+        0x000026cc:    e59fc090    ....    LDR      r12,[pc,#144]  ; [([Section 17] + 16948) = 0x2764]  = 0x4234
+        0x000026d0:    e283300f    .0..    ADD      r3,r3,#0xf
+        0x000026d4:    e3c36eff    .n..    BIC      r6,r3,#0xff0
+        0x000026d8:    e3c6600f    .`..    BIC      r6,r6,#0xf
+        0x000026dc:    ea000007    ....    B        {pc} + 0x24  ; 0x2700
+        0x000026e0:    e89c000c    ....    LDM      r12,{r2,r3}
+        0x000026e4:    e0823003    .0..    ADD      r3,r2,r3
+        0x000026e8:    e5912000    . ..    LDR      r2,[r1,#0]
+        0x000026ec:    e2833a02    .:..    ADD      r3,r3,#0x2000
+        0x000026f0:    e0833006    .0..    ADD      r3,r3,r6
+        0x000026f4:    e1520003    ..R.    CMP      r2,r3
+        0x000026f8:    2a000003    ...*    BCS      {pc} + 0x14  ; 0x270c
+        0x000026fc:    e1a0c001    ....    MOV      r12,r1
+        0x00002700:    e59c100c    ....    LDR      r1,[r12,#0xc]
+        0x00002704:    e3510000    ..Q.    CMP      r1,#0
+        0x00002708:    1afffff4    ....    BNE      {pc} - 0x28  ; 0x26e0
+        0x0000270c:    e59c500c    .P..    LDR      r5,[r12,#0xc]
+        0x00002710:    e3550000    ..U.    CMP      r5,#0
+        0x00002714:    1a000003    ....    BNE      {pc} + 0x14  ; 0x2728
+        0x00002718:    e59f0048    H...    LDR      r0,[pc,#72]   ; [([Section 10] + 1116) = 0x2768]  = 0x45c
+        0x0000271c:    ebfffffe    ....    BL       printk  ;
+        0x00002720:    e1a00005    ....    MOV      r0,r5
+        0x00002724:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x00002728:    e59c1004    ....    LDR      r1,[r12,#4]
+        0x0000272c:    e59c2000    . ..    LDR      r2,[r12,#0]
+        0x00002730:    e0914002    .@..    ADDS     r4,r1,r2
+        0x00002734:    1a000003    ....    BNE      {pc} + 0x14  ; 0x2748
+        0x00002738:    e59f002c    ,...    LDR      r0,[pc,#44]   ; [([Section 10] + 1168) = 0x276c]  = 0x490
+        0x0000273c:    ebfffffe    ....    BL       printk  ;
+        0x00002740:    e1a00004    ....    MOV      r0,r4
+        0x00002744:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x00002748:    e2843a01    .:..    ADD      r3,r4,#0x1000
+        0x0000274c:    e584500c    .P..    STR      r5,[r4,#0xc]
+        0x00002750:    e7813002    .0..    STR      r3,[r1,r2]
+        0x00002754:    e1a00003    ....    MOV      r0,r3
+        0x00002758:    e58c400c    .@..    STR      r4,[r12,#0xc]
+        0x0000275c:    e98400c0    ....    STMIB    r4,{r6,r7}
+        0x00002760:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00002764:    00004234    4B..    DCD    16948 ; [Section 17]
+        0x00002768:    0000045c    \...    DCD    1116 ; [Section 10]
+        0x0000276c:    00000490    ....    DCD    1168 ; [Section 10]
+    fb_create_heap
+    $a
+        0x00002770:    e1a0c00d    ....    MOV      r12,r13
+        0x00002774:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00002778:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000277c:    e3700105    ..p.    CMN      r0,#0x40000001
+        0x00002780:    e1a05000    .P..    MOV      r5,r0
+        0x00002784:    93e00000    ....    MVNLS    r0,#0
+        0x00002788:    989da830    0...    LDMLS    r13,{r4,r5,r11,r13,pc}
+        0x0000278c:    e59fc038    8...    LDR      r12,[pc,#56]   ; [([Section 17] + 16948) = 0x27cc]  = 0x4234
+        0x00002790:    e081e005    ....    ADD      r14,r1,r5
+        0x00002794:    e3a04000    .@..    MOV      r4,#0
+        0x00002798:    e1a01005    ....    MOV      r1,r5
+        0x0000279c:    e1a0200e    . ..    MOV      r2,r14
+        0x000027a0:    e59f0028    (...    LDR      r0,[pc,#40]   ; [([Section 10] + 1217) = 0x27d0]  = 0x4c1
+        0x000027a4:    e1a0300c    .0..    MOV      r3,r12
+        0x000027a8:    e58c401c    .@..    STR      r4,[r12,#0x1c]
+        0x000027ac:    e5a3e010    ....    STR      r14,[r3,#0x10]!
+        0x000027b0:    e58c4014    .@..    STR      r4,[r12,#0x14]
+        0x000027b4:    e58c300c    .0..    STR      r3,[r12,#0xc]
+        0x000027b8:    e58c4004    .@..    STR      r4,[r12,#4]
+        0x000027bc:    e58c5000    .P..    STR      r5,[r12,#0]
+        0x000027c0:    ebfffffe    ....    BL       printk  ;
+        0x000027c4:    e1a00004    ....    MOV      r0,r4
+        0x000027c8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000027cc:    00004234    4B..    DCD    16948 ; [Section 17]
+        0x000027d0:    000004c1    ....    DCD    1217 ; [Section 10]
+    Display_Fb_Release
+    $a
+        0x000027d4:    e1a0c00d    ....    MOV      r12,r13
+        0x000027d8:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000027dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000027e0:    e1a05001    .P..    MOV      r5,r1
+        0x000027e4:    e1a04000    .@..    MOV      r4,r0
+        0x000027e8:    ebfffffe    ....    BL       layer_hdl_to_fb_id  ; 0x2338 Section #1
+        0x000027ec:    e1a06000    .`..    MOV      r6,r0
+        0x000027f0:    e59f00b8    ....    LDR      r0,[pc,#184]  ; [([Section 10] + 1234) = 0x28b0]  = 0x4d2
+        0x000027f4:    ebfffffe    ....    BL       printk  ;
+        0x000027f8:    e3560000    ..V.    CMP      r6,#0
+        0x000027fc:    ba000024    $...    BLT      {pc} + 0x98  ; 0x2894
+        0x00002800:    e59f30ac    .0..    LDR      r3,[pc,#172]  ; [g_fbi = 0x28b4] = 0
+        0x00002804:    e2862054    T ..    ADD      r2,r6,#0x54
+        0x00002808:    e1a01005    ....    MOV      r1,r5
+        0x0000280c:    e1a00004    ....    MOV      r0,r4
+        0x00002810:    e7935102    .Q..    LDR      r5,[r3,r2,LSL #2]
+        0x00002814:    ebfffffe    ....    BL       BSP_disp_layer_release  ; 0xecc0 Section #1
+        0x00002818:    e1a00005    ....    MOV      r0,r5
+        0x0000281c:    ebfffffe    ....    BL       unregister_framebuffer  ;
+        0x00002820:    e59530d4    .0..    LDR      r3,[r5,#0xd4]
+        0x00002824:    e3e01000    ....    MVN      r1,#0
+        0x00002828:    e595022c    ,...    LDR      r0,[r5,#0x22c]
+        0x0000282c:    e2833eff    .>..    ADD      r3,r3,#0xff0
+        0x00002830:    e283300f    .0..    ADD      r3,r3,#0xf
+        0x00002834:    e3c33eff    .>..    BIC      r3,r3,#0xff0
+        0x00002838:    e3c3300f    .0..    BIC      r3,r3,#0xf
+        0x0000283c:    e0833001    .0..    ADD      r3,r3,r1
+        0x00002840:    e1a045a3    .E..    LSR      r4,r3,#11
+        0x00002844:    e1b040a4    .@..    LSRS     r4,r4,#1
+        0x00002848:    e2811001    ....    ADD      r1,r1,#1
+        0x0000284c:    1afffffc    ....    BNE      {pc} - 0x8  ; 0x2844
+        0x00002850:    ebfffffe    ....    BL       free_pages  ;
+        0x00002854:    e1a00005    ....    MOV      r0,r5
+        0x00002858:    ebfffffe    ....    BL       framebuffer_release  ;
+        0x0000285c:    e59f1050    P...    LDR      r1,[pc,#80]   ; [g_fbi = 0x28b4] = 0
+        0x00002860:    e5950000    ....    LDR      r0,[r5,#0]
+        0x00002864:    e2863034    40..    ADD      r3,r6,#0x34
+        0x00002868:    e286c054    T...    ADD      r12,r6,#0x54
+        0x0000286c:    e1a0e004    ....    MOV      r14,r4
+        0x00002870:    e5d121d0    .!..    LDRB     r2,[r1,#0x1d0]
+        0x00002874:    e2800014    ....    ADD      r0,r0,#0x14
+        0x00002878:    e7814103    .A..    STR      r4,[r1,r3,LSL #2]
+        0x0000287c:    e3e03000    .0..    MVN      r3,#0
+        0x00002880:    e781410c    .A..    STR      r4,[r1,r12,LSL #2]
+        0x00002884:    e0822003    . ..    ADD      r2,r2,r3
+        0x00002888:    e7813100    .1..    STR      r3,[r1,r0,LSL #2]
+        0x0000288c:    e5c121d0    .!..    STRB     r2,[r1,#0x1d0]
+        0x00002890:    ea000004    ....    B        {pc} + 0x18  ; 0x28a8
+        0x00002894:    e1a01004    ....    MOV      r1,r4
+        0x00002898:    e1a02005    . ..    MOV      r2,r5
+        0x0000289c:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1259) = 0x28b8]  = 0x4eb
+        0x000028a0:    ebfffffe    ....    BL       printk  ;
+        0x000028a4:    e3e0e000    ....    MVN      r14,#0
+        0x000028a8:    e1a0000e    ....    MOV      r0,r14
+        0x000028ac:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000028b0:    000004d2    ....    DCD    1234 ; [Section 10]
+        0x000028b4:    00000000    ....    DCD    0 ; g_fbi
+        0x000028b8:    000004eb    ....    DCD    1259 ; [Section 10]
+    Fb_Exit
+    $a
+        0x000028bc:    e1a0c00d    ....    MOV      r12,r13
+        0x000028c0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000028c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000028c8:    e3a05000    .P..    MOV      r5,#0
+        0x000028cc:    ea00000f    ....    B        {pc} + 0x44  ; 0x2910
+        0x000028d0:    e5943050    P0..    LDR      r3,[r4,#0x50]
+        0x000028d4:    e1530005    ..S.    CMP      r3,r5
+        0x000028d8:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x28f4
+        0x000028dc:    e5943150    P1..    LDR      r3,[r4,#0x150]
+        0x000028e0:    e1a00005    ....    MOV      r0,r5
+        0x000028e4:    e3530000    ..S.    CMP      r3,#0
+        0x000028e8:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x28f4
+        0x000028ec:    e59410d0    ....    LDR      r1,[r4,#0xd0]
+        0x000028f0:    ebfffffe    ....    BL       Display_Fb_Release  ; 0x27d4 Section #1
+        0x000028f4:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [(g_fbi + 128) = 0x2920]  = 0x80
+        0x000028f8:    e2844004    .@..    ADD      r4,r4,#4
+        0x000028fc:    e1540003    ..T.    CMP      r4,r3
+        0x00002900:    1afffff2    ....    BNE      {pc} - 0x30  ; 0x28d0
+        0x00002904:    e2855001    .P..    ADD      r5,r5,#1
+        0x00002908:    e3550002    ..U.    CMP      r5,#2
+        0x0000290c:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x2918
+        0x00002910:    e59f400c    .@..    LDR      r4,[pc,#12]   ; [g_fbi = 0x2924] = 0
+        0x00002914:    eaffffed    ....    B        {pc} - 0x44  ; 0x28d0
+        0x00002918:    e3a00000    ....    MOV      r0,#0
+        0x0000291c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00002920:    00000080    ....    DCD    128 ; g_fbi
+        0x00002924:    00000000    ....    DCD    0 ; g_fbi
+    Fb_ioctl
+    $a
+        0x00002928:    e1a0c00d    ....    MOV      r12,r13
+        0x0000292c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002930:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002934:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x00002938:    e3510c47    G.Q.    CMP      r1,#0x4700
+        0x0000293c:    e1a0c000    ....    MOV      r12,r0
+        0x00002940:    e3a03000    .0..    MOV      r3,#0
+        0x00002944:    e1a00002    ....    MOV      r0,r2
+        0x00002948:    e50b3010    .0..    STR      r3,[r11,#-0x10]
+        0x0000294c:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x2960
+        0x00002950:    e3043701    .7..    MOV      r3,#0x4701
+        0x00002954:    e1510003    ..Q.    CMP      r1,r3
+        0x00002958:    1a000020     ...    BNE      {pc} + 0x88  ; 0x29e0
+        0x0000295c:    ea00000d    ....    B        {pc} + 0x3c  ; 0x2998
+        0x00002960:    e59c1000    ....    LDR      r1,[r12,#0]
+        0x00002964:    e1a0200d    . ..    MOV      r2,r13
+        0x00002968:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x0000296c:    e59f2078    x ..    LDR      r2,[pc,#120]  ; [g_fbi = 0x29ec] = 0
+        0x00002970:    e2811034    4...    ADD      r1,r1,#0x34
+        0x00002974:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x00002978:    e7922101    .!..    LDR      r2,[r2,r1,LSL #2]
+        0x0000297c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00002980:    e2901004    ....    ADDS     r1,r0,#4
+        0x00002984:    30d11003    ...0    SBCSCC   r1,r1,r3
+        0x00002988:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000298c:    e50b2010    . ..    STR      r2,[r11,#-0x10]
+        0x00002990:    e3530000    ..S.    CMP      r3,#0
+        0x00002994:    ea000009    ....    B        {pc} + 0x2c  ; 0x29c0
+        0x00002998:    e1a0200d    . ..    MOV      r2,r13
+        0x0000299c:    e3c23d7f    .=..    BIC      r3,r2,#0x1fc0
+        0x000029a0:    e59c20d0    . ..    LDR      r2,[r12,#0xd0]
+        0x000029a4:    e3c3303f    ?0..    BIC      r3,r3,#0x3f
+        0x000029a8:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000029ac:    e50b2010    . ..    STR      r2,[r11,#-0x10]
+        0x000029b0:    e2902004    . ..    ADDS     r2,r0,#4
+        0x000029b4:    30d22003    . .0    SBCSCC   r2,r2,r3
+        0x000029b8:    33a03000    .0.3    MOVCC    r3,#0
+        0x000029bc:    e3530000    ..S.    CMP      r3,#0
+        0x000029c0:    1a000004    ....    BNE      {pc} + 0x18  ; 0x29d8
+        0x000029c4:    e24b1010    ..K.    SUB      r1,r11,#0x10
+        0x000029c8:    e3a02004    . ..    MOV      r2,#4
+        0x000029cc:    ebfffffe    ....    BL       __copy_to_user  ;
+        0x000029d0:    e3500000    ..P.    CMP      r0,#0
+        0x000029d4:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x29e0
+        0x000029d8:    e3e0000d    ....    MVN      r0,#0xd
+        0x000029dc:    ea000000    ....    B        {pc} + 0x8  ; 0x29e4
+        0x000029e0:    e3a00000    ....    MOV      r0,#0
+        0x000029e4:    e24bd00c    ..K.    SUB      r13,r11,#0xc
+        0x000029e8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000029ec:    00000000    ....    DCD    0 ; g_fbi
+    Fb_pan_display
+    $a
+        0x000029f0:    e1a0c00d    ....    MOV      r12,r13
+        0x000029f4:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x000029f8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000029fc:    e24dd05c    \.M.    SUB      r13,r13,#0x5c
+        0x00002a00:    e5913000    .0..    LDR      r3,[r1,#0]
+        0x00002a04:    e1a04000    .@..    MOV      r4,r0
+        0x00002a08:    e59f1078    x...    LDR      r1,[pc,#120]  ; [g_fbi = 0x2a88] = 0
+        0x00002a0c:    e2832014    . ..    ADD      r2,r3,#0x14
+        0x00002a10:    e2833034    40..    ADD      r3,r3,#0x34
+        0x00002a14:    e59f0070    p...    LDR      r0,[pc,#112]  ; [([Section 10] + 1312) = 0x2a8c]  = 0x520
+        0x00002a18:    e7915102    .Q..    LDR      r5,[r1,r2,LSL #2]
+        0x00002a1c:    e7916103    .a..    LDR      r6,[r1,r3,LSL #2]
+        0x00002a20:    ebfffffe    ....    BL       printk  ;
+        0x00002a24:    e24b2070    p K.    SUB      r2,r11,#0x70
+        0x00002a28:    e1a00005    ....    MOV      r0,r5
+        0x00002a2c:    e1a01006    ....    MOV      r1,r6
+        0x00002a30:    ebfffffe    ....    BL       BSP_disp_layer_get_para  ; 0xe874 Section #1
+        0x00002a34:    e51b3070    p0..    LDR      r3,[r11,#-0x70]
+        0x00002a38:    e5942004    . ..    LDR      r2,[r4,#4]
+        0x00002a3c:    e1a00005    ....    MOV      r0,r5
+        0x00002a40:    e5941014    ....    LDR      r1,[r4,#0x14]
+        0x00002a44:    e3530004    ..S.    CMP      r3,#4
+        0x00002a48:    e5943010    .0..    LDR      r3,[r4,#0x10]
+        0x00002a4c:    e5944000    .@..    LDR      r4,[r4,#0]
+        0x00002a50:    050b1060    `...    STREQ    r1,[r11,#-0x60]
+        0x00002a54:    150b1060    `...    STRNE    r1,[r11,#-0x60]
+        0x00002a58:    e1a01006    ....    MOV      r1,r6
+        0x00002a5c:    150b2048    H ..    STRNE    r2,[r11,#-0x48]
+        0x00002a60:    e50b2058    X ..    STR      r2,[r11,#-0x58]
+        0x00002a64:    e24b2070    p K.    SUB      r2,r11,#0x70
+        0x00002a68:    050b3064    d0..    STREQ    r3,[r11,#-0x64]
+        0x00002a6c:    150b3064    d0..    STRNE    r3,[r11,#-0x64]
+        0x00002a70:    150b404c    L@..    STRNE    r4,[r11,#-0x4c]
+        0x00002a74:    e50b405c    \@..    STR      r4,[r11,#-0x5c]
+        0x00002a78:    ebfffffe    ....    BL       BSP_disp_layer_set_para  ; 0xddcc Section #1
+        0x00002a7c:    e3a00000    ....    MOV      r0,#0
+        0x00002a80:    e24bd018    ..K.    SUB      r13,r11,#0x18
+        0x00002a84:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x00002a88:    00000000    ....    DCD    0 ; g_fbi
+        0x00002a8c:    00000520     ...    DCD    1312 ; [Section 10]
+    Fb_set_par
+    $a
+        0x00002a90:    e1a0c00d    ....    MOV      r12,r13
+        0x00002a94:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00002a98:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002a9c:    e24dd058    X.M.    SUB      r13,r13,#0x58
+        0x00002aa0:    e5903000    .0..    LDR      r3,[r0,#0]
+        0x00002aa4:    e24b5078    xPK.    SUB      r5,r11,#0x78
+        0x00002aa8:    e59f1074    t...    LDR      r1,[pc,#116]  ; [g_fbi = 0x2b24] = 0
+        0x00002aac:    e1a04000    .@..    MOV      r4,r0
+        0x00002ab0:    e2832014    . ..    ADD      r2,r3,#0x14
+        0x00002ab4:    e2833034    40..    ADD      r3,r3,#0x34
+        0x00002ab8:    e59f0068    h...    LDR      r0,[pc,#104]  ; [([Section 10] + 1328) = 0x2b28]  = 0x530
+        0x00002abc:    e7918102    ....    LDR      r8,[r1,r2,LSL #2]
+        0x00002ac0:    e791a103    ....    LDR      r10,[r1,r3,LSL #2]
+        0x00002ac4:    ebfffffe    ....    BL       printk  ;
+        0x00002ac8:    e1a02005    . ..    MOV      r2,r5
+        0x00002acc:    e1a00008    ....    MOV      r0,r8
+        0x00002ad0:    e1a0100a    ....    MOV      r1,r10
+        0x00002ad4:    ebfffffe    ....    BL       BSP_disp_layer_get_para  ; 0xe874 Section #1
+        0x00002ad8:    e594c020     ...    LDR      r12,[r4,#0x20]
+        0x00002adc:    e5943024    $0..    LDR      r3,[r4,#0x24]
+        0x00002ae0:    e28420c0    . ..    ADD      r2,r4,#0xc0
+        0x00002ae4:    e5946030    0`..    LDR      r6,[r4,#0x30]
+        0x00002ae8:    e2841020     ...    ADD      r1,r4,#0x20
+        0x00002aec:    e5947034    4p..    LDR      r7,[r4,#0x34]
+        0x00002af0:    e285002c    ,...    ADD      r0,r5,#0x2c
+        0x00002af4:    e50bc064    d...    STR      r12,[r11,#-0x64]
+        0x00002af8:    e50b3060    `0..    STR      r3,[r11,#-0x60]
+        0x00002afc:    e50b606c    l`..    STR      r6,[r11,#-0x6c]
+        0x00002b00:    e50b7068    hp..    STR      r7,[r11,#-0x68]
+        0x00002b04:    ebfffffe    ....    BL       var_to_fb  ; 0x2400 Section #1
+        0x00002b08:    e1a00008    ....    MOV      r0,r8
+        0x00002b0c:    e1a0100a    ....    MOV      r1,r10
+        0x00002b10:    e1a02005    . ..    MOV      r2,r5
+        0x00002b14:    ebfffffe    ....    BL       BSP_disp_layer_set_para  ; 0xddcc Section #1
+        0x00002b18:    e3a00000    ....    MOV      r0,#0
+        0x00002b1c:    e24bd024    $.K.    SUB      r13,r11,#0x24
+        0x00002b20:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00002b24:    00000000    ....    DCD    0 ; g_fbi
+        0x00002b28:    00000530    0...    DCD    1328 ; [Section 10]
+    Fb_setcmap
+    $a
+        0x00002b2c:    e1a0c00d    ....    MOV      r12,r13
+        0x00002b30:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00002b34:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002b38:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x00002b3c:    e3a03000    .0..    MOV      r3,#0
+        0x00002b40:    e50b3030    00..    STR      r3,[r11,#-0x30]
+        0x00002b44:    e5912000    . ..    LDR      r2,[r1,#0]
+        0x00002b48:    e1a06003    .`..    MOV      r6,r3
+        0x00002b4c:    e1a05003    .P..    MOV      r5,r3
+        0x00002b50:    e59f30a8    .0..    LDR      r3,[pc,#168]  ; [g_fbi = 0x2c00] = 0
+        0x00002b54:    e2822014    . ..    ADD      r2,r2,#0x14
+        0x00002b58:    e1a04000    .@..    MOV      r4,r0
+        0x00002b5c:    e59f00a0    ....    LDR      r0,[pc,#160]  ; [([Section 10] + 1340) = 0x2c04]  = 0x53c
+        0x00002b60:    e7932102    .!..    LDR      r2,[r3,r2,LSL #2]
+        0x00002b64:    e50b2038    8 ..    STR      r2,[r11,#-0x38]
+        0x00002b68:    ebfffffe    ....    BL       printk  ;
+        0x00002b6c:    e5943008    .0..    LDR      r3,[r4,#8]
+        0x00002b70:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x00002b74:    e594900c    ....    LDR      r9,[r4,#0xc]
+        0x00002b78:    e594a010    ....    LDR      r10,[r4,#0x10]
+        0x00002b7c:    e5947014    .p..    LDR      r7,[r4,#0x14]
+        0x00002b80:    ea000018    ....    B        {pc} + 0x68  ; 0x2be8
+        0x00002b84:    e51b303c    <0..    LDR      r3,[r11,#-0x3c]
+        0x00002b88:    e3570000    ..W.    CMP      r7,#0
+        0x00002b8c:    e199c0b5    ....    LDRH     r12,[r9,r5]
+        0x00002b90:    e24b102c    ,.K.    SUB      r1,r11,#0x2c
+        0x00002b94:    e19ae0b5    ....    LDRH     r14,[r10,r5]
+        0x00002b98:    03a080ff    ....    MOVEQ    r8,#0xff
+        0x00002b9c:    e19300b5    ....    LDRH     r0,[r3,r5]
+        0x00002ba0:    e2855002    .P..    ADD      r5,r5,#2
+        0x00002ba4:    10d730b2    .0..    LDRHNE   r3,[r7],#2
+        0x00002ba8:    e6efc07c    |...    UXTB     r12,r12
+        0x00002bac:    e5942000    . ..    LDR      r2,[r4,#0]
+        0x00002bb0:    e6efe07e    ~...    UXTB     r14,r14
+        0x00002bb4:    e6ef0070    p...    UXTB     r0,r0
+        0x00002bb8:    e1a0c40c    ....    LSL      r12,r12,#8
+        0x00002bbc:    16ef8073    s...    UXTBNE   r8,r3
+        0x00002bc0:    e0862002    . ..    ADD      r2,r6,r2
+        0x00002bc4:    e18cc800    ....    ORR      r12,r12,r0,LSL #16
+        0x00002bc8:    e3a03004    .0..    MOV      r3,#4
+        0x00002bcc:    e18cc00e    ....    ORR      r12,r12,r14
+        0x00002bd0:    e51b0038    8...    LDR      r0,[r11,#-0x38]
+        0x00002bd4:    e18ccc08    ....    ORR      r12,r12,r8,LSL #24
+        0x00002bd8:    e1a02102    .!..    LSL      r2,r2,#2
+        0x00002bdc:    e521c004    ..!.    STR      r12,[r1,#-4]!
+        0x00002be0:    e2866001    .`..    ADD      r6,r6,#1
+        0x00002be4:    ebfffffe    ....    BL       BSP_disp_set_palette_table  ; 0xc34c Section #1
+        0x00002be8:    e5943004    .0..    LDR      r3,[r4,#4]
+        0x00002bec:    e1560003    ..V.    CMP      r6,r3
+        0x00002bf0:    3affffe3    ...:    BCC      {pc} - 0x6c  ; 0x2b84
+        0x00002bf4:    e3a00000    ....    MOV      r0,#0
+        0x00002bf8:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00002bfc:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00002c00:    00000000    ....    DCD    0 ; g_fbi
+        0x00002c04:    0000053c    <...    DCD    1340 ; [Section 10]
+    Fb_setcolreg
+    $a
+        0x00002c08:    e1a0c00d    ....    MOV      r12,r13
+        0x00002c0c:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00002c10:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002c14:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x00002c18:    e59b4008    .@..    LDR      r4,[r11,#8]
+        0x00002c1c:    e1a05000    .P..    MOV      r5,r0
+        0x00002c20:    e59b9004    ....    LDR      r9,[r11,#4]
+        0x00002c24:    e1a0a001    ....    MOV      r10,r1
+        0x00002c28:    e59fc070    p...    LDR      r12,[pc,#112]  ; [g_fbi = 0x2ca0] = 0
+        0x00002c2c:    e1a08002    ....    MOV      r8,r2
+        0x00002c30:    e594e000    ....    LDR      r14,[r4,#0]
+        0x00002c34:    e1a06003    .`..    MOV      r6,r3
+        0x00002c38:    e59f0064    d...    LDR      r0,[pc,#100]  ; [([Section 10] + 1352) = 0x2ca4]  = 0x548
+        0x00002c3c:    e1a0300a    .0..    MOV      r3,r10
+        0x00002c40:    e28ee014    ....    ADD      r14,r14,#0x14
+        0x00002c44:    e1a01005    ....    MOV      r1,r5
+        0x00002c48:    e1a02009    . ..    MOV      r2,r9
+        0x00002c4c:    e58d8000    ....    STR      r8,[r13,#0]
+        0x00002c50:    e79c710e    .q..    LDR      r7,[r12,r14,LSL #2]
+        0x00002c54:    e58d6004    .`..    STR      r6,[r13,#4]
+        0x00002c58:    ebfffffe    ....    BL       printk  ;
+        0x00002c5c:    e59430e0    .0..    LDR      r3,[r4,#0xe0]
+        0x00002c60:    e3530003    ..S.    CMP      r3,#3
+        0x00002c64:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x2c94
+        0x00002c68:    e35500ff    ..U.    CMP      r5,#0xff
+        0x00002c6c:    8a000008    ....    BHI      {pc} + 0x28  ; 0x2c94
+        0x00002c70:    e1863408    .4..    ORR      r3,r6,r8,LSL #8
+        0x00002c74:    e24b102c    ,.K.    SUB      r1,r11,#0x2c
+        0x00002c78:    e183380a    .8..    ORR      r3,r3,r10,LSL #16
+        0x00002c7c:    e1a00007    ....    MOV      r0,r7
+        0x00002c80:    e1833c09    .<..    ORR      r3,r3,r9,LSL #24
+        0x00002c84:    e1a02105    .!..    LSL      r2,r5,#2
+        0x00002c88:    e5213004    .0!.    STR      r3,[r1,#-4]!
+        0x00002c8c:    e3a03004    .0..    MOV      r3,#4
+        0x00002c90:    ebfffffe    ....    BL       BSP_disp_set_palette_table  ; 0xc34c Section #1
+        0x00002c94:    e3a00000    ....    MOV      r0,#0
+        0x00002c98:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00002c9c:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00002ca0:    00000000    ....    DCD    0 ; g_fbi
+        0x00002ca4:    00000548    H...    DCD    1352 ; [Section 10]
+    Display_Fb_Request
+    $a
+        0x00002ca8:    e1a0c00d    ....    MOV      r12,r13
+        0x00002cac:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00002cb0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002cb4:    e24dd058    X.M.    SUB      r13,r13,#0x58
+        0x00002cb8:    e59f4210    .B..    LDR      r4,[pc,#528]  ; [g_fbi = 0x2ed0] = 0
+        0x00002cbc:    e1a0a000    ....    MOV      r10,r0
+        0x00002cc0:    e1a06001    .`..    MOV      r6,r1
+        0x00002cc4:    e59f0208    ....    LDR      r0,[pc,#520]  ; [([Section 10] + 1395) = 0x2ed4]  = 0x573
+        0x00002cc8:    e1a0100a    ....    MOV      r1,r10
+        0x00002ccc:    ebfffffe    ....    BL       printk  ;
+        0x00002cd0:    e5941000    ....    LDR      r1,[r4,#0]
+        0x00002cd4:    e3a00000    ....    MOV      r0,#0
+        0x00002cd8:    ebfffffe    ....    BL       framebuffer_alloc  ;
+        0x00002cdc:    e59f31f4    .1..    LDR      r3,[pc,#500]  ; [([Section 12] + 512) = 0x2ed8]  = 0x200
+        0x00002ce0:    e3a02000    . ..    MOV      r2,#0
+        0x00002ce4:    e3a01001    ....    MOV      r1,#1
+        0x00002ce8:    e3e0c000    ....    MVN      r12,#0
+        0x00002cec:    e1a07000    .p..    MOV      r7,r0
+        0x00002cf0:    e580321c    .2..    STR      r3,[r0,#0x21c]
+        0x00002cf4:    e5802004    . ..    STR      r2,[r0,#4]
+        0x00002cf8:    e3a03002    .0..    MOV      r3,#2
+        0x00002cfc:    e5940000    ....    LDR      r0,[r4,#0]
+        0x00002d00:    e58730e0    .0..    STR      r3,[r7,#0xe0]
+        0x00002d04:    e5874240    @B..    STR      r4,[r7,#0x240]
+        0x00002d08:    e5870220     ...    STR      r0,[r7,#0x220]
+        0x00002d0c:    e1c71eb6    ....    STRH     r1,[r7,#0xe6]
+        0x00002d10:    e58720ec    . ..    STR      r2,[r7,#0xec]
+        0x00002d14:    e5872030    0 ..    STR      r2,[r7,#0x30]
+        0x00002d18:    e5872034    4 ..    STR      r2,[r7,#0x34]
+        0x00002d1c:    e5871020     ...    STR      r1,[r7,#0x20]
+        0x00002d20:    e5871024    $...    STR      r1,[r7,#0x24]
+        0x00002d24:    e5871028    (...    STR      r1,[r7,#0x28]
+        0x00002d28:    e587102c    ,...    STR      r1,[r7,#0x2c]
+        0x00002d2c:    e58720d8    . ..    STR      r2,[r7,#0xd8]
+        0x00002d30:    e58720dc    . ..    STR      r2,[r7,#0xdc]
+        0x00002d34:    e1c71eb4    ....    STRH     r1,[r7,#0xe4]
+        0x00002d38:    e1c72eb8    ....    STRH     r2,[r7,#0xe8]
+        0x00002d3c:    e58720f8    . ..    STR      r2,[r7,#0xf8]
+        0x00002d40:    e5962010    . ..    LDR      r2,[r6,#0x10]
+        0x00002d44:    e2823eff    .>..    ADD      r3,r2,#0xff0
+        0x00002d48:    e283300f    .0..    ADD      r3,r3,#0xf
+        0x00002d4c:    e58720d4    . ..    STR      r2,[r7,#0xd4]
+        0x00002d50:    e3c33eff    .>..    BIC      r3,r3,#0xff0
+        0x00002d54:    e3c3300f    .0..    BIC      r3,r3,#0xf
+        0x00002d58:    e083300c    .0..    ADD      r3,r3,r12
+        0x00002d5c:    e1a035a3    .5..    LSR      r3,r3,#11
+        0x00002d60:    e1b030a3    .0..    LSRS     r3,r3,#1
+        0x00002d64:    e28cc001    ....    ADD      r12,r12,#1
+        0x00002d68:    1afffffc    ....    BNE      {pc} - 0x8  ; 0x2d60
+        0x00002d6c:    e1a0100c    ....    MOV      r1,r12
+        0x00002d70:    e3a000d0    ....    MOV      r0,#0xd0
+        0x00002d74:    e59f2160    `!..    LDR      r2,[pc,#352]  ; [(contig_page_data + 2208) = 0x2edc]  = 0x8a0
+        0x00002d78:    ebfffffe    ....    BL       __alloc_pages_nodemask  ;
+        0x00002d7c:    e3500000    ..P.    CMP      r0,#0
+        0x00002d80:    0a000049    I...    BEQ      {pc} + 0x12c  ; 0x2eac
+        0x00002d84:    ebfffffe    ....    BL       page_address  ;
+        0x00002d88:    e59710d4    ....    LDR      r1,[r7,#0xd4]
+        0x00002d8c:    e3510000    ..Q.    CMP      r1,#0
+        0x00002d90:    e58700d0    ....    STR      r0,[r7,#0xd0]
+        0x00002d94:    e587022c    ,...    STR      r0,[r7,#0x22c]
+        0x00002d98:    0a000000    ....    BEQ      {pc} + 0x8  ; 0x2da0
+        0x00002d9c:    ebfffffe    ....    BL       __memzero  ;
+        0x00002da0:    e59730d4    .0..    LDR      r3,[r7,#0xd4]
+        0x00002da4:    e3a04000    .@..    MOV      r4,#0
+        0x00002da8:    e597222c    ,"..    LDR      r2,[r7,#0x22c]
+        0x00002dac:    e3a05001    .P..    MOV      r5,#1
+        0x00002db0:    e59710d0    ....    LDR      r1,[r7,#0xd0]
+        0x00002db4:    e59f0124    $...    LDR      r0,[pc,#292]  ; [([Section 10] + 1423) = 0x2ee0]  = 0x58f
+        0x00002db8:    ebfffffe    ....    BL       printk  ;
+        0x00002dbc:    e5961000    ....    LDR      r1,[r6,#0]
+        0x00002dc0:    e1a0000a    ....    MOV      r0,r10
+        0x00002dc4:    ebfffffe    ....    BL       BSP_disp_layer_request  ; 0xee78 Section #1
+        0x00002dc8:    e5963000    .0..    LDR      r3,[r6,#0]
+        0x00002dcc:    e3a020ff    . ..    MOV      r2,#0xff
+        0x00002dd0:    e54b4074    t@K.    STRB     r4,[r11,#-0x74]
+        0x00002dd4:    e14b27b0    .'K.    STRH     r2,[r11,#-0x70]
+        0x00002dd8:    e24b2078    x K.    SUB      r2,r11,#0x78
+        0x00002ddc:    e54b4072    r@K.    STRB     r4,[r11,#-0x72]
+        0x00002de0:    e50b3078    x0..    STR      r3,[r11,#-0x78]
+        0x00002de4:    e54b406e    n@K.    STRB     r4,[r11,#-0x6e]
+        0x00002de8:    e50b406c    l@..    STR      r4,[r11,#-0x6c]
+        0x00002dec:    e50b4068    h@..    STR      r4,[r11,#-0x68]
+        0x00002df0:    e50b5064    dP..    STR      r5,[r11,#-0x64]
+        0x00002df4:    e50b5060    `P..    STR      r5,[r11,#-0x60]
+        0x00002df8:    e50b405c    \@..    STR      r4,[r11,#-0x5c]
+        0x00002dfc:    e50b4058    X@..    STR      r4,[r11,#-0x58]
+        0x00002e00:    e50b5054    TP..    STR      r5,[r11,#-0x54]
+        0x00002e04:    e50b5050    PP..    STR      r5,[r11,#-0x50]
+        0x00002e08:    e59730d0    .0..    LDR      r3,[r7,#0xd0]
+        0x00002e0c:    e596c014    ....    LDR      r12,[r6,#0x14]
+        0x00002e10:    e5966018    .`..    LDR      r6,[r6,#0x18]
+        0x00002e14:    e50b304c    L0..    STR      r3,[r11,#-0x4c]
+        0x00002e18:    e59730d0    .0..    LDR      r3,[r7,#0xd0]
+        0x00002e1c:    e08cc003    ....    ADD      r12,r12,r3
+        0x00002e20:    e50bc048    H...    STR      r12,[r11,#-0x48]
+        0x00002e24:    e597c0d0    ....    LDR      r12,[r7,#0xd0]
+        0x00002e28:    e3a0300a    .0..    MOV      r3,#0xa
+        0x00002e2c:    e50b5030    0P..    STR      r5,[r11,#-0x30]
+        0x00002e30:    e50b3038    80..    STR      r3,[r11,#-0x38]
+        0x00002e34:    e086600c    .`..    ADD      r6,r6,r12
+        0x00002e38:    e50b4028    (@..    STR      r4,[r11,#-0x28]
+        0x00002e3c:    e50b6044    D`..    STR      r6,[r11,#-0x44]
+        0x00002e40:    e50b5040    @P..    STR      r5,[r11,#-0x40]
+        0x00002e44:    e50b503c    <P..    STR      r5,[r11,#-0x3c]
+        0x00002e48:    e50b4034    4@..    STR      r4,[r11,#-0x34]
+        0x00002e4c:    e54b402c    ,@K.    STRB     r4,[r11,#-0x2c]
+        0x00002e50:    e1a08000    ....    MOV      r8,r0
+        0x00002e54:    e1a0000a    ....    MOV      r0,r10
+        0x00002e58:    e1a01008    ....    MOV      r1,r8
+        0x00002e5c:    ebfffffe    ....    BL       BSP_disp_layer_set_para  ; 0xddcc Section #1
+        0x00002e60:    e1a01008    ....    MOV      r1,r8
+        0x00002e64:    e1a0000a    ....    MOV      r0,r10
+        0x00002e68:    ebfffffe    ....    BL       BSP_disp_layer_open  ; 0xec1c Section #1
+        0x00002e6c:    e1a00007    ....    MOV      r0,r7
+        0x00002e70:    ebfffffe    ....    BL       register_framebuffer  ;
+        0x00002e74:    e5973000    .0..    LDR      r3,[r7,#0]
+        0x00002e78:    e59f1050    P...    LDR      r1,[pc,#80]   ; [g_fbi = 0x2ed0] = 0
+        0x00002e7c:    e2833014    .0..    ADD      r3,r3,#0x14
+        0x00002e80:    e781a103    ....    STR      r10,[r1,r3,LSL #2]
+        0x00002e84:    e5973000    .0..    LDR      r3,[r7,#0]
+        0x00002e88:    e5d121d0    .!..    LDRB     r2,[r1,#0x1d0]
+        0x00002e8c:    e2833034    40..    ADD      r3,r3,#0x34
+        0x00002e90:    e0822005    . ..    ADD      r2,r2,r5
+        0x00002e94:    e7818103    ....    STR      r8,[r1,r3,LSL #2]
+        0x00002e98:    e5973000    .0..    LDR      r3,[r7,#0]
+        0x00002e9c:    e5c121d0    .!..    STRB     r2,[r1,#0x1d0]
+        0x00002ea0:    e2833054    T0..    ADD      r3,r3,#0x54
+        0x00002ea4:    e7817103    .q..    STR      r7,[r1,r3,LSL #2]
+        0x00002ea8:    ea000005    ....    B        {pc} + 0x1c  ; 0x2ec4
+        0x00002eac:    e59f0030    0...    LDR      r0,[pc,#48]   ; [([Section 10] + 1465) = 0x2ee4]  = 0x5b9
+        0x00002eb0:    e3e08000    ....    MVN      r8,#0
+        0x00002eb4:    ebfffffe    ....    BL       printk  ;
+        0x00002eb8:    e59f0028    (...    LDR      r0,[pc,#40]   ; [([Section 10] + 1488) = 0x2ee8]  = 0x5d0
+        0x00002ebc:    e3e0100b    ....    MVN      r1,#0xb
+        0x00002ec0:    ebfffffe    ....    BL       printk  ;
+        0x00002ec4:    e1a00008    ....    MOV      r0,r8
+        0x00002ec8:    e24bd024    $.K.    SUB      r13,r11,#0x24
+        0x00002ecc:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00002ed0:    00000000    ....    DCD    0 ; g_fbi
+        0x00002ed4:    00000573    s...    DCD    1395 ; [Section 10]
+        0x00002ed8:    00000200    ....    DCD    512 ; [Section 12]
+        0x00002edc:    000008a0    ....    DCD    2208 ; contig_page_data
+        0x00002ee0:    0000058f    ....    DCD    1423 ; [Section 10]
+        0x00002ee4:    000005b9    ....    DCD    1465 ; [Section 10]
+        0x00002ee8:    000005d0    ....    DCD    1488 ; [Section 10]
+    Fb_blank
+    $a
+        0x00002eec:    e1a0c00d    ....    MOV      r12,r13
+        0x00002ef0:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00002ef4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002ef8:    e5913000    .0..    LDR      r3,[r1,#0]
+        0x00002efc:    e1a04000    .@..    MOV      r4,r0
+        0x00002f00:    e59fc044    D...    LDR      r12,[pc,#68]   ; [g_fbi = 0x2f4c] = 0
+        0x00002f04:    e1a01000    ....    MOV      r1,r0
+        0x00002f08:    e2832034    4 ..    ADD      r2,r3,#0x34
+        0x00002f0c:    e2833014    .0..    ADD      r3,r3,#0x14
+        0x00002f10:    e59f0038    8...    LDR      r0,[pc,#56]   ; [([Section 10] + 1522) = 0x2f50]  = 0x5f2
+        0x00002f14:    e79c6102    .a..    LDR      r6,[r12,r2,LSL #2]
+        0x00002f18:    e79c5103    .Q..    LDR      r5,[r12,r3,LSL #2]
+        0x00002f1c:    ebfffffe    ....    BL       printk  ;
+        0x00002f20:    e3540004    ..T.    CMP      r4,#4
+        0x00002f24:    1a000003    ....    BNE      {pc} + 0x14  ; 0x2f38
+        0x00002f28:    e1a00005    ....    MOV      r0,r5
+        0x00002f2c:    e1a01006    ....    MOV      r1,r6
+        0x00002f30:    ebfffffe    ....    BL       BSP_disp_layer_close  ; 0xeb78 Section #1
+        0x00002f34:    ea000002    ....    B        {pc} + 0x10  ; 0x2f44
+        0x00002f38:    e1a00005    ....    MOV      r0,r5
+        0x00002f3c:    e1a01006    ....    MOV      r1,r6
+        0x00002f40:    ebfffffe    ....    BL       BSP_disp_layer_open  ; 0xec1c Section #1
+        0x00002f44:    e3a00000    ....    MOV      r0,#0
+        0x00002f48:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00002f4c:    00000000    ....    DCD    0 ; g_fbi
+        0x00002f50:    000005f2    ....    DCD    1522 ; [Section 10]
+    OSAL_CacheRangeFlush
+    $a
+        0x00002f54:    e1a0c00d    ....    MOV      r12,r13
+        0x00002f58:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002f5c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002f60:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_SetSrcFreq
+    $a
+        0x00002f64:    e1a0c00d    ....    MOV      r12,r13
+        0x00002f68:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002f6c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002f70:    e3a00000    ....    MOV      r0,#0
+        0x00002f74:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_GetSrcFreq
+        0x00002f78:    e1a0c00d    ....    MOV      r12,r13
+        0x00002f7c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002f80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002f84:    e3a00000    ....    MOV      r0,#0
+        0x00002f88:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_OpenMclk
+        0x00002f8c:    e1a0c00d    ....    MOV      r12,r13
+        0x00002f90:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002f94:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002f98:    e3a00000    ....    MOV      r0,#0
+        0x00002f9c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_CloseMclk
+        0x00002fa0:    e1a0c00d    ....    MOV      r12,r13
+        0x00002fa4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002fa8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002fac:    e3a00000    ....    MOV      r0,#0
+        0x00002fb0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_SetMclkSrc
+        0x00002fb4:    e1a0c00d    ....    MOV      r12,r13
+        0x00002fb8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002fbc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002fc0:    e3a00000    ....    MOV      r0,#0
+        0x00002fc4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_GetMclkSrc
+        0x00002fc8:    e1a0c00d    ....    MOV      r12,r13
+        0x00002fcc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002fd0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002fd4:    e3a00000    ....    MOV      r0,#0
+        0x00002fd8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_SetMclkDiv
+        0x00002fdc:    e1a0c00d    ....    MOV      r12,r13
+        0x00002fe0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002fe4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002fe8:    e3a00000    ....    MOV      r0,#0
+        0x00002fec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_GetMclkDiv
+        0x00002ff0:    e1a0c00d    ....    MOV      r12,r13
+        0x00002ff4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00002ff8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00002ffc:    e3a00000    ....    MOV      r0,#0
+        0x00003000:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_MclkOnOff
+        0x00003004:    e1a0c00d    ....    MOV      r12,r13
+        0x00003008:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000300c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003010:    e3a00000    ....    MOV      r0,#0
+        0x00003014:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CCMU_MclkReset
+        0x00003018:    e1a0c00d    ....    MOV      r12,r13
+        0x0000301c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003020:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003024:    e3a00000    ....    MOV      r0,#0
+        0x00003028:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaRequest
+    $a
+        0x0000302c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003030:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003034:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003038:    e3a00000    ....    MOV      r0,#0
+        0x0000303c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaRelease
+        0x00003040:    e1a0c00d    ....    MOV      r12,r13
+        0x00003044:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003048:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000304c:    e3a00000    ....    MOV      r0,#0
+        0x00003050:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaEnableINT
+        0x00003054:    e1a0c00d    ....    MOV      r12,r13
+        0x00003058:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000305c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003060:    e3a00000    ....    MOV      r0,#0
+        0x00003064:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaDisableINT
+        0x00003068:    e1a0c00d    ....    MOV      r12,r13
+        0x0000306c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003070:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003074:    e3a00000    ....    MOV      r0,#0
+        0x00003078:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaRegIrq
+        0x0000307c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003080:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003084:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003088:    e3a00000    ....    MOV      r0,#0
+        0x0000308c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaUnRegIrq
+        0x00003090:    e1a0c00d    ....    MOV      r12,r13
+        0x00003094:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003098:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000309c:    e3a00000    ....    MOV      r0,#0
+        0x000030a0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaConfig
+        0x000030a4:    e1a0c00d    ....    MOV      r12,r13
+        0x000030a8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000030ac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000030b0:    e3a00000    ....    MOV      r0,#0
+        0x000030b4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaStart
+        0x000030b8:    e1a0c00d    ....    MOV      r12,r13
+        0x000030bc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000030c0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000030c4:    e3a00000    ....    MOV      r0,#0
+        0x000030c8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaStop
+        0x000030cc:    e1a0c00d    ....    MOV      r12,r13
+        0x000030d0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000030d4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000030d8:    e3a00000    ....    MOV      r0,#0
+        0x000030dc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaRestart
+        0x000030e0:    e1a0c00d    ....    MOV      r12,r13
+        0x000030e4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000030e8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000030ec:    e3a00000    ....    MOV      r0,#0
+        0x000030f0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaQueryChannelNo
+        0x000030f4:    e1a0c00d    ....    MOV      r12,r13
+        0x000030f8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000030fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003100:    e3a00000    ....    MOV      r0,#0
+        0x00003104:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaQueryStatus
+        0x00003108:    e1a0c00d    ....    MOV      r12,r13
+        0x0000310c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003110:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003114:    e3a00000    ....    MOV      r0,#0
+        0x00003118:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaQueryLeftCount
+        0x0000311c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003120:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003124:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003128:    e3a00000    ....    MOV      r0,#0
+        0x0000312c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaQueryConfig
+        0x00003130:    e1a0c00d    ....    MOV      r12,r13
+        0x00003134:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003138:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000313c:    e3a00000    ....    MOV      r0,#0
+        0x00003140:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaPause
+        0x00003144:    e1a0c00d    ....    MOV      r12,r13
+        0x00003148:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000314c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003150:    e3a00000    ....    MOV      r0,#0
+        0x00003154:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaProceed
+        0x00003158:    e1a0c00d    ....    MOV      r12,r13
+        0x0000315c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003160:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003164:    e3a00000    ....    MOV      r0,#0
+        0x00003168:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DmaChangeMode
+        0x0000316c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003170:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003174:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003178:    e3a00000    ....    MOV      r0,#0
+        0x0000317c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_InterruptDisable
+    $a
+        0x00003180:    e1a0c00d    ....    MOV      r12,r13
+        0x00003184:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003188:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000318c:    ebfffffe    ....    BL       disable_irq  ;
+        0x00003190:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_InterruptEnable
+        0x00003194:    e1a0c00d    ....    MOV      r12,r13
+        0x00003198:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000319c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000031a0:    ebfffffe    ....    BL       enable_irq  ;
+        0x000031a4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_UnRegISR
+        0x000031a8:    e1a0c00d    ....    MOV      r12,r13
+        0x000031ac:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000031b0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000031b4:    e1a01002    ....    MOV      r1,r2
+        0x000031b8:    ebfffffe    ....    BL       free_irq  ;
+        0x000031bc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_RegISR
+        0x000031c0:    e1a0c00d    ....    MOV      r12,r13
+        0x000031c4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000031c8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000031cc:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x000031d0:    e59fc01c    ....    LDR      r12,[pc,#28]   ; [([Section 10] + 1540) = 0x31f4]  = 0x604
+        0x000031d4:    e1a01002    ....    MOV      r1,r2
+        0x000031d8:    e58d3004    .0..    STR      r3,[r13,#4]
+        0x000031dc:    e3a02000    . ..    MOV      r2,#0
+        0x000031e0:    e3a03020     0..    MOV      r3,#0x20
+        0x000031e4:    e58dc000    ....    STR      r12,[r13,#0]
+        0x000031e8:    ebfffffe    ....    BL       request_threaded_irq  ;
+        0x000031ec:    e24bd00c    ..K.    SUB      r13,r11,#0xc
+        0x000031f0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000031f4:    00000604    ....    DCD    1540 ; [Section 10]
+    OSAL_IrqLock
+    $a
+        0x000031f8:    e1a0c00d    ....    MOV      r12,r13
+        0x000031fc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003200:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003204:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_IrqUnLock
+        0x00003208:    e1a0c00d    ....    MOV      r12,r13
+        0x0000320c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003210:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003214:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_malloc
+    $a
+        0x00003218:    e1a0c00d    ....    MOV      r12,r13
+        0x0000321c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003220:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003224:    e3a00000    ....    MOV      r0,#0
+        0x00003228:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_free
+        0x0000322c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003230:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003234:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003238:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PhyAlloc
+        0x0000323c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003240:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003244:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003248:    e3a00000    ....    MOV      r0,#0
+        0x0000324c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PhyFree
+        0x00003250:    e1a0c00d    ....    MOV      r12,r13
+        0x00003254:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003258:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000325c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_VAtoPA
+        0x00003260:    e1a0c00d    ....    MOV      r12,r13
+        0x00003264:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003268:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000326c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PAtoVA
+        0x00003270:    e1a0c00d    ....    MOV      r12,r13
+        0x00003274:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003278:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000327c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_putchar
+        0x00003280:    e1a0c00d    ....    MOV      r12,r13
+        0x00003284:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003288:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000328c:    e3a00000    ....    MOV      r0,#0
+        0x00003290:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_puts
+        0x00003294:    e1a0c00d    ....    MOV      r12,r13
+        0x00003298:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000329c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000032a0:    e3a00000    ....    MOV      r0,#0
+        0x000032a4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_getchar
+        0x000032a8:    e1a0c00d    ....    MOV      r12,r13
+        0x000032ac:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000032b0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000032b4:    e3a00000    ....    MOV      r0,#0
+        0x000032b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_gets
+        0x000032bc:    e1a0c00d    ....    MOV      r12,r13
+        0x000032c0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000032c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000032c8:    e3a00000    ....    MOV      r0,#0
+        0x000032cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_strtol
+        0x000032d0:    e1a0c00d    ....    MOV      r12,r13
+        0x000032d4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000032d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000032dc:    e3a00000    ....    MOV      r0,#0
+        0x000032e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_int2str_dec
+        0x000032e4:    e1a0c00d    ....    MOV      r12,r13
+        0x000032e8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000032ec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000032f0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_int2str_hex
+        0x000032f4:    e1a0c00d    ....    MOV      r12,r13
+        0x000032f8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000032fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003300:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_uint2str_dec
+        0x00003304:    e1a0c00d    ....    MOV      r12,r13
+        0x00003308:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000330c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003310:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_printf
+        0x00003314:    e1a0c00d    ....    MOV      r12,r13
+        0x00003318:    e92d000f    ..-.    PUSH     {r0-r3}
+        0x0000331c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003320:    e24cb014    ..L.    SUB      r11,r12,#0x14
+        0x00003324:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x00003328:    e28b1008    ....    ADD      r1,r11,#8
+        0x0000332c:    e59b0004    ....    LDR      r0,[r11,#4]
+        0x00003330:    e50b1010    ....    STR      r1,[r11,#-0x10]
+        0x00003334:    ebfffffe    ....    BL       vprintk  ;
+        0x00003338:    e24bd00c    ..K.    SUB      r13,r11,#0xc
+        0x0000333c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_io_remap
+        0x00003340:    e1a0c00d    ....    MOV      r12,r13
+        0x00003344:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003348:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000334c:    e3a02000    . ..    MOV      r2,#0
+        0x00003350:    ebfffffe    ....    BL       __arm_ioremap  ;
+        0x00003354:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_DEV_req
+    $a
+        0x00003358:    e1a0c00d    ....    MOV      r12,r13
+        0x0000335c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003360:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003364:    e3a00000    ....    MOV      r0,#0
+        0x00003368:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_DEV_release
+        0x0000336c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003370:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003374:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003378:    e3a00000    ....    MOV      r0,#0
+        0x0000337c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_DEV_pull_ops
+        0x00003380:    e1a0c00d    ....    MOV      r12,r13
+        0x00003384:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003388:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000338c:    e3a00000    ....    MOV      r0,#0
+        0x00003390:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_DEV_multi_drv_ops
+        0x00003394:    e1a0c00d    ....    MOV      r12,r13
+        0x00003398:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000339c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000033a0:    e3a00000    ....    MOV      r0,#0
+        0x000033a4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_DEV_data_ops
+        0x000033a8:    e1a0c00d    ....    MOV      r12,r13
+        0x000033ac:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000033b0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000033b4:    e3a00000    ....    MOV      r0,#0
+        0x000033b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_DEV_direction_ops
+        0x000033bc:    e1a0c00d    ....    MOV      r12,r13
+        0x000033c0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000033c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000033c8:    e3a00000    ....    MOV      r0,#0
+        0x000033cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_GPIO_req
+        0x000033d0:    e1a0c00d    ....    MOV      r12,r13
+        0x000033d4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000033d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000033dc:    e3a00000    ....    MOV      r0,#0
+        0x000033e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_GPIO_release
+        0x000033e4:    e1a0c00d    ....    MOV      r12,r13
+        0x000033e8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000033ec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000033f0:    e3a00000    ....    MOV      r0,#0
+        0x000033f4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_GPIO_pull_ops
+        0x000033f8:    e1a0c00d    ....    MOV      r12,r13
+        0x000033fc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003400:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003404:    e3a00000    ....    MOV      r0,#0
+        0x00003408:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_GPIO_multi_drv_ops
+        0x0000340c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003410:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003414:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003418:    e3a00000    ....    MOV      r0,#0
+        0x0000341c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_GPIO_data_ops
+        0x00003420:    e1a0c00d    ....    MOV      r12,r13
+        0x00003424:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003428:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000342c:    e3a00000    ....    MOV      r0,#0
+        0x00003430:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_GPIO_direction_ops
+        0x00003434:    e1a0c00d    ....    MOV      r12,r13
+        0x00003438:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000343c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003440:    e3a00000    ....    MOV      r0,#0
+        0x00003444:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_PIN_MISC_get_phy_pin
+        0x00003448:    e1a0c00d    ....    MOV      r12,r13
+        0x0000344c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003450:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003454:    e3a00000    ....    MOV      r0,#0
+        0x00003458:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CreateSemaphore
+    $a
+        0x0000345c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003460:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003464:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003468:    e3a00000    ....    MOV      r0,#0
+        0x0000346c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DeleteSemaphore
+        0x00003470:    e1a0c00d    ....    MOV      r12,r13
+        0x00003474:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003478:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000347c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_SemPend
+        0x00003480:    e1a0c00d    ....    MOV      r12,r13
+        0x00003484:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003488:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000348c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_SemPost
+        0x00003490:    e1a0c00d    ....    MOV      r12,r13
+        0x00003494:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003498:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000349c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_CreateTimer
+    $a
+        0x000034a0:    e1a0c00d    ....    MOV      r12,r13
+        0x000034a4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000034a8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000034ac:    e3a00000    ....    MOV      r0,#0
+        0x000034b0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_DelTimer
+        0x000034b4:    e1a0c00d    ....    MOV      r12,r13
+        0x000034b8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000034bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000034c0:    e3a00000    ....    MOV      r0,#0
+        0x000034c4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_StartTimer
+        0x000034c8:    e1a0c00d    ....    MOV      r12,r13
+        0x000034cc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000034d0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000034d4:    e3a00000    ....    MOV      r0,#0
+        0x000034d8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    OSAL_Sleep
+        0x000034dc:    e1a0c00d    ....    MOV      r12,r13
+        0x000034e0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000034e4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000034e8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DE_Set_Reg_Base
+    $a
+        0x000034ec:    e1a0c00d    ....    MOV      r12,r13
+        0x000034f0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000034f4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000034f8:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [([Section 17] + 16980) = 0x3508]  = 0x4254
+        0x000034fc:    e7831100    ....    STR      r1,[r3,r0,LSL #2]
+        0x00003500:    e3a00000    ....    MOV      r0,#0
+        0x00003504:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003508:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_Get_Reg_Base
+    $a
+        0x0000350c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003510:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003514:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003518:    e59f3004    .0..    LDR      r3,[pc,#4]    ; [([Section 17] + 16980) = 0x3524]  = 0x4254
+        0x0000351c:    e7930100    ....    LDR      r0,[r3,r0,LSL #2]
+        0x00003520:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003524:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Set_SystemPalette
+    $a
+        0x00003528:    e1a0c00d    ....    MOV      r12,r13
+        0x0000352c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003530:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003534:    e1a0c001    ....    MOV      r12,r1
+        0x00003538:    e59f103c    <...    LDR      r1,[pc,#60]   ; [([Section 17] + 16980) = 0x357c]  = 0x4254
+        0x0000353c:    e3530b01    ..S.    CMP      r3,#0x400
+        0x00003540:    23a03b01    .;.#    MOVCS    r3,#0x400
+        0x00003544:    e3c33003    .0..    BIC      r3,r3,#3
+        0x00003548:    e7911100    ....    LDR      r1,[r1,r0,LSL #2]
+        0x0000354c:    e2811a05    ....    ADD      r1,r1,#0x5000
+        0x00003550:    e0811002    ....    ADD      r1,r1,r2
+        0x00003554:    e0810003    ....    ADD      r0,r1,r3
+        0x00003558:    e1a02001    . ..    MOV      r2,r1
+        0x0000355c:    ea000001    ....    B        {pc} + 0xc  ; 0x3568
+        0x00003560:    e7923003    .0..    LDR      r3,[r2,r3]
+        0x00003564:    e4823004    .0..    STR      r3,[r2],#4
+        0x00003568:    e1520000    ..R.    CMP      r2,r0
+        0x0000356c:    e061300c    .0a.    RSB      r3,r1,r12
+        0x00003570:    3afffffa    ...:    BCC      {pc} - 0x10  ; 0x3560
+        0x00003574:    e3a00000    ....    MOV      r0,#0
+        0x00003578:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000357c:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Get_SystemPalette
+    $a
+        0x00003580:    e1a0c00d    ....    MOV      r12,r13
+        0x00003584:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003588:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000358c:    e3530b01    ..S.    CMP      r3,#0x400
+        0x00003590:    23a03b01    .;.#    MOVCS    r3,#0x400
+        0x00003594:    e3c33003    .0..    BIC      r3,r3,#3
+        0x00003598:    e081c003    ....    ADD      r12,r1,r3
+        0x0000359c:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [([Section 17] + 16980) = 0x35d0]  = 0x4254
+        0x000035a0:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x000035a4:    e3a00000    ....    MOV      r0,#0
+        0x000035a8:    e2833a05    .:..    ADD      r3,r3,#0x5000
+        0x000035ac:    e0832002    . ..    ADD      r2,r3,r2
+        0x000035b0:    ea000002    ....    B        {pc} + 0x10  ; 0x35c0
+        0x000035b4:    e7903002    .0..    LDR      r3,[r0,r2]
+        0x000035b8:    e2800004    ....    ADD      r0,r0,#4
+        0x000035bc:    e4813004    .0..    STR      r3,[r1],#4
+        0x000035c0:    e151000c    ..Q.    CMP      r1,r12
+        0x000035c4:    3afffffa    ...:    BCC      {pc} - 0x10  ; 0x35b4
+        0x000035c8:    e3a00000    ....    MOV      r0,#0
+        0x000035cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000035d0:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Enable
+    $a
+        0x000035d4:    e1a0c00d    ....    MOV      r12,r13
+        0x000035d8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000035dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000035e0:    e59fc028    (...    LDR      r12,[pc,#40]   ; [([Section 17] + 16980) = 0x3610]  = 0x4254
+        0x000035e4:    e1a01000    ....    MOV      r1,r0
+        0x000035e8:    e3a00000    ....    MOV      r0,#0
+        0x000035ec:    e79c2101    .!..    LDR      r2,[r12,r1,LSL #2]
+        0x000035f0:    e5d23800    .8..    LDRB     r3,[r2,#0x800]
+        0x000035f4:    e3833002    .0..    ORR      r3,r3,#2
+        0x000035f8:    e5c23800    .8..    STRB     r3,[r2,#0x800]
+        0x000035fc:    e79c2101    .!..    LDR      r2,[r12,r1,LSL #2]
+        0x00003600:    e5d23800    .8..    LDRB     r3,[r2,#0x800]
+        0x00003604:    e3833001    .0..    ORR      r3,r3,#1
+        0x00003608:    e5c23800    .8..    STRB     r3,[r2,#0x800]
+        0x0000360c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003610:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Disable
+    $a
+        0x00003614:    e1a0c00d    ....    MOV      r12,r13
+        0x00003618:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000361c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003620:    e59fc028    (...    LDR      r12,[pc,#40]   ; [([Section 17] + 16980) = 0x3650]  = 0x4254
+        0x00003624:    e1a01000    ....    MOV      r1,r0
+        0x00003628:    e3a00000    ....    MOV      r0,#0
+        0x0000362c:    e79c2101    .!..    LDR      r2,[r12,r1,LSL #2]
+        0x00003630:    e5923800    .8..    LDR      r3,[r2,#0x800]
+        0x00003634:    e3c33002    .0..    BIC      r3,r3,#2
+        0x00003638:    e5823800    .8..    STR      r3,[r2,#0x800]
+        0x0000363c:    e79c2101    .!..    LDR      r2,[r12,r1,LSL #2]
+        0x00003640:    e5923800    .8..    LDR      r3,[r2,#0x800]
+        0x00003644:    e3c33001    .0..    BIC      r3,r3,#1
+        0x00003648:    e5823800    .8..    STR      r3,[r2,#0x800]
+        0x0000364c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003650:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Output_Select
+    $a
+        0x00003654:    e1a0c00d    ....    MOV      r12,r13
+        0x00003658:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000365c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003660:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 16980) = 0x3680]  = 0x4254
+        0x00003664:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00003668:    e3a00000    ....    MOV      r0,#0
+        0x0000366c:    e5923800    .8..    LDR      r3,[r2,#0x800]
+        0x00003670:    e3c33607    .6..    BIC      r3,r3,#0x700000
+        0x00003674:    e1833a01    .:..    ORR      r3,r3,r1,LSL #20
+        0x00003678:    e5823800    .8..    STR      r3,[r2,#0x800]
+        0x0000367c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003680:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Set_BkColor
+    $a
+        0x00003684:    e1a0c00d    ....    MOV      r12,r13
+        0x00003688:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000368c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003690:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x00003694:    e59f2028    ( ..    LDR      r2,[pc,#40]   ; [([Section 17] + 16980) = 0x36c4]  = 0x4254
+        0x00003698:    e7e73451    Q4..    UBFX     r3,r1,#8,#8
+        0x0000369c:    e7e7c851    Q...    UBFX     r12,r1,#16,#8
+        0x000036a0:    e1a03803    .8..    LSL      r3,r3,#16
+        0x000036a4:    e7922100    .!..    LDR      r2,[r2,r0,LSL #2]
+        0x000036a8:    e1833c01    .<..    ORR      r3,r3,r1,LSL #24
+        0x000036ac:    e1833c21    !<..    ORR      r3,r3,r1,LSR #24
+        0x000036b0:    e3a00000    ....    MOV      r0,#0
+        0x000036b4:    e183340c    .4..    ORR      r3,r3,r12,LSL #8
+        0x000036b8:    e5823804    .8..    STR      r3,[r2,#0x804]
+        0x000036bc:    e24bd00c    ..K.    SUB      r13,r11,#0xc
+        0x000036c0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000036c4:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Set_ColorKey
+    $a
+        0x000036c8:    e1a0c00d    ....    MOV      r12,r13
+        0x000036cc:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000036d0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000036d4:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x000036d8:    e59f6064    d`..    LDR      r6,[pc,#100]  ; [([Section 17] + 16980) = 0x3744]  = 0x4254
+        0x000036dc:    e7e7c451    Q...    UBFX     r12,r1,#8,#8
+        0x000036e0:    e1a05000    .P..    MOV      r5,r0
+        0x000036e4:    e7e74452    RD..    UBFX     r4,r2,#8,#8
+        0x000036e8:    e1a0c80c    ....    LSL      r12,r12,#16
+        0x000036ec:    e7e77851    Qx..    UBFX     r7,r1,#16,#8
+        0x000036f0:    e7960100    ....    LDR      r0,[r6,r0,LSL #2]
+        0x000036f4:    e18ccc01    ....    ORR      r12,r12,r1,LSL #24
+        0x000036f8:    e18ccc21    !...    ORR      r12,r12,r1,LSR #24
+        0x000036fc:    e1a04804    .H..    LSL      r4,r4,#16
+        0x00003700:    e18cc407    ....    ORR      r12,r12,r7,LSL #8
+        0x00003704:    e7e71852    R...    UBFX     r1,r2,#16,#8
+        0x00003708:    e580c880    ....    STR      r12,[r0,#0x880]
+        0x0000370c:    e1844c02    .L..    ORR      r4,r4,r2,LSL #24
+        0x00003710:    e1844c22    "L..    ORR      r4,r4,r2,LSR #24
+        0x00003714:    e59b2004    . ..    LDR      r2,[r11,#4]
+        0x00003718:    e796c105    ....    LDR      r12,[r6,r5,LSL #2]
+        0x0000371c:    e1844401    .D..    ORR      r4,r4,r1,LSL #8
+        0x00003720:    e59b1008    ....    LDR      r1,[r11,#8]
+        0x00003724:    e3a00000    ....    MOV      r0,#0
+        0x00003728:    e1811102    ....    ORR      r1,r1,r2,LSL #2
+        0x0000372c:    e58c4884    .H..    STR      r4,[r12,#0x884]
+        0x00003730:    e1811203    ....    ORR      r1,r1,r3,LSL #4
+        0x00003734:    e7963105    .1..    LDR      r3,[r6,r5,LSL #2]
+        0x00003738:    e5831888    ....    STR      r1,[r3,#0x888]
+        0x0000373c:    e24bd01c    ..K.    SUB      r13,r11,#0x1c
+        0x00003740:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00003744:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Cfg_Ready
+    $a
+        0x00003748:    e1a0c00d    ....    MOV      r12,r13
+        0x0000374c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003750:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003754:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16980) = 0x3770]  = 0x4254
+        0x00003758:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x0000375c:    e3a00000    ....    MOV      r0,#0
+        0x00003760:    e5923870    p8..    LDR      r3,[r2,#0x870]
+        0x00003764:    e3833003    .0..    ORR      r3,r3,#3
+        0x00003768:    e5823870    p8..    STR      r3,[r2,#0x870]
+        0x0000376c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003770:    00004254    TB..    DCD    16980 ; [Section 17]
+    Sprite_Block_Get_Reg_From_Size
+    $a
+        0x00003774:    e1a0c00d    ....    MOV      r12,r13
+        0x00003778:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000377c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003780:    e3a03000    .0..    MOV      r3,#0
+        0x00003784:    e3500008    ..P.    CMP      r0,#8
+        0x00003788:    33a00008    ...3    MOVCC    r0,#8
+        0x0000378c:    ea000000    ....    B        {pc} + 0x8  ; 0x3794
+        0x00003790:    e6ef3072    r0..    UXTB     r3,r2
+        0x00003794:    e3500000    ..P.    CMP      r0,#0
+        0x00003798:    e2832001    . ..    ADD      r2,r3,#1
+        0x0000379c:    e1a000a0    ....    LSR      r0,r0,#1
+        0x000037a0:    1afffffa    ....    BNE      {pc} - 0x10  ; 0x3790
+        0x000037a4:    e353000b    ..S.    CMP      r3,#0xb
+        0x000037a8:    92433004    .0C.    SUBLS    r3,r3,#4
+        0x000037ac:    83a00007    ....    MOVHI    r0,#7
+        0x000037b0:    96ef0073    s...    UXTBLS   r0,r3
+        0x000037b4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DE_BE_Sprite_Enable
+        0x000037b8:    e1a0c00d    ....    MOV      r12,r13
+        0x000037bc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000037c0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000037c4:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 16980) = 0x37e4]  = 0x4254
+        0x000037c8:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x000037cc:    e3a00000    ....    MOV      r0,#0
+        0x000037d0:    e5923900    .9..    LDR      r3,[r2,#0x900]
+        0x000037d4:    e3c33001    .0..    BIC      r3,r3,#1
+        0x000037d8:    e1833001    .0..    ORR      r3,r3,r1
+        0x000037dc:    e5823900    .9..    STR      r3,[r2,#0x900]
+        0x000037e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000037e4:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Disable
+    $a
+        0x000037e8:    e1a0c00d    ....    MOV      r12,r13
+        0x000037ec:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000037f0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000037f4:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16980) = 0x3810]  = 0x4254
+        0x000037f8:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x000037fc:    e3a00000    ....    MOV      r0,#0
+        0x00003800:    e5923900    .9..    LDR      r3,[r2,#0x900]
+        0x00003804:    e3c33001    .0..    BIC      r3,r3,#1
+        0x00003808:    e5823900    .9..    STR      r3,[r2,#0x900]
+        0x0000380c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003810:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Set_Format
+    $a
+        0x00003814:    e1a0c00d    ....    MOV      r12,r13
+        0x00003818:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000381c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003820:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16980) = 0x383c]  = 0x4254
+        0x00003824:    e1a01601    ....    LSL      r1,r1,#12
+        0x00003828:    e1811402    ....    ORR      r1,r1,r2,LSL #8
+        0x0000382c:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00003830:    e3a00000    ....    MOV      r0,#0
+        0x00003834:    e5831908    ....    STR      r1,[r3,#0x908]
+        0x00003838:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000383c:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Global_Alpha_Enable
+    $a
+        0x00003840:    e1a0c00d    ....    MOV      r12,r13
+        0x00003844:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003848:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000384c:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16980) = 0x3860]  = 0x4254
+        0x00003850:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00003854:    e3a00000    ....    MOV      r0,#0
+        0x00003858:    e583190c    ....    STR      r1,[r3,#0x90c]
+        0x0000385c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003860:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Set_Global_Alpha
+    $a
+        0x00003864:    e1a0c00d    ....    MOV      r12,r13
+        0x00003868:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000386c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003870:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 16980) = 0x3890]  = 0x4254
+        0x00003874:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00003878:    e3a00000    ....    MOV      r0,#0
+        0x0000387c:    e592390c    .9..    LDR      r3,[r2,#0x90c]
+        0x00003880:    e3c334ff    .4..    BIC      r3,r3,#0xff000000
+        0x00003884:    e1833c01    .<..    ORR      r3,r3,r1,LSL #24
+        0x00003888:    e582390c    .9..    STR      r3,[r2,#0x90c]
+        0x0000388c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003890:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Block_Set_Pos
+    $a
+        0x00003894:    e1a0c00d    ....    MOV      r12,r13
+        0x00003898:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000389c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000038a0:    e3004fff    .O..    MOV      r4,#0xfff
+        0x000038a4:    e0033004    .0..    AND      r3,r3,r4
+        0x000038a8:    e0022004    . ..    AND      r2,r2,r4
+        0x000038ac:    e59f4024    $@..    LDR      r4,[pc,#36]   ; [([Section 17] + 16980) = 0x38d8]  = 0x4254
+        0x000038b0:    e59fc024    $...    LDR      r12,[pc,#36]   ; [0x38dc] = 0xf000f000
+        0x000038b4:    e7945100    .Q..    LDR      r5,[r4,r0,LSL #2]
+        0x000038b8:    e3a00000    ....    MOV      r0,#0
+        0x000038bc:    e2855c0a    .\..    ADD      r5,r5,#0xa00
+        0x000038c0:    e7954101    .A..    LDR      r4,[r5,r1,LSL #2]
+        0x000038c4:    e004c00c    ....    AND      r12,r4,r12
+        0x000038c8:    e18cc803    ....    ORR      r12,r12,r3,LSL #16
+        0x000038cc:    e18cc002    ....    ORR      r12,r12,r2
+        0x000038d0:    e785c101    ....    STR      r12,[r5,r1,LSL #2]
+        0x000038d4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000038d8:    00004254    TB..    DCD    16980 ; [Section 17]
+        0x000038dc:    f000f000    ....    DCD    4026593280
+    DE_BE_Sprite_Block_Set_Size
+    $a
+        0x000038e0:    e1a0c00d    ....    MOV      r12,r13
+        0x000038e4:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x000038e8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000038ec:    e59f8054    T...    LDR      r8,[pc,#84]   ; [([Section 17] + 16980) = 0x3948]  = 0x4254
+        0x000038f0:    e1a07000    .p..    MOV      r7,r0
+        0x000038f4:    e1a06003    .`..    MOV      r6,r3
+        0x000038f8:    e1a00002    ....    MOV      r0,r2
+        0x000038fc:    e1a0a001    ....    MOV      r10,r1
+        0x00003900:    e7983107    .1..    LDR      r3,[r8,r7,LSL #2]
+        0x00003904:    e2833c0a    .<..    ADD      r3,r3,#0xa00
+        0x00003908:    e7935101    .Q..    LDR      r5,[r3,r1,LSL #2]
+        0x0000390c:    ebffff98    ....    BL       {pc} - 0x198  ; 0x3774
+        0x00003910:    e3c5520f    .R..    BIC      r5,r5,#0xf0000000
+        0x00003914:    e3c55a0f    .Z..    BIC      r5,r5,#0xf000
+        0x00003918:    e1a04000    .@..    MOV      r4,r0
+        0x0000391c:    e1a00006    ....    MOV      r0,r6
+        0x00003920:    ebffff93    ....    BL       {pc} - 0x1ac  ; 0x3774
+        0x00003924:    e6ef4074    t@..    UXTB     r4,r4
+        0x00003928:    e7983107    .1..    LDR      r3,[r8,r7,LSL #2]
+        0x0000392c:    e1a04604    .F..    LSL      r4,r4,#12
+        0x00003930:    e2833c0a    .<..    ADD      r3,r3,#0xa00
+        0x00003934:    e1844e00    .N..    ORR      r4,r4,r0,LSL #28
+        0x00003938:    e3a00000    ....    MOV      r0,#0
+        0x0000393c:    e1844005    .@..    ORR      r4,r4,r5
+        0x00003940:    e783410a    .A..    STR      r4,[r3,r10,LSL #2]
+        0x00003944:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00003948:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Block_Set_fb
+    $a
+        0x0000394c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003950:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00003954:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003958:    e59f5028    (P..    LDR      r5,[pc,#40]   ; [([Section 17] + 16980) = 0x3988]  = 0x4254
+        0x0000395c:    e1a04000    .@..    MOV      r4,r0
+        0x00003960:    e1a02122    "!..    LSR      r2,r2,#2
+        0x00003964:    e1a03183    .1..    LSL      r3,r3,#3
+        0x00003968:    e3a00000    ....    MOV      r0,#0
+        0x0000396c:    e795c104    ....    LDR      r12,[r5,r4,LSL #2]
+        0x00003970:    e28ccb03    ....    ADD      r12,r12,#0xc00
+        0x00003974:    e78c2101    .!..    STR      r2,[r12,r1,LSL #2]
+        0x00003978:    e7952104    .!..    LDR      r2,[r5,r4,LSL #2]
+        0x0000397c:    e2822c0d    .,..    ADD      r2,r2,#0xd00
+        0x00003980:    e7823101    .1..    STR      r3,[r2,r1,LSL #2]
+        0x00003984:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00003988:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Block_Set_Next_Id
+    $a
+        0x0000398c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003990:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003994:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003998:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 16980) = 0x39b0]  = 0x4254
+        0x0000399c:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x000039a0:    e3a00000    ....    MOV      r0,#0
+        0x000039a4:    e2833c0b    .<..    ADD      r3,r3,#0xb00
+        0x000039a8:    e7832101    .!..    STR      r2,[r3,r1,LSL #2]
+        0x000039ac:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000039b0:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Sprite_Set_Palette_Table
+    $a
+        0x000039b4:    e1a0c00d    ....    MOV      r12,r13
+        0x000039b8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000039bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000039c0:    e1a0c001    ....    MOV      r12,r1
+        0x000039c4:    e59f103c    <...    LDR      r1,[pc,#60]   ; [([Section 17] + 16980) = 0x3a08]  = 0x4254
+        0x000039c8:    e3530b01    ..S.    CMP      r3,#0x400
+        0x000039cc:    23a03b01    .;.#    MOVCS    r3,#0x400
+        0x000039d0:    e3c33003    .0..    BIC      r3,r3,#3
+        0x000039d4:    e7911100    ....    LDR      r1,[r1,r0,LSL #2]
+        0x000039d8:    e2811901    ....    ADD      r1,r1,#0x4000
+        0x000039dc:    e0811002    ....    ADD      r1,r1,r2
+        0x000039e0:    e0810003    ....    ADD      r0,r1,r3
+        0x000039e4:    e1a02001    . ..    MOV      r2,r1
+        0x000039e8:    ea000001    ....    B        {pc} + 0xc  ; 0x39f4
+        0x000039ec:    e793300c    .0..    LDR      r3,[r3,r12]
+        0x000039f0:    e4823004    .0..    STR      r3,[r2],#4
+        0x000039f4:    e1520000    ..R.    CMP      r2,r0
+        0x000039f8:    e0613002    .0a.    RSB      r3,r1,r2
+        0x000039fc:    3afffffa    ...:    BCC      {pc} - 0x10  ; 0x39ec
+        0x00003a00:    e3a00000    ....    MOV      r0,#0
+        0x00003a04:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003a08:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Set_Enhance
+    $a
+        0x00003a0c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003a10:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00003a14:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003a18:    e24dd034    4.M.    SUB      r13,r13,#0x34
+        0x00003a1c:    e1c33fc3    .?..    BIC      r3,r3,r3,ASR #31
+        0x00003a20:    e3a0600a    .`..    MOV      r6,#0xa
+        0x00003a24:    e3530064    d.S.    CMP      r3,#0x64
+        0x00003a28:    a3a03064    d0..    MOVGE    r3,#0x64
+        0x00003a2c:    e3a07032    2p..    MOV      r7,#0x32
+        0x00003a30:    e1a09000    ....    MOV      r9,r0
+        0x00003a34:    e1c15fc1    ._..    BIC      r5,r1,r1,ASR #31
+        0x00003a38:    e0000396    ....    MUL      r0,r6,r3
+        0x00003a3c:    e1a01007    ....    MOV      r1,r7
+        0x00003a40:    e1c24fc2    .O..    BIC      r4,r2,r2,ASR #31
+        0x00003a44:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003a48:    e3540064    d.T.    CMP      r4,#0x64
+        0x00003a4c:    a3a04064    d@..    MOVGE    r4,#0x64
+        0x00003a50:    e1a01007    ....    MOV      r1,r7
+        0x00003a54:    e3027625    %v..    MOV      r7,#0x2625
+        0x00003a58:    e3550064    d.U.    CMP      r5,#0x64
+        0x00003a5c:    a3a05064    dP..    MOVGE    r5,#0x64
+        0x00003a60:    e59f8208    ....    LDR      r8,[pc,#520]  ; [([Section 17] + 16980) = 0x3c70]  = 0x4254
+        0x00003a64:    e0050596    ....    MUL      r5,r6,r5
+        0x00003a68:    e2455f7d    }_E.    SUB      r5,r5,#0x1f4
+        0x00003a6c:    e1a0a000    ....    MOV      r10,r0
+        0x00003a70:    e0000496    ....    MUL      r0,r6,r4
+        0x00003a74:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003a78:    e59f31f4    .1..    LDR      r3,[pc,#500]  ; [0x3c74] = 0x34014
+        0x00003a7c:    e1a01007    ....    MOV      r1,r7
+        0x00003a80:    e59f61f0    .a..    LDR      r6,[pc,#496]  ; [0x3c78] = 0xffffe001
+        0x00003a84:    e0030093    ....    MUL      r3,r3,r0
+        0x00003a88:    e1a04000    .@..    MOV      r4,r0
+        0x00003a8c:    e59f01e8    ....    LDR      r0,[pc,#488]  ; [0x3c7c] = 0xc02b7
+        0x00003a90:    e0203a90    .: .    MLA      r0,r0,r10,r3
+        0x00003a94:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x00003a98:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003a9c:    e59f31dc    .1..    LDR      r3,[pc,#476]  ; [0x3c80] = 0xae7c8
+        0x00003aa0:    e1a01007    ....    MOV      r1,r7
+        0x00003aa4:    e0030493    ....    MUL      r3,r3,r4
+        0x00003aa8:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x00003aac:    e50b0044    D...    STR      r0,[r11,#-0x44]
+        0x00003ab0:    e59f01cc    ....    LDR      r0,[pc,#460]  ; [0x3c84] = 0xfff51571
+        0x00003ab4:    e0203a90    .: .    MLA      r0,r0,r10,r3
+        0x00003ab8:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003abc:    e59f31c4    .1..    LDR      r3,[pc,#452]  ; [0x3c88] = 0x119e8
+        0x00003ac0:    e1a01007    ....    MOV      r1,r7
+        0x00003ac4:    e0030493    ....    MUL      r3,r3,r4
+        0x00003ac8:    e50b3038    80..    STR      r3,[r11,#-0x38]
+        0x00003acc:    e50b0048    H...    STR      r0,[r11,#-0x48]
+        0x00003ad0:    e59f01b4    ....    LDR      r0,[pc,#436]  ; [0x3c8c] = 0xfffee7d8
+        0x00003ad4:    e0203a90    .: .    MLA      r0,r0,r10,r3
+        0x00003ad8:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003adc:    e59f21ac    .!..    LDR      r2,[pc,#428]  ; [0x3c90] = 0x2d7800
+        0x00003ae0:    e30438c0    .8..    MOV      r3,#0x48c0
+        0x00003ae4:    e59f11a8    ....    LDR      r1,[pc,#424]  ; [0x3c94] = 0x186a0
+        0x00003ae8:    e0252593    .%%.    MLA      r5,r3,r5,r2
+        0x00003aec:    e50b004c    L...    STR      r0,[r11,#-0x4c]
+        0x00003af0:    e59f01a0    ....    LDR      r0,[pc,#416]  ; [0x3c98] = 0xfe395000
+        0x00003af4:    e0200594    .. .    MLA      r0,r4,r5,r0
+        0x00003af8:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003afc:    e51b2040    @ ..    LDR      r2,[r11,#-0x40]
+        0x00003b00:    e1a01007    ....    MOV      r1,r7
+        0x00003b04:    e1500006    ..P.    CMP      r0,r6
+        0x00003b08:    b1a00006    ....    MOVLT    r0,r6
+        0x00003b0c:    e50b0030    0...    STR      r0,[r11,#-0x30]
+        0x00003b10:    e59f0184    ....    LDR      r0,[pc,#388]  ; [0x3c9c] = 0xfffcc04f
+        0x00003b14:    e0202a90    .* .    MLA      r0,r0,r10,r2
+        0x00003b18:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003b1c:    e51b303c    <0..    LDR      r3,[r11,#-0x3c]
+        0x00003b20:    e1a01007    ....    MOV      r1,r7
+        0x00003b24:    e50b0050    P...    STR      r0,[r11,#-0x50]
+        0x00003b28:    e59f0170    p...    LDR      r0,[pc,#368]  ; [0x3ca0] = 0x45984
+        0x00003b2c:    e0203a90    .: .    MLA      r0,r0,r10,r3
+        0x00003b30:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003b34:    e51b2038    8 ..    LDR      r2,[r11,#-0x38]
+        0x00003b38:    e1a01007    ....    MOV      r1,r7
+        0x00003b3c:    e50b0054    T...    STR      r0,[r11,#-0x54]
+        0x00003b40:    e59f015c    \...    LDR      r0,[pc,#348]  ; [0x3ca4] = 0xfffee62d
+        0x00003b44:    e0202a90    .* .    MLA      r0,r0,r10,r2
+        0x00003b48:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003b4c:    e51b3040    @0..    LDR      r3,[r11,#-0x40]
+        0x00003b50:    e1a01007    ....    MOV      r1,r7
+        0x00003b54:    e1a05000    .P..    MOV      r5,r0
+        0x00003b58:    e59f0148    H...    LDR      r0,[pc,#328]  ; [0x3ca8] = 0xfffcbd91
+        0x00003b5c:    e1550006    ..U.    CMP      r5,r6
+        0x00003b60:    b1a05006    .P..    MOVLT    r5,r6
+        0x00003b64:    e0203a90    .: .    MLA      r0,r0,r10,r3
+        0x00003b68:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003b6c:    e51b2038    8 ..    LDR      r2,[r11,#-0x38]
+        0x00003b70:    e1a01007    ....    MOV      r1,r7
+        0x00003b74:    e1a04000    .@..    MOV      r4,r0
+        0x00003b78:    e59f012c    ,...    LDR      r0,[pc,#300]  ; [0x3cac] = 0xe2ae5
+        0x00003b7c:    e1540006    ..T.    CMP      r4,r6
+        0x00003b80:    b1a04006    .@..    MOVLT    r4,r6
+        0x00003b84:    e0202a90    .* .    MLA      r0,r0,r10,r2
+        0x00003b88:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003b8c:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003b90:    e51b1054    T...    LDR      r1,[r11,#-0x54]
+        0x00003b94:    e51b2048    H ..    LDR      r2,[r11,#-0x48]
+        0x00003b98:    e51bc04c    L...    LDR      r12,[r11,#-0x4c]
+        0x00003b9c:    e1510006    ..Q.    CMP      r1,r6
+        0x00003ba0:    b1a01006    ....    MOVLT    r1,r6
+        0x00003ba4:    e51be050    P...    LDR      r14,[r11,#-0x50]
+        0x00003ba8:    e1520006    ..R.    CMP      r2,r6
+        0x00003bac:    b1a02006    . ..    MOVLT    r2,r6
+        0x00003bb0:    e50b1034    4...    STR      r1,[r11,#-0x34]
+        0x00003bb4:    e15c0006    ..\.    CMP      r12,r6
+        0x00003bb8:    b1a0c006    ....    MOVLT    r12,r6
+        0x00003bbc:    e15e0006    ..^.    CMP      r14,r6
+        0x00003bc0:    b1a0e006    ....    MOVLT    r14,r6
+        0x00003bc4:    e1a01007    ....    MOV      r1,r7
+        0x00003bc8:    e50b0058    X...    STR      r0,[r11,#-0x58]
+        0x00003bcc:    e51b0044    D...    LDR      r0,[r11,#-0x44]
+        0x00003bd0:    e1500006    ..P.    CMP      r0,r6
+        0x00003bd4:    b1a00006    ....    MOVLT    r0,r6
+        0x00003bd8:    e58309d0    ....    STR      r0,[r3,#0x9d0]
+        0x00003bdc:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003be0:    e59f00c8    ....    LDR      r0,[pc,#200]  ; [0x3cb0] = 0xfff5178a
+        0x00003be4:    e58329d4    .)..    STR      r2,[r3,#0x9d4]
+        0x00003be8:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003bec:    e51b203c    < ..    LDR      r2,[r11,#-0x3c]
+        0x00003bf0:    e583c9d8    ....    STR      r12,[r3,#0x9d8]
+        0x00003bf4:    e0202a90    .* .    MLA      r0,r0,r10,r2
+        0x00003bf8:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003bfc:    e51b2030    0 ..    LDR      r2,[r11,#-0x30]
+        0x00003c00:    e58329dc    .)..    STR      r2,[r3,#0x9dc]
+        0x00003c04:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003c08:    e583e9e0    ....    STR      r14,[r3,#0x9e0]
+        0x00003c0c:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003c10:    e51b2034    4 ..    LDR      r2,[r11,#-0x34]
+        0x00003c14:    e58329e4    .)..    STR      r2,[r3,#0x9e4]
+        0x00003c18:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003c1c:    e58359e8    .Y..    STR      r5,[r3,#0x9e8]
+        0x00003c20:    e51b2030    0 ..    LDR      r2,[r11,#-0x30]
+        0x00003c24:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003c28:    e58329ec    .)..    STR      r2,[r3,#0x9ec]
+        0x00003c2c:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003c30:    e58349f0    .I..    STR      r4,[r3,#0x9f0]
+        0x00003c34:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00003c38:    e7984109    .A..    LDR      r4,[r8,r9,LSL #2]
+        0x00003c3c:    e51b2058    X ..    LDR      r2,[r11,#-0x58]
+        0x00003c40:    e1520006    ..R.    CMP      r2,r6
+        0x00003c44:    b1a02006    . ..    MOVLT    r2,r6
+        0x00003c48:    e1a03000    .0..    MOV      r3,r0
+        0x00003c4c:    e58439f4    .9..    STR      r3,[r4,#0x9f4]
+        0x00003c50:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003c54:    e3a00000    ....    MOV      r0,#0
+        0x00003c58:    e58329f8    .)..    STR      r2,[r3,#0x9f8]
+        0x00003c5c:    e51b1030    0...    LDR      r1,[r11,#-0x30]
+        0x00003c60:    e7983109    .1..    LDR      r3,[r8,r9,LSL #2]
+        0x00003c64:    e58319fc    ....    STR      r1,[r3,#0x9fc]
+        0x00003c68:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00003c6c:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00003c70:    00004254    TB..    DCD    16980 ; [Section 17]
+        0x00003c74:    00034014    .@..    DCD    213012
+        0x00003c78:    ffffe001    ....    DCD    4294959105
+        0x00003c7c:    000c02b7    ....    DCD    787127
+        0x00003c80:    000ae7c8    ....    DCD    714696
+        0x00003c84:    fff51571    q...    DCD    4294251889
+        0x00003c88:    000119e8    ....    DCD    72168
+        0x00003c8c:    fffee7d8    ....    DCD    4294895576
+        0x00003c90:    002d7800    .x-.    DCD    2979840
+        0x00003c94:    000186a0    ....    DCD    100000
+        0x00003c98:    fe395000    .P9.    DCD    4265168896
+        0x00003c9c:    fffcc04f    O...    DCD    4294754383
+        0x00003ca0:    00045984    .Y..    DCD    285060
+        0x00003ca4:    fffee62d    -...    DCD    4294895149
+        0x00003ca8:    fffcbd91    ....    DCD    4294753681
+        0x00003cac:    000e2ae5    .*..    DCD    928485
+        0x00003cb0:    fff5178a    ....    DCD    4294252426
+    DE_BE_enhance_enable
+    $a
+        0x00003cb4:    e1a0c00d    ....    MOV      r12,r13
+        0x00003cb8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003cbc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003cc0:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16980) = 0x3cd4]  = 0x4254
+        0x00003cc4:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00003cc8:    e3a00000    ....    MOV      r0,#0
+        0x00003ccc:    e58319c0    ....    STR      r1,[r3,#0x9c0]
+        0x00003cd0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003cd4:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Output_Cfg_Csc_Coeff
+    $a
+        0x00003cd8:    e1a0c00d    ....    MOV      r12,r13
+        0x00003cdc:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x00003ce0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003ce4:    e59f3054    T0..    LDR      r3,[pc,#84]   ; [([Section 17] + 16980) = 0x3d40]  = 0x4254
+        0x00003ce8:    e1a02301    .#..    LSL      r2,r1,#6
+        0x00003cec:    e2011003    ....    AND      r1,r1,#3
+        0x00003cf0:    e20220ff    . ..    AND      r2,r2,#0xff
+        0x00003cf4:    e7930100    ....    LDR      r0,[r3,r0,LSL #2]
+        0x00003cf8:    e0822381    .#..    ADD      r2,r2,r1,LSL #7
+        0x00003cfc:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [([Section 12] + 608) = 0x3d44]  = 0x260
+        0x00003d00:    e3a01000    ....    MOV      r1,#0
+        0x00003d04:    e280cd26    &...    ADD      r12,r0,#0x980
+        0x00003d08:    e2800e95    ....    ADD      r0,r0,#0x950
+        0x00003d0c:    e0834002    .@..    ADD      r4,r3,r2
+        0x00003d10:    ea000006    ....    B        {pc} + 0x20  ; 0x3d30
+        0x00003d14:    e5903000    .0..    LDR      r3,[r0,#0]
+        0x00003d18:    e7942001    . ..    LDR      r2,[r4,r1]
+        0x00003d1c:    e2811004    ....    ADD      r1,r1,#4
+        0x00003d20:    e1a03803    .8..    LSL      r3,r3,#16
+        0x00003d24:    e1a03823    #8..    LSR      r3,r3,#16
+        0x00003d28:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x00003d2c:    e4803004    .0..    STR      r3,[r0],#4
+        0x00003d30:    e150000c    ..P.    CMP      r0,r12
+        0x00003d34:    3afffff6    ...:    BCC      {pc} - 0x20  ; 0x3d14
+        0x00003d38:    e3a00000    ....    MOV      r0,#0
+        0x00003d3c:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x00003d40:    00004254    TB..    DCD    16980 ; [Section 17]
+        0x00003d44:    00000260    `...    DCD    608 ; [Section 12]
+    DE_BE_set_display_size
+    $a
+        0x00003d48:    e1a0c00d    ....    MOV      r12,r13
+        0x00003d4c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003d50:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003d54:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 16980) = 0x3d74]  = 0x4254
+        0x00003d58:    e2422001    . B.    SUB      r2,r2,#1
+        0x00003d5c:    e2411001    ..A.    SUB      r1,r1,#1
+        0x00003d60:    e1811802    ....    ORR      r1,r1,r2,LSL #16
+        0x00003d64:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00003d68:    e3a00000    ....    MOV      r0,#0
+        0x00003d6c:    e5831808    ....    STR      r1,[r3,#0x808]
+        0x00003d70:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003d74:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_EnableINT
+    $a
+        0x00003d78:    e1a0c00d    ....    MOV      r12,r13
+        0x00003d7c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003d80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003d84:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16980) = 0x3da0]  = 0x4254
+        0x00003d88:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00003d8c:    e3a00000    ....    MOV      r0,#0
+        0x00003d90:    e59238c0    .8..    LDR      r3,[r2,#0x8c0]
+        0x00003d94:    e1833001    .0..    ORR      r3,r3,r1
+        0x00003d98:    e58238c0    .8..    STR      r3,[r2,#0x8c0]
+        0x00003d9c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003da0:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_DisableINT
+    $a
+        0x00003da4:    e1a0c00d    ....    MOV      r12,r13
+        0x00003da8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003dac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003db0:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16980) = 0x3dcc]  = 0x4254
+        0x00003db4:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00003db8:    e3a00000    ....    MOV      r0,#0
+        0x00003dbc:    e59238c0    .8..    LDR      r3,[r2,#0x8c0]
+        0x00003dc0:    e1c33001    .0..    BIC      r3,r3,r1
+        0x00003dc4:    e58238c0    .8..    STR      r3,[r2,#0x8c0]
+        0x00003dc8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003dcc:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_QueryINT
+    $a
+        0x00003dd0:    e1a0c00d    ....    MOV      r12,r13
+        0x00003dd4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003dd8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003ddc:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [([Section 17] + 16980) = 0x3dec]  = 0x4254
+        0x00003de0:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00003de4:    e59308c4    ....    LDR      r0,[r3,#0x8c4]
+        0x00003de8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003dec:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_ClearINT
+    $a
+        0x00003df0:    e1a0c00d    ....    MOV      r12,r13
+        0x00003df4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003df8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003dfc:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16980) = 0x3e10]  = 0x4254
+        0x00003e00:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00003e04:    e3a00000    ....    MOV      r0,#0
+        0x00003e08:    e58318c4    ....    STR      r1,[r3,#0x8c4]
+        0x00003e0c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003e10:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_BE_Reg_Init
+    $a
+        0x00003e14:    e1a0c00d    ....    MOV      r12,r13
+        0x00003e18:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003e1c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003e20:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16980) = 0x3e3c]  = 0x4254
+        0x00003e24:    e3a01b02    ....    MOV      r1,#0x800
+        0x00003e28:    e7930100    ....    LDR      r0,[r3,r0,LSL #2]
+        0x00003e2c:    e0800001    ....    ADD      r0,r0,r1
+        0x00003e30:    ebfffffe    ....    BL       __memzero  ;
+        0x00003e34:    e3a00000    ....    MOV      r0,#0
+        0x00003e38:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003e3c:    00004254    TB..    DCD    16980 ; [Section 17]
+    DE_SCAL_Set_Reg_Base
+    $a
+        0x00003e40:    e1a0c00d    ....    MOV      r12,r13
+        0x00003e44:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003e48:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003e4c:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [([Section 17] + 16988) = 0x3e5c]  = 0x425c
+        0x00003e50:    e7831100    ....    STR      r1,[r3,r0,LSL #2]
+        0x00003e54:    e3a00000    ....    MOV      r0,#0
+        0x00003e58:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003e5c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Reg_Base
+    $a
+        0x00003e60:    e1a0c00d    ....    MOV      r12,r13
+        0x00003e64:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00003e68:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003e6c:    e59f3004    .0..    LDR      r3,[pc,#4]    ; [([Section 17] + 16988) = 0x3e78]  = 0x425c
+        0x00003e70:    e7930100    ....    LDR      r0,[r3,r0,LSL #2]
+        0x00003e74:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00003e78:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Config_Src
+    $a
+        0x00003e7c:    e1a0c00d    ....    MOV      r12,r13
+        0x00003e80:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00003e84:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00003e88:    e24dd094    ..M.    SUB      r13,r13,#0x94
+        0x00003e8c:    e50b3088    .0..    STR      r3,[r11,#-0x88]
+        0x00003e90:    e1a09000    ....    MOV      r9,r0
+        0x00003e94:    e50b1084    ....    STR      r1,[r11,#-0x84]
+        0x00003e98:    e592000c    ....    LDR      r0,[r2,#0xc]
+        0x00003e9c:    e5925008    .P..    LDR      r5,[r2,#8]
+        0x00003ea0:    e5928000    ....    LDR      r8,[r2,#0]
+        0x00003ea4:    e50b0040    @...    STR      r0,[r11,#-0x40]
+        0x00003ea8:    e5921010    ....    LDR      r1,[r2,#0x10]
+        0x00003eac:    e5dbc004    ....    LDRB     r12,[r11,#4]
+        0x00003eb0:    e5db4008    .@..    LDRB     r4,[r11,#8]
+        0x00003eb4:    e50b103c    <...    STR      r1,[r11,#-0x3c]
+        0x00003eb8:    e194400c    .@..    ORRS     r4,r4,r12
+        0x00003ebc:    e5927004    .p..    LDR      r7,[r2,#4]
+        0x00003ec0:    e51b2088    . ..    LDR      r2,[r11,#-0x88]
+        0x00003ec4:    13c55001    .P..    BICNE    r5,r5,#1
+        0x00003ec8:    e3590000    ..Y.    CMP      r9,#0
+        0x00003ecc:    e50b504c    LP..    STR      r5,[r11,#-0x4c]
+        0x00003ed0:    e5d20003    ....    LDRB     r0,[r2,#3]
+        0x00003ed4:    1a00003c    <...    BNE      {pc} + 0xf8  ; 0x3fcc
+        0x00003ed8:    e2403001    .0@.    SUB      r3,r0,#1
+        0x00003edc:    e6ef3073    s0..    UXTB     r3,r3
+        0x00003ee0:    e3530001    ..S.    CMP      r3,#1
+        0x00003ee4:    8a000018    ....    BHI      {pc} + 0x68  ; 0x3f4c
+        0x00003ee8:    e5d23002    .0..    LDRB     r3,[r2,#2]
+        0x00003eec:    e1a040a7    .@..    LSR      r4,r7,#1
+        0x00003ef0:    e2881001    ....    ADD      r1,r8,#1
+        0x00003ef4:    e50b4048    H@..    STR      r4,[r11,#-0x48]
+        0x00003ef8:    e3530001    ..S.    CMP      r3,#1
+        0x00003efc:    0a000008    ....    BEQ      {pc} + 0x28  ; 0x3f24
+        0x00003f00:    e51b5040    @P..    LDR      r5,[r11,#-0x40]
+        0x00003f04:    e3a06001    .`..    MOV      r6,#1
+        0x00003f08:    e1a010a1    ....    LSR      r1,r1,#1
+        0x00003f0c:    e50b6058    X`..    STR      r6,[r11,#-0x58]
+        0x00003f10:    e2853001    .0..    ADD      r3,r5,#1
+        0x00003f14:    e50b1050    P...    STR      r1,[r11,#-0x50]
+        0x00003f18:    e1a03633    36..    LSR      r3,r3,r6
+        0x00003f1c:    e50b3038    80..    STR      r3,[r11,#-0x38]
+        0x00003f20:    ea00001c    ....    B        {pc} + 0x78  ; 0x3f98
+        0x00003f24:    e51bc040    @...    LDR      r12,[r11,#-0x40]
+        0x00003f28:    e3c18001    ....    BIC      r8,r1,#1
+        0x00003f2c:    e3c77001    .p..    BIC      r7,r7,#1
+        0x00003f30:    e50b3058    X0..    STR      r3,[r11,#-0x58]
+        0x00003f34:    e3ccc001    ....    BIC      r12,r12,#1
+        0x00003f38:    e1a010a8    ....    LSR      r1,r8,#1
+        0x00003f3c:    e50bc040    @...    STR      r12,[r11,#-0x40]
+        0x00003f40:    e50b1050    P...    STR      r1,[r11,#-0x50]
+        0x00003f44:    e1a020ac    . ..    LSR      r2,r12,#1
+        0x00003f48:    ea000011    ....    B        {pc} + 0x4c  ; 0x3f94
+        0x00003f4c:    e3500003    ..P.    CMP      r0,#3
+        0x00003f50:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x3f6c
+        0x00003f54:    e51b3040    @0..    LDR      r3,[r11,#-0x40]
+        0x00003f58:    e50b8050    P...    STR      r8,[r11,#-0x50]
+        0x00003f5c:    e50b7048    Hp..    STR      r7,[r11,#-0x48]
+        0x00003f60:    e50b3038    80..    STR      r3,[r11,#-0x38]
+        0x00003f64:    e50b9058    X...    STR      r9,[r11,#-0x58]
+        0x00003f68:    ea00000a    ....    B        {pc} + 0x30  ; 0x3f98
+        0x00003f6c:    e51b4040    @@..    LDR      r4,[r11,#-0x40]
+        0x00003f70:    e3a06002    .`..    MOV      r6,#2
+        0x00003f74:    e2883003    .0..    ADD      r3,r8,#3
+        0x00003f78:    e1a05127    'Q..    LSR      r5,r7,#2
+        0x00003f7c:    e2842003    . ..    ADD      r2,r4,#3
+        0x00003f80:    e50b5048    HP..    STR      r5,[r11,#-0x48]
+        0x00003f84:    e1a03633    36..    LSR      r3,r3,r6
+        0x00003f88:    e50b6058    X`..    STR      r6,[r11,#-0x58]
+        0x00003f8c:    e1a02632    2&..    LSR      r2,r2,r6
+        0x00003f90:    e50b3050    P0..    STR      r3,[r11,#-0x50]
+        0x00003f94:    e50b2038    8 ..    STR      r2,[r11,#-0x38]
+        0x00003f98:    e3500004    ..P.    CMP      r0,#4
+        0x00003f9c:    13500002    ..P.    CMPNE    r0,#2
+        0x00003fa0:    1a000042    B...    BNE      {pc} + 0x110  ; 0x40b0
+        0x00003fa4:    e51bc03c    <...    LDR      r12,[r11,#-0x3c]
+        0x00003fa8:    e3a01001    ....    MOV      r1,#1
+        0x00003fac:    e51b004c    L...    LDR      r0,[r11,#-0x4c]
+        0x00003fb0:    e28c3001    .0..    ADD      r3,r12,#1
+        0x00003fb4:    e50b1054    T...    STR      r1,[r11,#-0x54]
+        0x00003fb8:    e1a000a0    ....    LSR      r0,r0,#1
+        0x00003fbc:    e1a03133    31..    LSR      r3,r3,r1
+        0x00003fc0:    e50b0044    D...    STR      r0,[r11,#-0x44]
+        0x00003fc4:    e50b3034    40..    STR      r3,[r11,#-0x34]
+        0x00003fc8:    ea00003e    >...    B        {pc} + 0x100  ; 0x40c8
+        0x00003fcc:    e2403001    .0@.    SUB      r3,r0,#1
+        0x00003fd0:    e6ef3073    s0..    UXTB     r3,r3
+        0x00003fd4:    e3530001    ..S.    CMP      r3,#1
+        0x00003fd8:    8a00000e    ....    BHI      {pc} + 0x40  ; 0x4018
+        0x00003fdc:    e51b2040    @ ..    LDR      r2,[r11,#-0x40]
+        0x00003fe0:    e2883001    .0..    ADD      r3,r8,#1
+        0x00003fe4:    e3c38001    ....    BIC      r8,r3,#1
+        0x00003fe8:    e3c77001    .p..    BIC      r7,r7,#1
+        0x00003fec:    e3c22001    . ..    BIC      r2,r2,#1
+        0x00003ff0:    e3a04001    .@..    MOV      r4,#1
+        0x00003ff4:    e50b2040    @ ..    STR      r2,[r11,#-0x40]
+        0x00003ff8:    e1a05438    8T..    LSR      r5,r8,r4
+        0x00003ffc:    e1a030a2    .0..    LSR      r3,r2,#1
+        0x00004000:    e1a06437    7d..    LSR      r6,r7,r4
+        0x00004004:    e50b3038    80..    STR      r3,[r11,#-0x38]
+        0x00004008:    e50b4058    X@..    STR      r4,[r11,#-0x58]
+        0x0000400c:    e50b5050    PP..    STR      r5,[r11,#-0x50]
+        0x00004010:    e50b6048    H`..    STR      r6,[r11,#-0x48]
+        0x00004014:    ea000015    ....    B        {pc} + 0x5c  ; 0x4070
+        0x00004018:    e3500003    ..P.    CMP      r0,#3
+        0x0000401c:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x403c
+        0x00004020:    e51bc040    @...    LDR      r12,[r11,#-0x40]
+        0x00004024:    e3a01000    ....    MOV      r1,#0
+        0x00004028:    e50b8050    P...    STR      r8,[r11,#-0x50]
+        0x0000402c:    e50b7048    Hp..    STR      r7,[r11,#-0x48]
+        0x00004030:    e50bc038    8...    STR      r12,[r11,#-0x38]
+        0x00004034:    e50b1058    X...    STR      r1,[r11,#-0x58]
+        0x00004038:    ea00000c    ....    B        {pc} + 0x38  ; 0x4070
+        0x0000403c:    e51b2040    @ ..    LDR      r2,[r11,#-0x40]
+        0x00004040:    e3c77003    .p..    BIC      r7,r7,#3
+        0x00004044:    e2883003    .0..    ADD      r3,r8,#3
+        0x00004048:    e3a04002    .@..    MOV      r4,#2
+        0x0000404c:    e3c22003    . ..    BIC      r2,r2,#3
+        0x00004050:    e1a06437    7d..    LSR      r6,r7,r4
+        0x00004054:    e1a03433    34..    LSR      r3,r3,r4
+        0x00004058:    e50b2040    @ ..    STR      r2,[r11,#-0x40]
+        0x0000405c:    e1a05432    2T..    LSR      r5,r2,r4
+        0x00004060:    e50b4058    X@..    STR      r4,[r11,#-0x58]
+        0x00004064:    e50b5038    8P..    STR      r5,[r11,#-0x38]
+        0x00004068:    e50b6048    H`..    STR      r6,[r11,#-0x48]
+        0x0000406c:    e50b3050    P0..    STR      r3,[r11,#-0x50]
+        0x00004070:    e3500004    ..P.    CMP      r0,#4
+        0x00004074:    13500002    ..P.    CMPNE    r0,#2
+        0x00004078:    1a00000c    ....    BNE      {pc} + 0x38  ; 0x40b0
+        0x0000407c:    e51bc03c    <...    LDR      r12,[r11,#-0x3c]
+        0x00004080:    e3a01001    ....    MOV      r1,#1
+        0x00004084:    e51b004c    L...    LDR      r0,[r11,#-0x4c]
+        0x00004088:    e3ccc001    ....    BIC      r12,r12,#1
+        0x0000408c:    e50b1054    T...    STR      r1,[r11,#-0x54]
+        0x00004090:    e3c00001    ....    BIC      r0,r0,#1
+        0x00004094:    e50bc03c    <...    STR      r12,[r11,#-0x3c]
+        0x00004098:    e1a0213c    <!..    LSR      r2,r12,r1
+        0x0000409c:    e50b004c    L...    STR      r0,[r11,#-0x4c]
+        0x000040a0:    e1a03130    01..    LSR      r3,r0,r1
+        0x000040a4:    e50b2034    4 ..    STR      r2,[r11,#-0x34]
+        0x000040a8:    e50b3044    D0..    STR      r3,[r11,#-0x44]
+        0x000040ac:    ea000005    ....    B        {pc} + 0x1c  ; 0x40c8
+        0x000040b0:    e51b404c    L@..    LDR      r4,[r11,#-0x4c]
+        0x000040b4:    e3a06000    .`..    MOV      r6,#0
+        0x000040b8:    e51b503c    <P..    LDR      r5,[r11,#-0x3c]
+        0x000040bc:    e50b6054    T`..    STR      r6,[r11,#-0x54]
+        0x000040c0:    e50b4044    D@..    STR      r4,[r11,#-0x44]
+        0x000040c4:    e50b5034    4P..    STR      r5,[r11,#-0x34]
+        0x000040c8:    e51bc088    ....    LDR      r12,[r11,#-0x88]
+        0x000040cc:    e5dc3002    .0..    LDRB     r3,[r12,#2]
+        0x000040d0:    e3530000    ..S.    CMP      r3,#0
+        0x000040d4:    1a00001e    ....    BNE      {pc} + 0x80  ; 0x4154
+        0x000040d8:    e59f2684    .&..    LDR      r2,[pc,#1668] ; [([Section 17] + 16988) = 0x4764]  = 0x425c
+        0x000040dc:    e51b1044    D...    LDR      r1,[r11,#-0x44]
+        0x000040e0:    e51b3050    P0..    LDR      r3,[r11,#-0x50]
+        0x000040e4:    e51b4048    H@..    LDR      r4,[r11,#-0x48]
+        0x000040e8:    e51b504c    LP..    LDR      r5,[r11,#-0x4c]
+        0x000040ec:    e0204193    .A .    MLA      r0,r3,r1,r4
+        0x000040f0:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x000040f4:    e0217598    .u!.    MLA      r1,r8,r5,r7
+        0x000040f8:    e5838040    @...    STR      r8,[r3,#0x40]
+        0x000040fc:    e51b6050    P`..    LDR      r6,[r11,#-0x50]
+        0x00004100:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x00004104:    e5836044    D`..    STR      r6,[r3,#0x44]
+        0x00004108:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x0000410c:    e5836048    H`..    STR      r6,[r3,#0x48]
+        0x00004110:    e51b7084    .p..    LDR      r7,[r11,#-0x84]
+        0x00004114:    e792c109    ....    LDR      r12,[r2,r9,LSL #2]
+        0x00004118:    e5821008    ....    STR      r1,[r2,#8]
+        0x0000411c:    e582000c    ....    STR      r0,[r2,#0xc]
+        0x00004120:    e5820010    ....    STR      r0,[r2,#0x10]
+        0x00004124:    e5973000    .0..    LDR      r3,[r7,#0]
+        0x00004128:    e0811003    ....    ADD      r1,r1,r3
+        0x0000412c:    e58c1020     ...    STR      r1,[r12,#0x20]
+        0x00004130:    e7921109    ....    LDR      r1,[r2,r9,LSL #2]
+        0x00004134:    e5973004    .0..    LDR      r3,[r7,#4]
+        0x00004138:    e0803003    .0..    ADD      r3,r0,r3
+        0x0000413c:    e5813024    $0..    STR      r3,[r1,#0x24]
+        0x00004140:    e7922109    .!..    LDR      r2,[r2,r9,LSL #2]
+        0x00004144:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x00004148:    e0800003    ....    ADD      r0,r0,r3
+        0x0000414c:    e5820028    (...    STR      r0,[r2,#0x28]
+        0x00004150:    ea000150    P...    B        {pc} + 0x548  ; 0x4698
+        0x00004154:    e3530001    ..S.    CMP      r3,#1
+        0x00004158:    1a00001b    ....    BNE      {pc} + 0x74  ; 0x41cc
+        0x0000415c:    e59f2600    .&..    LDR      r2,[pc,#1536] ; [([Section 17] + 16988) = 0x4764]  = 0x425c
+        0x00004160:    e3a00000    ....    MOV      r0,#0
+        0x00004164:    e51b304c    L0..    LDR      r3,[r11,#-0x4c]
+        0x00004168:    e51bc058    X...    LDR      r12,[r11,#-0x58]
+        0x0000416c:    e0217398    .s!.    MLA      r1,r8,r3,r7
+        0x00004170:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x00004174:    e26c4002    .@l.    RSB      r4,r12,#2
+        0x00004178:    e1a0c418    ....    LSL      r12,r8,r4
+        0x0000417c:    e583c040    @...    STR      r12,[r3,#0x40]
+        0x00004180:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x00004184:    e1a01411    ....    LSL      r1,r1,r4
+        0x00004188:    e5830044    D...    STR      r0,[r3,#0x44]
+        0x0000418c:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x00004190:    e5830048    H...    STR      r0,[r3,#0x48]
+        0x00004194:    e51b4084    .@..    LDR      r4,[r11,#-0x84]
+        0x00004198:    e792c109    ....    LDR      r12,[r2,r9,LSL #2]
+        0x0000419c:    e5821008    ....    STR      r1,[r2,#8]
+        0x000041a0:    e5820010    ....    STR      r0,[r2,#0x10]
+        0x000041a4:    e582000c    ....    STR      r0,[r2,#0xc]
+        0x000041a8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x000041ac:    e0811003    ....    ADD      r1,r1,r3
+        0x000041b0:    e58c1020     ...    STR      r1,[r12,#0x20]
+        0x000041b4:    e7921109    ....    LDR      r1,[r2,r9,LSL #2]
+        0x000041b8:    e5943004    .0..    LDR      r3,[r4,#4]
+        0x000041bc:    e5813024    $0..    STR      r3,[r1,#0x24]
+        0x000041c0:    e7922109    .!..    LDR      r2,[r2,r9,LSL #2]
+        0x000041c4:    e5943008    .0..    LDR      r3,[r4,#8]
+        0x000041c8:    ea00001f    ....    B        {pc} + 0x84  ; 0x424c
+        0x000041cc:    e3530002    ..S.    CMP      r3,#2
+        0x000041d0:    1a00001f    ....    BNE      {pc} + 0x84  ; 0x4254
+        0x000041d4:    e59f2588    .%..    LDR      r2,[pc,#1416] ; [([Section 17] + 16988) = 0x4764]  = 0x425c
+        0x000041d8:    e3a04000    .@..    MOV      r4,#0
+        0x000041dc:    e51b604c    L`..    LDR      r6,[r11,#-0x4c]
+        0x000041e0:    e51b5050    PP..    LDR      r5,[r11,#-0x50]
+        0x000041e4:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x000041e8:    e0207698    .v .    MLA      r0,r8,r6,r7
+        0x000041ec:    e51b7044    Dp..    LDR      r7,[r11,#-0x44]
+        0x000041f0:    e51b6048    H`..    LDR      r6,[r11,#-0x48]
+        0x000041f4:    e1a0c085    ....    LSL      r12,r5,#1
+        0x000041f8:    e5838040    @...    STR      r8,[r3,#0x40]
+        0x000041fc:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x00004200:    e0216795    .g!.    MLA      r1,r5,r7,r6
+        0x00004204:    e583c044    D...    STR      r12,[r3,#0x44]
+        0x00004208:    e7923109    .1..    LDR      r3,[r2,r9,LSL #2]
+        0x0000420c:    e5834048    H@..    STR      r4,[r3,#0x48]
+        0x00004210:    e1a01081    ....    LSL      r1,r1,#1
+        0x00004214:    e51b7084    .p..    LDR      r7,[r11,#-0x84]
+        0x00004218:    e792c109    ....    LDR      r12,[r2,r9,LSL #2]
+        0x0000421c:    e5820008    ....    STR      r0,[r2,#8]
+        0x00004220:    e582100c    ....    STR      r1,[r2,#0xc]
+        0x00004224:    e5824010    .@..    STR      r4,[r2,#0x10]
+        0x00004228:    e5973000    .0..    LDR      r3,[r7,#0]
+        0x0000422c:    e0800003    ....    ADD      r0,r0,r3
+        0x00004230:    e58c0020     ...    STR      r0,[r12,#0x20]
+        0x00004234:    e7920109    ....    LDR      r0,[r2,r9,LSL #2]
+        0x00004238:    e5973004    .0..    LDR      r3,[r7,#4]
+        0x0000423c:    e0811003    ....    ADD      r1,r1,r3
+        0x00004240:    e5801024    $...    STR      r1,[r0,#0x24]
+        0x00004244:    e7922109    .!..    LDR      r2,[r2,r9,LSL #2]
+        0x00004248:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x0000424c:    e5823028    (0..    STR      r3,[r2,#0x28]
+        0x00004250:    ea000110    ....    B        {pc} + 0x448  ; 0x4698
+        0x00004254:    e3530004    ..S.    CMP      r3,#4
+        0x00004258:    1a0000a2    ....    BNE      {pc} + 0x290  ; 0x44e8
+        0x0000425c:    e59f0500    ....    LDR      r0,[pc,#1280] ; [([Section 17] + 16988) = 0x4764]  = 0x425c
+        0x00004260:    e207500f    .P..    AND      r5,r7,#0xf
+        0x00004264:    e51b1040    @...    LDR      r1,[r11,#-0x40]
+        0x00004268:    e3a0600f    .`..    MOV      r6,#0xf
+        0x0000426c:    e51b2058    X ..    LDR      r2,[r11,#-0x58]
+        0x00004270:    e288800f    ....    ADD      r8,r8,#0xf
+        0x00004274:    e51bc04c    L...    LDR      r12,[r11,#-0x4c]
+        0x00004278:    e281400f    .@..    ADD      r4,r1,#0xf
+        0x0000427c:    e51b3054    T0..    LDR      r3,[r11,#-0x54]
+        0x00004280:    e0844005    .@..    ADD      r4,r4,r5
+        0x00004284:    e7901109    ....    LDR      r1,[r0,r9,LSL #2]
+        0x00004288:    e20cc00f    ....    AND      r12,r12,#0xf
+        0x0000428c:    e50bc078    x...    STR      r12,[r11,#-0x78]
+        0x00004290:    e1a0c256    V...    ASR      r12,r6,r2
+        0x00004294:    e51b2044    D ..    LDR      r2,[r11,#-0x44]
+        0x00004298:    e0044006    .@..    AND      r4,r4,r6
+        0x0000429c:    e1a06356    Vc..    ASR      r6,r6,r3
+        0x000042a0:    e50b8080    ....    STR      r8,[r11,#-0x80]
+        0x000042a4:    e0062002    . ..    AND      r2,r6,r2
+        0x000042a8:    e51b8048    H...    LDR      r8,[r11,#-0x48]
+        0x000042ac:    e50b208c    . ..    STR      r2,[r11,#-0x8c]
+        0x000042b0:    e6efa07c    |...    UXTB     r10,r12
+        0x000042b4:    e5913030    00..    LDR      r3,[r1,#0x30]
+        0x000042b8:    e00a8008    ....    AND      r8,r10,r8
+        0x000042bc:    e50b8074    t...    STR      r8,[r11,#-0x74]
+        0x000042c0:    e2077eff    .~..    AND      r7,r7,#0xff0
+        0x000042c4:    e51b8038    8...    LDR      r8,[r11,#-0x38]
+        0x000042c8:    e7c43015    .0..    BFI      r3,r5,#0,#5
+        0x000042cc:    e5813030    00..    STR      r3,[r1,#0x30]
+        0x000042d0:    e51b1074    t...    LDR      r1,[r11,#-0x74]
+        0x000042d4:    e08a2008    . ..    ADD      r2,r10,r8
+        0x000042d8:    e7905109    .Q..    LDR      r5,[r0,r9,LSL #2]
+        0x000042dc:    e30f8ff0    ....    MOV      r8,#0xfff0
+        0x000042e0:    e001300a    .0..    AND      r3,r1,r10
+        0x000042e4:    e30f1ff0    ....    MOV      r1,#0xfff0
+        0x000042e8:    e0822003    . ..    ADD      r2,r2,r3
+        0x000042ec:    e00a2002    . ..    AND      r2,r10,r2
+        0x000042f0:    e50b2090    . ..    STR      r2,[r11,#-0x90]
+        0x000042f4:    e51b2080    . ..    LDR      r2,[r11,#-0x80]
+        0x000042f8:    e5953030    00..    LDR      r3,[r5,#0x30]
+        0x000042fc:    e0021001    ....    AND      r1,r2,r1
+        0x00004300:    e51b2058    X ..    LDR      r2,[r11,#-0x58]
+        0x00004304:    e241a00f    ..A.    SUB      r10,r1,#0xf
+        0x00004308:    e281100f    ....    ADD      r1,r1,#0xf
+        0x0000430c:    e1a08258    X...    ASR      r8,r8,r2
+        0x00004310:    e50b8064    d...    STR      r8,[r11,#-0x64]
+        0x00004314:    e51b8078    x...    LDR      r8,[r11,#-0x78]
+        0x00004318:    e1a0a20a    ....    LSL      r10,r10,#4
+        0x0000431c:    e7cc3418    .4..    BFI      r3,r8,#8,#5
+        0x00004320:    e5853030    00..    STR      r3,[r5,#0x30]
+        0x00004324:    e51b3050    P0..    LDR      r3,[r11,#-0x50]
+        0x00004328:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x0000432c:    e08c3003    .0..    ADD      r3,r12,r3
+        0x00004330:    e50b7094    .p..    STR      r7,[r11,#-0x94]
+        0x00004334:    e1c3500c    .P..    BIC      r5,r3,r12
+        0x00004338:    e51b7064    dp..    LDR      r7,[r11,#-0x64]
+        0x0000433c:    e50b5030    0P..    STR      r5,[r11,#-0x30]
+        0x00004340:    e51b8048    H...    LDR      r8,[r11,#-0x48]
+        0x00004344:    e51b5058    XP..    LDR      r5,[r11,#-0x58]
+        0x00004348:    e50ba070    p...    STR      r10,[r11,#-0x70]
+        0x0000434c:    e007a008    ....    AND      r10,r7,r8
+        0x00004350:    e50b307c    |0..    STR      r3,[r11,#-0x7c]
+        0x00004354:    e2655004    .Pe.    RSB      r5,r5,#4
+        0x00004358:    e5923030    00..    LDR      r3,[r2,#0x30]
+        0x0000435c:    e50b5068    hP..    STR      r5,[r11,#-0x68]
+        0x00004360:    e51b704c    Lp..    LDR      r7,[r11,#-0x4c]
+        0x00004364:    e7d43814    .8..    BFI      r3,r4,#16,#5
+        0x00004368:    e51b808c    ....    LDR      r8,[r11,#-0x8c]
+        0x0000436c:    e1a05207    .R..    LSL      r5,r7,#4
+        0x00004370:    e51b7068    hp..    LDR      r7,[r11,#-0x68]
+        0x00004374:    e20550ff    .P..    AND      r5,r5,#0xff
+        0x00004378:    e1a08718    ....    LSL      r8,r8,r7
+        0x0000437c:    e50b8098    ....    STR      r8,[r11,#-0x98]
+        0x00004380:    e5823030    00..    STR      r3,[r2,#0x30]
+        0x00004384:    e30f7ff0    ....    MOV      r7,#0xfff0
+        0x00004388:    e51b8030    0...    LDR      r8,[r11,#-0x30]
+        0x0000438c:    e51b3054    T0..    LDR      r3,[r11,#-0x54]
+        0x00004390:    e51b4044    D@..    LDR      r4,[r11,#-0x44]
+        0x00004394:    e088c00c    ....    ADD      r12,r8,r12
+        0x00004398:    e51b8054    T...    LDR      r8,[r11,#-0x54]
+        0x0000439c:    e2633004    .0c.    RSB      r3,r3,#4
+        0x000043a0:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x000043a4:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x000043a8:    e0044857    WH..    AND      r4,r4,r7,ASR r8
+        0x000043ac:    e51b706c    lp..    LDR      r7,[r11,#-0x6c]
+        0x000043b0:    e50b40a0    .@..    STR      r4,[r11,#-0xa0]
+        0x000043b4:    e51b4098    .@..    LDR      r4,[r11,#-0x98]
+        0x000043b8:    e5923034    40..    LDR      r3,[r2,#0x34]
+        0x000043bc:    e51b8094    ....    LDR      r8,[r11,#-0x94]
+        0x000043c0:    e084a71a    ....    ADD      r10,r4,r10,LSL r7
+        0x000043c4:    e51b7074    tp..    LDR      r7,[r11,#-0x74]
+        0x000043c8:    e50ba09c    ....    STR      r10,[r11,#-0x9c]
+        0x000043cc:    e51b4064    d@..    LDR      r4,[r11,#-0x64]
+        0x000043d0:    e7c43017    .0..    BFI      r3,r7,#0,#5
+        0x000043d4:    e5823034    40..    STR      r3,[r2,#0x34]
+        0x000043d8:    e0855208    .R..    ADD      r5,r5,r8,LSL #4
+        0x000043dc:    e51b8068    h...    LDR      r8,[r11,#-0x68]
+        0x000043e0:    e00cc004    ....    AND      r12,r12,r4
+        0x000043e4:    e51b7030    0p..    LDR      r7,[r11,#-0x30]
+        0x000043e8:    e30f4ff0    .O..    MOV      r4,#0xfff0
+        0x000043ec:    e790a109    ....    LDR      r10,[r0,r9,LSL #2]
+        0x000043f0:    e1a06816    .h..    LSL      r6,r6,r8
+        0x000043f4:    e0014004    .@..    AND      r4,r1,r4
+        0x000043f8:    e51b806c    l...    LDR      r8,[r11,#-0x6c]
+        0x000043fc:    e51b104c    L...    LDR      r1,[r11,#-0x4c]
+        0x00004400:    e30f2ff0    ./..    MOV      r2,#0xfff0
+        0x00004404:    e0666817    .hf.    RSB      r6,r6,r7,LSL r8
+        0x00004408:    e51b709c    .p..    LDR      r7,[r11,#-0x9c]
+        0x0000440c:    e0012002    . ..    AND      r2,r1,r2
+        0x00004410:    e51b10a0    ....    LDR      r1,[r11,#-0xa0]
+        0x00004414:    e59a3034    40..    LDR      r3,[r10,#0x34]
+        0x00004418:    e51b808c    ....    LDR      r8,[r11,#-0x8c]
+        0x0000441c:    e02c7c91    .|,.    MLA      r12,r1,r12,r7
+        0x00004420:    e7cc3418    .4..    BFI      r3,r8,#8,#5
+        0x00004424:    e58a3034    40..    STR      r3,[r10,#0x34]
+        0x00004428:    e7901109    ....    LDR      r1,[r0,r9,LSL #2]
+        0x0000442c:    e0245492    .T$.    MLA      r4,r2,r4,r5
+        0x00004430:    e51b2090    . ..    LDR      r2,[r11,#-0x90]
+        0x00004434:    e5913034    40..    LDR      r3,[r1,#0x34]
+        0x00004438:    e7d43812    .8..    BFI      r3,r2,#16,#5
+        0x0000443c:    e5813034    40..    STR      r3,[r1,#0x34]
+        0x00004440:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x00004444:    e5921034    4...    LDR      r1,[r2,#0x34]
+        0x00004448:    e5923038    80..    LDR      r3,[r2,#0x38]
+        0x0000444c:    e7c43011    .0..    BFI      r3,r1,#0,#5
+        0x00004450:    e5823038    80..    STR      r3,[r2,#0x38]
+        0x00004454:    e7901109    ....    LDR      r1,[r0,r9,LSL #2]
+        0x00004458:    e5913034    40..    LDR      r3,[r1,#0x34]
+        0x0000445c:    e5912038    8 ..    LDR      r2,[r1,#0x38]
+        0x00004460:    e7e43453    S4..    UBFX     r3,r3,#8,#5
+        0x00004464:    e7cc2413    .$..    BFI      r2,r3,#8,#5
+        0x00004468:    e5812038    8 ..    STR      r2,[r1,#0x38]
+        0x0000446c:    e7901109    ....    LDR      r1,[r0,r9,LSL #2]
+        0x00004470:    e5913034    40..    LDR      r3,[r1,#0x34]
+        0x00004474:    e5912038    8 ..    LDR      r2,[r1,#0x38]
+        0x00004478:    e7e43853    S8..    UBFX     r3,r3,#16,#5
+        0x0000447c:    e7d42813    .(..    BFI      r2,r3,#16,#5
+        0x00004480:    e5812038    8 ..    STR      r2,[r1,#0x38]
+        0x00004484:    e51b5070    pP..    LDR      r5,[r11,#-0x70]
+        0x00004488:    e7903109    .1..    LDR      r3,[r0,r9,LSL #2]
+        0x0000448c:    e5835040    @P..    STR      r5,[r3,#0x40]
+        0x00004490:    e7903109    .1..    LDR      r3,[r0,r9,LSL #2]
+        0x00004494:    e5836044    D`..    STR      r6,[r3,#0x44]
+        0x00004498:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x0000449c:    e5923044    D0..    LDR      r3,[r2,#0x44]
+        0x000044a0:    e5823048    H0..    STR      r3,[r2,#0x48]
+        0x000044a4:    e51b6084    .`..    LDR      r6,[r11,#-0x84]
+        0x000044a8:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x000044ac:    e5804008    .@..    STR      r4,[r0,#8]
+        0x000044b0:    e580c00c    ....    STR      r12,[r0,#0xc]
+        0x000044b4:    e580c010    ....    STR      r12,[r0,#0x10]
+        0x000044b8:    e5963000    .0..    LDR      r3,[r6,#0]
+        0x000044bc:    e0844003    .@..    ADD      r4,r4,r3
+        0x000044c0:    e5824020     @..    STR      r4,[r2,#0x20]
+        0x000044c4:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x000044c8:    e5963004    .0..    LDR      r3,[r6,#4]
+        0x000044cc:    e08c3003    .0..    ADD      r3,r12,r3
+        0x000044d0:    e5823024    $0..    STR      r3,[r2,#0x24]
+        0x000044d4:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x000044d8:    e5963008    .0..    LDR      r3,[r6,#8]
+        0x000044dc:    e08cc003    ....    ADD      r12,r12,r3
+        0x000044e0:    e582c028    (...    STR      r12,[r2,#0x28]
+        0x000044e4:    ea00006b    k...    B        {pc} + 0x1b4  ; 0x4698
+        0x000044e8:    e3530006    ..S.    CMP      r3,#6
+        0x000044ec:    1a000069    i...    BNE      {pc} + 0x1ac  ; 0x4698
+        0x000044f0:    e59f026c    l...    LDR      r0,[pc,#620]  ; [([Section 17] + 16988) = 0x4764]  = 0x425c
+        0x000044f4:    e207401f    .@..    AND      r4,r7,#0x1f
+        0x000044f8:    e51b3048    H0..    LDR      r3,[r11,#-0x48]
+        0x000044fc:    e51b1040    @...    LDR      r1,[r11,#-0x40]
+        0x00004500:    e51bc04c    L...    LDR      r12,[r11,#-0x4c]
+        0x00004504:    e281101f    ....    ADD      r1,r1,#0x1f
+        0x00004508:    e51b5044    DP..    LDR      r5,[r11,#-0x44]
+        0x0000450c:    e50b10a8    ....    STR      r1,[r11,#-0xa8]
+        0x00004510:    e0812004    . ..    ADD      r2,r1,r4
+        0x00004514:    e1a06083    .`..    LSL      r6,r3,#1
+        0x00004518:    e50b20ac    . ..    STR      r2,[r11,#-0xac]
+        0x0000451c:    e20cc01f    ....    AND      r12,r12,#0x1f
+        0x00004520:    e50bc0a4    ....    STR      r12,[r11,#-0xa4]
+        0x00004524:    e790c109    ....    LDR      r12,[r0,r9,LSL #2]
+        0x00004528:    e6efa076    v...    UXTB     r10,r6
+        0x0000452c:    e51b3050    P0..    LDR      r3,[r11,#-0x50]
+        0x00004530:    e205501f    .P..    AND      r5,r5,#0x1f
+        0x00004534:    e50b50b0    .P..    STR      r5,[r11,#-0xb0]
+        0x00004538:    e288201f    . ..    ADD      r2,r8,#0x1f
+        0x0000453c:    e51b5038    8P..    LDR      r5,[r11,#-0x38]
+        0x00004540:    e20a801e    ....    AND      r8,r10,#0x1e
+        0x00004544:    e283100f    ....    ADD      r1,r3,#0xf
+        0x00004548:    e50b8060    `...    STR      r8,[r11,#-0x60]
+        0x0000454c:    e59c3030    00..    LDR      r3,[r12,#0x30]
+        0x00004550:    e3c2201f    . ..    BIC      r2,r2,#0x1f
+        0x00004554:    e08aa085    ....    ADD      r10,r10,r5,LSL #1
+        0x00004558:    e282201f    . ..    ADD      r2,r2,#0x1f
+        0x0000455c:    e7c43014    .0..    BFI      r3,r4,#0,#5
+        0x00004560:    e58c3030    00..    STR      r3,[r12,#0x30]
+        0x00004564:    e7905109    .Q..    LDR      r5,[r0,r9,LSL #2]
+        0x00004568:    e30fcfe0    ....    MOV      r12,#0xffe0
+        0x0000456c:    e007c00c    ....    AND      r12,r7,r12
+        0x00004570:    e51b70a4    .p..    LDR      r7,[r11,#-0xa4]
+        0x00004574:    e3c1100f    ....    BIC      r1,r1,#0xf
+        0x00004578:    e30f4fe0    .O..    MOV      r4,#0xffe0
+        0x0000457c:    e5953030    00..    LDR      r3,[r5,#0x30]
+        0x00004580:    e0024004    .@..    AND      r4,r2,r4
+        0x00004584:    e1a08287    ....    LSL      r8,r7,#5
+        0x00004588:    e30f2fe0    ./..    MOV      r2,#0xffe0
+        0x0000458c:    e7cc3417    .4..    BFI      r3,r7,#8,#5
+        0x00004590:    e5853030    00..    STR      r3,[r5,#0x30]
+        0x00004594:    e51b30b0    .0..    LDR      r3,[r11,#-0xb0]
+        0x00004598:    e0062002    . ..    AND      r2,r6,r2
+        0x0000459c:    e7905109    .Q..    LDR      r5,[r0,r9,LSL #2]
+        0x000045a0:    e088c28c    ....    ADD      r12,r8,r12,LSL #5
+        0x000045a4:    e51b80ac    ....    LDR      r8,[r11,#-0xac]
+        0x000045a8:    e1a01081    ....    LSL      r1,r1,#1
+        0x000045ac:    e1a06283    .b..    LSL      r6,r3,#5
+        0x000045b0:    e281101f    ....    ADD      r1,r1,#0x1f
+        0x000045b4:    e5953030    00..    LDR      r3,[r5,#0x30]
+        0x000045b8:    e0866282    .b..    ADD      r6,r6,r2,LSL #5
+        0x000045bc:    e50bc0bc    ....    STR      r12,[r11,#-0xbc]
+        0x000045c0:    e30fcfe0    ....    MOV      r12,#0xffe0
+        0x000045c4:    e7d43818    .8..    BFI      r3,r8,#16,#5
+        0x000045c8:    e5853030    00..    STR      r3,[r5,#0x30]
+        0x000045cc:    e001c00c    ....    AND      r12,r1,r12
+        0x000045d0:    e51b104c    L...    LDR      r1,[r11,#-0x4c]
+        0x000045d4:    e7905109    .Q..    LDR      r5,[r0,r9,LSL #2]
+        0x000045d8:    e30f2fe0    ./..    MOV      r2,#0xffe0
+        0x000045dc:    e51b80bc    ....    LDR      r8,[r11,#-0xbc]
+        0x000045e0:    e0012002    . ..    AND      r2,r1,r2
+        0x000045e4:    e51b3044    D0..    LDR      r3,[r11,#-0x44]
+        0x000045e8:    e244701f    .pD.    SUB      r7,r4,#0x1f
+        0x000045ec:    e30f1fe0    ....    MOV      r1,#0xffe0
+        0x000045f0:    e28aa01f    ....    ADD      r10,r10,#0x1f
+        0x000045f4:    e0248492    ..$.    MLA      r4,r2,r4,r8
+        0x000045f8:    e0031001    ....    AND      r1,r3,r1
+        0x000045fc:    e51b2060    ` ..    LDR      r2,[r11,#-0x60]
+        0x00004600:    e1a07287    .r..    LSL      r7,r7,#5
+        0x00004604:    e5953034    40..    LDR      r3,[r5,#0x34]
+        0x00004608:    e50b705c    \p..    STR      r7,[r11,#-0x5c]
+        0x0000460c:    e7c43012    .0..    BFI      r3,r2,#0,#5
+        0x00004610:    e5853034    40..    STR      r3,[r5,#0x34]
+        0x00004614:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x00004618:    e24c501f    .PL.    SUB      r5,r12,#0x1f
+        0x0000461c:    e02c6c91    .l,.    MLA      r12,r1,r12,r6
+        0x00004620:    e51b60b0    .`..    LDR      r6,[r11,#-0xb0]
+        0x00004624:    e5923034    40..    LDR      r3,[r2,#0x34]
+        0x00004628:    e1a05285    .R..    LSL      r5,r5,#5
+        0x0000462c:    e7cc3416    .4..    BFI      r3,r6,#8,#5
+        0x00004630:    e5823034    40..    STR      r3,[r2,#0x34]
+        0x00004634:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x00004638:    e5923034    40..    LDR      r3,[r2,#0x34]
+        0x0000463c:    e7d4381a    .8..    BFI      r3,r10,#16,#5
+        0x00004640:    e5823034    40..    STR      r3,[r2,#0x34]
+        0x00004644:    e7903109    .1..    LDR      r3,[r0,r9,LSL #2]
+        0x00004648:    e5837040    @p..    STR      r7,[r3,#0x40]
+        0x0000464c:    e3a07000    .p..    MOV      r7,#0
+        0x00004650:    e7903109    .1..    LDR      r3,[r0,r9,LSL #2]
+        0x00004654:    e5835044    DP..    STR      r5,[r3,#0x44]
+        0x00004658:    e7903109    .1..    LDR      r3,[r0,r9,LSL #2]
+        0x0000465c:    e5837048    Hp..    STR      r7,[r3,#0x48]
+        0x00004660:    e51b8084    ....    LDR      r8,[r11,#-0x84]
+        0x00004664:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x00004668:    e5804008    .@..    STR      r4,[r0,#8]
+        0x0000466c:    e580c00c    ....    STR      r12,[r0,#0xc]
+        0x00004670:    e5807010    .p..    STR      r7,[r0,#0x10]
+        0x00004674:    e5983000    .0..    LDR      r3,[r8,#0]
+        0x00004678:    e0844003    .@..    ADD      r4,r4,r3
+        0x0000467c:    e5824020     @..    STR      r4,[r2,#0x20]
+        0x00004680:    e7902109    .!..    LDR      r2,[r0,r9,LSL #2]
+        0x00004684:    e5983004    .0..    LDR      r3,[r8,#4]
+        0x00004688:    e08cc003    ....    ADD      r12,r12,r3
+        0x0000468c:    e582c024    $...    STR      r12,[r2,#0x24]
+        0x00004690:    e7903109    .1..    LDR      r3,[r0,r9,LSL #2]
+        0x00004694:    e5837028    (p..    STR      r7,[r3,#0x28]
+        0x00004698:    e51b2088    . ..    LDR      r2,[r11,#-0x88]
+        0x0000469c:    e59fc0c0    ....    LDR      r12,[pc,#192]  ; [([Section 17] + 16988) = 0x4764]  = 0x425c
+        0x000046a0:    e51b303c    <0..    LDR      r3,[r11,#-0x3c]
+        0x000046a4:    e5d21001    ....    LDRB     r1,[r2,#1]
+        0x000046a8:    e79c2109    .!..    LDR      r2,[r12,r9,LSL #2]
+        0x000046ac:    e2435001    .PC.    SUB      r5,r3,#1
+        0x000046b0:    e51b0040    @...    LDR      r0,[r11,#-0x40]
+        0x000046b4:    e51b7038    8p..    LDR      r7,[r11,#-0x38]
+        0x000046b8:    e592304c    L0..    LDR      r3,[r2,#0x4c]
+        0x000046bc:    e2404001    .@@.    SUB      r4,r0,#1
+        0x000046c0:    e51b0034    4...    LDR      r0,[r11,#-0x34]
+        0x000046c4:    e2476001    .`G.    SUB      r6,r7,#1
+        0x000046c8:    e7d03811    .8..    BFI      r3,r1,#16,#1
+        0x000046cc:    e582304c    L0..    STR      r3,[r2,#0x4c]
+        0x000046d0:    e51b3088    .0..    LDR      r3,[r11,#-0x88]
+        0x000046d4:    e2408001    ..@.    SUB      r8,r0,#1
+        0x000046d8:    e79c1109    ....    LDR      r1,[r12,r9,LSL #2]
+        0x000046dc:    e3a00000    ....    MOV      r0,#0
+        0x000046e0:    e5d32002    . ..    LDRB     r2,[r3,#2]
+        0x000046e4:    e591304c    L0..    LDR      r3,[r1,#0x4c]
+        0x000046e8:    e7ca3412    .4..    BFI      r3,r2,#8,#3
+        0x000046ec:    e581304c    L0..    STR      r3,[r1,#0x4c]
+        0x000046f0:    e51b7088    .p..    LDR      r7,[r11,#-0x88]
+        0x000046f4:    e79c1109    ....    LDR      r1,[r12,r9,LSL #2]
+        0x000046f8:    e5d72003    . ..    LDRB     r2,[r7,#3]
+        0x000046fc:    e591304c    L0..    LDR      r3,[r1,#0x4c]
+        0x00004700:    e7c63212    .2..    BFI      r3,r2,#4,#3
+        0x00004704:    e581304c    L0..    STR      r3,[r1,#0x4c]
+        0x00004708:    e79c1109    ....    LDR      r1,[r12,r9,LSL #2]
+        0x0000470c:    e5d72004    . ..    LDRB     r2,[r7,#4]
+        0x00004710:    e591304c    L0..    LDR      r3,[r1,#0x4c]
+        0x00004714:    e7c13012    .0..    BFI      r3,r2,#0,#2
+        0x00004718:    e581304c    L0..    STR      r3,[r1,#0x4c]
+        0x0000471c:    e79c2109    .!..    LDR      r2,[r12,r9,LSL #2]
+        0x00004720:    e5923100    .1..    LDR      r3,[r2,#0x100]
+        0x00004724:    e7cc3014    .0..    BFI      r3,r4,#0,#13
+        0x00004728:    e5823100    .1..    STR      r3,[r2,#0x100]
+        0x0000472c:    e79c2109    .!..    LDR      r2,[r12,r9,LSL #2]
+        0x00004730:    e5923100    .1..    LDR      r3,[r2,#0x100]
+        0x00004734:    e7dc3815    .8..    BFI      r3,r5,#16,#13
+        0x00004738:    e5823100    .1..    STR      r3,[r2,#0x100]
+        0x0000473c:    e79c2109    .!..    LDR      r2,[r12,r9,LSL #2]
+        0x00004740:    e5923200    .2..    LDR      r3,[r2,#0x200]
+        0x00004744:    e7cc3016    .0..    BFI      r3,r6,#0,#13
+        0x00004748:    e5823200    .2..    STR      r3,[r2,#0x200]
+        0x0000474c:    e79c2109    .!..    LDR      r2,[r12,r9,LSL #2]
+        0x00004750:    e5923200    .2..    LDR      r3,[r2,#0x200]
+        0x00004754:    e7dc3818    .8..    BFI      r3,r8,#16,#13
+        0x00004758:    e5823200    .2..    STR      r3,[r2,#0x200]
+        0x0000475c:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00004760:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00004764:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Fb_Addr
+    $a
+        0x00004768:    e1a0c00d    ....    MOV      r12,r13
+        0x0000476c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00004770:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00004774:    e59fc044    D...    LDR      r12,[pc,#68]   ; [([Section 17] + 16988) = 0x47c0]  = 0x425c
+        0x00004778:    e1a05000    .P..    MOV      r5,r0
+        0x0000477c:    e5912000    . ..    LDR      r2,[r1,#0]
+        0x00004780:    e3a00000    ....    MOV      r0,#0
+        0x00004784:    e79c4105    .A..    LDR      r4,[r12,r5,LSL #2]
+        0x00004788:    e59c3008    .0..    LDR      r3,[r12,#8]
+        0x0000478c:    e0833002    .0..    ADD      r3,r3,r2
+        0x00004790:    e5843020     0..    STR      r3,[r4,#0x20]
+        0x00004794:    e79c4105    .A..    LDR      r4,[r12,r5,LSL #2]
+        0x00004798:    e5912004    . ..    LDR      r2,[r1,#4]
+        0x0000479c:    e59c300c    .0..    LDR      r3,[r12,#0xc]
+        0x000047a0:    e0833002    .0..    ADD      r3,r3,r2
+        0x000047a4:    e5843024    $0..    STR      r3,[r4,#0x24]
+        0x000047a8:    e79c4105    .A..    LDR      r4,[r12,r5,LSL #2]
+        0x000047ac:    e59c3010    .0..    LDR      r3,[r12,#0x10]
+        0x000047b0:    e5912008    . ..    LDR      r2,[r1,#8]
+        0x000047b4:    e0833002    .0..    ADD      r3,r3,r2
+        0x000047b8:    e5843028    (0..    STR      r3,[r4,#0x28]
+        0x000047bc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000047c0:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Init_Phase
+    $a
+        0x000047c4:    e1a0c00d    ....    MOV      r12,r13
+        0x000047c8:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x000047cc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000047d0:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x000047d4:    e59fc320     ...    LDR      r12,[pc,#800]  ; [([Section 17] + 16988) = 0x4afc]  = 0x425c
+        0x000047d8:    e1a05000    .P..    MOV      r5,r0
+        0x000047dc:    e1a0a001    ....    MOV      r10,r1
+        0x000047e0:    e50b3038    80..    STR      r3,[r11,#-0x38]
+        0x000047e4:    e1a08002    ....    MOV      r8,r2
+        0x000047e8:    e5db4010    .@..    LDRB     r4,[r11,#0x10]
+        0x000047ec:    e79c1100    ....    LDR      r1,[r12,r0,LSL #2]
+        0x000047f0:    e59b0004    ....    LDR      r0,[r11,#4]
+        0x000047f4:    e591305c    \0..    LDR      r3,[r1,#0x5c]
+        0x000047f8:    e5d02000    . ..    LDRB     r2,[r0,#0]
+        0x000047fc:    e7c43212    .2..    BFI      r3,r2,#4,#1
+        0x00004800:    e581305c    \0..    STR      r3,[r1,#0x5c]
+        0x00004804:    e5d03000    .0..    LDRB     r3,[r0,#0]
+        0x00004808:    e79c0105    ....    LDR      r0,[r12,r5,LSL #2]
+        0x0000480c:    e3530000    ..S.    CMP      r3,#0
+        0x00004810:    e59f12e4    ....    LDR      r1,[pc,#740]  ; [([Section 17] + 16988) = 0x4afc]  = 0x425c
+        0x00004814:    05da3000    .0..    LDRBEQ   r3,[r10,#0]
+        0x00004818:    13a02000    . ..    MOVNE    r2,#0
+        0x0000481c:    02032001    . ..    ANDEQ    r2,r3,#1
+        0x00004820:    e590304c    L0..    LDR      r3,[r0,#0x4c]
+        0x00004824:    e3550001    ..U.    CMP      r5,#1
+        0x00004828:    e7cc3612    .6..    BFI      r3,r2,#12,#1
+        0x0000482c:    e580304c    L0..    STR      r3,[r0,#0x4c]
+        0x00004830:    e7912105    .!..    LDR      r2,[r1,r5,LSL #2]
+        0x00004834:    e592302c    ,0..    LDR      r3,[r2,#0x2c]
+        0x00004838:    e7cc361f    .6..    BFC      r3,#12,#1
+        0x0000483c:    e582302c    ,0..    STR      r3,[r2,#0x2c]
+        0x00004840:    e7912105    .!..    LDR      r2,[r1,r5,LSL #2]
+        0x00004844:    e592302c    ,0..    LDR      r3,[r2,#0x2c]
+        0x00004848:    e7ca341f    .4..    BFC      r3,#8,#3
+        0x0000484c:    e582302c    ,0..    STR      r3,[r2,#0x2c]
+        0x00004850:    e7912105    .!..    LDR      r2,[r1,r5,LSL #2]
+        0x00004854:    e5da3001    .0..    LDRB     r3,[r10,#1]
+        0x00004858:    e5c2302c    ,0..    STRB     r3,[r2,#0x2c]
+        0x0000485c:    0a0000a3    ....    BEQ      {pc} + 0x294  ; 0x4af0
+        0x00004860:    e51b1038    8...    LDR      r1,[r11,#-0x38]
+        0x00004864:    e5d12003    . ..    LDRB     r2,[r1,#3]
+        0x00004868:    e3520002    ..R.    CMP      r2,#2
+        0x0000486c:    13a0c000    ....    MOVNE    r12,#0
+        0x00004870:    1a000007    ....    BNE      {pc} + 0x24  ; 0x4894
+        0x00004874:    e51b0038    8...    LDR      r0,[r11,#-0x38]
+        0x00004878:    e5d03000    .0..    LDRB     r3,[r0,#0]
+        0x0000487c:    e3530000    ..S.    CMP      r3,#0
+        0x00004880:    13a0093f    ?...    MOVNE    r0,#0xfc000
+        0x00004884:    13a0c000    ....    MOVNE    r12,#0
+        0x00004888:    150b0034    4...    STRNE    r0,[r11,#-0x34]
+        0x0000488c:    1a000002    ....    BNE      {pc} + 0x10  ; 0x489c
+        0x00004890:    e3a0c93f    ?...    MOV      r12,#0xfc000
+        0x00004894:    e1a0000c    ....    MOV      r0,r12
+        0x00004898:    e50bc034    4...    STR      r12,[r11,#-0x34]
+        0x0000489c:    e2423001    .0B.    SUB      r3,r2,#1
+        0x000048a0:    e6ef3073    s0..    UXTB     r3,r3
+        0x000048a4:    e3530001    ..S.    CMP      r3,#1
+        0x000048a8:    93a07001    .p..    MOVLS    r7,#1
+        0x000048ac:    9a000002    ....    BLS      {pc} + 0x10  ; 0x48bc
+        0x000048b0:    e3520003    ..R.    CMP      r2,#3
+        0x000048b4:    03a07002    .p..    MOVEQ    r7,#2
+        0x000048b8:    13a07000    .p..    MOVNE    r7,#0
+        0x000048bc:    e3540001    ..T.    CMP      r4,#1
+        0x000048c0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x48d0
+        0x000048c4:    e5da3000    .0..    LDRB     r3,[r10,#0]
+        0x000048c8:    e3530001    ..S.    CMP      r3,#1
+        0x000048cc:    1a000009    ....    BNE      {pc} + 0x2c  ; 0x48f8
+        0x000048d0:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x000048d4:    e3130001    ....    TST      r3,#1
+        0x000048d8:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x48f8
+        0x000048dc:    e5da3001    .0..    LDRB     r3,[r10,#1]
+        0x000048e0:    e3530000    ..S.    CMP      r3,#0
+        0x000048e4:    02803801    .8..    ADDEQ    r3,r0,#0x10000
+        0x000048e8:    03a09801    ....    MOVEQ    r9,#0x10000
+        0x000048ec:    03c364ff    .d..    BICEQ    r6,r3,#0xff000000
+        0x000048f0:    03c6660f    .f..    BICEQ    r6,r6,#0xf00000
+        0x000048f4:    0a00000c    ....    BEQ      {pc} + 0x38  ; 0x492c
+        0x000048f8:    e5981008    ....    LDR      r1,[r8,#8]
+        0x000048fc:    e3520004    ..R.    CMP      r2,#4
+        0x00004900:    13520002    ..R.    CMPNE    r2,#2
+        0x00004904:    e3a03801    .8..    MOV      r3,#0x10000
+        0x00004908:    e3a09000    ....    MOV      r9,#0
+        0x0000490c:    13a02000    . ..    MOVNE    r2,#0
+        0x00004910:    03a02001    . ..    MOVEQ    r2,#1
+        0x00004914:    e1a03253    S2..    ASR      r3,r3,r2
+        0x00004918:    e0022001    . ..    AND      r2,r2,r1
+        0x0000491c:    e0220293    ..".    MLA      r2,r3,r2,r0
+        0x00004920:    e3c264ff    .d..    BIC      r6,r2,#0xff000000
+        0x00004924:    e3c6660f    .f..    BIC      r6,r6,#0xf00000
+        0x00004928:    e50b6034    4`..    STR      r6,[r11,#-0x34]
+        0x0000492c:    e59f41c8    .A..    LDR      r4,[pc,#456]  ; [([Section 17] + 16988) = 0x4afc]  = 0x425c
+        0x00004930:    e3a01801    ....    MOV      r1,#0x10000
+        0x00004934:    e1a01751    Q...    ASR      r1,r1,r7
+        0x00004938:    e7942105    .!..    LDR      r2,[r4,r5,LSL #2]
+        0x0000493c:    e5923110    .1..    LDR      r3,[r2,#0x110]
+        0x00004940:    e7d3301f    .0..    BFC      r3,#0,#20
+        0x00004944:    e5823110    .1..    STR      r3,[r2,#0x110]
+        0x00004948:    e5982004    . ..    LDR      r2,[r8,#4]
+        0x0000494c:    e3e03000    .0..    MVN      r3,#0
+        0x00004950:    e7940105    ....    LDR      r0,[r4,r5,LSL #2]
+        0x00004954:    e1c22713    .'..    BIC      r2,r2,r3,LSL r7
+        0x00004958:    e022c291    ..".    MLA      r2,r1,r2,r12
+        0x0000495c:    e5903210    .2..    LDR      r3,[r0,#0x210]
+        0x00004960:    e7d33012    .0..    BFI      r3,r2,#0,#20
+        0x00004964:    e5803210    .2..    STR      r3,[r0,#0x210]
+        0x00004968:    e59b1004    ....    LDR      r1,[r11,#4]
+        0x0000496c:    e5d13000    .0..    LDRB     r3,[r1,#0]
+        0x00004970:    e3530001    ..S.    CMP      r3,#1
+        0x00004974:    1a00004c    L...    BNE      {pc} + 0x138  ; 0x4aac
+        0x00004978:    e51b2038    8 ..    LDR      r2,[r11,#-0x38]
+        0x0000497c:    e598c010    ....    LDR      r12,[r8,#0x10]
+        0x00004980:    e59f7174    tq..    LDR      r7,[pc,#372]  ; [([Section 17] + 16988) = 0x4afc]  = 0x425c
+        0x00004984:    e5d23003    .0..    LDRB     r3,[r2,#3]
+        0x00004988:    e3530002    ..S.    CMP      r3,#2
+        0x0000498c:    150bc030    0...    STRNE    r12,[r11,#-0x30]
+        0x00004990:    028c3001    .0..    ADDEQ    r3,r12,#1
+        0x00004994:    01a030c3    .0..    ASREQ    r3,r3,#1
+        0x00004998:    050b3030    00..    STREQ    r3,[r11,#-0x30]
+        0x0000499c:    e59b300c    .0..    LDR      r3,[r11,#0xc]
+        0x000049a0:    e5d32001    . ..    LDRB     r2,[r3,#1]
+        0x000049a4:    e59b3008    .0..    LDR      r3,[r11,#8]
+        0x000049a8:    e3520005    ..R.    CMP      r2,#5
+        0x000049ac:    e5931004    ....    LDR      r1,[r3,#4]
+        0x000049b0:    02813001    .0..    ADDEQ    r3,r1,#1
+        0x000049b4:    11a08001    ....    MOVNE    r8,r1
+        0x000049b8:    01a080c3    ....    ASREQ    r8,r3,#1
+        0x000049bc:    e5da3001    .0..    LDRB     r3,[r10,#1]
+        0x000049c0:    e3530000    ..S.    CMP      r3,#0
+        0x000049c4:    1a00001a    ....    BNE      {pc} + 0x70  ; 0x4a34
+        0x000049c8:    e7972105    .!..    LDR      r2,[r7,r5,LSL #2]
+        0x000049cc:    e5923114    .1..    LDR      r3,[r2,#0x114]
+        0x000049d0:    e7d33019    .0..    BFI      r3,r9,#0,#20
+        0x000049d4:    e5823114    .1..    STR      r3,[r2,#0x114]
+        0x000049d8:    e5da0000    ....    LDRB     r0,[r10,#0]
+        0x000049dc:    e7974105    .A..    LDR      r4,[r7,r5,LSL #2]
+        0x000049e0:    e1a0005c    \...    ASR      r0,r12,r0
+        0x000049e4:    e1a00800    ....    LSL      r0,r0,#16
+        0x000049e8:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x000049ec:    e5943118    .1..    LDR      r3,[r4,#0x118]
+        0x000049f0:    e1a01008    ....    MOV      r1,r8
+        0x000049f4:    e0890000    ....    ADD      r0,r9,r0
+        0x000049f8:    e7d33010    .0..    BFI      r3,r0,#0,#20
+        0x000049fc:    e5843118    .1..    STR      r3,[r4,#0x118]
+        0x00004a00:    e7972105    .!..    LDR      r2,[r7,r5,LSL #2]
+        0x00004a04:    e5923214    .2..    LDR      r3,[r2,#0x214]
+        0x00004a08:    e7d33016    .0..    BFI      r3,r6,#0,#20
+        0x00004a0c:    e5823214    .2..    STR      r3,[r2,#0x214]
+        0x00004a10:    e51b3030    00..    LDR      r3,[r11,#-0x30]
+        0x00004a14:    e5da0000    ....    LDRB     r0,[r10,#0]
+        0x00004a18:    e7974105    .A..    LDR      r4,[r7,r5,LSL #2]
+        0x00004a1c:    e1a00053    S...    ASR      r0,r3,r0
+        0x00004a20:    e1a00800    ....    LSL      r0,r0,#16
+        0x00004a24:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004a28:    e5943218    .2..    LDR      r3,[r4,#0x218]
+        0x00004a2c:    e0800006    ....    ADD      r0,r0,r6
+        0x00004a30:    ea00001a    ....    B        {pc} + 0x70  ; 0x4aa0
+        0x00004a34:    e7972105    .!..    LDR      r2,[r7,r5,LSL #2]
+        0x00004a38:    e5923114    .1..    LDR      r3,[r2,#0x114]
+        0x00004a3c:    e7d3301f    .0..    BFC      r3,#0,#20
+        0x00004a40:    e5823114    .1..    STR      r3,[r2,#0x114]
+        0x00004a44:    e5da0000    ....    LDRB     r0,[r10,#0]
+        0x00004a48:    e7974105    .A..    LDR      r4,[r7,r5,LSL #2]
+        0x00004a4c:    e1a0005c    \...    ASR      r0,r12,r0
+        0x00004a50:    e1a00800    ....    LSL      r0,r0,#16
+        0x00004a54:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004a58:    e5943118    .1..    LDR      r3,[r4,#0x118]
+        0x00004a5c:    e1a01008    ....    MOV      r1,r8
+        0x00004a60:    e7d33010    .0..    BFI      r3,r0,#0,#20
+        0x00004a64:    e5843118    .1..    STR      r3,[r4,#0x118]
+        0x00004a68:    e7972105    .!..    LDR      r2,[r7,r5,LSL #2]
+        0x00004a6c:    e51b0034    4...    LDR      r0,[r11,#-0x34]
+        0x00004a70:    e5923214    .2..    LDR      r3,[r2,#0x214]
+        0x00004a74:    e7d33010    .0..    BFI      r3,r0,#0,#20
+        0x00004a78:    e5823214    .2..    STR      r3,[r2,#0x214]
+        0x00004a7c:    e51b2030    0 ..    LDR      r2,[r11,#-0x30]
+        0x00004a80:    e5da0000    ....    LDRB     r0,[r10,#0]
+        0x00004a84:    e7974105    .A..    LDR      r4,[r7,r5,LSL #2]
+        0x00004a88:    e1a00052    R...    ASR      r0,r2,r0
+        0x00004a8c:    e1a00800    ....    LSL      r0,r0,#16
+        0x00004a90:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004a94:    e51b1034    4...    LDR      r1,[r11,#-0x34]
+        0x00004a98:    e5943218    .2..    LDR      r3,[r4,#0x218]
+        0x00004a9c:    e0800001    ....    ADD      r0,r0,r1
+        0x00004aa0:    e7d33010    .0..    BFI      r3,r0,#0,#20
+        0x00004aa4:    e5843218    .2..    STR      r3,[r4,#0x218]
+        0x00004aa8:    ea000010    ....    B        {pc} + 0x48  ; 0x4af0
+        0x00004aac:    e7942105    .!..    LDR      r2,[r4,r5,LSL #2]
+        0x00004ab0:    e5923114    .1..    LDR      r3,[r2,#0x114]
+        0x00004ab4:    e7d33019    .0..    BFI      r3,r9,#0,#20
+        0x00004ab8:    e5823114    .1..    STR      r3,[r2,#0x114]
+        0x00004abc:    e7942105    .!..    LDR      r2,[r4,r5,LSL #2]
+        0x00004ac0:    e5923118    .1..    LDR      r3,[r2,#0x118]
+        0x00004ac4:    e7d3301f    .0..    BFC      r3,#0,#20
+        0x00004ac8:    e5823118    .1..    STR      r3,[r2,#0x118]
+        0x00004acc:    e7942105    .!..    LDR      r2,[r4,r5,LSL #2]
+        0x00004ad0:    e5923214    .2..    LDR      r3,[r2,#0x214]
+        0x00004ad4:    e7d33016    .0..    BFI      r3,r6,#0,#20
+        0x00004ad8:    e5823214    .2..    STR      r3,[r2,#0x214]
+        0x00004adc:    e7942105    .!..    LDR      r2,[r4,r5,LSL #2]
+        0x00004ae0:    e51b0034    4...    LDR      r0,[r11,#-0x34]
+        0x00004ae4:    e5923218    .2..    LDR      r3,[r2,#0x218]
+        0x00004ae8:    e7d33010    .0..    BFI      r3,r0,#0,#20
+        0x00004aec:    e5823218    .2..    STR      r3,[r2,#0x218]
+        0x00004af0:    e3a00000    ....    MOV      r0,#0
+        0x00004af4:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00004af8:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00004afc:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Scaling_Factor
+    $a
+        0x00004b00:    e1a0c00d    ....    MOV      r12,r13
+        0x00004b04:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00004b08:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00004b0c:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x00004b10:    e59bc004    ....    LDR      r12,[r11,#4]
+        0x00004b14:    e1a08000    ....    MOV      r8,r0
+        0x00004b18:    e59b0008    ....    LDR      r0,[r11,#8]
+        0x00004b1c:    e3580001    ..X.    CMP      r8,#1
+        0x00004b20:    e50b1030    0...    STR      r1,[r11,#-0x30]
+        0x00004b24:    e5dc1000    ....    LDRB     r1,[r12,#0]
+        0x00004b28:    e1a0c003    ....    MOV      r12,r3
+        0x00004b2c:    e5903004    .0..    LDR      r3,[r0,#4]
+        0x00004b30:    e2011001    ....    AND      r1,r1,#1
+        0x00004b34:    e592a010    ....    LDR      r10,[r2,#0x10]
+        0x00004b38:    e0819003    ....    ADD      r9,r1,r3
+        0x00004b3c:    e59be00c    ....    LDR      r14,[r11,#0xc]
+        0x00004b40:    e592400c    .@..    LDR      r4,[r2,#0xc]
+        0x00004b44:    e5901000    ....    LDR      r1,[r0,#0]
+        0x00004b48:    1a000038    8...    BNE      {pc} + 0xe8  ; 0x4c30
+        0x00004b4c:    e5dc2003    . ..    LDRB     r2,[r12,#3]
+        0x00004b50:    e3520003    ..R.    CMP      r2,#3
+        0x00004b54:    02888001    ....    ADDEQ    r8,r8,#1
+        0x00004b58:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x4b70
+        0x00004b5c:    e2423001    .0B.    SUB      r3,r2,#1
+        0x00004b60:    e6ef3073    s0..    UXTB     r3,r3
+        0x00004b64:    e3530001    ..S.    CMP      r3,#1
+        0x00004b68:    83a08000    ....    MOVHI    r8,#0
+        0x00004b6c:    93a08001    ....    MOVLS    r8,#1
+        0x00004b70:    e3520004    ..R.    CMP      r2,#4
+        0x00004b74:    13520002    ..R.    CMPNE    r2,#2
+        0x00004b78:    e5dee001    ....    LDRB     r14,[r14,#1]
+        0x00004b7c:    13a06000    .`..    MOVNE    r6,#0
+        0x00004b80:    03a06001    .`..    MOVEQ    r6,#1
+        0x00004b84:    e35e0007    ..^.    CMP      r14,#7
+        0x00004b88:    03a0c002    ....    MOVEQ    r12,#2
+        0x00004b8c:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x4ba4
+        0x00004b90:    e24e3005    .0N.    SUB      r3,r14,#5
+        0x00004b94:    e6ef3073    s0..    UXTB     r3,r3
+        0x00004b98:    e3530001    ..S.    CMP      r3,#1
+        0x00004b9c:    83a0c000    ....    MOVHI    r12,#0
+        0x00004ba0:    93a0c001    ....    MOVLS    r12,#1
+        0x00004ba4:    e51b3030    00..    LDR      r3,[r11,#-0x30]
+        0x00004ba8:    e1a0065a    Z...    ASR      r0,r10,r6
+        0x00004bac:    e1a05c51    Q\..    ASR      r5,r1,r12
+        0x00004bb0:    e1a04854    TH..    ASR      r4,r4,r8
+        0x00004bb4:    e1a00610    ....    LSL      r0,r0,r6
+        0x00004bb8:    e59f71ac    .q..    LDR      r7,[pc,#428]  ; [([Section 17] + 16988) = 0x4d6c]  = 0x425c
+        0x00004bbc:    e5d32000    . ..    LDRB     r2,[r3,#0]
+        0x00004bc0:    e35e0005    ..^.    CMP      r14,#5
+        0x00004bc4:    13a03000    .0..    MOVNE    r3,#0
+        0x00004bc8:    03a03001    .0..    MOVEQ    r3,#1
+        0x00004bcc:    e1a01359    Y...    ASR      r1,r9,r3
+        0x00004bd0:    e1a05c15    .\..    LSL      r5,r5,r12
+        0x00004bd4:    e1a00250    P...    ASR      r0,r0,r2
+        0x00004bd8:    e1a04814    .H..    LSL      r4,r4,r8
+        0x00004bdc:    e1a01311    ....    LSL      r1,r1,r3
+        0x00004be0:    e1a00800    ....    LSL      r0,r0,#16
+        0x00004be4:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004be8:    e3550b02    ..U.    CMP      r5,#0x800
+        0x00004bec:    b1a01005    ....    MOVLT    r1,r5
+        0x00004bf0:    a3a01b02    ....    MOVGE    r1,#0x800
+        0x00004bf4:    e5975004    .P..    LDR      r5,[r7,#4]
+        0x00004bf8:    e1a06000    .`..    MOV      r6,r0
+        0x00004bfc:    e1a00804    ....    LSL      r0,r4,#16
+        0x00004c00:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004c04:    e5953108    .1..    LDR      r3,[r5,#0x108]
+        0x00004c08:    e7d73010    .0..    BFI      r3,r0,#0,#24
+        0x00004c0c:    e5853108    .1..    STR      r3,[r5,#0x108]
+        0x00004c10:    e59bc004    ....    LDR      r12,[r11,#4]
+        0x00004c14:    e5971004    ....    LDR      r1,[r7,#4]
+        0x00004c18:    e5dc2000    . ..    LDRB     r2,[r12,#0]
+        0x00004c1c:    e591310c    .1..    LDR      r3,[r1,#0x10c]
+        0x00004c20:    e1a06216    .b..    LSL      r6,r6,r2
+        0x00004c24:    e7d73016    .0..    BFI      r3,r6,#0,#24
+        0x00004c28:    e581310c    .1..    STR      r3,[r1,#0x10c]
+        0x00004c2c:    ea00004b    K...    B        {pc} + 0x134  ; 0x4d60
+        0x00004c30:    e5dc3002    .0..    LDRB     r3,[r12,#2]
+        0x00004c34:    e3530001    ..S.    CMP      r3,#1
+        0x00004c38:    1a000002    ....    BNE      {pc} + 0x10  ; 0x4c48
+        0x00004c3c:    e5dc3003    .0..    LDRB     r3,[r12,#3]
+        0x00004c40:    e3530001    ..S.    CMP      r3,#1
+        0x00004c44:    03c44001    .@..    BICEQ    r4,r4,#1
+        0x00004c48:    e59f311c    .1..    LDR      r3,[pc,#284]  ; [([Section 17] + 16988) = 0x4d6c]  = 0x425c
+        0x00004c4c:    e3510b02    ..Q.    CMP      r1,#0x800
+        0x00004c50:    d7932108    .!..    LDRLE    r2,[r3,r8,LSL #2]
+        0x00004c54:    d592300c    .0..    LDRLE    r3,[r2,#0xc]
+        0x00004c58:    d7c8341f    .4..    BFCLE    r3,#8,#1
+        0x00004c5c:    da000004    ....    BLE      {pc} + 0x18  ; 0x4c74
+        0x00004c60:    e7932108    .!..    LDR      r2,[r3,r8,LSL #2]
+        0x00004c64:    e3540b02    ..T.    CMP      r4,#0x800
+        0x00004c68:    a3a04b02    .K..    MOVGE    r4,#0x800
+        0x00004c6c:    e592300c    .0..    LDR      r3,[r2,#0xc]
+        0x00004c70:    e3833c01    .<..    ORR      r3,r3,#0x100
+        0x00004c74:    e582300c    .0..    STR      r3,[r2,#0xc]
+        0x00004c78:    e5dc2003    . ..    LDRB     r2,[r12,#3]
+        0x00004c7c:    e3520003    ..R.    CMP      r2,#3
+        0x00004c80:    03a06002    .`..    MOVEQ    r6,#2
+        0x00004c84:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x4c9c
+        0x00004c88:    e2423001    .0B.    SUB      r3,r2,#1
+        0x00004c8c:    e6ef3073    s0..    UXTB     r3,r3
+        0x00004c90:    e3530001    ..S.    CMP      r3,#1
+        0x00004c94:    83a06000    .`..    MOVHI    r6,#0
+        0x00004c98:    93a06001    .`..    MOVLS    r6,#1
+        0x00004c9c:    e5de0001    ....    LDRB     r0,[r14,#1]
+        0x00004ca0:    e3520004    ..R.    CMP      r2,#4
+        0x00004ca4:    13520002    ..R.    CMPNE    r2,#2
+        0x00004ca8:    e2403005    .0@.    SUB      r3,r0,#5
+        0x00004cac:    13a07000    .p..    MOVNE    r7,#0
+        0x00004cb0:    03a07001    .p..    MOVEQ    r7,#1
+        0x00004cb4:    e6ef3073    s0..    UXTB     r3,r3
+        0x00004cb8:    e3530001    ..S.    CMP      r3,#1
+        0x00004cbc:    92466001    .`F.    SUBLS    r6,r6,#1
+        0x00004cc0:    9a000002    ....    BLS      {pc} + 0x10  ; 0x4cd0
+        0x00004cc4:    e3500007    ..P.    CMP      r0,#7
+        0x00004cc8:    02466002    .`F.    SUBEQ    r6,r6,#2
+        0x00004ccc:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x4cd8
+        0x00004cd0:    e3500002    ..P.    CMP      r0,#2
+        0x00004cd4:    02477001    .pG.    SUBEQ    r7,r7,#1
+        0x00004cd8:    e1a00804    ....    LSL      r0,r4,#16
+        0x00004cdc:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004ce0:    e51b3030    00..    LDR      r3,[r11,#-0x30]
+        0x00004ce4:    e1a01009    ....    MOV      r1,r9
+        0x00004ce8:    e1a05000    .P..    MOV      r5,r0
+        0x00004cec:    e5d30000    ....    LDRB     r0,[r3,#0]
+        0x00004cf0:    e1a06655    Uf..    ASR      r6,r5,r6
+        0x00004cf4:    e1a0005a    Z...    ASR      r0,r10,r0
+        0x00004cf8:    e1a00800    ....    LSL      r0,r0,#16
+        0x00004cfc:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004d00:    e59fc064    d...    LDR      r12,[pc,#100]  ; [([Section 17] + 16988) = 0x4d6c]  = 0x425c
+        0x00004d04:    e79c2108    .!..    LDR      r2,[r12,r8,LSL #2]
+        0x00004d08:    e5923108    .1..    LDR      r3,[r2,#0x108]
+        0x00004d0c:    e7d73015    .0..    BFI      r3,r5,#0,#24
+        0x00004d10:    e5823108    .1..    STR      r3,[r2,#0x108]
+        0x00004d14:    e59b3004    .0..    LDR      r3,[r11,#4]
+        0x00004d18:    e79c1108    ....    LDR      r1,[r12,r8,LSL #2]
+        0x00004d1c:    e5d32000    . ..    LDRB     r2,[r3,#0]
+        0x00004d20:    e591310c    .1..    LDR      r3,[r1,#0x10c]
+        0x00004d24:    e1a04750    PG..    ASR      r4,r0,r7
+        0x00004d28:    e1a00210    ....    LSL      r0,r0,r2
+        0x00004d2c:    e7d73010    .0..    BFI      r3,r0,#0,#24
+        0x00004d30:    e581310c    .1..    STR      r3,[r1,#0x10c]
+        0x00004d34:    e79c2108    .!..    LDR      r2,[r12,r8,LSL #2]
+        0x00004d38:    e5923208    .2..    LDR      r3,[r2,#0x208]
+        0x00004d3c:    e7d73016    .0..    BFI      r3,r6,#0,#24
+        0x00004d40:    e5823208    .2..    STR      r3,[r2,#0x208]
+        0x00004d44:    e79c1108    ....    LDR      r1,[r12,r8,LSL #2]
+        0x00004d48:    e59bc004    ....    LDR      r12,[r11,#4]
+        0x00004d4c:    e591320c    .2..    LDR      r3,[r1,#0x20c]
+        0x00004d50:    e5dc2000    . ..    LDRB     r2,[r12,#0]
+        0x00004d54:    e1a04214    .B..    LSL      r4,r4,r2
+        0x00004d58:    e7d73014    .0..    BFI      r3,r4,#0,#24
+        0x00004d5c:    e581320c    .2..    STR      r3,[r1,#0x20c]
+        0x00004d60:    e3a00000    ....    MOV      r0,#0
+        0x00004d64:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00004d68:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00004d6c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Scaling_Coef
+    $a
+        0x00004d70:    e1a0c00d    ....    MOV      r12,r13
+        0x00004d74:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00004d78:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00004d7c:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x00004d80:    e1a0e003    ....    MOV      r14,r3
+        0x00004d84:    e59b3008    .0..    LDR      r3,[r11,#8]
+        0x00004d88:    e5dec002    ....    LDRB     r12,[r14,#2]
+        0x00004d8c:    e1a04001    .@..    MOV      r4,r1
+        0x00004d90:    e50b003c    <...    STR      r0,[r11,#-0x3c]
+        0x00004d94:    e35c0001    ..\.    CMP      r12,#1
+        0x00004d98:    e5929010    ....    LDR      r9,[r2,#0x10]
+        0x00004d9c:    e5935004    .P..    LDR      r5,[r3,#4]
+        0x00004da0:    e5dbc010    ....    LDRB     r12,[r11,#0x10]
+        0x00004da4:    e592000c    ....    LDR      r0,[r2,#0xc]
+        0x00004da8:    e5931000    ....    LDR      r1,[r3,#0]
+        0x00004dac:    1a000002    ....    BNE      {pc} + 0x10  ; 0x4dbc
+        0x00004db0:    e5de3003    .0..    LDRB     r3,[r14,#3]
+        0x00004db4:    e3530001    ..S.    CMP      r3,#1
+        0x00004db8:    03c00001    ....    BICEQ    r0,r0,#1
+        0x00004dbc:    e5de2003    . ..    LDRB     r2,[r14,#3]
+        0x00004dc0:    e2423001    .0B.    SUB      r3,r2,#1
+        0x00004dc4:    e6ef3073    s0..    UXTB     r3,r3
+        0x00004dc8:    e3530001    ..S.    CMP      r3,#1
+        0x00004dcc:    92803001    .0..    ADDLS    r3,r0,#1
+        0x00004dd0:    91a0a0c3    ....    ASRLS    r10,r3,#1
+        0x00004dd4:    9a000003    ....    BLS      {pc} + 0x14  ; 0x4de8
+        0x00004dd8:    e3520003    ..R.    CMP      r2,#3
+        0x00004ddc:    02803003    .0..    ADDEQ    r3,r0,#3
+        0x00004de0:    11a0a000    ....    MOVNE    r10,r0
+        0x00004de4:    01a0a143    C...    ASREQ    r10,r3,#2
+        0x00004de8:    e3520004    ..R.    CMP      r2,#4
+        0x00004dec:    13520002    ..R.    CMPNE    r2,#2
+        0x00004df0:    150b9038    8...    STRNE    r9,[r11,#-0x38]
+        0x00004df4:    02893001    .0..    ADDEQ    r3,r9,#1
+        0x00004df8:    01a030c3    .0..    ASREQ    r3,r3,#1
+        0x00004dfc:    050b3038    80..    STREQ    r3,[r11,#-0x38]
+        0x00004e00:    e59b300c    .0..    LDR      r3,[r11,#0xc]
+        0x00004e04:    e5d32001    . ..    LDRB     r2,[r3,#1]
+        0x00004e08:    e2423005    .0B.    SUB      r3,r2,#5
+        0x00004e0c:    e6ef3073    s0..    UXTB     r3,r3
+        0x00004e10:    e3530001    ..S.    CMP      r3,#1
+        0x00004e14:    92813001    .0..    ADDLS    r3,r1,#1
+        0x00004e18:    91a070c3    .p..    ASRLS    r7,r3,#1
+        0x00004e1c:    9a000005    ....    BLS      {pc} + 0x1c  ; 0x4e38
+        0x00004e20:    e3520007    ..R.    CMP      r2,#7
+        0x00004e24:    02813003    .0..    ADDEQ    r3,r1,#3
+        0x00004e28:    01a06005    .`..    MOVEQ    r6,r5
+        0x00004e2c:    01a07143    Cq..    ASREQ    r7,r3,#2
+        0x00004e30:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x4e48
+        0x00004e34:    e1a07001    .p..    MOV      r7,r1
+        0x00004e38:    e3520002    ..R.    CMP      r2,#2
+        0x00004e3c:    02853001    .0..    ADDEQ    r3,r5,#1
+        0x00004e40:    11a06005    .`..    MOVNE    r6,r5
+        0x00004e44:    01a060c3    .`..    ASREQ    r6,r3,#1
+        0x00004e48:    e20c303f    ?0..    AND      r3,r12,#0x3f
+        0x00004e4c:    e31c0040    @...    TST      r12,#0x40
+        0x00004e50:    12633000    .0c.    RSBNE    r3,r3,#0
+        0x00004e54:    e50b3034    40..    STR      r3,[r11,#-0x34]
+        0x00004e58:    e51b3034    40..    LDR      r3,[r11,#-0x34]
+        0x00004e5c:    e31c0080    ....    TST      r12,#0x80
+        0x00004e60:    e1a00180    ....    LSL      r0,r0,#3
+        0x00004e64:    13a03000    .0..    MOVNE    r3,#0
+        0x00004e68:    e50b3030    00..    STR      r3,[r11,#-0x30]
+        0x00004e6c:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004e70:    e5d44000    .@..    LDRB     r4,[r4,#0]
+        0x00004e74:    e1a01005    ....    MOV      r1,r5
+        0x00004e78:    e1a08000    ....    MOV      r8,r0
+        0x00004e7c:    e1a00459    Y...    ASR      r0,r9,r4
+        0x00004e80:    e1a00180    ....    LSL      r0,r0,#3
+        0x00004e84:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004e88:    e1a01007    ....    MOV      r1,r7
+        0x00004e8c:    e1a05000    .P..    MOV      r5,r0
+        0x00004e90:    e1a0018a    ....    LSL      r0,r10,#3
+        0x00004e94:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004e98:    e51b9038    8...    LDR      r9,[r11,#-0x38]
+        0x00004e9c:    e1a01006    ....    MOV      r1,r6
+        0x00004ea0:    e1a04459    YD..    ASR      r4,r9,r4
+        0x00004ea4:    e1a07000    .p..    MOV      r7,r0
+        0x00004ea8:    e1a00184    ....    LSL      r0,r4,#3
+        0x00004eac:    ebfffffe    ....    BL       __aeabi_idiv  ;
+        0x00004eb0:    e3570000    ..W.    CMP      r7,#0
+        0x00004eb4:    01a0a007    ....    MOVEQ    r10,r7
+        0x00004eb8:    e1a04000    .@..    MOV      r4,r0
+        0x00004ebc:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x4ed4
+        0x00004ec0:    e1a00008    ....    MOV      r0,r8
+        0x00004ec4:    e1a01007    ....    MOV      r1,r7
+        0x00004ec8:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x00004ecc:    e51b3034    40..    LDR      r3,[r11,#-0x34]
+        0x00004ed0:    e1a0a053    S...    ASR      r10,r3,r0
+        0x00004ed4:    e3540000    ..T.    CMP      r4,#0
+        0x00004ed8:    01a06004    .`..    MOVEQ    r6,r4
+        0x00004edc:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x4ef4
+        0x00004ee0:    e1a00005    ....    MOV      r0,r5
+        0x00004ee4:    e1a01004    ....    MOV      r1,r4
+        0x00004ee8:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x00004eec:    e51b9030    0...    LDR      r9,[r11,#-0x30]
+        0x00004ef0:    e1a06059    Y`..    ASR      r6,r9,r0
+        0x00004ef4:    e1b001a5    ....    LSRS     r0,r5,#3
+        0x00004ef8:    03a0c001    ....    MOVEQ    r12,#1
+        0x00004efc:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x4f38
+        0x00004f00:    e3500001    ..P.    CMP      r0,#1
+        0x00004f04:    e2053007    .0..    AND      r3,r5,#7
+        0x00004f08:    0283c001    ....    ADDEQ    r12,r3,#1
+        0x00004f0c:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x4f38
+        0x00004f10:    e3500002    ..P.    CMP      r0,#2
+        0x00004f14:    01a030a3    .0..    LSREQ    r3,r3,#1
+        0x00004f18:    0283c009    ....    ADDEQ    r12,r3,#9
+        0x00004f1c:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x4f38
+        0x00004f20:    e3500003    ..P.    CMP      r0,#3
+        0x00004f24:    03a0c00d    ....    MOVEQ    r12,#0xd
+        0x00004f28:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x4f38
+        0x00004f2c:    e3500004    ..P.    CMP      r0,#4
+        0x00004f30:    03a0c00e    ....    MOVEQ    r12,#0xe
+        0x00004f34:    13a0c00f    ....    MOVNE    r12,#0xf
+        0x00004f38:    e1b001a8    ....    LSRS     r0,r8,#3
+        0x00004f3c:    03a0e001    ....    MOVEQ    r14,#1
+        0x00004f40:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x4f7c
+        0x00004f44:    e3500001    ..P.    CMP      r0,#1
+        0x00004f48:    e2081007    ....    AND      r1,r8,#7
+        0x00004f4c:    0281e001    ....    ADDEQ    r14,r1,#1
+        0x00004f50:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x4f7c
+        0x00004f54:    e3500002    ..P.    CMP      r0,#2
+        0x00004f58:    01a030a1    .0..    LSREQ    r3,r1,#1
+        0x00004f5c:    0283e009    ....    ADDEQ    r14,r3,#9
+        0x00004f60:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x4f7c
+        0x00004f64:    e3500003    ..P.    CMP      r0,#3
+        0x00004f68:    03a0e00d    ....    MOVEQ    r14,#0xd
+        0x00004f6c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x4f7c
+        0x00004f70:    e3500004    ..P.    CMP      r0,#4
+        0x00004f74:    03a0e00e    ....    MOVEQ    r14,#0xe
+        0x00004f78:    13a0e00f    ....    MOVNE    r14,#0xf
+        0x00004f7c:    e1b001a4    ....    LSRS     r0,r4,#3
+        0x00004f80:    03a02001    . ..    MOVEQ    r2,#1
+        0x00004f84:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x4fc0
+        0x00004f88:    e3500001    ..P.    CMP      r0,#1
+        0x00004f8c:    e2041007    ....    AND      r1,r4,#7
+        0x00004f90:    02812001    . ..    ADDEQ    r2,r1,#1
+        0x00004f94:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x4fc0
+        0x00004f98:    e3500002    ..P.    CMP      r0,#2
+        0x00004f9c:    01a030a1    .0..    LSREQ    r3,r1,#1
+        0x00004fa0:    02832009    . ..    ADDEQ    r2,r3,#9
+        0x00004fa4:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x4fc0
+        0x00004fa8:    e3500003    ..P.    CMP      r0,#3
+        0x00004fac:    03a0200d    . ..    MOVEQ    r2,#0xd
+        0x00004fb0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x4fc0
+        0x00004fb4:    e3500004    ..P.    CMP      r0,#4
+        0x00004fb8:    03a0200e    . ..    MOVEQ    r2,#0xe
+        0x00004fbc:    13a0200f    . ..    MOVNE    r2,#0xf
+        0x00004fc0:    e1b001a7    ....    LSRS     r0,r7,#3
+        0x00004fc4:    03a00001    ....    MOVEQ    r0,#1
+        0x00004fc8:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x5004
+        0x00004fcc:    e3500001    ..P.    CMP      r0,#1
+        0x00004fd0:    e2071007    ....    AND      r1,r7,#7
+        0x00004fd4:    02810001    ....    ADDEQ    r0,r1,#1
+        0x00004fd8:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x5004
+        0x00004fdc:    e3500002    ..P.    CMP      r0,#2
+        0x00004fe0:    01a030a1    .0..    LSREQ    r3,r1,#1
+        0x00004fe4:    02830009    ....    ADDEQ    r0,r3,#9
+        0x00004fe8:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x5004
+        0x00004fec:    e3500003    ..P.    CMP      r0,#3
+        0x00004ff0:    0280000a    ....    ADDEQ    r0,r0,#0xa
+        0x00004ff4:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x5004
+        0x00004ff8:    e3500004    ..P.    CMP      r0,#4
+        0x00004ffc:    03a0000e    ....    MOVEQ    r0,#0xe
+        0x00005000:    13a0000f    ....    MOVNE    r0,#0xf
+        0x00005004:    e51b3030    00..    LDR      r3,[r11,#-0x30]
+        0x00005008:    e0822006    . ..    ADD      r2,r2,r6
+        0x0000500c:    e51b9034    4...    LDR      r9,[r11,#-0x34]
+        0x00005010:    e080000a    ....    ADD      r0,r0,r10
+        0x00005014:    e08cc003    ....    ADD      r12,r12,r3
+        0x00005018:    e1c22fc2    ./..    BIC      r2,r2,r2,ASR #31
+        0x0000501c:    e08e1009    ....    ADD      r1,r14,r9
+        0x00005020:    e1cccfcc    ....    BIC      r12,r12,r12,ASR #31
+        0x00005024:    e1c11fc1    ....    BIC      r1,r1,r1,ASR #31
+        0x00005028:    e1c00fc0    ....    BIC      r0,r0,r0,ASR #31
+        0x0000502c:    e59f30a0    .0..    LDR      r3,[pc,#160]  ; [fir_tab = 0x50d4] = 0
+        0x00005030:    e351000f    ..Q.    CMP      r1,#0xf
+        0x00005034:    23a0100f    ...#    MOVCS    r1,#0xf
+        0x00005038:    e35c000f    ..\.    CMP      r12,#0xf
+        0x0000503c:    23a0c00f    ...#    MOVCS    r12,#0xf
+        0x00005040:    e350000f    ..P.    CMP      r0,#0xf
+        0x00005044:    23a0000f    ...#    MOVCS    r0,#0xf
+        0x00005048:    e352000f    ..R.    CMP      r2,#0xf
+        0x0000504c:    23a0200f    . .#    MOVCS    r2,#0xf
+        0x00005050:    e0838381    ....    ADD      r8,r3,r1,LSL #7
+        0x00005054:    e083738c    .s..    ADD      r7,r3,r12,LSL #7
+        0x00005058:    e0836380    .c..    ADD      r6,r3,r0,LSL #7
+        0x0000505c:    e083a382    ....    ADD      r10,r3,r2,LSL #7
+        0x00005060:    e3a0e000    ....    MOV      r14,#0
+        0x00005064:    e51b903c    <...    LDR      r9,[r11,#-0x3c]
+        0x00005068:    e28e1c01    ....    ADD      r1,r14,#0x100
+        0x0000506c:    e59f5064    dP..    LDR      r5,[pc,#100]  ; [([Section 17] + 16988) = 0x50d8]  = 0x425c
+        0x00005070:    e28e0d05    ....    ADD      r0,r14,#0x140
+        0x00005074:    e4982004    . ..    LDR      r2,[r8],#4
+        0x00005078:    e28ecd06    ....    ADD      r12,r14,#0x180
+        0x0000507c:    e28e4d07    .M..    ADD      r4,r14,#0x1c0
+        0x00005080:    e28ee001    ....    ADD      r14,r14,#1
+        0x00005084:    e7953109    .1..    LDR      r3,[r5,r9,LSL #2]
+        0x00005088:    e35e0020     .^.    CMP      r14,#0x20
+        0x0000508c:    e7832101    .!..    STR      r2,[r3,r1,LSL #2]
+        0x00005090:    e7952109    .!..    LDR      r2,[r5,r9,LSL #2]
+        0x00005094:    e4973004    .0..    LDR      r3,[r7],#4
+        0x00005098:    e7823100    .1..    STR      r3,[r2,r0,LSL #2]
+        0x0000509c:    e7952109    .!..    LDR      r2,[r5,r9,LSL #2]
+        0x000050a0:    e4963004    .0..    LDR      r3,[r6],#4
+        0x000050a4:    e782310c    .1..    STR      r3,[r2,r12,LSL #2]
+        0x000050a8:    e7952109    .!..    LDR      r2,[r5,r9,LSL #2]
+        0x000050ac:    e49a3004    .0..    LDR      r3,[r10],#4
+        0x000050b0:    e7823104    .1..    STR      r3,[r2,r4,LSL #2]
+        0x000050b4:    1affffea    ....    BNE      {pc} - 0x50  ; 0x5064
+        0x000050b8:    e7952109    .!..    LDR      r2,[r5,r9,LSL #2]
+        0x000050bc:    e3a00000    ....    MOV      r0,#0
+        0x000050c0:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000050c4:    e3833002    .0..    ORR      r3,r3,#2
+        0x000050c8:    e5823004    .0..    STR      r3,[r2,#4]
+        0x000050cc:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x000050d0:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x000050d4:    00000000    ....    DCD    0 ; fir_tab
+        0x000050d8:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_CSC_Coef
+    $a
+        0x000050dc:    e1a0c00d    ....    MOV      r12,r13
+        0x000050e0:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x000050e4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000050e8:    e3530000    ..S.    CMP      r3,#0
+        0x000050ec:    e1a04000    .@..    MOV      r4,r0
+        0x000050f0:    e5db3004    .0..    LDRB     r3,[r11,#4]
+        0x000050f4:    1a000007    ....    BNE      {pc} + 0x24  ; 0x5118
+        0x000050f8:    e3530000    ..S.    CMP      r3,#0
+        0x000050fc:    0a000018    ....    BEQ      {pc} + 0x68  ; 0x5164
+        0x00005100:    e1a03301    .3..    LSL      r3,r1,#6
+        0x00005104:    e2012003    . ..    AND      r2,r1,#3
+        0x00005108:    e20330ff    .0..    AND      r3,r3,#0xff
+        0x0000510c:    e0833382    .3..    ADD      r3,r3,r2,LSL #7
+        0x00005110:    e2831090    ....    ADD      r1,r3,#0x90
+        0x00005114:    ea000005    ....    B        {pc} + 0x1c  ; 0x5130
+        0x00005118:    e3530000    ..S.    CMP      r3,#0
+        0x0000511c:    1a000010    ....    BNE      {pc} + 0x48  ; 0x5164
+        0x00005120:    e1a03301    .3..    LSL      r3,r1,#6
+        0x00005124:    e2012003    . ..    AND      r2,r1,#3
+        0x00005128:    e20330ff    .0..    AND      r3,r3,#0xff
+        0x0000512c:    e0831382    ....    ADD      r1,r3,r2,LSL #7
+        0x00005130:    e59f304c    L0..    LDR      r3,[pc,#76]   ; [csc_tab = 0x5184] = 0
+        0x00005134:    e3a00000    ....    MOV      r0,#0
+        0x00005138:    e083c001    ....    ADD      r12,r3,r1
+        0x0000513c:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [([Section 17] + 16988) = 0x5188]  = 0x425c
+        0x00005140:    e280101c    ....    ADD      r1,r0,#0x1c
+        0x00005144:    e49c2004    . ..    LDR      r2,[r12],#4
+        0x00005148:    e2800001    ....    ADD      r0,r0,#1
+        0x0000514c:    e350000c    ..P.    CMP      r0,#0xc
+        0x00005150:    e7933104    .1..    LDR      r3,[r3,r4,LSL #2]
+        0x00005154:    e7832101    .!..    STR      r2,[r3,r1,LSL #2]
+        0x00005158:    1afffff7    ....    BNE      {pc} - 0x1c  ; 0x513c
+        0x0000515c:    e3a01000    ....    MOV      r1,#0
+        0x00005160:    ea000000    ....    B        {pc} + 0x8  ; 0x5168
+        0x00005164:    e3a01001    ....    MOV      r1,#1
+        0x00005168:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 16988) = 0x5188]  = 0x425c
+        0x0000516c:    e3a00000    ....    MOV      r0,#0
+        0x00005170:    e7932104    .!..    LDR      r2,[r3,r4,LSL #2]
+        0x00005174:    e5923008    .0..    LDR      r3,[r2,#8]
+        0x00005178:    e7c13091    .0..    BFI      r3,r1,#1,#1
+        0x0000517c:    e5823008    .0..    STR      r3,[r2,#8]
+        0x00005180:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x00005184:    00000000    ....    DCD    0 ; csc_tab
+        0x00005188:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Out_Format
+    $a
+        0x0000518c:    e1a0c00d    ....    MOV      r12,r13
+        0x00005190:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00005194:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005198:    e59f5030    0P..    LDR      r5,[pc,#48]   ; [([Section 17] + 16988) = 0x51d0]  = 0x425c
+        0x0000519c:    e1a04000    .@..    MOV      r4,r0
+        0x000051a0:    e5d1c000    ....    LDRB     r12,[r1,#0]
+        0x000051a4:    e3a00000    ....    MOV      r0,#0
+        0x000051a8:    e7952104    .!..    LDR      r2,[r5,r4,LSL #2]
+        0x000051ac:    e592305c    \0..    LDR      r3,[r2,#0x5c]
+        0x000051b0:    e7c8341c    .4..    BFI      r3,r12,#8,#1
+        0x000051b4:    e582305c    \0..    STR      r3,[r2,#0x5c]
+        0x000051b8:    e795c104    ....    LDR      r12,[r5,r4,LSL #2]
+        0x000051bc:    e5d12001    . ..    LDRB     r2,[r1,#1]
+        0x000051c0:    e59c305c    \0..    LDR      r3,[r12,#0x5c]
+        0x000051c4:    e7c23012    .0..    BFI      r3,r2,#0,#3
+        0x000051c8:    e58c305c    \0..    STR      r3,[r12,#0x5c]
+        0x000051cc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000051d0:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Out_Size
+    $a
+        0x000051d4:    e1a0c00d    ....    MOV      r12,r13
+        0x000051d8:    e92dd9f0    ..-.    PUSH     {r4-r8,r11,r12,r14,pc}
+        0x000051dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000051e0:    e3500001    ..P.    CMP      r0,#1
+        0x000051e4:    e1a06000    .`..    MOV      r6,r0
+        0x000051e8:    e1a07001    .p..    MOV      r7,r1
+        0x000051ec:    e1a05003    .P..    MOV      r5,r3
+        0x000051f0:    e5d22001    . ..    LDRB     r2,[r2,#1]
+        0x000051f4:    1a00001e    ....    BNE      {pc} + 0x80  ; 0x5274
+        0x000051f8:    e3520007    ..R.    CMP      r2,#7
+        0x000051fc:    03a04002    .@..    MOVEQ    r4,#2
+        0x00005200:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x5218
+        0x00005204:    e2423005    .0B.    SUB      r3,r2,#5
+        0x00005208:    e6ef3073    s0..    UXTB     r3,r3
+        0x0000520c:    e3530001    ..S.    CMP      r3,#1
+        0x00005210:    83a04000    .@..    MOVHI    r4,#0
+        0x00005214:    93a04001    .@..    MOVLS    r4,#1
+        0x00005218:    e5953004    .0..    LDR      r3,[r5,#4]
+        0x0000521c:    e3520005    ..R.    CMP      r2,#5
+        0x00005220:    13a02000    . ..    MOVNE    r2,#0
+        0x00005224:    03a02001    . ..    MOVEQ    r2,#1
+        0x00005228:    e59fc114    ....    LDR      r12,[pc,#276]  ; [([Section 17] + 16988) = 0x5344]  = 0x425c
+        0x0000522c:    e5d71000    ....    LDRB     r1,[r7,#0]
+        0x00005230:    e1a03233    32..    LSR      r3,r3,r2
+        0x00005234:    e59c0004    ....    LDR      r0,[r12,#4]
+        0x00005238:    e1a03213    .2..    LSL      r3,r3,r2
+        0x0000523c:    e5902104    .!..    LDR      r2,[r0,#0x104]
+        0x00005240:    e1a03133    31..    LSR      r3,r3,r1
+        0x00005244:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00005248:    e7dc2813    .(..    BFI      r2,r3,#16,#13
+        0x0000524c:    e5802104    .!..    STR      r2,[r0,#0x104]
+        0x00005250:    e5953000    .0..    LDR      r3,[r5,#0]
+        0x00005254:    e59c1004    ....    LDR      r1,[r12,#4]
+        0x00005258:    e1a03433    34..    LSR      r3,r3,r4
+        0x0000525c:    e5912104    .!..    LDR      r2,[r1,#0x104]
+        0x00005260:    e1a03413    .4..    LSL      r3,r3,r4
+        0x00005264:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00005268:    e7cc2013    . ..    BFI      r2,r3,#0,#13
+        0x0000526c:    e5812104    .!..    STR      r2,[r1,#0x104]
+        0x00005270:    ea000031    1...    B        {pc} + 0xcc  ; 0x533c
+        0x00005274:    e2423005    .0B.    SUB      r3,r2,#5
+        0x00005278:    e6ef3073    s0..    UXTB     r3,r3
+        0x0000527c:    e3530001    ..S.    CMP      r3,#1
+        0x00005280:    95953000    .0..    LDRLS    r3,[r5,#0]
+        0x00005284:    92833001    .0..    ADDLS    r3,r3,#1
+        0x00005288:    91a040a3    .@..    LSRLS    r4,r3,#1
+        0x0000528c:    9a000005    ....    BLS      {pc} + 0x1c  ; 0x52a8
+        0x00005290:    e5953000    .0..    LDR      r3,[r5,#0]
+        0x00005294:    e3520007    ..R.    CMP      r2,#7
+        0x00005298:    02833003    .0..    ADDEQ    r3,r3,#3
+        0x0000529c:    01a04123    #A..    LSREQ    r4,r3,#2
+        0x000052a0:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x52bc
+        0x000052a4:    e1a04003    .@..    MOV      r4,r3
+        0x000052a8:    e3520005    ..R.    CMP      r2,#5
+        0x000052ac:    05953004    .0..    LDREQ    r3,[r5,#4]
+        0x000052b0:    02833001    .0..    ADDEQ    r3,r3,#1
+        0x000052b4:    01a080a3    ....    LSREQ    r8,r3,#1
+        0x000052b8:    0a000000    ....    BEQ      {pc} + 0x8  ; 0x52c0
+        0x000052bc:    e5958004    ....    LDR      r8,[r5,#4]
+        0x000052c0:    e59fc07c    |...    LDR      r12,[pc,#124]  ; [([Section 17] + 16988) = 0x5344]  = 0x425c
+        0x000052c4:    e2444001    .@D.    SUB      r4,r4,#1
+        0x000052c8:    e5d71000    ....    LDRB     r1,[r7,#0]
+        0x000052cc:    e5952004    . ..    LDR      r2,[r5,#4]
+        0x000052d0:    e79c0106    ....    LDR      r0,[r12,r6,LSL #2]
+        0x000052d4:    e2013001    .0..    AND      r3,r1,#1
+        0x000052d8:    e0833002    .0..    ADD      r3,r3,r2
+        0x000052dc:    e5902104    .!..    LDR      r2,[r0,#0x104]
+        0x000052e0:    e1a03133    31..    LSR      r3,r3,r1
+        0x000052e4:    e2433001    .0C.    SUB      r3,r3,#1
+        0x000052e8:    e7dc2813    .(..    BFI      r2,r3,#16,#13
+        0x000052ec:    e5802104    .!..    STR      r2,[r0,#0x104]
+        0x000052f0:    e79c1106    ....    LDR      r1,[r12,r6,LSL #2]
+        0x000052f4:    e5953000    .0..    LDR      r3,[r5,#0]
+        0x000052f8:    e5912104    .!..    LDR      r2,[r1,#0x104]
+        0x000052fc:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00005300:    e7cc2013    . ..    BFI      r2,r3,#0,#13
+        0x00005304:    e5812104    .!..    STR      r2,[r1,#0x104]
+        0x00005308:    e5d71000    ....    LDRB     r1,[r7,#0]
+        0x0000530c:    e79c0106    ....    LDR      r0,[r12,r6,LSL #2]
+        0x00005310:    e2013001    .0..    AND      r3,r1,#1
+        0x00005314:    e0883003    .0..    ADD      r3,r8,r3
+        0x00005318:    e5902204    ."..    LDR      r2,[r0,#0x204]
+        0x0000531c:    e1a03133    31..    LSR      r3,r3,r1
+        0x00005320:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00005324:    e7dc2813    .(..    BFI      r2,r3,#16,#13
+        0x00005328:    e5802204    ."..    STR      r2,[r0,#0x204]
+        0x0000532c:    e79c2106    .!..    LDR      r2,[r12,r6,LSL #2]
+        0x00005330:    e5923204    .2..    LDR      r3,[r2,#0x204]
+        0x00005334:    e7cc3014    .0..    BFI      r3,r4,#0,#13
+        0x00005338:    e5823204    .2..    STR      r3,[r2,#0x204]
+        0x0000533c:    e3a00000    ....    MOV      r0,#0
+        0x00005340:    e89da9f0    ....    LDM      r13,{r4-r8,r11,r13,pc}
+    $d
+        0x00005344:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Trig_Line
+    $a
+        0x00005348:    e1a0c00d    ....    MOV      r12,r13
+        0x0000534c:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x00005350:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005354:    e59f4028    (@..    LDR      r4,[pc,#40]   ; [([Section 17] + 16988) = 0x5384]  = 0x425c
+        0x00005358:    e1a0c000    ....    MOV      r12,r0
+        0x0000535c:    e3a00000    ....    MOV      r0,#0
+        0x00005360:    e794210c    .!..    LDR      r2,[r4,r12,LSL #2]
+        0x00005364:    e5923010    .0..    LDR      r3,[r2,#0x10]
+        0x00005368:    e7cf379f    .7..    BFC      r3,#15,#1
+        0x0000536c:    e5823010    .0..    STR      r3,[r2,#0x10]
+        0x00005370:    e794210c    .!..    LDR      r2,[r4,r12,LSL #2]
+        0x00005374:    e5923010    .0..    LDR      r3,[r2,#0x10]
+        0x00005378:    e7cc3011    .0..    BFI      r3,r1,#0,#13
+        0x0000537c:    e5823010    .0..    STR      r3,[r2,#0x10]
+        0x00005380:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x00005384:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Int_En
+    $a
+        0x00005388:    e1a0c00d    ....    MOV      r12,r13
+        0x0000538c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005390:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005394:    e3510007    ..Q.    CMP      r1,#7
+        0x00005398:    059f3048    H0..    LDREQ    r3,[pc,#72]   ; [([Section 17] + 16988) = 0x53e8]  = 0x425c
+        0x0000539c:    07932100    .!..    LDREQ    r2,[r3,r0,LSL #2]
+        0x000053a0:    05923060    `0..    LDREQ    r3,[r2,#0x60]
+        0x000053a4:    03833080    .0..    ORREQ    r3,r3,#0x80
+        0x000053a8:    0a00000b    ....    BEQ      {pc} + 0x34  ; 0x53dc
+        0x000053ac:    e3510009    ..Q.    CMP      r1,#9
+        0x000053b0:    059f3030    00..    LDREQ    r3,[pc,#48]   ; [([Section 17] + 16988) = 0x53e8]  = 0x425c
+        0x000053b4:    07932100    .!..    LDREQ    r2,[r3,r0,LSL #2]
+        0x000053b8:    05923060    `0..    LDREQ    r3,[r2,#0x60]
+        0x000053bc:    03833c02    .<..    ORREQ    r3,r3,#0x200
+        0x000053c0:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x53dc
+        0x000053c4:    e351000a    ..Q.    CMP      r1,#0xa
+        0x000053c8:    1a000004    ....    BNE      {pc} + 0x18  ; 0x53e0
+        0x000053cc:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x53e8]  = 0x425c
+        0x000053d0:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x000053d4:    e5923060    `0..    LDR      r3,[r2,#0x60]
+        0x000053d8:    e3833b01    .;..    ORR      r3,r3,#0x400
+        0x000053dc:    e5823060    `0..    STR      r3,[r2,#0x60]
+        0x000053e0:    e3a00000    ....    MOV      r0,#0
+        0x000053e4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000053e8:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Di_Ctrl
+    $a
+        0x000053ec:    e1a0c00d    ....    MOV      r12,r13
+        0x000053f0:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x000053f4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000053f8:    e3500001    ..P.    CMP      r0,#1
+        0x000053fc:    e1a0c001    ....    MOV      r12,r1
+        0x00005400:    e1a04002    .@..    MOV      r4,r2
+        0x00005404:    e1a05003    .P..    MOV      r5,r3
+        0x00005408:    e5db6004    .`..    LDRB     r6,[r11,#4]
+        0x0000540c:    0a000010    ....    BEQ      {pc} + 0x48  ; 0x5454
+        0x00005410:    e59f1044    D...    LDR      r1,[pc,#68]   ; [([Section 17] + 16988) = 0x545c]  = 0x425c
+        0x00005414:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x00005418:    e59230a0    .0..    LDR      r3,[r2,#0xa0]
+        0x0000541c:    e7c0301c    .0..    BFI      r3,r12,#0,#1
+        0x00005420:    e58230a0    .0..    STR      r3,[r2,#0xa0]
+        0x00005424:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x00005428:    e59230a0    .0..    LDR      r3,[r2,#0xa0]
+        0x0000542c:    e7d13814    .8..    BFI      r3,r4,#16,#2
+        0x00005430:    e58230a0    .0..    STR      r3,[r2,#0xa0]
+        0x00005434:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x00005438:    e59230a0    .0..    LDR      r3,[r2,#0xa0]
+        0x0000543c:    e7d83c15    .<..    BFI      r3,r5,#24,#1
+        0x00005440:    e58230a0    .0..    STR      r3,[r2,#0xa0]
+        0x00005444:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x00005448:    e59230a0    .0..    LDR      r3,[r2,#0xa0]
+        0x0000544c:    e7d93c96    .<..    BFI      r3,r6,#25,#1
+        0x00005450:    e58230a0    .0..    STR      r3,[r2,#0xa0]
+        0x00005454:    e3a00000    ....    MOV      r0,#0
+        0x00005458:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x0000545c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Di_PreFrame_Addr
+    $a
+        0x00005460:    e1a0c00d    ....    MOV      r12,r13
+        0x00005464:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005468:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000546c:    e3500001    ..P.    CMP      r0,#1
+        0x00005470:    159f300c    .0..    LDRNE    r3,[pc,#12]   ; [([Section 17] + 16988) = 0x5484]  = 0x425c
+        0x00005474:    17933100    .1..    LDRNE    r3,[r3,r0,LSL #2]
+        0x00005478:    e3a00000    ....    MOV      r0,#0
+        0x0000547c:    158310b8    ....    STRNE    r1,[r3,#0xb8]
+        0x00005480:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005484:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Di_MafFlag_Src
+    $a
+        0x00005488:    e1a0c00d    ....    MOV      r12,r13
+        0x0000548c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005490:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005494:    e3500001    ..P.    CMP      r0,#1
+        0x00005498:    e1a0c002    ....    MOV      r12,r2
+        0x0000549c:    159f3014    .0..    LDRNE    r3,[pc,#20]   ; [([Section 17] + 16988) = 0x54b8]  = 0x425c
+        0x000054a0:    17932100    .!..    LDRNE    r2,[r3,r0,LSL #2]
+        0x000054a4:    158210bc    ....    STRNE    r1,[r2,#0xbc]
+        0x000054a8:    17933100    .1..    LDRNE    r3,[r3,r0,LSL #2]
+        0x000054ac:    e3a00000    ....    MOV      r0,#0
+        0x000054b0:    1583c0c0    ....    STRNE    r12,[r3,#0xc0]
+        0x000054b4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000054b8:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Start
+    $a
+        0x000054bc:    e1a0c00d    ....    MOV      r12,r13
+        0x000054c0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000054c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000054c8:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x54e4]  = 0x425c
+        0x000054cc:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x000054d0:    e3a00000    ....    MOV      r0,#0
+        0x000054d4:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000054d8:    e3833801    .8..    ORR      r3,r3,#0x10000
+        0x000054dc:    e5823004    .0..    STR      r3,[r2,#4]
+        0x000054e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000054e4:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Filtercoef_Ready
+    $a
+        0x000054e8:    e1a0c00d    ....    MOV      r12,r13
+        0x000054ec:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000054f0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000054f4:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x5510]  = 0x425c
+        0x000054f8:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x000054fc:    e3a00000    ....    MOV      r0,#0
+        0x00005500:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00005504:    e3833002    .0..    ORR      r3,r3,#2
+        0x00005508:    e5823004    .0..    STR      r3,[r2,#4]
+        0x0000550c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005510:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Reg_Rdy
+    $a
+        0x00005514:    e1a0c00d    ....    MOV      r12,r13
+        0x00005518:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000551c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005520:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x553c]  = 0x425c
+        0x00005524:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00005528:    e3a00000    ....    MOV      r0,#0
+        0x0000552c:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00005530:    e3833001    .0..    ORR      r3,r3,#1
+        0x00005534:    e5823004    .0..    STR      r3,[r2,#4]
+        0x00005538:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000553c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Reset
+    $a
+        0x00005540:    e1a0c00d    ....    MOV      r12,r13
+        0x00005544:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005548:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000554c:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x5568]  = 0x425c
+        0x00005550:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00005554:    e3a00000    ....    MOV      r0,#0
+        0x00005558:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x0000555c:    e7d0381f    .8..    BFC      r3,#16,#1
+        0x00005560:    e5823004    .0..    STR      r3,[r2,#4]
+        0x00005564:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005568:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Output_Port_Select
+    $a
+        0x0000556c:    e1a0c00d    ....    MOV      r12,r13
+        0x00005570:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005574:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005578:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x5594]  = 0x425c
+        0x0000557c:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00005580:    e3a00000    ....    MOV      r0,#0
+        0x00005584:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00005588:    e7c93411    .4..    BFI      r3,r1,#8,#2
+        0x0000558c:    e5823004    .0..    STR      r3,[r2,#4]
+        0x00005590:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005594:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Output_Select
+    $a
+        0x00005598:    e1a0c00d    ....    MOV      r12,r13
+        0x0000559c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000055a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000055a4:    e3510003    ..Q.    CMP      r1,#3
+        0x000055a8:    e1a0c001    ....    MOV      r12,r1
+        0x000055ac:    1a000008    ....    BNE      {pc} + 0x28  ; 0x55d4
+        0x000055b0:    e59f1050    P...    LDR      r1,[pc,#80]   ; [([Section 17] + 16988) = 0x5608]  = 0x425c
+        0x000055b4:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x000055b8:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000055bc:    e3833b02    .;..    ORR      r3,r3,#0x800
+        0x000055c0:    e5823004    .0..    STR      r3,[r2,#4]
+        0x000055c4:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x000055c8:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000055cc:    e7c9341f    .4..    BFC      r3,#8,#2
+        0x000055d0:    ea000009    ....    B        {pc} + 0x2c  ; 0x55fc
+        0x000055d4:    e3510002    ..Q.    CMP      r1,#2
+        0x000055d8:    8a000008    ....    BHI      {pc} + 0x28  ; 0x5600
+        0x000055dc:    e59f1024    $...    LDR      r1,[pc,#36]   ; [([Section 17] + 16988) = 0x5608]  = 0x425c
+        0x000055e0:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x000055e4:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000055e8:    e7cb359f    .5..    BFC      r3,#11,#1
+        0x000055ec:    e5823004    .0..    STR      r3,[r2,#4]
+        0x000055f0:    e7912100    .!..    LDR      r2,[r1,r0,LSL #2]
+        0x000055f4:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000055f8:    e7c9341c    .4..    BFI      r3,r12,#8,#2
+        0x000055fc:    e5823004    .0..    STR      r3,[r2,#4]
+        0x00005600:    e3a00000    ....    MOV      r0,#0
+        0x00005604:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005608:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Writeback_Enable
+    $a
+        0x0000560c:    e1a0c00d    ....    MOV      r12,r13
+        0x00005610:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005614:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005618:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x5634]  = 0x425c
+        0x0000561c:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00005620:    e3a00000    ....    MOV      r0,#0
+        0x00005624:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00005628:    e3833004    .0..    ORR      r3,r3,#4
+        0x0000562c:    e5823004    .0..    STR      r3,[r2,#4]
+        0x00005630:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005634:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Writeback_Disable
+    $a
+        0x00005638:    e1a0c00d    ....    MOV      r12,r13
+        0x0000563c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005640:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005644:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x5660]  = 0x425c
+        0x00005648:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x0000564c:    e3a00000    ....    MOV      r0,#0
+        0x00005650:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00005654:    e7c2311f    .1..    BFC      r3,#2,#1
+        0x00005658:    e5823004    .0..    STR      r3,[r2,#4]
+        0x0000565c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005660:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Enable
+    $a
+        0x00005664:    e1a0c00d    ....    MOV      r12,r13
+        0x00005668:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000566c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005670:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x568c]  = 0x425c
+        0x00005674:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00005678:    e3a00000    ....    MOV      r0,#0
+        0x0000567c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00005680:    e3833001    .0..    ORR      r3,r3,#1
+        0x00005684:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00005688:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000568c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Disable
+    $a
+        0x00005690:    e1a0c00d    ....    MOV      r12,r13
+        0x00005694:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005698:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000569c:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x56b8]  = 0x425c
+        0x000056a0:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x000056a4:    e3a00000    ....    MOV      r0,#0
+        0x000056a8:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x000056ac:    e7c0301f    .0..    BFC      r3,#0,#1
+        0x000056b0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000056b4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000056b8:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Set_Writeback_Addr
+    $a
+        0x000056bc:    e1a0c00d    ....    MOV      r12,r13
+        0x000056c0:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x000056c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000056c8:    e59f402c    ,@..    LDR      r4,[pc,#44]   ; [([Section 17] + 16988) = 0x56fc]  = 0x425c
+        0x000056cc:    e1a0c000    ....    MOV      r12,r0
+        0x000056d0:    e5912000    . ..    LDR      r2,[r1,#0]
+        0x000056d4:    e3a00000    ....    MOV      r0,#0
+        0x000056d8:    e794310c    .1..    LDR      r3,[r4,r12,LSL #2]
+        0x000056dc:    e5832050    P ..    STR      r2,[r3,#0x50]
+        0x000056e0:    e794210c    .!..    LDR      r2,[r4,r12,LSL #2]
+        0x000056e4:    e5913004    .0..    LDR      r3,[r1,#4]
+        0x000056e8:    e5823054    T0..    STR      r3,[r2,#0x54]
+        0x000056ec:    e794210c    .!..    LDR      r2,[r4,r12,LSL #2]
+        0x000056f0:    e5913008    .0..    LDR      r3,[r1,#8]
+        0x000056f4:    e5823058    X0..    STR      r3,[r2,#0x58]
+        0x000056f8:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x000056fc:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Input_Format
+    $a
+        0x00005700:    e1a0c00d    ....    MOV      r12,r13
+        0x00005704:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005708:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000570c:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16988) = 0x5720]  = 0x425c
+        0x00005710:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00005714:    e593004c    L...    LDR      r0,[r3,#0x4c]
+        0x00005718:    e7e20250    P...    UBFX     r0,r0,#4,#3
+        0x0000571c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005720:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Input_Mode
+    $a
+        0x00005724:    e1a0c00d    ....    MOV      r12,r13
+        0x00005728:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000572c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005730:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16988) = 0x5744]  = 0x425c
+        0x00005734:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00005738:    e593004c    L...    LDR      r0,[r3,#0x4c]
+        0x0000573c:    e7e20450    P...    UBFX     r0,r0,#8,#3
+        0x00005740:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005744:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Output_Format
+    $a
+        0x00005748:    e1a0c00d    ....    MOV      r12,r13
+        0x0000574c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005750:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005754:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16988) = 0x5768]  = 0x425c
+        0x00005758:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x0000575c:    e593005c    \...    LDR      r0,[r3,#0x5c]
+        0x00005760:    e2000007    ....    AND      r0,r0,#7
+        0x00005764:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005768:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Input_Width
+    $a
+        0x0000576c:    e1a0c00d    ....    MOV      r12,r13
+        0x00005770:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005774:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005778:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x5794]  = 0x425c
+        0x0000577c:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00005780:    e5930100    ....    LDR      r0,[r3,#0x100]
+        0x00005784:    e7ec0050    P...    UBFX     r0,r0,#0,#13
+        0x00005788:    e6ff0070    p...    UXTH     r0,r0
+        0x0000578c:    e2800001    ....    ADD      r0,r0,#1
+        0x00005790:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005794:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Input_Height
+    $a
+        0x00005798:    e1a0c00d    ....    MOV      r12,r13
+        0x0000579c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000057a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000057a4:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 16988) = 0x57bc]  = 0x425c
+        0x000057a8:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x000057ac:    e5930100    ....    LDR      r0,[r3,#0x100]
+        0x000057b0:    e7ec0850    P...    UBFX     r0,r0,#16,#13
+        0x000057b4:    e2800001    ....    ADD      r0,r0,#1
+        0x000057b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000057bc:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Output_Width
+    $a
+        0x000057c0:    e1a0c00d    ....    MOV      r12,r13
+        0x000057c4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000057c8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000057cc:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 16988) = 0x57e8]  = 0x425c
+        0x000057d0:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x000057d4:    e5930104    ....    LDR      r0,[r3,#0x104]
+        0x000057d8:    e7ec0050    P...    UBFX     r0,r0,#0,#13
+        0x000057dc:    e6ff0070    p...    UXTH     r0,r0
+        0x000057e0:    e2800001    ....    ADD      r0,r0,#1
+        0x000057e4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000057e8:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Output_Height
+    $a
+        0x000057ec:    e1a0c00d    ....    MOV      r12,r13
+        0x000057f0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000057f4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000057f8:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 16988) = 0x5810]  = 0x425c
+        0x000057fc:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00005800:    e5930104    ....    LDR      r0,[r3,#0x104]
+        0x00005804:    e7ec0850    P...    UBFX     r0,r0,#16,#13
+        0x00005808:    e2800001    ....    ADD      r0,r0,#1
+        0x0000580c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005810:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Start_Status
+    $a
+        0x00005814:    e1a0c00d    ....    MOV      r12,r13
+        0x00005818:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000581c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005820:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [([Section 17] + 16988) = 0x584c]  = 0x425c
+        0x00005824:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00005828:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000582c:    e3130001    ....    TST      r3,#1
+        0x00005830:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x5844
+        0x00005834:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00005838:    e3130801    ....    TST      r3,#0x10000
+        0x0000583c:    13a00000    ....    MOVNE    r0,#0
+        0x00005840:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x00005844:    e3e00000    ....    MVN      r0,#0
+        0x00005848:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000584c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_Get_Field_Status
+    $a
+        0x00005850:    e1a0c00d    ....    MOV      r12,r13
+        0x00005854:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00005858:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000585c:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16988) = 0x5870]  = 0x425c
+        0x00005860:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00005864:    e5930068    h...    LDR      r0,[r3,#0x68]
+        0x00005868:    e7e002d0    ....    UBFX     r0,r0,#5,#1
+        0x0000586c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00005870:    0000425c    \B..    DCD    16988 ; [Section 17]
+    iDE_SCAL_Matrix_Mul
+    $a
+        0x00005874:    e1a0c00d    ....    MOV      r12,r13
+        0x00005878:    e24dd010    ..M.    SUB      r13,r13,#0x10
+        0x0000587c:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00005880:    e24cb014    ..L.    SUB      r11,r12,#0x14
+        0x00005884:    e24dd09c    ..M.    SUB      r13,r13,#0x9c
+        0x00005888:    e28bc004    ....    ADD      r12,r11,#4
+        0x0000588c:    e59b4034    4@..    LDR      r4,[r11,#0x34]
+        0x00005890:    e59b7050    Pp..    LDR      r7,[r11,#0x50]
+        0x00005894:    e88c000f    ....    STM      r12,{r0-r3}
+        0x00005898:    e59b2044    D ..    LDR      r2,[r11,#0x44]
+        0x0000589c:    e59bc024    $...    LDR      r12,[r11,#0x24]
+        0x000058a0:    e1a01000    ....    MOV      r1,r0
+        0x000058a4:    e59b3048    H0..    LDR      r3,[r11,#0x48]
+        0x000058a8:    e3a00000    ....    MOV      r0,#0
+        0x000058ac:    e0060294    ....    MUL      r6,r4,r2
+        0x000058b0:    e00c029c    ....    MUL      r12,r12,r2
+        0x000058b4:    e0090291    ....    MUL      r9,r1,r2
+        0x000058b8:    e50b603c    <`..    STR      r6,[r11,#-0x3c]
+        0x000058bc:    e59b6014    .`..    LDR      r6,[r11,#0x14]
+        0x000058c0:    e50bc05c    \...    STR      r12,[r11,#-0x5c]
+        0x000058c4:    e59bc04c    L...    LDR      r12,[r11,#0x4c]
+        0x000058c8:    e0020296    ....    MUL      r2,r6,r2
+        0x000058cc:    e59b6024    $`..    LDR      r6,[r11,#0x24]
+        0x000058d0:    e0080791    ....    MUL      r8,r1,r7
+        0x000058d4:    e00a0c91    ....    MUL      r10,r1,r12
+        0x000058d8:    e0010391    ....    MUL      r1,r1,r3
+        0x000058dc:    e50b2098    . ..    STR      r2,[r11,#-0x98]
+        0x000058e0:    e0020c94    ....    MUL      r2,r4,r12
+        0x000058e4:    e0050c96    ....    MUL      r5,r6,r12
+        0x000058e8:    e59bc024    $...    LDR      r12,[r11,#0x24]
+        0x000058ec:    e50b10a4    ....    STR      r1,[r11,#-0xa4]
+        0x000058f0:    e0010794    ....    MUL      r1,r4,r7
+        0x000058f4:    e50b20bc    . ..    STR      r2,[r11,#-0xbc]
+        0x000058f8:    e0040394    ....    MUL      r4,r4,r3
+        0x000058fc:    e59b2014    . ..    LDR      r2,[r11,#0x14]
+        0x00005900:    e00c039c    ....    MUL      r12,r12,r3
+        0x00005904:    e59b603c    <`..    LDR      r6,[r11,#0x3c]
+        0x00005908:    e0030392    ....    MUL      r3,r2,r3
+        0x0000590c:    e50b10b8    ....    STR      r1,[r11,#-0xb8]
+        0x00005910:    e50b4030    0@..    STR      r4,[r11,#-0x30]
+        0x00005914:    e59b4024    $@..    LDR      r4,[r11,#0x24]
+        0x00005918:    e50bc050    P...    STR      r12,[r11,#-0x50]
+        0x0000591c:    e59bc054    T...    LDR      r12,[r11,#0x54]
+        0x00005920:    e0040794    ....    MUL      r4,r4,r7
+        0x00005924:    e59b1064    d...    LDR      r1,[r11,#0x64]
+        0x00005928:    e0070792    ....    MUL      r7,r2,r7
+        0x0000592c:    e50b3088    .0..    STR      r3,[r11,#-0x88]
+        0x00005930:    e59b3084    .0..    LDR      r3,[r11,#0x84]
+        0x00005934:    e50b40c0    .@..    STR      r4,[r11,#-0xc0]
+        0x00005938:    e59b404c    L@..    LDR      r4,[r11,#0x4c]
+        0x0000593c:    e50b7070    pp..    STR      r7,[r11,#-0x70]
+        0x00005940:    e59b7070    pp..    LDR      r7,[r11,#0x70]
+        0x00005944:    e0040492    ....    MUL      r4,r2,r4
+        0x00005948:    e59b2008    . ..    LDR      r2,[r11,#8]
+        0x0000594c:    e0299c92    ..).    MLA      r9,r2,r12,r9
+        0x00005950:    e51b203c    < ..    LDR      r2,[r11,#-0x3c]
+        0x00005954:    e50b407c    |@..    STR      r4,[r11,#-0x7c]
+        0x00005958:    e59b4038    8@..    LDR      r4,[r11,#0x38]
+        0x0000595c:    e0242c94    .,$.    MLA      r4,r4,r12,r2
+        0x00005960:    e50b4040    @@..    STR      r4,[r11,#-0x40]
+        0x00005964:    e51b205c    \ ..    LDR      r2,[r11,#-0x5c]
+        0x00005968:    e59b4028    (@..    LDR      r4,[r11,#0x28]
+        0x0000596c:    e0242c94    .,$.    MLA      r4,r4,r12,r2
+        0x00005970:    e51b2098    . ..    LDR      r2,[r11,#-0x98]
+        0x00005974:    e50b4060    `@..    STR      r4,[r11,#-0x60]
+        0x00005978:    e59b4018    .@..    LDR      r4,[r11,#0x18]
+        0x0000597c:    e0242c94    .,$.    MLA      r4,r4,r12,r2
+        0x00005980:    e59bc008    ....    LDR      r12,[r11,#8]
+        0x00005984:    e59b205c    \ ..    LDR      r2,[r11,#0x5c]
+        0x00005988:    e02aa29c    ..*.    MLA      r10,r12,r2,r10
+        0x0000598c:    e50b409c    .@..    STR      r4,[r11,#-0x9c]
+        0x00005990:    e59b4060    `@..    LDR      r4,[r11,#0x60]
+        0x00005994:    e51b20a4    . ..    LDR      r2,[r11,#-0xa4]
+        0x00005998:    e028849c    ..(.    MLA      r8,r12,r4,r8
+        0x0000599c:    e59b4058    X@..    LDR      r4,[r11,#0x58]
+        0x000059a0:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x000059a4:    e59bc038    8...    LDR      r12,[r11,#0x38]
+        0x000059a8:    e51b20b8    . ..    LDR      r2,[r11,#-0xb8]
+        0x000059ac:    e50b40a8    .@..    STR      r4,[r11,#-0xa8]
+        0x000059b0:    e59b4060    `@..    LDR      r4,[r11,#0x60]
+        0x000059b4:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x000059b8:    e51b20bc    . ..    LDR      r2,[r11,#-0xbc]
+        0x000059bc:    e50b40b8    .@..    STR      r4,[r11,#-0xb8]
+        0x000059c0:    e59b405c    \@..    LDR      r4,[r11,#0x5c]
+        0x000059c4:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x000059c8:    e51b2030    0 ..    LDR      r2,[r11,#-0x30]
+        0x000059cc:    e50b40bc    .@..    STR      r4,[r11,#-0xbc]
+        0x000059d0:    e59b4058    X@..    LDR      r4,[r11,#0x58]
+        0x000059d4:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x000059d8:    e59bc028    (...    LDR      r12,[r11,#0x28]
+        0x000059dc:    e51b20c0    . ..    LDR      r2,[r11,#-0xc0]
+        0x000059e0:    e50b4034    4@..    STR      r4,[r11,#-0x34]
+        0x000059e4:    e59b4060    `@..    LDR      r4,[r11,#0x60]
+        0x000059e8:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x000059ec:    e59b2058    X ..    LDR      r2,[r11,#0x58]
+        0x000059f0:    e50b40c0    .@..    STR      r4,[r11,#-0xc0]
+        0x000059f4:    e59b405c    \@..    LDR      r4,[r11,#0x5c]
+        0x000059f8:    e025549c    .T%.    MLA      r5,r12,r4,r5
+        0x000059fc:    e51b4050    P@..    LDR      r4,[r11,#-0x50]
+        0x00005a00:    e02c429c    .B,.    MLA      r12,r12,r2,r4
+        0x00005a04:    e59b2018    . ..    LDR      r2,[r11,#0x18]
+        0x00005a08:    e51b4070    p@..    LDR      r4,[r11,#-0x70]
+        0x00005a0c:    e50bc054    T...    STR      r12,[r11,#-0x54]
+        0x00005a10:    e59bc060    `...    LDR      r12,[r11,#0x60]
+        0x00005a14:    e02c4c92    .L,.    MLA      r12,r2,r12,r4
+        0x00005a18:    e50bc074    t...    STR      r12,[r11,#-0x74]
+        0x00005a1c:    e51b407c    |@..    LDR      r4,[r11,#-0x7c]
+        0x00005a20:    e59bc05c    \...    LDR      r12,[r11,#0x5c]
+        0x00005a24:    e02c4c92    .L,.    MLA      r12,r2,r12,r4
+        0x00005a28:    e51b4088    .@..    LDR      r4,[r11,#-0x88]
+        0x00005a2c:    e50bc080    ....    STR      r12,[r11,#-0x80]
+        0x00005a30:    e59bc058    X...    LDR      r12,[r11,#0x58]
+        0x00005a34:    e02c4c92    .L,.    MLA      r12,r2,r12,r4
+        0x00005a38:    e59b2010    . ..    LDR      r2,[r11,#0x10]
+        0x00005a3c:    e59b4040    @@..    LDR      r4,[r11,#0x40]
+        0x00005a40:    e50bc08c    ....    STR      r12,[r11,#-0x8c]
+        0x00005a44:    e59bc074    t...    LDR      r12,[r11,#0x74]
+        0x00005a48:    e0299c92    ..).    MLA      r9,r2,r12,r9
+        0x00005a4c:    e51b2040    @ ..    LDR      r2,[r11,#-0x40]
+        0x00005a50:    e0242c94    .,$.    MLA      r4,r4,r12,r2
+        0x00005a54:    e51b2060    ` ..    LDR      r2,[r11,#-0x60]
+        0x00005a58:    e50b4044    D@..    STR      r4,[r11,#-0x44]
+        0x00005a5c:    e59b4030    0@..    LDR      r4,[r11,#0x30]
+        0x00005a60:    e0242c94    .,$.    MLA      r4,r4,r12,r2
+        0x00005a64:    e51b209c    . ..    LDR      r2,[r11,#-0x9c]
+        0x00005a68:    e50b4064    d@..    STR      r4,[r11,#-0x64]
+        0x00005a6c:    e59b4020     @..    LDR      r4,[r11,#0x20]
+        0x00005a70:    e0242c94    .,$.    MLA      r4,r4,r12,r2
+        0x00005a74:    e59bc010    ....    LDR      r12,[r11,#0x10]
+        0x00005a78:    e59b207c    | ..    LDR      r2,[r11,#0x7c]
+        0x00005a7c:    e02aa29c    ..*.    MLA      r10,r12,r2,r10
+        0x00005a80:    e50b40a0    .@..    STR      r4,[r11,#-0xa0]
+        0x00005a84:    e59b4080    .@..    LDR      r4,[r11,#0x80]
+        0x00005a88:    e51b20a8    . ..    LDR      r2,[r11,#-0xa8]
+        0x00005a8c:    e028849c    ..(.    MLA      r8,r12,r4,r8
+        0x00005a90:    e59b4078    x@..    LDR      r4,[r11,#0x78]
+        0x00005a94:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x00005a98:    e59bc040    @...    LDR      r12,[r11,#0x40]
+        0x00005a9c:    e51b20b8    . ..    LDR      r2,[r11,#-0xb8]
+        0x00005aa0:    e50b40ac    .@..    STR      r4,[r11,#-0xac]
+        0x00005aa4:    e59b4080    .@..    LDR      r4,[r11,#0x80]
+        0x00005aa8:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x00005aac:    e51b20bc    . ..    LDR      r2,[r11,#-0xbc]
+        0x00005ab0:    e50b40b8    .@..    STR      r4,[r11,#-0xb8]
+        0x00005ab4:    e59b407c    |@..    LDR      r4,[r11,#0x7c]
+        0x00005ab8:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x00005abc:    e51b2034    4 ..    LDR      r2,[r11,#-0x34]
+        0x00005ac0:    e50b40bc    .@..    STR      r4,[r11,#-0xbc]
+        0x00005ac4:    e59b4078    x@..    LDR      r4,[r11,#0x78]
+        0x00005ac8:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x00005acc:    e59bc030    0...    LDR      r12,[r11,#0x30]
+        0x00005ad0:    e51b20c0    . ..    LDR      r2,[r11,#-0xc0]
+        0x00005ad4:    e50b4038    8@..    STR      r4,[r11,#-0x38]
+        0x00005ad8:    e59b4080    .@..    LDR      r4,[r11,#0x80]
+        0x00005adc:    e024249c    .$$.    MLA      r4,r12,r4,r2
+        0x00005ae0:    e50b40c0    .@..    STR      r4,[r11,#-0xc0]
+        0x00005ae4:    e59b407c    |@..    LDR      r4,[r11,#0x7c]
+        0x00005ae8:    e59b2078    x ..    LDR      r2,[r11,#0x78]
+        0x00005aec:    e025549c    .T%.    MLA      r5,r12,r4,r5
+        0x00005af0:    e51b4054    T@..    LDR      r4,[r11,#-0x54]
+        0x00005af4:    e02c429c    .B,.    MLA      r12,r12,r2,r4
+        0x00005af8:    e59b2020      ..    LDR      r2,[r11,#0x20]
+        0x00005afc:    e51b4074    t@..    LDR      r4,[r11,#-0x74]
+        0x00005b00:    e50bc058    X...    STR      r12,[r11,#-0x58]
+        0x00005b04:    e59bc080    ....    LDR      r12,[r11,#0x80]
+        0x00005b08:    e02c4c92    .L,.    MLA      r12,r2,r12,r4
+        0x00005b0c:    e51b4080    .@..    LDR      r4,[r11,#-0x80]
+        0x00005b10:    e50bc078    x...    STR      r12,[r11,#-0x78]
+        0x00005b14:    e59bc07c    |...    LDR      r12,[r11,#0x7c]
+        0x00005b18:    e02c4c92    .L,.    MLA      r12,r2,r12,r4
+        0x00005b1c:    e51b408c    .@..    LDR      r4,[r11,#-0x8c]
+        0x00005b20:    e50bc084    ....    STR      r12,[r11,#-0x84]
+        0x00005b24:    e59bc078    x...    LDR      r12,[r11,#0x78]
+        0x00005b28:    e02c4c92    .L,.    MLA      r12,r2,r12,r4
+        0x00005b2c:    e51b2044    D ..    LDR      r2,[r11,#-0x44]
+        0x00005b30:    e59b402c    ,@..    LDR      r4,[r11,#0x2c]
+        0x00005b34:    e0222196    .!".    MLA      r2,r6,r1,r2
+        0x00005b38:    e50bc090    ....    STR      r12,[r11,#-0x90]
+        0x00005b3c:    e59bc00c    ....    LDR      r12,[r11,#0xc]
+        0x00005b40:    e029919c    ..).    MLA      r9,r12,r1,r9
+        0x00005b44:    e51bc064    d...    LDR      r12,[r11,#-0x64]
+        0x00005b48:    e50b2048    H ..    STR      r2,[r11,#-0x48]
+        0x00005b4c:    e59b201c    . ..    LDR      r2,[r11,#0x1c]
+        0x00005b50:    e024c194    ..$.    MLA      r4,r4,r1,r12
+        0x00005b54:    e59bc00c    ....    LDR      r12,[r11,#0xc]
+        0x00005b58:    e1a09549    I...    ASR      r9,r9,#10
+        0x00005b5c:    e028879c    ..(.    MLA      r8,r12,r7,r8
+        0x00005b60:    e50b4068    h@..    STR      r4,[r11,#-0x68]
+        0x00005b64:    e51b40a0    .@..    LDR      r4,[r11,#-0xa0]
+        0x00005b68:    e0214192    .A!.    MLA      r1,r2,r1,r4
+        0x00005b6c:    e59b406c    l@..    LDR      r4,[r11,#0x6c]
+        0x00005b70:    e51b2048    H ..    LDR      r2,[r11,#-0x48]
+        0x00005b74:    e1a08548    H...    ASR      r8,r8,#10
+        0x00005b78:    e02aa49c    ..*.    MLA      r10,r12,r4,r10
+        0x00005b7c:    e51bc068    h...    LDR      r12,[r11,#-0x68]
+        0x00005b80:    e59b400c    .@..    LDR      r4,[r11,#0xc]
+        0x00005b84:    e1a02542    B%..    ASR      r2,r2,#10
+        0x00005b88:    e1a01541    A...    ASR      r1,r1,#10
+        0x00005b8c:    e50b204c    L ..    STR      r2,[r11,#-0x4c]
+        0x00005b90:    e50b10c4    ....    STR      r1,[r11,#-0xc4]
+        0x00005b94:    e1a0c54c    L...    ASR      r12,r12,#10
+        0x00005b98:    e59b2068    h ..    LDR      r2,[r11,#0x68]
+        0x00005b9c:    e50bc06c    l...    STR      r12,[r11,#-0x6c]
+        0x00005ba0:    e1a0a54a    J...    ASR      r10,r10,#10
+        0x00005ba4:    e51bc0ac    ....    LDR      r12,[r11,#-0xac]
+        0x00005ba8:    e51b10b8    ....    LDR      r1,[r11,#-0xb8]
+        0x00005bac:    e022c294    ..".    MLA      r2,r4,r2,r12
+        0x00005bb0:    e0211796    ..!.    MLA      r1,r6,r7,r1
+        0x00005bb4:    e50b20b0    . ..    STR      r2,[r11,#-0xb0]
+        0x00005bb8:    e50b10b8    ....    STR      r1,[r11,#-0xb8]
+        0x00005bbc:    e51b40bc    .@..    LDR      r4,[r11,#-0xbc]
+        0x00005bc0:    e59b206c    l ..    LDR      r2,[r11,#0x6c]
+        0x00005bc4:    e51b1038    8...    LDR      r1,[r11,#-0x38]
+        0x00005bc8:    e59bc068    h...    LDR      r12,[r11,#0x68]
+        0x00005bcc:    e0224296    .B".    MLA      r2,r6,r2,r4
+        0x00005bd0:    e0261c96    ..&.    MLA      r6,r6,r12,r1
+        0x00005bd4:    e51b10c0    ....    LDR      r1,[r11,#-0xc0]
+        0x00005bd8:    e59bc02c    ,...    LDR      r12,[r11,#0x2c]
+        0x00005bdc:    e50b20bc    . ..    STR      r2,[r11,#-0xbc]
+        0x00005be0:    e51b20b0    . ..    LDR      r2,[r11,#-0xb0]
+        0x00005be4:    e024179c    ..$.    MLA      r4,r12,r7,r1
+        0x00005be8:    e59b106c    l...    LDR      r1,[r11,#0x6c]
+        0x00005bec:    e1a02542    B%..    ASR      r2,r2,#10
+        0x00005bf0:    e50b20b4    . ..    STR      r2,[r11,#-0xb4]
+        0x00005bf4:    e51b20b8    . ..    LDR      r2,[r11,#-0xb8]
+        0x00005bf8:    e1a06546    Fe..    ASR      r6,r6,#10
+        0x00005bfc:    e025519c    .Q%.    MLA      r5,r12,r1,r5
+        0x00005c00:    e1a02542    B%..    ASR      r2,r2,#10
+        0x00005c04:    e583203c    < ..    STR      r2,[r3,#0x3c]
+        0x00005c08:    e51b1058    X...    LDR      r1,[r11,#-0x58]
+        0x00005c0c:    e1a04544    DE..    ASR      r4,r4,#10
+        0x00005c10:    e59b2068    h ..    LDR      r2,[r11,#0x68]
+        0x00005c14:    e1a05545    EU..    ASR      r5,r5,#10
+        0x00005c18:    e022129c    ..".    MLA      r2,r12,r2,r1
+        0x00005c1c:    e50b20b8    . ..    STR      r2,[r11,#-0xb8]
+        0x00005c20:    e5839000    ....    STR      r9,[r3,#0]
+        0x00005c24:    e51b104c    L...    LDR      r1,[r11,#-0x4c]
+        0x00005c28:    e51bc078    x...    LDR      r12,[r11,#-0x78]
+        0x00005c2c:    e59b201c    . ..    LDR      r2,[r11,#0x1c]
+        0x00005c30:    e5831030    0...    STR      r1,[r3,#0x30]
+        0x00005c34:    e51b1084    ....    LDR      r1,[r11,#-0x84]
+        0x00005c38:    e027c792    ..'.    MLA      r7,r2,r7,r12
+        0x00005c3c:    e59bc06c    l...    LDR      r12,[r11,#0x6c]
+        0x00005c40:    e0291c92    ..).    MLA      r9,r2,r12,r1
+        0x00005c44:    e51b206c    l ..    LDR      r2,[r11,#-0x6c]
+        0x00005c48:    e59b101c    ....    LDR      r1,[r11,#0x1c]
+        0x00005c4c:    e1a07547    Gu..    ASR      r7,r7,#10
+        0x00005c50:    e59bc068    h...    LDR      r12,[r11,#0x68]
+        0x00005c54:    e5832020      ..    STR      r2,[r3,#0x20]
+        0x00005c58:    e51b2090    . ..    LDR      r2,[r11,#-0x90]
+        0x00005c5c:    e02c2c91    .,,.    MLA      r12,r1,r12,r2
+        0x00005c60:    e50bc094    ....    STR      r12,[r11,#-0x94]
+        0x00005c64:    e51bc0c4    ....    LDR      r12,[r11,#-0xc4]
+        0x00005c68:    e583800c    ....    STR      r8,[r3,#0xc]
+        0x00005c6c:    e583c010    ....    STR      r12,[r3,#0x10]
+        0x00005c70:    e51b10bc    ....    LDR      r1,[r11,#-0xbc]
+        0x00005c74:    e583a008    ....    STR      r10,[r3,#8]
+        0x00005c78:    e1a0c541    A...    ASR      r12,r1,#10
+        0x00005c7c:    e583c038    8...    STR      r12,[r3,#0x38]
+        0x00005c80:    e583402c    ,@..    STR      r4,[r3,#0x2c]
+        0x00005c84:    e1a01549    I...    ASR      r1,r9,#10
+        0x00005c88:    e5836034    4`..    STR      r6,[r3,#0x34]
+        0x00005c8c:    e51b20b8    . ..    LDR      r2,[r11,#-0xb8]
+        0x00005c90:    e5835028    (P..    STR      r5,[r3,#0x28]
+        0x00005c94:    e583701c    .p..    STR      r7,[r3,#0x1c]
+        0x00005c98:    e1a04542    BE..    ASR      r4,r2,#10
+        0x00005c9c:    e5834024    $@..    STR      r4,[r3,#0x24]
+        0x00005ca0:    e51b4094    .@..    LDR      r4,[r11,#-0x94]
+        0x00005ca4:    e5831018    ....    STR      r1,[r3,#0x18]
+        0x00005ca8:    e1a02544    D%..    ASR      r2,r4,#10
+        0x00005cac:    e5832014    . ..    STR      r2,[r3,#0x14]
+        0x00005cb0:    e51b60b4    .`..    LDR      r6,[r11,#-0xb4]
+        0x00005cb4:    e5836004    .`..    STR      r6,[r3,#4]
+        0x00005cb8:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00005cbc:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    iDE_SCAL_Csc_Lmt
+        0x00005cc0:    e1a0c00d    ....    MOV      r12,r13
+        0x00005cc4:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x00005cc8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005ccc:    e1a04001    .@..    MOV      r4,r1
+        0x00005cd0:    e5901000    ....    LDR      r1,[r0,#0]
+        0x00005cd4:    e59bc004    ....    LDR      r12,[r11,#4]
+        0x00005cd8:    e1a01351    Q...    ASR      r1,r1,r3
+        0x00005cdc:    e1510004    ..Q.    CMP      r1,r4
+        0x00005ce0:    b00c3004    .0..    ANDLT    r3,r12,r4
+        0x00005ce4:    ba000002    ....    BLT      {pc} + 0x10  ; 0x5cf4
+        0x00005ce8:    e1510002    ..Q.    CMP      r1,r2
+        0x00005cec:    c00c3002    .0..    ANDGT    r3,r12,r2
+        0x00005cf0:    d00c3001    .0..    ANDLE    r3,r12,r1
+        0x00005cf4:    e5803000    .0..    STR      r3,[r0,#0]
+        0x00005cf8:    e3a00000    ....    MOV      r0,#0
+        0x00005cfc:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    DE_SCAL_Set_CSC_Coef_Enhance
+        0x00005d00:    e1a0c00d    ....    MOV      r12,r13
+        0x00005d04:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00005d08:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00005d0c:    e24ddf51    Q.M.    SUB      r13,r13,#0x144
+        0x00005d10:    e59b400c    .@..    LDR      r4,[r11,#0xc]
+        0x00005d14:    e1a08003    ....    MOV      r8,r3
+        0x00005d18:    e59bc010    ....    LDR      r12,[r11,#0x10]
+        0x00005d1c:    e1a09000    ....    MOV      r9,r0
+        0x00005d20:    e264e000    ..d.    RSB      r14,r4,#0
+        0x00005d24:    e59b3014    .0..    LDR      r3,[r11,#0x14]
+        0x00005d28:    e59fa520     ...    LDR      r10,[pc,#1312] ; [image_enhance_tab = 0x6250] = 0
+        0x00005d2c:    e1a05484    .T..    LSL      r5,r4,#9
+        0x00005d30:    e00e0e9c    ....    MUL      r14,r12,r14
+        0x00005d34:    e203303f    ?0..    AND      r3,r3,#0x3f
+        0x00005d38:    e00c0c94    ....    MUL      r12,r4,r12
+        0x00005d3c:    e28320a0    . ..    ADD      r2,r3,#0xa0
+        0x00005d40:    e2833060    `0..    ADD      r3,r3,#0x60
+        0x00005d44:    e5db6004    .`..    LDRB     r6,[r11,#4]
+        0x00005d48:    e79a0102    ....    LDR      r0,[r10,r2,LSL #2]
+        0x00005d4c:    e1a07001    .p..    MOV      r7,r1
+        0x00005d50:    e79a2103    .!..    LDR      r2,[r10,r3,LSL #2]
+        0x00005d54:    e3a01000    ....    MOV      r1,#0
+        0x00005d58:    e59b3008    .0..    LDR      r3,[r11,#8]
+        0x00005d5c:    e1a04284    .B..    LSL      r4,r4,#5
+        0x00005d60:    e000009c    ....    MUL      r0,r12,r0
+        0x00005d64:    e2433010    .0C.    SUB      r3,r3,#0x10
+        0x00005d68:    e00e0e92    ....    MUL      r14,r2,r14
+        0x00005d6c:    e50b30f0    .0..    STR      r3,[r11,#-0xf0]
+        0x00005d70:    e00c029c    ....    MUL      r12,r12,r2
+        0x00005d74:    e1963008    .0..    ORRS     r3,r6,r8
+        0x00005d78:    e51b30f0    .0..    LDR      r3,[r11,#-0xf0]
+        0x00005d7c:    e1a003c0    ....    ASR      r0,r0,#7
+        0x00005d80:    e50b1034    4...    STR      r1,[r11,#-0x34]
+        0x00005d84:    e1a0e3ce    ....    ASR      r14,r14,#7
+        0x00005d88:    e50b1068    h...    STR      r1,[r11,#-0x68]
+        0x00005d8c:    e0655503    .Ue.    RSB      r5,r5,r3,LSL #10
+        0x00005d90:    e08e3000    .0..    ADD      r3,r14,r0
+        0x00005d94:    e1a0c3cc    ....    ASR      r12,r12,#7
+        0x00005d98:    e50b5060    `P..    STR      r5,[r11,#-0x60]
+        0x00005d9c:    e08c2000    . ..    ADD      r2,r12,r0
+        0x00005da0:    e1a03383    .3..    LSL      r3,r3,#7
+        0x00005da4:    e2633802    .8c.    RSB      r3,r3,#0x20000
+        0x00005da8:    e50b406c    l@..    STR      r4,[r11,#-0x6c]
+        0x00005dac:    e1a02382    .#..    LSL      r2,r2,#7
+        0x00005db0:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x00005db4:    e2622802    .(b.    RSB      r2,r2,#0x20000
+        0x00005db8:    e3a03b01    .;..    MOV      r3,#0x400
+        0x00005dbc:    e50b1064    d...    STR      r1,[r11,#-0x64]
+        0x00005dc0:    e50b105c    \...    STR      r1,[r11,#-0x5c]
+        0x00005dc4:    e50b0058    X...    STR      r0,[r11,#-0x58]
+        0x00005dc8:    e50b2050    P ..    STR      r2,[r11,#-0x50]
+        0x00005dcc:    e50bc054    T...    STR      r12,[r11,#-0x54]
+        0x00005dd0:    e50b3030    00..    STR      r3,[r11,#-0x30]
+        0x00005dd4:    e50b104c    L...    STR      r1,[r11,#-0x4c]
+        0x00005dd8:    e50be048    H...    STR      r14,[r11,#-0x48]
+        0x00005ddc:    e50b0044    D...    STR      r0,[r11,#-0x44]
+        0x00005de0:    e50b103c    <...    STR      r1,[r11,#-0x3c]
+        0x00005de4:    e50b1038    8...    STR      r1,[r11,#-0x38]
+        0x00005de8:    1a00003f    ?...    BNE      {pc} + 0x104  ; 0x5eec
+        0x00005dec:    e1a07387    .s..    LSL      r7,r7,#7
+        0x00005df0:    e28a3040    @0..    ADD      r3,r10,#0x40
+        0x00005df4:    e0833007    .0..    ADD      r3,r3,r7
+        0x00005df8:    e28de030    0...    ADD      r14,r13,#0x30
+        0x00005dfc:    e24b405c    \@K.    SUB      r4,r11,#0x5c
+        0x00005e00:    e24b60ac    .`K.    SUB      r6,r11,#0xac
+        0x00005e04:    e1a0c003    ....    MOV      r12,r3
+        0x00005e08:    e24b506c    lPK.    SUB      r5,r11,#0x6c
+        0x00005e0c:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00005e10:    e08a7007    .p..    ADD      r7,r10,r7
+        0x00005e14:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00005e18:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00005e1c:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00005e20:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00005e24:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00005e28:    e89c000f    ....    LDM      r12,{r0-r3}
+        0x00005e2c:    e1a0c00d    ....    MOV      r12,r13
+        0x00005e30:    e88e000f    ....    STM      r14,{r0-r3}
+        0x00005e34:    e58d6070    p`..    STR      r6,[r13,#0x70]
+        0x00005e38:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00005e3c:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005e40:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00005e44:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005e48:    e894000f    ....    LDM      r4,{r0-r3}
+        0x00005e4c:    e1a04006    .@..    MOV      r4,r6
+        0x00005e50:    e88c000f    ....    STM      r12,{r0-r3}
+        0x00005e54:    e895000f    ....    LDM      r5,{r0-r3}
+        0x00005e58:    ebfffffe    ....    BL       iDE_SCAL_Matrix_Mul  ; 0x5874 Section #1
+        0x00005e5c:    e28dc030    0...    ADD      r12,r13,#0x30
+        0x00005e60:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00005e64:    e2875010    .P..    ADD      r5,r7,#0x10
+        0x00005e68:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005e6c:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00005e70:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005e74:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00005e78:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005e7c:    e894000f    ....    LDM      r4,{r0-r3}
+        0x00005e80:    e88c000f    ....    STM      r12,{r0-r3}
+        0x00005e84:    e58d6070    p`..    STR      r6,[r13,#0x70]
+        0x00005e88:    e8b5000f    ....    LDM      r5!,{r0-r3}
+        0x00005e8c:    e1a0c00d    ....    MOV      r12,r13
+        0x00005e90:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005e94:    e8b5000f    ....    LDM      r5!,{r0-r3}
+        0x00005e98:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005e9c:    e895000f    ....    LDM      r5,{r0-r3}
+        0x00005ea0:    e88c000f    ....    STM      r12,{r0-r3}
+        0x00005ea4:    e897000f    ....    LDM      r7,{r0-r3}
+        0x00005ea8:    ebfffffe    ....    BL       iDE_SCAL_Matrix_Mul  ; 0x5874 Section #1
+        0x00005eac:    e51b3098    .0..    LDR      r3,[r11,#-0x98]
+        0x00005eb0:    e50b30ec    .0..    STR      r3,[r11,#-0xec]
+        0x00005eb4:    e51b309c    .0..    LDR      r3,[r11,#-0x9c]
+        0x00005eb8:    e50b30e8    .0..    STR      r3,[r11,#-0xe8]
+        0x00005ebc:    e51b3094    .0..    LDR      r3,[r11,#-0x94]
+        0x00005ec0:    e50b30e4    .0..    STR      r3,[r11,#-0xe4]
+        0x00005ec4:    e51b3090    .0..    LDR      r3,[r11,#-0x90]
+        0x00005ec8:    e50b30e0    .0..    STR      r3,[r11,#-0xe0]
+        0x00005ecc:    e51b30a8    .0..    LDR      r3,[r11,#-0xa8]
+        0x00005ed0:    e50b30dc    .0..    STR      r3,[r11,#-0xdc]
+        0x00005ed4:    e51b30ac    .0..    LDR      r3,[r11,#-0xac]
+        0x00005ed8:    e50b30d8    .0..    STR      r3,[r11,#-0xd8]
+        0x00005edc:    e51b30a4    .0..    LDR      r3,[r11,#-0xa4]
+        0x00005ee0:    e50b30d4    .0..    STR      r3,[r11,#-0xd4]
+        0x00005ee4:    e51b30a0    .0..    LDR      r3,[r11,#-0xa0]
+        0x00005ee8:    ea000065    e...    B        {pc} + 0x19c  ; 0x6084
+        0x00005eec:    e3580001    ..X.    CMP      r8,#1
+        0x00005ef0:    03560000    ..V.    CMPEQ    r6,#0
+        0x00005ef4:    1a000038    8...    BNE      {pc} + 0xe8  ; 0x5fdc
+        0x00005ef8:    e24bc06c    l.K.    SUB      r12,r11,#0x6c
+        0x00005efc:    e28de030    0...    ADD      r14,r13,#0x30
+        0x00005f00:    e28a5040    @P..    ADD      r5,r10,#0x40
+        0x00005f04:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00005f08:    e0855387    .S..    ADD      r5,r5,r7,LSL #7
+        0x00005f0c:    e2854010    .@..    ADD      r4,r5,#0x10
+        0x00005f10:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00005f14:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00005f18:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00005f1c:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00005f20:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00005f24:    e89c000f    ....    LDM      r12,{r0-r3}
+        0x00005f28:    e1a0c00d    ....    MOV      r12,r13
+        0x00005f2c:    e88e000f    ....    STM      r14,{r0-r3}
+        0x00005f30:    e24b30ac    .0K.    SUB      r3,r11,#0xac
+        0x00005f34:    e58d3070    p0..    STR      r3,[r13,#0x70]
+        0x00005f38:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00005f3c:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005f40:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00005f44:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00005f48:    e894000f    ....    LDM      r4,{r0-r3}
+        0x00005f4c:    e88c000f    ....    STM      r12,{r0-r3}
+        0x00005f50:    e895000f    ....    LDM      r5,{r0-r3}
+        0x00005f54:    ebfffffe    ....    BL       iDE_SCAL_Matrix_Mul  ; 0x5874 Section #1
+        0x00005f58:    e51b309c    .0..    LDR      r3,[r11,#-0x9c]
+        0x00005f5c:    e50b30ec    .0..    STR      r3,[r11,#-0xec]
+        0x00005f60:    e51b3098    .0..    LDR      r3,[r11,#-0x98]
+        0x00005f64:    e50b30e8    .0..    STR      r3,[r11,#-0xe8]
+        0x00005f68:    e51b3094    .0..    LDR      r3,[r11,#-0x94]
+        0x00005f6c:    e50b30e4    .0..    STR      r3,[r11,#-0xe4]
+        0x00005f70:    e51b3090    .0..    LDR      r3,[r11,#-0x90]
+        0x00005f74:    e50b30e0    .0..    STR      r3,[r11,#-0xe0]
+        0x00005f78:    e51b30ac    .0..    LDR      r3,[r11,#-0xac]
+        0x00005f7c:    e50b30dc    .0..    STR      r3,[r11,#-0xdc]
+        0x00005f80:    e51b30a8    .0..    LDR      r3,[r11,#-0xa8]
+        0x00005f84:    e50b30d8    .0..    STR      r3,[r11,#-0xd8]
+        0x00005f88:    e51b30a4    .0..    LDR      r3,[r11,#-0xa4]
+        0x00005f8c:    e50b30d4    .0..    STR      r3,[r11,#-0xd4]
+        0x00005f90:    e51b30a0    .0..    LDR      r3,[r11,#-0xa0]
+        0x00005f94:    e50b30d0    .0..    STR      r3,[r11,#-0xd0]
+        0x00005f98:    e51b308c    .0..    LDR      r3,[r11,#-0x8c]
+        0x00005f9c:    e50b30cc    .0..    STR      r3,[r11,#-0xcc]
+        0x00005fa0:    e51b3088    .0..    LDR      r3,[r11,#-0x88]
+        0x00005fa4:    e50b30c8    .0..    STR      r3,[r11,#-0xc8]
+        0x00005fa8:    e51b3084    .0..    LDR      r3,[r11,#-0x84]
+        0x00005fac:    e50b30c4    .0..    STR      r3,[r11,#-0xc4]
+        0x00005fb0:    e51b3080    .0..    LDR      r3,[r11,#-0x80]
+        0x00005fb4:    e50b30c0    .0..    STR      r3,[r11,#-0xc0]
+        0x00005fb8:    e51b307c    |0..    LDR      r3,[r11,#-0x7c]
+        0x00005fbc:    e50b30bc    .0..    STR      r3,[r11,#-0xbc]
+        0x00005fc0:    e51b3078    x0..    LDR      r3,[r11,#-0x78]
+        0x00005fc4:    e50b30b8    .0..    STR      r3,[r11,#-0xb8]
+        0x00005fc8:    e51b3074    t0..    LDR      r3,[r11,#-0x74]
+        0x00005fcc:    e50b30b4    .0..    STR      r3,[r11,#-0xb4]
+        0x00005fd0:    e51b3070    p0..    LDR      r3,[r11,#-0x70]
+        0x00005fd4:    e50b30b0    .0..    STR      r3,[r11,#-0xb0]
+        0x00005fd8:    ea000040    @...    B        {pc} + 0x108  ; 0x60e0
+        0x00005fdc:    e3580000    ..X.    CMP      r8,#0
+        0x00005fe0:    03560001    ..V.    CMPEQ    r6,#1
+        0x00005fe4:    e24b506c    lPK.    SUB      r5,r11,#0x6c
+        0x00005fe8:    1a000032    2...    BNE      {pc} + 0xd0  ; 0x60b8
+        0x00005fec:    e08a3387    .3..    ADD      r3,r10,r7,LSL #7
+        0x00005ff0:    e28de030    0...    ADD      r14,r13,#0x30
+        0x00005ff4:    e24b405c    \@K.    SUB      r4,r11,#0x5c
+        0x00005ff8:    e1a0c003    ....    MOV      r12,r3
+        0x00005ffc:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00006000:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00006004:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00006008:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x0000600c:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00006010:    e8ae000f    ....    STM      r14!,{r0-r3}
+        0x00006014:    e89c000f    ....    LDM      r12,{r0-r3}
+        0x00006018:    e1a0c00d    ....    MOV      r12,r13
+        0x0000601c:    e88e000f    ....    STM      r14,{r0-r3}
+        0x00006020:    e24b30ac    .0K.    SUB      r3,r11,#0xac
+        0x00006024:    e58d3070    p0..    STR      r3,[r13,#0x70]
+        0x00006028:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x0000602c:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00006030:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x00006034:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x00006038:    e894000f    ....    LDM      r4,{r0-r3}
+        0x0000603c:    e88c000f    ....    STM      r12,{r0-r3}
+        0x00006040:    e895000f    ....    LDM      r5,{r0-r3}
+        0x00006044:    ebfffffe    ....    BL       iDE_SCAL_Matrix_Mul  ; 0x5874 Section #1
+        0x00006048:    e51b30a8    .0..    LDR      r3,[r11,#-0xa8]
+        0x0000604c:    e50b30ec    .0..    STR      r3,[r11,#-0xec]
+        0x00006050:    e51b30ac    .0..    LDR      r3,[r11,#-0xac]
+        0x00006054:    e50b30e8    .0..    STR      r3,[r11,#-0xe8]
+        0x00006058:    e51b30a4    .0..    LDR      r3,[r11,#-0xa4]
+        0x0000605c:    e50b30e4    .0..    STR      r3,[r11,#-0xe4]
+        0x00006060:    e51b30a0    .0..    LDR      r3,[r11,#-0xa0]
+        0x00006064:    e50b30e0    .0..    STR      r3,[r11,#-0xe0]
+        0x00006068:    e51b3098    .0..    LDR      r3,[r11,#-0x98]
+        0x0000606c:    e50b30dc    .0..    STR      r3,[r11,#-0xdc]
+        0x00006070:    e51b309c    .0..    LDR      r3,[r11,#-0x9c]
+        0x00006074:    e50b30d8    .0..    STR      r3,[r11,#-0xd8]
+        0x00006078:    e51b3094    .0..    LDR      r3,[r11,#-0x94]
+        0x0000607c:    e50b30d4    .0..    STR      r3,[r11,#-0xd4]
+        0x00006080:    e51b3090    .0..    LDR      r3,[r11,#-0x90]
+        0x00006084:    e50b30d0    .0..    STR      r3,[r11,#-0xd0]
+        0x00006088:    e51b3088    .0..    LDR      r3,[r11,#-0x88]
+        0x0000608c:    e50b30cc    .0..    STR      r3,[r11,#-0xcc]
+        0x00006090:    e51b308c    .0..    LDR      r3,[r11,#-0x8c]
+        0x00006094:    e50b30c8    .0..    STR      r3,[r11,#-0xc8]
+        0x00006098:    e51b3084    .0..    LDR      r3,[r11,#-0x84]
+        0x0000609c:    e50b30c4    .0..    STR      r3,[r11,#-0xc4]
+        0x000060a0:    e51b3080    .0..    LDR      r3,[r11,#-0x80]
+        0x000060a4:    e50b30c0    .0..    STR      r3,[r11,#-0xc0]
+        0x000060a8:    e51b3078    x0..    LDR      r3,[r11,#-0x78]
+        0x000060ac:    e50b30bc    .0..    STR      r3,[r11,#-0xbc]
+        0x000060b0:    e51b307c    |0..    LDR      r3,[r11,#-0x7c]
+        0x000060b4:    eaffffc2    ....    B        {pc} - 0xf0  ; 0x5fc4
+        0x000060b8:    e1a0e005    ....    MOV      r14,r5
+        0x000060bc:    e24bc0ec    ..K.    SUB      r12,r11,#0xec
+        0x000060c0:    e8be000f    ....    LDM      r14!,{r0-r3}
+        0x000060c4:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x000060c8:    e8be000f    ....    LDM      r14!,{r0-r3}
+        0x000060cc:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x000060d0:    e8be000f    ....    LDM      r14!,{r0-r3}
+        0x000060d4:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x000060d8:    e89e000f    ....    LDM      r14,{r0-r3}
+        0x000060dc:    e88c000f    ....    STM      r12,{r0-r3}
+        0x000060e0:    e24b40ec    .@K.    SUB      r4,r11,#0xec
+        0x000060e4:    e59f1168    h...    LDR      r1,[pc,#360]  ; [0x6254] = 0xfffff001
+        0x000060e8:    e3002fff    ./..    MOV      r2,#0xfff
+        0x000060ec:    e3a03000    .0..    MOV      r3,#0
+        0x000060f0:    e1a00004    ....    MOV      r0,r4
+        0x000060f4:    e3015fff    ._..    MOV      r5,#0x1fff
+        0x000060f8:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x000060fc:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x00006100:    e59f114c    L...    LDR      r1,[pc,#332]  ; [0x6254] = 0xfffff001
+        0x00006104:    e3002fff    ./..    MOV      r2,#0xfff
+        0x00006108:    e3a03000    .0..    MOV      r3,#0
+        0x0000610c:    e2840004    ....    ADD      r0,r4,#4
+        0x00006110:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x00006114:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x00006118:    e59f1134    4...    LDR      r1,[pc,#308]  ; [0x6254] = 0xfffff001
+        0x0000611c:    e3002fff    ./..    MOV      r2,#0xfff
+        0x00006120:    e3a03000    .0..    MOV      r3,#0
+        0x00006124:    e2840008    ....    ADD      r0,r4,#8
+        0x00006128:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x0000612c:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x00006130:    e59f1120     ...    LDR      r1,[pc,#288]  ; [0x6258] = 0xffffe001
+        0x00006134:    e1a02005    . ..    MOV      r2,r5
+        0x00006138:    e3a03006    .0..    MOV      r3,#6
+        0x0000613c:    e284000c    ....    ADD      r0,r4,#0xc
+        0x00006140:    e3036fff    .o..    MOV      r6,#0x3fff
+        0x00006144:    e58d6000    .`..    STR      r6,[r13,#0]
+        0x00006148:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x0000614c:    e59f1100    ....    LDR      r1,[pc,#256]  ; [0x6254] = 0xfffff001
+        0x00006150:    e3002fff    ./..    MOV      r2,#0xfff
+        0x00006154:    e3a03000    .0..    MOV      r3,#0
+        0x00006158:    e2840010    ....    ADD      r0,r4,#0x10
+        0x0000615c:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x00006160:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x00006164:    e59f10e8    ....    LDR      r1,[pc,#232]  ; [0x6254] = 0xfffff001
+        0x00006168:    e3002fff    ./..    MOV      r2,#0xfff
+        0x0000616c:    e3a03000    .0..    MOV      r3,#0
+        0x00006170:    e2840014    ....    ADD      r0,r4,#0x14
+        0x00006174:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x00006178:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x0000617c:    e59f10d0    ....    LDR      r1,[pc,#208]  ; [0x6254] = 0xfffff001
+        0x00006180:    e3002fff    ./..    MOV      r2,#0xfff
+        0x00006184:    e3a03000    .0..    MOV      r3,#0
+        0x00006188:    e2840018    ....    ADD      r0,r4,#0x18
+        0x0000618c:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x00006190:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x00006194:    e59f10bc    ....    LDR      r1,[pc,#188]  ; [0x6258] = 0xffffe001
+        0x00006198:    e1a02005    . ..    MOV      r2,r5
+        0x0000619c:    e3a03006    .0..    MOV      r3,#6
+        0x000061a0:    e284001c    ....    ADD      r0,r4,#0x1c
+        0x000061a4:    e58d6000    .`..    STR      r6,[r13,#0]
+        0x000061a8:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x000061ac:    e59f10a0    ....    LDR      r1,[pc,#160]  ; [0x6254] = 0xfffff001
+        0x000061b0:    e3002fff    ./..    MOV      r2,#0xfff
+        0x000061b4:    e3a03000    .0..    MOV      r3,#0
+        0x000061b8:    e2840020     ...    ADD      r0,r4,#0x20
+        0x000061bc:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x000061c0:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x000061c4:    e59f1088    ....    LDR      r1,[pc,#136]  ; [0x6254] = 0xfffff001
+        0x000061c8:    e3002fff    ./..    MOV      r2,#0xfff
+        0x000061cc:    e3a03000    .0..    MOV      r3,#0
+        0x000061d0:    e2840024    $...    ADD      r0,r4,#0x24
+        0x000061d4:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x000061d8:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x000061dc:    e59f1070    p...    LDR      r1,[pc,#112]  ; [0x6254] = 0xfffff001
+        0x000061e0:    e3002fff    ./..    MOV      r2,#0xfff
+        0x000061e4:    e3a03000    .0..    MOV      r3,#0
+        0x000061e8:    e2840028    (...    ADD      r0,r4,#0x28
+        0x000061ec:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x000061f0:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x000061f4:    e284002c    ,...    ADD      r0,r4,#0x2c
+        0x000061f8:    e1a02005    . ..    MOV      r2,r5
+        0x000061fc:    e59f1054    T...    LDR      r1,[pc,#84]   ; [0x6258] = 0xffffe001
+        0x00006200:    e3a03006    .0..    MOV      r3,#6
+        0x00006204:    e58d6000    .`..    STR      r6,[r13,#0]
+        0x00006208:    ebfffffe    ....    BL       iDE_SCAL_Csc_Lmt  ; 0x5cc0 Section #1
+        0x0000620c:    e3a00000    ....    MOV      r0,#0
+        0x00006210:    e59fc044    D...    LDR      r12,[pc,#68]   ; [([Section 17] + 16988) = 0x625c]  = 0x425c
+        0x00006214:    e24b30ec    .0K.    SUB      r3,r11,#0xec
+        0x00006218:    e280101c    ....    ADD      r1,r0,#0x1c
+        0x0000621c:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00006220:    e2800001    ....    ADD      r0,r0,#1
+        0x00006224:    e79c3109    .1..    LDR      r3,[r12,r9,LSL #2]
+        0x00006228:    e350000c    ..P.    CMP      r0,#0xc
+        0x0000622c:    e7832101    .!..    STR      r2,[r3,r1,LSL #2]
+        0x00006230:    1afffff6    ....    BNE      {pc} - 0x20  ; 0x6210
+        0x00006234:    e79c2109    .!..    LDR      r2,[r12,r9,LSL #2]
+        0x00006238:    e3a00000    ....    MOV      r0,#0
+        0x0000623c:    e5923008    .0..    LDR      r3,[r2,#8]
+        0x00006240:    e7c1309f    .0..    BFC      r3,#1,#1
+        0x00006244:    e5823008    .0..    STR      r3,[r2,#8]
+        0x00006248:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000624c:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00006250:    00000000    ....    DCD    0 ; image_enhance_tab
+        0x00006254:    fffff001    ....    DCD    4294963201
+        0x00006258:    ffffe001    ....    DCD    4294959105
+        0x0000625c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_EnableINT
+    $a
+        0x00006260:    e1a0c00d    ....    MOV      r12,r13
+        0x00006264:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006268:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000626c:    e3110080    ....    TST      r1,#0x80
+        0x00006270:    159f3014    .0..    LDRNE    r3,[pc,#20]   ; [([Section 17] + 16988) = 0x628c]  = 0x425c
+        0x00006274:    17932100    .!..    LDRNE    r2,[r3,r0,LSL #2]
+        0x00006278:    e3a00000    ....    MOV      r0,#0
+        0x0000627c:    15923060    `0..    LDRNE    r3,[r2,#0x60]
+        0x00006280:    13833080    .0..    ORRNE    r3,r3,#0x80
+        0x00006284:    15823060    `0..    STRNE    r3,[r2,#0x60]
+        0x00006288:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000628c:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_DisableINT
+    $a
+        0x00006290:    e1a0c00d    ....    MOV      r12,r13
+        0x00006294:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006298:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000629c:    e3110080    ....    TST      r1,#0x80
+        0x000062a0:    159f3014    .0..    LDRNE    r3,[pc,#20]   ; [([Section 17] + 16988) = 0x62bc]  = 0x425c
+        0x000062a4:    17932100    .!..    LDRNE    r2,[r3,r0,LSL #2]
+        0x000062a8:    e3a00000    ....    MOV      r0,#0
+        0x000062ac:    15923060    `0..    LDRNE    r3,[r2,#0x60]
+        0x000062b0:    17c7339f    .3..    BFCNE    r3,#7,#1
+        0x000062b4:    15823060    `0..    STRNE    r3,[r2,#0x60]
+        0x000062b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000062bc:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_QueryINT
+    $a
+        0x000062c0:    e1a0c00d    ....    MOV      r12,r13
+        0x000062c4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000062c8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000062cc:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [([Section 17] + 16988) = 0x62e0]  = 0x425c
+        0x000062d0:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x000062d4:    e5930064    d...    LDR      r0,[r3,#0x64]
+        0x000062d8:    e2000080    ....    AND      r0,r0,#0x80
+        0x000062dc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000062e0:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_SCAL_ClearINT
+    $a
+        0x000062e4:    e1a0c00d    ....    MOV      r12,r13
+        0x000062e8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000062ec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000062f0:    e3110080    ....    TST      r1,#0x80
+        0x000062f4:    159f3014    .0..    LDRNE    r3,[pc,#20]   ; [([Section 17] + 16988) = 0x6310]  = 0x425c
+        0x000062f8:    17932100    .!..    LDRNE    r2,[r3,r0,LSL #2]
+        0x000062fc:    e3a00000    ....    MOV      r0,#0
+        0x00006300:    15923064    d0..    LDRNE    r3,[r2,#0x64]
+        0x00006304:    13833080    .0..    ORRNE    r3,r3,#0x80
+        0x00006308:    15823064    d0..    STRNE    r3,[r2,#0x64]
+        0x0000630c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006310:    0000425c    \B..    DCD    16988 ; [Section 17]
+    DE_BE_HWC_Enable
+    $a
+        0x00006314:    e1a0c00d    ....    MOV      r12,r13
+        0x00006318:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000631c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006320:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [image_reg_base = 0x6340] = 0
+        0x00006324:    e7932100    .!..    LDR      r2,[r3,r0,LSL #2]
+        0x00006328:    e3a00000    ....    MOV      r0,#0
+        0x0000632c:    e5923800    .8..    LDR      r3,[r2,#0x800]
+        0x00006330:    e3c33801    .8..    BIC      r3,r3,#0x10000
+        0x00006334:    e1833801    .8..    ORR      r3,r3,r1,LSL #16
+        0x00006338:    e5823800    .8..    STR      r3,[r2,#0x800]
+        0x0000633c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006340:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_HWC_Set_Pos
+    $a
+        0x00006344:    e1a0c00d    ....    MOV      r12,r13
+        0x00006348:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000634c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006350:    e59f2030    0 ..    LDR      r2,[pc,#48]   ; [image_reg_base = 0x6388] = 0
+        0x00006354:    e30037ff    .7..    MOV      r3,#0x7ff
+        0x00006358:    e8911010    ....    LDM      r1,{r4,r12}
+        0x0000635c:    e7925100    .Q..    LDR      r5,[r2,r0,LSL #2]
+        0x00006360:    e003c00c    ....    AND      r12,r3,r12
+        0x00006364:    e59f1020     ...    LDR      r1,[pc,#32]   ; [0x638c] = 0xf800f800
+        0x00006368:    e0033004    .0..    AND      r3,r3,r4
+        0x0000636c:    e183380c    .8..    ORR      r3,r3,r12,LSL #16
+        0x00006370:    e3a00000    ....    MOV      r0,#0
+        0x00006374:    e59528d8    .(..    LDR      r2,[r5,#0x8d8]
+        0x00006378:    e0021001    ....    AND      r1,r2,r1
+        0x0000637c:    e1833001    .0..    ORR      r3,r3,r1
+        0x00006380:    e58538d8    .8..    STR      r3,[r5,#0x8d8]
+        0x00006384:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00006388:    00000000    ....    DCD    0 ; image_reg_base
+        0x0000638c:    f800f800    ....    DCD    4160813056
+    DE_BE_HWC_Get_Pos
+    $a
+        0x00006390:    e1a0c00d    ....    MOV      r12,r13
+        0x00006394:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006398:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000639c:    e59f3020     0..    LDR      r3,[pc,#32]   ; [image_reg_base = 0x63c4] = 0
+        0x000063a0:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x000063a4:    e3a00000    ....    MOV      r0,#0
+        0x000063a8:    e59338d8    .8..    LDR      r3,[r3,#0x8d8]
+        0x000063ac:    e7ea2853    S(..    UBFX     r2,r3,#16,#11
+        0x000063b0:    e5812004    . ..    STR      r2,[r1,#4]
+        0x000063b4:    e1a03a83    .:..    LSL      r3,r3,#21
+        0x000063b8:    e1a03aa3    .:..    LSR      r3,r3,#21
+        0x000063bc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000063c0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000063c4:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_HWC_Set_Palette
+    $a
+        0x000063c8:    e1a0c00d    ....    MOV      r12,r13
+        0x000063cc:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x000063d0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000063d4:    e3a0c000    ....    MOV      r12,#0
+        0x000063d8:    e1a05001    .P..    MOV      r5,r1
+        0x000063dc:    e1a06000    .`..    MOV      r6,r0
+        0x000063e0:    e1a04003    .@..    MOV      r4,r3
+        0x000063e4:    e2821b12    ....    ADD      r1,r2,#0x4800
+        0x000063e8:    ea000005    ....    B        {pc} + 0x1c  ; 0x6404
+        0x000063ec:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [image_reg_base = 0x6418] = 0
+        0x000063f0:    e7932106    .!..    LDR      r2,[r3,r6,LSL #2]
+        0x000063f4:    e79c3005    .0..    LDR      r3,[r12,r5]
+        0x000063f8:    e6ffc070    p...    UXTH     r12,r0
+        0x000063fc:    e7813002    .0..    STR      r3,[r1,r2]
+        0x00006400:    e2811004    ....    ADD      r1,r1,#4
+        0x00006404:    e15c0004    ..\.    CMP      r12,r4
+        0x00006408:    e28c0004    ....    ADD      r0,r12,#4
+        0x0000640c:    3afffff6    ...:    BCC      {pc} - 0x20  ; 0x63ec
+        0x00006410:    e3a00000    ....    MOV      r0,#0
+        0x00006414:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x00006418:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_HWC_Set_Src
+    $a
+        0x0000641c:    e1a0c00d    ....    MOV      r12,r13
+        0x00006420:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00006424:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006428:    e5d13000    .0..    LDRB     r3,[r1,#0]
+        0x0000642c:    e1a08001    ....    MOV      r8,r1
+        0x00006430:    e1a0a000    ....    MOV      r10,r0
+        0x00006434:    e3530003    ..S.    CMP      r3,#3
+        0x00006438:    979ff103    ....    LDRLS    pc,[pc,r3,LSL #2]
+        0x0000643c:    ea000007    ....    B        {pc} + 0x24  ; 0x6460
+    $d
+        0x00006440:    00006450    Pd..    DCD    25680 ; [Section 1]
+        0x00006444:    00006468    hd..    DCD    25704 ; [Section 1]
+        0x00006448:    00006478    xd..    DCD    25720 ; [Section 1]
+        0x0000644c:    00006484    .d..    DCD    25732 ; [Section 1]
+    $a
+        0x00006450:    e3a05000    .P..    MOV      r5,#0
+        0x00006454:    e3a07003    .p..    MOV      r7,#3
+        0x00006458:    e1a06005    .`..    MOV      r6,r5
+        0x0000645c:    ea00000b    ....    B        {pc} + 0x34  ; 0x6490
+        0x00006460:    e3a05000    .P..    MOV      r5,#0
+        0x00006464:    ea000000    ....    B        {pc} + 0x8  ; 0x646c
+        0x00006468:    e3a05001    .P..    MOV      r5,#1
+        0x0000646c:    e1a06005    .`..    MOV      r6,r5
+        0x00006470:    e1a07005    .p..    MOV      r7,r5
+        0x00006474:    ea000005    ....    B        {pc} + 0x1c  ; 0x6490
+        0x00006478:    e3a05001    .P..    MOV      r5,#1
+        0x0000647c:    e3a06000    .`..    MOV      r6,#0
+        0x00006480:    ea000001    ....    B        {pc} + 0xc  ; 0x648c
+        0x00006484:    e3a05000    .P..    MOV      r5,#0
+        0x00006488:    e3a06001    .`..    MOV      r6,#1
+        0x0000648c:    e3a07002    .p..    MOV      r7,#2
+        0x00006490:    e5983004    .0..    LDR      r3,[r8,#4]
+        0x00006494:    e2133003    .0..    ANDS     r3,r3,#3
+        0x00006498:    01a01003    ....    MOVEQ    r1,r3
+        0x0000649c:    0a000012    ....    BEQ      {pc} + 0x50  ; 0x64ec
+        0x000064a0:    e3a04000    .@..    MOV      r4,#0
+        0x000064a4:    e5983004    .0..    LDR      r3,[r8,#4]
+        0x000064a8:    e59f20b0    . ..    LDR      r2,[pc,#176]  ; [image_reg_base = 0x6560] = 0
+        0x000064ac:    e0841003    ....    ADD      r1,r4,r3
+        0x000064b0:    e7d4c003    ....    LDRB     r12,[r4,r3]
+        0x000064b4:    e5d10001    ....    LDRB     r0,[r1,#1]
+        0x000064b8:    e5d13002    .0..    LDRB     r3,[r1,#2]
+        0x000064bc:    e792210a    .!..    LDR      r2,[r2,r10,LSL #2]
+        0x000064c0:    e5d11003    ....    LDRB     r1,[r1,#3]
+        0x000064c4:    e1a03803    .8..    LSL      r3,r3,#16
+        0x000064c8:    e2822b13    .+..    ADD      r2,r2,#0x4c00
+        0x000064cc:    e1833400    .4..    ORR      r3,r3,r0,LSL #8
+        0x000064d0:    e183300c    .0..    ORR      r3,r3,r12
+        0x000064d4:    e1833c01    .<..    ORR      r3,r3,r1,LSL #24
+        0x000064d8:    e7823004    .0..    STR      r3,[r2,r4]
+        0x000064dc:    e2844004    .@..    ADD      r4,r4,#4
+        0x000064e0:    e3540b01    ..T.    CMP      r4,#0x400
+        0x000064e4:    1affffee    ....    BNE      {pc} - 0x40  ; 0x64a4
+        0x000064e8:    ea000008    ....    B        {pc} + 0x28  ; 0x6510
+        0x000064ec:    e59f306c    l0..    LDR      r3,[pc,#108]  ; [image_reg_base = 0x6560] = 0
+        0x000064f0:    e5982004    . ..    LDR      r2,[r8,#4]
+        0x000064f4:    e793310a    .1..    LDR      r3,[r3,r10,LSL #2]
+        0x000064f8:    e7912002    . ..    LDR      r2,[r1,r2]
+        0x000064fc:    e2833b13    .;..    ADD      r3,r3,#0x4c00
+        0x00006500:    e7832001    . ..    STR      r2,[r3,r1]
+        0x00006504:    e2811004    ....    ADD      r1,r1,#4
+        0x00006508:    e3510b01    ..Q.    CMP      r1,#0x400
+        0x0000650c:    1afffff6    ....    BNE      {pc} - 0x20  ; 0x64ec
+        0x00006510:    e59fc048    H...    LDR      r12,[pc,#72]   ; [image_reg_base = 0x6560] = 0
+        0x00006514:    e1a02206    ."..    LSL      r2,r6,#4
+        0x00006518:    e1822105    .!..    ORR      r2,r2,r5,LSL #2
+        0x0000651c:    e3a00000    ....    MOV      r0,#0
+        0x00006520:    e79c110a    ....    LDR      r1,[r12,r10,LSL #2]
+        0x00006524:    e59138e0    .8..    LDR      r3,[r1,#0x8e0]
+        0x00006528:    e3c3303c    <0..    BIC      r3,r3,#0x3c
+        0x0000652c:    e1822003    . ..    ORR      r2,r2,r3
+        0x00006530:    e58128e0    .(..    STR      r2,[r1,#0x8e0]
+        0x00006534:    e79c210a    .!..    LDR      r2,[r12,r10,LSL #2]
+        0x00006538:    e59238e0    .8..    LDR      r3,[r2,#0x8e0]
+        0x0000653c:    e3c33003    .0..    BIC      r3,r3,#3
+        0x00006540:    e1873003    .0..    ORR      r3,r7,r3
+        0x00006544:    e58238e0    .8..    STR      r3,[r2,#0x8e0]
+        0x00006548:    e79c210a    .!..    LDR      r2,[r12,r10,LSL #2]
+        0x0000654c:    e59238d8    .8..    LDR      r3,[r2,#0x8d8]
+        0x00006550:    e3c3333e    >3..    BIC      r3,r3,#0xf8000000
+        0x00006554:    e3c33b3e    >;..    BIC      r3,r3,#0xf800
+        0x00006558:    e58238d8    .8..    STR      r3,[r2,#0x8d8]
+        0x0000655c:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00006560:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Format_To_Bpp
+    $a
+        0x00006564:    e1a0c00d    ....    MOV      r12,r13
+        0x00006568:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000656c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006570:    e351000c    ..Q.    CMP      r1,#0xc
+        0x00006574:    979ff101    ....    LDRLS    pc,[pc,r1,LSL #2]
+        0x00006578:    ea000018    ....    B        {pc} + 0x68  ; 0x65e0
+    $d
+        0x0000657c:    000065b8    .e..    DCD    26040 ; [Section 1]
+        0x00006580:    000065b0    .e..    DCD    26032 ; [Section 1]
+        0x00006584:    000065c0    .e..    DCD    26048 ; [Section 1]
+        0x00006588:    000065c8    .e..    DCD    26056 ; [Section 1]
+        0x0000658c:    000065d0    .e..    DCD    26064 ; [Section 1]
+        0x00006590:    000065d0    .e..    DCD    26064 ; [Section 1]
+        0x00006594:    000065d0    .e..    DCD    26064 ; [Section 1]
+        0x00006598:    000065d0    .e..    DCD    26064 ; [Section 1]
+        0x0000659c:    000065d0    .e..    DCD    26064 ; [Section 1]
+        0x000065a0:    000065e8    .e..    DCD    26088 ; [Section 1]
+        0x000065a4:    000065e8    .e..    DCD    26088 ; [Section 1]
+        0x000065a8:    000065d8    .e..    DCD    26072 ; [Section 1]
+        0x000065ac:    000065d0    .e..    DCD    26064 ; [Section 1]
+    $a
+        0x000065b0:    e3a00002    ....    MOV      r0,#2
+        0x000065b4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000065b8:    e3a00001    ....    MOV      r0,#1
+        0x000065bc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000065c0:    e3a00004    ....    MOV      r0,#4
+        0x000065c4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000065c8:    e3a00008    ....    MOV      r0,#8
+        0x000065cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000065d0:    e3a00010    ....    MOV      r0,#0x10
+        0x000065d4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000065d8:    e3a00018    ....    MOV      r0,#0x18
+        0x000065dc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000065e0:    e3a00000    ....    MOV      r0,#0
+        0x000065e4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000065e8:    e3a00020     ...    MOV      r0,#0x20
+        0x000065ec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DE_BE_Offset_To_Addr
+        0x000065f0:    e1a0c00d    ....    MOV      r12,r13
+        0x000065f4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000065f8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000065fc:    e0030391    ....    MUL      r3,r1,r3
+        0x00006600:    e59b1004    ....    LDR      r1,[r11,#4]
+        0x00006604:    e0020192    ....    MUL      r2,r2,r1
+        0x00006608:    e0010391    ....    MUL      r1,r1,r3
+        0x0000660c:    e1a021a2    .!..    LSR      r2,r2,#3
+        0x00006610:    e08221a1    .!..    ADD      r2,r2,r1,LSR #3
+        0x00006614:    e0820000    ....    ADD      r0,r2,r0
+        0x00006618:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    DE_BE_Addr_To_Offset
+        0x0000661c:    e1a0c00d    ....    MOV      r12,r13
+        0x00006620:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00006624:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006628:    e0060392    ....    MUL      r6,r2,r3
+        0x0000662c:    e0604001    .@`.    RSB      r4,r0,r1
+        0x00006630:    e1a05003    .P..    MOV      r5,r3
+        0x00006634:    e59b7004    .p..    LDR      r7,[r11,#4]
+        0x00006638:    e1a04184    .A..    LSL      r4,r4,#3
+        0x0000663c:    e1a00004    ....    MOV      r0,r4
+        0x00006640:    e1a01006    ....    MOV      r1,r6
+        0x00006644:    ebfffffe    ....    BL       __aeabi_uidivmod  ;
+        0x00006648:    e1a00001    ....    MOV      r0,r1
+        0x0000664c:    e1a01005    ....    MOV      r1,r5
+        0x00006650:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x00006654:    e1a01006    ....    MOV      r1,r6
+        0x00006658:    e5870000    ....    STR      r0,[r7,#0]
+        0x0000665c:    e1a00004    ....    MOV      r0,r4
+        0x00006660:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x00006664:    e5870004    ....    STR      r0,[r7,#4]
+        0x00006668:    e3a00000    ....    MOV      r0,#0
+        0x0000666c:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    DE_BE_Layer_Set_Work_Mode
+        0x00006670:    e1a0c00d    ....    MOV      r12,r13
+        0x00006674:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006678:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000667c:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [image_reg_base = 0x66a0] = 0
+        0x00006680:    e793c100    ....    LDR      r12,[r3,r0,LSL #2]
+        0x00006684:    e3a00000    ....    MOV      r0,#0
+        0x00006688:    e28cce89    ....    ADD      r12,r12,#0x890
+        0x0000668c:    e79c3101    .1..    LDR      r3,[r12,r1,LSL #2]
+        0x00006690:    e3c33503    .5..    BIC      r3,r3,#0xc00000
+        0x00006694:    e1833b02    .;..    ORR      r3,r3,r2,LSL #22
+        0x00006698:    e78c3101    .1..    STR      r3,[r12,r1,LSL #2]
+        0x0000669c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000066a0:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Set_Format
+    $a
+        0x000066a4:    e1a0c00d    ....    MOV      r12,r13
+        0x000066a8:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x000066ac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000066b0:    e59f402c    ,@..    LDR      r4,[pc,#44]   ; [image_reg_base = 0x66e4] = 0
+        0x000066b4:    e5dbc004    ....    LDRB     r12,[r11,#4]
+        0x000066b8:    e7944100    .A..    LDR      r4,[r4,r0,LSL #2]
+        0x000066bc:    e18cc402    ....    ORR      r12,r12,r2,LSL #8
+        0x000066c0:    e18cc103    ....    ORR      r12,r12,r3,LSL #2
+        0x000066c4:    e3a00000    ....    MOV      r0,#0
+        0x000066c8:    e2844e8a    .N..    ADD      r4,r4,#0x8a0
+        0x000066cc:    e7943101    .1..    LDR      r3,[r4,r1,LSL #2]
+        0x000066d0:    e3c33eff    .>..    BIC      r3,r3,#0xff0
+        0x000066d4:    e3c3300f    .0..    BIC      r3,r3,#0xf
+        0x000066d8:    e18cc003    ....    ORR      r12,r12,r3
+        0x000066dc:    e784c101    ....    STR      r12,[r4,r1,LSL #2]
+        0x000066e0:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x000066e4:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Set_Framebuffer
+    $a
+        0x000066e8:    e1a0c00d    ....    MOV      r12,r13
+        0x000066ec:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x000066f0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000066f4:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x000066f8:    e5d28000    ....    LDRB     r8,[r2,#0]
+        0x000066fc:    e1a07001    .p..    MOV      r7,r1
+        0x00006700:    e1a05002    .P..    MOV      r5,r2
+        0x00006704:    e1a06000    .`..    MOV      r6,r0
+        0x00006708:    e1a01008    ....    MOV      r1,r8
+        0x0000670c:    ebfffffe    ....    BL       DE_BE_Format_To_Bpp  ; 0x6564 Section #1
+        0x00006710:    e250a000    ..P.    SUBS     r10,r0,#0
+        0x00006714:    d3e0e000    ....    MVNLE    r14,#0
+        0x00006718:    da00001d    ....    BLE      {pc} + 0x7c  ; 0x6794
+        0x0000671c:    e58da000    ....    STR      r10,[r13,#0]
+        0x00006720:    e5951004    ....    LDR      r1,[r5,#4]
+        0x00006724:    e2850008    ....    ADD      r0,r5,#8
+        0x00006728:    e890000d    ....    LDM      r0,{r0,r2,r3}
+        0x0000672c:    ebfffffe    ....    BL       DE_BE_Offset_To_Addr  ; 0x65f0 Section #1
+        0x00006730:    e5d5c001    ....    LDRB     r12,[r5,#1]
+        0x00006734:    e1d530d2    .0..    LDRSB    r3,[r5,#2]
+        0x00006738:    e1a02008    . ..    MOV      r2,r8
+        0x0000673c:    e1a01007    ....    MOV      r1,r7
+        0x00006740:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00006744:    e1a04000    .@..    MOV      r4,r0
+        0x00006748:    e1a00006    ....    MOV      r0,r6
+        0x0000674c:    ebfffffe    ....    BL       DE_BE_Layer_Set_Format  ; 0x66a4 Section #1
+        0x00006750:    e59f0048    H...    LDR      r0,[pc,#72]   ; [image_reg_base = 0x67a0] = 0
+        0x00006754:    e1a04184    .A..    LSL      r4,r4,#3
+        0x00006758:    e1a0c187    ....    LSL      r12,r7,#3
+        0x0000675c:    e3a020ff    . ..    MOV      r2,#0xff
+        0x00006760:    e3a0e000    ....    MOV      r14,#0
+        0x00006764:    e7903106    .1..    LDR      r3,[r0,r6,LSL #2]
+        0x00006768:    e2833e85    .>..    ADD      r3,r3,#0x850
+        0x0000676c:    e7834107    .A..    STR      r4,[r3,r7,LSL #2]
+        0x00006770:    e7901106    ....    LDR      r1,[r0,r6,LSL #2]
+        0x00006774:    e5913860    `8..    LDR      r3,[r1,#0x860]
+        0x00006778:    e1c33c12    .<..    BIC      r3,r3,r2,LSL r12
+        0x0000677c:    e5813860    `8..    STR      r3,[r1,#0x860]
+        0x00006780:    e5952004    . ..    LDR      r2,[r5,#4]
+        0x00006784:    e7903106    .1..    LDR      r3,[r0,r6,LSL #2]
+        0x00006788:    e0020a92    ....    MUL      r2,r2,r10
+        0x0000678c:    e2833d21    !=..    ADD      r3,r3,#0x840
+        0x00006790:    e7832107    .!..    STR      r2,[r3,r7,LSL #2]
+        0x00006794:    e1a0000e    ....    MOV      r0,r14
+        0x00006798:    e24bd024    $.K.    SUB      r13,r11,#0x24
+        0x0000679c:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x000067a0:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Set_Screen_Win
+    $a
+        0x000067a4:    e1a0c00d    ....    MOV      r12,r13
+        0x000067a8:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000067ac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000067b0:    e59f705c    \p..    LDR      r7,[pc,#92]   ; [image_reg_base = 0x6814] = 0
+        0x000067b4:    e1a06000    .`..    MOV      r6,r0
+        0x000067b8:    e592c000    ....    LDR      r12,[r2,#0]
+        0x000067bc:    e3073fff    .?..    MOV      r3,#0x7fff
+        0x000067c0:    e5920004    ....    LDR      r0,[r2,#4]
+        0x000067c4:    e7974106    .A..    LDR      r4,[r7,r6,LSL #2]
+        0x000067c8:    e0005003    .P..    AND      r5,r0,r3
+        0x000067cc:    e00c3003    .0..    AND      r3,r12,r3
+        0x000067d0:    e2000102    ....    AND      r0,r0,#0x80000000
+        0x000067d4:    e1a0cfac    ....    LSR      r12,r12,#31
+        0x000067d8:    e1833000    .0..    ORR      r3,r3,r0
+        0x000067dc:    e2844e82    .N..    ADD      r4,r4,#0x820
+        0x000067e0:    e1833805    .8..    ORR      r3,r3,r5,LSL #16
+        0x000067e4:    e3a00000    ....    MOV      r0,#0
+        0x000067e8:    e183378c    .7..    ORR      r3,r3,r12,LSL #15
+        0x000067ec:    e7843101    .1..    STR      r3,[r4,r1,LSL #2]
+        0x000067f0:    e7974106    .A..    LDR      r4,[r7,r6,LSL #2]
+        0x000067f4:    e592c00c    ....    LDR      r12,[r2,#0xc]
+        0x000067f8:    e5923008    .0..    LDR      r3,[r2,#8]
+        0x000067fc:    e2844e81    .N..    ADD      r4,r4,#0x810
+        0x00006800:    e24cc001    ..L.    SUB      r12,r12,#1
+        0x00006804:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00006808:    e183380c    .8..    ORR      r3,r3,r12,LSL #16
+        0x0000680c:    e7843101    .1..    STR      r3,[r4,r1,LSL #2]
+        0x00006810:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00006814:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Video_Enable
+    $a
+        0x00006818:    e1a0c00d    ....    MOV      r12,r13
+        0x0000681c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006820:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006824:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [image_reg_base = 0x6848] = 0
+        0x00006828:    e793c100    ....    LDR      r12,[r3,r0,LSL #2]
+        0x0000682c:    e3a00000    ....    MOV      r0,#0
+        0x00006830:    e28cce89    ....    ADD      r12,r12,#0x890
+        0x00006834:    e79c3101    .1..    LDR      r3,[r12,r1,LSL #2]
+        0x00006838:    e3c33002    .0..    BIC      r3,r3,#2
+        0x0000683c:    e1833082    .0..    ORR      r3,r3,r2,LSL #1
+        0x00006840:    e78c3101    .1..    STR      r3,[r12,r1,LSL #2]
+        0x00006844:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006848:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Yuv_Ch_Enable
+    $a
+        0x0000684c:    e1a0c00d    ....    MOV      r12,r13
+        0x00006850:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006854:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006858:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [image_reg_base = 0x687c] = 0
+        0x0000685c:    e793c100    ....    LDR      r12,[r3,r0,LSL #2]
+        0x00006860:    e3a00000    ....    MOV      r0,#0
+        0x00006864:    e28cce89    ....    ADD      r12,r12,#0x890
+        0x00006868:    e79c3101    .1..    LDR      r3,[r12,r1,LSL #2]
+        0x0000686c:    e3c33004    .0..    BIC      r3,r3,#4
+        0x00006870:    e1833102    .1..    ORR      r3,r3,r2,LSL #2
+        0x00006874:    e78c3101    .1..    STR      r3,[r12,r1,LSL #2]
+        0x00006878:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000687c:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Set_Prio
+    $a
+        0x00006880:    e1a0c00d    ....    MOV      r12,r13
+        0x00006884:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006888:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000688c:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [image_reg_base = 0x68b0] = 0
+        0x00006890:    e793c100    ....    LDR      r12,[r3,r0,LSL #2]
+        0x00006894:    e3a00000    ....    MOV      r0,#0
+        0x00006898:    e28cce89    ....    ADD      r12,r12,#0x890
+        0x0000689c:    e79c3101    .1..    LDR      r3,[r12,r1,LSL #2]
+        0x000068a0:    e3c33b03    .;..    BIC      r3,r3,#0xc00
+        0x000068a4:    e1833502    .5..    ORR      r3,r3,r2,LSL #10
+        0x000068a8:    e78c3101    .1..    STR      r3,[r12,r1,LSL #2]
+        0x000068ac:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000068b0:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Set_Pipe
+    $a
+        0x000068b4:    e1a0c00d    ....    MOV      r12,r13
+        0x000068b8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000068bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000068c0:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [image_reg_base = 0x68e4] = 0
+        0x000068c4:    e793c100    ....    LDR      r12,[r3,r0,LSL #2]
+        0x000068c8:    e3a00000    ....    MOV      r0,#0
+        0x000068cc:    e28cce89    ....    ADD      r12,r12,#0x890
+        0x000068d0:    e79c3101    .1..    LDR      r3,[r12,r1,LSL #2]
+        0x000068d4:    e3c33902    .9..    BIC      r3,r3,#0x8000
+        0x000068d8:    e1833782    .7..    ORR      r3,r3,r2,LSL #15
+        0x000068dc:    e78c3101    .1..    STR      r3,[r12,r1,LSL #2]
+        0x000068e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000068e4:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_ColorKey_Enable
+    $a
+        0x000068e8:    e1a0c00d    ....    MOV      r12,r13
+        0x000068ec:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000068f0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000068f4:    e59f3030    00..    LDR      r3,[pc,#48]   ; [image_reg_base = 0x692c] = 0
+        0x000068f8:    e3520000    ..R.    CMP      r2,#0
+        0x000068fc:    17932100    .!..    LDRNE    r2,[r3,r0,LSL #2]
+        0x00006900:    07932100    .!..    LDREQ    r2,[r3,r0,LSL #2]
+        0x00006904:    e3a00000    ....    MOV      r0,#0
+        0x00006908:    12822e89    ....    ADDNE    r2,r2,#0x890
+        0x0000690c:    02822e89    ....    ADDEQ    r2,r2,#0x890
+        0x00006910:    17923101    .1..    LDRNE    r3,[r2,r1,LSL #2]
+        0x00006914:    07923101    .1..    LDREQ    r3,[r2,r1,LSL #2]
+        0x00006918:    13c33703    .7..    BICNE    r3,r3,#0xc0000
+        0x0000691c:    13833701    .7..    ORRNE    r3,r3,#0x40000
+        0x00006920:    03c33703    .7..    BICEQ    r3,r3,#0xc0000
+        0x00006924:    e7823101    .1..    STR      r3,[r2,r1,LSL #2]
+        0x00006928:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000692c:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Alpha_Enable
+    $a
+        0x00006930:    e1a0c00d    ....    MOV      r12,r13
+        0x00006934:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006938:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000693c:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [image_reg_base = 0x6970] = 0
+        0x00006940:    e3520000    ..R.    CMP      r2,#0
+        0x00006944:    17932100    .!..    LDRNE    r2,[r3,r0,LSL #2]
+        0x00006948:    07932100    .!..    LDREQ    r2,[r3,r0,LSL #2]
+        0x0000694c:    e3a00000    ....    MOV      r0,#0
+        0x00006950:    12822e89    ....    ADDNE    r2,r2,#0x890
+        0x00006954:    02822e89    ....    ADDEQ    r2,r2,#0x890
+        0x00006958:    17923101    .1..    LDRNE    r3,[r2,r1,LSL #2]
+        0x0000695c:    07923101    .1..    LDREQ    r3,[r2,r1,LSL #2]
+        0x00006960:    13833001    .0..    ORRNE    r3,r3,#1
+        0x00006964:    03c33001    .0..    BICEQ    r3,r3,#1
+        0x00006968:    e7823101    .1..    STR      r3,[r2,r1,LSL #2]
+        0x0000696c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006970:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Set_Alpha_Value
+    $a
+        0x00006974:    e1a0c00d    ....    MOV      r12,r13
+        0x00006978:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000697c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006980:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [image_reg_base = 0x69a4] = 0
+        0x00006984:    e793c100    ....    LDR      r12,[r3,r0,LSL #2]
+        0x00006988:    e3a00000    ....    MOV      r0,#0
+        0x0000698c:    e28cce89    ....    ADD      r12,r12,#0x890
+        0x00006990:    e79c3101    .1..    LDR      r3,[r12,r1,LSL #2]
+        0x00006994:    e3c334ff    .4..    BIC      r3,r3,#0xff000000
+        0x00006998:    e1833c02    .<..    ORR      r3,r3,r2,LSL #24
+        0x0000699c:    e78c3101    .1..    STR      r3,[r12,r1,LSL #2]
+        0x000069a0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000069a4:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_Layer_Enable
+    $a
+        0x000069a8:    e1a0c00d    ....    MOV      r12,r13
+        0x000069ac:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000069b0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000069b4:    e59f3030    00..    LDR      r3,[pc,#48]   ; [image_reg_base = 0x69ec] = 0
+        0x000069b8:    e3520000    ..R.    CMP      r2,#0
+        0x000069bc:    e1a0c001    ....    MOV      r12,r1
+        0x000069c0:    13a01c01    ....    MOVNE    r1,#0x100
+        0x000069c4:    03a01c01    ....    MOVEQ    r1,#0x100
+        0x000069c8:    17933100    .1..    LDRNE    r3,[r3,r0,LSL #2]
+        0x000069cc:    07933100    .1..    LDREQ    r3,[r3,r0,LSL #2]
+        0x000069d0:    e3a00000    ....    MOV      r0,#0
+        0x000069d4:    15932800    .(..    LDRNE    r2,[r3,#0x800]
+        0x000069d8:    05932800    .(..    LDREQ    r2,[r3,#0x800]
+        0x000069dc:    11822c11    .,..    ORRNE    r2,r2,r1,LSL r12
+        0x000069e0:    01c22c11    .,..    BICEQ    r2,r2,r1,LSL r12
+        0x000069e4:    e5832800    .(..    STR      r2,[r3,#0x800]
+        0x000069e8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000069ec:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_YUV_CH_Set_Addr
+    $a
+        0x000069f0:    e1a0c00d    ....    MOV      r12,r13
+        0x000069f4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000069f8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000069fc:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [image_reg_base = 0x6a14] = 0
+        0x00006a00:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00006a04:    e3a00000    ....    MOV      r0,#0
+        0x00006a08:    e2833e93    .>..    ADD      r3,r3,#0x930
+        0x00006a0c:    e7832101    .!..    STR      r2,[r3,r1,LSL #2]
+        0x00006a10:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006a14:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_YUV_CH_Set_Line_Width
+    $a
+        0x00006a18:    e1a0c00d    ....    MOV      r12,r13
+        0x00006a1c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006a20:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006a24:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [image_reg_base = 0x6a3c] = 0
+        0x00006a28:    e7933100    .1..    LDR      r3,[r3,r0,LSL #2]
+        0x00006a2c:    e3a00000    ....    MOV      r0,#0
+        0x00006a30:    e2833d25    %=..    ADD      r3,r3,#0x940
+        0x00006a34:    e7832101    .!..    STR      r2,[r3,r1,LSL #2]
+        0x00006a38:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006a3c:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_YUV_CH_Enable
+    $a
+        0x00006a40:    e1a0c00d    ....    MOV      r12,r13
+        0x00006a44:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006a48:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006a4c:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [image_reg_base = 0x6a78] = 0
+        0x00006a50:    e3510000    ..Q.    CMP      r1,#0
+        0x00006a54:    17932100    .!..    LDRNE    r2,[r3,r0,LSL #2]
+        0x00006a58:    07932100    .!..    LDREQ    r2,[r3,r0,LSL #2]
+        0x00006a5c:    e3a00000    ....    MOV      r0,#0
+        0x00006a60:    15923920     9..    LDRNE    r3,[r2,#0x920]
+        0x00006a64:    05923920     9..    LDREQ    r3,[r2,#0x920]
+        0x00006a68:    13833001    .0..    ORRNE    r3,r3,#1
+        0x00006a6c:    03c33001    .0..    BICEQ    r3,r3,#1
+        0x00006a70:    e5823920     9..    STR      r3,[r2,#0x920]
+        0x00006a74:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006a78:    00000000    ....    DCD    0 ; image_reg_base
+    DE_BE_YUV_CH_Set_Src
+    $a
+        0x00006a7c:    e1a0c00d    ....    MOV      r12,r13
+        0x00006a80:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00006a84:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006a88:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x00006a8c:    e1a05001    .P..    MOV      r5,r1
+        0x00006a90:    e5d1c000    ....    LDRB     r12,[r1,#0]
+        0x00006a94:    e5d52002    . ..    LDRB     r2,[r5,#2]
+        0x00006a98:    e1a06000    .`..    MOV      r6,r0
+        0x00006a9c:    e35c0001    ..\.    CMP      r12,#1
+        0x00006aa0:    135c0003    ..\.    CMPNE    r12,#3
+        0x00006aa4:    e9910700    ....    LDMIB    r1,{r8-r10}
+        0x00006aa8:    03a04001    .@..    MOVEQ    r4,#1
+        0x00006aac:    e5913010    .0..    LDR      r3,[r1,#0x10]
+        0x00006ab0:    e5950018    ....    LDR      r0,[r5,#0x18]
+        0x00006ab4:    e5911014    ....    LDR      r1,[r1,#0x14]
+        0x00006ab8:    e5d57001    .p..    LDRB     r7,[r5,#1]
+        0x00006abc:    e50b2030    0 ..    STR      r2,[r11,#-0x30]
+        0x00006ac0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x6ad0
+        0x00006ac4:    e35c0000    ..\.    CMP      r12,#0
+        0x00006ac8:    03a04002    .@..    MOVEQ    r4,#2
+        0x00006acc:    13a04000    .@..    MOVNE    r4,#0
+        0x00006ad0:    e3a02001    . ..    MOV      r2,#1
+        0x00006ad4:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00006ad8:    e0833412    .4..    ADD      r3,r3,r2,LSL r4
+        0x00006adc:    e3570000    ..W.    CMP      r7,#0
+        0x00006ae0:    e1a02431    1$..    LSR      r2,r1,r4
+        0x00006ae4:    e1a03433    34..    LSR      r3,r3,r4
+        0x00006ae8:    e1a02412    .$..    LSL      r2,r2,r4
+        0x00006aec:    e1a01413    ....    LSL      r1,r3,r4
+        0x00006af0:    1a000008    ....    BNE      {pc} + 0x28  ; 0x6b18
+        0x00006af4:    e1a03432    24..    LSR      r3,r2,r4
+        0x00006af8:    e1a04431    1D..    LSR      r4,r1,r4
+        0x00006afc:    e0822008    . ..    ADD      r2,r2,r8
+        0x00006b00:    e1a0e001    ....    MOV      r14,r1
+        0x00006b04:    e0233490    .4#.    MLA      r3,r0,r4,r3
+        0x00006b08:    e0282190    .!(.    MLA      r8,r0,r1,r2
+        0x00006b0c:    e083a00a    ....    ADD      r10,r3,r10
+        0x00006b10:    e0837009    .p..    ADD      r7,r3,r9
+        0x00006b14:    ea000008    ....    B        {pc} + 0x28  ; 0x6b3c
+        0x00006b18:    e3570001    ..W.    CMP      r7,#1
+        0x00006b1c:    1a00003e    >...    BNE      {pc} + 0x100  ; 0x6c1c
+        0x00006b20:    e0222190    .!".    MLA      r2,r0,r1,r2
+        0x00006b24:    e2643002    .0d.    RSB      r3,r4,#2
+        0x00006b28:    e3a07000    .p..    MOV      r7,#0
+        0x00006b2c:    e1a0e311    ....    LSL      r14,r1,r3
+        0x00006b30:    e1a0a007    ....    MOV      r10,r7
+        0x00006b34:    e1a04007    .@..    MOV      r4,r7
+        0x00006b38:    e0888312    ....    ADD      r8,r8,r2,LSL r3
+        0x00006b3c:    e51b3030    00..    LDR      r3,[r11,#-0x30]
+        0x00006b40:    e1a0c60c    ....    LSL      r12,r12,#12
+        0x00006b44:    e1a0218e    .!..    LSL      r2,r14,#3
+        0x00006b48:    e1a04184    .A..    LSL      r4,r4,#3
+        0x00006b4c:    e3a01000    ....    MOV      r1,#0
+        0x00006b50:    e1a00006    ....    MOV      r0,r6
+        0x00006b54:    e18cc403    ....    ORR      r12,r12,r3,LSL #8
+        0x00006b58:    e59f30c8    .0..    LDR      r3,[pc,#200]  ; [image_reg_base = 0x6c28] = 0
+        0x00006b5c:    e793e106    ....    LDR      r14,[r3,r6,LSL #2]
+        0x00006b60:    e59e3920     9..    LDR      r3,[r14,#0x920]
+        0x00006b64:    e3c33c73    s<..    BIC      r3,r3,#0x7300
+        0x00006b68:    e18cc003    ....    ORR      r12,r12,r3
+        0x00006b6c:    e58ec920     ...    STR      r12,[r14,#0x920]
+        0x00006b70:    ebffffa8    ....    BL       {pc} - 0x158  ; 0x6a18
+        0x00006b74:    e1a02004    . ..    MOV      r2,r4
+        0x00006b78:    e3a01001    ....    MOV      r1,#1
+        0x00006b7c:    e1a00006    ....    MOV      r0,r6
+        0x00006b80:    ebffffa4    ....    BL       {pc} - 0x168  ; 0x6a18
+        0x00006b84:    e1a02004    . ..    MOV      r2,r4
+        0x00006b88:    e3a01002    ....    MOV      r1,#2
+        0x00006b8c:    e1a00006    ....    MOV      r0,r6
+        0x00006b90:    ebffffa0    ....    BL       {pc} - 0x178  ; 0x6a18
+        0x00006b94:    e1a02008    . ..    MOV      r2,r8
+        0x00006b98:    e3a01000    ....    MOV      r1,#0
+        0x00006b9c:    e1a00006    ....    MOV      r0,r6
+        0x00006ba0:    ebffff92    ....    BL       {pc} - 0x1b0  ; 0x69f0
+        0x00006ba4:    e1a02007    . ..    MOV      r2,r7
+        0x00006ba8:    e3a01001    ....    MOV      r1,#1
+        0x00006bac:    e1a00006    ....    MOV      r0,r6
+        0x00006bb0:    ebffff8e    ....    BL       {pc} - 0x1c0  ; 0x69f0
+        0x00006bb4:    e3a01002    ....    MOV      r1,#2
+        0x00006bb8:    e1a0200a    . ..    MOV      r2,r10
+        0x00006bbc:    e1a00006    ....    MOV      r0,r6
+        0x00006bc0:    ebffff8a    ....    BL       {pc} - 0x1d0  ; 0x69f0
+        0x00006bc4:    e1a00006    ....    MOV      r0,r6
+        0x00006bc8:    e5d5401c    .@..    LDRB     r4,[r5,#0x1c]
+        0x00006bcc:    ebfffffe    ....    BL       DE_Get_Reg_Base  ; 0x350c Section #1
+        0x00006bd0:    e3a0c000    ....    MOV      r12,#0
+        0x00006bd4:    e2043003    .0..    AND      r3,r4,#3
+        0x00006bd8:    e1a04304    .C..    LSL      r4,r4,#6
+        0x00006bdc:    e20440ff    .@..    AND      r4,r4,#0xff
+        0x00006be0:    e0844383    .C..    ADD      r4,r4,r3,LSL #7
+        0x00006be4:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [csc_tab = 0x6c2c] = 0
+        0x00006be8:    e0831004    ....    ADD      r1,r3,r4
+        0x00006bec:    e280ed26    &...    ADD      r14,r0,#0x980
+        0x00006bf0:    e2800e95    ....    ADD      r0,r0,#0x950
+        0x00006bf4:    ea000006    ....    B        {pc} + 0x20  ; 0x6c14
+        0x00006bf8:    e5903000    .0..    LDR      r3,[r0,#0]
+        0x00006bfc:    e19120bc    . ..    LDRH     r2,[r1,r12]
+        0x00006c00:    e28cc004    ....    ADD      r12,r12,#4
+        0x00006c04:    e1a03823    #8..    LSR      r3,r3,#16
+        0x00006c08:    e1a03803    .8..    LSL      r3,r3,#16
+        0x00006c0c:    e1833002    .0..    ORR      r3,r3,r2
+        0x00006c10:    e4803004    .0..    STR      r3,[r0],#4
+        0x00006c14:    e150000e    ..P.    CMP      r0,r14
+        0x00006c18:    3afffff6    ...:    BCC      {pc} - 0x20  ; 0x6bf8
+        0x00006c1c:    e3a00000    ....    MOV      r0,#0
+        0x00006c20:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00006c24:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00006c28:    00000000    ....    DCD    0 ; image_reg_base
+        0x00006c2c:    00000000    ....    DCD    0 ; csc_tab
+    LCDC_set_reg_base
+    $a
+        0x00006c30:    e1a0c00d    ....    MOV      r12,r13
+        0x00006c34:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006c38:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006c3c:    e3500000    ..P.    CMP      r0,#0
+        0x00006c40:    059f3018    .0..    LDREQ    r3,[pc,#24]   ; [([Section 17] + 17008) = 0x6c60]  = 0x4270
+        0x00006c44:    05831000    ....    STREQ    r1,[r3,#0]
+        0x00006c48:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x6c58
+        0x00006c4c:    e3500001    ..P.    CMP      r0,#1
+        0x00006c50:    059f3008    .0..    LDREQ    r3,[pc,#8]    ; [([Section 17] + 17008) = 0x6c60]  = 0x4270
+        0x00006c54:    05831004    ....    STREQ    r1,[r3,#4]
+        0x00006c58:    e3a00000    ....    MOV      r0,#0
+        0x00006c5c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006c60:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_get_reg_base
+    $a
+        0x00006c64:    e1a0c00d    ....    MOV      r12,r13
+        0x00006c68:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006c6c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006c70:    e3500000    ..P.    CMP      r0,#0
+        0x00006c74:    059f3018    .0..    LDREQ    r3,[pc,#24]   ; [([Section 17] + 17008) = 0x6c94]  = 0x4270
+        0x00006c78:    05930000    ....    LDREQ    r0,[r3,#0]
+        0x00006c7c:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x00006c80:    e3500001    ..P.    CMP      r0,#1
+        0x00006c84:    059f3008    .0..    LDREQ    r3,[pc,#8]    ; [([Section 17] + 17008) = 0x6c94]  = 0x4270
+        0x00006c88:    13a00000    ....    MOVNE    r0,#0
+        0x00006c8c:    05930004    ....    LDREQ    r0,[r3,#4]
+        0x00006c90:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006c94:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_open
+    $a
+        0x00006c98:    e1a0c00d    ....    MOV      r12,r13
+        0x00006c9c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006ca0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006ca4:    e59f206c    l ..    LDR      r2,[pc,#108]  ; [([Section 17] + 17008) = 0x6d18]  = 0x4270
+        0x00006ca8:    e3500000    ..P.    CMP      r0,#0
+        0x00006cac:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006cb0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006cb4:    e3500000    ..P.    CMP      r0,#0
+        0x00006cb8:    e59f2058    X ..    LDR      r2,[pc,#88]   ; [([Section 17] + 17008) = 0x6d18]  = 0x4270
+        0x00006cbc:    e2833046    F0..    ADD      r3,r3,#0x46
+        0x00006cc0:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x00006cc4:    e1a01003    ....    MOV      r1,r3
+        0x00006cc8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006ccc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006cd0:    e3500000    ..P.    CMP      r0,#0
+        0x00006cd4:    e2832046    F ..    ADD      r2,r3,#0x46
+        0x00006cd8:    e3813902    .9..    ORR      r3,r1,#0x8000
+        0x00006cdc:    e1c230b0    .0..    STRH     r3,[r2,#0]
+        0x00006ce0:    e59f2030    0 ..    LDR      r2,[pc,#48]   ; [([Section 17] + 17008) = 0x6d18]  = 0x4270
+        0x00006ce4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006ce8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006cec:    e3500000    ..P.    CMP      r0,#0
+        0x00006cf0:    e59f2020      ..    LDR      r2,[pc,#32]   ; [([Section 17] + 17008) = 0x6d18]  = 0x4270
+        0x00006cf4:    e2833002    .0..    ADD      r3,r3,#2
+        0x00006cf8:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x00006cfc:    e1a01003    ....    MOV      r1,r3
+        0x00006d00:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006d04:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006d08:    e2832002    . ..    ADD      r2,r3,#2
+        0x00006d0c:    e3813902    .9..    ORR      r3,r1,#0x8000
+        0x00006d10:    e1c230b0    .0..    STRH     r3,[r2,#0]
+        0x00006d14:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006d18:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_close
+    $a
+        0x00006d1c:    e1a0c00d    ....    MOV      r12,r13
+        0x00006d20:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006d24:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006d28:    e59f2074    t ..    LDR      r2,[pc,#116]  ; [([Section 17] + 17008) = 0x6da4]  = 0x4270
+        0x00006d2c:    e3500000    ..P.    CMP      r0,#0
+        0x00006d30:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006d34:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006d38:    e3500000    ..P.    CMP      r0,#0
+        0x00006d3c:    e59f2060    ` ..    LDR      r2,[pc,#96]   ; [([Section 17] + 17008) = 0x6da4]  = 0x4270
+        0x00006d40:    e2833046    F0..    ADD      r3,r3,#0x46
+        0x00006d44:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x00006d48:    e1a0c003    ....    MOV      r12,r3
+        0x00006d4c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006d50:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006d54:    e3500000    ..P.    CMP      r0,#0
+        0x00006d58:    e59f2044    D ..    LDR      r2,[pc,#68]   ; [([Section 17] + 17008) = 0x6da4]  = 0x4270
+        0x00006d5c:    e2831046    F...    ADD      r1,r3,#0x46
+        0x00006d60:    e1a0388c    .8..    LSL      r3,r12,#17
+        0x00006d64:    e1a038a3    .8..    LSR      r3,r3,#17
+        0x00006d68:    e1c130b0    .0..    STRH     r3,[r1,#0]
+        0x00006d6c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006d70:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006d74:    e3500000    ..P.    CMP      r0,#0
+        0x00006d78:    e59f2024    $ ..    LDR      r2,[pc,#36]   ; [([Section 17] + 17008) = 0x6da4]  = 0x4270
+        0x00006d7c:    e2833002    .0..    ADD      r3,r3,#2
+        0x00006d80:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x00006d84:    e1a01003    ....    MOV      r1,r3
+        0x00006d88:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006d8c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006d90:    e2832002    . ..    ADD      r2,r3,#2
+        0x00006d94:    e1a03881    .8..    LSL      r3,r1,#17
+        0x00006d98:    e1a038a3    .8..    LSR      r3,r3,#17
+        0x00006d9c:    e1c230b0    .0..    STRH     r3,[r2,#0]
+        0x00006da0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006da4:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_set_start_delay
+    $a
+        0x00006da8:    e1a0c00d    ....    MOV      r12,r13
+        0x00006dac:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006db0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006db4:    e3510000    ..Q.    CMP      r1,#0
+        0x00006db8:    1a00000b    ....    BNE      {pc} + 0x34  ; 0x6dec
+        0x00006dbc:    e59f3074    t0..    LDR      r3,[pc,#116]  ; [([Section 17] + 17008) = 0x6e38]  = 0x4270
+        0x00006dc0:    e3500000    ..P.    CMP      r0,#0
+        0x00006dc4:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006dc8:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006dcc:    e3500000    ..P.    CMP      r0,#0
+        0x00006dd0:    e2833040    @0..    ADD      r3,r3,#0x40
+        0x00006dd4:    e5930000    ....    LDR      r0,[r3,#0]
+        0x00006dd8:    e59f3058    X0..    LDR      r3,[pc,#88]   ; [([Section 17] + 17008) = 0x6e38]  = 0x4270
+        0x00006ddc:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006de0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006de4:    e2831040    @...    ADD      r1,r3,#0x40
+        0x00006de8:    ea00000c    ....    B        {pc} + 0x38  ; 0x6e20
+        0x00006dec:    e3510001    ..Q.    CMP      r1,#1
+        0x00006df0:    1a00000e    ....    BNE      {pc} + 0x40  ; 0x6e30
+        0x00006df4:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17008) = 0x6e38]  = 0x4270
+        0x00006df8:    e3500000    ..P.    CMP      r0,#0
+        0x00006dfc:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006e00:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006e04:    e3500000    ..P.    CMP      r0,#0
+        0x00006e08:    e2833090    .0..    ADD      r3,r3,#0x90
+        0x00006e0c:    e5930000    ....    LDR      r0,[r3,#0]
+        0x00006e10:    e59f3020     0..    LDR      r3,[pc,#32]   ; [([Section 17] + 17008) = 0x6e38]  = 0x4270
+        0x00006e14:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006e18:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006e1c:    e2831090    ....    ADD      r1,r3,#0x90
+        0x00006e20:    e202201f    . ..    AND      r2,r2,#0x1f
+        0x00006e24:    e3c03e1f    .>..    BIC      r3,r0,#0x1f0
+        0x00006e28:    e1833202    .2..    ORR      r3,r3,r2,LSL #4
+        0x00006e2c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00006e30:    e3a00000    ....    MOV      r0,#0
+        0x00006e34:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006e38:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_get_start_delay
+    $a
+        0x00006e3c:    e1a0c00d    ....    MOV      r12,r13
+        0x00006e40:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006e44:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006e48:    e3510000    ..Q.    CMP      r1,#0
+        0x00006e4c:    1a000007    ....    BNE      {pc} + 0x24  ; 0x6e70
+        0x00006e50:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [([Section 17] + 17008) = 0x6e9c]  = 0x4270
+        0x00006e54:    e3500000    ..P.    CMP      r0,#0
+        0x00006e58:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006e5c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006e60:    e2833040    @0..    ADD      r3,r3,#0x40
+        0x00006e64:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00006e68:    e7e40253    S...    UBFX     r0,r3,#4,#5
+        0x00006e6c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00006e70:    e3510001    ..Q.    CMP      r1,#1
+        0x00006e74:    13a00000    ....    MOVNE    r0,#0
+        0x00006e78:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x00006e7c:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17008) = 0x6e9c]  = 0x4270
+        0x00006e80:    e3500000    ..P.    CMP      r0,#0
+        0x00006e84:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006e88:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006e8c:    e2833090    .0..    ADD      r3,r3,#0x90
+        0x00006e90:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00006e94:    e7e40253    S...    UBFX     r0,r3,#4,#5
+        0x00006e98:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006e9c:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_get_cur_line_num
+    $a
+        0x00006ea0:    e1a0c00d    ....    MOV      r12,r13
+        0x00006ea4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006ea8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006eac:    e3510000    ..Q.    CMP      r1,#0
+        0x00006eb0:    1a000007    ....    BNE      {pc} + 0x24  ; 0x6ed4
+        0x00006eb4:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17008) = 0x6ef8]  = 0x4270
+        0x00006eb8:    e3500000    ..P.    CMP      r0,#0
+        0x00006ebc:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006ec0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006ec4:    e28330fc    .0..    ADD      r3,r3,#0xfc
+        0x00006ec8:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00006ecc:    e7e90853    S...    UBFX     r0,r3,#16,#10
+        0x00006ed0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00006ed4:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x6ef8]  = 0x4270
+        0x00006ed8:    e3500000    ..P.    CMP      r0,#0
+        0x00006edc:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00006ee0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00006ee4:    e28330fc    .0..    ADD      r3,r3,#0xfc
+        0x00006ee8:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00006eec:    e1a00a03    ....    LSL      r0,r3,#20
+        0x00006ef0:    e1a00a20     ...    LSR      r0,r0,#20
+        0x00006ef4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006ef8:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_enable_output
+    $a
+        0x00006efc:    e1a0c00d    ....    MOV      r12,r13
+        0x00006f00:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006f04:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006f08:    e3a00000    ....    MOV      r0,#0
+        0x00006f0c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCDC_disable_output
+        0x00006f10:    e1a0c00d    ....    MOV      r12,r13
+        0x00006f14:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006f18:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006f1c:    e3a00000    ....    MOV      r0,#0
+        0x00006f20:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCDC_set_output
+        0x00006f24:    e1a0c00d    ....    MOV      r12,r13
+        0x00006f28:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006f2c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006f30:    e3a00000    ....    MOV      r0,#0
+        0x00006f34:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCDC_enable_int
+        0x00006f38:    e1a0c00d    ....    MOV      r12,r13
+        0x00006f3c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006f40:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006f44:    e59f2040    @ ..    LDR      r2,[pc,#64]   ; [([Section 17] + 17008) = 0x6f8c]  = 0x4270
+        0x00006f48:    e3500000    ..P.    CMP      r0,#0
+        0x00006f4c:    e1a0c001    ....    MOV      r12,r1
+        0x00006f50:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006f54:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006f58:    e3500000    ..P.    CMP      r0,#0
+        0x00006f5c:    e59f2028    ( ..    LDR      r2,[pc,#40]   ; [([Section 17] + 17008) = 0x6f8c]  = 0x4270
+        0x00006f60:    e3a00000    ....    MOV      r0,#0
+        0x00006f64:    e2833007    .0..    ADD      r3,r3,#7
+        0x00006f68:    e5d33000    .0..    LDRB     r3,[r3,#0]
+        0x00006f6c:    e1a01003    ....    MOV      r1,r3
+        0x00006f70:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006f74:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006f78:    e2832007    . ..    ADD      r2,r3,#7
+        0x00006f7c:    e20c30f0    .0..    AND      r3,r12,#0xf0
+        0x00006f80:    e1833001    .0..    ORR      r3,r3,r1
+        0x00006f84:    e5c23000    .0..    STRB     r3,[r2,#0]
+        0x00006f88:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006f8c:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_disable_int
+    $a
+        0x00006f90:    e1a0c00d    ....    MOV      r12,r13
+        0x00006f94:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00006f98:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006f9c:    e59f2044    D ..    LDR      r2,[pc,#68]   ; [([Section 17] + 17008) = 0x6fe8]  = 0x4270
+        0x00006fa0:    e3500000    ..P.    CMP      r0,#0
+        0x00006fa4:    e1a0c001    ....    MOV      r12,r1
+        0x00006fa8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006fac:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006fb0:    e3500000    ..P.    CMP      r0,#0
+        0x00006fb4:    e59f202c    , ..    LDR      r2,[pc,#44]   ; [([Section 17] + 17008) = 0x6fe8]  = 0x4270
+        0x00006fb8:    e3a00000    ....    MOV      r0,#0
+        0x00006fbc:    e2833007    .0..    ADD      r3,r3,#7
+        0x00006fc0:    e5d33000    .0..    LDRB     r3,[r3,#0]
+        0x00006fc4:    e1a01003    ....    MOV      r1,r3
+        0x00006fc8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00006fcc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00006fd0:    e2832007    . ..    ADD      r2,r3,#7
+        0x00006fd4:    e1e0300c    .0..    MVN      r3,r12
+        0x00006fd8:    e383300f    .0..    ORR      r3,r3,#0xf
+        0x00006fdc:    e0013003    .0..    AND      r3,r1,r3
+        0x00006fe0:    e5c23000    .0..    STRB     r3,[r2,#0]
+        0x00006fe4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00006fe8:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_set_tcon1_int_line
+    $a
+        0x00006fec:    e1a0c00d    ....    MOV      r12,r13
+        0x00006ff0:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00006ff4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00006ff8:    e59f3098    .0..    LDR      r3,[pc,#152]  ; [([Section 17] + 17008) = 0x7098]  = 0x4270
+        0x00006ffc:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x00007000:    e1a06001    .`..    MOV      r6,r1
+        0x00007004:    e3a01010    ....    MOV      r1,#0x10
+        0x00007008:    e1a00004    ....    MOV      r0,r4
+        0x0000700c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00007010:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007014:    e2833004    .0..    ADD      r3,r3,#4
+        0x00007018:    e5935000    .P..    LDR      r5,[r3,#0]
+        0x0000701c:    ebfffffe    ....    BL       LCDC_disable_int  ; 0x6f90 Section #1
+        0x00007020:    e3a01020     ...    MOV      r1,#0x20
+        0x00007024:    e1a00004    ....    MOV      r0,r4
+        0x00007028:    ebfffffe    ....    BL       LCDC_disable_int  ; 0x6f90 Section #1
+        0x0000702c:    e59f3064    d0..    LDR      r3,[pc,#100]  ; [([Section 17] + 17008) = 0x7098]  = 0x4270
+        0x00007030:    e3540000    ..T.    CMP      r4,#0
+        0x00007034:    e3a01010    ....    MOV      r1,#0x10
+        0x00007038:    e1a00004    ....    MOV      r0,r4
+        0x0000703c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00007040:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007044:    e3540000    ..T.    CMP      r4,#0
+        0x00007048:    e2833008    .0..    ADD      r3,r3,#8
+        0x0000704c:    e5932000    . ..    LDR      r2,[r3,#0]
+        0x00007050:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [([Section 17] + 17008) = 0x7098]  = 0x4270
+        0x00007054:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00007058:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000705c:    e283c008    ....    ADD      r12,r3,#8
+        0x00007060:    e1a03822    "8..    LSR      r3,r2,#16
+        0x00007064:    e1a02a86    .*..    LSL      r2,r6,#21
+        0x00007068:    e1a03113    .1..    LSL      r3,r3,r1
+        0x0000706c:    e1a02aa2    .*..    LSR      r2,r2,#21
+        0x00007070:    e1833002    .0..    ORR      r3,r3,r2
+        0x00007074:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x00007078:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x0000707c:    e3150202    ....    TST      r5,#0x20000000
+        0x00007080:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x7090
+        0x00007084:    e1a00004    ....    MOV      r0,r4
+        0x00007088:    e3a01020     ...    MOV      r1,#0x20
+        0x0000708c:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x00007090:    e3a00000    ....    MOV      r0,#0
+        0x00007094:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00007098:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_set_tcon0_int_line
+    $a
+        0x0000709c:    e1a0c00d    ....    MOV      r12,r13
+        0x000070a0:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000070a4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000070a8:    e59f3098    .0..    LDR      r3,[pc,#152]  ; [([Section 17] + 17008) = 0x7148]  = 0x4270
+        0x000070ac:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x000070b0:    e1a06001    .`..    MOV      r6,r1
+        0x000070b4:    e3a01020     ...    MOV      r1,#0x20
+        0x000070b8:    e1a00004    ....    MOV      r0,r4
+        0x000070bc:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x000070c0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x000070c4:    e2833004    .0..    ADD      r3,r3,#4
+        0x000070c8:    e5935000    .P..    LDR      r5,[r3,#0]
+        0x000070cc:    ebfffffe    ....    BL       LCDC_disable_int  ; 0x6f90 Section #1
+        0x000070d0:    e3a01010    ....    MOV      r1,#0x10
+        0x000070d4:    e1a00004    ....    MOV      r0,r4
+        0x000070d8:    ebfffffe    ....    BL       LCDC_disable_int  ; 0x6f90 Section #1
+        0x000070dc:    e59f3064    d0..    LDR      r3,[pc,#100]  ; [([Section 17] + 17008) = 0x7148]  = 0x4270
+        0x000070e0:    e3540000    ..T.    CMP      r4,#0
+        0x000070e4:    e1a02a86    .*..    LSL      r2,r6,#21
+        0x000070e8:    e1a00004    ....    MOV      r0,r4
+        0x000070ec:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x000070f0:    e1a02aa2    .*..    LSR      r2,r2,#21
+        0x000070f4:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x000070f8:    e3540000    ..T.    CMP      r4,#0
+        0x000070fc:    e2833008    .0..    ADD      r3,r3,#8
+        0x00007100:    e5931000    ....    LDR      r1,[r3,#0]
+        0x00007104:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17008) = 0x7148]  = 0x4270
+        0x00007108:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000710c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007110:    e283c008    ....    ADD      r12,r3,#8
+        0x00007114:    e1a03801    .8..    LSL      r3,r1,#16
+        0x00007118:    e3a01020     ...    MOV      r1,#0x20
+        0x0000711c:    e1a03823    #8..    LSR      r3,r3,#16
+        0x00007120:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x00007124:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x00007128:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x0000712c:    e3150201    ....    TST      r5,#0x10000000
+        0x00007130:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x7140
+        0x00007134:    e1a00004    ....    MOV      r0,r4
+        0x00007138:    e3a01010    ....    MOV      r1,#0x10
+        0x0000713c:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x00007140:    e3a00000    ....    MOV      r0,#0
+        0x00007144:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00007148:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_exit
+    $a
+        0x0000714c:    e1a0c00d    ....    MOV      r12,r13
+        0x00007150:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00007154:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007158:    e3a010ff    ....    MOV      r1,#0xff
+        0x0000715c:    e1a04000    .@..    MOV      r4,r0
+        0x00007160:    ebfffffe    ....    BL       LCDC_disable_int  ; 0x6f90 Section #1
+        0x00007164:    e1a00004    ....    MOV      r0,r4
+        0x00007168:    ebfffffe    ....    BL       LCDC_close  ; 0x6d1c Section #1
+        0x0000716c:    e3a00000    ....    MOV      r0,#0
+        0x00007170:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    LCDC_query_int
+        0x00007174:    e1a0c00d    ....    MOV      r12,r13
+        0x00007178:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000717c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007180:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17008) = 0x71a0]  = 0x4270
+        0x00007184:    e3500000    ..P.    CMP      r0,#0
+        0x00007188:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000718c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007190:    e2833005    .0..    ADD      r3,r3,#5
+        0x00007194:    e5d30000    ....    LDRB     r0,[r3,#0]
+        0x00007198:    e1a00220     ...    LSR      r0,r0,#4
+        0x0000719c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000071a0:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_clear_int
+    $a
+        0x000071a4:    e1a0c00d    ....    MOV      r12,r13
+        0x000071a8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000071ac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000071b0:    e59fc044    D...    LDR      r12,[pc,#68]   ; [([Section 17] + 17008) = 0x71fc]  = 0x4270
+        0x000071b4:    e3500000    ..P.    CMP      r0,#0
+        0x000071b8:    e1e02001    . ..    MVN      r2,r1
+        0x000071bc:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000071c0:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000071c4:    e3500000    ..P.    CMP      r0,#0
+        0x000071c8:    e59fc02c    ,...    LDR      r12,[pc,#44]   ; [([Section 17] + 17008) = 0x71fc]  = 0x4270
+        0x000071cc:    e2833005    .0..    ADD      r3,r3,#5
+        0x000071d0:    e5d33000    .0..    LDRB     r3,[r3,#0]
+        0x000071d4:    e1a00003    ....    MOV      r0,r3
+        0x000071d8:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000071dc:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000071e0:    e283c005    ....    ADD      r12,r3,#5
+        0x000071e4:    e200300f    .0..    AND      r3,r0,#0xf
+        0x000071e8:    e1833202    .2..    ORR      r3,r3,r2,LSL #4
+        0x000071ec:    e3a00000    ....    MOV      r0,#0
+        0x000071f0:    e6ef3073    s0..    UXTB     r3,r3
+        0x000071f4:    e5cc3000    .0..    STRB     r3,[r12,#0]
+        0x000071f8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000071fc:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_open
+    $a
+        0x00007200:    e1a0c00d    ....    MOV      r12,r13
+        0x00007204:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00007208:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000720c:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [([Section 17] + 17008) = 0x724c]  = 0x4270
+        0x00007210:    e3500000    ..P.    CMP      r0,#0
+        0x00007214:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007218:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000721c:    e3500000    ..P.    CMP      r0,#0
+        0x00007220:    e59f2024    $ ..    LDR      r2,[pc,#36]   ; [([Section 17] + 17008) = 0x724c]  = 0x4270
+        0x00007224:    e3a00000    ....    MOV      r0,#0
+        0x00007228:    e2833042    B0..    ADD      r3,r3,#0x42
+        0x0000722c:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x00007230:    e1a01003    ....    MOV      r1,r3
+        0x00007234:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007238:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000723c:    e2832042    B ..    ADD      r2,r3,#0x42
+        0x00007240:    e3813902    .9..    ORR      r3,r1,#0x8000
+        0x00007244:    e1c230b0    .0..    STRH     r3,[r2,#0]
+        0x00007248:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000724c:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_close
+    $a
+        0x00007250:    e1a0c00d    ....    MOV      r12,r13
+        0x00007254:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00007258:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000725c:    e59f2058    X ..    LDR      r2,[pc,#88]   ; [([Section 17] + 17008) = 0x72bc]  = 0x4270
+        0x00007260:    e3500000    ..P.    CMP      r0,#0
+        0x00007264:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007268:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000726c:    e3500000    ..P.    CMP      r0,#0
+        0x00007270:    e59f2044    D ..    LDR      r2,[pc,#68]   ; [([Section 17] + 17008) = 0x72bc]  = 0x4270
+        0x00007274:    e2833042    B0..    ADD      r3,r3,#0x42
+        0x00007278:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x0000727c:    e1a0c003    ....    MOV      r12,r3
+        0x00007280:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007284:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00007288:    e3500000    ..P.    CMP      r0,#0
+        0x0000728c:    e59f2028    ( ..    LDR      r2,[pc,#40]   ; [([Section 17] + 17008) = 0x72bc]  = 0x4270
+        0x00007290:    e3a00000    ....    MOV      r0,#0
+        0x00007294:    e2831042    B...    ADD      r1,r3,#0x42
+        0x00007298:    e1a0388c    .8..    LSL      r3,r12,#17
+        0x0000729c:    e1a038a3    .8..    LSR      r3,r3,#17
+        0x000072a0:    e1c130b0    .0..    STRH     r3,[r1,#0]
+        0x000072a4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000072a8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000072ac:    e283208c    . ..    ADD      r2,r3,#0x8c
+        0x000072b0:    e3e03000    .0..    MVN      r3,#0
+        0x000072b4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000072b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000072bc:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_cfg
+    $a
+        0x000072c0:    e1a0c00d    ....    MOV      r12,r13
+        0x000072c4:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000072c8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000072cc:    e1d120be    . ..    LDRH     r2,[r1,#0xe]
+        0x000072d0:    e1a04000    .@..    MOV      r4,r0
+        0x000072d4:    e1d130b8    .0..    LDRH     r3,[r1,#8]
+        0x000072d8:    e1a0e001    ....    MOV      r14,r1
+        0x000072dc:    e59fc2f8    ....    LDR      r12,[pc,#760]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x000072e0:    e06360a2    .`c.    RSB      r6,r3,r2,LSR #1
+        0x000072e4:    e5d12004    . ..    LDRB     r2,[r1,#4]
+        0x000072e8:    e356001e    ..V.    CMP      r6,#0x1e
+        0x000072ec:    92463001    .0F.    SUBLS    r3,r6,#1
+        0x000072f0:    83a0301e    .0..    MOVHI    r3,#0x1e
+        0x000072f4:    e3500000    ..P.    CMP      r0,#0
+        0x000072f8:    e5813084    .0..    STR      r3,[r1,#0x84]
+        0x000072fc:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007300:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007304:    e3500000    ..P.    CMP      r0,#0
+        0x00007308:    e59fc2cc    ....    LDR      r12,[pc,#716]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x0000730c:    e2833040    @0..    ADD      r3,r3,#0x40
+        0x00007310:    e5935000    .P..    LDR      r5,[r3,#0]
+        0x00007314:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007318:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x0000731c:    e3540000    ..T.    CMP      r4,#0
+        0x00007320:    e59fc2b4    ....    LDR      r12,[pc,#692]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007324:    e2830040    @...    ADD      r0,r3,#0x40
+        0x00007328:    e5d13005    .0..    LDRB     r3,[r1,#5]
+        0x0000732c:    e5911084    ....    LDR      r1,[r1,#0x84]
+        0x00007330:    e1a03b83    .;..    LSL      r3,r3,#23
+        0x00007334:    e1833c02    .<..    ORR      r3,r3,r2,LSL #24
+        0x00007338:    e1833201    .2..    ORR      r3,r3,r1,LSL #4
+        0x0000733c:    e1833005    .0..    ORR      r3,r3,r5
+        0x00007340:    e5803000    .0..    STR      r3,[r0,#0]
+        0x00007344:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007348:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x0000734c:    e3540000    ..T.    CMP      r4,#0
+        0x00007350:    e59fc284    ....    LDR      r12,[pc,#644]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007354:    e2833044    D0..    ADD      r3,r3,#0x44
+        0x00007358:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000735c:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007360:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007364:    e3540000    ..T.    CMP      r4,#0
+        0x00007368:    e59fc26c    l...    LDR      r12,[pc,#620]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x0000736c:    e2832044    D ..    ADD      r2,r3,#0x44
+        0x00007370:    e3813102    .1..    ORR      r3,r1,#0x80000000
+        0x00007374:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00007378:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x0000737c:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007380:    e3540000    ..T.    CMP      r4,#0
+        0x00007384:    e1de20b6    . ..    LDRH     r2,[r14,#6]
+        0x00007388:    e2831048    H...    ADD      r1,r3,#0x48
+        0x0000738c:    e59fc248    H...    LDR      r12,[pc,#584]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007390:    e1de30b8    .0..    LDRH     r3,[r14,#8]
+        0x00007394:    e2422001    . B.    SUB      r2,r2,#1
+        0x00007398:    e2433001    .0C.    SUB      r3,r3,#1
+        0x0000739c:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x000073a0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000073a4:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000073a8:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000073ac:    e3540000    ..T.    CMP      r4,#0
+        0x000073b0:    e5de200c    . ..    LDRB     r2,[r14,#0xc]
+        0x000073b4:    e283004c    L...    ADD      r0,r3,#0x4c
+        0x000073b8:    e1de31b0    .1..    LDRH     r3,[r14,#0x10]
+        0x000073bc:    e59fc218    ....    LDR      r12,[pc,#536]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x000073c0:    e1de11b4    ....    LDRH     r1,[r14,#0x14]
+        0x000073c4:    e1a03803    .8..    LSL      r3,r3,#16
+        0x000073c8:    e1833f82    .?..    ORR      r3,r3,r2,LSL #31
+        0x000073cc:    e1833001    .0..    ORR      r3,r3,r1
+        0x000073d0:    e5803000    .0..    STR      r3,[r0,#0]
+        0x000073d4:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000073d8:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000073dc:    e1de20be    . ..    LDRH     r2,[r14,#0xe]
+        0x000073e0:    e2831050    P...    ADD      r1,r3,#0x50
+        0x000073e4:    e1de31b2    .1..    LDRH     r3,[r14,#0x12]
+        0x000073e8:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x000073ec:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000073f0:    e5de3004    .0..    LDRB     r3,[r14,#4]
+        0x000073f4:    e3530000    ..S.    CMP      r3,#0
+        0x000073f8:    1a000015    ....    BNE      {pc} + 0x5c  ; 0x7454
+        0x000073fc:    e59fc1d8    ....    LDR      r12,[pc,#472]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007400:    e3540000    ..T.    CMP      r4,#0
+        0x00007404:    e1de21bc    .!..    LDRH     r2,[r14,#0x1c]
+        0x00007408:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x0000740c:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007410:    e3540000    ..T.    CMP      r4,#0
+        0x00007414:    e59fc1c0    ....    LDR      r12,[pc,#448]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007418:    e2831054    T...    ADD      r1,r3,#0x54
+        0x0000741c:    e5de301a    .0..    LDRB     r3,[r14,#0x1a]
+        0x00007420:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x00007424:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00007428:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x0000742c:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007430:    e5de1017    ....    LDRB     r1,[r14,#0x17]
+        0x00007434:    e283c058    X...    ADD      r12,r3,#0x58
+        0x00007438:    e5de3016    .0..    LDRB     r3,[r14,#0x16]
+        0x0000743c:    e5de0018    ....    LDRB     r0,[r14,#0x18]
+        0x00007440:    e5de2019    . ..    LDRB     r2,[r14,#0x19]
+        0x00007444:    e1a03f83    .?..    LSL      r3,r3,#31
+        0x00007448:    e1833f01    .?..    ORR      r3,r3,r1,LSL #30
+        0x0000744c:    e1833c00    .<..    ORR      r3,r3,r0,LSL #24
+        0x00007450:    ea000041    A...    B        {pc} + 0x10c  ; 0x755c
+        0x00007454:    e3530002    ..S.    CMP      r3,#2
+        0x00007458:    1a000042    B...    BNE      {pc} + 0x110  ; 0x7568
+        0x0000745c:    e59fc178    x...    LDR      r12,[pc,#376]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007460:    e3540000    ..T.    CMP      r4,#0
+        0x00007464:    e59e2020      ..    LDR      r2,[r14,#0x20]
+        0x00007468:    e59e1028    (...    LDR      r1,[r14,#0x28]
+        0x0000746c:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007470:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007474:    e3540000    ..T.    CMP      r4,#0
+        0x00007478:    e59fc15c    \...    LDR      r12,[pc,#348]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x0000747c:    e2830070    p...    ADD      r0,r3,#0x70
+        0x00007480:    e59e3024    $0..    LDR      r3,[r14,#0x24]
+        0x00007484:    e1a03503    .5..    LSL      r3,r3,#10
+        0x00007488:    e1833a02    .:..    ORR      r3,r3,r2,LSL #20
+        0x0000748c:    e1833001    .0..    ORR      r3,r3,r1
+        0x00007490:    e5803000    .0..    STR      r3,[r0,#0]
+        0x00007494:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007498:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x0000749c:    e3540000    ..T.    CMP      r4,#0
+        0x000074a0:    e59e202c    , ..    LDR      r2,[r14,#0x2c]
+        0x000074a4:    e2830074    t...    ADD      r0,r3,#0x74
+        0x000074a8:    e59e3030    00..    LDR      r3,[r14,#0x30]
+        0x000074ac:    e59fc128    (...    LDR      r12,[pc,#296]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x000074b0:    e59e1034    4...    LDR      r1,[r14,#0x34]
+        0x000074b4:    e1a03503    .5..    LSL      r3,r3,#10
+        0x000074b8:    e1833f02    .?..    ORR      r3,r3,r2,LSL #30
+        0x000074bc:    e1833001    .0..    ORR      r3,r3,r1
+        0x000074c0:    e5803000    .0..    STR      r3,[r0,#0]
+        0x000074c4:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000074c8:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000074cc:    e3540000    ..T.    CMP      r4,#0
+        0x000074d0:    e59e2038    8 ..    LDR      r2,[r14,#0x38]
+        0x000074d4:    e2830078    x...    ADD      r0,r3,#0x78
+        0x000074d8:    e59e303c    <0..    LDR      r3,[r14,#0x3c]
+        0x000074dc:    e59fc0f8    ....    LDR      r12,[pc,#248]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x000074e0:    e59e1040    @...    LDR      r1,[r14,#0x40]
+        0x000074e4:    e1a03503    .5..    LSL      r3,r3,#10
+        0x000074e8:    e1833f02    .?..    ORR      r3,r3,r2,LSL #30
+        0x000074ec:    e1833001    .0..    ORR      r3,r3,r1
+        0x000074f0:    e5803000    .0..    STR      r3,[r0,#0]
+        0x000074f4:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000074f8:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000074fc:    e3540000    ..T.    CMP      r4,#0
+        0x00007500:    e59e2044    D ..    LDR      r2,[r14,#0x44]
+        0x00007504:    e283507c    |P..    ADD      r5,r3,#0x7c
+        0x00007508:    e59e3048    H0..    LDR      r3,[r14,#0x48]
+        0x0000750c:    e59e0050    P...    LDR      r0,[r14,#0x50]
+        0x00007510:    e59e104c    L...    LDR      r1,[r14,#0x4c]
+        0x00007514:    e59fc0c0    ....    LDR      r12,[pc,#192]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007518:    e1a03803    .8..    LSL      r3,r3,#16
+        0x0000751c:    e1833d02    .=..    ORR      r3,r3,r2,LSL #26
+        0x00007520:    e1833000    .0..    ORR      r3,r3,r0
+        0x00007524:    e1833501    .5..    ORR      r3,r3,r1,LSL #10
+        0x00007528:    e5853000    .0..    STR      r3,[r5,#0]
+        0x0000752c:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007530:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007534:    e59e2058    X ..    LDR      r2,[r14,#0x58]
+        0x00007538:    e283c080    ....    ADD      r12,r3,#0x80
+        0x0000753c:    e59e305c    \0..    LDR      r3,[r14,#0x5c]
+        0x00007540:    e59e0054    T...    LDR      r0,[r14,#0x54]
+        0x00007544:    e59e1060    `...    LDR      r1,[r14,#0x60]
+        0x00007548:    e1a03b03    .;..    LSL      r3,r3,#22
+        0x0000754c:    e1833b82    .;..    ORR      r3,r3,r2,LSL #23
+        0x00007550:    e59e2064    d ..    LDR      r2,[r14,#0x64]
+        0x00007554:    e1833000    .0..    ORR      r3,r3,r0
+        0x00007558:    e1833a81    .:..    ORR      r3,r3,r1,LSL #21
+        0x0000755c:    e1833a02    .:..    ORR      r3,r3,r2,LSL #20
+        0x00007560:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x00007564:    ea00000a    ....    B        {pc} + 0x30  ; 0x7594
+        0x00007568:    e3530001    ..S.    CMP      r3,#1
+        0x0000756c:    1a000008    ....    BNE      {pc} + 0x28  ; 0x7594
+        0x00007570:    e59fc064    d...    LDR      r12,[pc,#100]  ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007574:    e3540000    ..T.    CMP      r4,#0
+        0x00007578:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x0000757c:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007580:    e2832060    ` ..    ADD      r2,r3,#0x60
+        0x00007584:    e5de3068    h0..    LDRB     r3,[r14,#0x68]
+        0x00007588:    e1a03e83    .>..    LSL      r3,r3,#29
+        0x0000758c:    e3833301    .3..    ORR      r3,r3,#0x4000000
+        0x00007590:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00007594:    e59fc040    @...    LDR      r12,[pc,#64]   ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x00007598:    e3540000    ..T.    CMP      r4,#0
+        0x0000759c:    e1a00004    ....    MOV      r0,r4
+        0x000075a0:    e2861002    ....    ADD      r1,r6,#2
+        0x000075a4:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000075a8:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000075ac:    e3540000    ..T.    CMP      r4,#0
+        0x000075b0:    e59fc024    $...    LDR      r12,[pc,#36]   ; [([Section 17] + 17008) = 0x75dc]  = 0x4270
+        0x000075b4:    e2832088    . ..    ADD      r2,r3,#0x88
+        0x000075b8:    e59e306c    l0..    LDR      r3,[r14,#0x6c]
+        0x000075bc:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000075c0:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000075c4:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000075c8:    e283208c    . ..    ADD      r2,r3,#0x8c
+        0x000075cc:    e59e3070    p0..    LDR      r3,[r14,#0x70]
+        0x000075d0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000075d4:    ebfffffe    ....    BL       LCDC_set_tcon0_int_line  ; 0x709c Section #1
+        0x000075d8:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000075dc:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_select_src
+    $a
+        0x000075e0:    e1a0c00d    ....    MOV      r12,r13
+        0x000075e4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000075e8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000075ec:    e59f3070    p0..    LDR      r3,[pc,#112]  ; [([Section 17] + 17008) = 0x7664]  = 0x4270
+        0x000075f0:    e3500000    ..P.    CMP      r0,#0
+        0x000075f4:    e2412001    . A.    SUB      r2,r1,#1
+        0x000075f8:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x000075fc:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007600:    e2833040    @0..    ADD      r3,r3,#0x40
+        0x00007604:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00007608:    e3c3c501    ....    BIC      r12,r3,#0x400000
+        0x0000760c:    e3ccc003    ....    BIC      r12,r12,#3
+        0x00007610:    e3520003    ..R.    CMP      r2,#3
+        0x00007614:    979ff102    ....    LDRLS    pc,[pc,r2,LSL #2]
+        0x00007618:    ea000009    ....    B        {pc} + 0x2c  ; 0x7644
+    $d
+        0x0000761c:    0000762c    ,v..    DCD    30252 ; [Section 1]
+        0x00007620:    00007634    4v..    DCD    30260 ; [Section 1]
+        0x00007624:    00007640    @v..    DCD    30272 ; [Section 1]
+        0x00007628:    0000763c    <v..    DCD    30268 ; [Section 1]
+    $a
+        0x0000762c:    e38cc001    ....    ORR      r12,r12,#1
+        0x00007630:    ea000003    ....    B        {pc} + 0x14  ; 0x7644
+        0x00007634:    e38cc002    ....    ORR      r12,r12,#2
+        0x00007638:    ea000001    ....    B        {pc} + 0xc  ; 0x7644
+        0x0000763c:    e38cc501    ....    ORR      r12,r12,#0x400000
+        0x00007640:    e38cc003    ....    ORR      r12,r12,#3
+        0x00007644:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17008) = 0x7664]  = 0x4270
+        0x00007648:    e3500000    ..P.    CMP      r0,#0
+        0x0000764c:    e3a00000    ....    MOV      r0,#0
+        0x00007650:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00007654:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007658:    e2833040    @0..    ADD      r3,r3,#0x40
+        0x0000765c:    e583c000    ....    STR      r12,[r3,#0]
+        0x00007660:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00007664:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_in_valid_regn
+    $a
+        0x00007668:    e1a0c00d    ....    MOV      r12,r13
+        0x0000766c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00007670:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007674:    e59f2050    P ..    LDR      r2,[pc,#80]   ; [([Section 17] + 17008) = 0x76cc]  = 0x4270
+        0x00007678:    e3500000    ..P.    CMP      r0,#0
+        0x0000767c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007680:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00007684:    e3500000    ..P.    CMP      r0,#0
+        0x00007688:    e59f203c    < ..    LDR      r2,[pc,#60]   ; [([Section 17] + 17008) = 0x76cc]  = 0x4270
+        0x0000768c:    e28330fc    .0..    ADD      r3,r3,#0xfc
+        0x00007690:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00007694:    e7e90853    S...    UBFX     r0,r3,#16,#10
+        0x00007698:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000769c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000076a0:    e1500001    ..P.    CMP      r0,r1
+        0x000076a4:    e2833050    P0..    ADD      r3,r3,#0x50
+        0x000076a8:    33a00001    ...3    MOVCC    r0,#1
+        0x000076ac:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x000076b0:    389da800    ...8    LDMCC    r13,{r11,r13,pc}
+        0x000076b4:    e7eb38d3    .8..    UBFX     r3,r3,#17,#12
+        0x000076b8:    e2433001    .0C.    SUB      r3,r3,#1
+        0x000076bc:    e1500003    ..P.    CMP      r0,r3
+        0x000076c0:    93a00000    ....    MOVLS    r0,#0
+        0x000076c4:    83a00001    ....    MOVHI    r0,#1
+        0x000076c8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000076cc:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_get_width
+    $a
+        0x000076d0:    e1a0c00d    ....    MOV      r12,r13
+        0x000076d4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000076d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000076dc:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x7700]  = 0x4270
+        0x000076e0:    e3500000    ..P.    CMP      r0,#0
+        0x000076e4:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x000076e8:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x000076ec:    e2830048    H...    ADD      r0,r3,#0x48
+        0x000076f0:    e5900000    ....    LDR      r0,[r0,#0]
+        0x000076f4:    e7ea0850    P...    UBFX     r0,r0,#16,#11
+        0x000076f8:    e2800001    ....    ADD      r0,r0,#1
+        0x000076fc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00007700:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_get_height
+    $a
+        0x00007704:    e1a0c00d    ....    MOV      r12,r13
+        0x00007708:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000770c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007710:    e59f3020     0..    LDR      r3,[pc,#32]   ; [([Section 17] + 17008) = 0x7738]  = 0x4270
+        0x00007714:    e3500000    ..P.    CMP      r0,#0
+        0x00007718:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000771c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007720:    e2830048    H...    ADD      r0,r3,#0x48
+        0x00007724:    e5900000    ....    LDR      r0,[r0,#0]
+        0x00007728:    e1a00a80    ....    LSL      r0,r0,#21
+        0x0000772c:    e1a00aa0    ....    LSR      r0,r0,#21
+        0x00007730:    e2800001    ....    ADD      r0,r0,#1
+        0x00007734:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00007738:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON0_set_dclk_div
+    $a
+        0x0000773c:    e1a0c00d    ....    MOV      r12,r13
+        0x00007740:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00007744:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007748:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17008) = 0x778c]  = 0x4270
+        0x0000774c:    e3500000    ..P.    CMP      r0,#0
+        0x00007750:    e20120ff    . ..    AND      r2,r1,#0xff
+        0x00007754:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00007758:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000775c:    e3500000    ..P.    CMP      r0,#0
+        0x00007760:    e2833044    D0..    ADD      r3,r3,#0x44
+        0x00007764:    e593c000    ....    LDR      r12,[r3,#0]
+        0x00007768:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x778c]  = 0x4270
+        0x0000776c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00007770:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00007774:    e2830044    D...    ADD      r0,r3,#0x44
+        0x00007778:    e3cc30ff    .0..    BIC      r3,r12,#0xff
+        0x0000777c:    e1833002    .0..    ORR      r3,r3,r2
+        0x00007780:    e5803000    .0..    STR      r3,[r0,#0]
+        0x00007784:    e3a00000    ....    MOV      r0,#0
+        0x00007788:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000778c:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON1_open
+    $a
+        0x00007790:    e1a0c00d    ....    MOV      r12,r13
+        0x00007794:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00007798:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000779c:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [([Section 17] + 17008) = 0x77dc]  = 0x4270
+        0x000077a0:    e3500000    ..P.    CMP      r0,#0
+        0x000077a4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000077a8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000077ac:    e3500000    ..P.    CMP      r0,#0
+        0x000077b0:    e59f2024    $ ..    LDR      r2,[pc,#36]   ; [([Section 17] + 17008) = 0x77dc]  = 0x4270
+        0x000077b4:    e3a00000    ....    MOV      r0,#0
+        0x000077b8:    e2833092    .0..    ADD      r3,r3,#0x92
+        0x000077bc:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x000077c0:    e1a01003    ....    MOV      r1,r3
+        0x000077c4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000077c8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000077cc:    e2832092    . ..    ADD      r2,r3,#0x92
+        0x000077d0:    e3813902    .9..    ORR      r3,r1,#0x8000
+        0x000077d4:    e1c230b0    .0..    STRH     r3,[r2,#0]
+        0x000077d8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000077dc:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON1_close
+    $a
+        0x000077e0:    e1a0c00d    ....    MOV      r12,r13
+        0x000077e4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000077e8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000077ec:    e59f2084    . ..    LDR      r2,[pc,#132]  ; [([Section 17] + 17008) = 0x7878]  = 0x4270
+        0x000077f0:    e3500000    ..P.    CMP      r0,#0
+        0x000077f4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000077f8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000077fc:    e3500000    ..P.    CMP      r0,#0
+        0x00007800:    e59f2070    p ..    LDR      r2,[pc,#112]  ; [([Section 17] + 17008) = 0x7878]  = 0x4270
+        0x00007804:    e2833092    .0..    ADD      r3,r3,#0x92
+        0x00007808:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x0000780c:    e1a0c003    ....    MOV      r12,r3
+        0x00007810:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007814:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00007818:    e3500000    ..P.    CMP      r0,#0
+        0x0000781c:    e59f2054    T ..    LDR      r2,[pc,#84]   ; [([Section 17] + 17008) = 0x7878]  = 0x4270
+        0x00007820:    e2831092    ....    ADD      r1,r3,#0x92
+        0x00007824:    e1a0388c    .8..    LSL      r3,r12,#17
+        0x00007828:    e1a038a3    .8..    LSR      r3,r3,#17
+        0x0000782c:    e1c130b0    .0..    STRH     r3,[r1,#0]
+        0x00007830:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007834:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00007838:    e3500000    ..P.    CMP      r0,#0
+        0x0000783c:    e59f2034    4 ..    LDR      r2,[pc,#52]   ; [([Section 17] + 17008) = 0x7878]  = 0x4270
+        0x00007840:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00007844:    05922000    . ..    LDREQ    r2,[r2,#0]
+        0x00007848:    15922004    . ..    LDRNE    r2,[r2,#4]
+        0x0000784c:    e3c33001    .0..    BIC      r3,r3,#1
+        0x00007850:    e3500000    ..P.    CMP      r0,#0
+        0x00007854:    e3a00000    ....    MOV      r0,#0
+        0x00007858:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000785c:    e59f2014    . ..    LDR      r2,[pc,#20]   ; [([Section 17] + 17008) = 0x7878]  = 0x4270
+        0x00007860:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00007864:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00007868:    e28320f4    . ..    ADD      r2,r3,#0xf4
+        0x0000786c:    e3e03000    .0..    MVN      r3,#0
+        0x00007870:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00007874:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00007878:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON1_cfg
+    $a
+        0x0000787c:    e1a0c00d    ....    MOV      r12,r13
+        0x00007880:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00007884:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007888:    e1d121b4    .!..    LDRH     r2,[r1,#0x14]
+        0x0000788c:    e1d130b6    .0..    LDRH     r3,[r1,#6]
+        0x00007890:    e06330a2    .0c.    RSB      r3,r3,r2,LSR #1
+        0x00007894:    e2435002    .PC.    SUB      r5,r3,#2
+        0x00007898:    e355001e    ..U.    CMP      r5,#0x1e
+        0x0000789c:    92433003    .0C.    SUBLS    r3,r3,#3
+        0x000078a0:    83a0301e    .0..    MOVHI    r3,#0x1e
+        0x000078a4:    e5c13024    $0..    STRB     r3,[r1,#0x24]
+        0x000078a8:    e1d130d3    .0..    LDRSB    r3,[r1,#3]
+        0x000078ac:    e3530000    ..S.    CMP      r3,#0
+        0x000078b0:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x78d0
+        0x000078b4:    e59fc218    ....    LDR      r12,[pc,#536]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x000078b8:    e3500000    ..P.    CMP      r0,#0
+        0x000078bc:    059c2000    . ..    LDREQ    r2,[r12,#0]
+        0x000078c0:    159c2004    . ..    LDRNE    r2,[r12,#4]
+        0x000078c4:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x000078c8:    e3833001    .0..    ORR      r3,r3,#1
+        0x000078cc:    ea000005    ....    B        {pc} + 0x1c  ; 0x78e8
+        0x000078d0:    e59fc1fc    ....    LDR      r12,[pc,#508]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x000078d4:    e3500000    ..P.    CMP      r0,#0
+        0x000078d8:    059c2000    . ..    LDREQ    r2,[r12,#0]
+        0x000078dc:    159c2004    . ..    LDRNE    r2,[r12,#4]
+        0x000078e0:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x000078e4:    e3c33001    .0..    BIC      r3,r3,#1
+        0x000078e8:    e59fc1e4    ....    LDR      r12,[pc,#484]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x000078ec:    e3500000    ..P.    CMP      r0,#0
+        0x000078f0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000078f4:    e5d14024    $@..    LDRB     r4,[r1,#0x24]
+        0x000078f8:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000078fc:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007900:    e59fc1cc    ....    LDR      r12,[pc,#460]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x00007904:    e2832090    . ..    ADD      r2,r3,#0x90
+        0x00007908:    e1d130d0    .0..    LDRSB    r3,[r1,#0]
+        0x0000790c:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x00007910:    e3530000    ..S.    CMP      r3,#0
+        0x00007914:    e3c22601    .&..    BIC      r2,r2,#0x100000
+        0x00007918:    e3c22e1f    ....    BIC      r2,r2,#0x1f0
+        0x0000791c:    13822601    .&..    ORRNE    r2,r2,#0x100000
+        0x00007920:    e3500000    ..P.    CMP      r0,#0
+        0x00007924:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007928:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x0000792c:    e3500000    ..P.    CMP      r0,#0
+        0x00007930:    e59fc19c    ....    LDR      r12,[pc,#412]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x00007934:    e283e090    ....    ADD      r14,r3,#0x90
+        0x00007938:    e204301f    .0..    AND      r3,r4,#0x1f
+        0x0000793c:    e1823203    .2..    ORR      r3,r2,r3,LSL #4
+        0x00007940:    e58e3000    .0..    STR      r3,[r14,#0]
+        0x00007944:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007948:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x0000794c:    e3500000    ..P.    CMP      r0,#0
+        0x00007950:    e1d120b4    . ..    LDRH     r2,[r1,#4]
+        0x00007954:    e283e094    ....    ADD      r14,r3,#0x94
+        0x00007958:    e1d130b6    .0..    LDRH     r3,[r1,#6]
+        0x0000795c:    e2422001    . B.    SUB      r2,r2,#1
+        0x00007960:    e59fc16c    l...    LDR      r12,[pc,#364]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x00007964:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00007968:    e1a02a02    .*..    LSL      r2,r2,#20
+        0x0000796c:    e1a03a03    .:..    LSL      r3,r3,#20
+        0x00007970:    e1a02a22    "*..    LSR      r2,r2,#20
+        0x00007974:    e1a03a23    #:..    LSR      r3,r3,#20
+        0x00007978:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x0000797c:    e58e3000    .0..    STR      r3,[r14,#0]
+        0x00007980:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007984:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007988:    e3500000    ..P.    CMP      r0,#0
+        0x0000798c:    e1d120b8    . ..    LDRH     r2,[r1,#8]
+        0x00007990:    e283e098    ....    ADD      r14,r3,#0x98
+        0x00007994:    e1d130ba    .0..    LDRH     r3,[r1,#0xa]
+        0x00007998:    e2422001    . B.    SUB      r2,r2,#1
+        0x0000799c:    e59fc130    0...    LDR      r12,[pc,#304]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x000079a0:    e2433001    .0C.    SUB      r3,r3,#1
+        0x000079a4:    e1a02a02    .*..    LSL      r2,r2,#20
+        0x000079a8:    e1a03a03    .:..    LSL      r3,r3,#20
+        0x000079ac:    e1a02a22    "*..    LSR      r2,r2,#20
+        0x000079b0:    e1a03a23    #:..    LSR      r3,r3,#20
+        0x000079b4:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x000079b8:    e58e3000    .0..    STR      r3,[r14,#0]
+        0x000079bc:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000079c0:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x000079c4:    e3500000    ..P.    CMP      r0,#0
+        0x000079c8:    e1d120bc    . ..    LDRH     r2,[r1,#0xc]
+        0x000079cc:    e283e09c    ....    ADD      r14,r3,#0x9c
+        0x000079d0:    e1d130be    .0..    LDRH     r3,[r1,#0xe]
+        0x000079d4:    e2422001    . B.    SUB      r2,r2,#1
+        0x000079d8:    e59fc0f4    ....    LDR      r12,[pc,#244]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x000079dc:    e2433001    .0C.    SUB      r3,r3,#1
+        0x000079e0:    e1a02a02    .*..    LSL      r2,r2,#20
+        0x000079e4:    e1a03a03    .:..    LSL      r3,r3,#20
+        0x000079e8:    e1a02a22    "*..    LSR      r2,r2,#20
+        0x000079ec:    e1a03a23    #:..    LSR      r3,r3,#20
+        0x000079f0:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x000079f4:    e58e3000    .0..    STR      r3,[r14,#0]
+        0x000079f8:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x000079fc:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007a00:    e3500000    ..P.    CMP      r0,#0
+        0x00007a04:    e1d121b0    .!..    LDRH     r2,[r1,#0x10]
+        0x00007a08:    e283e0a0    ....    ADD      r14,r3,#0xa0
+        0x00007a0c:    e1d131b2    .1..    LDRH     r3,[r1,#0x12]
+        0x00007a10:    e59fc0bc    ....    LDR      r12,[pc,#188]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x00007a14:    e1a02a02    .*..    LSL      r2,r2,#20
+        0x00007a18:    e1a03a03    .:..    LSL      r3,r3,#20
+        0x00007a1c:    e1a02a22    "*..    LSR      r2,r2,#20
+        0x00007a20:    e1a03a23    #:..    LSR      r3,r3,#20
+        0x00007a24:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x00007a28:    e58e3000    .0..    STR      r3,[r14,#0]
+        0x00007a2c:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007a30:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007a34:    e3500000    ..P.    CMP      r0,#0
+        0x00007a38:    e1d121b4    .!..    LDRH     r2,[r1,#0x14]
+        0x00007a3c:    e283e0a4    ....    ADD      r14,r3,#0xa4
+        0x00007a40:    e1d131b6    .1..    LDRH     r3,[r1,#0x16]
+        0x00007a44:    e59fc088    ....    LDR      r12,[pc,#136]  ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x00007a48:    e1a02a02    .*..    LSL      r2,r2,#20
+        0x00007a4c:    e1a03a03    .:..    LSL      r3,r3,#20
+        0x00007a50:    e1a02a22    "*..    LSR      r2,r2,#20
+        0x00007a54:    e1a03a23    #:..    LSR      r3,r3,#20
+        0x00007a58:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x00007a5c:    e58e3000    .0..    STR      r3,[r14,#0]
+        0x00007a60:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007a64:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007a68:    e3500000    ..P.    CMP      r0,#0
+        0x00007a6c:    e1d121ba    .!..    LDRH     r2,[r1,#0x1a]
+        0x00007a70:    e283e0a8    ....    ADD      r14,r3,#0xa8
+        0x00007a74:    e1d131b8    .1..    LDRH     r3,[r1,#0x18]
+        0x00007a78:    e59fc054    T...    LDR      r12,[pc,#84]   ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x00007a7c:    e1a02b02    .+..    LSL      r2,r2,#22
+        0x00007a80:    e1a03b03    .;..    LSL      r3,r3,#22
+        0x00007a84:    e1a02b22    "+..    LSR      r2,r2,#22
+        0x00007a88:    e1a03b23    #;..    LSR      r3,r3,#22
+        0x00007a8c:    e1833802    .8..    ORR      r3,r3,r2,LSL #16
+        0x00007a90:    e58e3000    .0..    STR      r3,[r14,#0]
+        0x00007a94:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007a98:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007a9c:    e3500000    ..P.    CMP      r0,#0
+        0x00007aa0:    e59fc02c    ,...    LDR      r12,[pc,#44]   ; [([Section 17] + 17008) = 0x7ad4]  = 0x4270
+        0x00007aa4:    e28320f0    . ..    ADD      r2,r3,#0xf0
+        0x00007aa8:    e591301c    .0..    LDR      r3,[r1,#0x1c]
+        0x00007aac:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00007ab0:    059c3000    .0..    LDREQ    r3,[r12,#0]
+        0x00007ab4:    159c3004    .0..    LDRNE    r3,[r12,#4]
+        0x00007ab8:    e28320f4    . ..    ADD      r2,r3,#0xf4
+        0x00007abc:    e5913020     0..    LDR      r3,[r1,#0x20]
+        0x00007ac0:    e2851002    ....    ADD      r1,r5,#2
+        0x00007ac4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00007ac8:    ebfffffe    ....    BL       LCDC_set_tcon1_int_line  ; 0x6fec Section #1
+        0x00007acc:    e3a00000    ....    MOV      r0,#0
+        0x00007ad0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00007ad4:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON1_cfg_ex
+    $a
+        0x00007ad8:    e1a0c00d    ....    MOV      r12,r13
+        0x00007adc:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00007ae0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007ae4:    e24dd028    (.M.    SUB      r13,r13,#0x28
+        0x00007ae8:    e1a03001    .0..    MOV      r3,r1
+        0x00007aec:    e5916070    p`..    LDR      r6,[r1,#0x70]
+        0x00007af0:    e1d321b0    .!..    LDRH     r2,[r3,#0x10]
+        0x00007af4:    e3a04000    .@..    MOV      r4,#0
+        0x00007af8:    e1d3c0b6    ....    LDRH     r12,[r3,#6]
+        0x00007afc:    e24b1044    D.K.    SUB      r1,r11,#0x44
+        0x00007b00:    e14b23b4    .#K.    STRH     r2,[r11,#-0x34]
+        0x00007b04:    e1d351b4    .Q..    LDRH     r5,[r3,#0x14]
+        0x00007b08:    e1d320b8    . ..    LDRH     r2,[r3,#8]
+        0x00007b0c:    e14b53b2    .SK.    STRH     r5,[r11,#-0x32]
+        0x00007b10:    e1d370be    .p..    LDRH     r7,[r3,#0xe]
+        0x00007b14:    e5d3e01a    ....    LDRB     r14,[r3,#0x1a]
+        0x00007b18:    e14b73b0    .sK.    STRH     r7,[r11,#-0x30]
+        0x00007b1c:    e1d371b2    .q..    LDRH     r7,[r3,#0x12]
+        0x00007b20:    e593506c    lP..    LDR      r5,[r3,#0x6c]
+        0x00007b24:    e14bc3b8    ..K.    STRH     r12,[r11,#-0x38]
+        0x00007b28:    e14b72be    .rK.    STRH     r7,[r11,#-0x2e]
+        0x00007b2c:    e1d331bc    .1..    LDRH     r3,[r3,#0x1c]
+        0x00007b30:    e14b23b6    .#K.    STRH     r2,[r11,#-0x36]
+        0x00007b34:    e14be2bc    ..K.    STRH     r14,[r11,#-0x2c]
+        0x00007b38:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007b3c:    e3a03001    .0..    MOV      r3,#1
+        0x00007b40:    e50b5028    (P..    STR      r5,[r11,#-0x28]
+        0x00007b44:    e54b3041    A0K.    STRB     r3,[r11,#-0x41]
+        0x00007b48:    e50b6024    $`..    STR      r6,[r11,#-0x24]
+        0x00007b4c:    e54b4044    D@K.    STRB     r4,[r11,#-0x44]
+        0x00007b50:    e54b4043    C@K.    STRB     r4,[r11,#-0x43]
+        0x00007b54:    e54b3042    B0K.    STRB     r3,[r11,#-0x42]
+        0x00007b58:    e14bc4b0    ..K.    STRH     r12,[r11,#-0x40]
+        0x00007b5c:    e14b23be    .#K.    STRH     r2,[r11,#-0x3e]
+        0x00007b60:    e14bc3bc    ..K.    STRH     r12,[r11,#-0x3c]
+        0x00007b64:    e14b23ba    .#K.    STRH     r2,[r11,#-0x3a]
+        0x00007b68:    ebfffffe    ....    BL       TCON1_cfg  ; 0x787c Section #1
+        0x00007b6c:    e1a00004    ....    MOV      r0,r4
+        0x00007b70:    e24bd01c    ..K.    SUB      r13,r11,#0x1c
+        0x00007b74:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    TCON1_set_hdmi_mode
+        0x00007b78:    e1a0c00d    ....    MOV      r12,r13
+        0x00007b7c:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x00007b80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00007b84:    e24dd02c    ,.M.    SUB      r13,r13,#0x2c
+        0x00007b88:    e351000a    ..Q.    CMP      r1,#0xa
+        0x00007b8c:    979ff101    ....    LDRLS    pc,[pc,r1,LSL #2]
+        0x00007b90:    ea00011a    ....    B        {pc} + 0x470  ; 0x8000
+    $d
+        0x00007b94:    00007bc0    .{..    DCD    31680 ; [Section 1]
+        0x00007b98:    00007c28    (|..    DCD    31784 ; [Section 1]
+        0x00007b9c:    00007c9c    .|..    DCD    31900 ; [Section 1]
+        0x00007ba0:    00007d04    .}..    DCD    32004 ; [Section 1]
+        0x00007ba4:    00007d6c    l}..    DCD    32108 ; [Section 1]
+        0x00007ba8:    00007dc4    .}..    DCD    32196 ; [Section 1]
+        0x00007bac:    00007e2c    ,~..    DCD    32300 ; [Section 1]
+        0x00007bb0:    00007e8c    .~..    DCD    32396 ; [Section 1]
+        0x00007bb4:    00007efc    .~..    DCD    32508 ; [Section 1]
+        0x00007bb8:    00007f4c    L...    DCD    32588 ; [Section 1]
+        0x00007bbc:    00007fa0    ....    DCD    32672 ; [Section 1]
+    $a
+        0x00007bc0:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007bc4:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007bc8:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x00007bcc:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007bd0:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007bd4:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007bd8:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x00007bdc:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007be0:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007be4:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007be8:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x00007bec:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007bf0:    e3a03076    v0..    MOV      r3,#0x76
+        0x00007bf4:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007bf8:    e3a03011    .0..    MOV      r3,#0x11
+        0x00007bfc:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007c00:    e3a03002    .0..    MOV      r3,#2
+        0x00007c04:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007c08:    e3a0303d    =0..    MOV      r3,#0x3d
+        0x00007c0c:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007c10:    e3a03001    .0..    MOV      r3,#1
+        0x00007c14:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007c18:    e2833fd6    .?..    ADD      r3,r3,#0x358
+        0x00007c1c:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007c20:    e2433f53    S?C.    SUB      r3,r3,#0x14c
+        0x00007c24:    ea000018    ....    B        {pc} + 0x68  ; 0x7c8c
+        0x00007c28:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007c2c:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007c30:    e3a03e12    .>..    MOV      r3,#0x120
+        0x00007c34:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007c38:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007c3c:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007c40:    e3a03e12    .>..    MOV      r3,#0x120
+        0x00007c44:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007c48:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007c4c:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007c50:    e3a03e12    .>..    MOV      r3,#0x120
+        0x00007c54:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007c58:    e3a03083    .0..    MOV      r3,#0x83
+        0x00007c5c:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007c60:    e3a03015    .0..    MOV      r3,#0x15
+        0x00007c64:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007c68:    e3a03002    .0..    MOV      r3,#2
+        0x00007c6c:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007c70:    e3a0303e    >0..    MOV      r3,#0x3e
+        0x00007c74:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007c78:    e3a03001    .0..    MOV      r3,#1
+        0x00007c7c:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007c80:    e300335f    _3..    MOV      r3,#0x35f
+        0x00007c84:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007c88:    e24330ee    .0C.    SUB      r3,r3,#0xee
+        0x00007c8c:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x00007c90:    e3a03301    .3..    MOV      r3,#0x4000000
+        0x00007c94:    e50b3020     0..    STR      r3,[r11,#-0x20]
+        0x00007c98:    ea0000d8    ....    B        {pc} + 0x368  ; 0x8000
+        0x00007c9c:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007ca0:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007ca4:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00007ca8:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007cac:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007cb0:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007cb4:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00007cb8:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007cbc:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007cc0:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007cc4:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00007cc8:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007ccc:    e3a03079    y0..    MOV      r3,#0x79
+        0x00007cd0:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007cd4:    e3a03023    #0..    MOV      r3,#0x23
+        0x00007cd8:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007cdc:    e3a03005    .0..    MOV      r3,#5
+        0x00007ce0:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007ce4:    e3a0303d    =0..    MOV      r3,#0x3d
+        0x00007ce8:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007cec:    e3a03000    .0..    MOV      r3,#0
+        0x00007cf0:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007cf4:    e3003359    Y3..    MOV      r3,#0x359
+        0x00007cf8:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007cfc:    e28330c1    .0..    ADD      r3,r3,#0xc1
+        0x00007d00:    eaffffe1    ....    B        {pc} - 0x74  ; 0x7c8c
+        0x00007d04:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007d08:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007d0c:    e3a03d09    .=..    MOV      r3,#0x240
+        0x00007d10:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007d14:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007d18:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007d1c:    e3a03d09    .=..    MOV      r3,#0x240
+        0x00007d20:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007d24:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007d28:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007d2c:    e3a03d09    .=..    MOV      r3,#0x240
+        0x00007d30:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007d34:    e3a03083    .0..    MOV      r3,#0x83
+        0x00007d38:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007d3c:    e3a0302b    +0..    MOV      r3,#0x2b
+        0x00007d40:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007d44:    e3a03004    .0..    MOV      r3,#4
+        0x00007d48:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007d4c:    e3a0303f    ?0..    MOV      r3,#0x3f
+        0x00007d50:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007d54:    e3a03000    .0..    MOV      r3,#0
+        0x00007d58:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007d5c:    e300335f    _3..    MOV      r3,#0x35f
+        0x00007d60:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007d64:    e30034e2    .4..    MOV      r3,#0x4e2
+        0x00007d68:    eaffffc7    ....    B        {pc} - 0xdc  ; 0x7c8c
+        0x00007d6c:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00007d70:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007d74:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007d78:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007d7c:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00007d80:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007d84:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007d88:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007d8c:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00007d90:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007d94:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007d98:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007d9c:    e3a03018    .0..    MOV      r3,#0x18
+        0x00007da0:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007da4:    e3a03004    .0..    MOV      r3,#4
+        0x00007da8:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007dac:    e3a03027    '0..    MOV      r3,#0x27
+        0x00007db0:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007db4:    e3a03000    .0..    MOV      r3,#0
+        0x00007db8:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007dbc:    e30037bb    .7..    MOV      r3,#0x7bb
+        0x00007dc0:    ea000014    ....    B        {pc} + 0x58  ; 0x7e18
+        0x00007dc4:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00007dc8:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007dcc:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007dd0:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007dd4:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00007dd8:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007ddc:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007de0:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007de4:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00007de8:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007dec:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00007df0:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007df4:    e3a03018    .0..    MOV      r3,#0x18
+        0x00007df8:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007dfc:    e3a03004    .0..    MOV      r3,#4
+        0x00007e00:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007e04:    e3a03027    '0..    MOV      r3,#0x27
+        0x00007e08:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007e0c:    e3a03000    .0..    MOV      r3,#0
+        0x00007e10:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007e14:    e3003671    q6..    MOV      r3,#0x671
+        0x00007e18:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007e1c:    e3003103    .1..    MOV      r3,#0x103
+        0x00007e20:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007e24:    e30035dc    .5..    MOV      r3,#0x5dc
+        0x00007e28:    ea000030    0...    B        {pc} + 0xc8  ; 0x7ef0
+        0x00007e2c:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007e30:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007e34:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00007e38:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007e3c:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007e40:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007e44:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00007e48:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007e4c:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007e50:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007e54:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00007e58:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007e5c:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00007e60:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007e64:    e3a03013    .0..    MOV      r3,#0x13
+        0x00007e68:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007e6c:    e3a03004    .0..    MOV      r3,#4
+        0x00007e70:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007e74:    e3a0302b    +0..    MOV      r3,#0x2b
+        0x00007e78:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007e7c:    e3a03001    .0..    MOV      r3,#1
+        0x00007e80:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007e84:    e3003a4f    O:..    MOV      r3,#0xa4f
+        0x00007e88:    ea000016    ....    B        {pc} + 0x60  ; 0x7ee8
+        0x00007e8c:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007e90:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007e94:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00007e98:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00007e9c:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007ea0:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007ea4:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00007ea8:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00007eac:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007eb0:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007eb4:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00007eb8:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00007ebc:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00007ec0:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007ec4:    e3a03013    .0..    MOV      r3,#0x13
+        0x00007ec8:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007ecc:    e3a03004    .0..    MOV      r3,#4
+        0x00007ed0:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007ed4:    e3a0302b    +0..    MOV      r3,#0x2b
+        0x00007ed8:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007edc:    e3a03001    .0..    MOV      r3,#1
+        0x00007ee0:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007ee4:    e3003897    .8..    MOV      r3,#0x897
+        0x00007ee8:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007eec:    e3003465    e4..    MOV      r3,#0x465
+        0x00007ef0:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x00007ef4:    e3a03407    .4..    MOV      r3,#0x7000000
+        0x00007ef8:    eaffff65    e...    B        {pc} - 0x264  ; 0x7c94
+        0x00007efc:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007f00:    e3002438    8$..    MOV      r2,#0x438
+        0x00007f04:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007f08:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007f0c:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007f10:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00007f14:    e14b22be    ."K.    STRH     r2,[r11,#-0x2e]
+        0x00007f18:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007f1c:    e3a03028    (0..    MOV      r3,#0x28
+        0x00007f20:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007f24:    e3a03004    .0..    MOV      r3,#4
+        0x00007f28:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007f2c:    e3a0302b    +0..    MOV      r3,#0x2b
+        0x00007f30:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007f34:    e3a03000    .0..    MOV      r3,#0
+        0x00007f38:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007f3c:    e3003abd    .:..    MOV      r3,#0xabd
+        0x00007f40:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007f44:    e30038ca    .8..    MOV      r3,#0x8ca
+        0x00007f48:    ea000027    '...    B        {pc} + 0xa4  ; 0x7fec
+        0x00007f4c:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007f50:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007f54:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007f58:    e3002438    8$..    MOV      r2,#0x438
+        0x00007f5c:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007f60:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00007f64:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007f68:    e3a03028    (0..    MOV      r3,#0x28
+        0x00007f6c:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007f70:    e3a03004    .0..    MOV      r3,#4
+        0x00007f74:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007f78:    e3a0302b    +0..    MOV      r3,#0x2b
+        0x00007f7c:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007f80:    e3a03000    .0..    MOV      r3,#0
+        0x00007f84:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007f88:    e3003a4f    O:..    MOV      r3,#0xa4f
+        0x00007f8c:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007f90:    e2433f61    a?C.    SUB      r3,r3,#0x184
+        0x00007f94:    e14b22be    ."K.    STRH     r2,[r11,#-0x2e]
+        0x00007f98:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00007f9c:    ea000012    ....    B        {pc} + 0x50  ; 0x7fec
+        0x00007fa0:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00007fa4:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00007fa8:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00007fac:    e3002438    8$..    MOV      r2,#0x438
+        0x00007fb0:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00007fb4:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00007fb8:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00007fbc:    e3a03028    (0..    MOV      r3,#0x28
+        0x00007fc0:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00007fc4:    e3a03004    .0..    MOV      r3,#4
+        0x00007fc8:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00007fcc:    e3a0302b    +0..    MOV      r3,#0x2b
+        0x00007fd0:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00007fd4:    e3a03000    .0..    MOV      r3,#0
+        0x00007fd8:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00007fdc:    e3003897    .8..    MOV      r3,#0x897
+        0x00007fe0:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00007fe4:    e2833033    30..    ADD      r3,r3,#0x33
+        0x00007fe8:    e14b22be    ."K.    STRH     r2,[r11,#-0x2e]
+        0x00007fec:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x00007ff0:    e3a03407    .4..    MOV      r3,#0x7000000
+        0x00007ff4:    e14b23b6    .#K.    STRH     r2,[r11,#-0x36]
+        0x00007ff8:    e50b3020     0..    STR      r3,[r11,#-0x20]
+        0x00007ffc:    e14b23b2    .#K.    STRH     r2,[r11,#-0x32]
+        0x00008000:    e3a04000    .@..    MOV      r4,#0
+        0x00008004:    e24b103c    <.K.    SUB      r1,r11,#0x3c
+        0x00008008:    e3a03001    .0..    MOV      r3,#1
+        0x0000800c:    e50b401c    .@..    STR      r4,[r11,#-0x1c]
+        0x00008010:    e54b403b    ;@K.    STRB     r4,[r11,#-0x3b]
+        0x00008014:    e54b3039    90K.    STRB     r3,[r11,#-0x39]
+        0x00008018:    e54b303a    :0K.    STRB     r3,[r11,#-0x3a]
+        0x0000801c:    ebfffffe    ....    BL       TCON1_cfg  ; 0x787c Section #1
+        0x00008020:    e1a00004    ....    MOV      r0,r4
+        0x00008024:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x00008028:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    TCON1_set_tv_mode
+        0x0000802c:    e1a0c00d    ....    MOV      r12,r13
+        0x00008030:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x00008034:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008038:    e24dd02c    ,.M.    SUB      r13,r13,#0x2c
+        0x0000803c:    e3510016    ..Q.    CMP      r1,#0x16
+        0x00008040:    979ff101    ....    LDRLS    pc,[pc,r1,LSL #2]
+        0x00008044:    ea000110    ....    B        {pc} + 0x448  ; 0x848c
+    $d
+        0x00008048:    000080a4    ....    DCD    32932 ; [Section 1]
+        0x0000804c:    000083d0    ....    DCD    33744 ; [Section 1]
+        0x00008050:    000080e4    ....    DCD    32996 ; [Section 1]
+        0x00008054:    00008148    H...    DCD    33096 ; [Section 1]
+        0x00008058:    000081ac    ....    DCD    33196 ; [Section 1]
+        0x0000805c:    00008200    ....    DCD    33280 ; [Section 1]
+        0x00008060:    00008264    d...    DCD    33380 ; [Section 1]
+        0x00008064:    000082cc    ....    DCD    33484 ; [Section 1]
+        0x00008068:    0000848c    ....    DCD    33932 ; [Section 1]
+        0x0000806c:    00008328    (...    DCD    33576 ; [Section 1]
+        0x00008070:    00008378    x...    DCD    33656 ; [Section 1]
+        0x00008074:    000083d0    ....    DCD    33744 ; [Section 1]
+        0x00008078:    000083d0    ....    DCD    33744 ; [Section 1]
+        0x0000807c:    000083d0    ....    DCD    33744 ; [Section 1]
+        0x00008080:    0000842c    ,...    DCD    33836 ; [Section 1]
+        0x00008084:    0000842c    ,...    DCD    33836 ; [Section 1]
+        0x00008088:    0000842c    ,...    DCD    33836 ; [Section 1]
+        0x0000808c:    0000842c    ,...    DCD    33836 ; [Section 1]
+        0x00008090:    0000842c    ,...    DCD    33836 ; [Section 1]
+        0x00008094:    0000842c    ,...    DCD    33836 ; [Section 1]
+        0x00008098:    000083d0    ....    DCD    33744 ; [Section 1]
+        0x0000809c:    000083d0    ....    DCD    33744 ; [Section 1]
+        0x000080a0:    000083d0    ....    DCD    33744 ; [Section 1]
+    $a
+        0x000080a4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000080a8:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x000080ac:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x000080b0:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x000080b4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000080b8:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x000080bc:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x000080c0:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x000080c4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000080c8:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x000080cc:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x000080d0:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x000080d4:    e3a03075    u0..    MOV      r3,#0x75
+        0x000080d8:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x000080dc:    e3a03011    .0..    MOV      r3,#0x11
+        0x000080e0:    ea0000e0    ....    B        {pc} + 0x388  ; 0x8468
+        0x000080e4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000080e8:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x000080ec:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x000080f0:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x000080f4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000080f8:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x000080fc:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00008100:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00008104:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00008108:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x0000810c:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00008110:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008114:    e3a03075    u0..    MOV      r3,#0x75
+        0x00008118:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x0000811c:    e3a03016    .0..    MOV      r3,#0x16
+        0x00008120:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00008124:    e3a03001    .0..    MOV      r3,#1
+        0x00008128:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x0000812c:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008130:    e3a03000    .0..    MOV      r3,#0
+        0x00008134:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00008138:    e3003359    Y3..    MOV      r3,#0x359
+        0x0000813c:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008140:    e28330c1    .0..    ADD      r3,r3,#0xc1
+        0x00008144:    ea00005e    ^...    B        {pc} + 0x180  ; 0x82c4
+        0x00008148:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x0000814c:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00008150:    e3a03d09    .=..    MOV      r3,#0x240
+        0x00008154:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00008158:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x0000815c:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00008160:    e3a03d09    .=..    MOV      r3,#0x240
+        0x00008164:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00008168:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x0000816c:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008170:    e3a03d09    .=..    MOV      r3,#0x240
+        0x00008174:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008178:    e3a0308a    .0..    MOV      r3,#0x8a
+        0x0000817c:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008180:    e3a03016    .0..    MOV      r3,#0x16
+        0x00008184:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00008188:    e3a03001    .0..    MOV      r3,#1
+        0x0000818c:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00008190:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008194:    e3a03000    .0..    MOV      r3,#0
+        0x00008198:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x0000819c:    e300335f    _3..    MOV      r3,#0x35f
+        0x000081a0:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x000081a4:    e30034e2    .4..    MOV      r3,#0x4e2
+        0x000081a8:    ea000045    E...    B        {pc} + 0x11c  ; 0x82c4
+        0x000081ac:    e3a03c05    .<..    MOV      r3,#0x500
+        0x000081b0:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x000081b4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000081b8:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x000081bc:    e3a03c05    .<..    MOV      r3,#0x500
+        0x000081c0:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x000081c4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000081c8:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x000081cc:    e3a03c05    .<..    MOV      r3,#0x500
+        0x000081d0:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x000081d4:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000081d8:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x000081dc:    e3a03018    .0..    MOV      r3,#0x18
+        0x000081e0:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x000081e4:    e3a03001    .0..    MOV      r3,#1
+        0x000081e8:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x000081ec:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x000081f0:    e3a03000    .0..    MOV      r3,#0
+        0x000081f4:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x000081f8:    e30037bb    .7..    MOV      r3,#0x7bb
+        0x000081fc:    ea000013    ....    B        {pc} + 0x54  ; 0x8250
+        0x00008200:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00008204:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00008208:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x0000820c:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00008210:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00008214:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00008218:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x0000821c:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00008220:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00008224:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008228:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x0000822c:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008230:    e3a03018    .0..    MOV      r3,#0x18
+        0x00008234:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00008238:    e3a03001    .0..    MOV      r3,#1
+        0x0000823c:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00008240:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008244:    e3a03000    .0..    MOV      r3,#0
+        0x00008248:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x0000824c:    e3003671    q6..    MOV      r3,#0x671
+        0x00008250:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008254:    e3003103    .1..    MOV      r3,#0x103
+        0x00008258:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x0000825c:    e30035dc    .5..    MOV      r3,#0x5dc
+        0x00008260:    ea000017    ....    B        {pc} + 0x64  ; 0x82c4
+        0x00008264:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00008268:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x0000826c:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00008270:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x00008274:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00008278:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x0000827c:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00008280:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x00008284:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00008288:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x0000828c:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00008290:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008294:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00008298:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x0000829c:    e3a03010    .0..    MOV      r3,#0x10
+        0x000082a0:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x000082a4:    e3a03001    .0..    MOV      r3,#1
+        0x000082a8:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x000082ac:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x000082b0:    e3a03000    .0..    MOV      r3,#0
+        0x000082b4:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x000082b8:    e3003a4f    O:..    MOV      r3,#0xa4f
+        0x000082bc:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x000082c0:    e3003465    e4..    MOV      r3,#0x465
+        0x000082c4:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x000082c8:    ea00006f    o...    B        {pc} + 0x1c4  ; 0x848c
+        0x000082cc:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x000082d0:    e3002897    .(..    MOV      r2,#0x897
+        0x000082d4:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x000082d8:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x000082dc:    e14b22bc    ."K.    STRH     r2,[r11,#-0x2c]
+        0x000082e0:    e3002465    e$..    MOV      r2,#0x465
+        0x000082e4:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x000082e8:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x000082ec:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x000082f0:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x000082f4:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x000082f8:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x000082fc:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008300:    e3a03f87    .?..    MOV      r3,#0x21c
+        0x00008304:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008308:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x0000830c:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008310:    e3a03010    .0..    MOV      r3,#0x10
+        0x00008314:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00008318:    e3a03001    .0..    MOV      r3,#1
+        0x0000831c:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008320:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00008324:    ea000056    V...    B        {pc} + 0x160  ; 0x8484
+        0x00008328:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x0000832c:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00008330:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00008334:    e3002438    8$..    MOV      r2,#0x438
+        0x00008338:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x0000833c:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00008340:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008344:    e3a0302c    ,0..    MOV      r3,#0x2c
+        0x00008348:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x0000834c:    e3a03001    .0..    MOV      r3,#1
+        0x00008350:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00008354:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008358:    e3a03000    .0..    MOV      r3,#0
+        0x0000835c:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00008360:    e3003a4f    O:..    MOV      r3,#0xa4f
+        0x00008364:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008368:    e2433f61    a?C.    SUB      r3,r3,#0x184
+        0x0000836c:    e14b22be    ."K.    STRH     r2,[r11,#-0x2e]
+        0x00008370:    e2433001    .0C.    SUB      r3,r3,#1
+        0x00008374:    ea000011    ....    B        {pc} + 0x4c  ; 0x83c0
+        0x00008378:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x0000837c:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00008380:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00008384:    e3002438    8$..    MOV      r2,#0x438
+        0x00008388:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x0000838c:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x00008390:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008394:    e3a0302c    ,0..    MOV      r3,#0x2c
+        0x00008398:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x0000839c:    e3a03001    .0..    MOV      r3,#1
+        0x000083a0:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x000083a4:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x000083a8:    e3a03000    .0..    MOV      r3,#0
+        0x000083ac:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x000083b0:    e3003897    .8..    MOV      r3,#0x897
+        0x000083b4:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x000083b8:    e2833033    30..    ADD      r3,r3,#0x33
+        0x000083bc:    e14b22be    ."K.    STRH     r2,[r11,#-0x2e]
+        0x000083c0:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x000083c4:    e14b23b6    .#K.    STRH     r2,[r11,#-0x36]
+        0x000083c8:    e14b23b2    .#K.    STRH     r2,[r11,#-0x32]
+        0x000083cc:    ea00002e    ....    B        {pc} + 0xc0  ; 0x848c
+        0x000083d0:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000083d4:    e300235f    _#..    MOV      r2,#0x35f
+        0x000083d8:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x000083dc:    e3a03e12    .>..    MOV      r3,#0x120
+        0x000083e0:    e14b22bc    ."K.    STRH     r2,[r11,#-0x2c]
+        0x000083e4:    e24220ee    . B.    SUB      r2,r2,#0xee
+        0x000083e8:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x000083ec:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x000083f0:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x000083f4:    e3a03e12    .>..    MOV      r3,#0x120
+        0x000083f8:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x000083fc:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00008400:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008404:    e3a03e12    .>..    MOV      r3,#0x120
+        0x00008408:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x0000840c:    e3a0308a    .0..    MOV      r3,#0x8a
+        0x00008410:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008414:    e3a03016    .0..    MOV      r3,#0x16
+        0x00008418:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x0000841c:    e3a03001    .0..    MOV      r3,#1
+        0x00008420:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008424:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00008428:    ea000015    ....    B        {pc} + 0x5c  ; 0x8484
+        0x0000842c:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00008430:    e14b33b8    .3K.    STRH     r3,[r11,#-0x38]
+        0x00008434:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x00008438:    e14b33b6    .3K.    STRH     r3,[r11,#-0x36]
+        0x0000843c:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00008440:    e14b33b4    .3K.    STRH     r3,[r11,#-0x34]
+        0x00008444:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x00008448:    e14b33b2    .3K.    STRH     r3,[r11,#-0x32]
+        0x0000844c:    e3a03e2d    ->..    MOV      r3,#0x2d0
+        0x00008450:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008454:    e3a030f0    .0..    MOV      r3,#0xf0
+        0x00008458:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x0000845c:    e3a03075    u0..    MOV      r3,#0x75
+        0x00008460:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008464:    e3a03012    .0..    MOV      r3,#0x12
+        0x00008468:    e3002359    Y#..    MOV      r2,#0x359
+        0x0000846c:    e14b22bc    ."K.    STRH     r2,[r11,#-0x2c]
+        0x00008470:    e2422f53    S/B.    SUB      r2,r2,#0x14c
+        0x00008474:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00008478:    e3a03001    .0..    MOV      r3,#1
+        0x0000847c:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008480:    e54b303c    <0K.    STRB     r3,[r11,#-0x3c]
+        0x00008484:    e14b22b8    ."K.    STRH     r2,[r11,#-0x28]
+        0x00008488:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x0000848c:    e3a04000    .@..    MOV      r4,#0
+        0x00008490:    e24b103c    <.K.    SUB      r1,r11,#0x3c
+        0x00008494:    e3e0320f    .2..    MVN      r3,#0xf0000000
+        0x00008498:    e50b4020     @..    STR      r4,[r11,#-0x20]
+        0x0000849c:    e54b403b    ;@K.    STRB     r4,[r11,#-0x3b]
+        0x000084a0:    e50b301c    .0..    STR      r3,[r11,#-0x1c]
+        0x000084a4:    e54b403a    :@K.    STRB     r4,[r11,#-0x3a]
+        0x000084a8:    e54b4039    9@K.    STRB     r4,[r11,#-0x39]
+        0x000084ac:    ebfffffe    ....    BL       TCON1_cfg  ; 0x787c Section #1
+        0x000084b0:    e1a00004    ....    MOV      r0,r4
+        0x000084b4:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x000084b8:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    TCON1_set_vga_mode
+        0x000084bc:    e1a0c00d    ....    MOV      r12,r13
+        0x000084c0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000084c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000084c8:    e24dd028    (.M.    SUB      r13,r13,#0x28
+        0x000084cc:    e351000a    ..Q.    CMP      r1,#0xa
+        0x000084d0:    979ff101    ....    LDRLS    pc,[pc,r1,LSL #2]
+        0x000084d4:    ea0000ca    ....    B        {pc} + 0x330  ; 0x8804
+    $d
+        0x000084d8:    000086e8    ....    DCD    34536 ; [Section 1]
+        0x000084dc:    00008698    ....    DCD    34456 ; [Section 1]
+        0x000084e0:    00008648    H...    DCD    34376 ; [Section 1]
+        0x000084e4:    000085f8    ....    DCD    34296 ; [Section 1]
+        0x000084e8:    000085a8    ....    DCD    34216 ; [Section 1]
+        0x000084ec:    00008554    T...    DCD    34132 ; [Section 1]
+        0x000084f0:    00008504    ....    DCD    34052 ; [Section 1]
+        0x000084f4:    000087d8    ....    DCD    34776 ; [Section 1]
+        0x000084f8:    000087d8    ....    DCD    34776 ; [Section 1]
+        0x000084fc:    00008734    4...    DCD    34612 ; [Section 1]
+        0x00008500:    00008788    ....    DCD    34696 ; [Section 1]
+    $a
+        0x00008504:    e3a03d0a    .=..    MOV      r3,#0x280
+        0x00008508:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x0000850c:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008510:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008514:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00008518:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x0000851c:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008520:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008524:    e3a0308f    .0..    MOV      r3,#0x8f
+        0x00008528:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x0000852c:    e3a03022    "0..    MOV      r3,#0x22
+        0x00008530:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x00008534:    e3a03001    .0..    MOV      r3,#1
+        0x00008538:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x0000853c:    e3a0305f    _0..    MOV      r3,#0x5f
+        0x00008540:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x00008544:    e300331f    .3..    MOV      r3,#0x31f
+        0x00008548:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x0000854c:    e28330fb    .0..    ADD      r3,r3,#0xfb
+        0x00008550:    ea000012    ....    B        {pc} + 0x50  ; 0x85a0
+        0x00008554:    e3a03e32    2>..    MOV      r3,#0x320
+        0x00008558:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x0000855c:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008560:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008564:    e3a03f96    .?..    MOV      r3,#0x258
+        0x00008568:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x0000856c:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008570:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008574:    e3a030d7    .0..    MOV      r3,#0xd7
+        0x00008578:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x0000857c:    e3a0301a    .0..    MOV      r3,#0x1a
+        0x00008580:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x00008584:    e3a03003    .0..    MOV      r3,#3
+        0x00008588:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x0000858c:    e3a0307f    .0..    MOV      r3,#0x7f
+        0x00008590:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x00008594:    e300341f    .4..    MOV      r3,#0x41f
+        0x00008598:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x0000859c:    e28330c9    .0..    ADD      r3,r3,#0xc9
+        0x000085a0:    e14b32b0    .2K.    STRH     r3,[r11,#-0x20]
+        0x000085a4:    ea00008b    ....    B        {pc} + 0x234  ; 0x87d8
+        0x000085a8:    e3a03b01    .;..    MOV      r3,#0x400
+        0x000085ac:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x000085b0:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x000085b4:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x000085b8:    e3a03c03    .<..    MOV      r3,#0x300
+        0x000085bc:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x000085c0:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x000085c4:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x000085c8:    e3a03022    "0..    MOV      r3,#0x22
+        0x000085cc:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x000085d0:    e3a03005    .0..    MOV      r3,#5
+        0x000085d4:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x000085d8:    e3a03087    .0..    MOV      r3,#0x87
+        0x000085dc:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x000085e0:    e300353f    ?5..    MOV      r3,#0x53f
+        0x000085e4:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x000085e8:    e3003127    '1..    MOV      r3,#0x127
+        0x000085ec:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x000085f0:    e300364c    L6..    MOV      r3,#0x64c
+        0x000085f4:    eaffffe9    ....    B        {pc} - 0x54  ; 0x85a0
+        0x000085f8:    e3a03c05    .<..    MOV      r3,#0x500
+        0x000085fc:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x00008600:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008604:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008608:    e3a03b01    .;..    MOV      r3,#0x400
+        0x0000860c:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00008610:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008614:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008618:    e3a03028    (0..    MOV      r3,#0x28
+        0x0000861c:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x00008620:    e3a03002    .0..    MOV      r3,#2
+        0x00008624:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x00008628:    e3a0306f    o0..    MOV      r3,#0x6f
+        0x0000862c:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x00008630:    e3003697    .6..    MOV      r3,#0x697
+        0x00008634:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00008638:    e2433e53    S>C.    SUB      r3,r3,#0x530
+        0x0000863c:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008640:    e3003854    T8..    MOV      r3,#0x854
+        0x00008644:    eaffffd5    ....    B        {pc} - 0xa4  ; 0x85a0
+        0x00008648:    e3a03e55    U>..    MOV      r3,#0x550
+        0x0000864c:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x00008650:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008654:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008658:    e3a03c03    .<..    MOV      r3,#0x300
+        0x0000865c:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x00008660:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x00008664:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x00008668:    e3a03017    .0..    MOV      r3,#0x17
+        0x0000866c:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x00008670:    e3a03005    .0..    MOV      r3,#5
+        0x00008674:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x00008678:    e3a0306f    o0..    MOV      r3,#0x6f
+        0x0000867c:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x00008680:    e3e03cf9    .<..    MVN      r3,#0xf900
+        0x00008684:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00008688:    e300316f    o1..    MOV      r3,#0x16f
+        0x0000868c:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008690:    e3003636    66..    MOV      r3,#0x636
+        0x00008694:    eaffffc1    ....    B        {pc} - 0xf4  ; 0x85a0
+        0x00008698:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x0000869c:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x000086a0:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x000086a4:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x000086a8:    e3a03fe1    .?..    MOV      r3,#0x384
+        0x000086ac:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x000086b0:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x000086b4:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x000086b8:    e3a0301e    .0..    MOV      r3,#0x1e
+        0x000086bc:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x000086c0:    e3a03005    .0..    MOV      r3,#5
+        0x000086c4:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x000086c8:    e3a03097    .0..    MOV      r3,#0x97
+        0x000086cc:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x000086d0:    e300376f    o7..    MOV      r3,#0x76f
+        0x000086d4:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x000086d8:    e2433e5f    _>C.    SUB      r3,r3,#0x5f0
+        0x000086dc:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x000086e0:    e300374c    L7..    MOV      r3,#0x74c
+        0x000086e4:    eaffffad    ....    B        {pc} - 0x144  ; 0x85a0
+        0x000086e8:    e3a03e69    i>..    MOV      r3,#0x690
+        0x000086ec:    e300241a    .$..    MOV      r2,#0x41a
+        0x000086f0:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x000086f4:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x000086f8:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x000086fc:    e3a03023    #0..    MOV      r3,#0x23
+        0x00008700:    e14b22be    ."K.    STRH     r2,[r11,#-0x2e]
+        0x00008704:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x00008708:    e3a03005    .0..    MOV      r3,#5
+        0x0000870c:    e14b22b6    ."K.    STRH     r2,[r11,#-0x26]
+        0x00008710:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x00008714:    e3a030af    .0..    MOV      r3,#0xaf
+        0x00008718:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x0000871c:    e30038bf    .8..    MOV      r3,#0x8bf
+        0x00008720:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00008724:    e2433e6f    o>C.    SUB      r3,r3,#0x6f0
+        0x00008728:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x0000872c:    e3003882    .8..    MOV      r3,#0x882
+        0x00008730:    ea000011    ....    B        {pc} + 0x4c  ; 0x877c
+        0x00008734:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00008738:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x0000873c:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008740:    e3002438    8$..    MOV      r2,#0x438
+        0x00008744:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x00008748:    e3a03e7e    ~>..    MOV      r3,#0x7e0
+        0x0000874c:    e14b32b4    .2K.    STRH     r3,[r11,#-0x24]
+        0x00008750:    e3a0303e    >0..    MOV      r3,#0x3e
+        0x00008754:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x00008758:    e3a0301b    .0..    MOV      r3,#0x1b
+        0x0000875c:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x00008760:    e3a03004    .0..    MOV      r3,#4
+        0x00008764:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x00008768:    e3a0301f    .0..    MOV      r3,#0x1f
+        0x0000876c:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x00008770:    e30038ae    .8..    MOV      r3,#0x8ae
+        0x00008774:    e14b22be    ."K.    STRH     r2,[r11,#-0x2e]
+        0x00008778:    e14b22b6    ."K.    STRH     r2,[r11,#-0x26]
+        0x0000877c:    e14b32b0    .2K.    STRH     r3,[r11,#-0x20]
+        0x00008780:    e14b22ba    ."K.    STRH     r2,[r11,#-0x2a]
+        0x00008784:    ea000013    ....    B        {pc} + 0x54  ; 0x87d8
+        0x00008788:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x0000878c:    e3002897    .(..    MOV      r2,#0x897
+        0x00008790:    e14b32b8    .2K.    STRH     r3,[r11,#-0x28]
+        0x00008794:    e14b32bc    .2K.    STRH     r3,[r11,#-0x2c]
+        0x00008798:    e14b33b0    .3K.    STRH     r3,[r11,#-0x30]
+        0x0000879c:    e3a030bf    .0..    MOV      r3,#0xbf
+        0x000087a0:    e14b22b4    ."K.    STRH     r2,[r11,#-0x24]
+        0x000087a4:    e2822033    3 ..    ADD      r2,r2,#0x33
+        0x000087a8:    e14b32b2    .2K.    STRH     r3,[r11,#-0x22]
+        0x000087ac:    e3a03029    )0..    MOV      r3,#0x29
+        0x000087b0:    e14b22b0    ."K.    STRH     r2,[r11,#-0x20]
+        0x000087b4:    e14b31be    .1K.    STRH     r3,[r11,#-0x1e]
+        0x000087b8:    e3a03004    .0..    MOV      r3,#4
+        0x000087bc:    e14b31bc    .1K.    STRH     r3,[r11,#-0x1c]
+        0x000087c0:    e3a0302b    +0..    MOV      r3,#0x2b
+        0x000087c4:    e14b31ba    .1K.    STRH     r3,[r11,#-0x1a]
+        0x000087c8:    e3003438    84..    MOV      r3,#0x438
+        0x000087cc:    e14b32be    .2K.    STRH     r3,[r11,#-0x2e]
+        0x000087d0:    e14b32b6    .2K.    STRH     r3,[r11,#-0x26]
+        0x000087d4:    e14b32ba    .2K.    STRH     r3,[r11,#-0x2a]
+        0x000087d8:    e24b1034    4.K.    SUB      r1,r11,#0x34
+        0x000087dc:    e3a03000    .0..    MOV      r3,#0
+        0x000087e0:    e3e024f3    .$..    MVN      r2,#0xf3000000
+        0x000087e4:    e54b3031    10K.    STRB     r3,[r11,#-0x31]
+        0x000087e8:    e50b2014    . ..    STR      r2,[r11,#-0x14]
+        0x000087ec:    e3a02001    . ..    MOV      r2,#1
+        0x000087f0:    e54b3034    40K.    STRB     r3,[r11,#-0x34]
+        0x000087f4:    e54b2033    3 K.    STRB     r2,[r11,#-0x33]
+        0x000087f8:    e50b3018    .0..    STR      r3,[r11,#-0x18]
+        0x000087fc:    e54b3032    20K.    STRB     r3,[r11,#-0x32]
+        0x00008800:    ebfffffe    ....    BL       TCON1_cfg  ; 0x787c Section #1
+        0x00008804:    e3a00000    ....    MOV      r0,#0
+        0x00008808:    e24bd00c    ..K.    SUB      r13,r11,#0xc
+        0x0000880c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    TCON1_select_src
+        0x00008810:    e1a0c00d    ....    MOV      r12,r13
+        0x00008814:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008818:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000881c:    e59f3058    X0..    LDR      r3,[pc,#88]   ; [([Section 17] + 17008) = 0x887c]  = 0x4270
+        0x00008820:    e3500000    ..P.    CMP      r0,#0
+        0x00008824:    e30f2ffc    ./..    MOV      r2,#0xfffc
+        0x00008828:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000882c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008830:    e3510000    ..Q.    CMP      r1,#0
+        0x00008834:    e2833090    .0..    ADD      r3,r3,#0x90
+        0x00008838:    e1d330b0    .0..    LDRH     r3,[r3,#0]
+        0x0000883c:    e0032002    . ..    AND      r2,r3,r2
+        0x00008840:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x8858
+        0x00008844:    e3510001    ..Q.    CMP      r1,#1
+        0x00008848:    03822001    . ..    ORREQ    r2,r2,#1
+        0x0000884c:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x8858
+        0x00008850:    e3510005    ..Q.    CMP      r1,#5
+        0x00008854:    03822002    . ..    ORREQ    r2,r2,#2
+        0x00008858:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x887c]  = 0x4270
+        0x0000885c:    e3500000    ..P.    CMP      r0,#0
+        0x00008860:    e3a00000    ....    MOV      r0,#0
+        0x00008864:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008868:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000886c:    e2831090    ....    ADD      r1,r3,#0x90
+        0x00008870:    e6ff3072    r0..    UXTH     r3,r2
+        0x00008874:    e1c130b0    .0..    STRH     r3,[r1,#0]
+        0x00008878:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000887c:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCDC_init
+    $a
+        0x00008880:    e1a0c00d    ....    MOV      r12,r13
+        0x00008884:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00008888:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000888c:    e1a04000    .@..    MOV      r4,r0
+        0x00008890:    ebfffffe    ....    BL       TCON0_close  ; 0x7250 Section #1
+        0x00008894:    e1a00004    ....    MOV      r0,r4
+        0x00008898:    ebfffffe    ....    BL       TCON1_close  ; 0x77e0 Section #1
+        0x0000889c:    e1a00004    ....    MOV      r0,r4
+        0x000088a0:    e3a01080    ....    MOV      r1,#0x80
+        0x000088a4:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x000088a8:    e1a00004    ....    MOV      r0,r4
+        0x000088ac:    e3a01040    @...    MOV      r1,#0x40
+        0x000088b0:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x000088b4:    e1a00004    ....    MOV      r0,r4
+        0x000088b8:    e3a01020     ...    MOV      r1,#0x20
+        0x000088bc:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x000088c0:    e1a00004    ....    MOV      r0,r4
+        0x000088c4:    e3a01010    ....    MOV      r1,#0x10
+        0x000088c8:    ebfffffe    ....    BL       LCDC_enable_int  ; 0x6f38 Section #1
+        0x000088cc:    e1a00004    ....    MOV      r0,r4
+        0x000088d0:    e3a01000    ....    MOV      r1,#0
+        0x000088d4:    ebfffffe    ....    BL       TCON0_select_src  ; 0x75e0 Section #1
+        0x000088d8:    e3a01000    ....    MOV      r1,#0
+        0x000088dc:    e1a00004    ....    MOV      r0,r4
+        0x000088e0:    ebfffffe    ....    BL       TCON1_select_src  ; 0x8810 Section #1
+        0x000088e4:    e1a00004    ....    MOV      r0,r4
+        0x000088e8:    ebfffffe    ....    BL       LCDC_open  ; 0x6c98 Section #1
+        0x000088ec:    e3a00000    ....    MOV      r0,#0
+        0x000088f0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    TCON1_in_valid_regn
+        0x000088f4:    e1a0c00d    ....    MOV      r12,r13
+        0x000088f8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000088fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008900:    e59f304c    L0..    LDR      r3,[pc,#76]   ; [([Section 17] + 17008) = 0x8954]  = 0x4270
+        0x00008904:    e3500000    ..P.    CMP      r0,#0
+        0x00008908:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000890c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008910:    e3500000    ..P.    CMP      r0,#0
+        0x00008914:    e28330a4    .0..    ADD      r3,r3,#0xa4
+        0x00008918:    e5932000    . ..    LDR      r2,[r3,#0]
+        0x0000891c:    e59f3030    00..    LDR      r3,[pc,#48]   ; [([Section 17] + 17008) = 0x8954]  = 0x4270
+        0x00008920:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008924:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008928:    e28300fc    ....    ADD      r0,r3,#0xfc
+        0x0000892c:    e5900000    ....    LDR      r0,[r0,#0]
+        0x00008930:    e1a00a00    ....    LSL      r0,r0,#20
+        0x00008934:    e1a00a20     ...    LSR      r0,r0,#20
+        0x00008938:    e15008a2    ..P.    CMP      r0,r2,LSR #17
+        0x0000893c:    93a03000    .0..    MOVLS    r3,#0
+        0x00008940:    83a03001    .0..    MOVHI    r3,#1
+        0x00008944:    e1500001    ..P.    CMP      r0,r1
+        0x00008948:    21a00003    ...!    MOVCS    r0,r3
+        0x0000894c:    33830001    ...3    ORRCC    r0,r3,#1
+        0x00008950:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008954:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON1_get_width
+    $a
+        0x00008958:    e1a0c00d    ....    MOV      r12,r13
+        0x0000895c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008960:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008964:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x8988]  = 0x4270
+        0x00008968:    e3500000    ..P.    CMP      r0,#0
+        0x0000896c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008970:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008974:    e2830094    ....    ADD      r0,r3,#0x94
+        0x00008978:    e5900000    ....    LDR      r0,[r0,#0]
+        0x0000897c:    e7eb0850    P...    UBFX     r0,r0,#16,#12
+        0x00008980:    e2800001    ....    ADD      r0,r0,#1
+        0x00008984:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008988:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON1_get_height
+    $a
+        0x0000898c:    e1a0c00d    ....    MOV      r12,r13
+        0x00008990:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008994:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008998:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [([Section 17] + 17008) = 0x89e4]  = 0x4270
+        0x0000899c:    e3500000    ..P.    CMP      r0,#0
+        0x000089a0:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x000089a4:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x000089a8:    e3500000    ..P.    CMP      r0,#0
+        0x000089ac:    e2833090    .0..    ADD      r3,r3,#0x90
+        0x000089b0:    e5932000    . ..    LDR      r2,[r3,#0]
+        0x000089b4:    e59f3028    (0..    LDR      r3,[pc,#40]   ; [([Section 17] + 17008) = 0x89e4]  = 0x4270
+        0x000089b8:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x000089bc:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x000089c0:    e2830094    ....    ADD      r0,r3,#0x94
+        0x000089c4:    e7e03a52    R:..    UBFX     r3,r2,#20,#1
+        0x000089c8:    e2833001    .0..    ADD      r3,r3,#1
+        0x000089cc:    e5900000    ....    LDR      r0,[r0,#0]
+        0x000089d0:    e1a00a00    ....    LSL      r0,r0,#20
+        0x000089d4:    e1a00a20     ...    LSR      r0,r0,#20
+        0x000089d8:    e2800001    ....    ADD      r0,r0,#1
+        0x000089dc:    e0000093    ....    MUL      r0,r3,r0
+        0x000089e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000089e4:    00004270    pB..    DCD    17008 ; [Section 17]
+    TCON1_set_gamma_table
+    $a
+        0x000089e8:    e1a0c00d    ....    MOV      r12,r13
+        0x000089ec:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000089f0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000089f4:    e3a00000    ....    MOV      r0,#0
+        0x000089f8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    TCON1_set_gamma_Enable
+        0x000089fc:    e1a0c00d    ....    MOV      r12,r13
+        0x00008a00:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008a04:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008a08:    e3a00000    ....    MOV      r0,#0
+        0x00008a0c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_CPU_Burst_Write
+        0x00008a10:    e1a0c00d    ....    MOV      r12,r13
+        0x00008a14:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008a18:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008a1c:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 17008) = 0x8a34]  = 0x4270
+        0x00008a20:    e3500000    ..P.    CMP      r0,#0
+        0x00008a24:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008a28:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008a2c:    e7832001    . ..    STR      r2,[r3,r1]
+        0x00008a30:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008a34:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_CPU_WR
+    $a
+        0x00008a38:    e1a0c00d    ....    MOV      r12,r13
+        0x00008a3c:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00008a40:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008a44:    e59f30b8    .0..    LDR      r3,[pc,#184]  ; [([Section 17] + 17008) = 0x8b04]  = 0x4270
+        0x00008a48:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x00008a4c:    e1a06002    .`..    MOV      r6,r2
+        0x00008a50:    e1a02001    . ..    MOV      r2,r1
+        0x00008a54:    e1a00005    ....    MOV      r0,r5
+        0x00008a58:    e3a01064    d...    MOV      r1,#0x64
+        0x00008a5c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008a60:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008a64:    e283c060    `...    ADD      r12,r3,#0x60
+        0x00008a68:    e59c3000    .0..    LDR      r3,[r12,#0]
+        0x00008a6c:    e3c33402    .4..    BIC      r3,r3,#0x2000000
+        0x00008a70:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x00008a74:    e1a03002    .0..    MOV      r3,r2
+        0x00008a78:    ebfffffe    ....    BL       LCD_CPU_Burst_Write  ; 0x8a10 Section #1
+        0x00008a7c:    e59f3080    .0..    LDR      r3,[pc,#128]  ; [([Section 17] + 17008) = 0x8b04]  = 0x4270
+        0x00008a80:    e5932004    . ..    LDR      r2,[r3,#4]
+        0x00008a84:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008a88:    e282e060    `...    ADD      r14,r2,#0x60
+        0x00008a8c:    e2834060    `@..    ADD      r4,r3,#0x60
+        0x00008a90:    e3550000    ..U.    CMP      r5,#0
+        0x00008a94:    01a03004    .0..    MOVEQ    r3,r4
+        0x00008a98:    11a0300e    .0..    MOVNE    r3,r14
+        0x00008a9c:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008aa0:    e3130502    ....    TST      r3,#0x800000
+        0x00008aa4:    1afffff9    ....    BNE      {pc} - 0x14  ; 0x8a90
+        0x00008aa8:    e3550000    ..U.    CMP      r5,#0
+        0x00008aac:    e1a02006    . ..    MOV      r2,r6
+        0x00008ab0:    e3a01064    d...    MOV      r1,#0x64
+        0x00008ab4:    e1a03006    .0..    MOV      r3,r6
+        0x00008ab8:    01a0e004    ....    MOVEQ    r14,r4
+        0x00008abc:    e1a00005    ....    MOV      r0,r5
+        0x00008ac0:    e59ec000    ....    LDR      r12,[r14,#0]
+        0x00008ac4:    11a0400e    .@..    MOVNE    r4,r14
+        0x00008ac8:    e38cc402    ....    ORR      r12,r12,#0x2000000
+        0x00008acc:    e584c000    ....    STR      r12,[r4,#0]
+        0x00008ad0:    ebfffffe    ....    BL       LCD_CPU_Burst_Write  ; 0x8a10 Section #1
+        0x00008ad4:    e59f3028    (0..    LDR      r3,[pc,#40]   ; [([Section 17] + 17008) = 0x8b04]  = 0x4270
+        0x00008ad8:    e5932004    . ..    LDR      r2,[r3,#4]
+        0x00008adc:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008ae0:    e2822060    ` ..    ADD      r2,r2,#0x60
+        0x00008ae4:    e2831060    `...    ADD      r1,r3,#0x60
+        0x00008ae8:    e3550000    ..U.    CMP      r5,#0
+        0x00008aec:    11a03002    .0..    MOVNE    r3,r2
+        0x00008af0:    01a03001    .0..    MOVEQ    r3,r1
+        0x00008af4:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008af8:    e3130502    ....    TST      r3,#0x800000
+        0x00008afc:    1afffff9    ....    BNE      {pc} - 0x14  ; 0x8ae8
+        0x00008b00:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00008b04:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_CPU_WR_INDEX
+    $a
+        0x00008b08:    e1a0c00d    ....    MOV      r12,r13
+        0x00008b0c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00008b10:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008b14:    e59f305c    \0..    LDR      r3,[pc,#92]   ; [([Section 17] + 17008) = 0x8b78]  = 0x4270
+        0x00008b18:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x00008b1c:    e1a02001    . ..    MOV      r2,r1
+        0x00008b20:    e3a01064    d...    MOV      r1,#0x64
+        0x00008b24:    e1a00004    ....    MOV      r0,r4
+        0x00008b28:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008b2c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008b30:    e283c060    `...    ADD      r12,r3,#0x60
+        0x00008b34:    e59c3000    .0..    LDR      r3,[r12,#0]
+        0x00008b38:    e3c33402    .4..    BIC      r3,r3,#0x2000000
+        0x00008b3c:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x00008b40:    e1a03002    .0..    MOV      r3,r2
+        0x00008b44:    ebfffffe    ....    BL       LCD_CPU_Burst_Write  ; 0x8a10 Section #1
+        0x00008b48:    e59f3028    (0..    LDR      r3,[pc,#40]   ; [([Section 17] + 17008) = 0x8b78]  = 0x4270
+        0x00008b4c:    e5932004    . ..    LDR      r2,[r3,#4]
+        0x00008b50:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008b54:    e2822060    ` ..    ADD      r2,r2,#0x60
+        0x00008b58:    e2831060    `...    ADD      r1,r3,#0x60
+        0x00008b5c:    e3540000    ..T.    CMP      r4,#0
+        0x00008b60:    11a03002    .0..    MOVNE    r3,r2
+        0x00008b64:    01a03001    .0..    MOVEQ    r3,r1
+        0x00008b68:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008b6c:    e3130502    ....    TST      r3,#0x800000
+        0x00008b70:    1afffff9    ....    BNE      {pc} - 0x14  ; 0x8b5c
+        0x00008b74:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00008b78:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_CPU_WR_DATA
+    $a
+        0x00008b7c:    e1a0c00d    ....    MOV      r12,r13
+        0x00008b80:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00008b84:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008b88:    e59f305c    \0..    LDR      r3,[pc,#92]   ; [([Section 17] + 17008) = 0x8bec]  = 0x4270
+        0x00008b8c:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x00008b90:    e1a02001    . ..    MOV      r2,r1
+        0x00008b94:    e3a01064    d...    MOV      r1,#0x64
+        0x00008b98:    e1a00004    ....    MOV      r0,r4
+        0x00008b9c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008ba0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008ba4:    e283c060    `...    ADD      r12,r3,#0x60
+        0x00008ba8:    e59c3000    .0..    LDR      r3,[r12,#0]
+        0x00008bac:    e3833402    .4..    ORR      r3,r3,#0x2000000
+        0x00008bb0:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x00008bb4:    e1a03002    .0..    MOV      r3,r2
+        0x00008bb8:    ebfffffe    ....    BL       LCD_CPU_Burst_Write  ; 0x8a10 Section #1
+        0x00008bbc:    e59f3028    (0..    LDR      r3,[pc,#40]   ; [([Section 17] + 17008) = 0x8bec]  = 0x4270
+        0x00008bc0:    e5932004    . ..    LDR      r2,[r3,#4]
+        0x00008bc4:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008bc8:    e2822060    ` ..    ADD      r2,r2,#0x60
+        0x00008bcc:    e2831060    `...    ADD      r1,r3,#0x60
+        0x00008bd0:    e3540000    ..T.    CMP      r4,#0
+        0x00008bd4:    11a03002    .0..    MOVNE    r3,r2
+        0x00008bd8:    01a03001    .0..    MOVEQ    r3,r1
+        0x00008bdc:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008be0:    e3130502    ....    TST      r3,#0x800000
+        0x00008be4:    1afffff9    ....    BNE      {pc} - 0x14  ; 0x8bd0
+        0x00008be8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00008bec:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_CPU_RD
+    $a
+        0x00008bf0:    e1a0c00d    ....    MOV      r12,r13
+        0x00008bf4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008bf8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008bfc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_CPU_AUTO_FLUSH
+        0x00008c00:    e1a0c00d    ....    MOV      r12,r13
+        0x00008c04:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008c08:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008c0c:    e3510000    ..Q.    CMP      r1,#0
+        0x00008c10:    1a000007    ....    BNE      {pc} + 0x24  ; 0x8c34
+        0x00008c14:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17008) = 0x8c58]  = 0x4270
+        0x00008c18:    e3500000    ..P.    CMP      r0,#0
+        0x00008c1c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008c20:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008c24:    e2832060    ` ..    ADD      r2,r3,#0x60
+        0x00008c28:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008c2c:    e3c33201    .2..    BIC      r3,r3,#0x10000000
+        0x00008c30:    ea000006    ....    B        {pc} + 0x20  ; 0x8c50
+        0x00008c34:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x8c58]  = 0x4270
+        0x00008c38:    e3500000    ..P.    CMP      r0,#0
+        0x00008c3c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008c40:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008c44:    e2832060    ` ..    ADD      r2,r3,#0x60
+        0x00008c48:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008c4c:    e3833201    .2..    ORR      r3,r3,#0x10000000
+        0x00008c50:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00008c54:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008c58:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_CPU_DMA_FLUSH
+    $a
+        0x00008c5c:    e1a0c00d    ....    MOV      r12,r13
+        0x00008c60:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008c64:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008c68:    e3510000    ..Q.    CMP      r1,#0
+        0x00008c6c:    1a000007    ....    BNE      {pc} + 0x24  ; 0x8c90
+        0x00008c70:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17008) = 0x8cb4]  = 0x4270
+        0x00008c74:    e3500000    ..P.    CMP      r0,#0
+        0x00008c78:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008c7c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008c80:    e2832060    ` ..    ADD      r2,r3,#0x60
+        0x00008c84:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008c88:    e3c33302    .3..    BIC      r3,r3,#0x8000000
+        0x00008c8c:    ea000006    ....    B        {pc} + 0x20  ; 0x8cac
+        0x00008c90:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x8cb4]  = 0x4270
+        0x00008c94:    e3500000    ..P.    CMP      r0,#0
+        0x00008c98:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008c9c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008ca0:    e2832060    ` ..    ADD      r2,r3,#0x60
+        0x00008ca4:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008ca8:    e3833302    .3..    ORR      r3,r3,#0x8000000
+        0x00008cac:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00008cb0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008cb4:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_XY_SWAP
+    $a
+        0x00008cb8:    e1a0c00d    ....    MOV      r12,r13
+        0x00008cbc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008cc0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008cc4:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17008) = 0x8d08]  = 0x4270
+        0x00008cc8:    e3500000    ..P.    CMP      r0,#0
+        0x00008ccc:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008cd0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008cd4:    e3500000    ..P.    CMP      r0,#0
+        0x00008cd8:    e2832048    H ..    ADD      r2,r3,#0x48
+        0x00008cdc:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [([Section 17] + 17008) = 0x8d08]  = 0x4270
+        0x00008ce0:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x00008ce4:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008ce8:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008cec:    e2831048    H...    ADD      r1,r3,#0x48
+        0x00008cf0:    e1a03a82    .:..    LSL      r3,r2,#21
+        0x00008cf4:    e7ea2852    R(..    UBFX     r2,r2,#16,#11
+        0x00008cf8:    e1a03aa3    .:..    LSR      r3,r3,#21
+        0x00008cfc:    e1822803    .(..    ORR      r2,r2,r3,LSL #16
+        0x00008d00:    e5812000    . ..    STR      r2,[r1,#0]
+        0x00008d04:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008d08:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_FRM_init
+    $a
+        0x00008d0c:    e1a0c00d    ....    MOV      r12,r13
+        0x00008d10:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008d14:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008d18:    e59f20d4    . ..    LDR      r2,[pc,#212]  ; [([Section 17] + 17008) = 0x8df4]  = 0x4270
+        0x00008d1c:    e3500000    ..P.    CMP      r0,#0
+        0x00008d20:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008d24:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008d28:    e3510001    ..Q.    CMP      r1,#1
+        0x00008d2c:    e59f20c0    . ..    LDR      r2,[pc,#192]  ; [([Section 17] + 17008) = 0x8df4]  = 0x4270
+        0x00008d30:    e3a01000    ....    MOV      r1,#0
+        0x00008d34:    e2833010    .0..    ADD      r3,r3,#0x10
+        0x00008d38:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008d3c:    e3c3c0ff    ....    BIC      r12,r3,#0xff
+        0x00008d40:    038cc050    P...    ORREQ    r12,r12,#0x50
+        0x00008d44:    e3500000    ..P.    CMP      r0,#0
+        0x00008d48:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008d4c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008d50:    e2833010    .0..    ADD      r3,r3,#0x10
+        0x00008d54:    e583c000    ....    STR      r12,[r3,#0]
+        0x00008d58:    e59f2094    . ..    LDR      r2,[pc,#148]  ; [([Section 17] + 17008) = 0x8df4]  = 0x4270
+        0x00008d5c:    e3500000    ..P.    CMP      r0,#0
+        0x00008d60:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008d64:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008d68:    e2832014    . ..    ADD      r2,r3,#0x14
+        0x00008d6c:    e3a03001    .0..    MOV      r3,#1
+        0x00008d70:    e7823001    .0..    STR      r3,[r2,r1]
+        0x00008d74:    e2811004    ....    ADD      r1,r1,#4
+        0x00008d78:    e3510018    ..Q.    CMP      r1,#0x18
+        0x00008d7c:    1afffff5    ....    BNE      {pc} - 0x24  ; 0x8d58
+        0x00008d80:    e59f206c    l ..    LDR      r2,[pc,#108]  ; [([Section 17] + 17008) = 0x8df4]  = 0x4270
+        0x00008d84:    e3500000    ..P.    CMP      r0,#0
+        0x00008d88:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008d8c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008d90:    e3500000    ..P.    CMP      r0,#0
+        0x00008d94:    e59f2058    X ..    LDR      r2,[pc,#88]   ; [([Section 17] + 17008) = 0x8df4]  = 0x4270
+        0x00008d98:    e283102c    ,...    ADD      r1,r3,#0x2c
+        0x00008d9c:    e59f3054    T0..    LDR      r3,[pc,#84]   ; [0x8df8] = 0x1010000
+        0x00008da0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00008da4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008da8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008dac:    e3500000    ..P.    CMP      r0,#0
+        0x00008db0:    e59f203c    < ..    LDR      r2,[pc,#60]   ; [([Section 17] + 17008) = 0x8df4]  = 0x4270
+        0x00008db4:    e2831030    0...    ADD      r1,r3,#0x30
+        0x00008db8:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [0x8dfc] = 0x15151111
+        0x00008dbc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00008dc0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008dc4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008dc8:    e3500000    ..P.    CMP      r0,#0
+        0x00008dcc:    e59f2020      ..    LDR      r2,[pc,#32]   ; [([Section 17] + 17008) = 0x8df4]  = 0x4270
+        0x00008dd0:    e2831034    4...    ADD      r1,r3,#0x34
+        0x00008dd4:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [0x8e00] = 0x57575555
+        0x00008dd8:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00008ddc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008de0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008de4:    e2832038    8 ..    ADD      r2,r3,#0x38
+        0x00008de8:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [0x8e04] = 0x7f7f7777
+        0x00008dec:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00008df0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008df4:    00004270    pB..    DCD    17008 ; [Section 17]
+        0x00008df8:    01010000    ....    DCD    16842752
+        0x00008dfc:    15151111    ....    DCD    353702161
+        0x00008e00:    57575555    UUWW    DCD    1465341269
+        0x00008e04:    7f7f7777    ww..    DCD    2139060087
+    LCD_FRM_open
+    $a
+        0x00008e08:    e1a0c00d    ....    MOV      r12,r13
+        0x00008e0c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008e10:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008e14:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x8e38]  = 0x4270
+        0x00008e18:    e3500000    ..P.    CMP      r0,#0
+        0x00008e1c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008e20:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008e24:    e2832010    . ..    ADD      r2,r3,#0x10
+        0x00008e28:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008e2c:    e3833102    .1..    ORR      r3,r3,#0x80000000
+        0x00008e30:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00008e34:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008e38:    00004270    pB..    DCD    17008 ; [Section 17]
+    LCD_FRM_close
+    $a
+        0x00008e3c:    e1a0c00d    ....    MOV      r12,r13
+        0x00008e40:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008e44:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008e48:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17008) = 0x8e6c]  = 0x4270
+        0x00008e4c:    e3500000    ..P.    CMP      r0,#0
+        0x00008e50:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x00008e54:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x00008e58:    e2832010    . ..    ADD      r2,r3,#0x10
+        0x00008e5c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008e60:    e3c33102    .1..    BIC      r3,r3,#0x80000000
+        0x00008e64:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00008e68:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008e6c:    00004270    pB..    DCD    17008 ; [Section 17]
+    TVE_set_reg_base
+    $a
+        0x00008e70:    e1a0c00d    ....    MOV      r12,r13
+        0x00008e74:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008e78:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008e7c:    e3500000    ..P.    CMP      r0,#0
+        0x00008e80:    059f3018    .0..    LDREQ    r3,[pc,#24]   ; [([Section 17] + 17016) = 0x8ea0]  = 0x4278
+        0x00008e84:    05831000    ....    STREQ    r1,[r3,#0]
+        0x00008e88:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x8e98
+        0x00008e8c:    e3500001    ..P.    CMP      r0,#1
+        0x00008e90:    059f3008    .0..    LDREQ    r3,[pc,#8]    ; [([Section 17] + 17016) = 0x8ea0]  = 0x4278
+        0x00008e94:    05831004    ....    STREQ    r1,[r3,#4]
+        0x00008e98:    e3a00000    ....    MOV      r0,#0
+        0x00008e9c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008ea0:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_get_reg_base
+    $a
+        0x00008ea4:    e1a0c00d    ....    MOV      r12,r13
+        0x00008ea8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008eac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008eb0:    e3500000    ..P.    CMP      r0,#0
+        0x00008eb4:    059f3018    .0..    LDREQ    r3,[pc,#24]   ; [([Section 17] + 17016) = 0x8ed4]  = 0x4278
+        0x00008eb8:    05930000    ....    LDREQ    r0,[r3,#0]
+        0x00008ebc:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x00008ec0:    e3500001    ..P.    CMP      r0,#1
+        0x00008ec4:    059f3008    .0..    LDREQ    r3,[pc,#8]    ; [([Section 17] + 17016) = 0x8ed4]  = 0x4278
+        0x00008ec8:    13a00000    ....    MOVNE    r0,#0
+        0x00008ecc:    05930004    ....    LDREQ    r0,[r3,#4]
+        0x00008ed0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008ed4:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_open
+    $a
+        0x00008ed8:    e1a0c00d    ....    MOV      r12,r13
+        0x00008edc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008ee0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008ee4:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17016) = 0x8f08]  = 0x4278
+        0x00008ee8:    e3500000    ..P.    CMP      r0,#0
+        0x00008eec:    e3a00000    ....    MOV      r0,#0
+        0x00008ef0:    05932000    . ..    LDREQ    r2,[r3,#0]
+        0x00008ef4:    15932004    . ..    LDRNE    r2,[r3,#4]
+        0x00008ef8:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008efc:    e3833001    .0..    ORR      r3,r3,#1
+        0x00008f00:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00008f04:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008f08:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_close
+    $a
+        0x00008f0c:    e1a0c00d    ....    MOV      r12,r13
+        0x00008f10:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008f14:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008f18:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17016) = 0x8f3c]  = 0x4278
+        0x00008f1c:    e3500000    ..P.    CMP      r0,#0
+        0x00008f20:    e3a00000    ....    MOV      r0,#0
+        0x00008f24:    05932000    . ..    LDREQ    r2,[r3,#0]
+        0x00008f28:    15932004    . ..    LDRNE    r2,[r3,#4]
+        0x00008f2c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00008f30:    e3c33001    .0..    BIC      r3,r3,#1
+        0x00008f34:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00008f38:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00008f3c:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_set_tv_mode
+    $a
+        0x00008f40:    e1a0c00d    ....    MOV      r12,r13
+        0x00008f44:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00008f48:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00008f4c:    e59f2fb0    ./..    LDR      r2,[pc,#4016] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00008f50:    e3500000    ..P.    CMP      r0,#0
+        0x00008f54:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008f58:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008f5c:    e2833008    .0..    ADD      r3,r3,#8
+        0x00008f60:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00008f64:    e3510016    ..Q.    CMP      r1,#0x16
+        0x00008f68:    979ff101    ....    LDRLS    pc,[pc,r1,LSL #2]
+        0x00008f6c:    ea00046f    o...    B        {pc} + 0x11c4  ; 0xa130
+    $d
+        0x00008f70:    000095b4    ....    DCD    38324 ; [Section 1]
+        0x00008f74:    00009720     ...    DCD    38688 ; [Section 1]
+        0x00008f78:    00009838    8...    DCD    38968 ; [Section 1]
+        0x00008f7c:    000098e8    ....    DCD    39144 ; [Section 1]
+        0x00008f80:    000099e4    ....    DCD    39396 ; [Section 1]
+        0x00008f84:    00009ab0    ....    DCD    39600 ; [Section 1]
+        0x00008f88:    00009bec    ....    DCD    39916 ; [Section 1]
+        0x00008f8c:    00009c48    H...    DCD    40008 ; [Section 1]
+        0x00008f90:    0000a130    0...    DCD    41264 ; [Section 1]
+        0x00008f94:    00009db4    ....    DCD    40372 ; [Section 1]
+        0x00008f98:    00009fc4    ....    DCD    40900 ; [Section 1]
+        0x00008f9c:    00008fcc    ....    DCD    36812 ; [Section 1]
+        0x00008fa0:    00008fcc    ....    DCD    36812 ; [Section 1]
+        0x00008fa4:    00008fcc    ....    DCD    36812 ; [Section 1]
+        0x00008fa8:    00009410    ....    DCD    37904 ; [Section 1]
+        0x00008fac:    00009410    ....    DCD    37904 ; [Section 1]
+        0x00008fb0:    00009410    ....    DCD    37904 ; [Section 1]
+        0x00008fb4:    000090f0    ....    DCD    37104 ; [Section 1]
+        0x00008fb8:    000090f0    ....    DCD    37104 ; [Section 1]
+        0x00008fbc:    000090f0    ....    DCD    37104 ; [Section 1]
+        0x00008fc0:    000092a0    ....    DCD    37536 ; [Section 1]
+        0x00008fc4:    000092a0    ....    DCD    37536 ; [Section 1]
+        0x00008fc8:    000092a0    ....    DCD    37536 ; [Section 1]
+    $a
+        0x00008fcc:    e59f2f30    0/..    LDR      r2,[pc,#3888] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00008fd0:    e3500000    ..P.    CMP      r0,#0
+        0x00008fd4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008fd8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008fdc:    e3500000    ..P.    CMP      r0,#0
+        0x00008fe0:    e59f2f1c    ./..    LDR      r2,[pc,#3868] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00008fe4:    e2831004    ....    ADD      r1,r3,#4
+        0x00008fe8:    e59f3f18    .?..    LDR      r3,[pc,#3864] ; [0x9f08] = 0x7030001
+        0x00008fec:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00008ff0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00008ff4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00008ff8:    e3500000    ..P.    CMP      r0,#0
+        0x00008ffc:    e59f2f00    ./..    LDR      r2,[pc,#3840] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009000:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009004:    e59f3f00    .?..    LDR      r3,[pc,#3840] ; [0x9f0c] = 0x8a0018
+        0x00009008:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000900c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009010:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009014:    e3500000    ..P.    CMP      r0,#0
+        0x00009018:    e59f2ee4    ....    LDR      r2,[pc,#3812] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000901c:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009020:    e59f3ee8    .>..    LDR      r3,[pc,#3816] ; [0x9f10] = 0x160271
+        0x00009024:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009028:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000902c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009030:    e3500000    ..P.    CMP      r0,#0
+        0x00009034:    e59f2ec8    ....    LDR      r2,[pc,#3784] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009038:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x0000903c:    e59f3ed0    .>..    LDR      r3,[pc,#3792] ; [0x9f14] = 0x16447e
+        0x00009040:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009044:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009048:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000904c:    e3500000    ..P.    CMP      r0,#0
+        0x00009050:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009054:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x00009058:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000905c:    e59f2ea0    ....    LDR      r2,[pc,#3744] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009060:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009064:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009068:    e3500000    ..P.    CMP      r0,#0
+        0x0000906c:    e59f2e90    ....    LDR      r2,[pc,#3728] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009070:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009074:    e59f3e9c    .>..    LDR      r3,[pc,#3740] ; [0x9f18] = 0x800d000c
+        0x00009078:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000907c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009080:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009084:    e3500000    ..P.    CMP      r0,#0
+        0x00009088:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x0000908c:    e3a03000    .0..    MOV      r3,#0
+        0x00009090:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009094:    e59f2e68    h...    LDR      r2,[pc,#3688] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009098:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000909c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000090a0:    e3500000    ..P.    CMP      r0,#0
+        0x000090a4:    e283200c    . ..    ADD      r2,r3,#0xc
+        0x000090a8:    e3a03e12    .>..    MOV      r3,#0x120
+        0x000090ac:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000090b0:    e59f2e4c    L...    LDR      r2,[pc,#3660] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000090b4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000090b8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000090bc:    e3500000    ..P.    CMP      r0,#0
+        0x000090c0:    e59f2e3c    <...    LDR      r2,[pc,#3644] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000090c4:    e2831020     ...    ADD      r1,r3,#0x20
+        0x000090c8:    e59f3e4c    L>..    LDR      r3,[pc,#3660] ; [0x9f1c] = 0xfc00fc
+        0x000090cc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000090d0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000090d4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000090d8:    e3500000    ..P.    CMP      r0,#0
+        0x000090dc:    e2832f43    C/..    ADD      r2,r3,#0x10c
+        0x000090e0:    e3023828    (8..    MOV      r3,#0x2828
+        0x000090e4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000090e8:    e59f2e14    ....    LDR      r2,[pc,#3604] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000090ec:    ea0000ba    ....    B        {pc} + 0x2f0  ; 0x93dc
+        0x000090f0:    e59f2e0c    ....    LDR      r2,[pc,#3596] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000090f4:    e3500000    ..P.    CMP      r0,#0
+        0x000090f8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000090fc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009100:    e3500000    ..P.    CMP      r0,#0
+        0x00009104:    e59f2df8    .-..    LDR      r2,[pc,#3576] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009108:    e2831004    ....    ADD      r1,r3,#4
+        0x0000910c:    e59f3e0c    .>..    LDR      r3,[pc,#3596] ; [0x9f20] = 0x7030000
+        0x00009110:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009114:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009118:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000911c:    e3500000    ..P.    CMP      r0,#0
+        0x00009120:    e59f2ddc    .-..    LDR      r2,[pc,#3548] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009124:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009128:    e59f3df4    .=..    LDR      r3,[pc,#3572] ; [0x9f24] = 0x760020
+        0x0000912c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009130:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009134:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009138:    e3500000    ..P.    CMP      r0,#0
+        0x0000913c:    e59f2dc0    .-..    LDR      r2,[pc,#3520] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009140:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009144:    e59f3ddc    .=..    LDR      r3,[pc,#3548] ; [0x9f28] = 0x16020d
+        0x00009148:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000914c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009150:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009154:    e3500000    ..P.    CMP      r0,#0
+        0x00009158:    e59f2da4    .-..    LDR      r2,[pc,#3492] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000915c:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009160:    e59f3dac    .=..    LDR      r3,[pc,#3500] ; [0x9f14] = 0x16447e
+        0x00009164:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009168:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000916c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009170:    e3500000    ..P.    CMP      r0,#0
+        0x00009174:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009178:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x0000917c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009180:    e59f2d7c    |-..    LDR      r2,[pc,#3452] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009184:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009188:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000918c:    e3500000    ..P.    CMP      r0,#0
+        0x00009190:    e59f2d6c    l-..    LDR      r2,[pc,#3436] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009194:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009198:    e59f3e18    .>..    LDR      r3,[pc,#3608] ; [0x9fb8] = 0xe000c
+        0x0000919c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000091a0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000091a4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000091a8:    e3500000    ..P.    CMP      r0,#0
+        0x000091ac:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x000091b0:    e3a03000    .0..    MOV      r3,#0
+        0x000091b4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000091b8:    e59f2d44    D-..    LDR      r2,[pc,#3396] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000091bc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000091c0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000091c4:    e3500000    ..P.    CMP      r0,#0
+        0x000091c8:    e283200c    . ..    ADD      r2,r3,#0xc
+        0x000091cc:    e3a03e12    .>..    MOV      r3,#0x120
+        0x000091d0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000091d4:    e59f2d28    (-..    LDR      r2,[pc,#3368] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000091d8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000091dc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000091e0:    e3500000    ..P.    CMP      r0,#0
+        0x000091e4:    e59f2d18    .-..    LDR      r2,[pc,#3352] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000091e8:    e2831020     ...    ADD      r1,r3,#0x20
+        0x000091ec:    e59f3d38    8=..    LDR      r3,[pc,#3384] ; [0x9f2c] = 0xf0011a
+        0x000091f0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000091f4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000091f8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000091fc:    e3500000    ..P.    CMP      r0,#0
+        0x00009200:    e2832f43    C/..    ADD      r2,r3,#0x10c
+        0x00009204:    e3a0304f    O0..    MOV      r3,#0x4f
+        0x00009208:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000920c:    e59f2cf0    .,..    LDR      r2,[pc,#3312] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009210:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009214:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009218:    e3500000    ..P.    CMP      r0,#0
+        0x0000921c:    e2832e11    ....    ADD      r2,r3,#0x110
+        0x00009220:    e3a03000    .0..    MOV      r3,#0
+        0x00009224:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009228:    e59f2cd4    .,..    LDR      r2,[pc,#3284] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000922c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009230:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009234:    e3500000    ..P.    CMP      r0,#0
+        0x00009238:    e2832f46    F/..    ADD      r2,r3,#0x118
+        0x0000923c:    e30a30a0    .0..    MOV      r3,#0xa0a0
+        0x00009240:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009244:    e59f2cb8    .,..    LDR      r2,[pc,#3256] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009248:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000924c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009250:    e3500000    ..P.    CMP      r0,#0
+        0x00009254:    e59f2ca8    .,..    LDR      r2,[pc,#3240] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009258:    e2831f47    G...    ADD      r1,r3,#0x11c
+        0x0000925c:    e59f3ccc    .<..    LDR      r3,[pc,#3276] ; [0x9f30] = 0x1000f0
+        0x00009260:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009264:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009268:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000926c:    e3500000    ..P.    CMP      r0,#0
+        0x00009270:    e59f2c8c    .,..    LDR      r2,[pc,#3212] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009274:    e2831010    ....    ADD      r1,r3,#0x10
+        0x00009278:    e59f3cb4    .<..    LDR      r3,[pc,#3252] ; [0x9f34] = 0x21e6efe3
+        0x0000927c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009280:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009284:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009288:    e3500000    ..P.    CMP      r0,#0
+        0x0000928c:    e2832c01    .,..    ADD      r2,r3,#0x100
+        0x00009290:    e3a03000    .0..    MOV      r3,#0
+        0x00009294:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009298:    e59f2c64    d,..    LDR      r2,[pc,#3172] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000929c:    ea0000b8    ....    B        {pc} + 0x2e8  ; 0x9584
+        0x000092a0:    e59f2c5c    \,..    LDR      r2,[pc,#3164] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000092a4:    e3500000    ..P.    CMP      r0,#0
+        0x000092a8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000092ac:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000092b0:    e3500000    ..P.    CMP      r0,#0
+        0x000092b4:    e59f2c48    H,..    LDR      r2,[pc,#3144] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000092b8:    e2831004    ....    ADD      r1,r3,#4
+        0x000092bc:    e59f3c44    D<..    LDR      r3,[pc,#3140] ; [0x9f08] = 0x7030001
+        0x000092c0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000092c4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000092c8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000092cc:    e3500000    ..P.    CMP      r0,#0
+        0x000092d0:    e59f2c2c    ,,..    LDR      r2,[pc,#3116] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000092d4:    e2831014    ....    ADD      r1,r3,#0x14
+        0x000092d8:    e59f3c2c    ,<..    LDR      r3,[pc,#3116] ; [0x9f0c] = 0x8a0018
+        0x000092dc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000092e0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000092e4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000092e8:    e3500000    ..P.    CMP      r0,#0
+        0x000092ec:    e59f2c10    .,..    LDR      r2,[pc,#3088] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000092f0:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x000092f4:    e59f3c14    .<..    LDR      r3,[pc,#3092] ; [0x9f10] = 0x160271
+        0x000092f8:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000092fc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009300:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009304:    e3500000    ..P.    CMP      r0,#0
+        0x00009308:    e59f2bf4    .+..    LDR      r2,[pc,#3060] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000930c:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009310:    e59f3bfc    .;..    LDR      r3,[pc,#3068] ; [0x9f14] = 0x16447e
+        0x00009314:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009318:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000931c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009320:    e3500000    ..P.    CMP      r0,#0
+        0x00009324:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009328:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x0000932c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009330:    e59f2bcc    .+..    LDR      r2,[pc,#3020] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009334:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009338:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000933c:    e3500000    ..P.    CMP      r0,#0
+        0x00009340:    e59f2bbc    .+..    LDR      r2,[pc,#3004] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009344:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009348:    e59f3bc8    .;..    LDR      r3,[pc,#3016] ; [0x9f18] = 0x800d000c
+        0x0000934c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009350:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009354:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009358:    e3500000    ..P.    CMP      r0,#0
+        0x0000935c:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x00009360:    e3a03000    .0..    MOV      r3,#0
+        0x00009364:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009368:    e59f2b94    .+..    LDR      r2,[pc,#2964] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000936c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009370:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009374:    e3500000    ..P.    CMP      r0,#0
+        0x00009378:    e283200c    . ..    ADD      r2,r3,#0xc
+        0x0000937c:    e3a03e12    .>..    MOV      r3,#0x120
+        0x00009380:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009384:    e59f2b78    x+..    LDR      r2,[pc,#2936] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009388:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000938c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009390:    e3500000    ..P.    CMP      r0,#0
+        0x00009394:    e59f2b68    h+..    LDR      r2,[pc,#2920] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009398:    e2831020     ...    ADD      r1,r3,#0x20
+        0x0000939c:    e59f3b78    x;..    LDR      r3,[pc,#2936] ; [0x9f1c] = 0xfc00fc
+        0x000093a0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000093a4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000093a8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000093ac:    e3500000    ..P.    CMP      r0,#0
+        0x000093b0:    e2832f43    C/..    ADD      r2,r3,#0x10c
+        0x000093b4:    e3023828    (8..    MOV      r3,#0x2828
+        0x000093b8:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000093bc:    e59f2b40    @+..    LDR      r2,[pc,#2880] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000093c0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000093c4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000093c8:    e3500000    ..P.    CMP      r0,#0
+        0x000093cc:    e59f2b30    0+..    LDR      r2,[pc,#2864] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000093d0:    e2831010    ....    ADD      r1,r3,#0x10
+        0x000093d4:    e59f3b5c    \;..    LDR      r3,[pc,#2908] ; [0x9f38] = 0x21f69446
+        0x000093d8:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000093dc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000093e0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000093e4:    e3500000    ..P.    CMP      r0,#0
+        0x000093e8:    e2832f4a    J/..    ADD      r2,r3,#0x128
+        0x000093ec:    e3a03000    .0..    MOV      r3,#0
+        0x000093f0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000093f4:    e59f2b08    .+..    LDR      r2,[pc,#2824] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000093f8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000093fc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009400:    e3500000    ..P.    CMP      r0,#0
+        0x00009404:    e2832f46    F/..    ADD      r2,r3,#0x118
+        0x00009408:    e30e30e0    .0..    MOV      r3,#0xe0e0
+        0x0000940c:    ea000061    a...    B        {pc} + 0x18c  ; 0x9598
+        0x00009410:    e59f2aec    .*..    LDR      r2,[pc,#2796] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009414:    e3500000    ..P.    CMP      r0,#0
+        0x00009418:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000941c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009420:    e3500000    ..P.    CMP      r0,#0
+        0x00009424:    e59f2ad8    .*..    LDR      r2,[pc,#2776] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009428:    e2831004    ....    ADD      r1,r3,#4
+        0x0000942c:    e59f3aec    .:..    LDR      r3,[pc,#2796] ; [0x9f20] = 0x7030000
+        0x00009430:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009434:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009438:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000943c:    e3500000    ..P.    CMP      r0,#0
+        0x00009440:    e59f2abc    .*..    LDR      r2,[pc,#2748] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009444:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009448:    e59f3ad4    .:..    LDR      r3,[pc,#2772] ; [0x9f24] = 0x760020
+        0x0000944c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009450:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009454:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009458:    e3500000    ..P.    CMP      r0,#0
+        0x0000945c:    e59f2aa0    .*..    LDR      r2,[pc,#2720] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009460:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009464:    e59f3abc    .:..    LDR      r3,[pc,#2748] ; [0x9f28] = 0x16020d
+        0x00009468:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000946c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009470:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009474:    e3500000    ..P.    CMP      r0,#0
+        0x00009478:    e59f2a84    .*..    LDR      r2,[pc,#2692] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000947c:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009480:    e59f3a8c    .:..    LDR      r3,[pc,#2700] ; [0x9f14] = 0x16447e
+        0x00009484:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009488:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000948c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009490:    e3500000    ..P.    CMP      r0,#0
+        0x00009494:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009498:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x0000949c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000094a0:    e59f2a5c    \*..    LDR      r2,[pc,#2652] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000094a4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000094a8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000094ac:    e3500000    ..P.    CMP      r0,#0
+        0x000094b0:    e59f2a4c    L*..    LDR      r2,[pc,#2636] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000094b4:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x000094b8:    e59f3af8    .:..    LDR      r3,[pc,#2808] ; [0x9fb8] = 0xe000c
+        0x000094bc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000094c0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000094c4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000094c8:    e3500000    ..P.    CMP      r0,#0
+        0x000094cc:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x000094d0:    e3a03000    .0..    MOV      r3,#0
+        0x000094d4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000094d8:    e59f2a24    $*..    LDR      r2,[pc,#2596] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000094dc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000094e0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000094e4:    e3500000    ..P.    CMP      r0,#0
+        0x000094e8:    e283200c    . ..    ADD      r2,r3,#0xc
+        0x000094ec:    e3a03e12    .>..    MOV      r3,#0x120
+        0x000094f0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000094f4:    e59f2a08    .*..    LDR      r2,[pc,#2568] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000094f8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000094fc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009500:    e3500000    ..P.    CMP      r0,#0
+        0x00009504:    e59f29f8    .)..    LDR      r2,[pc,#2552] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009508:    e2831020     ...    ADD      r1,r3,#0x20
+        0x0000950c:    e59f3a18    .:..    LDR      r3,[pc,#2584] ; [0x9f2c] = 0xf0011a
+        0x00009510:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009514:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009518:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000951c:    e3500000    ..P.    CMP      r0,#0
+        0x00009520:    e2832f43    C/..    ADD      r2,r3,#0x10c
+        0x00009524:    e3a0304f    O0..    MOV      r3,#0x4f
+        0x00009528:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000952c:    e59f29d0    .)..    LDR      r2,[pc,#2512] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009530:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009534:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009538:    e3500000    ..P.    CMP      r0,#0
+        0x0000953c:    e2832e11    ....    ADD      r2,r3,#0x110
+        0x00009540:    e3a03000    .0..    MOV      r3,#0
+        0x00009544:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009548:    e59f29b4    .)..    LDR      r2,[pc,#2484] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000954c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009550:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009554:    e3500000    ..P.    CMP      r0,#0
+        0x00009558:    e2832f46    F/..    ADD      r2,r3,#0x118
+        0x0000955c:    e30a30a0    .0..    MOV      r3,#0xa0a0
+        0x00009560:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009564:    e59f2998    .)..    LDR      r2,[pc,#2456] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009568:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000956c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009570:    e3500000    ..P.    CMP      r0,#0
+        0x00009574:    e59f2988    .)..    LDR      r2,[pc,#2440] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009578:    e2831f47    G...    ADD      r1,r3,#0x11c
+        0x0000957c:    e59f39ac    .9..    LDR      r3,[pc,#2476] ; [0x9f30] = 0x1000f0
+        0x00009580:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009584:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009588:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000958c:    e3500000    ..P.    CMP      r0,#0
+        0x00009590:    e2832f4a    J/..    ADD      r2,r3,#0x128
+        0x00009594:    e3a03000    .0..    MOV      r3,#0
+        0x00009598:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000959c:    e59f2960    `)..    LDR      r2,[pc,#2400] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000095a0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000095a4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000095a8:    e2832f4b    K/..    ADD      r2,r3,#0x12c
+        0x000095ac:    e3003101    .1..    MOV      r3,#0x101
+        0x000095b0:    ea0002d6    ....    B        {pc} + 0xb60  ; 0xa110
+        0x000095b4:    e59f2948    H)..    LDR      r2,[pc,#2376] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000095b8:    e3500000    ..P.    CMP      r0,#0
+        0x000095bc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000095c0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000095c4:    e3500000    ..P.    CMP      r0,#0
+        0x000095c8:    e59f2934    4)..    LDR      r2,[pc,#2356] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000095cc:    e2831004    ....    ADD      r1,r3,#4
+        0x000095d0:    e59f3964    d9..    LDR      r3,[pc,#2404] ; [0x9f3c] = 0x7040000
+        0x000095d4:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000095d8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000095dc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000095e0:    e3500000    ..P.    CMP      r0,#0
+        0x000095e4:    e59f2918    .)..    LDR      r2,[pc,#2328] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000095e8:    e2831014    ....    ADD      r1,r3,#0x14
+        0x000095ec:    e59f3930    09..    LDR      r3,[pc,#2352] ; [0x9f24] = 0x760020
+        0x000095f0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000095f4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000095f8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000095fc:    e3500000    ..P.    CMP      r0,#0
+        0x00009600:    e59f28fc    .(..    LDR      r2,[pc,#2300] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009604:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009608:    e59f3918    .9..    LDR      r3,[pc,#2328] ; [0x9f28] = 0x16020d
+        0x0000960c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009610:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009614:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009618:    e3500000    ..P.    CMP      r0,#0
+        0x0000961c:    e59f28e0    .(..    LDR      r2,[pc,#2272] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009620:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009624:    e59f38e8    .8..    LDR      r3,[pc,#2280] ; [0x9f14] = 0x16447e
+        0x00009628:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000962c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009630:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009634:    e3500000    ..P.    CMP      r0,#0
+        0x00009638:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x0000963c:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x00009640:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009644:    e59f28b8    .(..    LDR      r2,[pc,#2232] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009648:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000964c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009650:    e3500000    ..P.    CMP      r0,#0
+        0x00009654:    e59f28a8    .(..    LDR      r2,[pc,#2216] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009658:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x0000965c:    e59f3954    T9..    LDR      r3,[pc,#2388] ; [0x9fb8] = 0xe000c
+        0x00009660:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009664:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009668:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000966c:    e3500000    ..P.    CMP      r0,#0
+        0x00009670:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x00009674:    e3a03000    .0..    MOV      r3,#0
+        0x00009678:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000967c:    e59f2880    .(..    LDR      r2,[pc,#2176] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009680:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009684:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009688:    e3500000    ..P.    CMP      r0,#0
+        0x0000968c:    e283200c    . ..    ADD      r2,r3,#0xc
+        0x00009690:    e3a03e12    .>..    MOV      r3,#0x120
+        0x00009694:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009698:    e59f2864    d(..    LDR      r2,[pc,#2148] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000969c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000096a0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000096a4:    e3500000    ..P.    CMP      r0,#0
+        0x000096a8:    e59f2854    T(..    LDR      r2,[pc,#2132] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000096ac:    e2831020     ...    ADD      r1,r3,#0x20
+        0x000096b0:    e59f3864    d8..    LDR      r3,[pc,#2148] ; [0x9f1c] = 0xfc00fc
+        0x000096b4:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000096b8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000096bc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000096c0:    e3500000    ..P.    CMP      r0,#0
+        0x000096c4:    e2832f43    C/..    ADD      r2,r3,#0x10c
+        0x000096c8:    e3a0304f    O0..    MOV      r3,#0x4f
+        0x000096cc:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000096d0:    e59f282c    ,(..    LDR      r2,[pc,#2092] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000096d4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000096d8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000096dc:    e3500000    ..P.    CMP      r0,#0
+        0x000096e0:    e2832e11    ....    ADD      r2,r3,#0x110
+        0x000096e4:    e3a03000    .0..    MOV      r3,#0
+        0x000096e8:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000096ec:    e59f2810    .(..    LDR      r2,[pc,#2064] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000096f0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000096f4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000096f8:    e3500000    ..P.    CMP      r0,#0
+        0x000096fc:    e2832f46    F/..    ADD      r2,r3,#0x118
+        0x00009700:    e30a30a0    .0..    MOV      r3,#0xa0a0
+        0x00009704:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009708:    e59f27f4    .'..    LDR      r2,[pc,#2036] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000970c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009710:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009714:    e2832f47    G/..    ADD      r2,r3,#0x11c
+        0x00009718:    e59f3820     8..    LDR      r3,[pc,#2080] ; [0x9f40] = 0x1000fc
+        0x0000971c:    ea00027b    {...    B        {pc} + 0x9f4  ; 0xa110
+        0x00009720:    e59f27dc    .'..    LDR      r2,[pc,#2012] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009724:    e3500000    ..P.    CMP      r0,#0
+        0x00009728:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000972c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009730:    e3500000    ..P.    CMP      r0,#0
+        0x00009734:    e59f27c8    .'..    LDR      r2,[pc,#1992] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009738:    e2831004    ....    ADD      r1,r3,#4
+        0x0000973c:    e59f3800    .8..    LDR      r3,[pc,#2048] ; [0x9f44] = 0x7040001
+        0x00009740:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009744:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009748:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000974c:    e3500000    ..P.    CMP      r0,#0
+        0x00009750:    e59f27ac    .'..    LDR      r2,[pc,#1964] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009754:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009758:    e59f37ac    .7..    LDR      r3,[pc,#1964] ; [0x9f0c] = 0x8a0018
+        0x0000975c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009760:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009764:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009768:    e3500000    ..P.    CMP      r0,#0
+        0x0000976c:    e59f2790    .'..    LDR      r2,[pc,#1936] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009770:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009774:    e59f3794    .7..    LDR      r3,[pc,#1940] ; [0x9f10] = 0x160271
+        0x00009778:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000977c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009780:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009784:    e3500000    ..P.    CMP      r0,#0
+        0x00009788:    e59f2774    t'..    LDR      r2,[pc,#1908] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000978c:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009790:    e59f377c    |7..    LDR      r3,[pc,#1916] ; [0x9f14] = 0x16447e
+        0x00009794:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009798:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000979c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000097a0:    e3500000    ..P.    CMP      r0,#0
+        0x000097a4:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x000097a8:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x000097ac:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000097b0:    e59f274c    L'..    LDR      r2,[pc,#1868] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000097b4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000097b8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000097bc:    e3500000    ..P.    CMP      r0,#0
+        0x000097c0:    e59f273c    <'..    LDR      r2,[pc,#1852] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000097c4:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x000097c8:    e59f3748    H7..    LDR      r3,[pc,#1864] ; [0x9f18] = 0x800d000c
+        0x000097cc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000097d0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000097d4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000097d8:    e3500000    ..P.    CMP      r0,#0
+        0x000097dc:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x000097e0:    e3a03000    .0..    MOV      r3,#0
+        0x000097e4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000097e8:    e59f2714    .'..    LDR      r2,[pc,#1812] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000097ec:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000097f0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000097f4:    e3500000    ..P.    CMP      r0,#0
+        0x000097f8:    e283200c    . ..    ADD      r2,r3,#0xc
+        0x000097fc:    e3a03e12    .>..    MOV      r3,#0x120
+        0x00009800:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009804:    e59f26f8    .&..    LDR      r2,[pc,#1784] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009808:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000980c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009810:    e3500000    ..P.    CMP      r0,#0
+        0x00009814:    e59f26e8    .&..    LDR      r2,[pc,#1768] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009818:    e2831020     ...    ADD      r1,r3,#0x20
+        0x0000981c:    e59f36f8    .6..    LDR      r3,[pc,#1784] ; [0x9f1c] = 0xfc00fc
+        0x00009820:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009824:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009828:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000982c:    e2832f43    C/..    ADD      r2,r3,#0x10c
+        0x00009830:    e3023828    (8..    MOV      r3,#0x2828
+        0x00009834:    ea000235    5...    B        {pc} + 0x8dc  ; 0xa110
+        0x00009838:    e59f26c4    .&..    LDR      r2,[pc,#1732] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000983c:    e3500000    ..P.    CMP      r0,#0
+        0x00009840:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009844:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009848:    e3500000    ..P.    CMP      r0,#0
+        0x0000984c:    e59f26b0    .&..    LDR      r2,[pc,#1712] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009850:    e2831004    ....    ADD      r1,r3,#4
+        0x00009854:    e59f36ec    .6..    LDR      r3,[pc,#1772] ; [0x9f48] = 0x7040002
+        0x00009858:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000985c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009860:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009864:    e3500000    ..P.    CMP      r0,#0
+        0x00009868:    e59f2694    .&..    LDR      r2,[pc,#1684] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000986c:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009870:    e59f36ac    .6..    LDR      r3,[pc,#1708] ; [0x9f24] = 0x760020
+        0x00009874:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009878:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000987c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009880:    e3500000    ..P.    CMP      r0,#0
+        0x00009884:    e59f2678    x&..    LDR      r2,[pc,#1656] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009888:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x0000988c:    e59f36b8    .6..    LDR      r3,[pc,#1720] ; [0x9f4c] = 0x2c020d
+        0x00009890:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009894:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009898:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000989c:    e3500000    ..P.    CMP      r0,#0
+        0x000098a0:    e59f265c    \&..    LDR      r2,[pc,#1628] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000098a4:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x000098a8:    e59f3664    d6..    LDR      r3,[pc,#1636] ; [0x9f14] = 0x16447e
+        0x000098ac:    e5813000    .0..    STR      r3,[r1,#0]
+        0x000098b0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000098b4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000098b8:    e3500000    ..P.    CMP      r0,#0
+        0x000098bc:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x000098c0:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x000098c4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000098c8:    e59f2634    4&..    LDR      r2,[pc,#1588] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000098cc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000098d0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000098d4:    e3500000    ..P.    CMP      r0,#0
+        0x000098d8:    e59f2624    $&..    LDR      r2,[pc,#1572] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000098dc:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x000098e0:    e59f36d0    .6..    LDR      r3,[pc,#1744] ; [0x9fb8] = 0xe000c
+        0x000098e4:    ea00002a    *...    B        {pc} + 0xb0  ; 0x9994
+        0x000098e8:    e59f2614    .&..    LDR      r2,[pc,#1556] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000098ec:    e3500000    ..P.    CMP      r0,#0
+        0x000098f0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000098f4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000098f8:    e3500000    ..P.    CMP      r0,#0
+        0x000098fc:    e59f2600    .&..    LDR      r2,[pc,#1536] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009900:    e2831004    ....    ADD      r1,r3,#4
+        0x00009904:    e59f3644    D6..    LDR      r3,[pc,#1604] ; [0x9f50] = 0x7040003
+        0x00009908:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000990c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009910:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009914:    e3500000    ..P.    CMP      r0,#0
+        0x00009918:    e59f25e4    .%..    LDR      r2,[pc,#1508] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000991c:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009920:    e59f35e4    .5..    LDR      r3,[pc,#1508] ; [0x9f0c] = 0x8a0018
+        0x00009924:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009928:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000992c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009930:    e3500000    ..P.    CMP      r0,#0
+        0x00009934:    e59f25c8    .%..    LDR      r2,[pc,#1480] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009938:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x0000993c:    e59f3610    .6..    LDR      r3,[pc,#1552] ; [0x9f54] = 0x2c0271
+        0x00009940:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009944:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009948:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000994c:    e3500000    ..P.    CMP      r0,#0
+        0x00009950:    e59f25ac    .%..    LDR      r2,[pc,#1452] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009954:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009958:    e59f35b4    .5..    LDR      r3,[pc,#1460] ; [0x9f14] = 0x16447e
+        0x0000995c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009960:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009964:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009968:    e3500000    ..P.    CMP      r0,#0
+        0x0000996c:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009970:    e3a03e5a    Z>..    MOV      r3,#0x5a0
+        0x00009974:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009978:    e59f2584    .%..    LDR      r2,[pc,#1412] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000997c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009980:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009984:    e3500000    ..P.    CMP      r0,#0
+        0x00009988:    e59f2574    t%..    LDR      r2,[pc,#1396] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x0000998c:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009990:    e59f35c0    .5..    LDR      r3,[pc,#1472] ; [0x9f58] = 0x800b000c
+        0x00009994:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009998:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000999c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000099a0:    e3500000    ..P.    CMP      r0,#0
+        0x000099a4:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x000099a8:    e3a03000    .0..    MOV      r3,#0
+        0x000099ac:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000099b0:    e59f254c    L%..    LDR      r2,[pc,#1356] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000099b4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000099b8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000099bc:    e3500000    ..P.    CMP      r0,#0
+        0x000099c0:    e283200c    . ..    ADD      r2,r3,#0xc
+        0x000099c4:    e3a03e12    .>..    MOV      r3,#0x120
+        0x000099c8:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000099cc:    e59f2530    0%..    LDR      r2,[pc,#1328] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000099d0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000099d4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000099d8:    e2832020      ..    ADD      r2,r3,#0x20
+        0x000099dc:    e59f3538    85..    LDR      r3,[pc,#1336] ; [0x9f1c] = 0xfc00fc
+        0x000099e0:    ea0001ca    ....    B        {pc} + 0x730  ; 0xa110
+        0x000099e4:    e59f2518    .%..    LDR      r2,[pc,#1304] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000099e8:    e3500000    ..P.    CMP      r0,#0
+        0x000099ec:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x000099f0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x000099f4:    e3500000    ..P.    CMP      r0,#0
+        0x000099f8:    e59f2504    .%..    LDR      r2,[pc,#1284] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x000099fc:    e2831004    ....    ADD      r1,r3,#4
+        0x00009a00:    e59f3554    T5..    LDR      r3,[pc,#1364] ; [0x9f5c] = 0x4000a
+        0x00009a04:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009a08:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009a0c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009a10:    e3500000    ..P.    CMP      r0,#0
+        0x00009a14:    e59f24e8    .$..    LDR      r2,[pc,#1256] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009a18:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009a1c:    e59f353c    <5..    LDR      r3,[pc,#1340] ; [0x9f60] = 0x1040190
+        0x00009a20:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009a24:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009a28:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009a2c:    e3500000    ..P.    CMP      r0,#0
+        0x00009a30:    e59f24cc    .$..    LDR      r2,[pc,#1228] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009a34:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00009a38:    e59f3524    $5..    LDR      r3,[pc,#1316] ; [0x9f64] = 0x5000190
+        0x00009a3c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009a40:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009a44:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009a48:    e3500000    ..P.    CMP      r0,#0
+        0x00009a4c:    e59f24b0    .$..    LDR      r2,[pc,#1200] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009a50:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009a54:    e59f350c    .5..    LDR      r3,[pc,#1292] ; [0x9f68] = 0x1902ee
+        0x00009a58:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009a5c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009a60:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009a64:    e3500000    ..P.    CMP      r0,#0
+        0x00009a68:    e59f2494    .$..    LDR      r2,[pc,#1172] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009a6c:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009a70:    e59f34f4    .4..    LDR      r3,[pc,#1268] ; [0x9f6c] = 0xdc280228
+        0x00009a74:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009a78:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009a7c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009a80:    e3500000    ..P.    CMP      r0,#0
+        0x00009a84:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009a88:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00009a8c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009a90:    e59f246c    l$..    LDR      r2,[pc,#1132] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009a94:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009a98:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009a9c:    e3500000    ..P.    CMP      r0,#0
+        0x00009aa0:    e59f245c    \$..    LDR      r2,[pc,#1116] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009aa4:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009aa8:    e59f3508    .5..    LDR      r3,[pc,#1288] ; [0x9fb8] = 0xe000c
+        0x00009aac:    ea000031    1...    B        {pc} + 0xcc  ; 0x9b78
+        0x00009ab0:    e59f244c    L$..    LDR      r2,[pc,#1100] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009ab4:    e3500000    ..P.    CMP      r0,#0
+        0x00009ab8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009abc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009ac0:    e3500000    ..P.    CMP      r0,#0
+        0x00009ac4:    e59f2438    8$..    LDR      r2,[pc,#1080] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009ac8:    e2831004    ....    ADD      r1,r3,#4
+        0x00009acc:    e59f3488    .4..    LDR      r3,[pc,#1160] ; [0x9f5c] = 0x4000a
+        0x00009ad0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009ad4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ad8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009adc:    e3500000    ..P.    CMP      r0,#0
+        0x00009ae0:    e59f241c    .$..    LDR      r2,[pc,#1052] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009ae4:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009ae8:    e59f3480    .4..    LDR      r3,[pc,#1152] ; [0x9f70] = 0x1040046
+        0x00009aec:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009af0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009af4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009af8:    e3500000    ..P.    CMP      r0,#0
+        0x00009afc:    e59f2400    .$..    LDR      r2,[pc,#1024] ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009b00:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00009b04:    e59f3468    h4..    LDR      r3,[pc,#1128] ; [0x9f74] = 0x5000046
+        0x00009b08:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009b0c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009b10:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009b14:    e3500000    ..P.    CMP      r0,#0
+        0x00009b18:    e59f23e4    .#..    LDR      r2,[pc,#996]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009b1c:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009b20:    e59f3440    @4..    LDR      r3,[pc,#1088] ; [0x9f68] = 0x1902ee
+        0x00009b24:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009b28:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009b2c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009b30:    e3500000    ..P.    CMP      r0,#0
+        0x00009b34:    e59f23c8    .#..    LDR      r2,[pc,#968]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009b38:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009b3c:    e59f3428    (4..    LDR      r3,[pc,#1064] ; [0x9f6c] = 0xdc280228
+        0x00009b40:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009b44:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009b48:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009b4c:    e3500000    ..P.    CMP      r0,#0
+        0x00009b50:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009b54:    e3a03c05    .<..    MOV      r3,#0x500
+        0x00009b58:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009b5c:    e59f23a0    .#..    LDR      r2,[pc,#928]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009b60:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009b64:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009b68:    e3500000    ..P.    CMP      r0,#0
+        0x00009b6c:    e59f2390    .#..    LDR      r2,[pc,#912]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009b70:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009b74:    e59f33fc    .3..    LDR      r3,[pc,#1020] ; [0x9f78] = 0xc0008
+        0x00009b78:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009b7c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009b80:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009b84:    e3500000    ..P.    CMP      r0,#0
+        0x00009b88:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x00009b8c:    e3a03407    .4..    MOV      r3,#0x7000000
+        0x00009b90:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009b94:    e59f2368    h#..    LDR      r2,[pc,#872]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009b98:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009b9c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009ba0:    e3500000    ..P.    CMP      r0,#0
+        0x00009ba4:    e59f2358    X#..    LDR      r2,[pc,#856]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009ba8:    e283100c    ....    ADD      r1,r3,#0xc
+        0x00009bac:    e59f33ec    .3..    LDR      r3,[pc,#1004] ; [0x9fa0] = 0x1be0124
+        0x00009bb0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009bb4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009bb8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009bbc:    e3500000    ..P.    CMP      r0,#0
+        0x00009bc0:    e2832f4a    J/..    ADD      r2,r3,#0x128
+        0x00009bc4:    e3a03000    .0..    MOV      r3,#0
+        0x00009bc8:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009bcc:    e59f2330    0#..    LDR      r2,[pc,#816]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009bd0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009bd4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009bd8:    e3500000    ..P.    CMP      r0,#0
+        0x00009bdc:    e59f2320     #..    LDR      r2,[pc,#800]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009be0:    e2831020     ...    ADD      r1,r3,#0x20
+        0x00009be4:    e59f3330    03..    LDR      r3,[pc,#816]  ; [0x9f1c] = 0xfc00fc
+        0x00009be8:    ea0000bf    ....    B        {pc} + 0x304  ; 0x9eec
+        0x00009bec:    e59f2310    .#..    LDR      r2,[pc,#784]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009bf0:    e3500000    ..P.    CMP      r0,#0
+        0x00009bf4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009bf8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009bfc:    e3500000    ..P.    CMP      r0,#0
+        0x00009c00:    e59f22fc    ."..    LDR      r2,[pc,#764]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009c04:    e2831004    ....    ADD      r1,r3,#4
+        0x00009c08:    e59f336c    l3..    LDR      r3,[pc,#876]  ; [0x9f7c] = 0x4000c
+        0x00009c0c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009c10:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009c14:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009c18:    e3500000    ..P.    CMP      r0,#0
+        0x00009c1c:    e59f22e0    ."..    LDR      r2,[pc,#736]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009c20:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009c24:    e59f3354    T3..    LDR      r3,[pc,#852]  ; [0x9f80] = 0xc001e4
+        0x00009c28:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009c2c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009c30:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009c34:    e3500000    ..P.    CMP      r0,#0
+        0x00009c38:    e59f22c4    ."..    LDR      r2,[pc,#708]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009c3c:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00009c40:    e59f333c    <3..    LDR      r3,[pc,#828]  ; [0x9f84] = 0x3700108
+        0x00009c44:    ea000015    ....    B        {pc} + 0x5c  ; 0x9ca0
+        0x00009c48:    e59f22b4    ."..    LDR      r2,[pc,#692]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009c4c:    e3500000    ..P.    CMP      r0,#0
+        0x00009c50:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009c54:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009c58:    e3500000    ..P.    CMP      r0,#0
+        0x00009c5c:    e59f22a0    ."..    LDR      r2,[pc,#672]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009c60:    e2831004    ....    ADD      r1,r3,#4
+        0x00009c64:    e59f3310    .3..    LDR      r3,[pc,#784]  ; [0x9f7c] = 0x4000c
+        0x00009c68:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009c6c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009c70:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009c74:    e3500000    ..P.    CMP      r0,#0
+        0x00009c78:    e59f2284    ."..    LDR      r2,[pc,#644]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009c7c:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009c80:    e59f331c    .3..    LDR      r3,[pc,#796]  ; [0x9fa4] = 0xc0002c
+        0x00009c84:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009c88:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009c8c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009c90:    e3500000    ..P.    CMP      r0,#0
+        0x00009c94:    e59f2268    h"..    LDR      r2,[pc,#616]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009c98:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00009c9c:    e59f32e4    .2..    LDR      r3,[pc,#740]  ; [0x9f88] = 0x370002c
+        0x00009ca0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009ca4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ca8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009cac:    e3500000    ..P.    CMP      r0,#0
+        0x00009cb0:    e59f224c    L"..    LDR      r2,[pc,#588]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009cb4:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009cb8:    e59f32cc    .2..    LDR      r3,[pc,#716]  ; [0x9f8c] = 0x140465
+        0x00009cbc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009cc0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009cc4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009cc8:    e3500000    ..P.    CMP      r0,#0
+        0x00009ccc:    e59f2230    0"..    LDR      r2,[pc,#560]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009cd0:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009cd4:    e59f32b4    .2..    LDR      r3,[pc,#692]  ; [0x9f90] = 0x582c442c
+        0x00009cd8:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009cdc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ce0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009ce4:    e3500000    ..P.    CMP      r0,#0
+        0x00009ce8:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009cec:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00009cf0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009cf4:    e59f2208    ."..    LDR      r2,[pc,#520]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009cf8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009cfc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009d00:    e3500000    ..P.    CMP      r0,#0
+        0x00009d04:    e59f21f8    .!..    LDR      r2,[pc,#504]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009d08:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009d0c:    e59f3280    .2..    LDR      r3,[pc,#640]  ; [0x9f94] = 0xe0008
+        0x00009d10:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009d14:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009d18:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009d1c:    e3500000    ..P.    CMP      r0,#0
+        0x00009d20:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x00009d24:    e3a03407    .4..    MOV      r3,#0x7000000
+        0x00009d28:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009d2c:    e59f21d0    .!..    LDR      r2,[pc,#464]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009d30:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009d34:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009d38:    e3500000    ..P.    CMP      r0,#0
+        0x00009d3c:    e59f21c0    .!..    LDR      r2,[pc,#448]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009d40:    e283100c    ....    ADD      r1,r3,#0xc
+        0x00009d44:    e59f3254    T2..    LDR      r3,[pc,#596]  ; [0x9fa0] = 0x1be0124
+        0x00009d48:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009d4c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009d50:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009d54:    e3500000    ..P.    CMP      r0,#0
+        0x00009d58:    e2832f4a    J/..    ADD      r2,r3,#0x128
+        0x00009d5c:    e3a03000    .0..    MOV      r3,#0
+        0x00009d60:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009d64:    e59f2198    .!..    LDR      r2,[pc,#408]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009d68:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009d6c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009d70:    e3500000    ..P.    CMP      r0,#0
+        0x00009d74:    e59f2188    .!..    LDR      r2,[pc,#392]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009d78:    e2831020     ...    ADD      r1,r3,#0x20
+        0x00009d7c:    e59f3198    .1..    LDR      r3,[pc,#408]  ; [0x9f1c] = 0xfc00fc
+        0x00009d80:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009d84:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009d88:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009d8c:    e3500000    ..P.    CMP      r0,#0
+        0x00009d90:    e2832f46    F/..    ADD      r2,r3,#0x118
+        0x00009d94:    e30a30a0    .0..    MOV      r3,#0xa0a0
+        0x00009d98:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009d9c:    e59f2160    `!..    LDR      r2,[pc,#352]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009da0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009da4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009da8:    e2832f41    A/..    ADD      r2,r3,#0x104
+        0x00009dac:    e3a03000    .0..    MOV      r3,#0
+        0x00009db0:    ea0000d6    ....    B        {pc} + 0x360  ; 0xa110
+        0x00009db4:    e59f2148    H!..    LDR      r2,[pc,#328]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009db8:    e3500000    ..P.    CMP      r0,#0
+        0x00009dbc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009dc0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009dc4:    e3500000    ..P.    CMP      r0,#0
+        0x00009dc8:    e59f2134    4!..    LDR      r2,[pc,#308]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009dcc:    e2831004    ....    ADD      r1,r3,#4
+        0x00009dd0:    e59f31c4    .1..    LDR      r3,[pc,#452]  ; [0x9f9c] = 0x4000e
+        0x00009dd4:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009dd8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ddc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009de0:    e3500000    ..P.    CMP      r0,#0
+        0x00009de4:    e59f2118    .!..    LDR      r2,[pc,#280]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009de8:    e2831014    ....    ADD      r1,r3,#0x14
+        0x00009dec:    e59f318c    .1..    LDR      r3,[pc,#396]  ; [0x9f80] = 0xc001e4
+        0x00009df0:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009df4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009df8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009dfc:    e3500000    ..P.    CMP      r0,#0
+        0x00009e00:    e59f20fc    . ..    LDR      r2,[pc,#252]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009e04:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00009e08:    e59f3188    .1..    LDR      r3,[pc,#392]  ; [0x9f98] = 0x7bc01e4
+        0x00009e0c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009e10:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009e14:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009e18:    e3500000    ..P.    CMP      r0,#0
+        0x00009e1c:    e59f20e0    . ..    LDR      r2,[pc,#224]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009e20:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x00009e24:    e59f3180    .1..    LDR      r3,[pc,#384]  ; [0x9fac] = 0x290465
+        0x00009e28:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009e2c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009e30:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009e34:    e3500000    ..P.    CMP      r0,#0
+        0x00009e38:    e59f20c4    . ..    LDR      r2,[pc,#196]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009e3c:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x00009e40:    e59f316c    l1..    LDR      r3,[pc,#364]  ; [0x9fb4] = 0x582c022c
+        0x00009e44:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009e48:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009e4c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009e50:    e3500000    ..P.    CMP      r0,#0
+        0x00009e54:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x00009e58:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x00009e5c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009e60:    e59f209c    . ..    LDR      r2,[pc,#156]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009e64:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009e68:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009e6c:    e3500000    ..P.    CMP      r0,#0
+        0x00009e70:    e59f208c    . ..    LDR      r2,[pc,#140]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009e74:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x00009e78:    e59f3138    81..    LDR      r3,[pc,#312]  ; [0x9fb8] = 0xe000c
+        0x00009e7c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009e80:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009e84:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009e88:    e3500000    ..P.    CMP      r0,#0
+        0x00009e8c:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x00009e90:    e3a03407    .4..    MOV      r3,#0x7000000
+        0x00009e94:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009e98:    e59f2064    d ..    LDR      r2,[pc,#100]  ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009e9c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ea0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009ea4:    e3500000    ..P.    CMP      r0,#0
+        0x00009ea8:    e59f2054    T ..    LDR      r2,[pc,#84]   ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009eac:    e283100c    ....    ADD      r1,r3,#0xc
+        0x00009eb0:    e59f30e8    .0..    LDR      r3,[pc,#232]  ; [0x9fa0] = 0x1be0124
+        0x00009eb4:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009eb8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ebc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009ec0:    e3500000    ..P.    CMP      r0,#0
+        0x00009ec4:    e2832f4a    J/..    ADD      r2,r3,#0x128
+        0x00009ec8:    e3a03000    .0..    MOV      r3,#0
+        0x00009ecc:    e5823000    .0..    STR      r3,[r2,#0]
+        0x00009ed0:    e59f202c    , ..    LDR      r2,[pc,#44]   ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009ed4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ed8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009edc:    e3500000    ..P.    CMP      r0,#0
+        0x00009ee0:    e59f201c    . ..    LDR      r2,[pc,#28]   ; [([Section 17] + 17016) = 0x9f04]  = 0x4278
+        0x00009ee4:    e2831020     ...    ADD      r1,r3,#0x20
+        0x00009ee8:    e59f30c0    .0..    LDR      r3,[pc,#192]  ; [0x9fb0] = 0xfc00c0
+        0x00009eec:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009ef0:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009ef4:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009ef8:    e2832f46    F/..    ADD      r2,r3,#0x118
+        0x00009efc:    e30a30a0    .0..    MOV      r3,#0xa0a0
+        0x00009f00:    ea000082    ....    B        {pc} + 0x210  ; 0xa110
+    $d
+        0x00009f04:    00004278    xB..    DCD    17016 ; [Section 17]
+        0x00009f08:    07030001    ....    DCD    117637121
+        0x00009f0c:    008a0018    ....    DCD    9043992
+        0x00009f10:    00160271    q...    DCD    1442417
+        0x00009f14:    0016447e    ~D..    DCD    1459326
+        0x00009f18:    800d000c    ....    DCD    2148335628
+        0x00009f1c:    00fc00fc    ....    DCD    16515324
+        0x00009f20:    07030000    ....    DCD    117637120
+        0x00009f24:    00760020     .v.    DCD    7733280
+        0x00009f28:    0016020d    ....    DCD    1442317
+        0x00009f2c:    00f0011a    ....    DCD    15728922
+        0x00009f30:    001000f0    ....    DCD    1048816
+        0x00009f34:    21e6efe3    ...!    DCD    568782819
+        0x00009f38:    21f69446    F..!    DCD    569807942
+        0x00009f3c:    07040000    ....    DCD    117702656
+        0x00009f40:    001000fc    ....    DCD    1048828
+        0x00009f44:    07040001    ....    DCD    117702657
+        0x00009f48:    07040002    ....    DCD    117702658
+        0x00009f4c:    002c020d    ..,.    DCD    2884109
+        0x00009f50:    07040003    ....    DCD    117702659
+        0x00009f54:    002c0271    q.,.    DCD    2884209
+        0x00009f58:    800b000c    ....    DCD    2148204556
+        0x00009f5c:    0004000a    ....    DCD    262154
+        0x00009f60:    01040190    ....    DCD    17039760
+        0x00009f64:    05000190    ....    DCD    83886480
+        0x00009f68:    001902ee    ....    DCD    1639150
+        0x00009f6c:    dc280228    (.(.    DCD    3693609512
+        0x00009f70:    01040046    F...    DCD    17039430
+        0x00009f74:    05000046    F...    DCD    83886150
+        0x00009f78:    000c0008    ....    DCD    786440
+        0x00009f7c:    0004000c    ....    DCD    262156
+        0x00009f80:    00c001e4    ....    DCD    12583396
+        0x00009f84:    03700108    ..p.    DCD    57671944
+        0x00009f88:    0370002c    ,.p.    DCD    57671724
+        0x00009f8c:    00140465    e...    DCD    1311845
+        0x00009f90:    582c442c    ,D,X    DCD    1479296044
+        0x00009f94:    000e0008    ....    DCD    917512
+        0x00009f98:    07bc01e4    ....    DCD    129761764
+        0x00009f9c:    0004000e    ....    DCD    262158
+        0x00009fa0:    01be0124    $...    DCD    29229348
+        0x00009fa4:    00c0002c    ,...    DCD    12582956
+        0x00009fa8:    07bc002c    ,...    DCD    129761324
+        0x00009fac:    00290465    e.).    DCD    2688101
+        0x00009fb0:    00fc00c0    ....    DCD    16515264
+        0x00009fb4:    582c022c    ,.,X    DCD    1479279148
+        0x00009fb8:    000e000c    ....    DCD    917516
+        0x00009fbc:    00004278    xB..    DCD    17016 ; [Section 17]
+        0x00009fc0:    1f1f1f1f    ....    DCD    522133279
+    $a
+        0x00009fc4:    e51f2010    . ..    LDR      r2,[pc,#-16]  ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x00009fc8:    e3500000    ..P.    CMP      r0,#0
+        0x00009fcc:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009fd0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009fd4:    e3500000    ..P.    CMP      r0,#0
+        0x00009fd8:    e51f2024    $ ..    LDR      r2,[pc,#-36]  ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x00009fdc:    e2831004    ....    ADD      r1,r3,#4
+        0x00009fe0:    e51f304c    L0..    LDR      r3,[pc,#-76]  ; [0x9f9c] = 0x4000e
+        0x00009fe4:    e5813000    .0..    STR      r3,[r1,#0]
+        0x00009fe8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x00009fec:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x00009ff0:    e3500000    ..P.    CMP      r0,#0
+        0x00009ff4:    e51f2040    @ ..    LDR      r2,[pc,#-64]  ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x00009ff8:    e283100c    ....    ADD      r1,r3,#0xc
+        0x00009ffc:    e51f3064    d0..    LDR      r3,[pc,#-100] ; [0x9fa0] = 0x1be0124
+        0x0000a000:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a004:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a008:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a00c:    e3500000    ..P.    CMP      r0,#0
+        0x0000a010:    e51f205c    \ ..    LDR      r2,[pc,#-92]  ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a014:    e2831014    ....    ADD      r1,r3,#0x14
+        0x0000a018:    e51f307c    |0..    LDR      r3,[pc,#-124] ; [0x9fa4] = 0xc0002c
+        0x0000a01c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a020:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a024:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a028:    e3500000    ..P.    CMP      r0,#0
+        0x0000a02c:    e51f2078    x ..    LDR      r2,[pc,#-120] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a030:    e2831018    ....    ADD      r1,r3,#0x18
+        0x0000a034:    e51f3094    .0..    LDR      r3,[pc,#-148] ; [0x9fa8] = 0x7bc002c
+        0x0000a038:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a03c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a040:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a044:    e3500000    ..P.    CMP      r0,#0
+        0x0000a048:    e51f2094    . ..    LDR      r2,[pc,#-148] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a04c:    e283101c    ....    ADD      r1,r3,#0x1c
+        0x0000a050:    e51f30ac    .0..    LDR      r3,[pc,#-172] ; [0x9fac] = 0x290465
+        0x0000a054:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a058:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a05c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a060:    e3500000    ..P.    CMP      r0,#0
+        0x0000a064:    e51f20b0    . ..    LDR      r2,[pc,#-176] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a068:    e2831020     ...    ADD      r1,r3,#0x20
+        0x0000a06c:    e51f30c4    .0..    LDR      r3,[pc,#-196] ; [0x9fb0] = 0xfc00c0
+        0x0000a070:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a074:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a078:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a07c:    e3500000    ..P.    CMP      r0,#0
+        0x0000a080:    e51f20cc    . ..    LDR      r2,[pc,#-204] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a084:    e2831f45    E...    ADD      r1,r3,#0x114
+        0x0000a088:    e51f30dc    .0..    LDR      r3,[pc,#-220] ; [0x9fb4] = 0x582c022c
+        0x0000a08c:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a090:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a094:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a098:    e3500000    ..P.    CMP      r0,#0
+        0x0000a09c:    e2832f46    F/..    ADD      r2,r3,#0x118
+        0x0000a0a0:    e30a30a0    .0..    MOV      r3,#0xa0a0
+        0x0000a0a4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a0a8:    e51f20f4    . ..    LDR      r2,[pc,#-244] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a0ac:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a0b0:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a0b4:    e3500000    ..P.    CMP      r0,#0
+        0x0000a0b8:    e2832f49    I/..    ADD      r2,r3,#0x124
+        0x0000a0bc:    e3a03d1e    .=..    MOV      r3,#0x780
+        0x0000a0c0:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a0c4:    e51f2110    .!..    LDR      r2,[pc,#-272] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a0c8:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a0cc:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a0d0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a0d4:    e2832f4a    J/..    ADD      r2,r3,#0x128
+        0x0000a0d8:    e3a03000    .0..    MOV      r3,#0
+        0x0000a0dc:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a0e0:    e51f212c    ,!..    LDR      r2,[pc,#-300] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a0e4:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a0e8:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a0ec:    e3500000    ..P.    CMP      r0,#0
+        0x0000a0f0:    e51f213c    <!..    LDR      r2,[pc,#-316] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a0f4:    e2831e13    ....    ADD      r1,r3,#0x130
+        0x0000a0f8:    e51f3148    H1..    LDR      r3,[pc,#-328] ; [0x9fb8] = 0xe000c
+        0x0000a0fc:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a100:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a104:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a108:    e2832f4f    O/..    ADD      r2,r3,#0x13c
+        0x0000a10c:    e3a03407    .4..    MOV      r3,#0x7000000
+        0x0000a110:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a114:    e3500000    ..P.    CMP      r0,#0
+        0x0000a118:    e51f2164    d!..    LDR      r2,[pc,#-356] ; [([Section 17] + 17016) = 0x9fbc]  = 0x4278
+        0x0000a11c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a120:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a124:    e2832024    $ ..    ADD      r2,r3,#0x24
+        0x0000a128:    e51f3170    p1..    LDR      r3,[pc,#-368] ; [0x9fc0] = 0x1f1f1f1f
+        0x0000a12c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a130:    e3a00000    ....    MOV      r0,#0
+        0x0000a134:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    TVE_set_vga_mode
+        0x0000a138:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a13c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a140:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a144:    e59f2050    P ..    LDR      r2,[pc,#80]   ; [([Section 17] + 17016) = 0xa19c]  = 0x4278
+        0x0000a148:    e3500000    ..P.    CMP      r0,#0
+        0x0000a14c:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a150:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a154:    e3500000    ..P.    CMP      r0,#0
+        0x0000a158:    e2832004    . ..    ADD      r2,r3,#4
+        0x0000a15c:    e3a03202    .2..    MOV      r3,#0x20000000
+        0x0000a160:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a164:    e59f2030    0 ..    LDR      r2,[pc,#48]   ; [([Section 17] + 17016) = 0xa19c]  = 0x4278
+        0x0000a168:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a16c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a170:    e3500000    ..P.    CMP      r0,#0
+        0x0000a174:    e59f2020      ..    LDR      r2,[pc,#32]   ; [([Section 17] + 17016) = 0xa19c]  = 0x4278
+        0x0000a178:    e3a00000    ....    MOV      r0,#0
+        0x0000a17c:    e2831008    ....    ADD      r1,r3,#8
+        0x0000a180:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [0xa1a0] = 0x40031ac7
+        0x0000a184:    e5813000    .0..    STR      r3,[r1,#0]
+        0x0000a188:    05923000    .0..    LDREQ    r3,[r2,#0]
+        0x0000a18c:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0000a190:    e2833024    $0..    ADD      r3,r3,#0x24
+        0x0000a194:    e5830000    ....    STR      r0,[r3,#0]
+        0x0000a198:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a19c:    00004278    xB..    DCD    17016 ; [Section 17]
+        0x0000a1a0:    40031ac7    ...@    DCD    1073945287
+    TVE_query_int
+    $a
+        0x0000a1a4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a1a8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a1ac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a1b0:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17016) = 0xa1d0]  = 0x4278
+        0x0000a1b4:    e3500000    ..P.    CMP      r0,#0
+        0x0000a1b8:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a1bc:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a1c0:    e2830034    4...    ADD      r0,r3,#0x34
+        0x0000a1c4:    e5900000    ....    LDR      r0,[r0,#0]
+        0x0000a1c8:    e200000f    ....    AND      r0,r0,#0xf
+        0x0000a1cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a1d0:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_clear_int
+    $a
+        0x0000a1d4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a1d8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a1dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a1e0:    e59f3034    40..    LDR      r3,[pc,#52]   ; [([Section 17] + 17016) = 0xa21c]  = 0x4278
+        0x0000a1e4:    e3500000    ..P.    CMP      r0,#0
+        0x0000a1e8:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a1ec:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a1f0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a1f4:    e3a00000    ....    MOV      r0,#0
+        0x0000a1f8:    e2833034    40..    ADD      r3,r3,#0x34
+        0x0000a1fc:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000a200:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 17016) = 0xa21c]  = 0x4278
+        0x0000a204:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a208:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a20c:    e2832034    4 ..    ADD      r2,r3,#0x34
+        0x0000a210:    e201300f    .0..    AND      r3,r1,#0xf
+        0x0000a214:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a218:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a21c:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_get_dac_status
+    $a
+        0x0000a220:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a224:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a228:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a22c:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [([Section 17] + 17016) = 0xa274]  = 0x4278
+        0x0000a230:    e3500000    ..P.    CMP      r0,#0
+        0x0000a234:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a238:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a23c:    e3510000    ..Q.    CMP      r1,#0
+        0x0000a240:    e2830038    8...    ADD      r0,r3,#0x38
+        0x0000a244:    e5900000    ....    LDR      r0,[r0,#0]
+        0x0000a248:    02000003    ....    ANDEQ    r0,r0,#3
+        0x0000a24c:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x0000a250:    e3510001    ..Q.    CMP      r1,#1
+        0x0000a254:    07e10450    P...    UBFXEQ   r0,r0,#8,#2
+        0x0000a258:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x0000a25c:    e3510002    ..Q.    CMP      r1,#2
+        0x0000a260:    07e10850    P...    UBFXEQ   r0,r0,#16,#2
+        0x0000a264:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x0000a268:    e3510003    ..Q.    CMP      r1,#3
+        0x0000a26c:    07e10c50    P...    UBFXEQ   r0,r0,#24,#2
+        0x0000a270:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a274:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_int_enable
+    $a
+        0x0000a278:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a27c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a280:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a284:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [([Section 17] + 17016) = 0xa2cc]  = 0x4278
+        0x0000a288:    e3500000    ..P.    CMP      r0,#0
+        0x0000a28c:    e1a02001    . ..    MOV      r2,r1
+        0x0000a290:    e2822010    . ..    ADD      r2,r2,#0x10
+        0x0000a294:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a298:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a29c:    e3500000    ..P.    CMP      r0,#0
+        0x0000a2a0:    e2833030    00..    ADD      r3,r3,#0x30
+        0x0000a2a4:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000a2a8:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [([Section 17] + 17016) = 0xa2cc]  = 0x4278
+        0x0000a2ac:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a2b0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a2b4:    e2830030    0...    ADD      r0,r3,#0x30
+        0x0000a2b8:    e3a03001    .0..    MOV      r3,#1
+        0x0000a2bc:    e1813213    .2..    ORR      r3,r1,r3,LSL r2
+        0x0000a2c0:    e5803000    .0..    STR      r3,[r0,#0]
+        0x0000a2c4:    e3a00000    ....    MOV      r0,#0
+        0x0000a2c8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a2cc:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_int_disable
+    $a
+        0x0000a2d0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a2d4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a2d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a2dc:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [([Section 17] + 17016) = 0xa324]  = 0x4278
+        0x0000a2e0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a2e4:    e1a02001    . ..    MOV      r2,r1
+        0x0000a2e8:    e2822010    . ..    ADD      r2,r2,#0x10
+        0x0000a2ec:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a2f0:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a2f4:    e3500000    ..P.    CMP      r0,#0
+        0x0000a2f8:    e3a00000    ....    MOV      r0,#0
+        0x0000a2fc:    e2833030    00..    ADD      r3,r3,#0x30
+        0x0000a300:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000a304:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17016) = 0xa324]  = 0x4278
+        0x0000a308:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a30c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a310:    e283c030    0...    ADD      r12,r3,#0x30
+        0x0000a314:    e3a03001    .0..    MOV      r3,#1
+        0x0000a318:    e1c13213    .2..    BIC      r3,r1,r3,LSL r2
+        0x0000a31c:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x0000a320:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a324:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_autocheck_enable
+    $a
+        0x0000a328:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a32c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a330:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a334:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17016) = 0xa378]  = 0x4278
+        0x0000a338:    e3500000    ..P.    CMP      r0,#0
+        0x0000a33c:    e1a0c001    ....    MOV      r12,r1
+        0x0000a340:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a344:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a348:    e3500000    ..P.    CMP      r0,#0
+        0x0000a34c:    e3a00000    ....    MOV      r0,#0
+        0x0000a350:    e2833030    00..    ADD      r3,r3,#0x30
+        0x0000a354:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000a358:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17016) = 0xa378]  = 0x4278
+        0x0000a35c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a360:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a364:    e2832030    0 ..    ADD      r2,r3,#0x30
+        0x0000a368:    e3a03001    .0..    MOV      r3,#1
+        0x0000a36c:    e1813c13    .<..    ORR      r3,r1,r3,LSL r12
+        0x0000a370:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a374:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a378:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_autocheck_disable
+    $a
+        0x0000a37c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a380:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a384:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a388:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17016) = 0xa3cc]  = 0x4278
+        0x0000a38c:    e3500000    ..P.    CMP      r0,#0
+        0x0000a390:    e1a0c001    ....    MOV      r12,r1
+        0x0000a394:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a398:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a39c:    e3500000    ..P.    CMP      r0,#0
+        0x0000a3a0:    e3a00000    ....    MOV      r0,#0
+        0x0000a3a4:    e2833030    00..    ADD      r3,r3,#0x30
+        0x0000a3a8:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000a3ac:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17016) = 0xa3cc]  = 0x4278
+        0x0000a3b0:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a3b4:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a3b8:    e2832030    0 ..    ADD      r2,r3,#0x30
+        0x0000a3bc:    e3a03001    .0..    MOV      r3,#1
+        0x0000a3c0:    e1c13c13    .<..    BIC      r3,r1,r3,LSL r12
+        0x0000a3c4:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a3c8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a3cc:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_exit
+    $a
+        0x0000a3d0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a3d4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000a3d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a3dc:    e3a01000    ....    MOV      r1,#0
+        0x0000a3e0:    e1a04000    .@..    MOV      r4,r0
+        0x0000a3e4:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a3e8:    e1a00004    ....    MOV      r0,r4
+        0x0000a3ec:    e3a01001    ....    MOV      r1,#1
+        0x0000a3f0:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a3f4:    e1a00004    ....    MOV      r0,r4
+        0x0000a3f8:    e3a01002    ....    MOV      r1,#2
+        0x0000a3fc:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a400:    e1a00004    ....    MOV      r0,r4
+        0x0000a404:    e3a01003    ....    MOV      r1,#3
+        0x0000a408:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a40c:    e1a00004    ....    MOV      r0,r4
+        0x0000a410:    e3a01000    ....    MOV      r1,#0
+        0x0000a414:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x0000a418:    e1a00004    ....    MOV      r0,r4
+        0x0000a41c:    e3a01001    ....    MOV      r1,#1
+        0x0000a420:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x0000a424:    e1a00004    ....    MOV      r0,r4
+        0x0000a428:    e3a01002    ....    MOV      r1,#2
+        0x0000a42c:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x0000a430:    e1a00004    ....    MOV      r0,r4
+        0x0000a434:    e3a01003    ....    MOV      r1,#3
+        0x0000a438:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x0000a43c:    e3a00000    ....    MOV      r0,#0
+        0x0000a440:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    TVE_dac_enable
+        0x0000a444:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a448:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000a44c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a450:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [([Section 17] + 17016) = 0xa49c]  = 0x4278
+        0x0000a454:    e3500000    ..P.    CMP      r0,#0
+        0x0000a458:    e1a04001    .@..    MOV      r4,r1
+        0x0000a45c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a460:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a464:    e3500000    ..P.    CMP      r0,#0
+        0x0000a468:    e3a00000    ....    MOV      r0,#0
+        0x0000a46c:    e2833008    .0..    ADD      r3,r3,#8
+        0x0000a470:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000a474:    e59f3020     0..    LDR      r3,[pc,#32]   ; [([Section 17] + 17016) = 0xa49c]  = 0x4278
+        0x0000a478:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a47c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a480:    e283c008    ....    ADD      r12,r3,#8
+        0x0000a484:    e3a03001    .0..    MOV      r3,#1
+        0x0000a488:    e1813413    .4..    ORR      r3,r1,r3,LSL r4
+        0x0000a48c:    e59c2000    . ..    LDR      r2,[r12,#0]
+        0x0000a490:    e1833002    .0..    ORR      r3,r3,r2
+        0x0000a494:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x0000a498:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000a49c:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_disable
+    $a
+        0x0000a4a0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a4a4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a4a8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a4ac:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [([Section 17] + 17016) = 0xa4f0]  = 0x4278
+        0x0000a4b0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a4b4:    e1a0c001    ....    MOV      r12,r1
+        0x0000a4b8:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a4bc:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a4c0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a4c4:    e3a00000    ....    MOV      r0,#0
+        0x0000a4c8:    e2833008    .0..    ADD      r3,r3,#8
+        0x0000a4cc:    e5931000    ....    LDR      r1,[r3,#0]
+        0x0000a4d0:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17016) = 0xa4f0]  = 0x4278
+        0x0000a4d4:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a4d8:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a4dc:    e2832008    . ..    ADD      r2,r3,#8
+        0x0000a4e0:    e3a03001    .0..    MOV      r3,#1
+        0x0000a4e4:    e1c13c13    .<..    BIC      r3,r1,r3,LSL r12
+        0x0000a4e8:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a4ec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a4f0:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_set_source
+    $a
+        0x0000a4f4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a4f8:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000a4fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a500:    e59f308c    .0..    LDR      r3,[pc,#140]  ; [([Section 17] + 17016) = 0xa594]  = 0x4278
+        0x0000a504:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x0000a508:    e1a00002    ....    MOV      r0,r2
+        0x0000a50c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a510:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a514:    e3510000    ..Q.    CMP      r1,#0
+        0x0000a518:    e2832008    . ..    ADD      r2,r3,#8
+        0x0000a51c:    e592c000    ....    LDR      r12,[r2,#0]
+        0x0000a520:    02002007    . ..    ANDEQ    r2,r0,#7
+        0x0000a524:    03cc3070    p0..    BICEQ    r3,r12,#0x70
+        0x0000a528:    01832202    ."..    ORREQ    r2,r3,r2,LSL #4
+        0x0000a52c:    0a000010    ....    BEQ      {pc} + 0x48  ; 0xa574
+        0x0000a530:    e3510001    ..Q.    CMP      r1,#1
+        0x0000a534:    02002007    . ..    ANDEQ    r2,r0,#7
+        0x0000a538:    03cc3d0e    .=..    BICEQ    r3,r12,#0x380
+        0x0000a53c:    01832382    .#..    ORREQ    r2,r3,r2,LSL #7
+        0x0000a540:    0a00000b    ....    BEQ      {pc} + 0x34  ; 0xa574
+        0x0000a544:    e3510002    ..Q.    CMP      r1,#2
+        0x0000a548:    02002007    . ..    ANDEQ    r2,r0,#7
+        0x0000a54c:    03cc3b07    .;..    BICEQ    r3,r12,#0x1c00
+        0x0000a550:    01832502    .%..    ORREQ    r2,r3,r2,LSL #10
+        0x0000a554:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xa574
+        0x0000a558:    e3510003    ..Q.    CMP      r1,#3
+        0x0000a55c:    1a00000a    ....    BNE      {pc} + 0x30  ; 0xa58c
+        0x0000a560:    e1a03680    .6..    LSL      r3,r0,#13
+        0x0000a564:    e3cc2a0e    .*..    BIC      r2,r12,#0xe000
+        0x0000a568:    e1a03803    .8..    LSL      r3,r3,#16
+        0x0000a56c:    e1a03823    #8..    LSR      r3,r3,#16
+        0x0000a570:    e1822003    . ..    ORR      r2,r2,r3
+        0x0000a574:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17016) = 0xa594]  = 0x4278
+        0x0000a578:    e3540000    ..T.    CMP      r4,#0
+        0x0000a57c:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a580:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a584:    e2833008    .0..    ADD      r3,r3,#8
+        0x0000a588:    e5832000    . ..    STR      r2,[r3,#0]
+        0x0000a58c:    e3a00000    ....    MOV      r0,#0
+        0x0000a590:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000a594:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_set_de_bounce
+    $a
+        0x0000a598:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a59c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a5a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a5a4:    e59f3084    .0..    LDR      r3,[pc,#132]  ; [([Section 17] + 17016) = 0xa630]  = 0x4278
+        0x0000a5a8:    e3500000    ..P.    CMP      r0,#0
+        0x0000a5ac:    e1a0c002    ....    MOV      r12,r2
+        0x0000a5b0:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a5b4:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a5b8:    e3510000    ..Q.    CMP      r1,#0
+        0x0000a5bc:    e283203c    < ..    ADD      r2,r3,#0x3c
+        0x0000a5c0:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a5c4:    03c3200f    . ..    BICEQ    r2,r3,#0xf
+        0x0000a5c8:    020c300f    .0..    ANDEQ    r3,r12,#0xf
+        0x0000a5cc:    01822003    . ..    ORREQ    r2,r2,r3
+        0x0000a5d0:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0xa610
+        0x0000a5d4:    e3510001    ..Q.    CMP      r1,#1
+        0x0000a5d8:    020c200f    . ..    ANDEQ    r2,r12,#0xf
+        0x0000a5dc:    03c33c0f    .<..    BICEQ    r3,r3,#0xf00
+        0x0000a5e0:    01832402    .$..    ORREQ    r2,r3,r2,LSL #8
+        0x0000a5e4:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xa610
+        0x0000a5e8:    e3510002    ..Q.    CMP      r1,#2
+        0x0000a5ec:    020c200f    . ..    ANDEQ    r2,r12,#0xf
+        0x0000a5f0:    03c3380f    .8..    BICEQ    r3,r3,#0xf0000
+        0x0000a5f4:    01832802    .(..    ORREQ    r2,r3,r2,LSL #16
+        0x0000a5f8:    0a000004    ....    BEQ      {pc} + 0x18  ; 0xa610
+        0x0000a5fc:    e3510003    ..Q.    CMP      r1,#3
+        0x0000a600:    1a000008    ....    BNE      {pc} + 0x28  ; 0xa628
+        0x0000a604:    e20c200f    . ..    AND      r2,r12,#0xf
+        0x0000a608:    e3c3380f    .8..    BIC      r3,r3,#0xf0000
+        0x0000a60c:    e1832a02    .*..    ORR      r2,r3,r2,LSL #20
+        0x0000a610:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [([Section 17] + 17016) = 0xa630]  = 0x4278
+        0x0000a614:    e3500000    ..P.    CMP      r0,#0
+        0x0000a618:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a61c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a620:    e283303c    <0..    ADD      r3,r3,#0x3c
+        0x0000a624:    e5832000    . ..    STR      r2,[r3,#0]
+        0x0000a628:    e3a00000    ....    MOV      r0,#0
+        0x0000a62c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a630:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac_get_de_bounce
+    $a
+        0x0000a634:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a638:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a63c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a640:    e59f3048    H0..    LDR      r3,[pc,#72]   ; [([Section 17] + 17016) = 0xa690]  = 0x4278
+        0x0000a644:    e3500000    ..P.    CMP      r0,#0
+        0x0000a648:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a64c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a650:    e3510000    ..Q.    CMP      r1,#0
+        0x0000a654:    e283303c    <0..    ADD      r3,r3,#0x3c
+        0x0000a658:    e5930000    ....    LDR      r0,[r3,#0]
+        0x0000a65c:    0200000f    ....    ANDEQ    r0,r0,#0xf
+        0x0000a660:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x0000a664:    e3510001    ..Q.    CMP      r1,#1
+        0x0000a668:    07e30450    P...    UBFXEQ   r0,r0,#8,#4
+        0x0000a66c:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x0000a670:    e3510002    ..Q.    CMP      r1,#2
+        0x0000a674:    07e30850    P...    UBFXEQ   r0,r0,#16,#4
+        0x0000a678:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x0000a67c:    e3510003    ..Q.    CMP      r1,#3
+        0x0000a680:    0200340f    .4..    ANDEQ    r3,r0,#0xf000000
+        0x0000a684:    13a00000    ....    MOVNE    r0,#0
+        0x0000a688:    01a00a23    #...    LSREQ    r0,r3,#20
+        0x0000a68c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a690:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac0_sel
+    $a
+        0x0000a694:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a698:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a69c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a6a0:    e59f3038    80..    LDR      r3,[pc,#56]   ; [([Section 17] + 17016) = 0xa6e0]  = 0x4278
+        0x0000a6a4:    e3500000    ..P.    CMP      r0,#0
+        0x0000a6a8:    05932000    . ..    LDREQ    r2,[r3,#0]
+        0x0000a6ac:    15932004    . ..    LDRNE    r2,[r3,#4]
+        0x0000a6b0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a6b4:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [([Section 17] + 17016) = 0xa6e0]  = 0x4278
+        0x0000a6b8:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x0000a6bc:    0593c000    ....    LDREQ    r12,[r3,#0]
+        0x0000a6c0:    1593c004    ....    LDRNE    r12,[r3,#4]
+        0x0000a6c4:    e0813100    .1..    ADD      r3,r1,r0,LSL #2
+        0x0000a6c8:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000a6cc:    e20220f0    . ..    AND      r2,r2,#0xf0
+        0x0000a6d0:    e3a00000    ....    MOV      r0,#0
+        0x0000a6d4:    e1822203    ."..    ORR      r2,r2,r3,LSL #4
+        0x0000a6d8:    e58c2000    . ..    STR      r2,[r12,#0]
+        0x0000a6dc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a6e0:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac1_sel
+    $a
+        0x0000a6e4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a6e8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a6ec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a6f0:    e59f3038    80..    LDR      r3,[pc,#56]   ; [([Section 17] + 17016) = 0xa730]  = 0x4278
+        0x0000a6f4:    e3500000    ..P.    CMP      r0,#0
+        0x0000a6f8:    05932000    . ..    LDREQ    r2,[r3,#0]
+        0x0000a6fc:    15932004    . ..    LDRNE    r2,[r3,#4]
+        0x0000a700:    e3500000    ..P.    CMP      r0,#0
+        0x0000a704:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [([Section 17] + 17016) = 0xa730]  = 0x4278
+        0x0000a708:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x0000a70c:    0593c000    ....    LDREQ    r12,[r3,#0]
+        0x0000a710:    1593c004    ....    LDRNE    r12,[r3,#4]
+        0x0000a714:    e0813100    .1..    ADD      r3,r1,r0,LSL #2
+        0x0000a718:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000a71c:    e2022c0f    .,..    AND      r2,r2,#0xf00
+        0x0000a720:    e3a00000    ....    MOV      r0,#0
+        0x0000a724:    e1822403    .$..    ORR      r2,r2,r3,LSL #8
+        0x0000a728:    e58c2000    . ..    STR      r2,[r12,#0]
+        0x0000a72c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a730:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac2_sel
+    $a
+        0x0000a734:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a738:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a73c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a740:    e59f3038    80..    LDR      r3,[pc,#56]   ; [([Section 17] + 17016) = 0xa780]  = 0x4278
+        0x0000a744:    e3500000    ..P.    CMP      r0,#0
+        0x0000a748:    05932000    . ..    LDREQ    r2,[r3,#0]
+        0x0000a74c:    15932004    . ..    LDRNE    r2,[r3,#4]
+        0x0000a750:    e3500000    ..P.    CMP      r0,#0
+        0x0000a754:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [([Section 17] + 17016) = 0xa780]  = 0x4278
+        0x0000a758:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x0000a75c:    0593c000    ....    LDREQ    r12,[r3,#0]
+        0x0000a760:    1593c004    ....    LDRNE    r12,[r3,#4]
+        0x0000a764:    e0813100    .1..    ADD      r3,r1,r0,LSL #2
+        0x0000a768:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000a76c:    e2022a0f    .*..    AND      r2,r2,#0xf000
+        0x0000a770:    e3a00000    ....    MOV      r0,#0
+        0x0000a774:    e1822603    .&..    ORR      r2,r2,r3,LSL #12
+        0x0000a778:    e58c2000    . ..    STR      r2,[r12,#0]
+        0x0000a77c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a780:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_dac3_sel
+    $a
+        0x0000a784:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a788:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a78c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a790:    e59f3038    80..    LDR      r3,[pc,#56]   ; [([Section 17] + 17016) = 0xa7d0]  = 0x4278
+        0x0000a794:    e3500000    ..P.    CMP      r0,#0
+        0x0000a798:    05932000    . ..    LDREQ    r2,[r3,#0]
+        0x0000a79c:    15932004    . ..    LDRNE    r2,[r3,#4]
+        0x0000a7a0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a7a4:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [([Section 17] + 17016) = 0xa7d0]  = 0x4278
+        0x0000a7a8:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x0000a7ac:    0593c000    ....    LDREQ    r12,[r3,#0]
+        0x0000a7b0:    1593c004    ....    LDRNE    r12,[r3,#4]
+        0x0000a7b4:    e0813100    .1..    ADD      r3,r1,r0,LSL #2
+        0x0000a7b8:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000a7bc:    e202280f    .(..    AND      r2,r2,#0xf0000
+        0x0000a7c0:    e3a00000    ....    MOV      r0,#0
+        0x0000a7c4:    e1822803    .(..    ORR      r2,r2,r3,LSL #16
+        0x0000a7c8:    e58c2000    . ..    STR      r2,[r12,#0]
+        0x0000a7cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a7d0:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_csc_init
+    $a
+        0x0000a7d4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a7d8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a7dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a7e0:    e3500000    ..P.    CMP      r0,#0
+        0x0000a7e4:    1a00000c    ....    BNE      {pc} + 0x38  ; 0xa81c
+        0x0000a7e8:    e59f2034    4 ..    LDR      r2,[pc,#52]   ; [([Section 17] + 17016) = 0xa824]  = 0x4278
+        0x0000a7ec:    e59f3034    40..    LDR      r3,[pc,#52]   ; [0xa828] = 0x8440832
+        0x0000a7f0:    e5921000    ....    LDR      r1,[r2,#0]
+        0x0000a7f4:    e5813040    @0..    STR      r3,[r1,#0x40]
+        0x0000a7f8:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [0xa82c] = 0x3b6dace1
+        0x0000a7fc:    e5921000    ....    LDR      r1,[r2,#0]
+        0x0000a800:    e5813044    D0..    STR      r3,[r1,#0x44]
+        0x0000a804:    e59f3024    $0..    LDR      r3,[pc,#36]   ; [0xa830] = 0xe1d13dc
+        0x0000a808:    e5921000    ....    LDR      r1,[r2,#0]
+        0x0000a80c:    e5813048    H0..    STR      r3,[r1,#0x48]
+        0x0000a810:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [0xa834] = 0x108080
+        0x0000a814:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x0000a818:    e582304c    L0..    STR      r3,[r2,#0x4c]
+        0x0000a81c:    e3a00000    ....    MOV      r0,#0
+        0x0000a820:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a824:    00004278    xB..    DCD    17016 ; [Section 17]
+        0x0000a828:    08440832    2.D.    DCD    138676274
+        0x0000a82c:    3b6dace1    ..m;    DCD    997043425
+        0x0000a830:    0e1d13dc    ....    DCD    236786652
+        0x0000a834:    00108080    ....    DCD    1081472
+    TVE_init
+    $a
+        0x0000a838:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a83c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000a840:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a844:    e1a04000    .@..    MOV      r4,r0
+        0x0000a848:    ebfffffe    ....    BL       TVE_close  ; 0x8f0c Section #1
+        0x0000a84c:    e3a01000    ....    MOV      r1,#0
+        0x0000a850:    e1a00004    ....    MOV      r0,r4
+        0x0000a854:    e1a02001    . ..    MOV      r2,r1
+        0x0000a858:    ebfffffe    ....    BL       TVE_dac_set_de_bounce  ; 0xa598 Section #1
+        0x0000a85c:    e1a00004    ....    MOV      r0,r4
+        0x0000a860:    e3a01001    ....    MOV      r1,#1
+        0x0000a864:    e3a02000    . ..    MOV      r2,#0
+        0x0000a868:    ebfffffe    ....    BL       TVE_dac_set_de_bounce  ; 0xa598 Section #1
+        0x0000a86c:    e1a00004    ....    MOV      r0,r4
+        0x0000a870:    e3a01002    ....    MOV      r1,#2
+        0x0000a874:    e3a02000    . ..    MOV      r2,#0
+        0x0000a878:    ebfffffe    ....    BL       TVE_dac_set_de_bounce  ; 0xa598 Section #1
+        0x0000a87c:    e3a02000    . ..    MOV      r2,#0
+        0x0000a880:    e1a00004    ....    MOV      r0,r4
+        0x0000a884:    e3a01003    ....    MOV      r1,#3
+        0x0000a888:    ebfffffe    ....    BL       TVE_dac_set_de_bounce  ; 0xa598 Section #1
+        0x0000a88c:    e1a00004    ....    MOV      r0,r4
+        0x0000a890:    e3a01000    ....    MOV      r1,#0
+        0x0000a894:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a898:    e1a00004    ....    MOV      r0,r4
+        0x0000a89c:    e3a01001    ....    MOV      r1,#1
+        0x0000a8a0:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a8a4:    e1a00004    ....    MOV      r0,r4
+        0x0000a8a8:    e3a01002    ....    MOV      r1,#2
+        0x0000a8ac:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a8b0:    e1a00004    ....    MOV      r0,r4
+        0x0000a8b4:    e3a01003    ....    MOV      r1,#3
+        0x0000a8b8:    ebfffffe    ....    BL       TVE_dac_int_disable  ; 0xa2d0 Section #1
+        0x0000a8bc:    e1a00004    ....    MOV      r0,r4
+        0x0000a8c0:    e3a01000    ....    MOV      r1,#0
+        0x0000a8c4:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x0000a8c8:    e1a00004    ....    MOV      r0,r4
+        0x0000a8cc:    e3a01001    ....    MOV      r1,#1
+        0x0000a8d0:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x0000a8d4:    e1a00004    ....    MOV      r0,r4
+        0x0000a8d8:    e3a01002    ....    MOV      r1,#2
+        0x0000a8dc:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x0000a8e0:    e1a00004    ....    MOV      r0,r4
+        0x0000a8e4:    e3a01003    ....    MOV      r1,#3
+        0x0000a8e8:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x0000a8ec:    e1a00004    ....    MOV      r0,r4
+        0x0000a8f0:    e3a01000    ....    MOV      r1,#0
+        0x0000a8f4:    ebfffffe    ....    BL       TVE_csc_init  ; 0xa7d4 Section #1
+        0x0000a8f8:    e3a00000    ....    MOV      r0,#0
+        0x0000a8fc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    TVE_csc_enable
+        0x0000a900:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a904:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a908:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a90c:    e59f3020     0..    LDR      r3,[pc,#32]   ; [([Section 17] + 17016) = 0xa934]  = 0x4278
+        0x0000a910:    e3500000    ..P.    CMP      r0,#0
+        0x0000a914:    e3a00000    ....    MOV      r0,#0
+        0x0000a918:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a91c:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a920:    e2832040    @ ..    ADD      r2,r3,#0x40
+        0x0000a924:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a928:    e3833102    .1..    ORR      r3,r3,#0x80000000
+        0x0000a92c:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a930:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a934:    00004278    xB..    DCD    17016 ; [Section 17]
+    TVE_csc_disable
+    $a
+        0x0000a938:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a93c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a940:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a944:    e59f3020     0..    LDR      r3,[pc,#32]   ; [([Section 17] + 17016) = 0xa96c]  = 0x4278
+        0x0000a948:    e3500000    ..P.    CMP      r0,#0
+        0x0000a94c:    e3a00000    ....    MOV      r0,#0
+        0x0000a950:    05933000    .0..    LDREQ    r3,[r3,#0]
+        0x0000a954:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0000a958:    e2832040    @ ..    ADD      r2,r3,#0x40
+        0x0000a95c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a960:    e3c33102    .1..    BIC      r3,r3,#0x80000000
+        0x0000a964:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0000a968:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000a96c:    00004278    xB..    DCD    17016 ; [Section 17]
+    BSP_disp_clk_off
+    $a
+        0x0000a970:    e1a0c00d    ....    MOV      r12,r13
+        0x0000a974:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000a978:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000a97c:    e59f21f8    .!..    LDR      r2,[pc,#504]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000a980:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a984:    e3130c01    ....    TST      r3,#0x100
+        0x0000a988:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xa998
+        0x0000a98c:    e5920004    ....    LDR      r0,[r2,#4]
+        0x0000a990:    e3a01000    ....    MOV      r1,#0
+        0x0000a994:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000a998:    e59f21dc    .!..    LDR      r2,[pc,#476]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000a99c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a9a0:    e3130a01    ....    TST      r3,#0x1000
+        0x0000a9a4:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xa9b4
+        0x0000a9a8:    e5920008    ....    LDR      r0,[r2,#8]
+        0x0000a9ac:    e3a01000    ....    MOV      r1,#0
+        0x0000a9b0:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000a9b4:    e59f21c0    .!..    LDR      r2,[pc,#448]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000a9b8:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a9bc:    e3130001    ....    TST      r3,#1
+        0x0000a9c0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xa9d0
+        0x0000a9c4:    e592000c    ....    LDR      r0,[r2,#0xc]
+        0x0000a9c8:    e3a01000    ....    MOV      r1,#0
+        0x0000a9cc:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000a9d0:    e59f21a4    .!..    LDR      r2,[pc,#420]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000a9d4:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a9d8:    e3130010    ....    TST      r3,#0x10
+        0x0000a9dc:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xa9ec
+        0x0000a9e0:    e5920010    ....    LDR      r0,[r2,#0x10]
+        0x0000a9e4:    e3a01000    ....    MOV      r1,#0
+        0x0000a9e8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000a9ec:    e59f2188    .!..    LDR      r2,[pc,#392]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000a9f0:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000a9f4:    e3130b01    ....    TST      r3,#0x400
+        0x0000a9f8:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaa08
+        0x0000a9fc:    e5920014    ....    LDR      r0,[r2,#0x14]
+        0x0000aa00:    e3a01000    ....    MOV      r1,#0
+        0x0000aa04:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aa08:    e59f216c    l!..    LDR      r2,[pc,#364]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aa0c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aa10:    e3130901    ....    TST      r3,#0x4000
+        0x0000aa14:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaa24
+        0x0000aa18:    e5920018    ....    LDR      r0,[r2,#0x18]
+        0x0000aa1c:    e3a01000    ....    MOV      r1,#0
+        0x0000aa20:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aa24:    e59f2150    P!..    LDR      r2,[pc,#336]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aa28:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aa2c:    e3130004    ....    TST      r3,#4
+        0x0000aa30:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaa40
+        0x0000aa34:    e592001c    ....    LDR      r0,[r2,#0x1c]
+        0x0000aa38:    e3a01000    ....    MOV      r1,#0
+        0x0000aa3c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aa40:    e59f2134    4!..    LDR      r2,[pc,#308]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aa44:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aa48:    e3130040    @...    TST      r3,#0x40
+        0x0000aa4c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaa5c
+        0x0000aa50:    e5920020     ...    LDR      r0,[r2,#0x20]
+        0x0000aa54:    e3a01000    ....    MOV      r1,#0
+        0x0000aa58:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aa5c:    e59f2118    .!..    LDR      r2,[pc,#280]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aa60:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aa64:    e3130c02    ....    TST      r3,#0x200
+        0x0000aa68:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaa78
+        0x0000aa6c:    e5920024    $...    LDR      r0,[r2,#0x24]
+        0x0000aa70:    e3a01000    ....    MOV      r1,#0
+        0x0000aa74:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aa78:    e59f20fc    . ..    LDR      r2,[pc,#252]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aa7c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aa80:    e3130a02    ....    TST      r3,#0x2000
+        0x0000aa84:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaa94
+        0x0000aa88:    e5920028    (...    LDR      r0,[r2,#0x28]
+        0x0000aa8c:    e3a01000    ....    MOV      r1,#0
+        0x0000aa90:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aa94:    e59f20e0    . ..    LDR      r2,[pc,#224]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aa98:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aa9c:    e3130002    ....    TST      r3,#2
+        0x0000aaa0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaab0
+        0x0000aaa4:    e592002c    ,...    LDR      r0,[r2,#0x2c]
+        0x0000aaa8:    e3a01000    ....    MOV      r1,#0
+        0x0000aaac:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aab0:    e59f20c4    . ..    LDR      r2,[pc,#196]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aab4:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aab8:    e3130020     ...    TST      r3,#0x20
+        0x0000aabc:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaacc
+        0x0000aac0:    e5920030    0...    LDR      r0,[r2,#0x30]
+        0x0000aac4:    e3a01000    ....    MOV      r1,#0
+        0x0000aac8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aacc:    e59f20a8    . ..    LDR      r2,[pc,#168]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aad0:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aad4:    e3130802    ....    TST      r3,#0x20000
+        0x0000aad8:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaae8
+        0x0000aadc:    e5920034    4...    LDR      r0,[r2,#0x34]
+        0x0000aae0:    e3a01000    ....    MOV      r1,#0
+        0x0000aae4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aae8:    e59f208c    . ..    LDR      r2,[pc,#140]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000aaec:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000aaf0:    e3130701    ....    TST      r3,#0x40000
+        0x0000aaf4:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xab04
+        0x0000aaf8:    e5920038    8...    LDR      r0,[r2,#0x38]
+        0x0000aafc:    e3a01000    ....    MOV      r1,#0
+        0x0000ab00:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ab04:    e59f2070    p ..    LDR      r2,[pc,#112]  ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000ab08:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ab0c:    e3130602    ....    TST      r3,#0x200000
+        0x0000ab10:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xab20
+        0x0000ab14:    e592003c    <...    LDR      r0,[r2,#0x3c]
+        0x0000ab18:    e3a01000    ....    MOV      r1,#0
+        0x0000ab1c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ab20:    e59f2054    T ..    LDR      r2,[pc,#84]   ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000ab24:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ab28:    e3130501    ....    TST      r3,#0x400000
+        0x0000ab2c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xab3c
+        0x0000ab30:    e5920040    @...    LDR      r0,[r2,#0x40]
+        0x0000ab34:    e3a01000    ....    MOV      r1,#0
+        0x0000ab38:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ab3c:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000ab40:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ab44:    e3130402    ....    TST      r3,#0x2000000
+        0x0000ab48:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xab58
+        0x0000ab4c:    e5920044    D...    LDR      r0,[r2,#0x44]
+        0x0000ab50:    e3a01000    ....    MOV      r1,#0
+        0x0000ab54:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ab58:    e59f201c    . ..    LDR      r2,[pc,#28]   ; [([Section 17] + 17024) = 0xab7c]  = 0x4280
+        0x0000ab5c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ab60:    e3130301    ....    TST      r3,#0x4000000
+        0x0000ab64:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xab74
+        0x0000ab68:    e5920048    H...    LDR      r0,[r2,#0x48]
+        0x0000ab6c:    e3a01000    ....    MOV      r1,#0
+        0x0000ab70:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ab74:    e3a00000    ....    MOV      r0,#0
+        0x0000ab78:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000ab7c:    00004280    .B..    DCD    17024 ; [Section 17]
+    BSP_disp_clk_on
+    $a
+        0x0000ab80:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ab84:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000ab88:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ab8c:    e59f21f8    .!..    LDR      r2,[pc,#504]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ab90:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ab94:    e3130c01    ....    TST      r3,#0x100
+        0x0000ab98:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaba8
+        0x0000ab9c:    e5920004    ....    LDR      r0,[r2,#4]
+        0x0000aba0:    e3a01001    ....    MOV      r1,#1
+        0x0000aba4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aba8:    e59f21dc    .!..    LDR      r2,[pc,#476]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000abac:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000abb0:    e3130a01    ....    TST      r3,#0x1000
+        0x0000abb4:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xabc4
+        0x0000abb8:    e5920008    ....    LDR      r0,[r2,#8]
+        0x0000abbc:    e3a01001    ....    MOV      r1,#1
+        0x0000abc0:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000abc4:    e59f21c0    .!..    LDR      r2,[pc,#448]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000abc8:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000abcc:    e3130001    ....    TST      r3,#1
+        0x0000abd0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xabe0
+        0x0000abd4:    e592000c    ....    LDR      r0,[r2,#0xc]
+        0x0000abd8:    e3a01001    ....    MOV      r1,#1
+        0x0000abdc:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000abe0:    e59f21a4    .!..    LDR      r2,[pc,#420]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000abe4:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000abe8:    e3130010    ....    TST      r3,#0x10
+        0x0000abec:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xabfc
+        0x0000abf0:    e5920010    ....    LDR      r0,[r2,#0x10]
+        0x0000abf4:    e3a01001    ....    MOV      r1,#1
+        0x0000abf8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000abfc:    e59f2188    .!..    LDR      r2,[pc,#392]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ac00:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ac04:    e3130b01    ....    TST      r3,#0x400
+        0x0000ac08:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xac18
+        0x0000ac0c:    e5920014    ....    LDR      r0,[r2,#0x14]
+        0x0000ac10:    e3a01001    ....    MOV      r1,#1
+        0x0000ac14:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ac18:    e59f216c    l!..    LDR      r2,[pc,#364]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ac1c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ac20:    e3130901    ....    TST      r3,#0x4000
+        0x0000ac24:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xac34
+        0x0000ac28:    e5920018    ....    LDR      r0,[r2,#0x18]
+        0x0000ac2c:    e3a01001    ....    MOV      r1,#1
+        0x0000ac30:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ac34:    e59f2150    P!..    LDR      r2,[pc,#336]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ac38:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ac3c:    e3130004    ....    TST      r3,#4
+        0x0000ac40:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xac50
+        0x0000ac44:    e592001c    ....    LDR      r0,[r2,#0x1c]
+        0x0000ac48:    e3a01001    ....    MOV      r1,#1
+        0x0000ac4c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ac50:    e59f2134    4!..    LDR      r2,[pc,#308]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ac54:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ac58:    e3130040    @...    TST      r3,#0x40
+        0x0000ac5c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xac6c
+        0x0000ac60:    e5920020     ...    LDR      r0,[r2,#0x20]
+        0x0000ac64:    e3a01001    ....    MOV      r1,#1
+        0x0000ac68:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ac6c:    e59f2118    .!..    LDR      r2,[pc,#280]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ac70:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ac74:    e3130c02    ....    TST      r3,#0x200
+        0x0000ac78:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xac88
+        0x0000ac7c:    e5920024    $...    LDR      r0,[r2,#0x24]
+        0x0000ac80:    e3a01001    ....    MOV      r1,#1
+        0x0000ac84:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ac88:    e59f20fc    . ..    LDR      r2,[pc,#252]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ac8c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ac90:    e3130a02    ....    TST      r3,#0x2000
+        0x0000ac94:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xaca4
+        0x0000ac98:    e5920028    (...    LDR      r0,[r2,#0x28]
+        0x0000ac9c:    e3a01001    ....    MOV      r1,#1
+        0x0000aca0:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aca4:    e59f20e0    . ..    LDR      r2,[pc,#224]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000aca8:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000acac:    e3130002    ....    TST      r3,#2
+        0x0000acb0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xacc0
+        0x0000acb4:    e592002c    ,...    LDR      r0,[r2,#0x2c]
+        0x0000acb8:    e3a01001    ....    MOV      r1,#1
+        0x0000acbc:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000acc0:    e59f20c4    . ..    LDR      r2,[pc,#196]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000acc4:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000acc8:    e3130020     ...    TST      r3,#0x20
+        0x0000accc:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xacdc
+        0x0000acd0:    e5920030    0...    LDR      r0,[r2,#0x30]
+        0x0000acd4:    e3a01001    ....    MOV      r1,#1
+        0x0000acd8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000acdc:    e59f20a8    . ..    LDR      r2,[pc,#168]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ace0:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ace4:    e3130802    ....    TST      r3,#0x20000
+        0x0000ace8:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xacf8
+        0x0000acec:    e5920034    4...    LDR      r0,[r2,#0x34]
+        0x0000acf0:    e3a01001    ....    MOV      r1,#1
+        0x0000acf4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000acf8:    e59f208c    . ..    LDR      r2,[pc,#140]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000acfc:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ad00:    e3130701    ....    TST      r3,#0x40000
+        0x0000ad04:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xad14
+        0x0000ad08:    e5920038    8...    LDR      r0,[r2,#0x38]
+        0x0000ad0c:    e3a01001    ....    MOV      r1,#1
+        0x0000ad10:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ad14:    e59f2070    p ..    LDR      r2,[pc,#112]  ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ad18:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ad1c:    e3130602    ....    TST      r3,#0x200000
+        0x0000ad20:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xad30
+        0x0000ad24:    e592003c    <...    LDR      r0,[r2,#0x3c]
+        0x0000ad28:    e3a01001    ....    MOV      r1,#1
+        0x0000ad2c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ad30:    e59f2054    T ..    LDR      r2,[pc,#84]   ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ad34:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ad38:    e3130501    ....    TST      r3,#0x400000
+        0x0000ad3c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xad4c
+        0x0000ad40:    e5920040    @...    LDR      r0,[r2,#0x40]
+        0x0000ad44:    e3a01001    ....    MOV      r1,#1
+        0x0000ad48:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ad4c:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ad50:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ad54:    e3130402    ....    TST      r3,#0x2000000
+        0x0000ad58:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xad68
+        0x0000ad5c:    e5920044    D...    LDR      r0,[r2,#0x44]
+        0x0000ad60:    e3a01001    ....    MOV      r1,#1
+        0x0000ad64:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ad68:    e59f201c    . ..    LDR      r2,[pc,#28]   ; [([Section 17] + 17024) = 0xad8c]  = 0x4280
+        0x0000ad6c:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000ad70:    e3130301    ....    TST      r3,#0x4000000
+        0x0000ad74:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xad84
+        0x0000ad78:    e5920048    H...    LDR      r0,[r2,#0x48]
+        0x0000ad7c:    e3a01001    ....    MOV      r1,#1
+        0x0000ad80:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ad84:    e3a00000    ....    MOV      r0,#0
+        0x0000ad88:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000ad8c:    00004280    .B..    DCD    17024 ; [Section 17]
+    tve_clk_off
+    $a
+        0x0000ad90:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ad94:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000ad98:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ad9c:    e59f4028    (@..    LDR      r4,[pc,#40]   ; [([Section 17] + 17024) = 0xadcc]  = 0x4280
+        0x0000ada0:    e3a01000    ....    MOV      r1,#0
+        0x0000ada4:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x0000ada8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000adac:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000adb0:    e3a01000    ....    MOV      r1,#0
+        0x0000adb4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000adb8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000adbc:    e3a00000    ....    MOV      r0,#0
+        0x0000adc0:    e3c33406    .4..    BIC      r3,r3,#0x6000000
+        0x0000adc4:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000adc8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000adcc:    00004280    .B..    DCD    17024 ; [Section 17]
+    tve_clk_on
+    $a
+        0x0000add0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000add4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000add8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000addc:    e59f4028    (@..    LDR      r4,[pc,#40]   ; [([Section 17] + 17024) = 0xae0c]  = 0x4280
+        0x0000ade0:    e3a01001    ....    MOV      r1,#1
+        0x0000ade4:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x0000ade8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000adec:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000adf0:    e3a01001    ....    MOV      r1,#1
+        0x0000adf4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000adf8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000adfc:    e3a00000    ....    MOV      r0,#0
+        0x0000ae00:    e3833406    .4..    ORR      r3,r3,#0x6000000
+        0x0000ae04:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000ae08:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000ae0c:    00004280    .B..    DCD    17024 ; [Section 17]
+    lcdc_clk_off
+    $a
+        0x0000ae10:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ae14:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000ae18:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ae1c:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000ae20:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xae4c
+        0x0000ae24:    e59f4058    X@..    LDR      r4,[pc,#88]   ; [([Section 17] + 17024) = 0xae84]  = 0x4280
+        0x0000ae28:    e1a01005    ....    MOV      r1,r5
+        0x0000ae2c:    e5940034    4...    LDR      r0,[r4,#0x34]
+        0x0000ae30:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ae34:    e1a01005    ....    MOV      r1,r5
+        0x0000ae38:    e5940038    8...    LDR      r0,[r4,#0x38]
+        0x0000ae3c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ae40:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000ae44:    e3c33806    .8..    BIC      r3,r3,#0x60000
+        0x0000ae48:    ea00000a    ....    B        {pc} + 0x30  ; 0xae78
+        0x0000ae4c:    e3550001    ..U.    CMP      r5,#1
+        0x0000ae50:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xae7c
+        0x0000ae54:    e59f4028    (@..    LDR      r4,[pc,#40]   ; [([Section 17] + 17024) = 0xae84]  = 0x4280
+        0x0000ae58:    e3a01000    ....    MOV      r1,#0
+        0x0000ae5c:    e594003c    <...    LDR      r0,[r4,#0x3c]
+        0x0000ae60:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ae64:    e5940040    @...    LDR      r0,[r4,#0x40]
+        0x0000ae68:    e3a01000    ....    MOV      r1,#0
+        0x0000ae6c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ae70:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000ae74:    e3c33606    .6..    BIC      r3,r3,#0x600000
+        0x0000ae78:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000ae7c:    e3a00000    ....    MOV      r0,#0
+        0x0000ae80:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000ae84:    00004280    .B..    DCD    17024 ; [Section 17]
+    lcdc_clk_on
+    $a
+        0x0000ae88:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ae8c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000ae90:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ae94:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000ae98:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xaec4
+        0x0000ae9c:    e59f4058    X@..    LDR      r4,[pc,#88]   ; [([Section 17] + 17024) = 0xaefc]  = 0x4280
+        0x0000aea0:    e3a01001    ....    MOV      r1,#1
+        0x0000aea4:    e5940034    4...    LDR      r0,[r4,#0x34]
+        0x0000aea8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aeac:    e5940038    8...    LDR      r0,[r4,#0x38]
+        0x0000aeb0:    e3a01001    ....    MOV      r1,#1
+        0x0000aeb4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aeb8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000aebc:    e3833806    .8..    ORR      r3,r3,#0x60000
+        0x0000aec0:    ea00000a    ....    B        {pc} + 0x30  ; 0xaef0
+        0x0000aec4:    e3550001    ..U.    CMP      r5,#1
+        0x0000aec8:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xaef4
+        0x0000aecc:    e59f4028    (@..    LDR      r4,[pc,#40]   ; [([Section 17] + 17024) = 0xaefc]  = 0x4280
+        0x0000aed0:    e1a01005    ....    MOV      r1,r5
+        0x0000aed4:    e594003c    <...    LDR      r0,[r4,#0x3c]
+        0x0000aed8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aedc:    e1a01005    ....    MOV      r1,r5
+        0x0000aee0:    e5940040    @...    LDR      r0,[r4,#0x40]
+        0x0000aee4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000aee8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000aeec:    e3833606    .6..    ORR      r3,r3,#0x600000
+        0x0000aef0:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000aef4:    e3a00000    ....    MOV      r0,#0
+        0x0000aef8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000aefc:    00004280    .B..    DCD    17024 ; [Section 17]
+    scaler_clk_off
+    $a
+        0x0000af00:    e1a0c00d    ....    MOV      r12,r13
+        0x0000af04:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000af08:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000af0c:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000af10:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xaf3c
+        0x0000af14:    e59f4058    X@..    LDR      r4,[pc,#88]   ; [([Section 17] + 17024) = 0xaf74]  = 0x4280
+        0x0000af18:    e1a01005    ....    MOV      r1,r5
+        0x0000af1c:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x0000af20:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000af24:    e1a01005    ....    MOV      r1,r5
+        0x0000af28:    e5940014    ....    LDR      r0,[r4,#0x14]
+        0x0000af2c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000af30:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000af34:    e3c33c06    .<..    BIC      r3,r3,#0x600
+        0x0000af38:    ea00000a    ....    B        {pc} + 0x30  ; 0xaf68
+        0x0000af3c:    e3550001    ..U.    CMP      r5,#1
+        0x0000af40:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xaf6c
+        0x0000af44:    e59f4028    (@..    LDR      r4,[pc,#40]   ; [([Section 17] + 17024) = 0xaf74]  = 0x4280
+        0x0000af48:    e3a01000    ....    MOV      r1,#0
+        0x0000af4c:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000af50:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000af54:    e5940018    ....    LDR      r0,[r4,#0x18]
+        0x0000af58:    e3a01000    ....    MOV      r1,#0
+        0x0000af5c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000af60:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000af64:    e3c33a06    .:..    BIC      r3,r3,#0x6000
+        0x0000af68:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000af6c:    e3a00000    ....    MOV      r0,#0
+        0x0000af70:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000af74:    00004280    .B..    DCD    17024 ; [Section 17]
+    scaler_clk_on
+    $a
+        0x0000af78:    e1a0c00d    ....    MOV      r12,r13
+        0x0000af7c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000af80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000af84:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000af88:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xafb4
+        0x0000af8c:    e59f4058    X@..    LDR      r4,[pc,#88]   ; [([Section 17] + 17024) = 0xafec]  = 0x4280
+        0x0000af90:    e3a01001    ....    MOV      r1,#1
+        0x0000af94:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x0000af98:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000af9c:    e5940014    ....    LDR      r0,[r4,#0x14]
+        0x0000afa0:    e3a01001    ....    MOV      r1,#1
+        0x0000afa4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000afa8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000afac:    e3833c06    .<..    ORR      r3,r3,#0x600
+        0x0000afb0:    ea00000a    ....    B        {pc} + 0x30  ; 0xafe0
+        0x0000afb4:    e3550001    ..U.    CMP      r5,#1
+        0x0000afb8:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xafe4
+        0x0000afbc:    e59f4028    (@..    LDR      r4,[pc,#40]   ; [([Section 17] + 17024) = 0xafec]  = 0x4280
+        0x0000afc0:    e1a01005    ....    MOV      r1,r5
+        0x0000afc4:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000afc8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000afcc:    e1a01005    ....    MOV      r1,r5
+        0x0000afd0:    e5940018    ....    LDR      r0,[r4,#0x18]
+        0x0000afd4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000afd8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000afdc:    e3833a06    .:..    ORR      r3,r3,#0x6000
+        0x0000afe0:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000afe4:    e3a00000    ....    MOV      r0,#0
+        0x0000afe8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000afec:    00004280    .B..    DCD    17024 ; [Section 17]
+    image_clk_off
+    $a
+        0x0000aff0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000aff4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000aff8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000affc:    e3500000    ..P.    CMP      r0,#0
+        0x0000b000:    1a000006    ....    BNE      {pc} + 0x20  ; 0xb020
+        0x0000b004:    e59f4040    @@..    LDR      r4,[pc,#64]   ; [([Section 17] + 17024) = 0xb04c]  = 0x4280
+        0x0000b008:    e1a01000    ....    MOV      r1,r0
+        0x0000b00c:    e594001c    ....    LDR      r0,[r4,#0x1c]
+        0x0000b010:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b014:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b018:    e3c33004    .0..    BIC      r3,r3,#4
+        0x0000b01c:    ea000007    ....    B        {pc} + 0x24  ; 0xb040
+        0x0000b020:    e3500001    ..P.    CMP      r0,#1
+        0x0000b024:    1a000006    ....    BNE      {pc} + 0x20  ; 0xb044
+        0x0000b028:    e59f401c    .@..    LDR      r4,[pc,#28]   ; [([Section 17] + 17024) = 0xb04c]  = 0x4280
+        0x0000b02c:    e3a01000    ....    MOV      r1,#0
+        0x0000b030:    e5940020     ...    LDR      r0,[r4,#0x20]
+        0x0000b034:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b038:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b03c:    e3c33040    @0..    BIC      r3,r3,#0x40
+        0x0000b040:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b044:    e3a00000    ....    MOV      r0,#0
+        0x0000b048:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b04c:    00004280    .B..    DCD    17024 ; [Section 17]
+    image_clk_on
+    $a
+        0x0000b050:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b054:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b058:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b05c:    e3500000    ..P.    CMP      r0,#0
+        0x0000b060:    1a000006    ....    BNE      {pc} + 0x20  ; 0xb080
+        0x0000b064:    e59f4040    @@..    LDR      r4,[pc,#64]   ; [([Section 17] + 17024) = 0xb0ac]  = 0x4280
+        0x0000b068:    e3a01001    ....    MOV      r1,#1
+        0x0000b06c:    e594001c    ....    LDR      r0,[r4,#0x1c]
+        0x0000b070:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b074:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b078:    e3833004    .0..    ORR      r3,r3,#4
+        0x0000b07c:    ea000007    ....    B        {pc} + 0x24  ; 0xb0a0
+        0x0000b080:    e3500001    ..P.    CMP      r0,#1
+        0x0000b084:    1a000006    ....    BNE      {pc} + 0x20  ; 0xb0a4
+        0x0000b088:    e59f401c    .@..    LDR      r4,[pc,#28]   ; [([Section 17] + 17024) = 0xb0ac]  = 0x4280
+        0x0000b08c:    e1a01000    ....    MOV      r1,r0
+        0x0000b090:    e5940020     ...    LDR      r0,[r4,#0x20]
+        0x0000b094:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b098:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b09c:    e3833040    @0..    ORR      r3,r3,#0x40
+        0x0000b0a0:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b0a4:    e3a00000    ....    MOV      r0,#0
+        0x0000b0a8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b0ac:    00004280    .B..    DCD    17024 ; [Section 17]
+    disp_pll_init
+    $a
+        0x0000b0b0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b0b4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b0b8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b0bc:    e59f4034    4@..    LDR      r4,[pc,#52]   ; [0xb0f8] = 0x1f78a40
+        0x0000b0c0:    e3a00006    ....    MOV      r0,#6
+        0x0000b0c4:    e59f1030    0...    LDR      r1,[pc,#48]   ; [0xb0fc] = 0x10736d00
+        0x0000b0c8:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b0cc:    e59f102c    ,...    LDR      r1,[pc,#44]   ; [0xb100] = 0x11b3dc40
+        0x0000b0d0:    e3a00007    ....    MOV      r0,#7
+        0x0000b0d4:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b0d8:    e1a01004    ....    MOV      r1,r4
+        0x0000b0dc:    e3a00010    ....    MOV      r0,#0x10
+        0x0000b0e0:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b0e4:    e1a01004    ....    MOV      r1,r4
+        0x0000b0e8:    e3a00011    ....    MOV      r0,#0x11
+        0x0000b0ec:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b0f0:    e3a00000    ....    MOV      r0,#0
+        0x0000b0f4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b0f8:    01f78a40    @...    DCD    33000000
+        0x0000b0fc:    10736d00    .ms.    DCD    276000000
+        0x0000b100:    11b3dc40    @...    DCD    297000000
+    disp_pll_set
+    $a
+        0x0000b104:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b108:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000b10c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b110:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000b114:    e1a07000    .p..    MOV      r7,r0
+        0x0000b118:    e1a00001    ....    MOV      r0,r1
+        0x0000b11c:    e59f1154    T...    LDR      r1,[pc,#340]  ; [gpanel_info = 0xb278] = 0
+        0x0000b120:    e1a08002    ....    MOV      r8,r2
+        0x0000b124:    e3a02088    . ..    MOV      r2,#0x88
+        0x0000b128:    e59b900c    ....    LDR      r9,[r11,#0xc]
+        0x0000b12c:    e50b3030    00..    STR      r3,[r11,#-0x30]
+        0x0000b130:    e0221792    ..".    MLA      r2,r2,r7,r1
+        0x0000b134:    e5d23004    .0..    LDRB     r3,[r2,#4]
+        0x0000b138:    e3530001    ..S.    CMP      r3,#1
+        0x0000b13c:    03590001    ..Y.    CMPEQ    r9,#1
+        0x0000b140:    1a000010    ....    BNE      {pc} + 0x48  ; 0xb188
+        0x0000b144:    e3500000    ..P.    CMP      r0,#0
+        0x0000b148:    e1a01008    ....    MOV      r1,r8
+        0x0000b14c:    03a0500a    .P..    MOVEQ    r5,#0xa
+        0x0000b150:    13a0500b    .P..    MOVNE    r5,#0xb
+        0x0000b154:    e3570000    ..W.    CMP      r7,#0
+        0x0000b158:    e1a00005    ....    MOV      r0,r5
+        0x0000b15c:    03a04010    .@..    MOVEQ    r4,#0x10
+        0x0000b160:    13a04011    .@..    MOVNE    r4,#0x11
+        0x0000b164:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b168:    e51b1030    0...    LDR      r1,[r11,#-0x30]
+        0x0000b16c:    e1a00004    ....    MOV      r0,r4
+        0x0000b170:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b174:    e59f3100    .1..    LDR      r3,[pc,#256]  ; [([Section 17] + 17024) = 0xb27c]  = 0x4280
+        0x0000b178:    e1a01005    ....    MOV      r1,r5
+        0x0000b17c:    e593004c    L...    LDR      r0,[r3,#0x4c]
+        0x0000b180:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b184:    ea000038    8...    B        {pc} + 0xe8  ; 0xb26c
+        0x0000b188:    e3500000    ..P.    CMP      r0,#0
+        0x0000b18c:    e59f00e8    ....    LDR      r0,[pc,#232]  ; [([Section 17] + 17024) = 0xb27c]  = 0x4280
+        0x0000b190:    e1a01008    ....    MOV      r1,r8
+        0x0000b194:    03a0a006    ....    MOVEQ    r10,#6
+        0x0000b198:    13a0a007    ....    MOVNE    r10,#7
+        0x0000b19c:    e3570000    ..W.    CMP      r7,#0
+        0x0000b1a0:    1590403c    <@..    LDRNE    r4,[r0,#0x3c]
+        0x0000b1a4:    13a05011    .P..    MOVNE    r5,#0x11
+        0x0000b1a8:    05904034    4@..    LDREQ    r4,[r0,#0x34]
+        0x0000b1ac:    03a05010    .P..    MOVEQ    r5,#0x10
+        0x0000b1b0:    15906040    @`..    LDRNE    r6,[r0,#0x40]
+        0x0000b1b4:    05906038    8`..    LDREQ    r6,[r0,#0x38]
+        0x0000b1b8:    e1a0000a    ....    MOV      r0,r10
+        0x0000b1bc:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b1c0:    e1a0100a    ....    MOV      r1,r10
+        0x0000b1c4:    e1a00004    ....    MOV      r0,r4
+        0x0000b1c8:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b1cc:    e1a00006    ....    MOV      r0,r6
+        0x0000b1d0:    e1a01005    ....    MOV      r1,r5
+        0x0000b1d4:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b1d8:    e3590001    ..Y.    CMP      r9,#1
+        0x0000b1dc:    0a00000f    ....    BEQ      {pc} + 0x44  ; 0xb220
+        0x0000b1e0:    e51b1030    0...    LDR      r1,[r11,#-0x30]
+        0x0000b1e4:    e1a00005    ....    MOV      r0,r5
+        0x0000b1e8:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b1ec:    e3590004    ..Y.    CMP      r9,#4
+        0x0000b1f0:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xb210
+        0x0000b1f4:    e59f4080    .@..    LDR      r4,[pc,#128]  ; [([Section 17] + 17024) = 0xb27c]  = 0x4280
+        0x0000b1f8:    e1a01005    ....    MOV      r1,r5
+        0x0000b1fc:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x0000b200:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b204:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000b208:    e1a01005    ....    MOV      r1,r5
+        0x0000b20c:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b210:    e1a00006    ....    MOV      r0,r6
+        0x0000b214:    e59b1004    ....    LDR      r1,[r11,#4]
+        0x0000b218:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000b21c:    ea000012    ....    B        {pc} + 0x50  ; 0xb26c
+        0x0000b220:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000b224:    e59f204c    L ..    LDR      r2,[pc,#76]   ; [gpanel_info = 0xb278] = 0
+        0x0000b228:    e0030793    ....    MUL      r3,r3,r7
+        0x0000b22c:    e7923003    .0..    LDR      r3,[r2,r3]
+        0x0000b230:    e3530001    ..S.    CMP      r3,#1
+        0x0000b234:    1a00000c    ....    BNE      {pc} + 0x38  ; 0xb26c
+        0x0000b238:    e59b2008    . ..    LDR      r2,[r11,#8]
+        0x0000b23c:    e1a01008    ....    MOV      r1,r8
+        0x0000b240:    e59f0038    8...    LDR      r0,[pc,#56]   ; [([Section 10] + 1549) = 0xb280]  = 0x60d
+        0x0000b244:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000b248:    e59b1008    ....    LDR      r1,[r11,#8]
+        0x0000b24c:    e1a00008    ....    MOV      r0,r8
+        0x0000b250:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x0000b254:    e59f3028    (0..    LDR      r3,[pc,#40]   ; [0xb284] = 0x4116990
+        0x0000b258:    e1500003    ..P.    CMP      r0,r3
+        0x0000b25c:    e1a01000    ....    MOV      r1,r0
+        0x0000b260:    1a000001    ....    BNE      {pc} + 0xc  ; 0xb26c
+        0x0000b264:    e1a00005    ....    MOV      r0,r5
+        0x0000b268:    ebfffffe    ....    BL       OSAL_CCMU_SetSrcFreq  ; 0x2f64 Section #1
+        0x0000b26c:    e3a00000    ....    MOV      r0,#0
+        0x0000b270:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000b274:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0000b278:    00000000    ....    DCD    0 ; gpanel_info
+        0x0000b27c:    00004280    .B..    DCD    17024 ; [Section 17]
+        0x0000b280:    0000060d    ....    DCD    1549 ; [Section 10]
+        0x0000b284:    04116990    .i..    DCD    68250000
+    disp_pll_assign
+    $a
+        0x0000b288:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b28c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b290:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b294:    e59f2084    . ..    LDR      r2,[pc,#132]  ; [gdisp = 0xb320] = 0
+        0x0000b298:    e3500000    ..P.    CMP      r0,#0
+        0x0000b29c:    e59fc080    ....    LDR      r12,[pc,#128]  ; [0xb324] = 0xefe82080
+        0x0000b2a0:    e3003448    H4..    MOV      r3,#0x448
+        0x0000b2a4:    13a03f92    .?..    MOVNE    r3,#0x248
+        0x0000b2a8:    e0822003    . ..    ADD      r2,r2,r3
+        0x0000b2ac:    e59f3074    t0..    LDR      r3,[pc,#116]  ; [0xb328] = 0x1c9c380
+        0x0000b2b0:    e081c00c    ....    ADD      r12,r1,r12
+        0x0000b2b4:    e1a05001    .P..    MOV      r5,r1
+        0x0000b2b8:    e5924004    .@..    LDR      r4,[r2,#4]
+        0x0000b2bc:    e15c0003    ..\.    CMP      r12,r3
+        0x0000b2c0:    8a000008    ....    BHI      {pc} + 0x28  ; 0xb2e8
+        0x0000b2c4:    e3140601    ....    TST      r4,#0x100000
+        0x0000b2c8:    0a000010    ....    BEQ      {pc} + 0x48  ; 0xb310
+        0x0000b2cc:    e3a00006    ....    MOV      r0,#6
+        0x0000b2d0:    ebfffffe    ....    BL       OSAL_CCMU_GetSrcFreq  ; 0x2f78 Section #1
+        0x0000b2d4:    e1500005    ..P.    CMP      r0,r5
+        0x0000b2d8:    0a00000c    ....    BEQ      {pc} + 0x38  ; 0xb310
+        0x0000b2dc:    e3140602    ....    TST      r4,#0x200000
+        0x0000b2e0:    0a00000c    ....    BEQ      {pc} + 0x38  ; 0xb318
+        0x0000b2e4:    ea000005    ....    B        {pc} + 0x1c  ; 0xb300
+        0x0000b2e8:    e3140602    ....    TST      r4,#0x200000
+        0x0000b2ec:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xb318
+        0x0000b2f0:    e3a00007    ....    MOV      r0,#7
+        0x0000b2f4:    ebfffffe    ....    BL       OSAL_CCMU_GetSrcFreq  ; 0x2f78 Section #1
+        0x0000b2f8:    e1500005    ..P.    CMP      r0,r5
+        0x0000b2fc:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xb318
+        0x0000b300:    e59f0024    $...    LDR      r0,[pc,#36]   ; [([Section 10] + 1582) = 0xb32c]  = 0x62e
+        0x0000b304:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000b308:    e3e00000    ....    MVN      r0,#0
+        0x0000b30c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000b310:    e3a00000    ....    MOV      r0,#0
+        0x0000b314:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000b318:    e3a00001    ....    MOV      r0,#1
+        0x0000b31c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b320:    00000000    ....    DCD    0 ; gdisp
+        0x0000b324:    efe82080    . ..    DCD    4024967296
+        0x0000b328:    01c9c380    ....    DCD    30000000
+        0x0000b32c:    0000062e    ....    DCD    1582 ; [Section 10]
+    disp_clk_cfg
+    $a
+        0x0000b330:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b334:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000b338:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b33c:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x0000b340:    e3510004    ..Q.    CMP      r1,#4
+        0x0000b344:    13510002    ..Q.    CMPNE    r1,#2
+        0x0000b348:    e1a0a001    ....    MOV      r10,r1
+        0x0000b34c:    e1a09000    ....    MOV      r9,r0
+        0x0000b350:    e1a0c002    ....    MOV      r12,r2
+        0x0000b354:    13a04000    .@..    MOVNE    r4,#0
+        0x0000b358:    03a04001    .@..    MOVEQ    r4,#1
+        0x0000b35c:    1a000005    ....    BNE      {pc} + 0x1c  ; 0xb378
+        0x0000b360:    e59f31c4    .1..    LDR      r3,[pc,#452]  ; [([Section 12] + 4960) = 0xb52c]  = 0x1360
+        0x0000b364:    e3a08000    ....    MOV      r8,#0
+        0x0000b368:    e0831202    ....    ADD      r1,r3,r2,LSL #4
+        0x0000b36c:    e793620c    .b..    LDR      r6,[r3,r12,LSL #4]
+        0x0000b370:    e99100a0    ....    LDMIB    r1,{r5,r7}
+        0x0000b374:    ea000053    S...    B        {pc} + 0x154  ; 0xb4c8
+        0x0000b378:    e3510008    ..Q.    CMP      r1,#8
+        0x0000b37c:    1a000008    ....    BNE      {pc} + 0x28  ; 0xb3a4
+        0x0000b380:    e282101e    ....    ADD      r1,r2,#0x1e
+        0x0000b384:    e59f31a0    .1..    LDR      r3,[pc,#416]  ; [([Section 12] + 4960) = 0xb52c]  = 0x1360
+        0x0000b388:    e1a08004    ....    MOV      r8,r4
+        0x0000b38c:    e0830201    ....    ADD      r0,r3,r1,LSL #4
+        0x0000b390:    e0832202    ."..    ADD      r2,r3,r2,LSL #4
+        0x0000b394:    e7936201    .b..    LDR      r6,[r3,r1,LSL #4]
+        0x0000b398:    e59271e8    .q..    LDR      r7,[r2,#0x1e8]
+        0x0000b39c:    e5905004    .P..    LDR      r5,[r0,#4]
+        0x0000b3a0:    ea000048    H...    B        {pc} + 0x128  ; 0xb4c8
+        0x0000b3a4:    e3510001    ..Q.    CMP      r1,#1
+        0x0000b3a8:    1a00004c    L...    BNE      {pc} + 0x138  ; 0xb4e0
+        0x0000b3ac:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000b3b0:    e59f7178    xq..    LDR      r7,[pc,#376]  ; [gpanel_info = 0xb530] = 0
+        0x0000b3b4:    e0060093    ....    MUL      r6,r3,r0
+        0x0000b3b8:    e0873006    .0..    ADD      r3,r7,r6
+        0x0000b3bc:    e5d30004    ....    LDRB     r0,[r3,#4]
+        0x0000b3c0:    e1d320ba    . ..    LDRH     r2,[r3,#0xa]
+        0x0000b3c4:    e59f3168    h1..    LDR      r3,[pc,#360]  ; [0xb534] = 0xf4240
+        0x0000b3c8:    e3500002    ..P.    CMP      r0,#2
+        0x0000b3cc:    13500000    ..P.    CMPNE    r0,#0
+        0x0000b3d0:    13a0c000    ....    MOVNE    r12,#0
+        0x0000b3d4:    03a0c001    ....    MOVEQ    r12,#1
+        0x0000b3d8:    e0050293    ....    MUL      r5,r3,r2
+        0x0000b3dc:    1a000016    ....    BNE      {pc} + 0x60  ; 0xb43c
+        0x0000b3e0:    e59f3150    P1..    LDR      r3,[pc,#336]  ; [0xb538] = 0xffe17b7f
+        0x0000b3e4:    e59f2150    P!..    LDR      r2,[pc,#336]  ; [0xb53c] = 0x11c31e7f
+        0x0000b3e8:    e0853003    .0..    ADD      r3,r5,r3
+        0x0000b3ec:    e1530002    ..S.    CMP      r3,r2
+        0x0000b3f0:    8a000025    %...    BHI      {pc} + 0x9c  ; 0xb48c
+        0x0000b3f4:    e1a01005    ....    MOV      r1,r5
+        0x0000b3f8:    e59f0140    @...    LDR      r0,[pc,#320]  ; [0xb540] = 0x11e1a300
+        0x0000b3fc:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x0000b400:    e59f413c    <A..    LDR      r4,[pc,#316]  ; [0xb544] = 0x2dc6c0
+        0x0000b404:    e1a01004    ....    MOV      r1,r4
+        0x0000b408:    e0030095    ....    MUL      r3,r5,r0
+        0x0000b40c:    e1a08000    ....    MOV      r8,r0
+        0x0000b410:    e59f0130    0...    LDR      r0,[pc,#304]  ; [0xb548] = 0x16e360
+        0x0000b414:    e0830000    ....    ADD      r0,r3,r0
+        0x0000b418:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x0000b41c:    e7973006    .0..    LDR      r3,[r7,r6]
+        0x0000b420:    e3530000    ..S.    CMP      r3,#0
+        0x0000b424:    e0040094    ....    MUL      r4,r4,r0
+        0x0000b428:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xb484
+        0x0000b42c:    e1a00009    ....    MOV      r0,r9
+        0x0000b430:    e1a01008    ....    MOV      r1,r8
+        0x0000b434:    ebfffffe    ....    BL       TCON0_set_dclk_div  ; 0x773c Section #1
+        0x0000b438:    ea000011    ....    B        {pc} + 0x4c  ; 0xb484
+        0x0000b43c:    e3500001    ..P.    CMP      r0,#1
+        0x0000b440:    11a0400c    .@..    MOVNE    r4,r12
+        0x0000b444:    11a08004    ....    MOVNE    r8,r4
+        0x0000b448:    1a00000d    ....    BNE      {pc} + 0x3c  ; 0xb484
+        0x0000b44c:    e59f30e4    .0..    LDR      r3,[pc,#228]  ; [0xb538] = 0xffe17b7f
+        0x0000b450:    e59f20f4    . ..    LDR      r2,[pc,#244]  ; [0xb54c] = 0x57bceff
+        0x0000b454:    e0853003    .0..    ADD      r3,r5,r3
+        0x0000b458:    e1530002    ..S.    CMP      r3,r2
+        0x0000b45c:    8a00000a    ....    BHI      {pc} + 0x30  ; 0xb48c
+        0x0000b460:    e3a00007    ....    MOV      r0,#7
+        0x0000b464:    e3a04006    .@..    MOV      r4,#6
+        0x0000b468:    e0000590    ....    MUL      r0,r0,r5
+        0x0000b46c:    e1a01004    ....    MOV      r1,r4
+        0x0000b470:    e1a0800c    ....    MOV      r8,r12
+        0x0000b474:    e28009b7    ....    ADD      r0,r0,#0x2dc000
+        0x0000b478:    e2800d1b    ....    ADD      r0,r0,#0x6c0
+        0x0000b47c:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x0000b480:    e0040094    ....    MUL      r4,r4,r0
+        0x0000b484:    e1a00004    ....    MOV      r0,r4
+        0x0000b488:    ea000001    ....    B        {pc} + 0xc  ; 0xb494
+        0x0000b48c:    e3e00000    ....    MVN      r0,#0
+        0x0000b490:    e3a08000    ....    MOV      r8,#0
+        0x0000b494:    e59f2094    . ..    LDR      r2,[pc,#148]  ; [gpanel_info = 0xb530] = 0
+        0x0000b498:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000b49c:    e1a07000    .p..    MOV      r7,r0
+        0x0000b4a0:    e0232993    .)#.    MLA      r3,r3,r9,r2
+        0x0000b4a4:    e5d33004    .0..    LDRB     r3,[r3,#4]
+        0x0000b4a8:    e3530001    ..S.    CMP      r3,#1
+        0x0000b4ac:    159f609c    .`..    LDRNE    r6,[pc,#156]  ; [0xb550] = 0x19bfcc0
+        0x0000b4b0:    13a05001    .P..    MOVNE    r5,#1
+        0x0000b4b4:    1a000003    ....    BNE      {pc} + 0x14  ; 0xb4c8
+        0x0000b4b8:    e3a0100e    ....    MOV      r1,#0xe
+        0x0000b4bc:    e1a05003    .P..    MOV      r5,r3
+        0x0000b4c0:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x0000b4c4:    e1a06000    .`..    MOV      r6,r0
+        0x0000b4c8:    e1a00009    ....    MOV      r0,r9
+        0x0000b4cc:    e1a01007    ....    MOV      r1,r7
+        0x0000b4d0:    ebfffffe    ....    BL       disp_pll_assign  ; 0xb288 Section #1
+        0x0000b4d4:    e3700001    ..p.    CMN      r0,#1
+        0x0000b4d8:    e1a04000    .@..    MOV      r4,r0
+        0x0000b4dc:    1a000001    ....    BNE      {pc} + 0xc  ; 0xb4e8
+        0x0000b4e0:    e1a00004    ....    MOV      r0,r4
+        0x0000b4e4:    ea00000e    ....    B        {pc} + 0x40  ; 0xb524
+        0x0000b4e8:    e1a03006    .0..    MOV      r3,r6
+        0x0000b4ec:    e1a02007    . ..    MOV      r2,r7
+        0x0000b4f0:    e1a01004    ....    MOV      r1,r4
+        0x0000b4f4:    e1a00009    ....    MOV      r0,r9
+        0x0000b4f8:    e88d0520     ...    STM      r13,{r5,r8,r10}
+        0x0000b4fc:    ebfffffe    ....    BL       disp_pll_set  ; 0xb104 Section #1
+        0x0000b500:    e59f204c    L ..    LDR      r2,[pc,#76]   ; [gdisp = 0xb554] = 0
+        0x0000b504:    e3540000    ..T.    CMP      r4,#0
+        0x0000b508:    e3a00000    ....    MOV      r0,#0
+        0x0000b50c:    e0822489    .$..    ADD      r2,r2,r9,LSL #9
+        0x0000b510:    03a03601    .6..    MOVEQ    r3,#0x100000
+        0x0000b514:    13a03602    .6..    MOVNE    r3,#0x200000
+        0x0000b518:    e592124c    L...    LDR      r1,[r2,#0x24c]
+        0x0000b51c:    e1833001    .0..    ORR      r3,r3,r1
+        0x0000b520:    e582324c    L2..    STR      r3,[r2,#0x24c]
+        0x0000b524:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000b528:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0000b52c:    00001360    `...    DCD    4960 ; [Section 12]
+        0x0000b530:    00000000    ....    DCD    0 ; gpanel_info
+        0x0000b534:    000f4240    @B..    DCD    1000000
+        0x0000b538:    ffe17b7f    .{..    DCD    4292967295
+        0x0000b53c:    11c31e7f    ....    DCD    297999999
+        0x0000b540:    11e1a300    ....    DCD    300000000
+        0x0000b544:    002dc6c0    ..-.    DCD    3000000
+        0x0000b548:    0016e360    `...    DCD    1500000
+        0x0000b54c:    057bceff    ..{.    DCD    91999999
+        0x0000b550:    019bfcc0    ....    DCD    27000000
+        0x0000b554:    00000000    ....    DCD    0 ; gdisp
+    tve_clk_exit
+    $a
+        0x0000b558:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b55c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b560:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b564:    e59f404c    L@..    LDR      r4,[pc,#76]   ; [([Section 17] + 17024) = 0xb5b8]  = 0x4280
+        0x0000b568:    e3a01000    ....    MOV      r1,#0
+        0x0000b56c:    e5940050    P...    LDR      r0,[r4,#0x50]
+        0x0000b570:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b574:    e3a01000    ....    MOV      r1,#0
+        0x0000b578:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x0000b57c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b580:    e3a01000    ....    MOV      r1,#0
+        0x0000b584:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000b588:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b58c:    e5940050    P...    LDR      r0,[r4,#0x50]
+        0x0000b590:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b594:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x0000b598:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b59c:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000b5a0:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b5a4:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b5a8:    e3a00000    ....    MOV      r0,#0
+        0x0000b5ac:    e3c33407    .4..    BIC      r3,r3,#0x7000000
+        0x0000b5b0:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b5b4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b5b8:    00004280    .B..    DCD    17024 ; [Section 17]
+    lcdc_clk_exit
+    $a
+        0x0000b5bc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b5c0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b5c4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b5c8:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000b5cc:    1a000012    ....    BNE      {pc} + 0x50  ; 0xb61c
+        0x0000b5d0:    e59f40a0    .@..    LDR      r4,[pc,#160]  ; [([Section 17] + 17024) = 0xb678]  = 0x4280
+        0x0000b5d4:    e1a01005    ....    MOV      r1,r5
+        0x0000b5d8:    e5940054    T...    LDR      r0,[r4,#0x54]
+        0x0000b5dc:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b5e0:    e1a01005    ....    MOV      r1,r5
+        0x0000b5e4:    e5940034    4...    LDR      r0,[r4,#0x34]
+        0x0000b5e8:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b5ec:    e1a01005    ....    MOV      r1,r5
+        0x0000b5f0:    e5940038    8...    LDR      r0,[r4,#0x38]
+        0x0000b5f4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b5f8:    e5940054    T...    LDR      r0,[r4,#0x54]
+        0x0000b5fc:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b600:    e5940034    4...    LDR      r0,[r4,#0x34]
+        0x0000b604:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b608:    e5940038    8...    LDR      r0,[r4,#0x38]
+        0x0000b60c:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b610:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b614:    e3c33807    .8..    BIC      r3,r3,#0x70000
+        0x0000b618:    ea000013    ....    B        {pc} + 0x54  ; 0xb66c
+        0x0000b61c:    e3550001    ..U.    CMP      r5,#1
+        0x0000b620:    1a000012    ....    BNE      {pc} + 0x50  ; 0xb670
+        0x0000b624:    e59f404c    L@..    LDR      r4,[pc,#76]   ; [([Section 17] + 17024) = 0xb678]  = 0x4280
+        0x0000b628:    e3a01000    ....    MOV      r1,#0
+        0x0000b62c:    e5940058    X...    LDR      r0,[r4,#0x58]
+        0x0000b630:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b634:    e3a01000    ....    MOV      r1,#0
+        0x0000b638:    e594003c    <...    LDR      r0,[r4,#0x3c]
+        0x0000b63c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b640:    e3a01000    ....    MOV      r1,#0
+        0x0000b644:    e5940040    @...    LDR      r0,[r4,#0x40]
+        0x0000b648:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b64c:    e5940058    X...    LDR      r0,[r4,#0x58]
+        0x0000b650:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b654:    e594003c    <...    LDR      r0,[r4,#0x3c]
+        0x0000b658:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b65c:    e5940040    @...    LDR      r0,[r4,#0x40]
+        0x0000b660:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b664:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b668:    e3c33607    .6..    BIC      r3,r3,#0x700000
+        0x0000b66c:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b670:    e3a00000    ....    MOV      r0,#0
+        0x0000b674:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b678:    00004280    .B..    DCD    17024 ; [Section 17]
+    tve_clk_init
+    $a
+        0x0000b67c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b680:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b684:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b688:    e3a00028    (...    MOV      r0,#0x28
+        0x0000b68c:    e59f4060    `@..    LDR      r4,[pc,#96]   ; [([Section 17] + 17024) = 0xb6f4]  = 0x4280
+        0x0000b690:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b694:    e5840050    P...    STR      r0,[r4,#0x50]
+        0x0000b698:    e3a0001d    ....    MOV      r0,#0x1d
+        0x0000b69c:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b6a0:    e5840044    D...    STR      r0,[r4,#0x44]
+        0x0000b6a4:    e3a0001e    ....    MOV      r0,#0x1e
+        0x0000b6a8:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b6ac:    e3a01010    ....    MOV      r1,#0x10
+        0x0000b6b0:    e5840048    H...    STR      r0,[r4,#0x48]
+        0x0000b6b4:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x0000b6b8:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b6bc:    e3a01010    ....    MOV      r1,#0x10
+        0x0000b6c0:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000b6c4:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b6c8:    e3a01002    ....    MOV      r1,#2
+        0x0000b6cc:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000b6d0:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000b6d4:    e5940050    P...    LDR      r0,[r4,#0x50]
+        0x0000b6d8:    e3a01001    ....    MOV      r1,#1
+        0x0000b6dc:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b6e0:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b6e4:    e3a00000    ....    MOV      r0,#0
+        0x0000b6e8:    e3833401    .4..    ORR      r3,r3,#0x1000000
+        0x0000b6ec:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b6f0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b6f4:    00004280    .B..    DCD    17024 ; [Section 17]
+    lcdc_clk_init
+    $a
+        0x0000b6f8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b6fc:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b700:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b704:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000b708:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xb764
+        0x0000b70c:    e2800032    2...    ADD      r0,r0,#0x32
+        0x0000b710:    e59f40b4    .@..    LDR      r4,[pc,#180]  ; [([Section 17] + 17024) = 0xb7cc]  = 0x4280
+        0x0000b714:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b718:    e5840054    T...    STR      r0,[r4,#0x54]
+        0x0000b71c:    e3a0001f    ....    MOV      r0,#0x1f
+        0x0000b720:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b724:    e5840034    4...    STR      r0,[r4,#0x34]
+        0x0000b728:    e3a00020     ...    MOV      r0,#0x20
+        0x0000b72c:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b730:    e3a01007    ....    MOV      r1,#7
+        0x0000b734:    e5840038    8...    STR      r0,[r4,#0x38]
+        0x0000b738:    e5940034    4...    LDR      r0,[r4,#0x34]
+        0x0000b73c:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b740:    e3a01001    ....    MOV      r1,#1
+        0x0000b744:    e5940034    4...    LDR      r0,[r4,#0x34]
+        0x0000b748:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000b74c:    e5940054    T...    LDR      r0,[r4,#0x54]
+        0x0000b750:    e3a01001    ....    MOV      r1,#1
+        0x0000b754:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b758:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b75c:    e3833801    .8..    ORR      r3,r3,#0x10000
+        0x0000b760:    ea000016    ....    B        {pc} + 0x60  ; 0xb7c0
+        0x0000b764:    e3550001    ..U.    CMP      r5,#1
+        0x0000b768:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xb7c4
+        0x0000b76c:    e3a00043    C...    MOV      r0,#0x43
+        0x0000b770:    e59f4054    T@..    LDR      r4,[pc,#84]   ; [([Section 17] + 17024) = 0xb7cc]  = 0x4280
+        0x0000b774:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b778:    e5840058    X...    STR      r0,[r4,#0x58]
+        0x0000b77c:    e3a00021    !...    MOV      r0,#0x21
+        0x0000b780:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b784:    e584003c    <...    STR      r0,[r4,#0x3c]
+        0x0000b788:    e3a00022    "...    MOV      r0,#0x22
+        0x0000b78c:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b790:    e3a01006    ....    MOV      r1,#6
+        0x0000b794:    e5840040    @...    STR      r0,[r4,#0x40]
+        0x0000b798:    e594003c    <...    LDR      r0,[r4,#0x3c]
+        0x0000b79c:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b7a0:    e1a01005    ....    MOV      r1,r5
+        0x0000b7a4:    e594003c    <...    LDR      r0,[r4,#0x3c]
+        0x0000b7a8:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000b7ac:    e1a01005    ....    MOV      r1,r5
+        0x0000b7b0:    e5940058    X...    LDR      r0,[r4,#0x58]
+        0x0000b7b4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b7b8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b7bc:    e3833601    .6..    ORR      r3,r3,#0x100000
+        0x0000b7c0:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b7c4:    e3a00000    ....    MOV      r0,#0
+        0x0000b7c8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b7cc:    00004280    .B..    DCD    17024 ; [Section 17]
+    disp_clk_init
+    $a
+        0x0000b7d0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b7d4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b7d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b7dc:    e3a0003f    ?...    MOV      r0,#0x3f
+        0x0000b7e0:    e59f40b8    .@..    LDR      r4,[pc,#184]  ; [([Section 17] + 17024) = 0xb8a0]  = 0x4280
+        0x0000b7e4:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b7e8:    e584000c    ....    STR      r0,[r4,#0xc]
+        0x0000b7ec:    e3a00042    B...    MOV      r0,#0x42
+        0x0000b7f0:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b7f4:    e5840010    ....    STR      r0,[r4,#0x10]
+        0x0000b7f8:    e3a0003e    >...    MOV      r0,#0x3e
+        0x0000b7fc:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b800:    e5840004    ....    STR      r0,[r4,#4]
+        0x0000b804:    e3a00041    A...    MOV      r0,#0x41
+        0x0000b808:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b80c:    e5840008    ....    STR      r0,[r4,#8]
+        0x0000b810:    e3a00028    (...    MOV      r0,#0x28
+        0x0000b814:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b818:    e5840050    P...    STR      r0,[r4,#0x50]
+        0x0000b81c:    e3a00032    2...    MOV      r0,#0x32
+        0x0000b820:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b824:    e5840054    T...    STR      r0,[r4,#0x54]
+        0x0000b828:    e3a00043    C...    MOV      r0,#0x43
+        0x0000b82c:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b830:    e3a01001    ....    MOV      r1,#1
+        0x0000b834:    e5840058    X...    STR      r0,[r4,#0x58]
+        0x0000b838:    e594000c    ....    LDR      r0,[r4,#0xc]
+        0x0000b83c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b840:    e3a01001    ....    MOV      r1,#1
+        0x0000b844:    e5940010    ....    LDR      r0,[r4,#0x10]
+        0x0000b848:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b84c:    e3a01001    ....    MOV      r1,#1
+        0x0000b850:    e5940004    ....    LDR      r0,[r4,#4]
+        0x0000b854:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b858:    e3a01001    ....    MOV      r1,#1
+        0x0000b85c:    e5940008    ....    LDR      r0,[r4,#8]
+        0x0000b860:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b864:    e3a01001    ....    MOV      r1,#1
+        0x0000b868:    e5940050    P...    LDR      r0,[r4,#0x50]
+        0x0000b86c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b870:    e3a01001    ....    MOV      r1,#1
+        0x0000b874:    e5940054    T...    LDR      r0,[r4,#0x54]
+        0x0000b878:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b87c:    e5940058    X...    LDR      r0,[r4,#0x58]
+        0x0000b880:    e3a01001    ....    MOV      r1,#1
+        0x0000b884:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b888:    e5942000    . ..    LDR      r2,[r4,#0]
+        0x0000b88c:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [0xb8a4] = 0x1111111
+        0x0000b890:    e3a00000    ....    MOV      r0,#0
+        0x0000b894:    e1823003    .0..    ORR      r3,r2,r3
+        0x0000b898:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b89c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b8a0:    00004280    .B..    DCD    17024 ; [Section 17]
+        0x0000b8a4:    01111111    ....    DCD    17895697
+    scaler_clk_exit
+    $a
+        0x0000b8a8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b8ac:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b8b0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b8b4:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000b8b8:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xb914
+        0x0000b8bc:    e59f40b8    .@..    LDR      r4,[pc,#184]  ; [([Section 17] + 17024) = 0xb97c]  = 0x4280
+        0x0000b8c0:    e3a01001    ....    MOV      r1,#1
+        0x0000b8c4:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x0000b8c8:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000b8cc:    e1a01005    ....    MOV      r1,r5
+        0x0000b8d0:    e5940004    ....    LDR      r0,[r4,#4]
+        0x0000b8d4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b8d8:    e1a01005    ....    MOV      r1,r5
+        0x0000b8dc:    e5940014    ....    LDR      r0,[r4,#0x14]
+        0x0000b8e0:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b8e4:    e1a01005    ....    MOV      r1,r5
+        0x0000b8e8:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x0000b8ec:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b8f0:    e5940004    ....    LDR      r0,[r4,#4]
+        0x0000b8f4:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b8f8:    e5940014    ....    LDR      r0,[r4,#0x14]
+        0x0000b8fc:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b900:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x0000b904:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b908:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b90c:    e3c33c07    .<..    BIC      r3,r3,#0x700
+        0x0000b910:    ea000016    ....    B        {pc} + 0x60  ; 0xb970
+        0x0000b914:    e3550001    ..U.    CMP      r5,#1
+        0x0000b918:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xb974
+        0x0000b91c:    e59f4058    X@..    LDR      r4,[pc,#88]   ; [([Section 17] + 17024) = 0xb97c]  = 0x4280
+        0x0000b920:    e1a01005    ....    MOV      r1,r5
+        0x0000b924:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000b928:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000b92c:    e3a01000    ....    MOV      r1,#0
+        0x0000b930:    e5940008    ....    LDR      r0,[r4,#8]
+        0x0000b934:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b938:    e3a01000    ....    MOV      r1,#0
+        0x0000b93c:    e5940018    ....    LDR      r0,[r4,#0x18]
+        0x0000b940:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b944:    e3a01000    ....    MOV      r1,#0
+        0x0000b948:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000b94c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b950:    e5940008    ....    LDR      r0,[r4,#8]
+        0x0000b954:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b958:    e5940018    ....    LDR      r0,[r4,#0x18]
+        0x0000b95c:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b960:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000b964:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000b968:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b96c:    e3c33a07    .:..    BIC      r3,r3,#0x7000
+        0x0000b970:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000b974:    e3a00000    ....    MOV      r0,#0
+        0x0000b978:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000b97c:    00004280    .B..    DCD    17024 ; [Section 17]
+    scaler_clk_init
+    $a
+        0x0000b980:    e1a0c00d    ....    MOV      r12,r13
+        0x0000b984:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000b988:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000b98c:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000b990:    1a000017    ....    BNE      {pc} + 0x64  ; 0xb9f4
+        0x0000b994:    e280003e    >...    ADD      r0,r0,#0x3e
+        0x0000b998:    e59f40c4    .@..    LDR      r4,[pc,#196]  ; [([Section 17] + 17024) = 0xba64]  = 0x4280
+        0x0000b99c:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b9a0:    e5840004    ....    STR      r0,[r4,#4]
+        0x0000b9a4:    e3a0005b    [...    MOV      r0,#0x5b
+        0x0000b9a8:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b9ac:    e5840014    ....    STR      r0,[r4,#0x14]
+        0x0000b9b0:    e3a00009    ....    MOV      r0,#9
+        0x0000b9b4:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000b9b8:    e1a01005    ....    MOV      r1,r5
+        0x0000b9bc:    e5840024    $...    STR      r0,[r4,#0x24]
+        0x0000b9c0:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000b9c4:    e3a01006    ....    MOV      r1,#6
+        0x0000b9c8:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x0000b9cc:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000b9d0:    e3a01001    ....    MOV      r1,#1
+        0x0000b9d4:    e5940024    $...    LDR      r0,[r4,#0x24]
+        0x0000b9d8:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000b9dc:    e5940004    ....    LDR      r0,[r4,#4]
+        0x0000b9e0:    e3a01001    ....    MOV      r1,#1
+        0x0000b9e4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000b9e8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000b9ec:    e3833c01    .<..    ORR      r3,r3,#0x100
+        0x0000b9f0:    ea000018    ....    B        {pc} + 0x68  ; 0xba58
+        0x0000b9f4:    e3550001    ..U.    CMP      r5,#1
+        0x0000b9f8:    1a000017    ....    BNE      {pc} + 0x64  ; 0xba5c
+        0x0000b9fc:    e3a00041    A...    MOV      r0,#0x41
+        0x0000ba00:    e59f405c    \@..    LDR      r4,[pc,#92]   ; [([Section 17] + 17024) = 0xba64]  = 0x4280
+        0x0000ba04:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000ba08:    e5840008    ....    STR      r0,[r4,#8]
+        0x0000ba0c:    e3a0005c    \...    MOV      r0,#0x5c
+        0x0000ba10:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000ba14:    e5840018    ....    STR      r0,[r4,#0x18]
+        0x0000ba18:    e3a00008    ....    MOV      r0,#8
+        0x0000ba1c:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000ba20:    e3a01000    ....    MOV      r1,#0
+        0x0000ba24:    e5840028    (...    STR      r0,[r4,#0x28]
+        0x0000ba28:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000ba2c:    e3a01006    ....    MOV      r1,#6
+        0x0000ba30:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000ba34:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000ba38:    e1a01005    ....    MOV      r1,r5
+        0x0000ba3c:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000ba40:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000ba44:    e1a01005    ....    MOV      r1,r5
+        0x0000ba48:    e5940008    ....    LDR      r0,[r4,#8]
+        0x0000ba4c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ba50:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000ba54:    e3833a01    .:..    ORR      r3,r3,#0x1000
+        0x0000ba58:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000ba5c:    e3a00000    ....    MOV      r0,#0
+        0x0000ba60:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000ba64:    00004280    .B..    DCD    17024 ; [Section 17]
+    image_clk_exit
+    $a
+        0x0000ba68:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ba6c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000ba70:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ba74:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000ba78:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xbad4
+        0x0000ba7c:    e59f40b8    .@..    LDR      r4,[pc,#184]  ; [([Section 17] + 17024) = 0xbb3c]  = 0x4280
+        0x0000ba80:    e3a01001    ....    MOV      r1,#1
+        0x0000ba84:    e594002c    ,...    LDR      r0,[r4,#0x2c]
+        0x0000ba88:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000ba8c:    e1a01005    ....    MOV      r1,r5
+        0x0000ba90:    e594000c    ....    LDR      r0,[r4,#0xc]
+        0x0000ba94:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000ba98:    e1a01005    ....    MOV      r1,r5
+        0x0000ba9c:    e594001c    ....    LDR      r0,[r4,#0x1c]
+        0x0000baa0:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000baa4:    e1a01005    ....    MOV      r1,r5
+        0x0000baa8:    e594002c    ,...    LDR      r0,[r4,#0x2c]
+        0x0000baac:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000bab0:    e594000c    ....    LDR      r0,[r4,#0xc]
+        0x0000bab4:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000bab8:    e594001c    ....    LDR      r0,[r4,#0x1c]
+        0x0000babc:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000bac0:    e594002c    ,...    LDR      r0,[r4,#0x2c]
+        0x0000bac4:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000bac8:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000bacc:    e3c33007    .0..    BIC      r3,r3,#7
+        0x0000bad0:    ea000016    ....    B        {pc} + 0x60  ; 0xbb30
+        0x0000bad4:    e3550001    ..U.    CMP      r5,#1
+        0x0000bad8:    1a000015    ....    BNE      {pc} + 0x5c  ; 0xbb34
+        0x0000badc:    e59f4058    X@..    LDR      r4,[pc,#88]   ; [([Section 17] + 17024) = 0xbb3c]  = 0x4280
+        0x0000bae0:    e1a01005    ....    MOV      r1,r5
+        0x0000bae4:    e5940030    0...    LDR      r0,[r4,#0x30]
+        0x0000bae8:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000baec:    e3a01000    ....    MOV      r1,#0
+        0x0000baf0:    e5940010    ....    LDR      r0,[r4,#0x10]
+        0x0000baf4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000baf8:    e3a01000    ....    MOV      r1,#0
+        0x0000bafc:    e5940020     ...    LDR      r0,[r4,#0x20]
+        0x0000bb00:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000bb04:    e3a01000    ....    MOV      r1,#0
+        0x0000bb08:    e5940030    0...    LDR      r0,[r4,#0x30]
+        0x0000bb0c:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000bb10:    e5940010    ....    LDR      r0,[r4,#0x10]
+        0x0000bb14:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000bb18:    e5940020     ...    LDR      r0,[r4,#0x20]
+        0x0000bb1c:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000bb20:    e5940030    0...    LDR      r0,[r4,#0x30]
+        0x0000bb24:    ebfffffe    ....    BL       OSAL_CCMU_CloseMclk  ; 0x2fa0 Section #1
+        0x0000bb28:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000bb2c:    e3c33070    p0..    BIC      r3,r3,#0x70
+        0x0000bb30:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000bb34:    e3a00000    ....    MOV      r0,#0
+        0x0000bb38:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000bb3c:    00004280    .B..    DCD    17024 ; [Section 17]
+    image_clk_init
+    $a
+        0x0000bb40:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bb44:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000bb48:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bb4c:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000bb50:    1a000022    "...    BNE      {pc} + 0x90  ; 0xbbe0
+        0x0000bb54:    e280003f    ?...    ADD      r0,r0,#0x3f
+        0x0000bb58:    e59f411c    .A..    LDR      r4,[pc,#284]  ; [([Section 17] + 17024) = 0xbc7c]  = 0x4280
+        0x0000bb5c:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000bb60:    e584000c    ....    STR      r0,[r4,#0xc]
+        0x0000bb64:    e3a00007    ....    MOV      r0,#7
+        0x0000bb68:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000bb6c:    e584002c    ,...    STR      r0,[r4,#0x2c]
+        0x0000bb70:    e3a0005d    ]...    MOV      r0,#0x5d
+        0x0000bb74:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000bb78:    e1a01005    ....    MOV      r1,r5
+        0x0000bb7c:    e584001c    ....    STR      r0,[r4,#0x1c]
+        0x0000bb80:    e594002c    ,...    LDR      r0,[r4,#0x2c]
+        0x0000bb84:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000bb88:    e3a01004    ....    MOV      r1,#4
+        0x0000bb8c:    e594002c    ,...    LDR      r0,[r4,#0x2c]
+        0x0000bb90:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000bb94:    e3a00004    ....    MOV      r0,#4
+        0x0000bb98:    ebfffffe    ....    BL       OSAL_CCMU_GetSrcFreq  ; 0x2f78 Section #1
+        0x0000bb9c:    e59f30dc    .0..    LDR      r3,[pc,#220]  ; [0xbc80] = 0x11e1a2ff
+        0x0000bba0:    e1500003    ..P.    CMP      r0,r3
+        0x0000bba4:    9594002c    ,...    LDRLS    r0,[r4,#0x2c]
+        0x0000bba8:    93a01001    ....    MOVLS    r1,#1
+        0x0000bbac:    8594002c    ,...    LDRHI    r0,[r4,#0x2c]
+        0x0000bbb0:    83a01002    ....    MOVHI    r1,#2
+        0x0000bbb4:    e59f40c0    .@..    LDR      r4,[pc,#192]  ; [([Section 17] + 17024) = 0xbc7c]  = 0x4280
+        0x0000bbb8:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000bbbc:    e3a01001    ....    MOV      r1,#1
+        0x0000bbc0:    e594000c    ....    LDR      r0,[r4,#0xc]
+        0x0000bbc4:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000bbc8:    e594002c    ,...    LDR      r0,[r4,#0x2c]
+        0x0000bbcc:    e3a01001    ....    MOV      r1,#1
+        0x0000bbd0:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000bbd4:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000bbd8:    e3833003    .0..    ORR      r3,r3,#3
+        0x0000bbdc:    ea000023    #...    B        {pc} + 0x94  ; 0xbc70
+        0x0000bbe0:    e3550001    ..U.    CMP      r5,#1
+        0x0000bbe4:    1a000022    "...    BNE      {pc} + 0x90  ; 0xbc74
+        0x0000bbe8:    e3a00042    B...    MOV      r0,#0x42
+        0x0000bbec:    e59f4088    .@..    LDR      r4,[pc,#136]  ; [([Section 17] + 17024) = 0xbc7c]  = 0x4280
+        0x0000bbf0:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000bbf4:    e5840010    ....    STR      r0,[r4,#0x10]
+        0x0000bbf8:    e3a00006    ....    MOV      r0,#6
+        0x0000bbfc:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000bc00:    e5840030    0...    STR      r0,[r4,#0x30]
+        0x0000bc04:    e3a0005e    ^...    MOV      r0,#0x5e
+        0x0000bc08:    ebfffffe    ....    BL       OSAL_CCMU_OpenMclk  ; 0x2f8c Section #1
+        0x0000bc0c:    e3a01000    ....    MOV      r1,#0
+        0x0000bc10:    e5840020     ...    STR      r0,[r4,#0x20]
+        0x0000bc14:    e5940030    0...    LDR      r0,[r4,#0x30]
+        0x0000bc18:    ebfffffe    ....    BL       OSAL_CCMU_MclkReset  ; 0x3018 Section #1
+        0x0000bc1c:    e3a01004    ....    MOV      r1,#4
+        0x0000bc20:    e5940030    0...    LDR      r0,[r4,#0x30]
+        0x0000bc24:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkSrc  ; 0x2fb4 Section #1
+        0x0000bc28:    e3a00004    ....    MOV      r0,#4
+        0x0000bc2c:    ebfffffe    ....    BL       OSAL_CCMU_GetSrcFreq  ; 0x2f78 Section #1
+        0x0000bc30:    e59f3048    H0..    LDR      r3,[pc,#72]   ; [0xbc80] = 0x11e1a2ff
+        0x0000bc34:    e1500003    ..P.    CMP      r0,r3
+        0x0000bc38:    95940030    0...    LDRLS    r0,[r4,#0x30]
+        0x0000bc3c:    91a01005    ....    MOVLS    r1,r5
+        0x0000bc40:    85940030    0...    LDRHI    r0,[r4,#0x30]
+        0x0000bc44:    83a01002    ....    MOVHI    r1,#2
+        0x0000bc48:    e59f402c    ,@..    LDR      r4,[pc,#44]   ; [([Section 17] + 17024) = 0xbc7c]  = 0x4280
+        0x0000bc4c:    ebfffffe    ....    BL       OSAL_CCMU_SetMclkDiv  ; 0x2fdc Section #1
+        0x0000bc50:    e3a01001    ....    MOV      r1,#1
+        0x0000bc54:    e5940010    ....    LDR      r0,[r4,#0x10]
+        0x0000bc58:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000bc5c:    e5940030    0...    LDR      r0,[r4,#0x30]
+        0x0000bc60:    e3a01001    ....    MOV      r1,#1
+        0x0000bc64:    ebfffffe    ....    BL       OSAL_CCMU_MclkOnOff  ; 0x3004 Section #1
+        0x0000bc68:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000bc6c:    e3833030    00..    ORR      r3,r3,#0x30
+        0x0000bc70:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000bc74:    e3a00000    ....    MOV      r0,#0
+        0x0000bc78:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000bc7c:    00004280    .B..    DCD    17024 ; [Section 17]
+        0x0000bc80:    11e1a2ff    ....    DCD    299999999
+    BSP_disp_layer_get_alpha_value
+    $a
+        0x0000bc84:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bc88:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000bc8c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bc90:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000bc94:    4a00000d    ...J    BMI      {pc} + 0x3c  ; 0xbcd0
+        0x0000bc98:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [gdisp = 0xbcd8] = 0
+        0x0000bc9c:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000bca0:    e0823000    .0..    ADD      r3,r2,r0
+        0x0000bca4:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000bca8:    e1510003    ..Q.    CMP      r1,r3
+        0x0000bcac:    2a000007    ...*    BCS      {pc} + 0x24  ; 0xbcd0
+        0x0000bcb0:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000bcb4:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000bcb8:    e0820003    ....    ADD      r0,r2,r3
+        0x0000bcbc:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000bcc0:    e3130002    ....    TST      r3,#2
+        0x0000bcc4:    03e00003    ....    MVNEQ    r0,#3
+        0x0000bcc8:    11d00ab4    ....    LDRHNE   r0,[r0,#0xa4]
+        0x0000bccc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000bcd0:    e3e00001    ....    MVN      r0,#1
+        0x0000bcd4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000bcd8:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_alpha_enable
+    $a
+        0x0000bcdc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bce0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000bce4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bce8:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000bcec:    4a00000d    ...J    BMI      {pc} + 0x3c  ; 0xbd28
+        0x0000bcf0:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [gdisp = 0xbd30] = 0
+        0x0000bcf4:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000bcf8:    e0823000    .0..    ADD      r3,r2,r0
+        0x0000bcfc:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000bd00:    e1510003    ..Q.    CMP      r1,r3
+        0x0000bd04:    2a000007    ...*    BCS      {pc} + 0x24  ; 0xbd28
+        0x0000bd08:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000bd0c:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000bd10:    e0820003    ....    ADD      r0,r2,r3
+        0x0000bd14:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000bd18:    e3130002    ....    TST      r3,#2
+        0x0000bd1c:    03e00003    ....    MVNEQ    r0,#3
+        0x0000bd20:    11d00ad2    ....    LDRSBNE  r0,[r0,#0xa2]
+        0x0000bd24:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000bd28:    e3e00001    ....    MVN      r0,#1
+        0x0000bd2c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000bd30:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_pipe
+    $a
+        0x0000bd34:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bd38:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000bd3c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bd40:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000bd44:    4a00000d    ...J    BMI      {pc} + 0x3c  ; 0xbd80
+        0x0000bd48:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [gdisp = 0xbd88] = 0
+        0x0000bd4c:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000bd50:    e0823000    .0..    ADD      r3,r2,r0
+        0x0000bd54:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000bd58:    e1510003    ..Q.    CMP      r1,r3
+        0x0000bd5c:    2a000007    ...*    BCS      {pc} + 0x24  ; 0xbd80
+        0x0000bd60:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000bd64:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000bd68:    e0820003    ....    ADD      r0,r2,r3
+        0x0000bd6c:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000bd70:    e3130002    ....    TST      r3,#2
+        0x0000bd74:    03e00003    ....    MVNEQ    r0,#3
+        0x0000bd78:    15d000a0    ....    LDRBNE   r0,[r0,#0xa0]
+        0x0000bd7c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000bd80:    e3e00001    ....    MVN      r0,#1
+        0x0000bd84:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000bd88:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_colorkey_enable
+    $a
+        0x0000bd8c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bd90:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000bd94:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bd98:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000bd9c:    4a00000d    ...J    BMI      {pc} + 0x3c  ; 0xbdd8
+        0x0000bda0:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [gdisp = 0xbde0] = 0
+        0x0000bda4:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000bda8:    e0823000    .0..    ADD      r3,r2,r0
+        0x0000bdac:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000bdb0:    e1510003    ..Q.    CMP      r1,r3
+        0x0000bdb4:    2a000007    ...*    BCS      {pc} + 0x24  ; 0xbdd8
+        0x0000bdb8:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000bdbc:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000bdc0:    e0820003    ....    ADD      r0,r2,r3
+        0x0000bdc4:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000bdc8:    e3130002    ....    TST      r3,#2
+        0x0000bdcc:    03e00003    ....    MVNEQ    r0,#3
+        0x0000bdd0:    11d00ad6    ....    LDRSBNE  r0,[r0,#0xa6]
+        0x0000bdd4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000bdd8:    e3e00001    ....    MVN      r0,#1
+        0x0000bddc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000bde0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_piro
+    $a
+        0x0000bde4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bde8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000bdec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bdf0:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000bdf4:    4a00000d    ...J    BMI      {pc} + 0x3c  ; 0xbe30
+        0x0000bdf8:    e59f2038    8 ..    LDR      r2,[pc,#56]   ; [gdisp = 0xbe38] = 0
+        0x0000bdfc:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000be00:    e0823000    .0..    ADD      r3,r2,r0
+        0x0000be04:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000be08:    e1510003    ..Q.    CMP      r1,r3
+        0x0000be0c:    2a000007    ...*    BCS      {pc} + 0x24  ; 0xbe30
+        0x0000be10:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000be14:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000be18:    e0820003    ....    ADD      r0,r2,r3
+        0x0000be1c:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000be20:    e3130002    ....    TST      r3,#2
+        0x0000be24:    03e00003    ....    MVNEQ    r0,#3
+        0x0000be28:    15d000a1    ....    LDRBNE   r0,[r0,#0xa1]
+        0x0000be2c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000be30:    e3e00001    ....    MVN      r0,#1
+        0x0000be34:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000be38:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_colorkey_enable
+    $a
+        0x0000be3c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000be40:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000be44:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000be48:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000be4c:    e1a05002    .P..    MOV      r5,r2
+        0x0000be50:    4a000011    ...J    BMI      {pc} + 0x4c  ; 0xbe9c
+        0x0000be54:    e59f4048    H@..    LDR      r4,[pc,#72]   ; [gdisp = 0xbea4] = 0
+        0x0000be58:    e1a0c480    ....    LSL      r12,r0,#9
+        0x0000be5c:    e084300c    .0..    ADD      r3,r4,r12
+        0x0000be60:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000be64:    e1510003    ..Q.    CMP      r1,r3
+        0x0000be68:    2a00000b    ...*    BCS      {pc} + 0x34  ; 0xbe9c
+        0x0000be6c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000be70:    e023c193    ..#.    MLA      r3,r3,r1,r12
+        0x0000be74:    e0844003    .@..    ADD      r4,r4,r3
+        0x0000be78:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000be7c:    e3130002    ....    TST      r3,#2
+        0x0000be80:    03e00003    ....    MVNEQ    r0,#3
+        0x0000be84:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000be88:    e6ef1071    q...    UXTB     r1,r1
+        0x0000be8c:    ebfffffe    ....    BL       DE_BE_Layer_ColorKey_Enable  ; 0x68e8 Section #1
+        0x0000be90:    e5c450a6    .P..    STRB     r5,[r4,#0xa6]
+        0x0000be94:    e3a00000    ....    MOV      r0,#0
+        0x0000be98:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000be9c:    e3e00001    ....    MVN      r0,#1
+        0x0000bea0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000bea4:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_pipe
+    $a
+        0x0000bea8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000beac:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000beb0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000beb4:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000beb8:    e1a05002    .P..    MOV      r5,r2
+        0x0000bebc:    4a000012    ...J    BMI      {pc} + 0x50  ; 0xbf0c
+        0x0000bec0:    e59f4054    T@..    LDR      r4,[pc,#84]   ; [gdisp = 0xbf1c] = 0
+        0x0000bec4:    e1a0c480    ....    LSL      r12,r0,#9
+        0x0000bec8:    e084300c    .0..    ADD      r3,r4,r12
+        0x0000becc:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000bed0:    e1510003    ..Q.    CMP      r1,r3
+        0x0000bed4:    2a00000c    ...*    BCS      {pc} + 0x38  ; 0xbf0c
+        0x0000bed8:    e3520001    ..R.    CMP      r2,#1
+        0x0000bedc:    8a00000c    ....    BHI      {pc} + 0x38  ; 0xbf14
+        0x0000bee0:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000bee4:    e023c193    ..#.    MLA      r3,r3,r1,r12
+        0x0000bee8:    e0844003    .@..    ADD      r4,r4,r3
+        0x0000beec:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000bef0:    e3130002    ....    TST      r3,#2
+        0x0000bef4:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xbf14
+        0x0000bef8:    e6ef1071    q...    UXTB     r1,r1
+        0x0000befc:    ebfffffe    ....    BL       DE_BE_Layer_Set_Pipe  ; 0x68b4 Section #1
+        0x0000bf00:    e5c450a0    .P..    STRB     r5,[r4,#0xa0]
+        0x0000bf04:    e3a00000    ....    MOV      r0,#0
+        0x0000bf08:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000bf0c:    e3e00001    ....    MVN      r0,#1
+        0x0000bf10:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000bf14:    e3e00003    ....    MVN      r0,#3
+        0x0000bf18:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000bf1c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_alpha_enable
+    $a
+        0x0000bf20:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bf24:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000bf28:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bf2c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000bf30:    e1a05002    .P..    MOV      r5,r2
+        0x0000bf34:    4a000011    ...J    BMI      {pc} + 0x4c  ; 0xbf80
+        0x0000bf38:    e59f4048    H@..    LDR      r4,[pc,#72]   ; [gdisp = 0xbf88] = 0
+        0x0000bf3c:    e1a0c480    ....    LSL      r12,r0,#9
+        0x0000bf40:    e084300c    .0..    ADD      r3,r4,r12
+        0x0000bf44:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000bf48:    e1510003    ..Q.    CMP      r1,r3
+        0x0000bf4c:    2a00000b    ...*    BCS      {pc} + 0x34  ; 0xbf80
+        0x0000bf50:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000bf54:    e023c193    ..#.    MLA      r3,r3,r1,r12
+        0x0000bf58:    e0844003    .@..    ADD      r4,r4,r3
+        0x0000bf5c:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000bf60:    e3130002    ....    TST      r3,#2
+        0x0000bf64:    03e00003    ....    MVNEQ    r0,#3
+        0x0000bf68:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000bf6c:    e6ef1071    q...    UXTB     r1,r1
+        0x0000bf70:    ebfffffe    ....    BL       DE_BE_Layer_Alpha_Enable  ; 0x6930 Section #1
+        0x0000bf74:    e5c450a2    .P..    STRB     r5,[r4,#0xa2]
+        0x0000bf78:    e3a00000    ....    MOV      r0,#0
+        0x0000bf7c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000bf80:    e3e00001    ....    MVN      r0,#1
+        0x0000bf84:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000bf88:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_alpha_value
+    $a
+        0x0000bf8c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bf90:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000bf94:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000bf98:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000bf9c:    e1a05002    .P..    MOV      r5,r2
+        0x0000bfa0:    4a000011    ...J    BMI      {pc} + 0x4c  ; 0xbfec
+        0x0000bfa4:    e59f4048    H@..    LDR      r4,[pc,#72]   ; [gdisp = 0xbff4] = 0
+        0x0000bfa8:    e1a0c480    ....    LSL      r12,r0,#9
+        0x0000bfac:    e084300c    .0..    ADD      r3,r4,r12
+        0x0000bfb0:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000bfb4:    e1510003    ..Q.    CMP      r1,r3
+        0x0000bfb8:    2a00000b    ...*    BCS      {pc} + 0x34  ; 0xbfec
+        0x0000bfbc:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000bfc0:    e023c193    ..#.    MLA      r3,r3,r1,r12
+        0x0000bfc4:    e0844003    .@..    ADD      r4,r4,r3
+        0x0000bfc8:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000bfcc:    e3130002    ....    TST      r3,#2
+        0x0000bfd0:    03e00003    ....    MVNEQ    r0,#3
+        0x0000bfd4:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000bfd8:    e6ef1071    q...    UXTB     r1,r1
+        0x0000bfdc:    ebfffffe    ....    BL       DE_BE_Layer_Set_Alpha_Value  ; 0x6974 Section #1
+        0x0000bfe0:    e1c45ab4    .Z..    STRH     r5,[r4,#0xa4]
+        0x0000bfe4:    e3a00000    ....    MOV      r0,#0
+        0x0000bfe8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000bfec:    e3e00001    ....    MVN      r0,#1
+        0x0000bff0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000bff4:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_bottom
+    $a
+        0x0000bff8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000bffc:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000c000:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c004:    e24dd010    ..M.    SUB      r13,r13,#0x10
+        0x0000c008:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000c00c:    e1a07000    .p..    MOV      r7,r0
+        0x0000c010:    4a00004b    K..J    BMI      {pc} + 0x134  ; 0xc144
+        0x0000c014:    e59f0134    4...    LDR      r0,[pc,#308]  ; [gdisp = 0xc150] = 0
+        0x0000c018:    e1a02487    .$..    LSL      r2,r7,#9
+        0x0000c01c:    e0803002    .0..    ADD      r3,r0,r2
+        0x0000c020:    e593608c    .`..    LDR      r6,[r3,#0x8c]
+        0x0000c024:    e1510006    ..Q.    CMP      r1,r6
+        0x0000c028:    2a000045    E..*    BCS      {pc} + 0x11c  ; 0xc144
+        0x0000c02c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000c030:    e0232193    .!#.    MLA      r3,r3,r1,r2
+        0x0000c034:    e0803003    .0..    ADD      r3,r0,r3
+        0x0000c038:    e5933090    .0..    LDR      r3,[r3,#0x90]
+        0x0000c03c:    e3130002    ....    TST      r3,#2
+        0x0000c040:    10803002    .0..    ADDNE    r3,r0,r2
+        0x0000c044:    03e00003    ....    MVNEQ    r0,#3
+        0x0000c048:    13a00000    ....    MOVNE    r0,#0
+        0x0000c04c:    1283c0a1    ....    ADDNE    r12,r3,#0xa1
+        0x0000c050:    1a000004    ....    BNE      {pc} + 0x18  ; 0xc068
+        0x0000c054:    ea00003b    ;...    B        {pc} + 0xf4  ; 0xc148
+        0x0000c058:    e55c2060    ` \.    LDRB     r2,[r12,#-0x60]
+        0x0000c05c:    e24b302c    ,0K.    SUB      r3,r11,#0x2c
+        0x0000c060:    e7832000    . ..    STR      r2,[r3,r0]
+        0x0000c064:    e2800004    ....    ADD      r0,r0,#4
+        0x0000c068:    e1500106    ..P.    CMP      r0,r6,LSL #2
+        0x0000c06c:    e28cc060    `...    ADD      r12,r12,#0x60
+        0x0000c070:    1afffff8    ....    BNE      {pc} - 0x18  ; 0xc058
+        0x0000c074:    e24b301c    .0K.    SUB      r3,r11,#0x1c
+        0x0000c078:    e3a05001    .P..    MOV      r5,#1
+        0x0000c07c:    e0832101    .!..    ADD      r2,r3,r1,LSL #2
+        0x0000c080:    e3a03000    .0..    MOV      r3,#0
+        0x0000c084:    e1a04003    .@..    MOV      r4,r3
+        0x0000c088:    e5023010    .0..    STR      r3,[r2,#-0x10]
+        0x0000c08c:    ea00000e    ....    B        {pc} + 0x40  ; 0xc0cc
+        0x0000c090:    e59c2040    @ ..    LDR      r2,[r12,#0x40]
+        0x0000c094:    e0503001    .0P.    SUBS     r3,r0,r1
+        0x0000c098:    13a03001    .0..    MOVNE    r3,#1
+        0x0000c09c:    e01330a2    .0..    ANDS     r3,r3,r2,LSR #1
+        0x0000c0a0:    0a000004    ....    BEQ      {pc} + 0x18  ; 0xc0b8
+        0x0000c0a4:    e5dc3051    Q0..    LDRB     r3,[r12,#0x51]
+        0x0000c0a8:    e1530004    ..S.    CMP      r3,r4
+        0x0000c0ac:    024b302c    ,0K.    SUBEQ    r3,r11,#0x2c
+        0x0000c0b0:    07835100    .Q..    STREQ    r5,[r3,r0,LSL #2]
+        0x0000c0b4:    02855001    .P..    ADDEQ    r5,r5,#1
+        0x0000c0b8:    e2800001    ....    ADD      r0,r0,#1
+        0x0000c0bc:    e28cc060    `...    ADD      r12,r12,#0x60
+        0x0000c0c0:    e1500006    ..P.    CMP      r0,r6
+        0x0000c0c4:    3afffff1    ...:    BCC      {pc} - 0x34  ; 0xc090
+        0x0000c0c8:    e2844001    .@..    ADD      r4,r4,#1
+        0x0000c0cc:    e1540006    ..T.    CMP      r4,r6
+        0x0000c0d0:    e59f2078    x ..    LDR      r2,[pc,#120]  ; [gdisp = 0xc150] = 0
+        0x0000c0d4:    e1a03487    .4..    LSL      r3,r7,#9
+        0x0000c0d8:    22833050    P0."    ADDCS    r3,r3,#0x50
+        0x0000c0dc:    23a05000    .P.#    MOVCS    r5,#0
+        0x0000c0e0:    20826003    .`.     ADDCS    r6,r2,r3
+        0x0000c0e4:    2a00000f    ...*    BCS      {pc} + 0x44  ; 0xc128
+        0x0000c0e8:    e2833050    P0..    ADD      r3,r3,#0x50
+        0x0000c0ec:    e3a00000    ....    MOV      r0,#0
+        0x0000c0f0:    e082c003    ....    ADD      r12,r2,r3
+        0x0000c0f4:    eafffff1    ....    B        {pc} - 0x34  ; 0xc0c0
+        0x0000c0f8:    e5963040    @0..    LDR      r3,[r6,#0x40]
+        0x0000c0fc:    e3130002    ....    TST      r3,#2
+        0x0000c100:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xc120
+        0x0000c104:    e24b302c    ,0K.    SUB      r3,r11,#0x2c
+        0x0000c108:    e6ef1075    u...    UXTB     r1,r5
+        0x0000c10c:    e1a00007    ....    MOV      r0,r7
+        0x0000c110:    e7d34105    .A..    LDRB     r4,[r3,r5,LSL #2]
+        0x0000c114:    e1a02004    . ..    MOV      r2,r4
+        0x0000c118:    ebfffffe    ....    BL       DE_BE_Layer_Set_Prio  ; 0x6880 Section #1
+        0x0000c11c:    e5c64051    Q@..    STRB     r4,[r6,#0x51]
+        0x0000c120:    e2855001    .P..    ADD      r5,r5,#1
+        0x0000c124:    e2866060    ``..    ADD      r6,r6,#0x60
+        0x0000c128:    e59f3020     0..    LDR      r3,[pc,#32]   ; [gdisp = 0xc150] = 0
+        0x0000c12c:    e0833487    .4..    ADD      r3,r3,r7,LSL #9
+        0x0000c130:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000c134:    e1550003    ..U.    CMP      r5,r3
+        0x0000c138:    3affffee    ...:    BCC      {pc} - 0x40  ; 0xc0f8
+        0x0000c13c:    e3a00000    ....    MOV      r0,#0
+        0x0000c140:    ea000000    ....    B        {pc} + 0x8  ; 0xc148
+        0x0000c144:    e3e00001    ....    MVN      r0,#1
+        0x0000c148:    e24bd01c    ..K.    SUB      r13,r11,#0x1c
+        0x0000c14c:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000c150:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_top
+    $a
+        0x0000c154:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c158:    e92dd9f0    ..-.    PUSH     {r4-r8,r11,r12,r14,pc}
+        0x0000c15c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c160:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x0000c164:    e2517064    dpQ.    SUBS     r7,r1,#0x64
+        0x0000c168:    e1a08000    ....    MOV      r8,r0
+        0x0000c16c:    4a00004b    K..J    BMI      {pc} + 0x134  ; 0xc2a0
+        0x0000c170:    e59f0134    4...    LDR      r0,[pc,#308]  ; [gdisp = 0xc2ac] = 0
+        0x0000c174:    e1a02488    .$..    LSL      r2,r8,#9
+        0x0000c178:    e0803002    .0..    ADD      r3,r0,r2
+        0x0000c17c:    e593108c    ....    LDR      r1,[r3,#0x8c]
+        0x0000c180:    e1570001    ..W.    CMP      r7,r1
+        0x0000c184:    2a000045    E..*    BCS      {pc} + 0x11c  ; 0xc2a0
+        0x0000c188:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000c18c:    e0232793    .'#.    MLA      r3,r3,r7,r2
+        0x0000c190:    e0803003    .0..    ADD      r3,r0,r3
+        0x0000c194:    e5933090    .0..    LDR      r3,[r3,#0x90]
+        0x0000c198:    e3130002    ....    TST      r3,#2
+        0x0000c19c:    03e00003    ....    MVNEQ    r0,#3
+        0x0000c1a0:    0a00003f    ?...    BEQ      {pc} + 0x104  ; 0xc2a4
+        0x0000c1a4:    e0803002    .0..    ADD      r3,r0,r2
+        0x0000c1a8:    e2414001    .@A.    SUB      r4,r1,#1
+        0x0000c1ac:    e283c0a1    ....    ADD      r12,r3,#0xa1
+        0x0000c1b0:    e3a00000    ....    MOV      r0,#0
+        0x0000c1b4:    ea000003    ....    B        {pc} + 0x14  ; 0xc1c8
+        0x0000c1b8:    e55c2060    ` \.    LDRB     r2,[r12,#-0x60]
+        0x0000c1bc:    e24b3034    40K.    SUB      r3,r11,#0x34
+        0x0000c1c0:    e7832000    . ..    STR      r2,[r3,r0]
+        0x0000c1c4:    e2800004    ....    ADD      r0,r0,#4
+        0x0000c1c8:    e1500101    ..P.    CMP      r0,r1,LSL #2
+        0x0000c1cc:    e28cc060    `...    ADD      r12,r12,#0x60
+        0x0000c1d0:    1afffff8    ....    BNE      {pc} - 0x18  ; 0xc1b8
+        0x0000c1d4:    e24b2024    $ K.    SUB      r2,r11,#0x24
+        0x0000c1d8:    e1a05004    .P..    MOV      r5,r4
+        0x0000c1dc:    e0823107    .1..    ADD      r3,r2,r7,LSL #2
+        0x0000c1e0:    e2446001    .`D.    SUB      r6,r4,#1
+        0x0000c1e4:    e5034010    .@..    STR      r4,[r3,#-0x10]
+        0x0000c1e8:    ea00000e    ....    B        {pc} + 0x40  ; 0xc228
+        0x0000c1ec:    e59c2040    @ ..    LDR      r2,[r12,#0x40]
+        0x0000c1f0:    e0503007    .0P.    SUBS     r3,r0,r7
+        0x0000c1f4:    13a03001    .0..    MOVNE    r3,#1
+        0x0000c1f8:    e01330a2    .0..    ANDS     r3,r3,r2,LSR #1
+        0x0000c1fc:    0a000004    ....    BEQ      {pc} + 0x18  ; 0xc214
+        0x0000c200:    e5dc3051    Q0..    LDRB     r3,[r12,#0x51]
+        0x0000c204:    e1530005    ..S.    CMP      r3,r5
+        0x0000c208:    024b3034    40K.    SUBEQ    r3,r11,#0x34
+        0x0000c20c:    07836100    .a..    STREQ    r6,[r3,r0,LSL #2]
+        0x0000c210:    02466001    .`F.    SUBEQ    r6,r6,#1
+        0x0000c214:    e2800001    ....    ADD      r0,r0,#1
+        0x0000c218:    e28cc060    `...    ADD      r12,r12,#0x60
+        0x0000c21c:    e1500001    ..P.    CMP      r0,r1
+        0x0000c220:    3afffff1    ...:    BCC      {pc} - 0x34  ; 0xc1ec
+        0x0000c224:    e2455001    .PE.    SUB      r5,r5,#1
+        0x0000c228:    e3550000    ..U.    CMP      r5,#0
+        0x0000c22c:    e59f2078    x ..    LDR      r2,[pc,#120]  ; [gdisp = 0xc2ac] = 0
+        0x0000c230:    e1a03488    .4..    LSL      r3,r8,#9
+        0x0000c234:    b2833050    P0..    ADDLT    r3,r3,#0x50
+        0x0000c238:    b3a05000    .P..    MOVLT    r5,#0
+        0x0000c23c:    b0826003    .`..    ADDLT    r6,r2,r3
+        0x0000c240:    ba00000f    ....    BLT      {pc} + 0x44  ; 0xc284
+        0x0000c244:    e2833050    P0..    ADD      r3,r3,#0x50
+        0x0000c248:    e3a00000    ....    MOV      r0,#0
+        0x0000c24c:    e082c003    ....    ADD      r12,r2,r3
+        0x0000c250:    eafffff1    ....    B        {pc} - 0x34  ; 0xc21c
+        0x0000c254:    e5963040    @0..    LDR      r3,[r6,#0x40]
+        0x0000c258:    e3130002    ....    TST      r3,#2
+        0x0000c25c:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xc27c
+        0x0000c260:    e24b3034    40K.    SUB      r3,r11,#0x34
+        0x0000c264:    e6ef1075    u...    UXTB     r1,r5
+        0x0000c268:    e1a00008    ....    MOV      r0,r8
+        0x0000c26c:    e7d34105    .A..    LDRB     r4,[r3,r5,LSL #2]
+        0x0000c270:    e1a02004    . ..    MOV      r2,r4
+        0x0000c274:    ebfffffe    ....    BL       DE_BE_Layer_Set_Prio  ; 0x6880 Section #1
+        0x0000c278:    e5c64051    Q@..    STRB     r4,[r6,#0x51]
+        0x0000c27c:    e2855001    .P..    ADD      r5,r5,#1
+        0x0000c280:    e2866060    ``..    ADD      r6,r6,#0x60
+        0x0000c284:    e59f3020     0..    LDR      r3,[pc,#32]   ; [gdisp = 0xc2ac] = 0
+        0x0000c288:    e0833488    .4..    ADD      r3,r3,r8,LSL #9
+        0x0000c28c:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000c290:    e1550003    ..U.    CMP      r5,r3
+        0x0000c294:    3affffee    ...:    BCC      {pc} - 0x40  ; 0xc254
+        0x0000c298:    e3a00000    ....    MOV      r0,#0
+        0x0000c29c:    ea000000    ....    B        {pc} + 0x8  ; 0xc2a4
+        0x0000c2a0:    e3e00001    ....    MVN      r0,#1
+        0x0000c2a4:    e24bd020     .K.    SUB      r13,r11,#0x20
+        0x0000c2a8:    e89da9f0    ....    LDM      r13,{r4-r8,r11,r13,pc}
+    $d
+        0x0000c2ac:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_get_bk_color
+    $a
+        0x0000c2b0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c2b4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c2b8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c2bc:    e251c000    ..Q.    SUBS     r12,r1,#0
+        0x0000c2c0:    1a000003    ....    BNE      {pc} + 0x14  ; 0xc2d4
+        0x0000c2c4:    e59f0038    8...    LDR      r0,[pc,#56]   ; [([Section 10] + 1622) = 0xc304]  = 0x656
+        0x0000c2c8:    e3e04001    .@..    MVN      r4,#1
+        0x0000c2cc:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000c2d0:    ea000009    ....    B        {pc} + 0x2c  ; 0xc2fc
+        0x0000c2d4:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [gdisp = 0xc308] = 0
+        0x0000c2d8:    e3a04000    .@..    MOV      r4,#0
+        0x0000c2dc:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000c2e0:    e2833060    `0..    ADD      r3,r3,#0x60
+        0x0000c2e4:    e5d32006    . ..    LDRB     r2,[r3,#6]
+        0x0000c2e8:    e5d31007    ....    LDRB     r1,[r3,#7]
+        0x0000c2ec:    e5d33005    .0..    LDRB     r3,[r3,#5]
+        0x0000c2f0:    e5cc2002    . ..    STRB     r2,[r12,#2]
+        0x0000c2f4:    e5cc1003    ....    STRB     r1,[r12,#3]
+        0x0000c2f8:    e5cc3001    .0..    STRB     r3,[r12,#1]
+        0x0000c2fc:    e1a00004    ....    MOV      r0,r4
+        0x0000c300:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000c304:    00000656    V...    DCD    1622 ; [Section 10]
+        0x0000c308:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_get_palette_table
+    $a
+        0x0000c30c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c310:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c314:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c318:    e3510000    ..Q.    CMP      r1,#0
+        0x0000c31c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xc32c
+        0x0000c320:    e083c002    ....    ADD      r12,r3,r2
+        0x0000c324:    e35c0b01    ..\.    CMP      r12,#0x400
+        0x0000c328:    9a000003    ....    BLS      {pc} + 0x14  ; 0xc33c
+        0x0000c32c:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1661) = 0xc348]  = 0x67d
+        0x0000c330:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000c334:    e3e00000    ....    MVN      r0,#0
+        0x0000c338:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000c33c:    ebfffffe    ....    BL       DE_BE_Get_SystemPalette  ; 0x3580 Section #1
+        0x0000c340:    e3a00000    ....    MOV      r0,#0
+        0x0000c344:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c348:    0000067d    }...    DCD    1661 ; [Section 10]
+    BSP_disp_set_palette_table
+    $a
+        0x0000c34c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c350:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c354:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c358:    e3510000    ..Q.    CMP      r1,#0
+        0x0000c35c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xc36c
+        0x0000c360:    e083c002    ....    ADD      r12,r3,r2
+        0x0000c364:    e35c0b01    ..\.    CMP      r12,#0x400
+        0x0000c368:    9a000003    ....    BLS      {pc} + 0x14  ; 0xc37c
+        0x0000c36c:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1705) = 0xc388]  = 0x6a9
+        0x0000c370:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000c374:    e3e00000    ....    MVN      r0,#0
+        0x0000c378:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000c37c:    ebfffffe    ....    BL       DE_BE_Set_SystemPalette  ; 0x3528 Section #1
+        0x0000c380:    e3a00000    ....    MOV      r0,#0
+        0x0000c384:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c388:    000006a9    ....    DCD    1705 ; [Section 10]
+    BSP_disp_get_color_key
+    $a
+        0x0000c38c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c390:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000c394:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c398:    e59f3020     0..    LDR      r3,[pc,#32]   ; [(gdisp + 104) = 0xc3c0]  = 0x68
+        0x0000c39c:    e1a0c001    ....    MOV      r12,r1
+        0x0000c3a0:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000c3a4:    e1a04003    .@..    MOV      r4,r3
+        0x0000c3a8:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x0000c3ac:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x0000c3b0:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000c3b4:    e3a00000    ....    MOV      r0,#0
+        0x0000c3b8:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x0000c3bc:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000c3c0:    00000068    h...    DCD    104 ; gdisp
+    BSP_disp_set_color_key
+    $a
+        0x0000c3c4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c3c8:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c3cc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c3d0:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x0000c3d4:    e2514000    .@Q.    SUBS     r4,r1,#0
+        0x0000c3d8:    e1a05000    .P..    MOV      r5,r0
+        0x0000c3dc:    0a000008    ....    BEQ      {pc} + 0x28  ; 0xc404
+        0x0000c3e0:    e5943008    .0..    LDR      r3,[r4,#8]
+        0x0000c3e4:    e3530003    ..S.    CMP      r3,#3
+        0x0000c3e8:    8a000005    ....    BHI      {pc} + 0x1c  ; 0xc404
+        0x0000c3ec:    e594300c    .0..    LDR      r3,[r4,#0xc]
+        0x0000c3f0:    e3530003    ..S.    CMP      r3,#3
+        0x0000c3f4:    8a000002    ....    BHI      {pc} + 0x10  ; 0xc404
+        0x0000c3f8:    e5943010    .0..    LDR      r3,[r4,#0x10]
+        0x0000c3fc:    e3530003    ..S.    CMP      r3,#3
+        0x0000c400:    9a000003    ....    BLS      {pc} + 0x14  ; 0xc414
+        0x0000c404:    e59f004c    L...    LDR      r0,[pc,#76]   ; [([Section 10] + 1749) = 0xc458]  = 0x6d5
+        0x0000c408:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000c40c:    e3e00001    ....    MVN      r0,#1
+        0x0000c410:    ea00000e    ....    B        {pc} + 0x40  ; 0xc450
+        0x0000c414:    e1a0e004    ....    MOV      r14,r4
+        0x0000c418:    e59fc03c    <...    LDR      r12,[pc,#60]   ; [(gdisp + 104) = 0xc45c]  = 0x68
+        0x0000c41c:    e8be000f    ....    LDM      r14!,{r0-r3}
+        0x0000c420:    e08cc485    ....    ADD      r12,r12,r5,LSL #9
+        0x0000c424:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x0000c428:    e59e3000    .0..    LDR      r3,[r14,#0]
+        0x0000c42c:    e1a00005    ....    MOV      r0,r5
+        0x0000c430:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x0000c434:    e594300c    .0..    LDR      r3,[r4,#0xc]
+        0x0000c438:    e58d3000    .0..    STR      r3,[r13,#0]
+        0x0000c43c:    e5943010    .0..    LDR      r3,[r4,#0x10]
+        0x0000c440:    e58d3004    .0..    STR      r3,[r13,#4]
+        0x0000c444:    e894000e    ....    LDM      r4,{r1-r3}
+        0x0000c448:    ebfffffe    ....    BL       DE_BE_Set_ColorKey  ; 0x36c8 Section #1
+        0x0000c44c:    e3a00000    ....    MOV      r0,#0
+        0x0000c450:    e24bd014    ..K.    SUB      r13,r11,#0x14
+        0x0000c454:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000c458:    000006d5    ....    DCD    1749 ; [Section 10]
+        0x0000c45c:    00000068    h...    DCD    104 ; gdisp
+    BSP_disp_set_bk_color
+    $a
+        0x0000c460:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c464:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c468:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c46c:    e3510000    ..Q.    CMP      r1,#0
+        0x0000c470:    e1a02000    . ..    MOV      r2,r0
+        0x0000c474:    03e00001    ....    MVNEQ    r0,#1
+        0x0000c478:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x0000c47c:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [gdisp = 0xc4b0] = 0
+        0x0000c480:    e5d1c002    ....    LDRB     r12,[r1,#2]
+        0x0000c484:    e0833482    .4..    ADD      r3,r3,r2,LSL #9
+        0x0000c488:    e5d12003    . ..    LDRB     r2,[r1,#3]
+        0x0000c48c:    e5d11001    ....    LDRB     r1,[r1,#1]
+        0x0000c490:    e2833060    `0..    ADD      r3,r3,#0x60
+        0x0000c494:    e5c32007    . ..    STRB     r2,[r3,#7]
+        0x0000c498:    e5c31005    ....    STRB     r1,[r3,#5]
+        0x0000c49c:    e5c3c006    ....    STRB     r12,[r3,#6]
+        0x0000c4a0:    e5931004    ....    LDR      r1,[r3,#4]
+        0x0000c4a4:    ebfffffe    ....    BL       DE_BE_Set_BkColor  ; 0x3684 Section #1
+        0x0000c4a8:    e3a00000    ....    MOV      r0,#0
+        0x0000c4ac:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c4b0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_get_bright
+    $a
+        0x0000c4b4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c4b8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c4bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c4c0:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0xc4d0] = 0
+        0x0000c4c4:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000c4c8:    e593007c    |...    LDR      r0,[r3,#0x7c]
+        0x0000c4cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c4d0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_get_contrast
+    $a
+        0x0000c4d4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c4d8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c4dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c4e0:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0xc4f0] = 0
+        0x0000c4e4:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000c4e8:    e5930080    ....    LDR      r0,[r3,#0x80]
+        0x0000c4ec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c4f0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_get_saturation
+    $a
+        0x0000c4f4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c4f8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c4fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c500:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0xc510] = 0
+        0x0000c504:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000c508:    e5930084    ....    LDR      r0,[r3,#0x84]
+        0x0000c50c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c510:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_get_enhance_enable
+    $a
+        0x0000c514:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c518:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c51c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c520:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0xc530] = 0
+        0x0000c524:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000c528:    e1d308d8    ....    LDRSB    r0,[r3,#0x88]
+        0x0000c52c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c530:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_set_saturation
+    $a
+        0x0000c534:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c538:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c53c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c540:    e1a02100    .!..    LSL      r2,r0,#2
+        0x0000c544:    e59fc02c    ,...    LDR      r12,[pc,#44]   ; [gdisp = 0xc578] = 0
+        0x0000c548:    e2822001    . ..    ADD      r2,r2,#1
+        0x0000c54c:    e1a04001    .@..    MOV      r4,r1
+        0x0000c550:    e08c1480    ....    ADD      r1,r12,r0,LSL #9
+        0x0000c554:    e1a03004    .0..    MOV      r3,r4
+        0x0000c558:    e08ce382    ....    ADD      r14,r12,r2,LSL #7
+        0x0000c55c:    e6ef0070    p...    UXTB     r0,r0
+        0x0000c560:    e79c2382    .#..    LDR      r2,[r12,r2,LSL #7]
+        0x0000c564:    e591107c    |...    LDR      r1,[r1,#0x7c]
+        0x0000c568:    e58e4004    .@..    STR      r4,[r14,#4]
+        0x0000c56c:    ebfffffe    ....    BL       DE_BE_Set_Enhance  ; 0x3a0c Section #1
+        0x0000c570:    e3a00000    ....    MOV      r0,#0
+        0x0000c574:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000c578:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_set_contrast
+    $a
+        0x0000c57c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c580:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c584:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c588:    e1a03100    .1..    LSL      r3,r0,#2
+        0x0000c58c:    e59fc02c    ,...    LDR      r12,[pc,#44]   ; [gdisp = 0xc5c0] = 0
+        0x0000c590:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000c594:    e1a04001    .@..    MOV      r4,r1
+        0x0000c598:    e08c1480    ....    ADD      r1,r12,r0,LSL #9
+        0x0000c59c:    e1a02004    . ..    MOV      r2,r4
+        0x0000c5a0:    e08ce383    ....    ADD      r14,r12,r3,LSL #7
+        0x0000c5a4:    e78c4383    .C..    STR      r4,[r12,r3,LSL #7]
+        0x0000c5a8:    e591107c    |...    LDR      r1,[r1,#0x7c]
+        0x0000c5ac:    e6ef0070    p...    UXTB     r0,r0
+        0x0000c5b0:    e59e3004    .0..    LDR      r3,[r14,#4]
+        0x0000c5b4:    ebfffffe    ....    BL       DE_BE_Set_Enhance  ; 0x3a0c Section #1
+        0x0000c5b8:    e3a00000    ....    MOV      r0,#0
+        0x0000c5bc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000c5c0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_set_bright
+    $a
+        0x0000c5c4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c5c8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c5cc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c5d0:    e1a03100    .1..    LSL      r3,r0,#2
+        0x0000c5d4:    e59f2028    ( ..    LDR      r2,[pc,#40]   ; [gdisp = 0xc604] = 0
+        0x0000c5d8:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000c5dc:    e1a0c000    ....    MOV      r12,r0
+        0x0000c5e0:    e082c48c    ....    ADD      r12,r2,r12,LSL #9
+        0x0000c5e4:    e6ef0070    p...    UXTB     r0,r0
+        0x0000c5e8:    e082e383    ....    ADD      r14,r2,r3,LSL #7
+        0x0000c5ec:    e7922383    .#..    LDR      r2,[r2,r3,LSL #7]
+        0x0000c5f0:    e58c107c    |...    STR      r1,[r12,#0x7c]
+        0x0000c5f4:    e59e3004    .0..    LDR      r3,[r14,#4]
+        0x0000c5f8:    ebfffffe    ....    BL       DE_BE_Set_Enhance  ; 0x3a0c Section #1
+        0x0000c5fc:    e3a00000    ....    MOV      r0,#0
+        0x0000c600:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000c604:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_enhance_enable
+    $a
+        0x0000c608:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c60c:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000c610:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c614:    e1a03100    .1..    LSL      r3,r0,#2
+        0x0000c618:    e59f203c    < ..    LDR      r2,[pc,#60]   ; [gdisp = 0xc65c] = 0
+        0x0000c61c:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000c620:    e1a06001    .`..    MOV      r6,r1
+        0x0000c624:    e0825480    .T..    ADD      r5,r2,r0,LSL #9
+        0x0000c628:    e1a04000    .@..    MOV      r4,r0
+        0x0000c62c:    e082c383    ....    ADD      r12,r2,r3,LSL #7
+        0x0000c630:    e6ef0070    p...    UXTB     r0,r0
+        0x0000c634:    e7922383    .#..    LDR      r2,[r2,r3,LSL #7]
+        0x0000c638:    e595107c    |...    LDR      r1,[r5,#0x7c]
+        0x0000c63c:    e59c3004    .0..    LDR      r3,[r12,#4]
+        0x0000c640:    ebfffffe    ....    BL       DE_BE_Set_Enhance  ; 0x3a0c Section #1
+        0x0000c644:    e1a00004    ....    MOV      r0,r4
+        0x0000c648:    e1a01006    ....    MOV      r1,r6
+        0x0000c64c:    ebfffffe    ....    BL       DE_BE_enhance_enable  ; 0x3cb4 Section #1
+        0x0000c650:    e5c56088    .`..    STRB     r6,[r5,#0x88]
+        0x0000c654:    e3a00000    ....    MOV      r0,#0
+        0x0000c658:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000c65c:    00000000    ....    DCD    0 ; gdisp
+    Image_close
+    $a
+        0x0000c660:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c664:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c668:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c66c:    e1a04000    .@..    MOV      r4,r0
+        0x0000c670:    ebfffffe    ....    BL       DE_BE_Disable  ; 0x3614 Section #1
+        0x0000c674:    e59f2014    . ..    LDR      r2,[pc,#20]   ; [gdisp = 0xc690] = 0
+        0x0000c678:    e3a00000    ....    MOV      r0,#0
+        0x0000c67c:    e0822484    .$..    ADD      r2,r2,r4,LSL #9
+        0x0000c680:    e5923050    P0..    LDR      r3,[r2,#0x50]
+        0x0000c684:    e3c33004    .0..    BIC      r3,r3,#4
+        0x0000c688:    e5823050    P0..    STR      r3,[r2,#0x50]
+        0x0000c68c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000c690:    00000000    ....    DCD    0 ; gdisp
+    Image_open
+    $a
+        0x0000c694:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c698:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c69c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c6a0:    ebfffffe    ....    BL       DE_BE_Enable  ; 0x35d4 Section #1
+        0x0000c6a4:    e3a00000    ....    MOV      r0,#0
+        0x0000c6a8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    Image_exit
+        0x0000c6ac:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c6b0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c6b4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c6b8:    e3a01040    @...    MOV      r1,#0x40
+        0x0000c6bc:    e1a04000    .@..    MOV      r4,r0
+        0x0000c6c0:    e6ef0070    p...    UXTB     r0,r0
+        0x0000c6c4:    ebfffffe    ....    BL       DE_BE_DisableINT  ; 0x3da4 Section #1
+        0x0000c6c8:    e1a00004    ....    MOV      r0,r4
+        0x0000c6cc:    ebfffffe    ....    BL       BSP_disp_sprite_exit  ; 0x12324 Section #1
+        0x0000c6d0:    e1a00004    ....    MOV      r0,r4
+        0x0000c6d4:    ebfffffe    ....    BL       image_clk_exit  ; 0xba68 Section #1
+        0x0000c6d8:    e3a00000    ....    MOV      r0,#0
+        0x0000c6dc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    Image_init
+        0x0000c6e0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c6e4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c6e8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c6ec:    e1a04000    .@..    MOV      r4,r0
+        0x0000c6f0:    ebfffffe    ....    BL       image_clk_init  ; 0xbb40 Section #1
+        0x0000c6f4:    e1a00004    ....    MOV      r0,r4
+        0x0000c6f8:    ebfffffe    ....    BL       image_clk_on  ; 0xb050 Section #1
+        0x0000c6fc:    e1a00004    ....    MOV      r0,r4
+        0x0000c700:    ebfffffe    ....    BL       DE_BE_Reg_Init  ; 0x3e14 Section #1
+        0x0000c704:    e1a00004    ....    MOV      r0,r4
+        0x0000c708:    ebfffffe    ....    BL       BSP_disp_sprite_init  ; 0x12858 Section #1
+        0x0000c70c:    e1a00004    ....    MOV      r0,r4
+        0x0000c710:    ebfffffe    ....    BL       Image_open  ; 0xc694 Section #1
+        0x0000c714:    e3a00000    ....    MOV      r0,#0
+        0x0000c718:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    BSP_disp_open
+    $a
+        0x0000c71c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c720:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000c724:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c728:    e3a00000    ....    MOV      r0,#0
+        0x0000c72c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_close
+        0x0000c730:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c734:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000c738:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c73c:    e59f50a4    .P..    LDR      r5,[pc,#164]  ; [([Section 17] + 17116) = 0xc7e8]  = 0x42dc
+        0x0000c740:    e3a04000    .@..    MOV      r4,#0
+        0x0000c744:    e1a06005    .`..    MOV      r6,r5
+        0x0000c748:    e1a00004    ....    MOV      r0,r4
+        0x0000c74c:    ebfffffe    ....    BL       Image_close  ; 0xc660 Section #1
+        0x0000c750:    e5963450    P4..    LDR      r3,[r6,#0x450]
+        0x0000c754:    e3130c02    ....    TST      r3,#0x200
+        0x0000c758:    0a000001    ....    BEQ      {pc} + 0xc  ; 0xc764
+        0x0000c75c:    e1a00004    ....    MOV      r0,r4
+        0x0000c760:    ebfffffe    ....    BL       Scaler_close  ; 0x10c6c Section #1
+        0x0000c764:    e5953054    T0..    LDR      r3,[r5,#0x54]
+        0x0000c768:    e3130080    ....    TST      r3,#0x80
+        0x0000c76c:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xc77c
+        0x0000c770:    e1a00004    ....    MOV      r0,r4
+        0x0000c774:    ebfffffe    ....    BL       TCON0_close  ; 0x7250 Section #1
+        0x0000c778:    ea000003    ....    B        {pc} + 0x14  ; 0xc78c
+        0x0000c77c:    e3130c01    ....    TST      r3,#0x100
+        0x0000c780:    0a000004    ....    BEQ      {pc} + 0x18  ; 0xc798
+        0x0000c784:    e1a00004    ....    MOV      r0,r4
+        0x0000c788:    ebfffffe    ....    BL       TCON1_close  ; 0x77e0 Section #1
+        0x0000c78c:    e1a00004    ....    MOV      r0,r4
+        0x0000c790:    ebfffffe    ....    BL       LCDC_close  ; 0x6d1c Section #1
+        0x0000c794:    ea000004    ....    B        {pc} + 0x18  ; 0xc7ac
+        0x0000c798:    e5953050    P0..    LDR      r3,[r5,#0x50]
+        0x0000c79c:    e313080a    ....    TST      r3,#0xa0000
+        0x0000c7a0:    0a000001    ....    BEQ      {pc} + 0xc  ; 0xc7ac
+        0x0000c7a4:    e1a00004    ....    MOV      r0,r4
+        0x0000c7a8:    ebfffffe    ....    BL       TVE_close  ; 0x8f0c Section #1
+        0x0000c7ac:    e2844001    .@..    ADD      r4,r4,#1
+        0x0000c7b0:    e2866094    .`..    ADD      r6,r6,#0x94
+        0x0000c7b4:    e3540002    ..T.    CMP      r4,#2
+        0x0000c7b8:    e2855c02    .\..    ADD      r5,r5,#0x200
+        0x0000c7bc:    1affffe1    ....    BNE      {pc} - 0x74  ; 0xc748
+        0x0000c7c0:    e59f3020     0..    LDR      r3,[pc,#32]   ; [([Section 17] + 17116) = 0xc7e8]  = 0x42dc
+        0x0000c7c4:    e3a00000    ....    MOV      r0,#0
+        0x0000c7c8:    e5932450    P$..    LDR      r2,[r3,#0x450]
+        0x0000c7cc:    e5931454    T...    LDR      r1,[r3,#0x454]
+        0x0000c7d0:    e3c2280f    .(..    BIC      r2,r2,#0xf0000
+        0x0000c7d4:    e3c22004    . ..    BIC      r2,r2,#4
+        0x0000c7d8:    e3c11d06    ....    BIC      r1,r1,#0x180
+        0x0000c7dc:    e5832450    P$..    STR      r2,[r3,#0x450]
+        0x0000c7e0:    e5831454    T...    STR      r1,[r3,#0x454]
+        0x0000c7e4:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000c7e8:    000042dc    .B..    DCD    17116 ; [Section 17]
+    BSP_disp_exit
+    $a
+        0x0000c7ec:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c7f0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c7f4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c7f8:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x0000c7fc:    1a000011    ....    BNE      {pc} + 0x4c  ; 0xc848
+        0x0000c800:    ebfffffe    ....    BL       BSP_disp_close  ; 0xc730 Section #1
+        0x0000c804:    e1a00004    ....    MOV      r0,r4
+        0x0000c808:    ebfffffe    ....    BL       Scaler_Exit  ; 0x10e8c Section #1
+        0x0000c80c:    e3a00001    ....    MOV      r0,#1
+        0x0000c810:    ebfffffe    ....    BL       Scaler_Exit  ; 0x10e8c Section #1
+        0x0000c814:    e1a00004    ....    MOV      r0,r4
+        0x0000c818:    ebfffffe    ....    BL       Image_exit  ; 0xc6ac Section #1
+        0x0000c81c:    e3a00001    ....    MOV      r0,#1
+        0x0000c820:    ebfffffe    ....    BL       Image_exit  ; 0xc6ac Section #1
+        0x0000c824:    e1a00004    ....    MOV      r0,r4
+        0x0000c828:    ebfffffe    ....    BL       Disp_lcdc_exit  ; 0xfa88 Section #1
+        0x0000c82c:    e3a00001    ....    MOV      r0,#1
+        0x0000c830:    ebfffffe    ....    BL       Disp_lcdc_exit  ; 0xfa88 Section #1
+        0x0000c834:    e1a00004    ....    MOV      r0,r4
+        0x0000c838:    ebfffffe    ....    BL       Disp_TVEC_Exit  ; 0x12fb0 Section #1
+        0x0000c83c:    e3a00001    ....    MOV      r0,#1
+        0x0000c840:    ebfffffe    ....    BL       Disp_TVEC_Exit  ; 0x12fb0 Section #1
+        0x0000c844:    ea000019    ....    B        {pc} + 0x6c  ; 0xc8b0
+        0x0000c848:    e3540001    ..T.    CMP      r4,#1
+        0x0000c84c:    1a000017    ....    BNE      {pc} + 0x64  ; 0xc8b0
+        0x0000c850:    e3a0002c    ,...    MOV      r0,#0x2c
+        0x0000c854:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x0000c858:    e59f1058    X...    LDR      r1,[pc,#88]   ; [Disp_lcdc_event_proc = 0xc8b8] = 0
+        0x0000c85c:    e3a02000    . ..    MOV      r2,#0
+        0x0000c860:    e3a0002c    ,...    MOV      r0,#0x2c
+        0x0000c864:    ebfffffe    ....    BL       OSAL_UnRegISR  ; 0x31a8 Section #1
+        0x0000c868:    e3a00036    6...    MOV      r0,#0x36
+        0x0000c86c:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x0000c870:    e59f1040    @...    LDR      r1,[pc,#64]   ; [Disp_lcdc_event_proc = 0xc8b8] = 0
+        0x0000c874:    e3a02000    . ..    MOV      r2,#0
+        0x0000c878:    e3a00036    6...    MOV      r0,#0x36
+        0x0000c87c:    ebfffffe    ....    BL       OSAL_UnRegISR  ; 0x31a8 Section #1
+        0x0000c880:    e3a0002d    -...    MOV      r0,#0x2d
+        0x0000c884:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x0000c888:    e59f102c    ,...    LDR      r1,[pc,#44]   ; [Scaler_event_proc = 0xc8bc] = 0
+        0x0000c88c:    e3a02000    . ..    MOV      r2,#0
+        0x0000c890:    e3a0002d    -...    MOV      r0,#0x2d
+        0x0000c894:    ebfffffe    ....    BL       OSAL_UnRegISR  ; 0x31a8 Section #1
+        0x0000c898:    e3a00037    7...    MOV      r0,#0x37
+        0x0000c89c:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x0000c8a0:    e3a00037    7...    MOV      r0,#0x37
+        0x0000c8a4:    e59f1010    ....    LDR      r1,[pc,#16]   ; [Scaler_event_proc = 0xc8bc] = 0
+        0x0000c8a8:    e3a02000    . ..    MOV      r2,#0
+        0x0000c8ac:    ebfffffe    ....    BL       OSAL_UnRegISR  ; 0x31a8 Section #1
+        0x0000c8b0:    e3a00000    ....    MOV      r0,#0
+        0x0000c8b4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000c8b8:    00000000    ....    DCD    0 ; Disp_lcdc_event_proc
+        0x0000c8bc:    00000000    ....    DCD    0 ; Scaler_event_proc
+    BSP_disp_init
+    $a
+        0x0000c8c0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000c8c4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000c8c8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000c8cc:    e3001578    x...    MOV      r1,#0x578
+        0x0000c8d0:    e1a04000    .@..    MOV      r4,r0
+        0x0000c8d4:    e59f0150    P...    LDR      r0,[pc,#336]  ; [([Section 17] + 17116) = 0xca2c]  = 0x42dc
+        0x0000c8d8:    ebfffffe    ....    BL       __memzero  ;
+        0x0000c8dc:    e59f1148    H...    LDR      r1,[pc,#328]  ; [([Section 17] + 17116) = 0xca2c]  = 0x42dc
+        0x0000c8e0:    e3a0e000    ....    MOV      r14,#0
+        0x0000c8e4:    e1a0c001    ....    MOV      r12,r1
+        0x0000c8e8:    e3a03004    .0..    MOV      r3,#4
+        0x0000c8ec:    e581308c    .0..    STR      r3,[r1,#0x8c]
+        0x0000c8f0:    e59f3134    41..    LDR      r3,[pc,#308]  ; [([Section 17] + 17116) = 0xca2c]  = 0x42dc
+        0x0000c8f4:    e3a00000    ....    MOV      r0,#0
+        0x0000c8f8:    e083348e    .4..    ADD      r3,r3,r14,LSL #9
+        0x0000c8fc:    e28320a1    . ..    ADD      r2,r3,#0xa1
+        0x0000c900:    ea000001    ....    B        {pc} + 0xc  ; 0xc90c
+        0x0000c904:    e3e03000    .0..    MVN      r3,#0
+        0x0000c908:    e5423060    `0B.    STRB     r3,[r2,#-0x60]
+        0x0000c90c:    e591308c    .0..    LDR      r3,[r1,#0x8c]
+        0x0000c910:    e2822060    ` ..    ADD      r2,r2,#0x60
+        0x0000c914:    e1500003    ..P.    CMP      r0,r3
+        0x0000c918:    e2800001    ....    ADD      r0,r0,#1
+        0x0000c91c:    3afffff8    ...:    BCC      {pc} - 0x18  ; 0xc904
+        0x0000c920:    e28ee001    ....    ADD      r14,r14,#1
+        0x0000c924:    e3a02020      ..    MOV      r2,#0x20
+        0x0000c928:    e35e0002    ..^.    CMP      r14,#2
+        0x0000c92c:    e3a03032    20..    MOV      r3,#0x32
+        0x0000c930:    e3a05001    .P..    MOV      r5,#1
+        0x0000c934:    e5813084    .0..    STR      r3,[r1,#0x84]
+        0x0000c938:    e581307c    |0..    STR      r3,[r1,#0x7c]
+        0x0000c93c:    e5815210    .R..    STR      r5,[r1,#0x210]
+        0x0000c940:    e5813080    .0..    STR      r3,[r1,#0x80]
+        0x0000c944:    e2811c02    ....    ADD      r1,r1,#0x200
+        0x0000c948:    e58c24e0    .$..    STR      r2,[r12,#0x4e0]
+        0x0000c94c:    e58c24d4    .$..    STR      r2,[r12,#0x4d4]
+        0x0000c950:    e58c24d8    .$..    STR      r2,[r12,#0x4d8]
+        0x0000c954:    e58c24dc    .$..    STR      r2,[r12,#0x4dc]
+        0x0000c958:    e28cc094    ....    ADD      r12,r12,#0x94
+        0x0000c95c:    1affffe1    ....    BNE      {pc} - 0x74  ; 0xc8e8
+        0x0000c960:    e2822030    0 ..    ADD      r2,r2,#0x30
+        0x0000c964:    e1a01004    ....    MOV      r1,r4
+        0x0000c968:    e59f00bc    ....    LDR      r0,[pc,#188]  ; [([Section 17] + 17116) = 0xca2c]  = 0x42dc
+        0x0000c96c:    ebfffffe    ....    BL       memcpy  ;
+        0x0000c970:    e59f00b8    ....    LDR      r0,[pc,#184]  ; [g_video = 0xca30] = 0
+        0x0000c974:    e3a010d8    ....    MOV      r1,#0xd8
+        0x0000c978:    ebfffffe    ....    BL       __memzero  ;
+        0x0000c97c:    e5941000    ....    LDR      r1,[r4,#0]
+        0x0000c980:    e3a00000    ....    MOV      r0,#0
+        0x0000c984:    ebfffffe    ....    BL       DE_Set_Reg_Base  ; 0x34ec Section #1
+        0x0000c988:    e5941004    ....    LDR      r1,[r4,#4]
+        0x0000c98c:    e1a00005    ....    MOV      r0,r5
+        0x0000c990:    ebfffffe    ....    BL       DE_Set_Reg_Base  ; 0x34ec Section #1
+        0x0000c994:    e5941008    ....    LDR      r1,[r4,#8]
+        0x0000c998:    e3a00000    ....    MOV      r0,#0
+        0x0000c99c:    ebfffffe    ....    BL       DE_SCAL_Set_Reg_Base  ; 0x3e40 Section #1
+        0x0000c9a0:    e594100c    ....    LDR      r1,[r4,#0xc]
+        0x0000c9a4:    e1a00005    ....    MOV      r0,r5
+        0x0000c9a8:    ebfffffe    ....    BL       DE_SCAL_Set_Reg_Base  ; 0x3e40 Section #1
+        0x0000c9ac:    e5941010    ....    LDR      r1,[r4,#0x10]
+        0x0000c9b0:    e3a00000    ....    MOV      r0,#0
+        0x0000c9b4:    ebfffffe    ....    BL       LCDC_set_reg_base  ; 0x6c30 Section #1
+        0x0000c9b8:    e5941014    ....    LDR      r1,[r4,#0x14]
+        0x0000c9bc:    e1a00005    ....    MOV      r0,r5
+        0x0000c9c0:    ebfffffe    ....    BL       LCDC_set_reg_base  ; 0x6c30 Section #1
+        0x0000c9c4:    e5941018    ....    LDR      r1,[r4,#0x18]
+        0x0000c9c8:    e3a00000    ....    MOV      r0,#0
+        0x0000c9cc:    ebfffffe    ....    BL       TVE_set_reg_base  ; 0x8e70 Section #1
+        0x0000c9d0:    e594101c    ....    LDR      r1,[r4,#0x1c]
+        0x0000c9d4:    e1a00005    ....    MOV      r0,r5
+        0x0000c9d8:    ebfffffe    ....    BL       TVE_set_reg_base  ; 0x8e70 Section #1
+        0x0000c9dc:    ebfffffe    ....    BL       disp_pll_init  ; 0xb0b0 Section #1
+        0x0000c9e0:    ebfffffe    ....    BL       disp_clk_init  ; 0xb7d0 Section #1
+        0x0000c9e4:    e3a00000    ....    MOV      r0,#0
+        0x0000c9e8:    ebfffffe    ....    BL       Scaler_Init  ; 0x10f04 Section #1
+        0x0000c9ec:    e1a00005    ....    MOV      r0,r5
+        0x0000c9f0:    ebfffffe    ....    BL       Scaler_Init  ; 0x10f04 Section #1
+        0x0000c9f4:    e3a00000    ....    MOV      r0,#0
+        0x0000c9f8:    ebfffffe    ....    BL       Image_init  ; 0xc6e0 Section #1
+        0x0000c9fc:    e1a00005    ....    MOV      r0,r5
+        0x0000ca00:    ebfffffe    ....    BL       Image_init  ; 0xc6e0 Section #1
+        0x0000ca04:    e3a00000    ....    MOV      r0,#0
+        0x0000ca08:    ebfffffe    ....    BL       Disp_lcdc_init  ; 0xfae8 Section #1
+        0x0000ca0c:    e1a00005    ....    MOV      r0,r5
+        0x0000ca10:    ebfffffe    ....    BL       Disp_lcdc_init  ; 0xfae8 Section #1
+        0x0000ca14:    e3a00000    ....    MOV      r0,#0
+        0x0000ca18:    ebfffffe    ....    BL       Disp_TVEC_Init  ; 0x12fd4 Section #1
+        0x0000ca1c:    e1a00005    ....    MOV      r0,r5
+        0x0000ca20:    ebfffffe    ....    BL       Disp_TVEC_Init  ; 0x12fd4 Section #1
+        0x0000ca24:    e3a00000    ....    MOV      r0,#0
+        0x0000ca28:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000ca2c:    000042dc    .B..    DCD    17116 ; [Section 17]
+        0x0000ca30:    00000000    ....    DCD    0 ; g_video
+    BSP_disp_cmd_cache
+    $a
+        0x0000ca34:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ca38:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000ca3c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ca40:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [gdisp = 0xca58] = 0
+        0x0000ca44:    e3a02001    . ..    MOV      r2,#1
+        0x0000ca48:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000ca4c:    e3a00000    ....    MOV      r0,#0
+        0x0000ca50:    e583205c    \ ..    STR      r2,[r3,#0x5c]
+        0x0000ca54:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000ca58:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_cmd_submit
+    $a
+        0x0000ca5c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ca60:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000ca64:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ca68:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [gdisp = 0xca80] = 0
+        0x0000ca6c:    e3a02000    . ..    MOV      r2,#0
+        0x0000ca70:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000ca74:    e1a00002    ....    MOV      r0,r2
+        0x0000ca78:    e583205c    \ ..    STR      r2,[r3,#0x5c]
+        0x0000ca7c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000ca80:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_cfg_start
+    $a
+        0x0000ca84:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ca88:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000ca8c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ca90:    e59f2014    . ..    LDR      r2,[pc,#20]   ; [gdisp = 0xcaac] = 0
+        0x0000ca94:    e0822480    .$..    ADD      r2,r2,r0,LSL #9
+        0x0000ca98:    e3a00000    ....    MOV      r0,#0
+        0x0000ca9c:    e5923060    `0..    LDR      r3,[r2,#0x60]
+        0x0000caa0:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000caa4:    e5823060    `0..    STR      r3,[r2,#0x60]
+        0x0000caa8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000caac:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_cfg_finish
+    $a
+        0x0000cab0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cab4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cab8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cabc:    e59f2014    . ..    LDR      r2,[pc,#20]   ; [gdisp = 0xcad8] = 0
+        0x0000cac0:    e0822480    .$..    ADD      r2,r2,r0,LSL #9
+        0x0000cac4:    e3a00000    ....    MOV      r0,#0
+        0x0000cac8:    e5923060    `0..    LDR      r3,[r2,#0x60]
+        0x0000cacc:    e2433001    .0C.    SUB      r3,r3,#1
+        0x0000cad0:    e5823060    `0..    STR      r3,[r2,#0x60]
+        0x0000cad4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000cad8:    00000000    ....    DCD    0 ; gdisp
+    LCD_line_event_proc
+    $a
+        0x0000cadc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cae0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000cae4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cae8:    e59f2020      ..    LDR      r2,[pc,#32]   ; [gdisp = 0xcb10] = 0
+        0x0000caec:    e0824480    .D..    ADD      r4,r2,r0,LSL #9
+        0x0000caf0:    e1d435d8    .5..    LDRSB    r3,[r4,#0x58]
+        0x0000caf4:    e3530000    ..S.    CMP      r3,#0
+        0x0000caf8:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000cafc:    e1a0e00f    ....    MOV      r14,pc
+        0x0000cb00:    e592f04c    L...    LDR      pc,[r2,#0x4c]
+        0x0000cb04:    e3a03000    .0..    MOV      r3,#0
+        0x0000cb08:    e5c43058    X0..    STRB     r3,[r4,#0x58]
+        0x0000cb0c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000cb10:    00000000    ....    DCD    0 ; gdisp
+    Is_In_Valid_Regn
+    $a
+        0x0000cb14:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cb18:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cb1c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cb20:    e59f3030    00..    LDR      r3,[pc,#48]   ; [gdisp = 0xcb58] = 0
+        0x0000cb24:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000cb28:    e5933054    T0..    LDR      r3,[r3,#0x54]
+        0x0000cb2c:    e3130080    ....    TST      r3,#0x80
+        0x0000cb30:    0a000001    ....    BEQ      {pc} + 0xc  ; 0xcb3c
+        0x0000cb34:    ebfffffe    ....    BL       TCON0_in_valid_regn  ; 0x7668 Section #1
+        0x0000cb38:    ea000003    ....    B        {pc} + 0x14  ; 0xcb4c
+        0x0000cb3c:    e3130c01    ....    TST      r3,#0x100
+        0x0000cb40:    03a00001    ....    MOVEQ    r0,#1
+        0x0000cb44:    0a000001    ....    BEQ      {pc} + 0xc  ; 0xcb50
+        0x0000cb48:    ebfffffe    ....    BL       TCON1_in_valid_regn  ; 0x88f4 Section #1
+        0x0000cb4c:    e6ef0070    p...    UXTB     r0,r0
+        0x0000cb50:    e6af0070    p...    SXTB     r0,r0
+        0x0000cb54:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000cb58:    00000000    ....    DCD    0 ; gdisp
+    LCD_vbi_event_proc
+    $a
+        0x0000cb5c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cb60:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000cb64:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cb68:    e1a04001    .@..    MOV      r4,r1
+        0x0000cb6c:    e1a05000    .P..    MOV      r5,r0
+        0x0000cb70:    ebfffffe    ....    BL       Video_Operation_In_Vblanking  ; 0x1365c Section #1
+        0x0000cb74:    e1a01004    ....    MOV      r1,r4
+        0x0000cb78:    e3a00000    ....    MOV      r0,#0
+        0x0000cb7c:    ebfffffe    ....    BL       LCDC_get_start_delay  ; 0x6e3c Section #1
+        0x0000cb80:    e2401003    ..@.    SUB      r1,r0,#3
+        0x0000cb84:    e6ef0075    u...    UXTB     r0,r5
+        0x0000cb88:    ebfffffe    ....    BL       Is_In_Valid_Regn  ; 0xcb14 Section #1
+        0x0000cb8c:    e31000ff    ....    TST      r0,#0xff
+        0x0000cb90:    089da8f0    ....    LDMEQ    r13,{r4-r7,r11,r13,pc}
+        0x0000cb94:    e59f3100    .1..    LDR      r3,[pc,#256]  ; [gdisp = 0xcc9c] = 0
+        0x0000cb98:    e0833485    .4..    ADD      r3,r3,r5,LSL #9
+        0x0000cb9c:    e5933248    H2..    LDR      r3,[r3,#0x248]
+        0x0000cba0:    e3530000    ..S.    CMP      r3,#0
+        0x0000cba4:    0a000000    ....    BEQ      {pc} + 0x8  ; 0xcbac
+        0x0000cba8:    e12fff33    3./.    BLX      r3
+        0x0000cbac:    e59f60e8    .`..    LDR      r6,[pc,#232]  ; [gdisp = 0xcc9c] = 0
+        0x0000cbb0:    e0860485    ....    ADD      r0,r6,r5,LSL #9
+        0x0000cbb4:    e590305c    \0..    LDR      r3,[r0,#0x5c]
+        0x0000cbb8:    e3530000    ..S.    CMP      r3,#0
+        0x0000cbbc:    189da8f0    ....    LDMNE    r13,{r4-r7,r11,r13,pc}
+        0x0000cbc0:    e5904060    `@..    LDR      r4,[r0,#0x60]
+        0x0000cbc4:    e3540000    ..T.    CMP      r4,#0
+        0x0000cbc8:    189da8f0    ....    LDMNE    r13,{r4-r7,r11,r13,pc}
+        0x0000cbcc:    e5963450    P4..    LDR      r3,[r6,#0x450]
+        0x0000cbd0:    e3130c02    ....    TST      r3,#0x200
+        0x0000cbd4:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xcc00
+        0x0000cbd8:    e5963458    X4..    LDR      r3,[r6,#0x458]
+        0x0000cbdc:    e1530005    ..S.    CMP      r3,r5
+        0x0000cbe0:    1a000006    ....    BNE      {pc} + 0x20  ; 0xcc00
+        0x0000cbe4:    e1a00004    ....    MOV      r0,r4
+        0x0000cbe8:    ebfffffe    ....    BL       DE_SCAL_Set_Reg_Rdy  ; 0x5514 Section #1
+        0x0000cbec:    e1a00004    ....    MOV      r0,r4
+        0x0000cbf0:    ebfffffe    ....    BL       DE_SCAL_Reset  ; 0x5540 Section #1
+        0x0000cbf4:    e1a00004    ....    MOV      r0,r4
+        0x0000cbf8:    ebfffffe    ....    BL       DE_SCAL_Start  ; 0x54bc Section #1
+        0x0000cbfc:    e5c64454    TD..    STRB     r4,[r6,#0x454]
+        0x0000cc00:    e59f4094    .@..    LDR      r4,[pc,#148]  ; [gdisp = 0xcc9c] = 0
+        0x0000cc04:    e5d42455    U$..    LDRB     r2,[r4,#0x455]
+        0x0000cc08:    e6af3072    r0..    SXTB     r3,r2
+        0x0000cc0c:    e3530001    ..S.    CMP      r3,#1
+        0x0000cc10:    1a000003    ....    BNE      {pc} + 0x14  ; 0xcc24
+        0x0000cc14:    e3a00000    ....    MOV      r0,#0
+        0x0000cc18:    ebfffffe    ....    BL       Scaler_close  ; 0x10c6c Section #1
+        0x0000cc1c:    e3a03000    .0..    MOV      r3,#0
+        0x0000cc20:    e5c43455    U4..    STRB     r3,[r4,#0x455]
+        0x0000cc24:    e59f4070    p@..    LDR      r4,[pc,#112]  ; [gdisp = 0xcc9c] = 0
+        0x0000cc28:    e59434e4    .4..    LDR      r3,[r4,#0x4e4]
+        0x0000cc2c:    e3130c02    ....    TST      r3,#0x200
+        0x0000cc30:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0xcc60
+        0x0000cc34:    e59434ec    .4..    LDR      r3,[r4,#0x4ec]
+        0x0000cc38:    e1530005    ..S.    CMP      r3,r5
+        0x0000cc3c:    1a000007    ....    BNE      {pc} + 0x24  ; 0xcc60
+        0x0000cc40:    e3a00001    ....    MOV      r0,#1
+        0x0000cc44:    ebfffffe    ....    BL       DE_SCAL_Set_Reg_Rdy  ; 0x5514 Section #1
+        0x0000cc48:    e3a00001    ....    MOV      r0,#1
+        0x0000cc4c:    ebfffffe    ....    BL       DE_SCAL_Reset  ; 0x5540 Section #1
+        0x0000cc50:    e3a00001    ....    MOV      r0,#1
+        0x0000cc54:    ebfffffe    ....    BL       DE_SCAL_Start  ; 0x54bc Section #1
+        0x0000cc58:    e3a03000    .0..    MOV      r3,#0
+        0x0000cc5c:    e5c434e8    .4..    STRB     r3,[r4,#0x4e8]
+        0x0000cc60:    e59f4034    4@..    LDR      r4,[pc,#52]   ; [gdisp = 0xcc9c] = 0
+        0x0000cc64:    e5d434e9    .4..    LDRB     r3,[r4,#0x4e9]
+        0x0000cc68:    e6af0073    s...    SXTB     r0,r3
+        0x0000cc6c:    e3500001    ..P.    CMP      r0,#1
+        0x0000cc70:    1a000002    ....    BNE      {pc} + 0x10  ; 0xcc80
+        0x0000cc74:    ebfffffe    ....    BL       Scaler_close  ; 0x10c6c Section #1
+        0x0000cc78:    e3a03000    .0..    MOV      r3,#0
+        0x0000cc7c:    e5c434e9    .4..    STRB     r3,[r4,#0x4e9]
+        0x0000cc80:    e1a00005    ....    MOV      r0,r5
+        0x0000cc84:    ebfffffe    ....    BL       DE_BE_Cfg_Ready  ; 0x3748 Section #1
+        0x0000cc88:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [gdisp = 0xcc9c] = 0
+        0x0000cc8c:    e3a02001    . ..    MOV      r2,#1
+        0x0000cc90:    e0833485    .4..    ADD      r3,r3,r5,LSL #9
+        0x0000cc94:    e5c32058    X ..    STRB     r2,[r3,#0x58]
+        0x0000cc98:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000cc9c:    00000000    ....    DCD    0 ; gdisp
+    Display_Hdmi_Init
+    $a
+        0x0000cca0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cca4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cca8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ccac:    e59f2010    . ..    LDR      r2,[pc,#16]   ; [gdisp = 0xccc4] = 0
+        0x0000ccb0:    e3a03004    .0..    MOV      r3,#4
+        0x0000ccb4:    e3a00000    ....    MOV      r0,#0
+        0x0000ccb8:    e582342c    ,4..    STR      r3,[r2,#0x42c]
+        0x0000ccbc:    e582322c    ,2..    STR      r3,[r2,#0x22c]
+        0x0000ccc0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000ccc4:    00000000    ....    DCD    0 ; gdisp
+    Display_Hdmi_Exit
+    $a
+        0x0000ccc8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cccc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000ccd0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ccd4:    e3a00000    ....    MOV      r0,#0
+        0x0000ccd8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_hdmi_get_mode
+        0x0000ccdc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cce0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cce4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cce8:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0xccf8] = 0
+        0x0000ccec:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000ccf0:    e593022c    ,...    LDR      r0,[r3,#0x22c]
+        0x0000ccf4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000ccf8:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_hdmi_check_support_mode
+    $a
+        0x0000ccfc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cd00:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cd04:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cd08:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [gdisp = 0xcd1c] = 0
+        0x0000cd0c:    e1a00001    ....    MOV      r0,r1
+        0x0000cd10:    e1a0e00f    ....    MOV      r14,pc
+        0x0000cd14:    e593f044    D...    LDR      pc,[r3,#0x44]
+        0x0000cd18:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000cd1c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_hdmi_get_hpd_status
+    $a
+        0x0000cd20:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cd24:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cd28:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cd2c:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0xcd3c] = 0
+        0x0000cd30:    e1a0e00f    ....    MOV      r14,pc
+        0x0000cd34:    e593f048    H...    LDR      pc,[r3,#0x48]
+        0x0000cd38:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000cd3c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_hdmi_set_src
+    $a
+        0x0000cd40:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cd44:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cd48:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cd4c:    e3510001    ..Q.    CMP      r1,#1
+        0x0000cd50:    e1a03001    .0..    MOV      r3,r1
+        0x0000cd54:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xcd68
+        0x0000cd58:    33a01000    ...3    MOVCC    r1,#0
+        0x0000cd5c:    3a000001    ...:    BCC      {pc} + 0xc  ; 0xcd68
+        0x0000cd60:    e3530005    ..S.    CMP      r3,#5
+        0x0000cd64:    1a000002    ....    BNE      {pc} + 0x10  ; 0xcd74
+        0x0000cd68:    ebfffffe    ....    BL       TCON1_select_src  ; 0x8810 Section #1
+        0x0000cd6c:    e3a00000    ....    MOV      r0,#0
+        0x0000cd70:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000cd74:    e59f0008    ....    LDR      r0,[pc,#8]    ; [([Section 10] + 1789) = 0xcd84]  = 0x6fd
+        0x0000cd78:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000cd7c:    e3e00004    ....    MVN      r0,#4
+        0x0000cd80:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000cd84:    000006fd    ....    DCD    1789 ; [Section 10]
+    BSP_disp_hdmi_set_mode
+    $a
+        0x0000cd88:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cd8c:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000cd90:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cd94:    e351000a    ..Q.    CMP      r1,#0xa
+        0x0000cd98:    e1a05001    .P..    MOV      r5,r1
+        0x0000cd9c:    e1a06000    .`..    MOV      r6,r0
+        0x0000cda0:    9a000003    ....    BLS      {pc} + 0x14  ; 0xcdb4
+        0x0000cda4:    e59f0030    0...    LDR      r0,[pc,#48]   ; [([Section 10] + 1839) = 0xcddc]  = 0x72f
+        0x0000cda8:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000cdac:    e3e00000    ....    MVN      r0,#0
+        0x0000cdb0:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000cdb4:    e59f4024    $@..    LDR      r4,[pc,#36]   ; [gdisp = 0xcde0] = 0
+        0x0000cdb8:    e1a00001    ....    MOV      r0,r1
+        0x0000cdbc:    e1a0e00f    ....    MOV      r14,pc
+        0x0000cdc0:    e594f038    8...    LDR      pc,[r4,#0x38]
+        0x0000cdc4:    e3a03004    .0..    MOV      r3,#4
+        0x0000cdc8:    e0844486    .D..    ADD      r4,r4,r6,LSL #9
+        0x0000cdcc:    e3a00000    ....    MOV      r0,#0
+        0x0000cdd0:    e5843220     2..    STR      r3,[r4,#0x220]
+        0x0000cdd4:    e584522c    ,R..    STR      r5,[r4,#0x22c]
+        0x0000cdd8:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000cddc:    0000072f    /...    DCD    1839 ; [Section 10]
+        0x0000cde0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_hdmi_close
+    $a
+        0x0000cde4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cde8:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000cdec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cdf0:    e59f2080    . ..    LDR      r2,[pc,#128]  ; [gdisp = 0xce78] = 0
+        0x0000cdf4:    e1a07000    .p..    MOV      r7,r0
+        0x0000cdf8:    e0826480    .d..    ADD      r6,r2,r0,LSL #9
+        0x0000cdfc:    e5963050    P0..    LDR      r3,[r6,#0x50]
+        0x0000ce00:    e3130701    ....    TST      r3,#0x40000
+        0x0000ce04:    0a000019    ....    BEQ      {pc} + 0x6c  ; 0xce70
+        0x0000ce08:    e1a0e00f    ....    MOV      r14,pc
+        0x0000ce0c:    e592f040    @...    LDR      pc,[r2,#0x40]
+        0x0000ce10:    e1a00007    ....    MOV      r0,r7
+        0x0000ce14:    ebfffffe    ....    BL       TCON1_close  ; 0x77e0 Section #1
+        0x0000ce18:    e1a00007    ....    MOV      r0,r7
+        0x0000ce1c:    ebfffffe    ....    BL       image_clk_off  ; 0xaff0 Section #1
+        0x0000ce20:    e1a00007    ....    MOV      r0,r7
+        0x0000ce24:    ebfffffe    ....    BL       lcdc_clk_off  ; 0xae10 Section #1
+        0x0000ce28:    e596424c    LB..    LDR      r4,[r6,#0x24c]
+        0x0000ce2c:    e596c054    T...    LDR      r12,[r6,#0x54]
+        0x0000ce30:    e3a05000    .P..    MOV      r5,#0
+        0x0000ce34:    e5963050    P0..    LDR      r3,[r6,#0x50]
+        0x0000ce38:    e3540601    ..T.    CMP      r4,#0x100000
+        0x0000ce3c:    e3cccc01    ....    BIC      r12,r12,#0x100
+        0x0000ce40:    e1a00007    ....    MOV      r0,r7
+        0x0000ce44:    e3c33701    .7..    BIC      r3,r3,#0x40000
+        0x0000ce48:    e1a02005    . ..    MOV      r2,r5
+        0x0000ce4c:    e5863050    P0..    STR      r3,[r6,#0x50]
+        0x0000ce50:    e3a01004    ....    MOV      r1,#4
+        0x0000ce54:    03e03601    .6..    MVNEQ    r3,#0x100000
+        0x0000ce58:    13e03602    .6..    MVNNE    r3,#0x200000
+        0x0000ce5c:    e586c054    T...    STR      r12,[r6,#0x54]
+        0x0000ce60:    e0033004    .0..    AND      r3,r3,r4
+        0x0000ce64:    e5865220     R..    STR      r5,[r6,#0x220]
+        0x0000ce68:    e586324c    L2..    STR      r3,[r6,#0x24c]
+        0x0000ce6c:    ebfffffe    ....    BL       Disp_lcdc_pin_cfg  ; 0xf1d0 Section #1
+        0x0000ce70:    e3a00000    ....    MOV      r0,#0
+        0x0000ce74:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000ce78:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_hdmi_open
+    $a
+        0x0000ce7c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ce80:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x0000ce84:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ce88:    e59fa0cc    ....    LDR      r10,[pc,#204]  ; [gdisp = 0xcf5c] = 0
+        0x0000ce8c:    e1a07000    .p..    MOV      r7,r0
+        0x0000ce90:    e08a8480    ....    ADD      r8,r10,r0,LSL #9
+        0x0000ce94:    e5983050    P0..    LDR      r3,[r8,#0x50]
+        0x0000ce98:    e3130701    ....    TST      r3,#0x40000
+        0x0000ce9c:    1a00002c    ,...    BNE      {pc} + 0xb8  ; 0xcf54
+        0x0000cea0:    e598622c    ,b..    LDR      r6,[r8,#0x22c]
+        0x0000cea4:    ebfffffe    ....    BL       lcdc_clk_on  ; 0xae88 Section #1
+        0x0000cea8:    e1a00007    ....    MOV      r0,r7
+        0x0000ceac:    ebfffffe    ....    BL       image_clk_on  ; 0xb050 Section #1
+        0x0000ceb0:    e1a00007    ....    MOV      r0,r7
+        0x0000ceb4:    e6ef5076    vP..    UXTB     r5,r6
+        0x0000ceb8:    ebfffffe    ....    BL       Image_open  ; 0xc694 Section #1
+        0x0000cebc:    e3a01004    ....    MOV      r1,#4
+        0x0000cec0:    e1a00007    ....    MOV      r0,r7
+        0x0000cec4:    e1a02005    . ..    MOV      r2,r5
+        0x0000cec8:    ebfffffe    ....    BL       disp_clk_cfg  ; 0xb330 Section #1
+        0x0000cecc:    e3a01004    ....    MOV      r1,#4
+        0x0000ced0:    e3a02001    . ..    MOV      r2,#1
+        0x0000ced4:    e1a00007    ....    MOV      r0,r7
+        0x0000ced8:    ebfffffe    ....    BL       Disp_lcdc_pin_cfg  ; 0xf1d0 Section #1
+        0x0000cedc:    e1a00006    ....    MOV      r0,r6
+        0x0000cee0:    ebfffffe    ....    BL       tv_mode_to_width  ; 0xf2ec Section #1
+        0x0000cee4:    e1a04000    .@..    MOV      r4,r0
+        0x0000cee8:    e1a00006    ....    MOV      r0,r6
+        0x0000ceec:    ebfffffe    ....    BL       tv_mode_to_height  ; 0xf340 Section #1
+        0x0000cef0:    e1a01004    ....    MOV      r1,r4
+        0x0000cef4:    e1a02000    . ..    MOV      r2,r0
+        0x0000cef8:    e1a00007    ....    MOV      r0,r7
+        0x0000cefc:    ebfffffe    ....    BL       DE_BE_set_display_size  ; 0x3d48 Section #1
+        0x0000cf00:    e1a01005    ....    MOV      r1,r5
+        0x0000cf04:    e1a00007    ....    MOV      r0,r7
+        0x0000cf08:    ebfffffe    ....    BL       TCON1_set_hdmi_mode  ; 0x7b78 Section #1
+        0x0000cf0c:    e1a00007    ....    MOV      r0,r7
+        0x0000cf10:    ebfffffe    ....    BL       TCON1_open  ; 0x7790 Section #1
+        0x0000cf14:    e1a0e00f    ....    MOV      r14,pc
+        0x0000cf18:    e59af03c    <...    LDR      pc,[r10,#0x3c]
+        0x0000cf1c:    e1a01005    ....    MOV      r1,r5
+        0x0000cf20:    e3a00004    ....    MOV      r0,#4
+        0x0000cf24:    ebfffffe    ....    BL       Disp_Switch_Dram_Mode  ; 0x128b0 Section #1
+        0x0000cf28:    e1a00006    ....    MOV      r0,r6
+        0x0000cf2c:    ebfffffe    ....    BL       Disp_get_screen_scan_mode  ; 0xf4f4 Section #1
+        0x0000cf30:    e5982050    P ..    LDR      r2,[r8,#0x50]
+        0x0000cf34:    e5981054    T...    LDR      r1,[r8,#0x54]
+        0x0000cf38:    e3a03004    .0..    MOV      r3,#4
+        0x0000cf3c:    e3822701    .'..    ORR      r2,r2,#0x40000
+        0x0000cf40:    e5883220     2..    STR      r3,[r8,#0x220]
+        0x0000cf44:    e3811c01    ....    ORR      r1,r1,#0x100
+        0x0000cf48:    e5882050    P ..    STR      r2,[r8,#0x50]
+        0x0000cf4c:    e5881054    T...    STR      r1,[r8,#0x54]
+        0x0000cf50:    e5c8021c    ....    STRB     r0,[r8,#0x21c]
+        0x0000cf54:    e3a00000    ....    MOV      r0,#0
+        0x0000cf58:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x0000cf5c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_hwc_set_palette
+    $a
+        0x0000cf60:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cf64:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cf68:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cf6c:    e3510000    ..Q.    CMP      r1,#0
+        0x0000cf70:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xcf80
+        0x0000cf74:    e083c002    ....    ADD      r12,r3,r2
+        0x0000cf78:    e35c0b01    ..\.    CMP      r12,#0x400
+        0x0000cf7c:    9a000003    ....    BLS      {pc} + 0x14  ; 0xcf90
+        0x0000cf80:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1888) = 0xcf9c]  = 0x760
+        0x0000cf84:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000cf88:    e3e00001    ....    MVN      r0,#1
+        0x0000cf8c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000cf90:    ebfffffe    ....    BL       DE_BE_HWC_Set_Palette  ; 0x63c8 Section #1
+        0x0000cf94:    e3a00000    ....    MOV      r0,#0
+        0x0000cf98:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000cf9c:    00000760    `...    DCD    1888 ; [Section 10]
+    BSP_disp_hwc_set_framebuffer
+    $a
+        0x0000cfa0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cfa4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cfa8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cfac:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x0000cfb0:    e2512000    . Q.    SUBS     r2,r1,#0
+        0x0000cfb4:    03e00001    ....    MVNEQ    r0,#1
+        0x0000cfb8:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xcfd8
+        0x0000cfbc:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x0000cfc0:    e24b1014    ..K.    SUB      r1,r11,#0x14
+        0x0000cfc4:    e54b3014    .0K.    STRB     r3,[r11,#-0x14]
+        0x0000cfc8:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x0000cfcc:    e50b3010    .0..    STR      r3,[r11,#-0x10]
+        0x0000cfd0:    ebfffffe    ....    BL       DE_BE_HWC_Set_Src  ; 0x641c Section #1
+        0x0000cfd4:    e3a00000    ....    MOV      r0,#0
+        0x0000cfd8:    e24bd00c    ..K.    SUB      r13,r11,#0xc
+        0x0000cfdc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_hwc_get_pos
+        0x0000cfe0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cfe4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000cfe8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000cfec:    ebfffffe    ....    BL       DE_BE_HWC_Get_Pos  ; 0x6390 Section #1
+        0x0000cff0:    e3a00000    ....    MOV      r0,#0
+        0x0000cff4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_hwc_set_pos
+        0x0000cff8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000cffc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d000:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d004:    ebfffffe    ....    BL       DE_BE_HWC_Set_Pos  ; 0x6344 Section #1
+        0x0000d008:    e3a00000    ....    MOV      r0,#0
+        0x0000d00c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_hwc_enable
+        0x0000d010:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d014:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d018:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d01c:    ebfffffe    ....    BL       DE_BE_HWC_Enable  ; 0x6314 Section #1
+        0x0000d020:    e3a00000    ....    MOV      r0,#0
+        0x0000d024:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    Layer_Get_Prio
+    $a
+        0x0000d028:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d02c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d030:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d034:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d038:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d03c:    e0210193    ..!.    MLA      r1,r3,r1,r0
+        0x0000d040:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [gdisp = 0xd05c] = 0
+        0x0000d044:    e0830001    ....    ADD      r0,r3,r1
+        0x0000d048:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d04c:    e3130002    ....    TST      r3,#2
+        0x0000d050:    03e00001    ....    MVNEQ    r0,#1
+        0x0000d054:    15d000a1    ....    LDRBNE   r0,[r0,#0xa1]
+        0x0000d058:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000d05c:    00000000    ....    DCD    0 ; gdisp
+    get_fb_type
+    $a
+        0x0000d060:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d064:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d068:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d06c:    e240000b    ..@.    SUB      r0,r0,#0xb
+        0x0000d070:    e3500003    ..P.    CMP      r0,#3
+        0x0000d074:    83a00000    ....    MOVHI    r0,#0
+        0x0000d078:    93a00001    ....    MOVLS    r0,#1
+        0x0000d07c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    de_format_to_bpp
+        0x0000d080:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d084:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d088:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d08c:    e350000f    ..P.    CMP      r0,#0xf
+        0x0000d090:    979ff100    ....    LDRLS    pc,[pc,r0,LSL #2]
+        0x0000d094:    ea000019    ....    B        {pc} + 0x6c  ; 0xd100
+    $d
+        0x0000d098:    0000d0e0    ....    DCD    53472 ; [Section 1]
+        0x0000d09c:    0000d0d8    ....    DCD    53464 ; [Section 1]
+        0x0000d0a0:    0000d0e8    ....    DCD    53480 ; [Section 1]
+        0x0000d0a4:    0000d0f0    ....    DCD    53488 ; [Section 1]
+        0x0000d0a8:    0000d108    ....    DCD    53512 ; [Section 1]
+        0x0000d0ac:    0000d108    ....    DCD    53512 ; [Section 1]
+        0x0000d0b0:    0000d108    ....    DCD    53512 ; [Section 1]
+        0x0000d0b4:    0000d108    ....    DCD    53512 ; [Section 1]
+        0x0000d0b8:    0000d108    ....    DCD    53512 ; [Section 1]
+        0x0000d0bc:    0000d110    ....    DCD    53520 ; [Section 1]
+        0x0000d0c0:    0000d118    ....    DCD    53528 ; [Section 1]
+        0x0000d0c4:    0000d110    ....    DCD    53520 ; [Section 1]
+        0x0000d0c8:    0000d108    ....    DCD    53512 ; [Section 1]
+        0x0000d0cc:    0000d0f8    ....    DCD    53496 ; [Section 1]
+        0x0000d0d0:    0000d0f8    ....    DCD    53496 ; [Section 1]
+        0x0000d0d4:    0000d118    ....    DCD    53528 ; [Section 1]
+    $a
+        0x0000d0d8:    e3a00002    ....    MOV      r0,#2
+        0x0000d0dc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d0e0:    e3a00001    ....    MOV      r0,#1
+        0x0000d0e4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d0e8:    e3a00004    ....    MOV      r0,#4
+        0x0000d0ec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d0f0:    e3a00008    ....    MOV      r0,#8
+        0x0000d0f4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d0f8:    e3a0000c    ....    MOV      r0,#0xc
+        0x0000d0fc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d100:    e3a00000    ....    MOV      r0,#0
+        0x0000d104:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d108:    e3a00010    ....    MOV      r0,#0x10
+        0x0000d10c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d110:    e3a00018    ....    MOV      r0,#0x18
+        0x0000d114:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d118:    e3a00020     ...    MOV      r0,#0x20
+        0x0000d11c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_layer_get_bright
+        0x0000d120:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d124:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d128:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d12c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d130:    4a000013    ...J    BMI      {pc} + 0x54  ; 0xd184
+        0x0000d134:    e59fc058    X...    LDR      r12,[pc,#88]   ; [gdisp = 0xd194] = 0
+        0x0000d138:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d13c:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d140:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d144:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d148:    2a00000d    ...*    BCS      {pc} + 0x3c  ; 0xd184
+        0x0000d14c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d150:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d154:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d158:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d15c:    e3130002    ....    TST      r3,#2
+        0x0000d160:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xd18c
+        0x0000d164:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d168:    e3530004    ..S.    CMP      r3,#4
+        0x0000d16c:    1a000006    ....    BNE      {pc} + 0x20  ; 0xd18c
+        0x0000d170:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d174:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d178:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d17c:    e59304d4    ....    LDR      r0,[r3,#0x4d4]
+        0x0000d180:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d184:    e3e00001    ....    MVN      r0,#1
+        0x0000d188:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d18c:    e3e00004    ....    MVN      r0,#4
+        0x0000d190:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000d194:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_contrast
+    $a
+        0x0000d198:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d19c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d1a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d1a4:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d1a8:    4a000013    ...J    BMI      {pc} + 0x54  ; 0xd1fc
+        0x0000d1ac:    e59fc058    X...    LDR      r12,[pc,#88]   ; [gdisp = 0xd20c] = 0
+        0x0000d1b0:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d1b4:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d1b8:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d1bc:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d1c0:    2a00000d    ...*    BCS      {pc} + 0x3c  ; 0xd1fc
+        0x0000d1c4:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d1c8:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d1cc:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d1d0:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d1d4:    e3130002    ....    TST      r3,#2
+        0x0000d1d8:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xd204
+        0x0000d1dc:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d1e0:    e3530004    ..S.    CMP      r3,#4
+        0x0000d1e4:    1a000006    ....    BNE      {pc} + 0x20  ; 0xd204
+        0x0000d1e8:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d1ec:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d1f0:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d1f4:    e59304d8    ....    LDR      r0,[r3,#0x4d8]
+        0x0000d1f8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d1fc:    e3e00001    ....    MVN      r0,#1
+        0x0000d200:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d204:    e3e00004    ....    MVN      r0,#4
+        0x0000d208:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000d20c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_saturation
+    $a
+        0x0000d210:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d214:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d218:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d21c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d220:    4a000013    ...J    BMI      {pc} + 0x54  ; 0xd274
+        0x0000d224:    e59fc058    X...    LDR      r12,[pc,#88]   ; [gdisp = 0xd284] = 0
+        0x0000d228:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d22c:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d230:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d234:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d238:    2a00000d    ...*    BCS      {pc} + 0x3c  ; 0xd274
+        0x0000d23c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d240:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d244:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d248:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d24c:    e3130002    ....    TST      r3,#2
+        0x0000d250:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xd27c
+        0x0000d254:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d258:    e3530004    ..S.    CMP      r3,#4
+        0x0000d25c:    1a000006    ....    BNE      {pc} + 0x20  ; 0xd27c
+        0x0000d260:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d264:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d268:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d26c:    e59304dc    ....    LDR      r0,[r3,#0x4dc]
+        0x0000d270:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d274:    e3e00001    ....    MVN      r0,#1
+        0x0000d278:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d27c:    e3e00004    ....    MVN      r0,#4
+        0x0000d280:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000d284:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_hue
+    $a
+        0x0000d288:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d28c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d290:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d294:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d298:    4a000013    ...J    BMI      {pc} + 0x54  ; 0xd2ec
+        0x0000d29c:    e59fc058    X...    LDR      r12,[pc,#88]   ; [gdisp = 0xd2fc] = 0
+        0x0000d2a0:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d2a4:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d2a8:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d2ac:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d2b0:    2a00000d    ...*    BCS      {pc} + 0x3c  ; 0xd2ec
+        0x0000d2b4:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d2b8:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d2bc:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d2c0:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d2c4:    e3130002    ....    TST      r3,#2
+        0x0000d2c8:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xd2f4
+        0x0000d2cc:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d2d0:    e3530004    ..S.    CMP      r3,#4
+        0x0000d2d4:    1a000006    ....    BNE      {pc} + 0x20  ; 0xd2f4
+        0x0000d2d8:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d2dc:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d2e0:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d2e4:    e59304e0    ....    LDR      r0,[r3,#0x4e0]
+        0x0000d2e8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d2ec:    e3e00001    ....    MVN      r0,#1
+        0x0000d2f0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d2f4:    e3e00004    ....    MVN      r0,#4
+        0x0000d2f8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000d2fc:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_enhance_enable
+    $a
+        0x0000d300:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d304:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d308:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d30c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d310:    4a000014    ...J    BMI      {pc} + 0x58  ; 0xd368
+        0x0000d314:    e59fc05c    \...    LDR      r12,[pc,#92]   ; [gdisp = 0xd378] = 0
+        0x0000d318:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d31c:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d320:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d324:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d328:    2a00000e    ...*    BCS      {pc} + 0x40  ; 0xd368
+        0x0000d32c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d330:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d334:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d338:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d33c:    e3130002    ....    TST      r3,#2
+        0x0000d340:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0xd370
+        0x0000d344:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d348:    e3530004    ..S.    CMP      r3,#4
+        0x0000d34c:    1a000007    ....    BNE      {pc} + 0x24  ; 0xd370
+        0x0000d350:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d354:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d358:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d35c:    e5d334d0    .4..    LDRB     r3,[r3,#0x4d0]
+        0x0000d360:    e6af0073    s...    SXTB     r0,r3
+        0x0000d364:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d368:    e3e00001    ....    MVN      r0,#1
+        0x0000d36c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d370:    e3e00004    ....    MVN      r0,#4
+        0x0000d374:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000d378:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_enhance_enable
+    $a
+        0x0000d37c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d380:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x0000d384:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d388:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000d38c:    e2514064    d@Q.    SUBS     r4,r1,#0x64
+        0x0000d390:    e1a05000    .P..    MOV      r5,r0
+        0x0000d394:    e1a06002    .`..    MOV      r6,r2
+        0x0000d398:    4a00002a    *..J    BMI      {pc} + 0xb0  ; 0xd448
+        0x0000d39c:    e59f10b8    ....    LDR      r1,[pc,#184]  ; [gdisp = 0xd45c] = 0
+        0x0000d3a0:    e1a02480    .$..    LSL      r2,r0,#9
+        0x0000d3a4:    e0813002    .0..    ADD      r3,r1,r2
+        0x0000d3a8:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d3ac:    e1540003    ..T.    CMP      r4,r3
+        0x0000d3b0:    2a000024    $..*    BCS      {pc} + 0x98  ; 0xd448
+        0x0000d3b4:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d3b8:    e0232493    .$#.    MLA      r3,r3,r4,r2
+        0x0000d3bc:    e0812003    . ..    ADD      r2,r1,r3
+        0x0000d3c0:    e5923090    .0..    LDR      r3,[r2,#0x90]
+        0x0000d3c4:    e3130002    ....    TST      r3,#2
+        0x0000d3c8:    0a000020     ...    BEQ      {pc} + 0x88  ; 0xd450
+        0x0000d3cc:    e592309c    .0..    LDR      r3,[r2,#0x9c]
+        0x0000d3d0:    e3530004    ..S.    CMP      r3,#4
+        0x0000d3d4:    1a00001d    ....    BNE      {pc} + 0x7c  ; 0xd450
+        0x0000d3d8:    e3560000    ..V.    CMP      r6,#0
+        0x0000d3dc:    1a000005    ....    BNE      {pc} + 0x1c  ; 0xd3f8
+        0x0000d3e0:    e283301c    .0..    ADD      r3,r3,#0x1c
+        0x0000d3e4:    e5920098    ....    LDR      r0,[r2,#0x98]
+        0x0000d3e8:    e58d3000    .0..    STR      r3,[r13,#0]
+        0x0000d3ec:    e1a01003    ....    MOV      r1,r3
+        0x0000d3f0:    e1a02003    . ..    MOV      r2,r3
+        0x0000d3f4:    ea000007    ....    B        {pc} + 0x24  ; 0xd418
+        0x0000d3f8:    e5920098    ....    LDR      r0,[r2,#0x98]
+        0x0000d3fc:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d400:    e0221092    ..".    MLA      r2,r2,r0,r1
+        0x0000d404:    e592c4e0    ....    LDR      r12,[r2,#0x4e0]
+        0x0000d408:    e59234dc    .4..    LDR      r3,[r2,#0x4dc]
+        0x0000d40c:    e59214d4    ....    LDR      r1,[r2,#0x4d4]
+        0x0000d410:    e59224d8    .$..    LDR      r2,[r2,#0x4d8]
+        0x0000d414:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000d418:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x0000d41c:    e1a02485    .$..    LSL      r2,r5,#9
+        0x0000d420:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d424:    e59f1030    0...    LDR      r1,[pc,#48]   ; [gdisp = 0xd45c] = 0
+        0x0000d428:    e0232493    .$#.    MLA      r3,r3,r4,r2
+        0x0000d42c:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d430:    e3a00000    ....    MOV      r0,#0
+        0x0000d434:    e0813003    .0..    ADD      r3,r1,r3
+        0x0000d438:    e5933098    .0..    LDR      r3,[r3,#0x98]
+        0x0000d43c:    e0231392    ..#.    MLA      r3,r2,r3,r1
+        0x0000d440:    e5c364d0    .d..    STRB     r6,[r3,#0x4d0]
+        0x0000d444:    ea000002    ....    B        {pc} + 0x10  ; 0xd454
+        0x0000d448:    e3e00001    ....    MVN      r0,#1
+        0x0000d44c:    ea000000    ....    B        {pc} + 0x8  ; 0xd454
+        0x0000d450:    e3e00004    ....    MVN      r0,#4
+        0x0000d454:    e24bd018    ..K.    SUB      r13,r11,#0x18
+        0x0000d458:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x0000d45c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_hue
+    $a
+        0x0000d460:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d464:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000d468:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d46c:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000d470:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d474:    e1a04002    .@..    MOV      r4,r2
+        0x0000d478:    4a000020     ..J    BMI      {pc} + 0x88  ; 0xd500
+        0x0000d47c:    e59fc090    ....    LDR      r12,[pc,#144]  ; [gdisp = 0xd514] = 0
+        0x0000d480:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d484:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d488:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d48c:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d490:    2a00001a    ...*    BCS      {pc} + 0x70  ; 0xd500
+        0x0000d494:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d498:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d49c:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d4a0:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d4a4:    e3130002    ....    TST      r3,#2
+        0x0000d4a8:    0a000016    ....    BEQ      {pc} + 0x60  ; 0xd508
+        0x0000d4ac:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d4b0:    e3530004    ..S.    CMP      r3,#4
+        0x0000d4b4:    1a000013    ....    BNE      {pc} + 0x54  ; 0xd508
+        0x0000d4b8:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d4bc:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d4c0:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d4c4:    e58344e0    .D..    STR      r4,[r3,#0x4e0]
+        0x0000d4c8:    e5900098    ....    LDR      r0,[r0,#0x98]
+        0x0000d4cc:    e022c092    ..".    MLA      r2,r2,r0,r12
+        0x0000d4d0:    e5d214d0    ....    LDRB     r1,[r2,#0x4d0]
+        0x0000d4d4:    e6af3071    q0..    SXTB     r3,r1
+        0x0000d4d8:    e3530001    ..S.    CMP      r3,#1
+        0x0000d4dc:    1a000005    ....    BNE      {pc} + 0x1c  ; 0xd4f8
+        0x0000d4e0:    e592c4e0    ....    LDR      r12,[r2,#0x4e0]
+        0x0000d4e4:    e59234dc    .4..    LDR      r3,[r2,#0x4dc]
+        0x0000d4e8:    e59214d4    ....    LDR      r1,[r2,#0x4d4]
+        0x0000d4ec:    e59224d8    .$..    LDR      r2,[r2,#0x4d8]
+        0x0000d4f0:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000d4f4:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x0000d4f8:    e3a00000    ....    MOV      r0,#0
+        0x0000d4fc:    ea000002    ....    B        {pc} + 0x10  ; 0xd50c
+        0x0000d500:    e3e00001    ....    MVN      r0,#1
+        0x0000d504:    ea000000    ....    B        {pc} + 0x8  ; 0xd50c
+        0x0000d508:    e3e00004    ....    MVN      r0,#4
+        0x0000d50c:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x0000d510:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000d514:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_saturation
+    $a
+        0x0000d518:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d51c:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000d520:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d524:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000d528:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d52c:    e1a04002    .@..    MOV      r4,r2
+        0x0000d530:    4a000020     ..J    BMI      {pc} + 0x88  ; 0xd5b8
+        0x0000d534:    e59fc090    ....    LDR      r12,[pc,#144]  ; [gdisp = 0xd5cc] = 0
+        0x0000d538:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d53c:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d540:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d544:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d548:    2a00001a    ...*    BCS      {pc} + 0x70  ; 0xd5b8
+        0x0000d54c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d550:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d554:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d558:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d55c:    e3130002    ....    TST      r3,#2
+        0x0000d560:    0a000016    ....    BEQ      {pc} + 0x60  ; 0xd5c0
+        0x0000d564:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d568:    e3530004    ..S.    CMP      r3,#4
+        0x0000d56c:    1a000013    ....    BNE      {pc} + 0x54  ; 0xd5c0
+        0x0000d570:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d574:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d578:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d57c:    e58344dc    .D..    STR      r4,[r3,#0x4dc]
+        0x0000d580:    e5900098    ....    LDR      r0,[r0,#0x98]
+        0x0000d584:    e022c092    ..".    MLA      r2,r2,r0,r12
+        0x0000d588:    e5d214d0    ....    LDRB     r1,[r2,#0x4d0]
+        0x0000d58c:    e6af3071    q0..    SXTB     r3,r1
+        0x0000d590:    e3530001    ..S.    CMP      r3,#1
+        0x0000d594:    1a000005    ....    BNE      {pc} + 0x1c  ; 0xd5b0
+        0x0000d598:    e592c4e0    ....    LDR      r12,[r2,#0x4e0]
+        0x0000d59c:    e59234dc    .4..    LDR      r3,[r2,#0x4dc]
+        0x0000d5a0:    e59214d4    ....    LDR      r1,[r2,#0x4d4]
+        0x0000d5a4:    e59224d8    .$..    LDR      r2,[r2,#0x4d8]
+        0x0000d5a8:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000d5ac:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x0000d5b0:    e3a00000    ....    MOV      r0,#0
+        0x0000d5b4:    ea000002    ....    B        {pc} + 0x10  ; 0xd5c4
+        0x0000d5b8:    e3e00001    ....    MVN      r0,#1
+        0x0000d5bc:    ea000000    ....    B        {pc} + 0x8  ; 0xd5c4
+        0x0000d5c0:    e3e00004    ....    MVN      r0,#4
+        0x0000d5c4:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x0000d5c8:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000d5cc:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_contrast
+    $a
+        0x0000d5d0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d5d4:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000d5d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d5dc:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000d5e0:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d5e4:    e1a04002    .@..    MOV      r4,r2
+        0x0000d5e8:    4a000020     ..J    BMI      {pc} + 0x88  ; 0xd670
+        0x0000d5ec:    e59fc090    ....    LDR      r12,[pc,#144]  ; [gdisp = 0xd684] = 0
+        0x0000d5f0:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d5f4:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d5f8:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d5fc:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d600:    2a00001a    ...*    BCS      {pc} + 0x70  ; 0xd670
+        0x0000d604:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d608:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d60c:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d610:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d614:    e3130002    ....    TST      r3,#2
+        0x0000d618:    0a000016    ....    BEQ      {pc} + 0x60  ; 0xd678
+        0x0000d61c:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d620:    e3530004    ..S.    CMP      r3,#4
+        0x0000d624:    1a000013    ....    BNE      {pc} + 0x54  ; 0xd678
+        0x0000d628:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d62c:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d630:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d634:    e58344d8    .D..    STR      r4,[r3,#0x4d8]
+        0x0000d638:    e5900098    ....    LDR      r0,[r0,#0x98]
+        0x0000d63c:    e022c092    ..".    MLA      r2,r2,r0,r12
+        0x0000d640:    e5d214d0    ....    LDRB     r1,[r2,#0x4d0]
+        0x0000d644:    e6af3071    q0..    SXTB     r3,r1
+        0x0000d648:    e3530001    ..S.    CMP      r3,#1
+        0x0000d64c:    1a000005    ....    BNE      {pc} + 0x1c  ; 0xd668
+        0x0000d650:    e592c4e0    ....    LDR      r12,[r2,#0x4e0]
+        0x0000d654:    e59234dc    .4..    LDR      r3,[r2,#0x4dc]
+        0x0000d658:    e59214d4    ....    LDR      r1,[r2,#0x4d4]
+        0x0000d65c:    e59224d8    .$..    LDR      r2,[r2,#0x4d8]
+        0x0000d660:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000d664:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x0000d668:    e3a00000    ....    MOV      r0,#0
+        0x0000d66c:    ea000002    ....    B        {pc} + 0x10  ; 0xd67c
+        0x0000d670:    e3e00001    ....    MVN      r0,#1
+        0x0000d674:    ea000000    ....    B        {pc} + 0x8  ; 0xd67c
+        0x0000d678:    e3e00004    ....    MVN      r0,#4
+        0x0000d67c:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x0000d680:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000d684:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_bright
+    $a
+        0x0000d688:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d68c:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000d690:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d694:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000d698:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d69c:    e1a04002    .@..    MOV      r4,r2
+        0x0000d6a0:    4a000020     ..J    BMI      {pc} + 0x88  ; 0xd728
+        0x0000d6a4:    e59fc090    ....    LDR      r12,[pc,#144]  ; [gdisp = 0xd73c] = 0
+        0x0000d6a8:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d6ac:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000d6b0:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d6b4:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d6b8:    2a00001a    ...*    BCS      {pc} + 0x70  ; 0xd728
+        0x0000d6bc:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d6c0:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d6c4:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000d6c8:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d6cc:    e3130002    ....    TST      r3,#2
+        0x0000d6d0:    0a000016    ....    BEQ      {pc} + 0x60  ; 0xd730
+        0x0000d6d4:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d6d8:    e3530004    ..S.    CMP      r3,#4
+        0x0000d6dc:    1a000013    ....    BNE      {pc} + 0x54  ; 0xd730
+        0x0000d6e0:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x0000d6e4:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000d6e8:    e023c392    ..#.    MLA      r3,r2,r3,r12
+        0x0000d6ec:    e58344d4    .D..    STR      r4,[r3,#0x4d4]
+        0x0000d6f0:    e5900098    ....    LDR      r0,[r0,#0x98]
+        0x0000d6f4:    e022c092    ..".    MLA      r2,r2,r0,r12
+        0x0000d6f8:    e5d214d0    ....    LDRB     r1,[r2,#0x4d0]
+        0x0000d6fc:    e6af3071    q0..    SXTB     r3,r1
+        0x0000d700:    e3530001    ..S.    CMP      r3,#1
+        0x0000d704:    1a000005    ....    BNE      {pc} + 0x1c  ; 0xd720
+        0x0000d708:    e592c4e0    ....    LDR      r12,[r2,#0x4e0]
+        0x0000d70c:    e59234dc    .4..    LDR      r3,[r2,#0x4dc]
+        0x0000d710:    e59214d4    ....    LDR      r1,[r2,#0x4d4]
+        0x0000d714:    e59224d8    .$..    LDR      r2,[r2,#0x4d8]
+        0x0000d718:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000d71c:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x0000d720:    e3a00000    ....    MOV      r0,#0
+        0x0000d724:    ea000002    ....    B        {pc} + 0x10  ; 0xd734
+        0x0000d728:    e3e00001    ....    MVN      r0,#1
+        0x0000d72c:    ea000000    ....    B        {pc} + 0x8  ; 0xd734
+        0x0000d730:    e3e00004    ....    MVN      r0,#4
+        0x0000d734:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x0000d738:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000d73c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_get_smooth
+    $a
+        0x0000d740:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d744:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000d748:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d74c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000d750:    4a000019    ...J    BMI      {pc} + 0x6c  ; 0xd7bc
+        0x0000d754:    e59f2068    h ..    LDR      r2,[pc,#104]  ; [gdisp = 0xd7c4] = 0
+        0x0000d758:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000d75c:    e0823000    .0..    ADD      r3,r2,r0
+        0x0000d760:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000d764:    e1510003    ..Q.    CMP      r1,r3
+        0x0000d768:    2a000013    ...*    BCS      {pc} + 0x54  ; 0xd7bc
+        0x0000d76c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000d770:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000d774:    e0820003    ....    ADD      r0,r2,r3
+        0x0000d778:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000d77c:    e3130002    ....    TST      r3,#2
+        0x0000d780:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xd7ac
+        0x0000d784:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000d788:    e3530004    ..S.    CMP      r3,#4
+        0x0000d78c:    1a000002    ....    BNE      {pc} + 0x10  ; 0xd79c
+        0x0000d790:    e5900098    ....    LDR      r0,[r0,#0x98]
+        0x0000d794:    ebfffffe    ....    BL       BSP_disp_scaler_get_smooth  ; 0xfd80 Section #1
+        0x0000d798:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d79c:    e59f0024    $...    LDR      r0,[pc,#36]   ; [([Section 10] + 1930) = 0xd7c8]  = 0x78a
+        0x0000d7a0:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000d7a4:    e3e00004    ....    MVN      r0,#4
+        0x0000d7a8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d7ac:    e59f0018    ....    LDR      r0,[pc,#24]   ; [([Section 10] + 1954) = 0xd7cc]  = 0x7a2
+        0x0000d7b0:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000d7b4:    e3e00003    ....    MVN      r0,#3
+        0x0000d7b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000d7bc:    e3e00001    ....    MVN      r0,#1
+        0x0000d7c0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000d7c4:    00000000    ....    DCD    0 ; gdisp
+        0x0000d7c8:    0000078a    ....    DCD    1930 ; [Section 10]
+        0x0000d7cc:    000007a2    ....    DCD    1954 ; [Section 10]
+    img_sw_para_to_reg
+    $a
+        0x0000d7d0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000d7d4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000d7d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000d7dc:    e3500000    ..P.    CMP      r0,#0
+        0x0000d7e0:    e1a0c001    ....    MOV      r12,r1
+        0x0000d7e4:    e1a01002    ....    MOV      r1,r2
+        0x0000d7e8:    1a000019    ....    BNE      {pc} + 0x6c  ; 0xd854
+        0x0000d7ec:    e27c3001    .0|.    RSBS     r3,r12,#1
+        0x0000d7f0:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000d7f4:    e352000e    ..R.    CMP      r2,#0xe
+        0x0000d7f8:    035c0000    ..\.    CMPEQ    r12,#0
+        0x0000d7fc:    0a00008d    ....    BEQ      {pc} + 0x23c  ; 0xda38
+        0x0000d800:    e352000c    ..R.    CMP      r2,#0xc
+        0x0000d804:    13a00000    ....    MOVNE    r0,#0
+        0x0000d808:    03a00001    ....    MOVEQ    r0,#1
+        0x0000d80c:    e1130000    ....    TST      r3,r0
+        0x0000d810:    1a00008a    ....    BNE      {pc} + 0x230  ; 0xda40
+        0x0000d814:    e352000b    ..R.    CMP      r2,#0xb
+        0x0000d818:    13a02000    . ..    MOVNE    r2,#0
+        0x0000d81c:    03a02001    . ..    MOVEQ    r2,#1
+        0x0000d820:    e1130002    ....    TST      r3,r2
+        0x0000d824:    1a000087    ....    BNE      {pc} + 0x224  ; 0xda48
+        0x0000d828:    e35c0001    ..\.    CMP      r12,#1
+        0x0000d82c:    13a03000    .0..    MOVNE    r3,#0
+        0x0000d830:    03a03001    .0..    MOVEQ    r3,#1
+        0x0000d834:    e1130000    ....    TST      r3,r0
+        0x0000d838:    1a000084    ....    BNE      {pc} + 0x218  ; 0xda50
+        0x0000d83c:    e0134002    .@..    ANDS     r4,r3,r2
+        0x0000d840:    1a000084    ....    BNE      {pc} + 0x218  ; 0xda58
+        0x0000d844:    e59f0214    ....    LDR      r0,[pc,#532]  ; [([Section 10] + 1973) = 0xda60]  = 0x7b5
+        0x0000d848:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000d84c:    e1a00004    ....    MOV      r0,r4
+        0x0000d850:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000d854:    e3500001    ..P.    CMP      r0,#1
+        0x0000d858:    1a00002a    *...    BNE      {pc} + 0xb0  ; 0xd908
+        0x0000d85c:    e27c3001    .0|.    RSBS     r3,r12,#1
+        0x0000d860:    33a03000    .0.3    MOVCC    r3,#0
+        0x0000d864:    e352000f    ..R.    CMP      r2,#0xf
+        0x0000d868:    035c0000    ..\.    CMPEQ    r12,#0
+        0x0000d86c:    0a000071    q...    BEQ      {pc} + 0x1cc  ; 0xda38
+        0x0000d870:    e3520010    ..R.    CMP      r2,#0x10
+        0x0000d874:    13a03000    .0..    MOVNE    r3,#0
+        0x0000d878:    02033001    .0..    ANDEQ    r3,r3,#1
+        0x0000d87c:    e3530000    ..S.    CMP      r3,#0
+        0x0000d880:    1a00006e    n...    BNE      {pc} + 0x1c0  ; 0xda40
+        0x0000d884:    e35c0001    ..\.    CMP      r12,#1
+        0x0000d888:    13a02000    . ..    MOVNE    r2,#0
+        0x0000d88c:    03a02001    . ..    MOVEQ    r2,#1
+        0x0000d890:    e3510003    ..Q.    CMP      r1,#3
+        0x0000d894:    035c0001    ..\.    CMPEQ    r12,#1
+        0x0000d898:    0a000066    f...    BEQ      {pc} + 0x1a0  ; 0xda38
+        0x0000d89c:    e3510004    ..Q.    CMP      r1,#4
+        0x0000d8a0:    13a03000    .0..    MOVNE    r3,#0
+        0x0000d8a4:    02023001    .0..    ANDEQ    r3,r2,#1
+        0x0000d8a8:    e3530000    ..S.    CMP      r3,#0
+        0x0000d8ac:    1a000063    c...    BNE      {pc} + 0x194  ; 0xda40
+        0x0000d8b0:    e3510005    ..Q.    CMP      r1,#5
+        0x0000d8b4:    13a03000    .0..    MOVNE    r3,#0
+        0x0000d8b8:    02023001    .0..    ANDEQ    r3,r2,#1
+        0x0000d8bc:    e3530000    ..S.    CMP      r3,#0
+        0x0000d8c0:    1a000060    `...    BNE      {pc} + 0x188  ; 0xda48
+        0x0000d8c4:    e3510006    ..Q.    CMP      r1,#6
+        0x0000d8c8:    13a03000    .0..    MOVNE    r3,#0
+        0x0000d8cc:    02023001    .0..    ANDEQ    r3,r2,#1
+        0x0000d8d0:    e3530000    ..S.    CMP      r3,#0
+        0x0000d8d4:    1a00005d    ]...    BNE      {pc} + 0x17c  ; 0xda50
+        0x0000d8d8:    e3510007    ..Q.    CMP      r1,#7
+        0x0000d8dc:    13a03000    .0..    MOVNE    r3,#0
+        0x0000d8e0:    02023001    .0..    ANDEQ    r3,r2,#1
+        0x0000d8e4:    e3530000    ..S.    CMP      r3,#0
+        0x0000d8e8:    1a000052    R...    BNE      {pc} + 0x150  ; 0xda38
+        0x0000d8ec:    e3510008    ..Q.    CMP      r1,#8
+        0x0000d8f0:    13a03000    .0..    MOVNE    r3,#0
+        0x0000d8f4:    02023001    .0..    ANDEQ    r3,r2,#1
+        0x0000d8f8:    e3530000    ..S.    CMP      r3,#0
+        0x0000d8fc:    059f0160    `...    LDREQ    r0,[pc,#352]  ; [([Section 10] + 2032) = 0xda64]  = 0x7f0
+        0x0000d900:    1a00004e    N...    BNE      {pc} + 0x140  ; 0xda40
+        0x0000d904:    ea00004a    J...    B        {pc} + 0x130  ; 0xda34
+        0x0000d908:    e3500002    ..P.    CMP      r0,#2
+        0x0000d90c:    1a000017    ....    BNE      {pc} + 0x64  ; 0xd970
+        0x0000d910:    e352000a    ..R.    CMP      r2,#0xa
+        0x0000d914:    0a000047    G...    BEQ      {pc} + 0x124  ; 0xda38
+        0x0000d918:    e3520007    ..R.    CMP      r2,#7
+        0x0000d91c:    0a000047    G...    BEQ      {pc} + 0x124  ; 0xda40
+        0x0000d920:    e3520005    ..R.    CMP      r2,#5
+        0x0000d924:    0a000047    G...    BEQ      {pc} + 0x124  ; 0xda48
+        0x0000d928:    e3520004    ..R.    CMP      r2,#4
+        0x0000d92c:    0a000047    G...    BEQ      {pc} + 0x124  ; 0xda50
+        0x0000d930:    e3520006    ..R.    CMP      r2,#6
+        0x0000d934:    0a000047    G...    BEQ      {pc} + 0x124  ; 0xda58
+        0x0000d938:    e3520000    ..R.    CMP      r2,#0
+        0x0000d93c:    02800003    ....    ADDEQ    r0,r0,#3
+        0x0000d940:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000d944:    e3520001    ..R.    CMP      r2,#1
+        0x0000d948:    03a00006    ....    MOVEQ    r0,#6
+        0x0000d94c:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000d950:    e3520002    ..R.    CMP      r2,#2
+        0x0000d954:    03a00007    ....    MOVEQ    r0,#7
+        0x0000d958:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000d95c:    e3520003    ..R.    CMP      r2,#3
+        0x0000d960:    03a00008    ....    MOVEQ    r0,#8
+        0x0000d964:    159f00fc    ....    LDRNE    r0,[pc,#252]  ; [([Section 10] + 2099) = 0xda68]  = 0x833
+        0x0000d968:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000d96c:    ea000030    0...    B        {pc} + 0xc8  ; 0xda34
+        0x0000d970:    e3500003    ..P.    CMP      r0,#3
+        0x0000d974:    1a000025    %...    BNE      {pc} + 0x9c  ; 0xda10
+        0x0000d978:    e3520000    ..R.    CMP      r2,#0
+        0x0000d97c:    0a00002d    -...    BEQ      {pc} + 0xbc  ; 0xda38
+        0x0000d980:    e3520002    ..R.    CMP      r2,#2
+        0x0000d984:    0a00002f    /...    BEQ      {pc} + 0xc4  ; 0xda48
+        0x0000d988:    e352000d    ..R.    CMP      r2,#0xd
+        0x0000d98c:    0a000029    )...    BEQ      {pc} + 0xac  ; 0xda38
+        0x0000d990:    e352000e    ..R.    CMP      r2,#0xe
+        0x0000d994:    0a000029    )...    BEQ      {pc} + 0xac  ; 0xda40
+        0x0000d998:    e352000f    ..R.    CMP      r2,#0xf
+        0x0000d99c:    0a000025    %...    BEQ      {pc} + 0x9c  ; 0xda38
+        0x0000d9a0:    e3520010    ..R.    CMP      r2,#0x10
+        0x0000d9a4:    0a000025    %...    BEQ      {pc} + 0x9c  ; 0xda40
+        0x0000d9a8:    e3520011    ..R.    CMP      r2,#0x11
+        0x0000d9ac:    0a000021    !...    BEQ      {pc} + 0x8c  ; 0xda38
+        0x0000d9b0:    e3520012    ..R.    CMP      r2,#0x12
+        0x0000d9b4:    0a000021    !...    BEQ      {pc} + 0x8c  ; 0xda40
+        0x0000d9b8:    e3520013    ..R.    CMP      r2,#0x13
+        0x0000d9bc:    0a000021    !...    BEQ      {pc} + 0x8c  ; 0xda48
+        0x0000d9c0:    e3520014    ..R.    CMP      r2,#0x14
+        0x0000d9c4:    0a000021    !...    BEQ      {pc} + 0x8c  ; 0xda50
+        0x0000d9c8:    e3520015    ..R.    CMP      r2,#0x15
+        0x0000d9cc:    0a000019    ....    BEQ      {pc} + 0x6c  ; 0xda38
+        0x0000d9d0:    e3520016    ..R.    CMP      r2,#0x16
+        0x0000d9d4:    0a000019    ....    BEQ      {pc} + 0x6c  ; 0xda40
+        0x0000d9d8:    e3520017    ..R.    CMP      r2,#0x17
+        0x0000d9dc:    0a000019    ....    BEQ      {pc} + 0x6c  ; 0xda48
+        0x0000d9e0:    e3520018    ..R.    CMP      r2,#0x18
+        0x0000d9e4:    0a000019    ....    BEQ      {pc} + 0x6c  ; 0xda50
+        0x0000d9e8:    e3520019    ..R.    CMP      r2,#0x19
+        0x0000d9ec:    0a000011    ....    BEQ      {pc} + 0x4c  ; 0xda38
+        0x0000d9f0:    e352001a    ..R.    CMP      r2,#0x1a
+        0x0000d9f4:    0a000011    ....    BEQ      {pc} + 0x4c  ; 0xda40
+        0x0000d9f8:    e352001b    ..R.    CMP      r2,#0x1b
+        0x0000d9fc:    0a000011    ....    BEQ      {pc} + 0x4c  ; 0xda48
+        0x0000da00:    e352001c    ..R.    CMP      r2,#0x1c
+        0x0000da04:    159f0060    `...    LDRNE    r0,[pc,#96]   ; [([Section 10] + 2153) = 0xda6c]  = 0x869
+        0x0000da08:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xda34
+        0x0000da0c:    ea00000f    ....    B        {pc} + 0x44  ; 0xda50
+        0x0000da10:    e3500004    ..P.    CMP      r0,#4
+        0x0000da14:    11a01000    ....    MOVNE    r1,r0
+        0x0000da18:    159f0050    P...    LDRNE    r0,[pc,#80]   ; [([Section 10] + 2277) = 0xda70]  = 0x8e5
+        0x0000da1c:    1a000004    ....    BNE      {pc} + 0x18  ; 0xda34
+        0x0000da20:    e3510000    ..Q.    CMP      r1,#0
+        0x0000da24:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xda38
+        0x0000da28:    e3510002    ..Q.    CMP      r1,#2
+        0x0000da2c:    159f0040    @...    LDRNE    r0,[pc,#64]   ; [([Section 10] + 2215) = 0xda74]  = 0x8a7
+        0x0000da30:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xda40
+        0x0000da34:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000da38:    e3a00000    ....    MOV      r0,#0
+        0x0000da3c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000da40:    e3a00001    ....    MOV      r0,#1
+        0x0000da44:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000da48:    e3a00002    ....    MOV      r0,#2
+        0x0000da4c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000da50:    e3a00003    ....    MOV      r0,#3
+        0x0000da54:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000da58:    e3a00004    ....    MOV      r0,#4
+        0x0000da5c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000da60:    000007b5    ....    DCD    1973 ; [Section 10]
+        0x0000da64:    000007f0    ....    DCD    2032 ; [Section 10]
+        0x0000da68:    00000833    3...    DCD    2099 ; [Section 10]
+        0x0000da6c:    00000869    i...    DCD    2153 ; [Section 10]
+        0x0000da70:    000008e5    ....    DCD    2277 ; [Section 10]
+        0x0000da74:    000008a7    ....    DCD    2215 ; [Section 10]
+    Yuv_Channel_adjusting
+    $a
+        0x0000da78:    e1a0c00d    ....    MOV      r12,r13
+        0x0000da7c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000da80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000da84:    e3a00000    ....    MOV      r0,#0
+        0x0000da88:    e6ef2072    r ..    UXTB     r2,r2
+        0x0000da8c:    e6ef1071    q...    UXTB     r1,r1
+        0x0000da90:    e1a04003    .@..    MOV      r4,r3
+        0x0000da94:    e59b5004    .P..    LDR      r5,[r11,#4]
+        0x0000da98:    ebffff4c    L...    BL       {pc} - 0x2c8  ; 0xd7d0
+        0x0000da9c:    e3500000    ..P.    CMP      r0,#0
+        0x0000daa0:    03a02004    . ..    MOVEQ    r2,#4
+        0x0000daa4:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xdac0
+        0x0000daa8:    e3500001    ..P.    CMP      r0,#1
+        0x0000daac:    03a02003    . ..    MOVEQ    r2,#3
+        0x0000dab0:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xdac0
+        0x0000dab4:    e3500002    ..P.    CMP      r0,#2
+        0x0000dab8:    03a02002    . ..    MOVEQ    r2,#2
+        0x0000dabc:    13a02000    . ..    MOVNE    r2,#0
+        0x0000dac0:    e5943000    .0..    LDR      r3,[r4,#0]
+        0x0000dac4:    e3a00000    ....    MOV      r0,#0
+        0x0000dac8:    e1a03253    S2..    ASR      r3,r3,r2
+        0x0000dacc:    e1a03213    .2..    LSL      r3,r3,r2
+        0x0000dad0:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000dad4:    e5953000    .0..    LDR      r3,[r5,#0]
+        0x0000dad8:    e1a03233    32..    LSR      r3,r3,r2
+        0x0000dadc:    e1a03213    .2..    LSL      r3,r3,r2
+        0x0000dae0:    e5853000    .0..    STR      r3,[r5,#0]
+        0x0000dae4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    BSP_disp_layer_get_screen_window
+        0x0000dae8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000daec:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000daf0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000daf4:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000daf8:    e1a05002    .P..    MOV      r5,r2
+        0x0000dafc:    4a00001e    ...J    BMI      {pc} + 0x80  ; 0xdb7c
+        0x0000db00:    e59f607c    |`..    LDR      r6,[pc,#124]  ; [gdisp = 0xdb84] = 0
+        0x0000db04:    e1a04480    .D..    LSL      r4,r0,#9
+        0x0000db08:    e0863004    .0..    ADD      r3,r6,r4
+        0x0000db0c:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000db10:    e1510003    ..Q.    CMP      r1,r3
+        0x0000db14:    2a000018    ...*    BCS      {pc} + 0x68  ; 0xdb7c
+        0x0000db18:    e3520000    ..R.    CMP      r2,#0
+        0x0000db1c:    0a000016    ....    BEQ      {pc} + 0x60  ; 0xdb7c
+        0x0000db20:    e3a07060    `p..    MOV      r7,#0x60
+        0x0000db24:    e0234197    .A#.    MLA      r3,r7,r1,r4
+        0x0000db28:    e086c003    ....    ADD      r12,r6,r3
+        0x0000db2c:    e59c3090    .0..    LDR      r3,[r12,#0x90]
+        0x0000db30:    e3130002    ....    TST      r3,#2
+        0x0000db34:    0a00000c    ....    BEQ      {pc} + 0x38  ; 0xdb6c
+        0x0000db38:    e2813001    .0..    ADD      r3,r1,#1
+        0x0000db3c:    e59c20c4    . ..    LDR      r2,[r12,#0xc4]
+        0x0000db40:    e59c10c0    ....    LDR      r1,[r12,#0xc0]
+        0x0000db44:    e3a00000    ....    MOV      r0,#0
+        0x0000db48:    e0234397    .C#.    MLA      r3,r7,r3,r4
+        0x0000db4c:    e585200c    . ..    STR      r2,[r5,#0xc]
+        0x0000db50:    e5851008    ....    STR      r1,[r5,#8]
+        0x0000db54:    e0863003    .0..    ADD      r3,r6,r3
+        0x0000db58:    e593205c    \ ..    LDR      r2,[r3,#0x5c]
+        0x0000db5c:    e5933058    X0..    LDR      r3,[r3,#0x58]
+        0x0000db60:    e5852004    . ..    STR      r2,[r5,#4]
+        0x0000db64:    e5853000    .0..    STR      r3,[r5,#0]
+        0x0000db68:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000db6c:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1954) = 0xdb88]  = 0x7a2
+        0x0000db70:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000db74:    e3e00003    ....    MVN      r0,#3
+        0x0000db78:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000db7c:    e3e00001    ....    MVN      r0,#1
+        0x0000db80:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000db84:    00000000    ....    DCD    0 ; gdisp
+        0x0000db88:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_set_smooth
+    $a
+        0x0000db8c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000db90:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000db94:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000db98:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000db9c:    4a00001b    ...J    BMI      {pc} + 0x74  ; 0xdc10
+        0x0000dba0:    e59fc070    p...    LDR      r12,[pc,#112]  ; [gdisp = 0xdc18] = 0
+        0x0000dba4:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000dba8:    e08c3000    .0..    ADD      r3,r12,r0
+        0x0000dbac:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000dbb0:    e1510003    ..Q.    CMP      r1,r3
+        0x0000dbb4:    2a000015    ...*    BCS      {pc} + 0x5c  ; 0xdc10
+        0x0000dbb8:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000dbbc:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000dbc0:    e08c0003    ....    ADD      r0,r12,r3
+        0x0000dbc4:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0000dbc8:    e3130002    ....    TST      r3,#2
+        0x0000dbcc:    0a00000b    ....    BEQ      {pc} + 0x34  ; 0xdc00
+        0x0000dbd0:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0000dbd4:    e3530004    ..S.    CMP      r3,#4
+        0x0000dbd8:    1a000004    ....    BNE      {pc} + 0x18  ; 0xdbf0
+        0x0000dbdc:    e5900098    ....    LDR      r0,[r0,#0x98]
+        0x0000dbe0:    e1a01002    ....    MOV      r1,r2
+        0x0000dbe4:    ebfffffe    ....    BL       BSP_disp_scaler_set_smooth  ; 0xffc4 Section #1
+        0x0000dbe8:    e3a00000    ....    MOV      r0,#0
+        0x0000dbec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000dbf0:    e59f0024    $...    LDR      r0,[pc,#36]   ; [([Section 10] + 1930) = 0xdc1c]  = 0x78a
+        0x0000dbf4:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000dbf8:    e3e00004    ....    MVN      r0,#4
+        0x0000dbfc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000dc00:    e59f0018    ....    LDR      r0,[pc,#24]   ; [([Section 10] + 1954) = 0xdc20]  = 0x7a2
+        0x0000dc04:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000dc08:    e3e00003    ....    MVN      r0,#3
+        0x0000dc0c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000dc10:    e3e00001    ....    MVN      r0,#1
+        0x0000dc14:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000dc18:    00000000    ....    DCD    0 ; gdisp
+        0x0000dc1c:    0000078a    ....    DCD    1930 ; [Section 10]
+        0x0000dc20:    000007a2    ....    DCD    1954 ; [Section 10]
+    Yuv_Channel_Set_framebuffer
+    $a
+        0x0000dc24:    e1a0c00d    ....    MOV      r12,r13
+        0x0000dc28:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000dc2c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000dc30:    e24dd020     .M.    SUB      r13,r13,#0x20
+        0x0000dc34:    e1a04001    .@..    MOV      r4,r1
+        0x0000dc38:    e1a07000    .p..    MOV      r7,r0
+        0x0000dc3c:    e1a06002    .`..    MOV      r6,r2
+        0x0000dc40:    e5d1101c    ....    LDRB     r1,[r1,#0x1c]
+        0x0000dc44:    e5d42014    . ..    LDRB     r2,[r4,#0x14]
+        0x0000dc48:    e3a00000    ....    MOV      r0,#0
+        0x0000dc4c:    e1a05003    .P..    MOV      r5,r3
+        0x0000dc50:    ebfffede    ....    BL       {pc} - 0x480  ; 0xd7d0
+        0x0000dc54:    e5d4301c    .0..    LDRB     r3,[r4,#0x1c]
+        0x0000dc58:    e5d42018    . ..    LDRB     r2,[r4,#0x18]
+        0x0000dc5c:    e1a01003    ....    MOV      r1,r3
+        0x0000dc60:    e54b303b    ;0K.    STRB     r3,[r11,#-0x3b]
+        0x0000dc64:    e54b003c    <.K.    STRB     r0,[r11,#-0x3c]
+        0x0000dc68:    e3a00001    ....    MOV      r0,#1
+        0x0000dc6c:    ebfffed7    ....    BL       {pc} - 0x49c  ; 0xd7d0
+        0x0000dc70:    e54b003a    :.K.    STRB     r0,[r11,#-0x3a]
+        0x0000dc74:    e5940000    ....    LDR      r0,[r4,#0]
+        0x0000dc78:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0000dc7c:    e50b0038    8...    STR      r0,[r11,#-0x38]
+        0x0000dc80:    e5940004    ....    LDR      r0,[r4,#4]
+        0x0000dc84:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0000dc88:    e50b0034    4...    STR      r0,[r11,#-0x34]
+        0x0000dc8c:    e5940008    ....    LDR      r0,[r4,#8]
+        0x0000dc90:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0000dc94:    e5942024    $ ..    LDR      r2,[r4,#0x24]
+        0x0000dc98:    e594300c    .0..    LDR      r3,[r4,#0xc]
+        0x0000dc9c:    e24b103c    <.K.    SUB      r1,r11,#0x3c
+        0x0000dca0:    e50b6028    (`..    STR      r6,[r11,#-0x28]
+        0x0000dca4:    e50b5024    $P..    STR      r5,[r11,#-0x24]
+        0x0000dca8:    e50b302c    ,0..    STR      r3,[r11,#-0x2c]
+        0x0000dcac:    e54b2020      K.    STRB     r2,[r11,#-0x20]
+        0x0000dcb0:    e50b0030    0...    STR      r0,[r11,#-0x30]
+        0x0000dcb4:    e1a00007    ....    MOV      r0,r7
+        0x0000dcb8:    ebfffffe    ....    BL       DE_BE_YUV_CH_Set_Src  ; 0x6a7c Section #1
+        0x0000dcbc:    e3a00000    ....    MOV      r0,#0
+        0x0000dcc0:    e24bd01c    ..K.    SUB      r13,r11,#0x1c
+        0x0000dcc4:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    Yuv_Channel_Release
+        0x0000dcc8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000dccc:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x0000dcd0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000dcd4:    e24dd024    $.M.    SUB      r13,r13,#0x24
+        0x0000dcd8:    e24b603c    <`K.    SUB      r6,r11,#0x3c
+        0x0000dcdc:    e1a04000    .@..    MOV      r4,r0
+        0x0000dce0:    e1a05001    .P..    MOV      r5,r1
+        0x0000dce4:    e3a01020     ...    MOV      r1,#0x20
+        0x0000dce8:    e1a00006    ....    MOV      r0,r6
+        0x0000dcec:    ebfffffe    ....    BL       __memzero  ;
+        0x0000dcf0:    e1a01006    ....    MOV      r1,r6
+        0x0000dcf4:    e1a00004    ....    MOV      r0,r4
+        0x0000dcf8:    ebfffffe    ....    BL       DE_BE_YUV_CH_Set_Src  ; 0x6a7c Section #1
+        0x0000dcfc:    e1a00004    ....    MOV      r0,r4
+        0x0000dd00:    e3a01000    ....    MOV      r1,#0
+        0x0000dd04:    ebfffffe    ....    BL       DE_BE_YUV_CH_Enable  ; 0x6a40 Section #1
+        0x0000dd08:    e1a01005    ....    MOV      r1,r5
+        0x0000dd0c:    e1a00004    ....    MOV      r0,r4
+        0x0000dd10:    e3a02000    . ..    MOV      r2,#0
+        0x0000dd14:    e1a04484    .D..    LSL      r4,r4,#9
+        0x0000dd18:    ebfffffe    ....    BL       DE_BE_Layer_Yuv_Ch_Enable  ; 0x684c Section #1
+        0x0000dd1c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000dd20:    e59f202c    , ..    LDR      r2,[pc,#44]   ; [gdisp = 0xdd54] = 0
+        0x0000dd24:    e0254593    .E%.    MLA      r5,r3,r5,r4
+        0x0000dd28:    e0824004    .@..    ADD      r4,r2,r4
+        0x0000dd2c:    e3a03000    .0..    MOV      r3,#0
+        0x0000dd30:    e1a00003    ....    MOV      r0,r3
+        0x0000dd34:    e0822005    . ..    ADD      r2,r2,r5
+        0x0000dd38:    e2822090    . ..    ADD      r2,r2,#0x90
+        0x0000dd3c:    e5c23004    .0..    STRB     r3,[r2,#4]
+        0x0000dd40:    e5943050    P0..    LDR      r3,[r4,#0x50]
+        0x0000dd44:    e3c33010    .0..    BIC      r3,r3,#0x10
+        0x0000dd48:    e5843050    P0..    STR      r3,[r4,#0x50]
+        0x0000dd4c:    e24bd018    ..K.    SUB      r13,r11,#0x18
+        0x0000dd50:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x0000dd54:    00000000    ....    DCD    0 ; gdisp
+    Yuv_Channel_Request
+    $a
+        0x0000dd58:    e1a0c00d    ....    MOV      r12,r13
+        0x0000dd5c:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x0000dd60:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000dd64:    e59fa05c    \...    LDR      r10,[pc,#92]   ; [gdisp = 0xddc8] = 0
+        0x0000dd68:    e1a07480    .t..    LSL      r7,r0,#9
+        0x0000dd6c:    e1a05000    .P..    MOV      r5,r0
+        0x0000dd70:    e1a06001    .`..    MOV      r6,r1
+        0x0000dd74:    e08a4007    .@..    ADD      r4,r10,r7
+        0x0000dd78:    e5943050    P0..    LDR      r3,[r4,#0x50]
+        0x0000dd7c:    e2138010    ....    ANDS     r8,r3,#0x10
+        0x0000dd80:    13e00005    ....    MVNNE    r0,#5
+        0x0000dd84:    189dadf0    ....    LDMNE    r13,{r4-r8,r10,r11,r13,pc}
+        0x0000dd88:    e3a01001    ....    MOV      r1,#1
+        0x0000dd8c:    ebfffffe    ....    BL       DE_BE_YUV_CH_Enable  ; 0x6a40 Section #1
+        0x0000dd90:    e1a00005    ....    MOV      r0,r5
+        0x0000dd94:    e1a01006    ....    MOV      r1,r6
+        0x0000dd98:    e3a02001    . ..    MOV      r2,#1
+        0x0000dd9c:    ebfffffe    ....    BL       DE_BE_Layer_Yuv_Ch_Enable  ; 0x684c Section #1
+        0x0000dda0:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000dda4:    e0237693    .v#.    MLA      r3,r3,r6,r7
+        0x0000dda8:    e3a02001    . ..    MOV      r2,#1
+        0x0000ddac:    e1a00008    ....    MOV      r0,r8
+        0x0000ddb0:    e08a3003    .0..    ADD      r3,r10,r3
+        0x0000ddb4:    e5c32094    . ..    STRB     r2,[r3,#0x94]
+        0x0000ddb8:    e5943050    P0..    LDR      r3,[r4,#0x50]
+        0x0000ddbc:    e3833010    .0..    ORR      r3,r3,#0x10
+        0x0000ddc0:    e5843050    P0..    STR      r3,[r4,#0x50]
+        0x0000ddc4:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x0000ddc8:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_set_para
+    $a
+        0x0000ddcc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ddd0:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000ddd4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ddd8:    e24dd0c4    ..M.    SUB      r13,r13,#0xc4
+        0x0000dddc:    e2518064    d.Q.    SUBS     r8,r1,#0x64
+        0x0000dde0:    e1a09002    ....    MOV      r9,r2
+        0x0000dde4:    e1a0a000    ....    MOV      r10,r0
+        0x0000dde8:    4a00014e    N..J    BMI      {pc} + 0x540  ; 0xe328
+        0x0000ddec:    e59f1544    D...    LDR      r1,[pc,#1348] ; [gdisp = 0xe338] = 0
+        0x0000ddf0:    e1a02480    .$..    LSL      r2,r0,#9
+        0x0000ddf4:    e0813002    .0..    ADD      r3,r1,r2
+        0x0000ddf8:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000ddfc:    e1580003    ..X.    CMP      r8,r3
+        0x0000de00:    2a000148    H..*    BCS      {pc} + 0x528  ; 0xe328
+        0x0000de04:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000de08:    e0232893    .(#.    MLA      r3,r3,r8,r2
+        0x0000de0c:    e0813003    .0..    ADD      r3,r1,r3
+        0x0000de10:    e5933090    .0..    LDR      r3,[r3,#0x90]
+        0x0000de14:    e3130002    ....    TST      r3,#2
+        0x0000de18:    0a00013e    >...    BEQ      {pc} + 0x500  ; 0xe318
+        0x0000de1c:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000de20:    e5993000    .0..    LDR      r3,[r9,#0]
+        0x0000de24:    e3530000    ..S.    CMP      r3,#0
+        0x0000de28:    1a000003    ....    BNE      {pc} + 0x14  ; 0xde3c
+        0x0000de2c:    e5990040    @...    LDR      r0,[r9,#0x40]
+        0x0000de30:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0000de34:    e3500001    ..P.    CMP      r0,#1
+        0x0000de38:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0xde68
+        0x0000de3c:    e1a0248a    .$..    LSL      r2,r10,#9
+        0x0000de40:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000de44:    e0232893    .(#.    MLA      r3,r3,r8,r2
+        0x0000de48:    e59f24ec    .$..    LDR      r2,[pc,#1260] ; [(gdisp + 144) = 0xe33c]  = 0x90
+        0x0000de4c:    e0833002    .0..    ADD      r3,r3,r2
+        0x0000de50:    e1d330d4    .0..    LDRSB    r3,[r3,#4]
+        0x0000de54:    e3530000    ..S.    CMP      r3,#0
+        0x0000de58:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xde68
+        0x0000de5c:    e1a0000a    ....    MOV      r0,r10
+        0x0000de60:    e6ef1078    x...    UXTB     r1,r8
+        0x0000de64:    ebffff97    ....    BL       {pc} - 0x19c  ; 0xdcc8
+        0x0000de68:    e5993000    .0..    LDR      r3,[r9,#0]
+        0x0000de6c:    e3530004    ..S.    CMP      r3,#4
+        0x0000de70:    0a000010    ....    BEQ      {pc} + 0x48  ; 0xdeb8
+        0x0000de74:    e1a0248a    .$..    LSL      r2,r10,#9
+        0x0000de78:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000de7c:    e0232893    .(#.    MLA      r3,r3,r8,r2
+        0x0000de80:    e59f24b0    .$..    LDR      r2,[pc,#1200] ; [gdisp = 0xe338] = 0
+        0x0000de84:    e0824003    .@..    ADD      r4,r2,r3
+        0x0000de88:    e594309c    .0..    LDR      r3,[r4,#0x9c]
+        0x0000de8c:    e3530004    ..S.    CMP      r3,#4
+        0x0000de90:    1a000008    ....    BNE      {pc} + 0x28  ; 0xdeb8
+        0x0000de94:    e3a01001    ....    MOV      r1,#1
+        0x0000de98:    e5940098    ....    LDR      r0,[r4,#0x98]
+        0x0000de9c:    ebfffffe    ....    BL       Scaler_Release  ; 0x10cbc Section #1
+        0x0000dea0:    e1a0000a    ....    MOV      r0,r10
+        0x0000dea4:    e6ef1078    x...    UXTB     r1,r8
+        0x0000dea8:    e3a02000    . ..    MOV      r2,#0
+        0x0000deac:    ebfffffe    ....    BL       DE_BE_Layer_Video_Enable  ; 0x6818 Section #1
+        0x0000deb0:    e3a03000    .0..    MOV      r3,#0
+        0x0000deb4:    e584309c    .0..    STR      r3,[r4,#0x9c]
+        0x0000deb8:    e5993000    .0..    LDR      r3,[r9,#0]
+        0x0000debc:    e3530004    ..S.    CMP      r3,#4
+        0x0000dec0:    1a000014    ....    BNE      {pc} + 0x58  ; 0xdf18
+        0x0000dec4:    e1a0248a    .$..    LSL      r2,r10,#9
+        0x0000dec8:    e283305c    \0..    ADD      r3,r3,#0x5c
+        0x0000decc:    e0232893    .(#.    MLA      r3,r3,r8,r2
+        0x0000ded0:    e59f2460    `$..    LDR      r2,[pc,#1120] ; [gdisp = 0xe338] = 0
+        0x0000ded4:    e0824003    .@..    ADD      r4,r2,r3
+        0x0000ded8:    e594309c    .0..    LDR      r3,[r4,#0x9c]
+        0x0000dedc:    e3530004    ..S.    CMP      r3,#4
+        0x0000dee0:    1a00000c    ....    BNE      {pc} + 0x38  ; 0xdf18
+        0x0000dee4:    e5d420a0    . ..    LDRB     r2,[r4,#0xa0]
+        0x0000dee8:    e5d93004    .0..    LDRB     r3,[r9,#4]
+        0x0000deec:    e1520003    ..R.    CMP      r2,r3
+        0x0000def0:    0a000008    ....    BEQ      {pc} + 0x28  ; 0xdf18
+        0x0000def4:    e3a01001    ....    MOV      r1,#1
+        0x0000def8:    e5940098    ....    LDR      r0,[r4,#0x98]
+        0x0000defc:    ebfffffe    ....    BL       Scaler_Release  ; 0x10cbc Section #1
+        0x0000df00:    e1a0000a    ....    MOV      r0,r10
+        0x0000df04:    e6ef1078    x...    UXTB     r1,r8
+        0x0000df08:    e3a02000    . ..    MOV      r2,#0
+        0x0000df0c:    ebfffffe    ....    BL       DE_BE_Layer_Video_Enable  ; 0x6818 Section #1
+        0x0000df10:    e3a03000    .0..    MOV      r3,#0
+        0x0000df14:    e584309c    .0..    STR      r3,[r4,#0x9c]
+        0x0000df18:    e5992000    . ..    LDR      r2,[r9,#0]
+        0x0000df1c:    e3520004    ..R.    CMP      r2,#4
+        0x0000df20:    e50b20cc    . ..    STR      r2,[r11,#-0xcc]
+        0x0000df24:    1a000069    i...    BNE      {pc} + 0x1ac  ; 0xe0d0
+        0x0000df28:    e1a0348a    .4..    LSL      r3,r10,#9
+        0x0000df2c:    e282205c    \ ..    ADD      r2,r2,#0x5c
+        0x0000df30:    e0223892    .8".    MLA      r2,r2,r8,r3
+        0x0000df34:    e59f33fc    .3..    LDR      r3,[pc,#1020] ; [gdisp = 0xe338] = 0
+        0x0000df38:    e0837002    .p..    ADD      r7,r3,r2
+        0x0000df3c:    e597309c    .0..    LDR      r3,[r7,#0x9c]
+        0x0000df40:    e3530004    ..S.    CMP      r3,#4
+        0x0000df44:    0a00001e    ....    BEQ      {pc} + 0x80  ; 0xdfc4
+        0x0000df48:    e5d90004    ....    LDRB     r0,[r9,#4]
+        0x0000df4c:    ebfffffe    ....    BL       Scaler_Request  ; 0x10da8 Section #1
+        0x0000df50:    e2506000    .`P.    SUBS     r6,r0,#0
+        0x0000df54:    b59f03e4    ....    LDRLT    r0,[pc,#996]  ; [([Section 10] + 2322) = 0xe340]  = 0x912
+        0x0000df58:    b3e04005    .@..    MVNLT    r4,#5
+        0x0000df5c:    ba00006d    m...    BLT      {pc} + 0x1bc  ; 0xe118
+        0x0000df60:    e6ef4078    x@..    UXTB     r4,r8
+        0x0000df64:    e3a0c000    ....    MOV      r12,#0
+        0x0000df68:    e1a0300c    .0..    MOV      r3,r12
+        0x0000df6c:    e3a0200a    . ..    MOV      r2,#0xa
+        0x0000df70:    e6ef5076    vP..    UXTB     r5,r6
+        0x0000df74:    e1a01004    ....    MOV      r1,r4
+        0x0000df78:    e1a0000a    ....    MOV      r0,r10
+        0x0000df7c:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000df80:    ebfffffe    ....    BL       DE_BE_Layer_Set_Format  ; 0x66a4 Section #1
+        0x0000df84:    e1a01004    ....    MOV      r1,r4
+        0x0000df88:    e3a02001    . ..    MOV      r2,#1
+        0x0000df8c:    e1a0000a    ....    MOV      r0,r10
+        0x0000df90:    ebfffffe    ....    BL       DE_BE_Layer_Video_Enable  ; 0x6818 Section #1
+        0x0000df94:    e1a01004    ....    MOV      r1,r4
+        0x0000df98:    e1a0000a    ....    MOV      r0,r10
+        0x0000df9c:    e1a02005    . ..    MOV      r2,r5
+        0x0000dfa0:    ebfffffe    ....    BL       DE_BE_Layer_Set_Pipe  ; 0x68b4 Section #1
+        0x0000dfa4:    e59fc38c    ....    LDR      r12,[pc,#908]  ; [gdisp = 0xe338] = 0
+        0x0000dfa8:    e3a03094    .0..    MOV      r3,#0x94
+        0x0000dfac:    e51be0cc    ....    LDR      r14,[r11,#-0xcc]
+        0x0000dfb0:    e5c750a0    .P..    STRB     r5,[r7,#0xa0]
+        0x0000dfb4:    e023c693    ..#.    MLA      r3,r3,r6,r12
+        0x0000dfb8:    e587e09c    ....    STR      r14,[r7,#0x9c]
+        0x0000dfbc:    e5876098    .`..    STR      r6,[r7,#0x98]
+        0x0000dfc0:    e583a458    X...    STR      r10,[r3,#0x458]
+        0x0000dfc4:    e1a0448a    .D..    LSL      r4,r10,#9
+        0x0000dfc8:    e3a07060    `p..    MOV      r7,#0x60
+        0x0000dfcc:    e59f5364    dS..    LDR      r5,[pc,#868]  ; [gdisp = 0xe338] = 0
+        0x0000dfd0:    e3a03094    .0..    MOV      r3,#0x94
+        0x0000dfd4:    e0274897    .H'.    MLA      r7,r7,r8,r4
+        0x0000dfd8:    e1a02003    . ..    MOV      r2,r3
+        0x0000dfdc:    e24b00c4    ..K.    SUB      r0,r11,#0xc4
+        0x0000dfe0:    e0857007    .p..    ADD      r7,r5,r7
+        0x0000dfe4:    e5971098    ....    LDR      r1,[r7,#0x98]
+        0x0000dfe8:    e0215193    .Q!.    MLA      r1,r3,r1,r5
+        0x0000dfec:    e0855004    .P..    ADD      r5,r5,r4
+        0x0000dff0:    e2811e45    E...    ADD      r1,r1,#0x450
+        0x0000dff4:    ebfffffe    ....    BL       memcpy  ;
+        0x0000dff8:    e599e028    (...    LDR      r14,[r9,#0x28]
+        0x0000dffc:    e289302c    ,0..    ADD      r3,r9,#0x2c
+        0x0000e000:    e24b20c4    . K.    SUB      r2,r11,#0xc4
+        0x0000e004:    e5d5521c    .R..    LDRB     r5,[r5,#0x21c]
+        0x0000e008:    e282c014    ....    ADD      r12,r2,#0x14
+        0x0000e00c:    e1a04003    .@..    MOV      r4,r3
+        0x0000e010:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x0000e014:    e50be0d0    ....    STR      r14,[r11,#-0xd0]
+        0x0000e018:    e599e024    $...    LDR      r14,[r9,#0x24]
+        0x0000e01c:    e6af5075    uP..    SXTB     r5,r5
+        0x0000e020:    e3550001    ..U.    CMP      r5,#1
+        0x0000e024:    e1a0500c    .P..    MOV      r5,r12
+        0x0000e028:    e50be0d4    ....    STR      r14,[r11,#-0xd4]
+        0x0000e02c:    03e06001    .`..    MVNEQ    r6,#1
+        0x0000e030:    13e06000    .`..    MVNNE    r6,#0
+        0x0000e034:    e599e00c    ....    LDR      r14,[r9,#0xc]
+        0x0000e038:    e50be0d8    ....    STR      r14,[r11,#-0xd8]
+        0x0000e03c:    e8a5000f    ....    STM      r5!,{r0-r3}
+        0x0000e040:    e5992010    . ..    LDR      r2,[r9,#0x10]
+        0x0000e044:    e50b20dc    . ..    STR      r2,[r11,#-0xdc]
+        0x0000e048:    e599c018    ....    LDR      r12,[r9,#0x18]
+        0x0000e04c:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x0000e050:    e599e014    ....    LDR      r14,[r9,#0x14]
+        0x0000e054:    e50bc0e0    ....    STR      r12,[r11,#-0xe0]
+        0x0000e058:    e599c020     ...    LDR      r12,[r9,#0x20]
+        0x0000e05c:    e50bc0c8    ....    STR      r12,[r11,#-0xc8]
+        0x0000e060:    e3a0c000    ....    MOV      r12,#0
+        0x0000e064:    e8a5000f    ....    STM      r5!,{r0-r3}
+        0x0000e068:    e51b20c8    . ..    LDR      r2,[r11,#-0xc8]
+        0x0000e06c:    e50bc070    p...    STR      r12,[r11,#-0x70]
+        0x0000e070:    e3a03009    .0..    MOV      r3,#9
+        0x0000e074:    e8940003    ....    LDM      r4,{r0,r1}
+        0x0000e078:    e0066002    .`..    AND      r6,r6,r2
+        0x0000e07c:    e50b3074    t0..    STR      r3,[r11,#-0x74]
+        0x0000e080:    e5896020     `..    STR      r6,[r9,#0x20]
+        0x0000e084:    e51b30d0    .0..    LDR      r3,[r11,#-0xd0]
+        0x0000e088:    e51bc0d4    ....    LDR      r12,[r11,#-0xd4]
+        0x0000e08c:    e51b20d8    . ..    LDR      r2,[r11,#-0xd8]
+        0x0000e090:    e50b304c    L0..    STR      r3,[r11,#-0x4c]
+        0x0000e094:    e50bc050    P...    STR      r12,[r11,#-0x50]
+        0x0000e098:    e51b30dc    .0..    LDR      r3,[r11,#-0xdc]
+        0x0000e09c:    e51bc0e0    ....    LDR      r12,[r11,#-0xe0]
+        0x0000e0a0:    e50b2060    ` ..    STR      r2,[r11,#-0x60]
+        0x0000e0a4:    e8850003    ....    STM      r5,{r0,r1}
+        0x0000e0a8:    e6ef107a    z...    UXTB     r1,r10
+        0x0000e0ac:    e50b305c    \0..    STR      r3,[r11,#-0x5c]
+        0x0000e0b0:    e50be058    X...    STR      r14,[r11,#-0x58]
+        0x0000e0b4:    e50bc054    T...    STR      r12,[r11,#-0x54]
+        0x0000e0b8:    e5d70098    ....    LDRB     r0,[r7,#0x98]
+        0x0000e0bc:    ebfffffe    ....    BL       DE_SCAL_Output_Select  ; 0x5598 Section #1
+        0x0000e0c0:    e5970098    ....    LDR      r0,[r7,#0x98]
+        0x0000e0c4:    e24b10c4    ..K.    SUB      r1,r11,#0xc4
+        0x0000e0c8:    ebfffffe    ....    BL       Scaler_Set_Para  ; 0x1078c Section #1
+        0x0000e0cc:    ea000047    G...    B        {pc} + 0x124  ; 0xe1f0
+        0x0000e0d0:    e5990040    @...    LDR      r0,[r9,#0x40]
+        0x0000e0d4:    e1a0648a    .d..    LSL      r6,r10,#9
+        0x0000e0d8:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0000e0dc:    e59f7254    Tr..    LDR      r7,[pc,#596]  ; [gdisp = 0xe338] = 0
+        0x0000e0e0:    e3500001    ..P.    CMP      r0,#1
+        0x0000e0e4:    1a00001b    ....    BNE      {pc} + 0x74  ; 0xe158
+        0x0000e0e8:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e0ec:    e0236893    .h#.    MLA      r3,r3,r8,r6
+        0x0000e0f0:    e0873003    .0..    ADD      r3,r7,r3
+        0x0000e0f4:    e1d339d4    .9..    LDRSB    r3,[r3,#0x94]
+        0x0000e0f8:    e3530000    ..S.    CMP      r3,#0
+        0x0000e0fc:    1a000008    ....    BNE      {pc} + 0x28  ; 0xe124
+        0x0000e100:    e1a0000a    ....    MOV      r0,r10
+        0x0000e104:    e6ef1078    x...    UXTB     r1,r8
+        0x0000e108:    ebffff12    ....    BL       {pc} - 0x3b0  ; 0xdd58
+        0x0000e10c:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x0000e110:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xe124
+        0x0000e114:    e59f0228    (...    LDR      r0,[pc,#552]  ; [([Section 10] + 2350) = 0xe344]  = 0x92e
+        0x0000e118:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e11c:    e1a0000a    ....    MOV      r0,r10
+        0x0000e120:    ea00007a    z...    B        {pc} + 0x1f0  ; 0xe310
+        0x0000e124:    e5991048    H...    LDR      r1,[r9,#0x48]
+        0x0000e128:    e289300c    .0..    ADD      r3,r9,#0xc
+        0x0000e12c:    e5992040    @ ..    LDR      r2,[r9,#0x40]
+        0x0000e130:    e1a0000a    ....    MOV      r0,r10
+        0x0000e134:    e289c024    $...    ADD      r12,r9,#0x24
+        0x0000e138:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000e13c:    ebfffe4d    M...    BL       {pc} - 0x6c4  ; 0xda78
+        0x0000e140:    e1a0000a    ....    MOV      r0,r10
+        0x0000e144:    e289102c    ,...    ADD      r1,r9,#0x2c
+        0x0000e148:    e599200c    . ..    LDR      r2,[r9,#0xc]
+        0x0000e14c:    e5993010    .0..    LDR      r3,[r9,#0x10]
+        0x0000e150:    ebfffeb3    ....    BL       {pc} - 0x52c  ; 0xdc24
+        0x0000e154:    ea000025    %...    B        {pc} + 0x9c  ; 0xe1f0
+        0x0000e158:    e599002c    ,...    LDR      r0,[r9,#0x2c]
+        0x0000e15c:    e24b502c    ,PK.    SUB      r5,r11,#0x2c
+        0x0000e160:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0000e164:    e5993040    @0..    LDR      r3,[r9,#0x40]
+        0x0000e168:    e5d92044    D ..    LDRB     r2,[r9,#0x44]
+        0x0000e16c:    e3a01000    ....    MOV      r1,#0
+        0x0000e170:    e54b30c4    .0K.    STRB     r3,[r11,#-0xc4]
+        0x0000e174:    e50b00bc    ....    STR      r0,[r11,#-0xbc]
+        0x0000e178:    e3a00003    ....    MOV      r0,#3
+        0x0000e17c:    ebfffd93    ....    BL       {pc} - 0x9ac  ; 0xd7d0
+        0x0000e180:    e5d9304c    L0..    LDRB     r3,[r9,#0x4c]
+        0x0000e184:    e5992038    8 ..    LDR      r2,[r9,#0x38]
+        0x0000e188:    e599c00c    ....    LDR      r12,[r9,#0xc]
+        0x0000e18c:    e5994010    .@..    LDR      r4,[r9,#0x10]
+        0x0000e190:    e5751098    ..u.    LDRB     r1,[r5,#-0x98]!
+        0x0000e194:    e54b30c2    .0K.    STRB     r3,[r11,#-0xc2]
+        0x0000e198:    e50b20c0    . ..    STR      r2,[r11,#-0xc0]
+        0x0000e19c:    e50bc0b8    ....    STR      r12,[r11,#-0xb8]
+        0x0000e1a0:    e50b40b4    .@..    STR      r4,[r11,#-0xb4]
+        0x0000e1a4:    e54b00c3    ..K.    STRB     r0,[r11,#-0xc3]
+        0x0000e1a8:    e1a0000a    ....    MOV      r0,r10
+        0x0000e1ac:    ebfffffe    ....    BL       DE_BE_Format_To_Bpp  ; 0x6564 Section #1
+        0x0000e1b0:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e1b4:    e0236893    .h#.    MLA      r3,r3,r8,r6
+        0x0000e1b8:    e5991038    8...    LDR      r1,[r9,#0x38]
+        0x0000e1bc:    e3a02004    . ..    MOV      r2,#4
+        0x0000e1c0:    e0873003    .0..    ADD      r3,r7,r3
+        0x0000e1c4:    e59330b4    .0..    LDR      r3,[r3,#0xb4]
+        0x0000e1c8:    e0010391    ....    MUL      r1,r1,r3
+        0x0000e1cc:    e0010190    ....    MUL      r1,r0,r1
+        0x0000e1d0:    e599002c    ,...    LDR      r0,[r9,#0x2c]
+        0x0000e1d4:    e2811007    ....    ADD      r1,r1,#7
+        0x0000e1d8:    e1a011a1    ....    LSR      r1,r1,#3
+        0x0000e1dc:    ebfffffe    ....    BL       OSAL_CacheRangeFlush  ; 0x2f54 Section #1
+        0x0000e1e0:    e1a0000a    ....    MOV      r0,r10
+        0x0000e1e4:    e1a02005    . ..    MOV      r2,r5
+        0x0000e1e8:    e6ef1078    x...    UXTB     r1,r8
+        0x0000e1ec:    ebfffffe    ....    BL       DE_BE_Layer_Set_Framebuffer  ; 0x66e8 Section #1
+        0x0000e1f0:    e6ef4078    x@..    UXTB     r4,r8
+        0x0000e1f4:    e5d92000    . ..    LDRB     r2,[r9,#0]
+        0x0000e1f8:    e1a0000a    ....    MOV      r0,r10
+        0x0000e1fc:    e1a01004    ....    MOV      r1,r4
+        0x0000e200:    ebfffffe    ....    BL       DE_BE_Layer_Set_Work_Mode  ; 0x6670 Section #1
+        0x0000e204:    e1a01004    ....    MOV      r1,r4
+        0x0000e208:    e5d92004    . ..    LDRB     r2,[r9,#4]
+        0x0000e20c:    e1a0000a    ....    MOV      r0,r10
+        0x0000e210:    ebfffffe    ....    BL       DE_BE_Layer_Set_Pipe  ; 0x68b4 Section #1
+        0x0000e214:    e1a01004    ....    MOV      r1,r4
+        0x0000e218:    e1d920d6    . ..    LDRSB    r2,[r9,#6]
+        0x0000e21c:    e1a0000a    ....    MOV      r0,r10
+        0x0000e220:    ebfffffe    ....    BL       DE_BE_Layer_Alpha_Enable  ; 0x6930 Section #1
+        0x0000e224:    e1a01004    ....    MOV      r1,r4
+        0x0000e228:    e5d92008    . ..    LDRB     r2,[r9,#8]
+        0x0000e22c:    e1a0000a    ....    MOV      r0,r10
+        0x0000e230:    ebfffffe    ....    BL       DE_BE_Layer_Set_Alpha_Value  ; 0x6974 Section #1
+        0x0000e234:    e1a01004    ....    MOV      r1,r4
+        0x0000e238:    e1d920da    . ..    LDRSB    r2,[r9,#0xa]
+        0x0000e23c:    e1a0000a    ....    MOV      r0,r10
+        0x0000e240:    ebfffffe    ....    BL       DE_BE_Layer_ColorKey_Enable  ; 0x68e8 Section #1
+        0x0000e244:    e1a01004    ....    MOV      r1,r4
+        0x0000e248:    e289201c    . ..    ADD      r2,r9,#0x1c
+        0x0000e24c:    e1a0000a    ....    MOV      r0,r10
+        0x0000e250:    ebfffffe    ....    BL       DE_BE_Layer_Set_Screen_Win  ; 0x67a4 Section #1
+        0x0000e254:    e24b0030    0.K.    SUB      r0,r11,#0x30
+        0x0000e258:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0000e25c:    e1a0248a    .$..    LSL      r2,r10,#9
+        0x0000e260:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e264:    e59f00cc    ....    LDR      r0,[pc,#204]  ; [gdisp = 0xe338] = 0
+        0x0000e268:    e0232893    .(#.    MLA      r3,r3,r8,r2
+        0x0000e26c:    e1a01009    ....    MOV      r1,r9
+        0x0000e270:    e3a02054    T ..    MOV      r2,#0x54
+        0x0000e274:    e0806003    .`..    ADD      r6,r0,r3
+        0x0000e278:    e2864098    .@..    ADD      r4,r6,#0x98
+        0x0000e27c:    e286009c    ....    ADD      r0,r6,#0x9c
+        0x0000e280:    e5d45009    .P..    LDRB     r5,[r4,#9]
+        0x0000e284:    ebfffffe    ....    BL       memcpy  ;
+        0x0000e288:    e596309c    .0..    LDR      r3,[r6,#0x9c]
+        0x0000e28c:    e3530004    ..S.    CMP      r3,#4
+        0x0000e290:    e5c45009    .P..    STRB     r5,[r4,#9]
+        0x0000e294:    e59f409c    .@..    LDR      r4,[pc,#156]  ; [gdisp = 0xe338] = 0
+        0x0000e298:    05993014    .0..    LDREQ    r3,[r9,#0x14]
+        0x0000e29c:    05992018    . ..    LDREQ    r2,[r9,#0x18]
+        0x0000e2a0:    058630b0    .0..    STREQ    r3,[r6,#0xb0]
+        0x0000e2a4:    058620b4    . ..    STREQ    r2,[r6,#0xb4]
+        0x0000e2a8:    e51b0030    0...    LDR      r0,[r11,#-0x30]
+        0x0000e2ac:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000e2b0:    e5990040    @...    LDR      r0,[r9,#0x40]
+        0x0000e2b4:    ebfffffe    ....    BL       de_format_to_bpp  ; 0xd080 Section #1
+        0x0000e2b8:    e5991018    ....    LDR      r1,[r9,#0x18]
+        0x0000e2bc:    e5993038    80..    LDR      r3,[r9,#0x38]
+        0x0000e2c0:    e3a02004    . ..    MOV      r2,#4
+        0x0000e2c4:    e0030193    ....    MUL      r3,r3,r1
+        0x0000e2c8:    e0010390    ....    MUL      r1,r0,r3
+        0x0000e2cc:    e599002c    ,...    LDR      r0,[r9,#0x2c]
+        0x0000e2d0:    e2811007    ....    ADD      r1,r1,#7
+        0x0000e2d4:    e1a011a1    ....    LSR      r1,r1,#3
+        0x0000e2d8:    ebfffffe    ....    BL       OSAL_CacheRangeFlush  ; 0x2f54 Section #1
+        0x0000e2dc:    e1a0248a    .$..    LSL      r2,r10,#9
+        0x0000e2e0:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e2e4:    e1a0000a    ....    MOV      r0,r10
+        0x0000e2e8:    e0232893    .(#.    MLA      r3,r3,r8,r2
+        0x0000e2ec:    e0841003    ....    ADD      r1,r4,r3
+        0x0000e2f0:    e591309c    .0..    LDR      r3,[r1,#0x9c]
+        0x0000e2f4:    e3530004    ..S.    CMP      r3,#4
+        0x0000e2f8:    05913098    .0..    LDREQ    r3,[r1,#0x98]
+        0x0000e2fc:    03a02094    . ..    MOVEQ    r2,#0x94
+        0x0000e300:    00234392    .C#.    MLAEQ    r3,r2,r3,r4
+        0x0000e304:    e3a04000    .@..    MOV      r4,#0
+        0x0000e308:    03a02001    . ..    MOVEQ    r2,#1
+        0x0000e30c:    05c32454    T$..    STRBEQ   r2,[r3,#0x454]
+        0x0000e310:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000e314:    ea000004    ....    B        {pc} + 0x18  ; 0xe32c
+        0x0000e318:    e59f0028    (...    LDR      r0,[pc,#40]   ; [([Section 10] + 1954) = 0xe348]  = 0x7a2
+        0x0000e31c:    e3e04003    .@..    MVN      r4,#3
+        0x0000e320:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e324:    ea000000    ....    B        {pc} + 0x8  ; 0xe32c
+        0x0000e328:    e3e04001    .@..    MVN      r4,#1
+        0x0000e32c:    e1a00004    ....    MOV      r0,r4
+        0x0000e330:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000e334:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0000e338:    00000000    ....    DCD    0 ; gdisp
+        0x0000e33c:    00000090    ....    DCD    144 ; gdisp
+        0x0000e340:    00000912    ....    DCD    2322 ; [Section 10]
+        0x0000e344:    0000092e    ....    DCD    2350 ; [Section 10]
+        0x0000e348:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_set_screen_window
+    $a
+        0x0000e34c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000e350:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000e354:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000e358:    e24dd01c    ..M.    SUB      r13,r13,#0x1c
+        0x0000e35c:    e251a064    d.Q.    SUBS     r10,r1,#0x64
+        0x0000e360:    e1a06002    .`..    MOV      r6,r2
+        0x0000e364:    e1a08000    ....    MOV      r8,r0
+        0x0000e368:    4a000068    h..J    BMI      {pc} + 0x1a8  ; 0xe510
+        0x0000e36c:    e59f11ac    ....    LDR      r1,[pc,#428]  ; [gdisp = 0xe520] = 0
+        0x0000e370:    e1a02480    .$..    LSL      r2,r0,#9
+        0x0000e374:    e0815002    .P..    ADD      r5,r1,r2
+        0x0000e378:    e595308c    .0..    LDR      r3,[r5,#0x8c]
+        0x0000e37c:    e15a0003    ..Z.    CMP      r10,r3
+        0x0000e380:    2a000062    b..*    BCS      {pc} + 0x190  ; 0xe510
+        0x0000e384:    e3560000    ..V.    CMP      r6,#0
+        0x0000e388:    059f0194    ....    LDREQ    r0,[pc,#404]  ; [([Section 10] + 2376) = 0xe524]  = 0x948
+        0x0000e38c:    03e04001    .@..    MVNEQ    r4,#1
+        0x0000e390:    0a00005c    \...    BEQ      {pc} + 0x178  ; 0xe508
+        0x0000e394:    e5963008    .0..    LDR      r3,[r6,#8]
+        0x0000e398:    e3530000    ..S.    CMP      r3,#0
+        0x0000e39c:    0a00005b    [...    BEQ      {pc} + 0x174  ; 0xe510
+        0x0000e3a0:    e596300c    .0..    LDR      r3,[r6,#0xc]
+        0x0000e3a4:    e3530000    ..S.    CMP      r3,#0
+        0x0000e3a8:    0a000058    X...    BEQ      {pc} + 0x168  ; 0xe510
+        0x0000e3ac:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e3b0:    e0232a93    .*#.    MLA      r3,r3,r10,r2
+        0x0000e3b4:    e0814003    .@..    ADD      r4,r1,r3
+        0x0000e3b8:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000e3bc:    e3130002    ....    TST      r3,#2
+        0x0000e3c0:    0a00004e    N...    BEQ      {pc} + 0x140  ; 0xe500
+        0x0000e3c4:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000e3c8:    e594309c    .0..    LDR      r3,[r4,#0x9c]
+        0x0000e3cc:    e3530004    ..S.    CMP      r3,#4
+        0x0000e3d0:    1a000013    ....    BNE      {pc} + 0x54  ; 0xe424
+        0x0000e3d4:    e5d5521c    .R..    LDRB     r5,[r5,#0x21c]
+        0x0000e3d8:    e24b102c    ,.K.    SUB      r1,r11,#0x2c
+        0x0000e3dc:    e9960005    ....    LDMIB    r6,{r0,r2}
+        0x0000e3e0:    e6af3075    u0..    SXTB     r3,r5
+        0x0000e3e4:    e596c00c    ....    LDR      r12,[r6,#0xc]
+        0x0000e3e8:    e3530001    ..S.    CMP      r3,#1
+        0x0000e3ec:    e521200c    . !.    STR      r2,[r1,#-0xc]!
+        0x0000e3f0:    03e03001    .0..    MVNEQ    r3,#1
+        0x0000e3f4:    13e03000    .0..    MVNNE    r3,#0
+        0x0000e3f8:    e0033000    .0..    AND      r3,r3,r0
+        0x0000e3fc:    e5863004    .0..    STR      r3,[r6,#4]
+        0x0000e400:    e5940098    ....    LDR      r0,[r4,#0x98]
+        0x0000e404:    e50bc034    4...    STR      r12,[r11,#-0x34]
+        0x0000e408:    ebfffffe    ....    BL       Scaler_Set_Output_Size  ; 0x1027c Section #1
+        0x0000e40c:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x0000e410:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xe424
+        0x0000e414:    e59f010c    ....    LDR      r0,[pc,#268]  ; [([Section 10] + 2426) = 0xe528]  = 0x97a
+        0x0000e418:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e41c:    e1a00008    ....    MOV      r0,r8
+        0x0000e420:    ea000034    4...    B        {pc} + 0xd8  ; 0xe4f8
+        0x0000e424:    e1a02488    .$..    LSL      r2,r8,#9
+        0x0000e428:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e42c:    e59f90ec    ....    LDR      r9,[pc,#236]  ; [gdisp = 0xe520] = 0
+        0x0000e430:    e0272a93    .*'.    MLA      r7,r3,r10,r2
+        0x0000e434:    e0894007    .@..    ADD      r4,r9,r7
+        0x0000e438:    e59450dc    .P..    LDR      r5,[r4,#0xdc]
+        0x0000e43c:    e1a00005    ....    MOV      r0,r5
+        0x0000e440:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0000e444:    e3500001    ..P.    CMP      r0,#1
+        0x0000e448:    1a000009    ....    BNE      {pc} + 0x2c  ; 0xe474
+        0x0000e44c:    e594309c    .0..    LDR      r3,[r4,#0x9c]
+        0x0000e450:    e3530004    ..S.    CMP      r3,#4
+        0x0000e454:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xe474
+        0x0000e458:    e59410e4    ....    LDR      r1,[r4,#0xe4]
+        0x0000e45c:    e1a02005    . ..    MOV      r2,r5
+        0x0000e460:    e28430a8    .0..    ADD      r3,r4,#0xa8
+        0x0000e464:    e1a00008    ....    MOV      r0,r8
+        0x0000e468:    e286c008    ....    ADD      r12,r6,#8
+        0x0000e46c:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000e470:    ebfffd80    ....    BL       {pc} - 0x9f8  ; 0xda78
+        0x0000e474:    e6ef107a    z...    UXTB     r1,r10
+        0x0000e478:    e1a02006    . ..    MOV      r2,r6
+        0x0000e47c:    e1a00008    ....    MOV      r0,r8
+        0x0000e480:    e59f7098    .p..    LDR      r7,[pc,#152]  ; [gdisp = 0xe520] = 0
+        0x0000e484:    ebfffffe    ....    BL       DE_BE_Layer_Set_Screen_Win  ; 0x67a4 Section #1
+        0x0000e488:    e24b0030    0.K.    SUB      r0,r11,#0x30
+        0x0000e48c:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0000e490:    e1a01488    ....    LSL      r1,r8,#9
+        0x0000e494:    e28a3001    .0..    ADD      r3,r10,#1
+        0x0000e498:    e3a02060    ` ..    MOV      r2,#0x60
+        0x0000e49c:    e0201a92    .. .    MLA      r0,r2,r10,r1
+        0x0000e4a0:    e5964000    .@..    LDR      r4,[r6,#0]
+        0x0000e4a4:    e0231392    ..#.    MLA      r3,r2,r3,r1
+        0x0000e4a8:    e596c00c    ....    LDR      r12,[r6,#0xc]
+        0x0000e4ac:    e5962004    . ..    LDR      r2,[r6,#4]
+        0x0000e4b0:    e0875000    .P..    ADD      r5,r7,r0
+        0x0000e4b4:    e5961008    ....    LDR      r1,[r6,#8]
+        0x0000e4b8:    e0873003    .0..    ADD      r3,r7,r3
+        0x0000e4bc:    e51b0030    0...    LDR      r0,[r11,#-0x30]
+        0x0000e4c0:    e585c0c4    ....    STR      r12,[r5,#0xc4]
+        0x0000e4c4:    e583205c    \ ..    STR      r2,[r3,#0x5c]
+        0x0000e4c8:    e5834058    X@..    STR      r4,[r3,#0x58]
+        0x0000e4cc:    e3a04000    .@..    MOV      r4,#0
+        0x0000e4d0:    e58510c0    ....    STR      r1,[r5,#0xc0]
+        0x0000e4d4:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000e4d8:    e595309c    .0..    LDR      r3,[r5,#0x9c]
+        0x0000e4dc:    e1a00008    ....    MOV      r0,r8
+        0x0000e4e0:    e3530004    ..S.    CMP      r3,#4
+        0x0000e4e4:    05953098    .0..    LDREQ    r3,[r5,#0x98]
+        0x0000e4e8:    03a02094    . ..    MOVEQ    r2,#0x94
+        0x0000e4ec:    00237392    .s#.    MLAEQ    r3,r2,r3,r7
+        0x0000e4f0:    03a02001    . ..    MOVEQ    r2,#1
+        0x0000e4f4:    05c32454    T$..    STRBEQ   r2,[r3,#0x454]
+        0x0000e4f8:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000e4fc:    ea000004    ....    B        {pc} + 0x18  ; 0xe514
+        0x0000e500:    e59f0024    $...    LDR      r0,[pc,#36]   ; [([Section 10] + 1954) = 0xe52c]  = 0x7a2
+        0x0000e504:    e3e04003    .@..    MVN      r4,#3
+        0x0000e508:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e50c:    ea000000    ....    B        {pc} + 0x8  ; 0xe514
+        0x0000e510:    e3e04001    .@..    MVN      r4,#1
+        0x0000e514:    e1a00004    ....    MOV      r0,r4
+        0x0000e518:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000e51c:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0000e520:    00000000    ....    DCD    0 ; gdisp
+        0x0000e524:    00000948    H...    DCD    2376 ; [Section 10]
+        0x0000e528:    0000097a    z...    DCD    2426 ; [Section 10]
+        0x0000e52c:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_get_src_window
+    $a
+        0x0000e530:    e1a0c00d    ....    MOV      r12,r13
+        0x0000e534:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000e538:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000e53c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000e540:    e1a04002    .@..    MOV      r4,r2
+        0x0000e544:    4a000026    &..J    BMI      {pc} + 0xa0  ; 0xe5e4
+        0x0000e548:    e59f20a0    . ..    LDR      r2,[pc,#160]  ; [gdisp = 0xe5f0] = 0
+        0x0000e54c:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000e550:    e0823000    .0..    ADD      r3,r2,r0
+        0x0000e554:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000e558:    e1510003    ..Q.    CMP      r1,r3
+        0x0000e55c:    2a000020     ..*    BCS      {pc} + 0x88  ; 0xe5e4
+        0x0000e560:    e3540000    ..T.    CMP      r4,#0
+        0x0000e564:    1a000002    ....    BNE      {pc} + 0x10  ; 0xe574
+        0x0000e568:    e59f0084    ....    LDR      r0,[pc,#132]  ; [([Section 10] + 2456) = 0xe5f4]  = 0x998
+        0x0000e56c:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e570:    ea00001b    ....    B        {pc} + 0x74  ; 0xe5e4
+        0x0000e574:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e578:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x0000e57c:    e0821003    ....    ADD      r1,r2,r3
+        0x0000e580:    e5913090    .0..    LDR      r3,[r1,#0x90]
+        0x0000e584:    e3130002    ....    TST      r3,#2
+        0x0000e588:    0a000011    ....    BEQ      {pc} + 0x4c  ; 0xe5d4
+        0x0000e58c:    e591309c    .0..    LDR      r3,[r1,#0x9c]
+        0x0000e590:    e3530004    ..S.    CMP      r3,#4
+        0x0000e594:    1a000004    ....    BNE      {pc} + 0x18  ; 0xe5ac
+        0x0000e598:    e5910098    ....    LDR      r0,[r1,#0x98]
+        0x0000e59c:    e1a01004    ....    MOV      r1,r4
+        0x0000e5a0:    ebfffffe    ....    BL       Scaler_Get_SclRegn  ; 0xfd18 Section #1
+        0x0000e5a4:    e1a0c000    ....    MOV      r12,r0
+        0x0000e5a8:    ea00000e    ....    B        {pc} + 0x40  ; 0xe5e8
+        0x0000e5ac:    e59100c4    ....    LDR      r0,[r1,#0xc4]
+        0x0000e5b0:    e3a0c000    ....    MOV      r12,#0
+        0x0000e5b4:    e59130a8    .0..    LDR      r3,[r1,#0xa8]
+        0x0000e5b8:    e59120ac    . ..    LDR      r2,[r1,#0xac]
+        0x0000e5bc:    e59110c0    ....    LDR      r1,[r1,#0xc0]
+        0x0000e5c0:    e584000c    ....    STR      r0,[r4,#0xc]
+        0x0000e5c4:    e5843000    .0..    STR      r3,[r4,#0]
+        0x0000e5c8:    e5842004    . ..    STR      r2,[r4,#4]
+        0x0000e5cc:    e5841008    ....    STR      r1,[r4,#8]
+        0x0000e5d0:    ea000004    ....    B        {pc} + 0x18  ; 0xe5e8
+        0x0000e5d4:    e59f001c    ....    LDR      r0,[pc,#28]   ; [([Section 10] + 1954) = 0xe5f8]  = 0x7a2
+        0x0000e5d8:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e5dc:    e3e0c003    ....    MVN      r12,#3
+        0x0000e5e0:    ea000000    ....    B        {pc} + 0x8  ; 0xe5e8
+        0x0000e5e4:    e3e0c001    ....    MVN      r12,#1
+        0x0000e5e8:    e1a0000c    ....    MOV      r0,r12
+        0x0000e5ec:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000e5f0:    00000000    ....    DCD    0 ; gdisp
+        0x0000e5f4:    00000998    ....    DCD    2456 ; [Section 10]
+        0x0000e5f8:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_set_src_window
+    $a
+        0x0000e5fc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000e600:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000e604:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000e608:    e24dd02c    ,.M.    SUB      r13,r13,#0x2c
+        0x0000e60c:    e2519064    d.Q.    SUBS     r9,r1,#0x64
+        0x0000e610:    e1a08002    ....    MOV      r8,r2
+        0x0000e614:    e1a0a000    ....    MOV      r10,r0
+        0x0000e618:    4a000066    f..J    BMI      {pc} + 0x1a0  ; 0xe7b8
+        0x0000e61c:    e59f51a4    .Q..    LDR      r5,[pc,#420]  ; [gdisp = 0xe7c8] = 0
+        0x0000e620:    e1a02480    .$..    LSL      r2,r0,#9
+        0x0000e624:    e0853002    .0..    ADD      r3,r5,r2
+        0x0000e628:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000e62c:    e1590003    ..Y.    CMP      r9,r3
+        0x0000e630:    2a000060    `..*    BCS      {pc} + 0x188  ; 0xe7b8
+        0x0000e634:    e3580000    ..X.    CMP      r8,#0
+        0x0000e638:    0a00005e    ^...    BEQ      {pc} + 0x180  ; 0xe7b8
+        0x0000e63c:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x0000e640:    e3530000    ..S.    CMP      r3,#0
+        0x0000e644:    0a00005b    [...    BEQ      {pc} + 0x174  ; 0xe7b8
+        0x0000e648:    e598300c    .0..    LDR      r3,[r8,#0xc]
+        0x0000e64c:    e3530000    ..S.    CMP      r3,#0
+        0x0000e650:    0a000058    X...    BEQ      {pc} + 0x168  ; 0xe7b8
+        0x0000e654:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e658:    e0242993    .)$.    MLA      r4,r3,r9,r2
+        0x0000e65c:    e0857004    .p..    ADD      r7,r5,r4
+        0x0000e660:    e5973090    .0..    LDR      r3,[r7,#0x90]
+        0x0000e664:    e3130002    ....    TST      r3,#2
+        0x0000e668:    0a00004e    N...    BEQ      {pc} + 0x140  ; 0xe7a8
+        0x0000e66c:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000e670:    e597309c    .0..    LDR      r3,[r7,#0x9c]
+        0x0000e674:    e3530004    ..S.    CMP      r3,#4
+        0x0000e678:    1a00000a    ....    BNE      {pc} + 0x30  ; 0xe6a8
+        0x0000e67c:    e1a01008    ....    MOV      r1,r8
+        0x0000e680:    e5970098    ....    LDR      r0,[r7,#0x98]
+        0x0000e684:    ebfffffe    ....    BL       Scaler_Set_SclRegn  ; 0x100d0 Section #1
+        0x0000e688:    e5973098    .0..    LDR      r3,[r7,#0x98]
+        0x0000e68c:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000e690:    e0235392    .S#.    MLA      r3,r2,r3,r5
+        0x0000e694:    e3a02001    . ..    MOV      r2,#1
+        0x0000e698:    e5c32454    T$..    STRB     r2,[r3,#0x454]
+        0x0000e69c:    e1a06000    .`..    MOV      r6,r0
+        0x0000e6a0:    e1a0000a    ....    MOV      r0,r10
+        0x0000e6a4:    ea00003d    =...    B        {pc} + 0xfc  ; 0xe7a0
+        0x0000e6a8:    e59760dc    .`..    LDR      r6,[r7,#0xdc]
+        0x0000e6ac:    e1a00006    ....    MOV      r0,r6
+        0x0000e6b0:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0000e6b4:    e3500001    ..P.    CMP      r0,#1
+        0x0000e6b8:    1a00000e    ....    BNE      {pc} + 0x40  ; 0xe6f8
+        0x0000e6bc:    e0853004    .0..    ADD      r3,r5,r4
+        0x0000e6c0:    e59710e4    ....    LDR      r1,[r7,#0xe4]
+        0x0000e6c4:    e1a02006    . ..    MOV      r2,r6
+        0x0000e6c8:    e28330a8    .0..    ADD      r3,r3,#0xa8
+        0x0000e6cc:    e085c004    ....    ADD      r12,r5,r4
+        0x0000e6d0:    e1a0000a    ....    MOV      r0,r10
+        0x0000e6d4:    e28cc0c0    ....    ADD      r12,r12,#0xc0
+        0x0000e6d8:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000e6dc:    ebfffce5    ....    BL       {pc} - 0xc64  ; 0xda78
+        0x0000e6e0:    e0851004    ....    ADD      r1,r5,r4
+        0x0000e6e4:    e28110c8    ....    ADD      r1,r1,#0xc8
+        0x0000e6e8:    e1a0000a    ....    MOV      r0,r10
+        0x0000e6ec:    e898000c    ....    LDM      r8,{r2,r3}
+        0x0000e6f0:    ebfffd4b    K...    BL       {pc} - 0xacc  ; 0xdc24
+        0x0000e6f4:    ea000017    ....    B        {pc} + 0x64  ; 0xe758
+        0x0000e6f8:    e59700c8    ....    LDR      r0,[r7,#0xc8]
+        0x0000e6fc:    e28750e0    .P..    ADD      r5,r7,#0xe0
+        0x0000e700:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0000e704:    e59730dc    .0..    LDR      r3,[r7,#0xdc]
+        0x0000e708:    e5d720e0    . ..    LDRB     r2,[r7,#0xe0]
+        0x0000e70c:    e3a01000    ....    MOV      r1,#0
+        0x0000e710:    e54b3048    H0K.    STRB     r3,[r11,#-0x48]
+        0x0000e714:    e50b0040    @...    STR      r0,[r11,#-0x40]
+        0x0000e718:    e3a00003    ....    MOV      r0,#3
+        0x0000e71c:    ebfffc2b    +...    BL       {pc} - 0xf4c  ; 0xd7d0
+        0x0000e720:    e59740dc    .@..    LDR      r4,[r7,#0xdc]
+        0x0000e724:    e5d56008    .`..    LDRB     r6,[r5,#8]
+        0x0000e728:    e24b202c    , K.    SUB      r2,r11,#0x2c
+        0x0000e72c:    e59750d4    .P..    LDR      r5,[r7,#0xd4]
+        0x0000e730:    e6ef1079    y...    UXTB     r1,r9
+        0x0000e734:    e8981008    ....    LDM      r8,{r3,r12}
+        0x0000e738:    e562401c    .@b.    STRB     r4,[r2,#-0x1c]!
+        0x0000e73c:    e54b6046    F`K.    STRB     r6,[r11,#-0x46]
+        0x0000e740:    e50b5044    DP..    STR      r5,[r11,#-0x44]
+        0x0000e744:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x0000e748:    e50bc038    8...    STR      r12,[r11,#-0x38]
+        0x0000e74c:    e54b0047    G.K.    STRB     r0,[r11,#-0x47]
+        0x0000e750:    e1a0000a    ....    MOV      r0,r10
+        0x0000e754:    ebfffffe    ....    BL       DE_BE_Layer_Set_Framebuffer  ; 0x66e8 Section #1
+        0x0000e758:    e24b0030    0.K.    SUB      r0,r11,#0x30
+        0x0000e75c:    e3a06000    .`..    MOV      r6,#0
+        0x0000e760:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0000e764:    e1a0348a    .4..    LSL      r3,r10,#9
+        0x0000e768:    e3a02060    ` ..    MOV      r2,#0x60
+        0x0000e76c:    e598100c    ....    LDR      r1,[r8,#0xc]
+        0x0000e770:    e0223992    .9".    MLA      r2,r2,r9,r3
+        0x0000e774:    e59f304c    L0..    LDR      r3,[pc,#76]   ; [gdisp = 0xe7c8] = 0
+        0x0000e778:    e598c000    ....    LDR      r12,[r8,#0]
+        0x0000e77c:    e9980030    0...    LDMIB    r8,{r4,r5}
+        0x0000e780:    e0833002    .0..    ADD      r3,r3,r2
+        0x0000e784:    e51b0030    0...    LDR      r0,[r11,#-0x30]
+        0x0000e788:    e58310b4    ....    STR      r1,[r3,#0xb4]
+        0x0000e78c:    e583c0a8    ....    STR      r12,[r3,#0xa8]
+        0x0000e790:    e58340ac    .@..    STR      r4,[r3,#0xac]
+        0x0000e794:    e58350b0    .P..    STR      r5,[r3,#0xb0]
+        0x0000e798:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000e79c:    e1a0000a    ....    MOV      r0,r10
+        0x0000e7a0:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000e7a4:    ea000004    ....    B        {pc} + 0x18  ; 0xe7bc
+        0x0000e7a8:    e59f001c    ....    LDR      r0,[pc,#28]   ; [([Section 10] + 1954) = 0xe7cc]  = 0x7a2
+        0x0000e7ac:    e3e06003    .`..    MVN      r6,#3
+        0x0000e7b0:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e7b4:    ea000000    ....    B        {pc} + 0x8  ; 0xe7bc
+        0x0000e7b8:    e3e06001    .`..    MVN      r6,#1
+        0x0000e7bc:    e1a00006    ....    MOV      r0,r6
+        0x0000e7c0:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000e7c4:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0000e7c8:    00000000    ....    DCD    0 ; gdisp
+        0x0000e7cc:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_get_framebuffer
+    $a
+        0x0000e7d0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000e7d4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000e7d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000e7dc:    e251c064    d.Q.    SUBS     r12,r1,#0x64
+        0x0000e7e0:    4a00001f    ...J    BMI      {pc} + 0x84  ; 0xe864
+        0x0000e7e4:    e59f1080    ....    LDR      r1,[pc,#128]  ; [gdisp = 0xe86c] = 0
+        0x0000e7e8:    e1a00480    ....    LSL      r0,r0,#9
+        0x0000e7ec:    e0813000    .0..    ADD      r3,r1,r0
+        0x0000e7f0:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000e7f4:    e15c0003    ..\.    CMP      r12,r3
+        0x0000e7f8:    2a000019    ...*    BCS      {pc} + 0x6c  ; 0xe864
+        0x0000e7fc:    e3520000    ..R.    CMP      r2,#0
+        0x0000e800:    0a000017    ....    BEQ      {pc} + 0x64  ; 0xe864
+        0x0000e804:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e808:    e0200c93    .. .    MLA      r0,r3,r12,r0
+        0x0000e80c:    e081c000    ....    ADD      r12,r1,r0
+        0x0000e810:    e59c3090    .0..    LDR      r3,[r12,#0x90]
+        0x0000e814:    e3130002    ....    TST      r3,#2
+        0x0000e818:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0xe854
+        0x0000e81c:    e59c309c    .0..    LDR      r3,[r12,#0x9c]
+        0x0000e820:    e3530004    ..S.    CMP      r3,#4
+        0x0000e824:    1a000003    ....    BNE      {pc} + 0x14  ; 0xe838
+        0x0000e828:    e59c0098    ....    LDR      r0,[r12,#0x98]
+        0x0000e82c:    e1a01002    ....    MOV      r1,r2
+        0x0000e830:    ebfffffe    ....    BL       Scaler_Get_Framebuffer  ; 0x109f4 Section #1
+        0x0000e834:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000e838:    e0811000    ....    ADD      r1,r1,r0
+        0x0000e83c:    e1a00002    ....    MOV      r0,r2
+        0x0000e840:    e28110c8    ....    ADD      r1,r1,#0xc8
+        0x0000e844:    e3a02028    ( ..    MOV      r2,#0x28
+        0x0000e848:    ebfffffe    ....    BL       memcpy  ;
+        0x0000e84c:    e3a00000    ....    MOV      r0,#0
+        0x0000e850:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000e854:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1954) = 0xe870]  = 0x7a2
+        0x0000e858:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e85c:    e3e00003    ....    MVN      r0,#3
+        0x0000e860:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000e864:    e3e00001    ....    MVN      r0,#1
+        0x0000e868:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000e86c:    00000000    ....    DCD    0 ; gdisp
+        0x0000e870:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_get_para
+    $a
+        0x0000e874:    e1a0c00d    ....    MOV      r12,r13
+        0x0000e878:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000e87c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000e880:    e1a05001    .P..    MOV      r5,r1
+        0x0000e884:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x0000e888:    e1a04002    .@..    MOV      r4,r2
+        0x0000e88c:    e1a06000    .`..    MOV      r6,r0
+        0x0000e890:    4a00002b    +..J    BMI      {pc} + 0xb4  ; 0xe944
+        0x0000e894:    e59f20b0    . ..    LDR      r2,[pc,#176]  ; [gdisp = 0xe94c] = 0
+        0x0000e898:    e1a0c480    ....    LSL      r12,r0,#9
+        0x0000e89c:    e082300c    .0..    ADD      r3,r2,r12
+        0x0000e8a0:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000e8a4:    e1510003    ..Q.    CMP      r1,r3
+        0x0000e8a8:    2a000025    %..*    BCS      {pc} + 0x9c  ; 0xe944
+        0x0000e8ac:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e8b0:    e023c193    ..#.    MLA      r3,r3,r1,r12
+        0x0000e8b4:    e082c003    ....    ADD      r12,r2,r3
+        0x0000e8b8:    e59c3090    .0..    LDR      r3,[r12,#0x90]
+        0x0000e8bc:    e3130002    ....    TST      r3,#2
+        0x0000e8c0:    0a00001b    ....    BEQ      {pc} + 0x74  ; 0xe934
+        0x0000e8c4:    e28c2098    . ..    ADD      r2,r12,#0x98
+        0x0000e8c8:    e28c30a0    .0..    ADD      r3,r12,#0xa0
+        0x0000e8cc:    e59cc09c    ....    LDR      r12,[r12,#0x9c]
+        0x0000e8d0:    e5d2e008    ....    LDRB     r14,[r2,#8]
+        0x0000e8d4:    e1d370b4    .p..    LDRH     r7,[r3,#4]
+        0x0000e8d8:    e5d2200a    . ..    LDRB     r2,[r2,#0xa]
+        0x0000e8dc:    e5d33006    .0..    LDRB     r3,[r3,#6]
+        0x0000e8e0:    e584c000    ....    STR      r12,[r4,#0]
+        0x0000e8e4:    e5c4e004    ....    STRB     r14,[r4,#4]
+        0x0000e8e8:    e5c4300a    .0..    STRB     r3,[r4,#0xa]
+        0x0000e8ec:    e5c42006    . ..    STRB     r2,[r4,#6]
+        0x0000e8f0:    e1c470b8    .p..    STRH     r7,[r4,#8]
+        0x0000e8f4:    ebfffffe    ....    BL       Layer_Get_Prio  ; 0xd028 Section #1
+        0x0000e8f8:    e284201c    . ..    ADD      r2,r4,#0x1c
+        0x0000e8fc:    e1a01005    ....    MOV      r1,r5
+        0x0000e900:    e5c40005    ....    STRB     r0,[r4,#5]
+        0x0000e904:    e1a00006    ....    MOV      r0,r6
+        0x0000e908:    ebfffffe    ....    BL       BSP_disp_layer_get_screen_window  ; 0xdae8 Section #1
+        0x0000e90c:    e1a01005    ....    MOV      r1,r5
+        0x0000e910:    e284200c    . ..    ADD      r2,r4,#0xc
+        0x0000e914:    e1a00006    ....    MOV      r0,r6
+        0x0000e918:    ebfffffe    ....    BL       BSP_disp_layer_get_src_window  ; 0xe530 Section #1
+        0x0000e91c:    e1a00006    ....    MOV      r0,r6
+        0x0000e920:    e1a01005    ....    MOV      r1,r5
+        0x0000e924:    e284202c    , ..    ADD      r2,r4,#0x2c
+        0x0000e928:    ebfffffe    ....    BL       BSP_disp_layer_get_framebuffer  ; 0xe7d0 Section #1
+        0x0000e92c:    e3a00000    ....    MOV      r0,#0
+        0x0000e930:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000e934:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1954) = 0xe950]  = 0x7a2
+        0x0000e938:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000e93c:    e3e00003    ....    MVN      r0,#3
+        0x0000e940:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000e944:    e3e00001    ....    MVN      r0,#1
+        0x0000e948:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000e94c:    00000000    ....    DCD    0 ; gdisp
+        0x0000e950:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_set_framebuffer
+    $a
+        0x0000e954:    e1a0c00d    ....    MOV      r12,r13
+        0x0000e958:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000e95c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000e960:    e24dd02c    ,.M.    SUB      r13,r13,#0x2c
+        0x0000e964:    e2519064    d.Q.    SUBS     r9,r1,#0x64
+        0x0000e968:    e1a07002    .p..    MOV      r7,r2
+        0x0000e96c:    e1a0a000    ....    MOV      r10,r0
+        0x0000e970:    4a000079    y..J    BMI      {pc} + 0x1ec  ; 0xeb5c
+        0x0000e974:    e59f11f0    ....    LDR      r1,[pc,#496]  ; [gdisp = 0xeb6c] = 0
+        0x0000e978:    e1a02480    .$..    LSL      r2,r0,#9
+        0x0000e97c:    e0813002    .0..    ADD      r3,r1,r2
+        0x0000e980:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000e984:    e1590003    ..Y.    CMP      r9,r3
+        0x0000e988:    2a000073    s..*    BCS      {pc} + 0x1d4  ; 0xeb5c
+        0x0000e98c:    e3570000    ..W.    CMP      r7,#0
+        0x0000e990:    0a000071    q...    BEQ      {pc} + 0x1cc  ; 0xeb5c
+        0x0000e994:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000e998:    e0232993    .)#.    MLA      r3,r3,r9,r2
+        0x0000e99c:    e0818003    ....    ADD      r8,r1,r3
+        0x0000e9a0:    e2884090    .@..    ADD      r4,r8,#0x90
+        0x0000e9a4:    e5983090    .0..    LDR      r3,[r8,#0x90]
+        0x0000e9a8:    e3130002    ....    TST      r3,#2
+        0x0000e9ac:    0a000066    f...    BEQ      {pc} + 0x1a0  ; 0xeb4c
+        0x0000e9b0:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000e9b4:    e598309c    .0..    LDR      r3,[r8,#0x9c]
+        0x0000e9b8:    e3530004    ..S.    CMP      r3,#4
+        0x0000e9bc:    1a000004    ....    BNE      {pc} + 0x18  ; 0xe9d4
+        0x0000e9c0:    e5980098    ....    LDR      r0,[r8,#0x98]
+        0x0000e9c4:    e1a01007    ....    MOV      r1,r7
+        0x0000e9c8:    ebfffffe    ....    BL       Scaler_Set_Framebuffer  ; 0x10a60 Section #1
+        0x0000e9cc:    e1a04000    .@..    MOV      r4,r0
+        0x0000e9d0:    ea00000d    ....    B        {pc} + 0x3c  ; 0xea0c
+        0x0000e9d4:    e5970014    ....    LDR      r0,[r7,#0x14]
+        0x0000e9d8:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0000e9dc:    e3500001    ..P.    CMP      r0,#1
+        0x0000e9e0:    1a00001f    ....    BNE      {pc} + 0x84  ; 0xea64
+        0x0000e9e4:    e1d430d4    .0..    LDRSB    r3,[r4,#4]
+        0x0000e9e8:    e3530000    ..S.    CMP      r3,#0
+        0x0000e9ec:    1a000008    ....    BNE      {pc} + 0x28  ; 0xea14
+        0x0000e9f0:    e1a0000a    ....    MOV      r0,r10
+        0x0000e9f4:    e6ef1079    y...    UXTB     r1,r9
+        0x0000e9f8:    ebfffcd6    ....    BL       {pc} - 0xca0  ; 0xdd58
+        0x0000e9fc:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x0000ea00:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xea14
+        0x0000ea04:    e59f0164    d...    LDR      r0,[pc,#356]  ; [([Section 10] + 2350) = 0xeb70]  = 0x92e
+        0x0000ea08:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000ea0c:    e1a0000a    ....    MOV      r0,r10
+        0x0000ea10:    ea00004b    K...    B        {pc} + 0x134  ; 0xeb44
+        0x0000ea14:    e1a0348a    .4..    LSL      r3,r10,#9
+        0x0000ea18:    e3a04060    `@..    MOV      r4,#0x60
+        0x0000ea1c:    e59f5148    HQ..    LDR      r5,[pc,#328]  ; [gdisp = 0xeb6c] = 0
+        0x0000ea20:    e1a0000a    ....    MOV      r0,r10
+        0x0000ea24:    e0243994    .9$.    MLA      r4,r4,r9,r3
+        0x0000ea28:    e597101c    ....    LDR      r1,[r7,#0x1c]
+        0x0000ea2c:    e5972014    . ..    LDR      r2,[r7,#0x14]
+        0x0000ea30:    e0853004    .0..    ADD      r3,r5,r4
+        0x0000ea34:    e0855004    .P..    ADD      r5,r5,r4
+        0x0000ea38:    e1a0c003    ....    MOV      r12,r3
+        0x0000ea3c:    e28330a8    .0..    ADD      r3,r3,#0xa8
+        0x0000ea40:    e28cc0c0    ....    ADD      r12,r12,#0xc0
+        0x0000ea44:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000ea48:    ebfffc0a    ....    BL       {pc} - 0xfd0  ; 0xda78
+        0x0000ea4c:    e1a0000a    ....    MOV      r0,r10
+        0x0000ea50:    e1a01007    ....    MOV      r1,r7
+        0x0000ea54:    e59530ac    .0..    LDR      r3,[r5,#0xac]
+        0x0000ea58:    e59520a8    . ..    LDR      r2,[r5,#0xa8]
+        0x0000ea5c:    ebfffc70    p...    BL       {pc} - 0xe38  ; 0xdc24
+        0x0000ea60:    ea000015    ....    B        {pc} + 0x5c  ; 0xeabc
+        0x0000ea64:    e5970000    ....    LDR      r0,[r7,#0]
+        0x0000ea68:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0000ea6c:    e5d72018    . ..    LDRB     r2,[r7,#0x18]
+        0x0000ea70:    e3a01000    ....    MOV      r1,#0
+        0x0000ea74:    e50b0040    @...    STR      r0,[r11,#-0x40]
+        0x0000ea78:    e3a00003    ....    MOV      r0,#3
+        0x0000ea7c:    ebfffb53    S...    BL       {pc} - 0x12ac  ; 0xd7d0
+        0x0000ea80:    e5975014    .P..    LDR      r5,[r7,#0x14]
+        0x0000ea84:    e59860ac    .`..    LDR      r6,[r8,#0xac]
+        0x0000ea88:    e24b202c    , K.    SUB      r2,r11,#0x2c
+        0x0000ea8c:    e5d74020     @..    LDRB     r4,[r7,#0x20]
+        0x0000ea90:    e6ef1079    y...    UXTB     r1,r9
+        0x0000ea94:    e597300c    .0..    LDR      r3,[r7,#0xc]
+        0x0000ea98:    e598c0a8    ....    LDR      r12,[r8,#0xa8]
+        0x0000ea9c:    e562501c    .Pb.    STRB     r5,[r2,#-0x1c]!
+        0x0000eaa0:    e54b4046    F@K.    STRB     r4,[r11,#-0x46]
+        0x0000eaa4:    e50b3044    D0..    STR      r3,[r11,#-0x44]
+        0x0000eaa8:    e50bc03c    <...    STR      r12,[r11,#-0x3c]
+        0x0000eaac:    e50b6038    8`..    STR      r6,[r11,#-0x38]
+        0x0000eab0:    e54b0047    G.K.    STRB     r0,[r11,#-0x47]
+        0x0000eab4:    e1a0000a    ....    MOV      r0,r10
+        0x0000eab8:    ebfffffe    ....    BL       DE_BE_Layer_Set_Framebuffer  ; 0x66e8 Section #1
+        0x0000eabc:    e24b0030    0.K.    SUB      r0,r11,#0x30
+        0x0000eac0:    e59f50a4    .P..    LDR      r5,[pc,#164]  ; [gdisp = 0xeb6c] = 0
+        0x0000eac4:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0000eac8:    e1a0248a    .$..    LSL      r2,r10,#9
+        0x0000eacc:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000ead0:    e1a01007    ....    MOV      r1,r7
+        0x0000ead4:    e0232993    .)#.    MLA      r3,r3,r9,r2
+        0x0000ead8:    e3a02028    ( ..    MOV      r2,#0x28
+        0x0000eadc:    e0850003    ....    ADD      r0,r5,r3
+        0x0000eae0:    e1a04000    .@..    MOV      r4,r0
+        0x0000eae4:    e28000c8    ....    ADD      r0,r0,#0xc8
+        0x0000eae8:    ebfffffe    ....    BL       memcpy  ;
+        0x0000eaec:    e51b0030    0...    LDR      r0,[r11,#-0x30]
+        0x0000eaf0:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000eaf4:    e5970014    ....    LDR      r0,[r7,#0x14]
+        0x0000eaf8:    ebfffffe    ....    BL       de_format_to_bpp  ; 0xd080 Section #1
+        0x0000eafc:    e59410b4    ....    LDR      r1,[r4,#0xb4]
+        0x0000eb00:    e597300c    .0..    LDR      r3,[r7,#0xc]
+        0x0000eb04:    e3a02004    . ..    MOV      r2,#4
+        0x0000eb08:    e0030193    ....    MUL      r3,r3,r1
+        0x0000eb0c:    e0010390    ....    MUL      r1,r0,r3
+        0x0000eb10:    e5970000    ....    LDR      r0,[r7,#0]
+        0x0000eb14:    e2811007    ....    ADD      r1,r1,#7
+        0x0000eb18:    e1a011a1    ....    LSR      r1,r1,#3
+        0x0000eb1c:    ebfffffe    ....    BL       OSAL_CacheRangeFlush  ; 0x2f54 Section #1
+        0x0000eb20:    e594309c    .0..    LDR      r3,[r4,#0x9c]
+        0x0000eb24:    e1a0000a    ....    MOV      r0,r10
+        0x0000eb28:    e3530004    ..S.    CMP      r3,#4
+        0x0000eb2c:    05943098    .0..    LDREQ    r3,[r4,#0x98]
+        0x0000eb30:    03a02094    . ..    MOVEQ    r2,#0x94
+        0x0000eb34:    e3a04000    .@..    MOV      r4,#0
+        0x0000eb38:    00235392    .S#.    MLAEQ    r3,r2,r3,r5
+        0x0000eb3c:    03a02001    . ..    MOVEQ    r2,#1
+        0x0000eb40:    05c32454    T$..    STRBEQ   r2,[r3,#0x454]
+        0x0000eb44:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000eb48:    ea000004    ....    B        {pc} + 0x18  ; 0xeb60
+        0x0000eb4c:    e59f0020     ...    LDR      r0,[pc,#32]   ; [([Section 10] + 1954) = 0xeb74]  = 0x7a2
+        0x0000eb50:    e3e04003    .@..    MVN      r4,#3
+        0x0000eb54:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000eb58:    ea000000    ....    B        {pc} + 0x8  ; 0xeb60
+        0x0000eb5c:    e3e04001    .@..    MVN      r4,#1
+        0x0000eb60:    e1a00004    ....    MOV      r0,r4
+        0x0000eb64:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000eb68:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0000eb6c:    00000000    ....    DCD    0 ; gdisp
+        0x0000eb70:    0000092e    ....    DCD    2350 ; [Section 10]
+        0x0000eb74:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_close
+    $a
+        0x0000eb78:    e1a0c00d    ....    MOV      r12,r13
+        0x0000eb7c:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000eb80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000eb84:    e2515064    dPQ.    SUBS     r5,r1,#0x64
+        0x0000eb88:    e1a06000    .`..    MOV      r6,r0
+        0x0000eb8c:    4a00001e    ...J    BMI      {pc} + 0x80  ; 0xec0c
+        0x0000eb90:    e59f107c    |...    LDR      r1,[pc,#124]  ; [gdisp = 0xec14] = 0
+        0x0000eb94:    e1a02480    .$..    LSL      r2,r0,#9
+        0x0000eb98:    e0813002    .0..    ADD      r3,r1,r2
+        0x0000eb9c:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000eba0:    e1550003    ..U.    CMP      r5,r3
+        0x0000eba4:    2a000018    ...*    BCS      {pc} + 0x68  ; 0xec0c
+        0x0000eba8:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000ebac:    e0232593    .%#.    MLA      r3,r3,r5,r2
+        0x0000ebb0:    e0814003    .@..    ADD      r4,r1,r3
+        0x0000ebb4:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000ebb8:    e3130002    ....    TST      r3,#2
+        0x0000ebbc:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0xebfc
+        0x0000ebc0:    e2133001    .0..    ANDS     r3,r3,#1
+        0x0000ebc4:    01a00003    ....    MOVEQ    r0,r3
+        0x0000ebc8:    089da8f0    ....    LDMEQ    r13,{r4-r7,r11,r13,pc}
+        0x0000ebcc:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000ebd0:    e6ef1075    u...    UXTB     r1,r5
+        0x0000ebd4:    e3a02000    . ..    MOV      r2,#0
+        0x0000ebd8:    e1a00006    ....    MOV      r0,r6
+        0x0000ebdc:    ebfffffe    ....    BL       DE_BE_Layer_Enable  ; 0x69a8 Section #1
+        0x0000ebe0:    e1a00006    ....    MOV      r0,r6
+        0x0000ebe4:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000ebe8:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000ebec:    e3a00000    ....    MOV      r0,#0
+        0x0000ebf0:    e3c33001    .0..    BIC      r3,r3,#1
+        0x0000ebf4:    e5843090    .0..    STR      r3,[r4,#0x90]
+        0x0000ebf8:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000ebfc:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1954) = 0xec18]  = 0x7a2
+        0x0000ec00:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000ec04:    e3e00003    ....    MVN      r0,#3
+        0x0000ec08:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000ec0c:    e3e00001    ....    MVN      r0,#1
+        0x0000ec10:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000ec14:    00000000    ....    DCD    0 ; gdisp
+        0x0000ec18:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_open
+    $a
+        0x0000ec1c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ec20:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000ec24:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ec28:    e2515064    dPQ.    SUBS     r5,r1,#0x64
+        0x0000ec2c:    e1a06000    .`..    MOV      r6,r0
+        0x0000ec30:    4a00001e    ...J    BMI      {pc} + 0x80  ; 0xecb0
+        0x0000ec34:    e59f107c    |...    LDR      r1,[pc,#124]  ; [gdisp = 0xecb8] = 0
+        0x0000ec38:    e1a02480    .$..    LSL      r2,r0,#9
+        0x0000ec3c:    e0813002    .0..    ADD      r3,r1,r2
+        0x0000ec40:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000ec44:    e1550003    ..U.    CMP      r5,r3
+        0x0000ec48:    2a000018    ...*    BCS      {pc} + 0x68  ; 0xecb0
+        0x0000ec4c:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000ec50:    e0232593    .%#.    MLA      r3,r3,r5,r2
+        0x0000ec54:    e0814003    .@..    ADD      r4,r1,r3
+        0x0000ec58:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000ec5c:    e3130002    ....    TST      r3,#2
+        0x0000ec60:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0xeca0
+        0x0000ec64:    e2137001    .p..    ANDS     r7,r3,#1
+        0x0000ec68:    13a00000    ....    MOVNE    r0,#0
+        0x0000ec6c:    189da8f0    ....    LDMNE    r13,{r4-r7,r11,r13,pc}
+        0x0000ec70:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000ec74:    e6ef1075    u...    UXTB     r1,r5
+        0x0000ec78:    e3a02001    . ..    MOV      r2,#1
+        0x0000ec7c:    e1a00006    ....    MOV      r0,r6
+        0x0000ec80:    ebfffffe    ....    BL       DE_BE_Layer_Enable  ; 0x69a8 Section #1
+        0x0000ec84:    e1a00006    ....    MOV      r0,r6
+        0x0000ec88:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000ec8c:    e5943090    .0..    LDR      r3,[r4,#0x90]
+        0x0000ec90:    e1a00007    ....    MOV      r0,r7
+        0x0000ec94:    e3833001    .0..    ORR      r3,r3,#1
+        0x0000ec98:    e5843090    .0..    STR      r3,[r4,#0x90]
+        0x0000ec9c:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000eca0:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 1954) = 0xecbc]  = 0x7a2
+        0x0000eca4:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000eca8:    e3e00003    ....    MVN      r0,#3
+        0x0000ecac:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x0000ecb0:    e3e00001    ....    MVN      r0,#1
+        0x0000ecb4:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000ecb8:    00000000    ....    DCD    0 ; gdisp
+        0x0000ecbc:    000007a2    ....    DCD    1954 ; [Section 10]
+    BSP_disp_layer_release
+    $a
+        0x0000ecc0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ecc4:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000ecc8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000eccc:    e24dd024    $.M.    SUB      r13,r13,#0x24
+        0x0000ecd0:    e2519064    d.Q.    SUBS     r9,r1,#0x64
+        0x0000ecd4:    e1a0a000    ....    MOV      r10,r0
+        0x0000ecd8:    4a000062    b..J    BMI      {pc} + 0x190  ; 0xee68
+        0x0000ecdc:    e59f5190    .Q..    LDR      r5,[pc,#400]  ; [gdisp = 0xee74] = 0
+        0x0000ece0:    e1a04480    .D..    LSL      r4,r0,#9
+        0x0000ece4:    e0853004    .0..    ADD      r3,r5,r4
+        0x0000ece8:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x0000ecec:    e1590003    ..Y.    CMP      r9,r3
+        0x0000ecf0:    2a00005c    \..*    BCS      {pc} + 0x178  ; 0xee68
+        0x0000ecf4:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000ecf8:    e3a03060    `0..    MOV      r3,#0x60
+        0x0000ecfc:    e0234993    .I#.    MLA      r3,r3,r9,r4
+        0x0000ed00:    e0852003    . ..    ADD      r2,r5,r3
+        0x0000ed04:    e2821090    ....    ADD      r1,r2,#0x90
+        0x0000ed08:    e5923090    .0..    LDR      r3,[r2,#0x90]
+        0x0000ed0c:    e3130002    ....    TST      r3,#2
+        0x0000ed10:    0a000016    ....    BEQ      {pc} + 0x60  ; 0xed70
+        0x0000ed14:    e592309c    .0..    LDR      r3,[r2,#0x9c]
+        0x0000ed18:    e3530004    ..S.    CMP      r3,#4
+        0x0000ed1c:    1a000003    ....    BNE      {pc} + 0x14  ; 0xed30
+        0x0000ed20:    e5920098    ....    LDR      r0,[r2,#0x98]
+        0x0000ed24:    e3a01001    ....    MOV      r1,#1
+        0x0000ed28:    ebfffffe    ....    BL       Scaler_Release  ; 0x10cbc Section #1
+        0x0000ed2c:    ea00000f    ....    B        {pc} + 0x44  ; 0xed70
+        0x0000ed30:    e1d130d4    .0..    LDRSB    r3,[r1,#4]
+        0x0000ed34:    e6ef5079    yP..    UXTB     r5,r9
+        0x0000ed38:    e3530000    ..S.    CMP      r3,#0
+        0x0000ed3c:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xed50
+        0x0000ed40:    e1a01005    ....    MOV      r1,r5
+        0x0000ed44:    e1a0000a    ....    MOV      r0,r10
+        0x0000ed48:    ebfffbde    ....    BL       {pc} - 0x1080  ; 0xdcc8
+        0x0000ed4c:    ea000007    ....    B        {pc} + 0x24  ; 0xed70
+        0x0000ed50:    e24b4048    H@K.    SUB      r4,r11,#0x48
+        0x0000ed54:    e3a01018    ....    MOV      r1,#0x18
+        0x0000ed58:    e1a00004    ....    MOV      r0,r4
+        0x0000ed5c:    ebfffffe    ....    BL       __memzero  ;
+        0x0000ed60:    e1a0000a    ....    MOV      r0,r10
+        0x0000ed64:    e1a01005    ....    MOV      r1,r5
+        0x0000ed68:    e1a02004    . ..    MOV      r2,r4
+        0x0000ed6c:    ebfffffe    ....    BL       DE_BE_Layer_Set_Framebuffer  ; 0x66e8 Section #1
+        0x0000ed70:    e1a0748a    .t..    LSL      r7,r10,#9
+        0x0000ed74:    e3a06060    ``..    MOV      r6,#0x60
+        0x0000ed78:    e59f50f4    .P..    LDR      r5,[pc,#244]  ; [gdisp = 0xee74] = 0
+        0x0000ed7c:    e6ef4079    y@..    UXTB     r4,r9
+        0x0000ed80:    e0287996    .y(.    MLA      r8,r6,r9,r7
+        0x0000ed84:    e1a01006    ....    MOV      r1,r6
+        0x0000ed88:    e2880090    ....    ADD      r0,r8,#0x90
+        0x0000ed8c:    e0850000    ....    ADD      r0,r5,r0
+        0x0000ed90:    ebfffffe    ....    BL       __memzero  ;
+        0x0000ed94:    e3a02000    . ..    MOV      r2,#0
+        0x0000ed98:    e1a01004    ....    MOV      r1,r4
+        0x0000ed9c:    e1a0000a    ....    MOV      r0,r10
+        0x0000eda0:    ebfffffe    ....    BL       DE_BE_Layer_Enable  ; 0x69a8 Section #1
+        0x0000eda4:    e1a01004    ....    MOV      r1,r4
+        0x0000eda8:    e3a02000    . ..    MOV      r2,#0
+        0x0000edac:    e1a0000a    ....    MOV      r0,r10
+        0x0000edb0:    ebfffffe    ....    BL       DE_BE_Layer_Video_Enable  ; 0x6818 Section #1
+        0x0000edb4:    e1a01004    ....    MOV      r1,r4
+        0x0000edb8:    e3a02000    . ..    MOV      r2,#0
+        0x0000edbc:    e1a0000a    ....    MOV      r0,r10
+        0x0000edc0:    ebfffffe    ....    BL       DE_BE_Layer_Yuv_Ch_Enable  ; 0x684c Section #1
+        0x0000edc4:    e2892001    . ..    ADD      r2,r9,#1
+        0x0000edc8:    e1a01004    ....    MOV      r1,r4
+        0x0000edcc:    e1a0000a    ....    MOV      r0,r10
+        0x0000edd0:    e0227296    .r".    MLA      r2,r6,r2,r7
+        0x0000edd4:    e0852002    . ..    ADD      r2,r5,r2
+        0x0000edd8:    e0855008    .P..    ADD      r5,r5,r8
+        0x0000eddc:    e2822058    X ..    ADD      r2,r2,#0x58
+        0x0000ede0:    ebfffffe    ....    BL       DE_BE_Layer_Set_Screen_Win  ; 0x67a4 Section #1
+        0x0000ede4:    e1a01004    ....    MOV      r1,r4
+        0x0000ede8:    e3a02000    . ..    MOV      r2,#0
+        0x0000edec:    e1a0000a    ....    MOV      r0,r10
+        0x0000edf0:    ebfffffe    ....    BL       DE_BE_Layer_Set_Prio  ; 0x6880 Section #1
+        0x0000edf4:    e1a01004    ....    MOV      r1,r4
+        0x0000edf8:    e3a02000    . ..    MOV      r2,#0
+        0x0000edfc:    e1a0000a    ....    MOV      r0,r10
+        0x0000ee00:    ebfffffe    ....    BL       DE_BE_Layer_Set_Pipe  ; 0x68b4 Section #1
+        0x0000ee04:    e1a01004    ....    MOV      r1,r4
+        0x0000ee08:    e3a02000    . ..    MOV      r2,#0
+        0x0000ee0c:    e1a0000a    ....    MOV      r0,r10
+        0x0000ee10:    ebfffffe    ....    BL       DE_BE_Layer_Alpha_Enable  ; 0x6930 Section #1
+        0x0000ee14:    e1a01004    ....    MOV      r1,r4
+        0x0000ee18:    e3a02000    . ..    MOV      r2,#0
+        0x0000ee1c:    e1a0000a    ....    MOV      r0,r10
+        0x0000ee20:    ebfffffe    ....    BL       DE_BE_Layer_Set_Alpha_Value  ; 0x6974 Section #1
+        0x0000ee24:    e1a01004    ....    MOV      r1,r4
+        0x0000ee28:    e3a02000    . ..    MOV      r2,#0
+        0x0000ee2c:    e1a0000a    ....    MOV      r0,r10
+        0x0000ee30:    ebfffffe    ....    BL       DE_BE_Layer_ColorKey_Enable  ; 0x68e8 Section #1
+        0x0000ee34:    e1a0000a    ....    MOV      r0,r10
+        0x0000ee38:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000ee3c:    e24b0030    0.K.    SUB      r0,r11,#0x30
+        0x0000ee40:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0000ee44:    e5953090    .0..    LDR      r3,[r5,#0x90]
+        0x0000ee48:    e51b0030    0...    LDR      r0,[r11,#-0x30]
+        0x0000ee4c:    e3e02000    . ..    MVN      r2,#0
+        0x0000ee50:    e3c33003    .0..    BIC      r3,r3,#3
+        0x0000ee54:    e5c520a1    . ..    STRB     r2,[r5,#0xa1]
+        0x0000ee58:    e5853090    .0..    STR      r3,[r5,#0x90]
+        0x0000ee5c:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000ee60:    e3a00000    ....    MOV      r0,#0
+        0x0000ee64:    ea000000    ....    B        {pc} + 0x8  ; 0xee6c
+        0x0000ee68:    e3e00001    ....    MVN      r0,#1
+        0x0000ee6c:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000ee70:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0000ee74:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_layer_request
+    $a
+        0x0000ee78:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ee7c:    e92dd9f0    ..-.    PUSH     {r4-r8,r11,r12,r14,pc}
+        0x0000ee80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ee84:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000ee88:    e1a07000    .p..    MOV      r7,r0
+        0x0000ee8c:    e24b0028    (.K.    SUB      r0,r11,#0x28
+        0x0000ee90:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0000ee94:    e59f3170    p1..    LDR      r3,[pc,#368]  ; [gdisp = 0xf00c] = 0
+        0x0000ee98:    e1a02487    .$..    LSL      r2,r7,#9
+        0x0000ee9c:    e3a08000    ....    MOV      r8,#0
+        0x0000eea0:    e2821050    P...    ADD      r1,r2,#0x50
+        0x0000eea4:    e0832002    . ..    ADD      r2,r3,r2
+        0x0000eea8:    e083e001    ....    ADD      r14,r3,r1
+        0x0000eeac:    e592008c    ....    LDR      r0,[r2,#0x8c]
+        0x0000eeb0:    e1a0200e    . ..    MOV      r2,r14
+        0x0000eeb4:    ea000004    ....    B        {pc} + 0x18  ; 0xeecc
+        0x0000eeb8:    e5923040    @0..    LDR      r3,[r2,#0x40]
+        0x0000eebc:    e2822060    ` ..    ADD      r2,r2,#0x60
+        0x0000eec0:    e2133002    .0..    ANDS     r3,r3,#2
+        0x0000eec4:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xeed8
+        0x0000eec8:    e2888001    ....    ADD      r8,r8,#1
+        0x0000eecc:    e1580000    ..X.    CMP      r8,r0
+        0x0000eed0:    3afffff8    ...:    BCC      {pc} - 0x18  ; 0xeeb8
+        0x0000eed4:    ea000002    ....    B        {pc} + 0x10  ; 0xeee4
+        0x0000eed8:    e3780006    ..x.    CMN      r8,#6
+        0x0000eedc:    11a06003    .`..    MOVNE    r6,r3
+        0x0000eee0:    1a00000c    ....    BNE      {pc} + 0x38  ; 0xef18
+        0x0000eee4:    e59f0124    $...    LDR      r0,[pc,#292]  ; [([Section 10] + 2488) = 0xf010]  = 0x9b8
+        0x0000eee8:    ea000012    ....    B        {pc} + 0x50  ; 0xef38
+        0x0000eeec:    e5d13051    Q0..    LDRB     r3,[r1,#0x51]
+        0x0000eef0:    e2811060    `...    ADD      r1,r1,#0x60
+        0x0000eef4:    e1530006    ..S.    CMP      r3,r6
+        0x0000eef8:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xef14
+        0x0000eefc:    e152000c    ..R.    CMP      r2,r12
+        0x0000ef00:    e2822001    . ..    ADD      r2,r2,#1
+        0x0000ef04:    0a000008    ....    BEQ      {pc} + 0x28  ; 0xef2c
+        0x0000ef08:    e1520000    ..R.    CMP      r2,r0
+        0x0000ef0c:    e240c001    ..@.    SUB      r12,r0,#1
+        0x0000ef10:    3afffff5    ...:    BCC      {pc} - 0x24  ; 0xeeec
+        0x0000ef14:    e2866001    .`..    ADD      r6,r6,#1
+        0x0000ef18:    e1560000    ..V.    CMP      r6,r0
+        0x0000ef1c:    2a000004    ...*    BCS      {pc} + 0x18  ; 0xef34
+        0x0000ef20:    e1a0100e    ....    MOV      r1,r14
+        0x0000ef24:    e3a02000    . ..    MOV      r2,#0
+        0x0000ef28:    eafffff6    ....    B        {pc} - 0x20  ; 0xef08
+        0x0000ef2c:    e3560000    ..V.    CMP      r6,#0
+        0x0000ef30:    aa000005    ....    BGE      {pc} + 0x1c  ; 0xef4c
+        0x0000ef34:    e59f00d8    ....    LDR      r0,[pc,#216]  ; [([Section 10] + 2514) = 0xf014]  = 0x9d2
+        0x0000ef38:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000ef3c:    e51b0028    (...    LDR      r0,[r11,#-0x28]
+        0x0000ef40:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000ef44:    e3a00000    ....    MOV      r0,#0
+        0x0000ef48:    ea00002d    -...    B        {pc} + 0xbc  ; 0xf004
+        0x0000ef4c:    e24b5024    $PK.    SUB      r5,r11,#0x24
+        0x0000ef50:    e6ef4078    x@..    UXTB     r4,r8
+        0x0000ef54:    e6ef6076    v`..    UXTB     r6,r6
+        0x0000ef58:    e5350004    ..5.    LDR      r0,[r5,#-4]!
+        0x0000ef5c:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000ef60:    e1a00007    ....    MOV      r0,r7
+        0x0000ef64:    ebfffffe    ....    BL       BSP_disp_cfg_start  ; 0xca84 Section #1
+        0x0000ef68:    e1a01004    ....    MOV      r1,r4
+        0x0000ef6c:    e3a02000    . ..    MOV      r2,#0
+        0x0000ef70:    e1a00007    ....    MOV      r0,r7
+        0x0000ef74:    ebfffffe    ....    BL       DE_BE_Layer_Enable  ; 0x69a8 Section #1
+        0x0000ef78:    e1a01004    ....    MOV      r1,r4
+        0x0000ef7c:    e1a02006    . ..    MOV      r2,r6
+        0x0000ef80:    e1a00007    ....    MOV      r0,r7
+        0x0000ef84:    ebfffffe    ....    BL       DE_BE_Layer_Set_Prio  ; 0x6880 Section #1
+        0x0000ef88:    e1a01004    ....    MOV      r1,r4
+        0x0000ef8c:    e3a02000    . ..    MOV      r2,#0
+        0x0000ef90:    e1a00007    ....    MOV      r0,r7
+        0x0000ef94:    ebfffffe    ....    BL       DE_BE_Layer_Set_Work_Mode  ; 0x6670 Section #1
+        0x0000ef98:    e1a01004    ....    MOV      r1,r4
+        0x0000ef9c:    e3a02000    . ..    MOV      r2,#0
+        0x0000efa0:    e1a00007    ....    MOV      r0,r7
+        0x0000efa4:    ebfffffe    ....    BL       DE_BE_Layer_Video_Enable  ; 0x6818 Section #1
+        0x0000efa8:    e1a00007    ....    MOV      r0,r7
+        0x0000efac:    ebfffffe    ....    BL       BSP_disp_cfg_finish  ; 0xcab0 Section #1
+        0x0000efb0:    e1a00005    ....    MOV      r0,r5
+        0x0000efb4:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0000efb8:    e1a03487    .4..    LSL      r3,r7,#9
+        0x0000efbc:    e3a04060    `@..    MOV      r4,#0x60
+        0x0000efc0:    e59f5044    DP..    LDR      r5,[pc,#68]   ; [gdisp = 0xf00c] = 0
+        0x0000efc4:    e0243894    .8$.    MLA      r4,r4,r8,r3
+        0x0000efc8:    e3a01054    T...    MOV      r1,#0x54
+        0x0000efcc:    e0850004    ....    ADD      r0,r5,r4
+        0x0000efd0:    e0855004    .P..    ADD      r5,r5,r4
+        0x0000efd4:    e280009c    ....    ADD      r0,r0,#0x9c
+        0x0000efd8:    ebfffffe    ....    BL       __memzero  ;
+        0x0000efdc:    e2853090    .0..    ADD      r3,r5,#0x90
+        0x0000efe0:    e51b0028    (...    LDR      r0,[r11,#-0x28]
+        0x0000efe4:    e3a02000    . ..    MOV      r2,#0
+        0x0000efe8:    e5c560a1    .`..    STRB     r6,[r5,#0xa1]
+        0x0000efec:    e5c32004    . ..    STRB     r2,[r3,#4]
+        0x0000eff0:    e3a03002    .0..    MOV      r3,#2
+        0x0000eff4:    e585209c    . ..    STR      r2,[r5,#0x9c]
+        0x0000eff8:    e5853090    .0..    STR      r3,[r5,#0x90]
+        0x0000effc:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x0000f000:    e2880064    d...    ADD      r0,r8,#0x64
+        0x0000f004:    e24bd020     .K.    SUB      r13,r11,#0x20
+        0x0000f008:    e89da9f0    ....    LDM      r13,{r4-r8,r11,r13,pc}
+    $d
+        0x0000f00c:    00000000    ....    DCD    0 ; gdisp
+        0x0000f010:    000009b8    ....    DCD    2488 ; [Section 10]
+        0x0000f014:    000009d2    ....    DCD    2514 ; [Section 10]
+    LCD_get_init_para
+    $a
+        0x0000f018:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f01c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f020:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f024:    e59f2020      ..    LDR      r2,[pc,#32]   ; [gdisp = 0xf04c] = 0
+        0x0000f028:    e5923010    .0..    LDR      r3,[r2,#0x10]
+        0x0000f02c:    e5803000    .0..    STR      r3,[r0,#0]
+        0x0000f030:    e5923014    .0..    LDR      r3,[r2,#0x14]
+        0x0000f034:    e5803004    .0..    STR      r3,[r0,#4]
+        0x0000f038:    e5923020     0..    LDR      r3,[r2,#0x20]
+        0x0000f03c:    e5803008    .0..    STR      r3,[r0,#8]
+        0x0000f040:    e5923028    (0..    LDR      r3,[r2,#0x28]
+        0x0000f044:    e580300c    .0..    STR      r3,[r0,#0xc]
+        0x0000f048:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f04c:    00000000    ....    DCD    0 ; gdisp
+    LCD_OPEN_FUNC
+    $a
+        0x0000f050:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f054:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000f058:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f05c:    e3a0c02c    ,...    MOV      r12,#0x2c
+        0x0000f060:    e59f4030    0@..    LDR      r4,[pc,#48]   ; [([Section 17] + 18516) = 0xf098]  = 0x4854
+        0x0000f064:    e00c009c    ....    MUL      r12,r12,r0
+        0x0000f068:    e084000c    ....    ADD      r0,r4,r12
+        0x0000f06c:    e5903028    (0..    LDR      r3,[r0,#0x28]
+        0x0000f070:    e08c3183    .1..    ADD      r3,r12,r3,LSL #3
+        0x0000f074:    e7841003    ....    STR      r1,[r4,r3]
+        0x0000f078:    e5903028    (0..    LDR      r3,[r0,#0x28]
+        0x0000f07c:    e08cc183    ....    ADD      r12,r12,r3,LSL #3
+        0x0000f080:    e084400c    .@..    ADD      r4,r4,r12
+        0x0000f084:    e5842004    . ..    STR      r2,[r4,#4]
+        0x0000f088:    e5903028    (0..    LDR      r3,[r0,#0x28]
+        0x0000f08c:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000f090:    e5803028    (0..    STR      r3,[r0,#0x28]
+        0x0000f094:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000f098:    00004854    TH..    DCD    18516 ; [Section 17]
+    LCD_CLOSE_FUNC
+    $a
+        0x0000f09c:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f0a0:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000f0a4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f0a8:    e3a0c02c    ,...    MOV      r12,#0x2c
+        0x0000f0ac:    e59f4034    4@..    LDR      r4,[pc,#52]   ; [([Section 17] + 18516) = 0xf0e8]  = 0x4854
+        0x0000f0b0:    e00c009c    ....    MUL      r12,r12,r0
+        0x0000f0b4:    e084000c    ....    ADD      r0,r4,r12
+        0x0000f0b8:    e5903080    .0..    LDR      r3,[r0,#0x80]
+        0x0000f0bc:    e08c3183    .1..    ADD      r3,r12,r3,LSL #3
+        0x0000f0c0:    e0843003    .0..    ADD      r3,r4,r3
+        0x0000f0c4:    e5831058    X...    STR      r1,[r3,#0x58]
+        0x0000f0c8:    e5903080    .0..    LDR      r3,[r0,#0x80]
+        0x0000f0cc:    e08cc183    ....    ADD      r12,r12,r3,LSL #3
+        0x0000f0d0:    e084400c    .@..    ADD      r4,r4,r12
+        0x0000f0d4:    e584205c    \ ..    STR      r2,[r4,#0x5c]
+        0x0000f0d8:    e5903080    .0..    LDR      r3,[r0,#0x80]
+        0x0000f0dc:    e2833001    .0..    ADD      r3,r3,#1
+        0x0000f0e0:    e5803080    .0..    STR      r3,[r0,#0x80]
+        0x0000f0e4:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000f0e8:    00004854    TH..    DCD    18516 ; [Section 17]
+    Disp_pwm_cfg
+    $a
+        0x0000f0ec:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f0f0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000f0f4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f0f8:    e59f20c8    . ..    LDR      r2,[pc,#200]  ; [([Section 17] + 18516) = 0xf1c8]  = 0x4854
+        0x0000f0fc:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000f100:    e1a04000    .@..    MOV      r4,r0
+        0x0000f104:    e0232093    . #.    MLA      r3,r3,r0,r2
+        0x0000f108:    e593112c    ,...    LDR      r1,[r3,#0x12c]
+        0x0000f10c:    e3510000    ..Q.    CMP      r1,#0
+        0x0000f110:    03a00010    ....    MOVEQ    r0,#0x10
+        0x0000f114:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xf124
+        0x0000f118:    e1a01201    ....    LSL      r1,r1,#4
+        0x0000f11c:    e3050dc0    ....    MOV      r0,#0x5dc0
+        0x0000f120:    ebfffffe    ....    BL       __aeabi_uidiv  ;
+        0x0000f124:    e3a02000    . ..    MOV      r2,#0
+        0x0000f128:    e3a03001    .0..    MOV      r3,#1
+        0x0000f12c:    e1500003    ..P.    CMP      r0,r3
+        0x0000f130:    e1a03083    .0..    LSL      r3,r3,#1
+        0x0000f134:    96ef0072    r...    UXTBLS   r0,r2
+        0x0000f138:    9a000003    ....    BLS      {pc} + 0x14  ; 0xf14c
+        0x0000f13c:    e2822001    . ..    ADD      r2,r2,#1
+        0x0000f140:    e352000d    ..R.    CMP      r2,#0xd
+        0x0000f144:    1afffff8    ....    BNE      {pc} - 0x18  ; 0xf12c
+        0x0000f148:    e3a00004    ....    MOV      r0,#4
+        0x0000f14c:    e59fc078    x...    LDR      r12,[pc,#120]  ; [gdisp = 0xf1cc] = 0
+        0x0000f150:    e08c3484    .4..    ADD      r3,r12,r4,LSL #9
+        0x0000f154:    e5933240    @2..    LDR      r3,[r3,#0x240]
+        0x0000f158:    e3530000    ..S.    CMP      r3,#0
+        0x0000f15c:    1a00000b    ....    BNE      {pc} + 0x34  ; 0xf190
+        0x0000f160:    e59c1028    (...    LDR      r1,[r12,#0x28]
+        0x0000f164:    e3802060    ` ..    ORR      r2,r0,#0x60
+        0x0000f168:    e59130e0    .0..    LDR      r3,[r1,#0xe0]
+        0x0000f16c:    e3c330ff    .0..    BIC      r3,r3,#0xff
+        0x0000f170:    e1822003    . ..    ORR      r2,r2,r3
+        0x0000f174:    e58120e0    . ..    STR      r2,[r1,#0xe0]
+        0x0000f178:    e59c2020      ..    LDR      r2,[r12,#0x20]
+        0x0000f17c:    e5923024    $0..    LDR      r3,[r2,#0x24]
+        0x0000f180:    e3c33c07    .<..    BIC      r3,r3,#0x700
+        0x0000f184:    e3833c02    .<..    ORR      r3,r3,#0x200
+        0x0000f188:    e5823024    $0..    STR      r3,[r2,#0x24]
+        0x0000f18c:    ea00000b    ....    B        {pc} + 0x34  ; 0xf1c0
+        0x0000f190:    e59c2028    ( ..    LDR      r2,[r12,#0x28]
+        0x0000f194:    e59230e0    .0..    LDR      r3,[r2,#0xe0]
+        0x0000f198:    e3c3387f    .8..    BIC      r3,r3,#0x7f0000
+        0x0000f19c:    e3c33902    .9..    BIC      r3,r3,#0x8000
+        0x0000f1a0:    e3833603    .6..    ORR      r3,r3,#0x300000
+        0x0000f1a4:    e1833000    .0..    ORR      r3,r3,r0
+        0x0000f1a8:    e58230e0    .0..    STR      r3,[r2,#0xe0]
+        0x0000f1ac:    e59c2020      ..    LDR      r2,[r12,#0x20]
+        0x0000f1b0:    e5923120     1..    LDR      r3,[r2,#0x120]
+        0x0000f1b4:    e3c33a07    .:..    BIC      r3,r3,#0x7000
+        0x0000f1b8:    e3833a02    .:..    ORR      r3,r3,#0x2000
+        0x0000f1bc:    e5823120     1..    STR      r3,[r2,#0x120]
+        0x0000f1c0:    e3a00000    ....    MOV      r0,#0
+        0x0000f1c4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000f1c8:    00004854    TH..    DCD    18516 ; [Section 17]
+        0x0000f1cc:    00000000    ....    DCD    0 ; gdisp
+    Disp_lcdc_pin_cfg
+    $a
+        0x0000f1d0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f1d4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f1d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f1dc:    e252c000    ..R.    SUBS     r12,r2,#0
+        0x0000f1e0:    0a000033    3...    BEQ      {pc} + 0xd4  ; 0xf2b4
+        0x0000f1e4:    e3500000    ..P.    CMP      r0,#0
+        0x0000f1e8:    1a000016    ....    BNE      {pc} + 0x60  ; 0xf248
+        0x0000f1ec:    e3510004    ..Q.    CMP      r1,#4
+        0x0000f1f0:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xf204
+        0x0000f1f4:    e3510008    ..Q.    CMP      r1,#8
+        0x0000f1f8:    0a00000c    ....    BEQ      {pc} + 0x38  ; 0xf230
+        0x0000f1fc:    e3510001    ..Q.    CMP      r1,#1
+        0x0000f200:    1a000034    4...    BNE      {pc} + 0xd8  ; 0xf2d8
+        0x0000f204:    e59f10d4    ....    LDR      r1,[pc,#212]  ; [gdisp = 0xf2e0] = 0
+        0x0000f208:    e59f20d4    . ..    LDR      r2,[pc,#212]  ; [0xf2e4] = 0x22222222
+        0x0000f20c:    e5913020     0..    LDR      r3,[r1,#0x20]
+        0x0000f210:    e583206c    l ..    STR      r2,[r3,#0x6c]
+        0x0000f214:    e5913020     0..    LDR      r3,[r1,#0x20]
+        0x0000f218:    e5832070    p ..    STR      r2,[r3,#0x70]
+        0x0000f21c:    e5913020     0..    LDR      r3,[r1,#0x20]
+        0x0000f220:    e5832074    t ..    STR      r2,[r3,#0x74]
+        0x0000f224:    e3023222    "2..    MOV      r3,#0x2222
+        0x0000f228:    e5912020      ..    LDR      r2,[r1,#0x20]
+        0x0000f22c:    ea000017    ....    B        {pc} + 0x64  ; 0xf290
+        0x0000f230:    e59f30a8    .0..    LDR      r3,[pc,#168]  ; [gdisp = 0xf2e0] = 0
+        0x0000f234:    e5932020      ..    LDR      r2,[r3,#0x20]
+        0x0000f238:    e592306c    l0..    LDR      r3,[r2,#0x6c]
+        0x0000f23c:    e3c33cff    .<..    BIC      r3,r3,#0xff00
+        0x0000f240:    e3833c22    "<..    ORR      r3,r3,#0x2200
+        0x0000f244:    ea000018    ....    B        {pc} + 0x68  ; 0xf2ac
+        0x0000f248:    e3500001    ..P.    CMP      r0,#1
+        0x0000f24c:    1a000021    !...    BNE      {pc} + 0x8c  ; 0xf2d8
+        0x0000f250:    e3510004    ..Q.    CMP      r1,#4
+        0x0000f254:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xf268
+        0x0000f258:    e3510008    ..Q.    CMP      r1,#8
+        0x0000f25c:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0xf298
+        0x0000f260:    e3510001    ..Q.    CMP      r1,#1
+        0x0000f264:    1a00001b    ....    BNE      {pc} + 0x74  ; 0xf2d8
+        0x0000f268:    e59f1070    p...    LDR      r1,[pc,#112]  ; [gdisp = 0xf2e0] = 0
+        0x0000f26c:    e59f2074    t ..    LDR      r2,[pc,#116]  ; [0xf2e8] = 0x44444444
+        0x0000f270:    e5913020     0..    LDR      r3,[r1,#0x20]
+        0x0000f274:    e583206c    l ..    STR      r2,[r3,#0x6c]
+        0x0000f278:    e5913020     0..    LDR      r3,[r1,#0x20]
+        0x0000f27c:    e5832070    p ..    STR      r2,[r3,#0x70]
+        0x0000f280:    e5913020     0..    LDR      r3,[r1,#0x20]
+        0x0000f284:    e5832074    t ..    STR      r2,[r3,#0x74]
+        0x0000f288:    e3043444    D4..    MOV      r3,#0x4444
+        0x0000f28c:    e5912020      ..    LDR      r2,[r1,#0x20]
+        0x0000f290:    e5823078    x0..    STR      r3,[r2,#0x78]
+        0x0000f294:    ea00000f    ....    B        {pc} + 0x44  ; 0xf2d8
+        0x0000f298:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [gdisp = 0xf2e0] = 0
+        0x0000f29c:    e5932020      ..    LDR      r2,[r3,#0x20]
+        0x0000f2a0:    e592306c    l0..    LDR      r3,[r2,#0x6c]
+        0x0000f2a4:    e3c33cff    .<..    BIC      r3,r3,#0xff00
+        0x0000f2a8:    e3833b11    .;..    ORR      r3,r3,#0x4400
+        0x0000f2ac:    e582306c    l0..    STR      r3,[r2,#0x6c]
+        0x0000f2b0:    ea000008    ....    B        {pc} + 0x28  ; 0xf2d8
+        0x0000f2b4:    e59f2024    $ ..    LDR      r2,[pc,#36]   ; [gdisp = 0xf2e0] = 0
+        0x0000f2b8:    e5923020     0..    LDR      r3,[r2,#0x20]
+        0x0000f2bc:    e583c06c    l...    STR      r12,[r3,#0x6c]
+        0x0000f2c0:    e5923020     0..    LDR      r3,[r2,#0x20]
+        0x0000f2c4:    e583c070    p...    STR      r12,[r3,#0x70]
+        0x0000f2c8:    e5923020     0..    LDR      r3,[r2,#0x20]
+        0x0000f2cc:    e583c074    t...    STR      r12,[r3,#0x74]
+        0x0000f2d0:    e5923020     0..    LDR      r3,[r2,#0x20]
+        0x0000f2d4:    e583c078    x...    STR      r12,[r3,#0x78]
+        0x0000f2d8:    e3a00000    ....    MOV      r0,#0
+        0x0000f2dc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f2e0:    00000000    ....    DCD    0 ; gdisp
+        0x0000f2e4:    22222222    """"    DCD    572662306
+        0x0000f2e8:    44444444    DDDD    DCD    1145324612
+    tv_mode_to_width
+    $a
+        0x0000f2ec:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f2f0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f2f4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f2f8:    e3500016    ..P.    CMP      r0,#0x16
+        0x0000f2fc:    8a00000c    ....    BHI      {pc} + 0x38  ; 0xf334
+        0x0000f300:    e59f3034    40..    LDR      r3,[pc,#52]   ; [0xf33c] = 0x7ff80f
+        0x0000f304:    e3a02001    . ..    MOV      r2,#1
+        0x0000f308:    e1a00012    ....    LSL      r0,r2,r0
+        0x0000f30c:    e0003003    .0..    AND      r3,r0,r3
+        0x0000f310:    e3530000    ..S.    CMP      r3,#0
+        0x0000f314:    13a00e2d    -...    MOVNE    r0,#0x2d0
+        0x0000f318:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x0000f31c:    e3100d1f    ....    TST      r0,#0x7c0
+        0x0000f320:    13a00d1e    ....    MOVNE    r0,#0x780
+        0x0000f324:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x0000f328:    e3100030    0...    TST      r0,#0x30
+        0x0000f32c:    13a00c05    ....    MOVNE    r0,#0x500
+        0x0000f330:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x0000f334:    e3a00000    ....    MOV      r0,#0
+        0x0000f338:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f33c:    007ff80f    ....    DCD    8386575
+    tv_mode_to_height
+    $a
+        0x0000f340:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f344:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f348:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f34c:    e3500016    ..P.    CMP      r0,#0x16
+        0x0000f350:    979ff100    ....    LDRLS    pc,[pc,r0,LSL #2]
+        0x0000f354:    ea00001e    ....    B        {pc} + 0x80  ; 0xf3d4
+    $d
+        0x0000f358:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f35c:    0000f3b4    ....    DCD    62388 ; [Section 1]
+        0x0000f360:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f364:    0000f3b4    ....    DCD    62388 ; [Section 1]
+        0x0000f368:    0000f3c4    ....    DCD    62404 ; [Section 1]
+        0x0000f36c:    0000f3c4    ....    DCD    62404 ; [Section 1]
+        0x0000f370:    0000f3cc    ....    DCD    62412 ; [Section 1]
+        0x0000f374:    0000f3cc    ....    DCD    62412 ; [Section 1]
+        0x0000f378:    0000f3cc    ....    DCD    62412 ; [Section 1]
+        0x0000f37c:    0000f3cc    ....    DCD    62412 ; [Section 1]
+        0x0000f380:    0000f3cc    ....    DCD    62412 ; [Section 1]
+        0x0000f384:    0000f3b4    ....    DCD    62388 ; [Section 1]
+        0x0000f388:    0000f3b4    ....    DCD    62388 ; [Section 1]
+        0x0000f38c:    0000f3b4    ....    DCD    62388 ; [Section 1]
+        0x0000f390:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f394:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f398:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f39c:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f3a0:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f3a4:    0000f3bc    ....    DCD    62396 ; [Section 1]
+        0x0000f3a8:    0000f3b4    ....    DCD    62388 ; [Section 1]
+        0x0000f3ac:    0000f3b4    ....    DCD    62388 ; [Section 1]
+        0x0000f3b0:    0000f3b4    ....    DCD    62388 ; [Section 1]
+    $a
+        0x0000f3b4:    e3a00d09    ....    MOV      r0,#0x240
+        0x0000f3b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f3bc:    e3a00e1e    ....    MOV      r0,#0x1e0
+        0x0000f3c0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f3c4:    e3a00e2d    -...    MOV      r0,#0x2d0
+        0x0000f3c8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f3cc:    e3000438    8...    MOV      r0,#0x438
+        0x0000f3d0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f3d4:    e3a00000    ....    MOV      r0,#0
+        0x0000f3d8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    vga_mode_to_width
+        0x0000f3dc:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f3e0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f3e4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f3e8:    e350000a    ..P.    CMP      r0,#0xa
+        0x0000f3ec:    979ff100    ....    LDRLS    pc,[pc,r0,LSL #2]
+        0x0000f3f0:    ea00001a    ....    B        {pc} + 0x70  ; 0xf460
+    $d
+        0x0000f3f4:    0000f428    (...    DCD    62504 ; [Section 1]
+        0x0000f3f8:    0000f420     ...    DCD    62496 ; [Section 1]
+        0x0000f3fc:    0000f430    0...    DCD    62512 ; [Section 1]
+        0x0000f400:    0000f438    8...    DCD    62520 ; [Section 1]
+        0x0000f404:    0000f440    @...    DCD    62528 ; [Section 1]
+        0x0000f408:    0000f448    H...    DCD    62536 ; [Section 1]
+        0x0000f40c:    0000f450    P...    DCD    62544 ; [Section 1]
+        0x0000f410:    0000f420     ...    DCD    62496 ; [Section 1]
+        0x0000f414:    0000f428    (...    DCD    62504 ; [Section 1]
+        0x0000f418:    0000f458    X...    DCD    62552 ; [Section 1]
+        0x0000f41c:    0000f458    X...    DCD    62552 ; [Section 1]
+    $a
+        0x0000f420:    e3a00e5a    Z...    MOV      r0,#0x5a0
+        0x0000f424:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f428:    e3a00e69    i...    MOV      r0,#0x690
+        0x0000f42c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f430:    e3a00e55    U...    MOV      r0,#0x550
+        0x0000f434:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f438:    e3a00c05    ....    MOV      r0,#0x500
+        0x0000f43c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f440:    e3a00b01    ....    MOV      r0,#0x400
+        0x0000f444:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f448:    e3a00e32    2...    MOV      r0,#0x320
+        0x0000f44c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f450:    e3a00d0a    ....    MOV      r0,#0x280
+        0x0000f454:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f458:    e3a00d1e    ....    MOV      r0,#0x780
+        0x0000f45c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f460:    e3a00000    ....    MOV      r0,#0
+        0x0000f464:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    vga_mode_to_height
+        0x0000f468:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f46c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f470:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f474:    e350000a    ..P.    CMP      r0,#0xa
+        0x0000f478:    979ff100    ....    LDRLS    pc,[pc,r0,LSL #2]
+        0x0000f47c:    ea000018    ....    B        {pc} + 0x68  ; 0xf4e4
+    $d
+        0x0000f480:    0000f4b4    ....    DCD    62644 ; [Section 1]
+        0x0000f484:    0000f4ac    ....    DCD    62636 ; [Section 1]
+        0x0000f488:    0000f4ec    ....    DCD    62700 ; [Section 1]
+        0x0000f48c:    0000f4bc    ....    DCD    62652 ; [Section 1]
+        0x0000f490:    0000f4ec    ....    DCD    62700 ; [Section 1]
+        0x0000f494:    0000f4c4    ....    DCD    62660 ; [Section 1]
+        0x0000f498:    0000f4cc    ....    DCD    62668 ; [Section 1]
+        0x0000f49c:    0000f4d4    ....    DCD    62676 ; [Section 1]
+        0x0000f4a0:    0000f4b4    ....    DCD    62644 ; [Section 1]
+        0x0000f4a4:    0000f4dc    ....    DCD    62684 ; [Section 1]
+        0x0000f4a8:    0000f4dc    ....    DCD    62684 ; [Section 1]
+    $a
+        0x0000f4ac:    e3a00fe1    ....    MOV      r0,#0x384
+        0x0000f4b0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4b4:    e300041a    ....    MOV      r0,#0x41a
+        0x0000f4b8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4bc:    e3a00b01    ....    MOV      r0,#0x400
+        0x0000f4c0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4c4:    e3a00f96    ....    MOV      r0,#0x258
+        0x0000f4c8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4cc:    e3a00e1e    ....    MOV      r0,#0x1e0
+        0x0000f4d0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4d4:    e3a00e5a    Z...    MOV      r0,#0x5a0
+        0x0000f4d8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4dc:    e3000438    8...    MOV      r0,#0x438
+        0x0000f4e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4e4:    e3a00000    ....    MOV      r0,#0
+        0x0000f4e8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f4ec:    e3a00c03    ....    MOV      r0,#0x300
+        0x0000f4f0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    Disp_get_screen_scan_mode
+        0x0000f4f4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f4f8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f4fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f500:    e3500016    ..P.    CMP      r0,#0x16
+        0x0000f504:    8a000006    ....    BHI      {pc} + 0x20  ; 0xf524
+        0x0000f508:    e3a01001    ....    MOV      r1,#1
+        0x0000f50c:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [0xf52c] = 0x7ff8c3
+        0x0000f510:    e1a02011    . ..    LSL      r2,r1,r0
+        0x0000f514:    e0023003    .0..    AND      r3,r2,r3
+        0x0000f518:    e3530000    ..S.    CMP      r3,#0
+        0x0000f51c:    11a00001    ....    MOVNE    r0,r1
+        0x0000f520:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x0000f524:    e3a00000    ....    MOV      r0,#0
+        0x0000f528:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f52c:    007ff8c3    ....    DCD    8386755
+    BSP_disp_get_screen_width
+    $a
+        0x0000f530:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f534:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f538:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f53c:    e59f304c    L0..    LDR      r3,[pc,#76]   ; [gdisp = 0xf590] = 0
+        0x0000f540:    e0832480    .$..    ADD      r2,r3,r0,LSL #9
+        0x0000f544:    e5923220     2..    LDR      r3,[r2,#0x220]
+        0x0000f548:    e3530004    ..S.    CMP      r3,#4
+        0x0000f54c:    0592022c    ,...    LDREQ    r0,[r2,#0x22c]
+        0x0000f550:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xf560
+        0x0000f554:    e3530002    ..S.    CMP      r3,#2
+        0x0000f558:    1a000002    ....    BNE      {pc} + 0x10  ; 0xf568
+        0x0000f55c:    e5920228    (...    LDR      r0,[r2,#0x228]
+        0x0000f560:    ebfffffe    ....    BL       tv_mode_to_width  ; 0xf2ec Section #1
+        0x0000f564:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f568:    e3530008    ..S.    CMP      r3,#8
+        0x0000f56c:    1a000002    ....    BNE      {pc} + 0x10  ; 0xf57c
+        0x0000f570:    e5920224    $...    LDR      r0,[r2,#0x224]
+        0x0000f574:    ebfffffe    ....    BL       vga_mode_to_width  ; 0xf3dc Section #1
+        0x0000f578:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f57c:    e59f2010    . ..    LDR      r2,[pc,#16]   ; [([Section 17] + 18516) = 0xf594]  = 0x4854
+        0x0000f580:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000f584:    e0232093    . #.    MLA      r3,r3,r0,r2
+        0x0000f588:    e1d30bb6    ....    LDRH     r0,[r3,#0xb6]
+        0x0000f58c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f590:    00000000    ....    DCD    0 ; gdisp
+        0x0000f594:    00004854    TH..    DCD    18516 ; [Section 17]
+    BSP_disp_get_screen_height
+    $a
+        0x0000f598:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f59c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f5a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f5a4:    e59f3050    P0..    LDR      r3,[pc,#80]   ; [gdisp = 0xf5fc] = 0
+        0x0000f5a8:    e0832480    .$..    ADD      r2,r3,r0,LSL #9
+        0x0000f5ac:    e5923220     2..    LDR      r3,[r2,#0x220]
+        0x0000f5b0:    e3530004    ..S.    CMP      r3,#4
+        0x0000f5b4:    0592022c    ,...    LDREQ    r0,[r2,#0x22c]
+        0x0000f5b8:    0a000002    ....    BEQ      {pc} + 0x10  ; 0xf5c8
+        0x0000f5bc:    e3530002    ..S.    CMP      r3,#2
+        0x0000f5c0:    1a000002    ....    BNE      {pc} + 0x10  ; 0xf5d0
+        0x0000f5c4:    e5920228    (...    LDR      r0,[r2,#0x228]
+        0x0000f5c8:    ebfffffe    ....    BL       tv_mode_to_height  ; 0xf340 Section #1
+        0x0000f5cc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f5d0:    e3530008    ..S.    CMP      r3,#8
+        0x0000f5d4:    1a000002    ....    BNE      {pc} + 0x10  ; 0xf5e4
+        0x0000f5d8:    e5920224    $...    LDR      r0,[r2,#0x224]
+        0x0000f5dc:    ebfffffe    ....    BL       vga_mode_to_height  ; 0xf468 Section #1
+        0x0000f5e0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f5e4:    e3a02011    . ..    MOV      r2,#0x11
+        0x0000f5e8:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 18516) = 0xf600]  = 0x4854
+        0x0000f5ec:    e0020092    ....    MUL      r2,r2,r0
+        0x0000f5f0:    e0833182    .1..    ADD      r3,r3,r2,LSL #3
+        0x0000f5f4:    e1d30bb8    ....    LDRH     r0,[r3,#0xb8]
+        0x0000f5f8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f5fc:    00000000    ....    DCD    0 ; gdisp
+        0x0000f600:    00004854    TH..    DCD    18516 ; [Section 17]
+    BSP_disp_get_output_type
+    $a
+        0x0000f604:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f608:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f60c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f610:    e59f3038    80..    LDR      r3,[pc,#56]   ; [gdisp = 0xf650] = 0
+        0x0000f614:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000f618:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x0000f61c:    e3130802    ....    TST      r3,#0x20000
+        0x0000f620:    13a00002    ....    MOVNE    r0,#2
+        0x0000f624:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x0000f628:    e3130801    ....    TST      r3,#0x10000
+        0x0000f62c:    13a00001    ....    MOVNE    r0,#1
+        0x0000f630:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x0000f634:    e3130701    ....    TST      r3,#0x40000
+        0x0000f638:    13a00004    ....    MOVNE    r0,#4
+        0x0000f63c:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x0000f640:    e2133702    .7..    ANDS     r3,r3,#0x80000
+        0x0000f644:    01a00003    ....    MOVEQ    r0,r3
+        0x0000f648:    13a00008    ....    MOVNE    r0,#8
+        0x0000f64c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f650:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_lcd_open_after
+    $a
+        0x0000f654:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f658:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000f65c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f660:    e59f1028    (...    LDR      r1,[pc,#40]   ; [gdisp = 0xf690] = 0
+        0x0000f664:    e3a04000    .@..    MOV      r4,#0
+        0x0000f668:    e3a03001    .0..    MOV      r3,#1
+        0x0000f66c:    e0811480    ....    ADD      r1,r1,r0,LSL #9
+        0x0000f670:    e1a00004    ....    MOV      r0,r4
+        0x0000f674:    e281cf86    ....    ADD      r12,r1,#0x218
+        0x0000f678:    e5912050    P ..    LDR      r2,[r1,#0x50]
+        0x0000f67c:    e5813220     2..    STR      r3,[r1,#0x220]
+        0x0000f680:    e3822801    .(..    ORR      r2,r2,#0x10000
+        0x0000f684:    e5cc4004    .@..    STRB     r4,[r12,#4]
+        0x0000f688:    e5812050    P ..    STR      r2,[r1,#0x50]
+        0x0000f68c:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000f690:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_lcd_get_open_flow
+    $a
+        0x0000f694:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f698:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f69c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f6a0:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [([Section 17] + 18516) = 0xf6b0]  = 0x4854
+        0x0000f6a4:    e3a0202c    , ..    MOV      r2,#0x2c
+        0x0000f6a8:    e0203092    .0 .    MLA      r0,r2,r0,r3
+        0x0000f6ac:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f6b0:    00004854    TH..    DCD    18516 ; [Section 17]
+    BSP_disp_lcd_close_befor
+    $a
+        0x0000f6b4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f6b8:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000f6bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f6c0:    e59f1038    8...    LDR      r1,[pc,#56]   ; [([Section 17] + 18516) = 0xf700]  = 0x4854
+        0x0000f6c4:    e3a0202c    , ..    MOV      r2,#0x2c
+        0x0000f6c8:    e3a0300c    .0..    MOV      r3,#0xc
+        0x0000f6cc:    e3a05000    .P..    MOV      r5,#0
+        0x0000f6d0:    e1a04000    .@..    MOV      r4,r0
+        0x0000f6d4:    e0221092    ..".    MLA      r2,r2,r0,r1
+        0x0000f6d8:    e0231093    ..#.    MLA      r3,r3,r0,r1
+        0x0000f6dc:    e5825080    .P..    STR      r5,[r2,#0x80]
+        0x0000f6e0:    e1a0e00f    ....    MOV      r14,pc
+        0x0000f6e4:    e593f1c8    ....    LDR      pc,[r3,#0x1c8]
+        0x0000f6e8:    e1a00004    ....    MOV      r0,r4
+        0x0000f6ec:    e3a01001    ....    MOV      r1,#1
+        0x0000f6f0:    e1a02005    . ..    MOV      r2,r5
+        0x0000f6f4:    ebfffffe    ....    BL       Disp_lcdc_pin_cfg  ; 0xf1d0 Section #1
+        0x0000f6f8:    e1a00005    ....    MOV      r0,r5
+        0x0000f6fc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000f700:    00004854    TH..    DCD    18516 ; [Section 17]
+    BSP_disp_lcd_get_close_flow
+    $a
+        0x0000f704:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f708:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f70c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f710:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [([Section 17] + 18604) = 0xf720]  = 0x48ac
+        0x0000f714:    e3a0202c    , ..    MOV      r2,#0x2c
+        0x0000f718:    e0203092    .0 .    MLA      r0,r2,r0,r3
+        0x0000f71c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f720:    000048ac    .H..    DCD    18604 ; [Section 17]
+    BSP_disp_lcd_set_bright
+    $a
+        0x0000f724:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f728:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f72c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f730:    e59f3068    h0..    LDR      r3,[pc,#104]  ; [gdisp = 0xf7a0] = 0
+        0x0000f734:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x0000f738:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x0000f73c:    e3130801    ....    TST      r3,#0x10000
+        0x0000f740:    0a000014    ....    BEQ      {pc} + 0x58  ; 0xf798
+        0x0000f744:    e59f2058    X ..    LDR      r2,[pc,#88]   ; [([Section 17] + 18516) = 0xf7a4]  = 0x4854
+        0x0000f748:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000f74c:    e0232093    . #.    MLA      r3,r3,r0,r2
+        0x0000f750:    e5933130    01..    LDR      r3,[r3,#0x130]
+        0x0000f754:    e3530000    ..S.    CMP      r3,#0
+        0x0000f758:    1a000003    ....    BNE      {pc} + 0x14  ; 0xf76c
+        0x0000f75c:    e351000f    ..Q.    CMP      r1,#0xf
+        0x0000f760:    12811001    ....    ADDNE    r1,r1,#1
+        0x0000f764:    1a000004    ....    BNE      {pc} + 0x18  ; 0xf77c
+        0x0000f768:    ea000002    ....    B        {pc} + 0x10  ; 0xf778
+        0x0000f76c:    e3510000    ..Q.    CMP      r1,#0
+        0x0000f770:    12611010    ..a.    RSBNE    r1,r1,#0x10
+        0x0000f774:    1a000000    ....    BNE      {pc} + 0x8  ; 0xf77c
+        0x0000f778:    e3a01000    ....    MOV      r1,#0
+        0x0000f77c:    e59f301c    .0..    LDR      r3,[pc,#28]   ; [gdisp = 0xf7a0] = 0
+        0x0000f780:    e5932028    ( ..    LDR      r2,[r3,#0x28]
+        0x0000f784:    e59230e4    .0..    LDR      r3,[r2,#0xe4]
+        0x0000f788:    e1a03823    #8..    LSR      r3,r3,#16
+        0x0000f78c:    e1a03803    .8..    LSL      r3,r3,#16
+        0x0000f790:    e1813003    .0..    ORR      r3,r1,r3
+        0x0000f794:    e58230e4    .0..    STR      r3,[r2,#0xe4]
+        0x0000f798:    e3a00000    ....    MOV      r0,#0
+        0x0000f79c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f7a0:    00000000    ....    DCD    0 ; gdisp
+        0x0000f7a4:    00004854    TH..    DCD    18516 ; [Section 17]
+    BSP_disp_lcd_get_bright
+    $a
+        0x0000f7a8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f7ac:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f7b0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f7b4:    e59f3040    @0..    LDR      r3,[pc,#64]   ; [([Section 17] + 18516) = 0xf7fc]  = 0x4854
+        0x0000f7b8:    e3a02088    . ..    MOV      r2,#0x88
+        0x0000f7bc:    e0203092    .0 .    MLA      r0,r2,r0,r3
+        0x0000f7c0:    e59f3038    80..    LDR      r3,[pc,#56]   ; [gdisp = 0xf800] = 0
+        0x0000f7c4:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x0000f7c8:    e5902130    0!..    LDR      r2,[r0,#0x130]
+        0x0000f7cc:    e59330e4    .0..    LDR      r3,[r3,#0xe4]
+        0x0000f7d0:    e3520000    ..R.    CMP      r2,#0
+        0x0000f7d4:    e1a00803    ....    LSL      r0,r3,#16
+        0x0000f7d8:    e1a00820     ...    LSR      r0,r0,#16
+        0x0000f7dc:    1a000003    ....    BNE      {pc} + 0x14  ; 0xf7f0
+        0x0000f7e0:    e3500000    ..P.    CMP      r0,#0
+        0x0000f7e4:    0280000f    ....    ADDEQ    r0,r0,#0xf
+        0x0000f7e8:    12400001    ..@.    SUBNE    r0,r0,#1
+        0x0000f7ec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f7f0:    e3500000    ..P.    CMP      r0,#0
+        0x0000f7f4:    12600010    ..`.    RSBNE    r0,r0,#0x10
+        0x0000f7f8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f7fc:    00004854    TH..    DCD    18516 ; [Section 17]
+        0x0000f800:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_lcd_set_src
+    $a
+        0x0000f804:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f808:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f80c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f810:    e3510004    ..Q.    CMP      r1,#4
+        0x0000f814:    979ff101    ....    LDRLS    pc,[pc,r1,LSL #2]
+        0x0000f818:    ea000010    ....    B        {pc} + 0x48  ; 0xf860
+    $d
+        0x0000f81c:    0000f830    0...    DCD    63536 ; [Section 1]
+        0x0000f820:    0000f838    8...    DCD    63544 ; [Section 1]
+        0x0000f824:    0000f840    @...    DCD    63552 ; [Section 1]
+        0x0000f828:    0000f848    H...    DCD    63560 ; [Section 1]
+        0x0000f82c:    0000f850    P...    DCD    63568 ; [Section 1]
+    $a
+        0x0000f830:    e3a01000    ....    MOV      r1,#0
+        0x0000f834:    ea000006    ....    B        {pc} + 0x20  ; 0xf854
+        0x0000f838:    e3a01001    ....    MOV      r1,#1
+        0x0000f83c:    ea000004    ....    B        {pc} + 0x18  ; 0xf854
+        0x0000f840:    e3a01002    ....    MOV      r1,#2
+        0x0000f844:    ea000002    ....    B        {pc} + 0x10  ; 0xf854
+        0x0000f848:    e3a01004    ....    MOV      r1,#4
+        0x0000f84c:    ea000000    ....    B        {pc} + 0x8  ; 0xf854
+        0x0000f850:    e3a01003    ....    MOV      r1,#3
+        0x0000f854:    ebfffffe    ....    BL       TCON0_select_src  ; 0x75e0 Section #1
+        0x0000f858:    e3a00000    ....    MOV      r0,#0
+        0x0000f85c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0000f860:    e59f0008    ....    LDR      r0,[pc,#8]    ; [([Section 10] + 2536) = 0xf870]  = 0x9e8
+        0x0000f864:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000f868:    e3e00004    ....    MVN      r0,#4
+        0x0000f86c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000f870:    000009e8    ....    DCD    2536 ; [Section 10]
+    BSP_disp_gamma_correction_disable
+    $a
+        0x0000f874:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f878:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f87c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f880:    e3a01000    ....    MOV      r1,#0
+        0x0000f884:    ebfffffe    ....    BL       TCON1_set_gamma_Enable  ; 0x89fc Section #1
+        0x0000f888:    e3a00000    ....    MOV      r0,#0
+        0x0000f88c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_gamma_correction_enable
+        0x0000f890:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f894:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000f898:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f89c:    e3a01001    ....    MOV      r1,#1
+        0x0000f8a0:    ebfffffe    ....    BL       TCON1_set_gamma_Enable  ; 0x89fc Section #1
+        0x0000f8a4:    e3a00000    ....    MOV      r0,#0
+        0x0000f8a8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_set_gamma_table
+        0x0000f8ac:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f8b0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000f8b4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f8b8:    e3520b01    ..R.    CMP      r2,#0x400
+        0x0000f8bc:    93a03000    .0..    MOVLS    r3,#0
+        0x0000f8c0:    83a03001    .0..    MOVHI    r3,#1
+        0x0000f8c4:    e3510000    ..Q.    CMP      r1,#0
+        0x0000f8c8:    11a04003    .@..    MOVNE    r4,r3
+        0x0000f8cc:    03834001    .@..    ORREQ    r4,r3,#1
+        0x0000f8d0:    e3540000    ..T.    CMP      r4,#0
+        0x0000f8d4:    0a000003    ....    BEQ      {pc} + 0x14  ; 0xf8e8
+        0x0000f8d8:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 2586) = 0xf8f4]  = 0xa1a
+        0x0000f8dc:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000f8e0:    e3e00000    ....    MVN      r0,#0
+        0x0000f8e4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000f8e8:    ebfffffe    ....    BL       TCON1_set_gamma_table  ; 0x89e8 Section #1
+        0x0000f8ec:    e1a00004    ....    MOV      r0,r4
+        0x0000f8f0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000f8f4:    00000a1a    ....    DCD    2586 ; [Section 10]
+    BSP_disp_lcd_xy_switch
+    $a
+        0x0000f8f8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f8fc:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000f900:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f904:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [gdisp = 0xf950] = 0
+        0x0000f908:    e1a04000    .@..    MOV      r4,r0
+        0x0000f90c:    e1a06001    .`..    MOV      r6,r1
+        0x0000f910:    e0835480    .T..    ADD      r5,r3,r0,LSL #9
+        0x0000f914:    e5953244    D2..    LDR      r3,[r5,#0x244]
+        0x0000f918:    e3530000    ..S.    CMP      r3,#0
+        0x0000f91c:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xf948
+        0x0000f920:    e3a01000    ....    MOV      r1,#0
+        0x0000f924:    ebfffffe    ....    BL       LCD_CPU_AUTO_FLUSH  ; 0x8c00 Section #1
+        0x0000f928:    e1a00004    ....    MOV      r0,r4
+        0x0000f92c:    ebfffffe    ....    BL       LCD_XY_SWAP  ; 0x8cb8 Section #1
+        0x0000f930:    e1a00006    ....    MOV      r0,r6
+        0x0000f934:    e1a0e00f    ....    MOV      r14,pc
+        0x0000f938:    e595f244    D...    LDR      pc,[r5,#0x244]
+        0x0000f93c:    e1a00004    ....    MOV      r0,r4
+        0x0000f940:    e3a01001    ....    MOV      r1,#1
+        0x0000f944:    ebfffffe    ....    BL       LCD_CPU_AUTO_FLUSH  ; 0x8c00 Section #1
+        0x0000f948:    e3a00000    ....    MOV      r0,#0
+        0x0000f94c:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000f950:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_lcd_close_after
+    $a
+        0x0000f954:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f958:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000f95c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f960:    e1a04000    .@..    MOV      r4,r0
+        0x0000f964:    ebfffffe    ....    BL       image_clk_off  ; 0xaff0 Section #1
+        0x0000f968:    e1a00004    ....    MOV      r0,r4
+        0x0000f96c:    ebfffffe    ....    BL       lcdc_clk_off  ; 0xae10 Section #1
+        0x0000f970:    e59f2034    4 ..    LDR      r2,[pc,#52]   ; [gdisp = 0xf9ac] = 0
+        0x0000f974:    e3a01000    ....    MOV      r1,#0
+        0x0000f978:    e0822484    .$..    ADD      r2,r2,r4,LSL #9
+        0x0000f97c:    e1a00001    ....    MOV      r0,r1
+        0x0000f980:    e592c24c    L...    LDR      r12,[r2,#0x24c]
+        0x0000f984:    e5923050    P0..    LDR      r3,[r2,#0x50]
+        0x0000f988:    e35c0601    ..\.    CMP      r12,#0x100000
+        0x0000f98c:    e5821220     ...    STR      r1,[r2,#0x220]
+        0x0000f990:    e3c33801    .8..    BIC      r3,r3,#0x10000
+        0x0000f994:    e5823050    P0..    STR      r3,[r2,#0x50]
+        0x0000f998:    03e03601    .6..    MVNEQ    r3,#0x100000
+        0x0000f99c:    13e03602    .6..    MVNNE    r3,#0x200000
+        0x0000f9a0:    e003300c    .0..    AND      r3,r3,r12
+        0x0000f9a4:    e582324c    L2..    STR      r3,[r2,#0x24c]
+        0x0000f9a8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000f9ac:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_lcd_open_before
+    $a
+        0x0000f9b0:    e1a0c00d    ....    MOV      r12,r13
+        0x0000f9b4:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x0000f9b8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000f9bc:    e3a01001    ....    MOV      r1,#1
+        0x0000f9c0:    e1a06000    .`..    MOV      r6,r0
+        0x0000f9c4:    e3a02000    . ..    MOV      r2,#0
+        0x0000f9c8:    ebfffffe    ....    BL       disp_clk_cfg  ; 0xb330 Section #1
+        0x0000f9cc:    e1a00006    ....    MOV      r0,r6
+        0x0000f9d0:    ebfffffe    ....    BL       lcdc_clk_on  ; 0xae88 Section #1
+        0x0000f9d4:    e1a00006    ....    MOV      r0,r6
+        0x0000f9d8:    ebfffffe    ....    BL       image_clk_on  ; 0xb050 Section #1
+        0x0000f9dc:    e1a00006    ....    MOV      r0,r6
+        0x0000f9e0:    ebfffffe    ....    BL       Image_open  ; 0xc694 Section #1
+        0x0000f9e4:    e3a01001    ....    MOV      r1,#1
+        0x0000f9e8:    e1a02001    . ..    MOV      r2,r1
+        0x0000f9ec:    e1a00006    ....    MOV      r0,r6
+        0x0000f9f0:    ebfffffe    ....    BL       Disp_lcdc_pin_cfg  ; 0xf1d0 Section #1
+        0x0000f9f4:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000f9f8:    e0020693    ....    MUL      r2,r3,r6
+        0x0000f9fc:    e59f3080    .0..    LDR      r3,[pc,#128]  ; [([Section 17] + 18516) = 0xfa84]  = 0x4854
+        0x0000fa00:    e28310b0    ....    ADD      r1,r3,#0xb0
+        0x0000fa04:    e0833002    .0..    ADD      r3,r3,r2
+        0x0000fa08:    e59330b0    .0..    LDR      r3,[r3,#0xb0]
+        0x0000fa0c:    e3530000    ..S.    CMP      r3,#0
+        0x0000fa10:    1a000003    ....    BNE      {pc} + 0x14  ; 0xfa24
+        0x0000fa14:    e0811002    ....    ADD      r1,r1,r2
+        0x0000fa18:    e1a00006    ....    MOV      r0,r6
+        0x0000fa1c:    ebfffffe    ....    BL       TCON0_cfg  ; 0x72c0 Section #1
+        0x0000fa20:    ea000002    ....    B        {pc} + 0x10  ; 0xfa30
+        0x0000fa24:    e0811002    ....    ADD      r1,r1,r2
+        0x0000fa28:    e1a00006    ....    MOV      r0,r6
+        0x0000fa2c:    ebfffffe    ....    BL       TCON1_cfg_ex  ; 0x7ad8 Section #1
+        0x0000fa30:    e59f404c    L@..    LDR      r4,[pc,#76]   ; [([Section 17] + 18516) = 0xfa84]  = 0x4854
+        0x0000fa34:    e3a02011    . ..    MOV      r2,#0x11
+        0x0000fa38:    e0020692    ....    MUL      r2,r2,r6
+        0x0000fa3c:    e3a03088    .0..    MOV      r3,#0x88
+        0x0000fa40:    e0234693    .F#.    MLA      r3,r3,r6,r4
+        0x0000fa44:    e1a00006    ....    MOV      r0,r6
+        0x0000fa48:    e3a05000    .P..    MOV      r5,#0
+        0x0000fa4c:    e0842182    .!..    ADD      r2,r4,r2,LSL #3
+        0x0000fa50:    e1d31bb6    ....    LDRH     r1,[r3,#0xb6]
+        0x0000fa54:    e1d22bb8    .+..    LDRH     r2,[r2,#0xb8]
+        0x0000fa58:    ebfffffe    ....    BL       DE_BE_set_display_size  ; 0x3d48 Section #1
+        0x0000fa5c:    e3a0202c    , ..    MOV      r2,#0x2c
+        0x0000fa60:    e0224692    .F".    MLA      r2,r2,r6,r4
+        0x0000fa64:    e3a0300c    .0..    MOV      r3,#0xc
+        0x0000fa68:    e0234693    .F#.    MLA      r3,r3,r6,r4
+        0x0000fa6c:    e1a00006    ....    MOV      r0,r6
+        0x0000fa70:    e5825028    (P..    STR      r5,[r2,#0x28]
+        0x0000fa74:    e1a0e00f    ....    MOV      r14,pc
+        0x0000fa78:    e593f1c4    ....    LDR      pc,[r3,#0x1c4]
+        0x0000fa7c:    e1a00005    ....    MOV      r0,r5
+        0x0000fa80:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x0000fa84:    00004854    TH..    DCD    18516 ; [Section 17]
+    Disp_lcdc_exit
+    $a
+        0x0000fa88:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fa8c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000fa90:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fa94:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x0000fa98:    1a000003    ....    BNE      {pc} + 0x14  ; 0xfaac
+        0x0000fa9c:    e280002c    ,...    ADD      r0,r0,#0x2c
+        0x0000faa0:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x0000faa4:    e3a0002c    ,...    MOV      r0,#0x2c
+        0x0000faa8:    ea000004    ....    B        {pc} + 0x18  ; 0xfac0
+        0x0000faac:    e3540001    ..T.    CMP      r4,#1
+        0x0000fab0:    1a000005    ....    BNE      {pc} + 0x1c  ; 0xfacc
+        0x0000fab4:    e3a00036    6...    MOV      r0,#0x36
+        0x0000fab8:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x0000fabc:    e3a00036    6...    MOV      r0,#0x36
+        0x0000fac0:    e59f101c    ....    LDR      r1,[pc,#28]   ; [Disp_lcdc_event_proc = 0xfae4] = 0
+        0x0000fac4:    e1a02004    . ..    MOV      r2,r4
+        0x0000fac8:    ebfffffe    ....    BL       OSAL_UnRegISR  ; 0x31a8 Section #1
+        0x0000facc:    e1a00004    ....    MOV      r0,r4
+        0x0000fad0:    ebfffffe    ....    BL       LCDC_exit  ; 0x714c Section #1
+        0x0000fad4:    e1a00004    ....    MOV      r0,r4
+        0x0000fad8:    ebfffffe    ....    BL       lcdc_clk_exit  ; 0xb5bc Section #1
+        0x0000fadc:    e3a00000    ....    MOV      r0,#0
+        0x0000fae0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000fae4:    00000000    ....    DCD    0 ; Disp_lcdc_event_proc
+    Disp_lcdc_init
+    $a
+        0x0000fae8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000faec:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000faf0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000faf4:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x0000faf8:    e1a04000    .@..    MOV      r4,r0
+        0x0000fafc:    ebfffffe    ....    BL       lcdc_clk_init  ; 0xb6f8 Section #1
+        0x0000fb00:    e1a00004    ....    MOV      r0,r4
+        0x0000fb04:    ebfffffe    ....    BL       lcdc_clk_on  ; 0xae88 Section #1
+        0x0000fb08:    e1a00004    ....    MOV      r0,r4
+        0x0000fb0c:    ebfffffe    ....    BL       LCDC_init  ; 0x8880 Section #1
+        0x0000fb10:    e1a00004    ....    MOV      r0,r4
+        0x0000fb14:    ebfffffe    ....    BL       lcdc_clk_off  ; 0xae10 Section #1
+        0x0000fb18:    e1a00004    ....    MOV      r0,r4
+        0x0000fb1c:    ebfffffe    ....    BL       Disp_pwm_cfg  ; 0xf0ec Section #1
+        0x0000fb20:    e3540000    ..T.    CMP      r4,#0
+        0x0000fb24:    e59f307c    |0..    LDR      r3,[pc,#124]  ; [([Section 17] + 18964) = 0xfba8]  = 0x4a14
+        0x0000fb28:    1a000008    ....    BNE      {pc} + 0x28  ; 0xfb50
+        0x0000fb2c:    e1a00003    ....    MOV      r0,r3
+        0x0000fb30:    ebfffffe    ....    BL       LCD_get_panel_funs_0  ; 0x139f8 Section #1
+        0x0000fb34:    e1a01004    ....    MOV      r1,r4
+        0x0000fb38:    e59f206c    l ..    LDR      r2,[pc,#108]  ; [Disp_lcdc_event_proc = 0xfbac] = 0
+        0x0000fb3c:    e1a03004    .0..    MOV      r3,r4
+        0x0000fb40:    e3a0002c    ,...    MOV      r0,#0x2c
+        0x0000fb44:    e58d4000    .@..    STR      r4,[r13,#0]
+        0x0000fb48:    e58d4004    .@..    STR      r4,[r13,#4]
+        0x0000fb4c:    ea000009    ....    B        {pc} + 0x2c  ; 0xfb78
+        0x0000fb50:    e3a0000c    ....    MOV      r0,#0xc
+        0x0000fb54:    e0203490    .4 .    MLA      r0,r0,r4,r3
+        0x0000fb58:    ebfffffe    ....    BL       LCD_get_panel_funs_1  ; 0x13bf0 Section #1
+        0x0000fb5c:    e59f2048    H ..    LDR      r2,[pc,#72]   ; [Disp_lcdc_event_proc = 0xfbac] = 0
+        0x0000fb60:    e3a0c000    ....    MOV      r12,#0
+        0x0000fb64:    e3a00036    6...    MOV      r0,#0x36
+        0x0000fb68:    e1a0100c    ....    MOV      r1,r12
+        0x0000fb6c:    e1a03004    .0..    MOV      r3,r4
+        0x0000fb70:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000fb74:    e58dc004    ....    STR      r12,[r13,#4]
+        0x0000fb78:    ebfffffe    ....    BL       OSAL_RegISR  ; 0x31c0 Section #1
+        0x0000fb7c:    e59f202c    , ..    LDR      r2,[pc,#44]   ; [([Section 17] + 18516) = 0xfbb0]  = 0x4854
+        0x0000fb80:    e3a0300c    .0..    MOV      r3,#0xc
+        0x0000fb84:    e3a00088    ....    MOV      r0,#0x88
+        0x0000fb88:    e28210b0    ....    ADD      r1,r2,#0xb0
+        0x0000fb8c:    e0232493    .$#.    MLA      r3,r3,r4,r2
+        0x0000fb90:    e0201490    .. .    MLA      r0,r0,r4,r1
+        0x0000fb94:    e1a0e00f    ....    MOV      r14,pc
+        0x0000fb98:    e593f1c0    ....    LDR      pc,[r3,#0x1c0]
+        0x0000fb9c:    e3a00000    ....    MOV      r0,#0
+        0x0000fba0:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x0000fba4:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000fba8:    00004a14    .J..    DCD    18964 ; [Section 17]
+        0x0000fbac:    00000000    ....    DCD    0 ; Disp_lcdc_event_proc
+        0x0000fbb0:    00004854    TH..    DCD    18516 ; [Section 17]
+    Disp_lcdc_event_proc
+    $a
+        0x0000fbb4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fbb8:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000fbbc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fbc0:    e1a00001    ....    MOV      r0,r1
+        0x0000fbc4:    e1a04001    .@..    MOV      r4,r1
+        0x0000fbc8:    ebfffffe    ....    BL       LCDC_query_int  ; 0x7174 Section #1
+        0x0000fbcc:    e6ef5070    pP..    UXTB     r5,r0
+        0x0000fbd0:    e3150008    ....    TST      r5,#8
+        0x0000fbd4:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xfbf0
+        0x0000fbd8:    e3a01008    ....    MOV      r1,#8
+        0x0000fbdc:    e1a00004    ....    MOV      r0,r4
+        0x0000fbe0:    ebfffffe    ....    BL       LCDC_clear_int  ; 0x71a4 Section #1
+        0x0000fbe4:    e1a00004    ....    MOV      r0,r4
+        0x0000fbe8:    e3a01000    ....    MOV      r1,#0
+        0x0000fbec:    ebfffffe    ....    BL       LCD_vbi_event_proc  ; 0xcb5c Section #1
+        0x0000fbf0:    e3150004    ....    TST      r5,#4
+        0x0000fbf4:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xfc10
+        0x0000fbf8:    e3a01004    ....    MOV      r1,#4
+        0x0000fbfc:    e1a00004    ....    MOV      r0,r4
+        0x0000fc00:    ebfffffe    ....    BL       LCDC_clear_int  ; 0x71a4 Section #1
+        0x0000fc04:    e1a00004    ....    MOV      r0,r4
+        0x0000fc08:    e3a01001    ....    MOV      r1,#1
+        0x0000fc0c:    ebfffffe    ....    BL       LCD_vbi_event_proc  ; 0xcb5c Section #1
+        0x0000fc10:    e3150002    ....    TST      r5,#2
+        0x0000fc14:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xfc30
+        0x0000fc18:    e3a01002    ....    MOV      r1,#2
+        0x0000fc1c:    e1a00004    ....    MOV      r0,r4
+        0x0000fc20:    ebfffffe    ....    BL       LCDC_clear_int  ; 0x71a4 Section #1
+        0x0000fc24:    e1a00004    ....    MOV      r0,r4
+        0x0000fc28:    e3a01000    ....    MOV      r1,#0
+        0x0000fc2c:    ebfffffe    ....    BL       LCD_line_event_proc  ; 0xcadc Section #1
+        0x0000fc30:    e3150001    ....    TST      r5,#1
+        0x0000fc34:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0xfc50
+        0x0000fc38:    e3a01001    ....    MOV      r1,#1
+        0x0000fc3c:    e1a00004    ....    MOV      r0,r4
+        0x0000fc40:    ebfffffe    ....    BL       LCDC_clear_int  ; 0x71a4 Section #1
+        0x0000fc44:    e1a00004    ....    MOV      r0,r4
+        0x0000fc48:    e3a01001    ....    MOV      r1,#1
+        0x0000fc4c:    ebfffffe    ....    BL       LCD_line_event_proc  ; 0xcadc Section #1
+        0x0000fc50:    e3a00001    ....    MOV      r0,#1
+        0x0000fc54:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    TCON_close
+        0x0000fc58:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fc5c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000fc60:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fc64:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [([Section 17] + 18516) = 0xfcb0]  = 0x4854
+        0x0000fc68:    e3a01088    ....    MOV      r1,#0x88
+        0x0000fc6c:    e1a04480    .D..    LSL      r4,r0,#9
+        0x0000fc70:    e59f503c    <P..    LDR      r5,[pc,#60]   ; [gdisp = 0xfcb4] = 0
+        0x0000fc74:    e0223091    .0".    MLA      r2,r1,r0,r3
+        0x0000fc78:    e59230b0    .0..    LDR      r3,[r2,#0xb0]
+        0x0000fc7c:    e3530000    ..S.    CMP      r3,#0
+        0x0000fc80:    1a000004    ....    BNE      {pc} + 0x18  ; 0xfc98
+        0x0000fc84:    ebfffffe    ....    BL       TCON0_close  ; 0x7250 Section #1
+        0x0000fc88:    e0852004    . ..    ADD      r2,r5,r4
+        0x0000fc8c:    e5923054    T0..    LDR      r3,[r2,#0x54]
+        0x0000fc90:    e3c33080    .0..    BIC      r3,r3,#0x80
+        0x0000fc94:    ea000003    ....    B        {pc} + 0x14  ; 0xfca8
+        0x0000fc98:    ebfffffe    ....    BL       TCON1_close  ; 0x77e0 Section #1
+        0x0000fc9c:    e0852004    . ..    ADD      r2,r5,r4
+        0x0000fca0:    e5923054    T0..    LDR      r3,[r2,#0x54]
+        0x0000fca4:    e3c33c01    .<..    BIC      r3,r3,#0x100
+        0x0000fca8:    e5823054    T0..    STR      r3,[r2,#0x54]
+        0x0000fcac:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000fcb0:    00004854    TH..    DCD    18516 ; [Section 17]
+        0x0000fcb4:    00000000    ....    DCD    0 ; gdisp
+    TCON_open
+    $a
+        0x0000fcb8:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fcbc:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000fcc0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fcc4:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [([Section 17] + 18516) = 0xfd10]  = 0x4854
+        0x0000fcc8:    e3a01088    ....    MOV      r1,#0x88
+        0x0000fccc:    e1a04480    .D..    LSL      r4,r0,#9
+        0x0000fcd0:    e59f503c    <P..    LDR      r5,[pc,#60]   ; [gdisp = 0xfd14] = 0
+        0x0000fcd4:    e0223091    .0".    MLA      r2,r1,r0,r3
+        0x0000fcd8:    e59230b0    .0..    LDR      r3,[r2,#0xb0]
+        0x0000fcdc:    e3530000    ..S.    CMP      r3,#0
+        0x0000fce0:    1a000004    ....    BNE      {pc} + 0x18  ; 0xfcf8
+        0x0000fce4:    ebfffffe    ....    BL       TCON0_open  ; 0x7200 Section #1
+        0x0000fce8:    e0852004    . ..    ADD      r2,r5,r4
+        0x0000fcec:    e5923054    T0..    LDR      r3,[r2,#0x54]
+        0x0000fcf0:    e3833080    .0..    ORR      r3,r3,#0x80
+        0x0000fcf4:    ea000003    ....    B        {pc} + 0x14  ; 0xfd08
+        0x0000fcf8:    ebfffffe    ....    BL       TCON1_open  ; 0x7790 Section #1
+        0x0000fcfc:    e0852004    . ..    ADD      r2,r5,r4
+        0x0000fd00:    e5923054    T0..    LDR      r3,[r2,#0x54]
+        0x0000fd04:    e3833c01    .<..    ORR      r3,r3,#0x100
+        0x0000fd08:    e5823054    T0..    STR      r3,[r2,#0x54]
+        0x0000fd0c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000fd10:    00004854    TH..    DCD    18516 ; [Section 17]
+        0x0000fd14:    00000000    ....    DCD    0 ; gdisp
+    Scaler_Get_SclRegn
+    $a
+        0x0000fd18:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fd1c:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x0000fd20:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fd24:    e251c000    ..Q.    SUBS     r12,r1,#0
+        0x0000fd28:    0a000010    ....    BEQ      {pc} + 0x48  ; 0xfd70
+        0x0000fd2c:    e3a02094    . ..    MOV      r2,#0x94
+        0x0000fd30:    e59f3044    D0..    LDR      r3,[pc,#68]   ; [(gdisp + 1104) = 0xfd7c]  = 0x450
+        0x0000fd34:    e0020092    ....    MUL      r2,r2,r0
+        0x0000fd38:    e0831002    ....    ADD      r1,r3,r2
+        0x0000fd3c:    e7933002    .0..    LDR      r3,[r3,r2]
+        0x0000fd40:    e3130c02    ....    TST      r3,#0x200
+        0x0000fd44:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0xfd70
+        0x0000fd48:    e5910070    p...    LDR      r0,[r1,#0x70]
+        0x0000fd4c:    e3a04000    .@..    MOV      r4,#0
+        0x0000fd50:    e5913064    d0..    LDR      r3,[r1,#0x64]
+        0x0000fd54:    e5912068    h ..    LDR      r2,[r1,#0x68]
+        0x0000fd58:    e591106c    l...    LDR      r1,[r1,#0x6c]
+        0x0000fd5c:    e58c000c    ....    STR      r0,[r12,#0xc]
+        0x0000fd60:    e58c3000    .0..    STR      r3,[r12,#0]
+        0x0000fd64:    e58c2004    . ..    STR      r2,[r12,#4]
+        0x0000fd68:    e58c1008    ....    STR      r1,[r12,#8]
+        0x0000fd6c:    ea000000    ....    B        {pc} + 0x8  ; 0xfd74
+        0x0000fd70:    e3e04001    .@..    MVN      r4,#1
+        0x0000fd74:    e1a00004    ....    MOV      r0,r4
+        0x0000fd78:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x0000fd7c:    00000450    P...    DCD    1104 ; gdisp
+    BSP_disp_scaler_get_smooth
+    $a
+        0x0000fd80:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fd84:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0000fd88:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fd8c:    e59f200c    . ..    LDR      r2,[pc,#12]   ; [gdisp = 0xfda0] = 0
+        0x0000fd90:    e3a03094    .0..    MOV      r3,#0x94
+        0x0000fd94:    e0202093    .  .    MLA      r0,r3,r0,r2
+        0x0000fd98:    e59004cc    ....    LDR      r0,[r0,#0x4cc]
+        0x0000fd9c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0000fda0:    00000000    ....    DCD    0 ; gdisp
+    Scaler_Set_Enhance
+    $a
+        0x0000fda4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fda8:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x0000fdac:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fdb0:    e24dd018    ..M.    SUB      r13,r13,#0x18
+        0x0000fdb4:    e1a0a003    ....    MOV      r10,r3
+        0x0000fdb8:    e59f306c    l0..    LDR      r3,[pc,#108]  ; [(gdisp + 1104) = 0xfe2c]  = 0x450
+        0x0000fdbc:    e3a04094    .@..    MOV      r4,#0x94
+        0x0000fdc0:    e1a08000    ....    MOV      r8,r0
+        0x0000fdc4:    e1a06001    .`..    MOV      r6,r1
+        0x0000fdc8:    e1a07002    .p..    MOV      r7,r2
+        0x0000fdcc:    e0243094    .0$.    MLA      r4,r4,r0,r3
+        0x0000fdd0:    e5940028    (...    LDR      r0,[r4,#0x28]
+        0x0000fdd4:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0000fdd8:    e1a05000    .P..    MOV      r5,r0
+        0x0000fddc:    e5940050    P...    LDR      r0,[r4,#0x50]
+        0x0000fde0:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0000fde4:    e59bc004    ....    LDR      r12,[r11,#4]
+        0x0000fde8:    e5d41038    8...    LDRB     r1,[r4,#0x38]
+        0x0000fdec:    e3550001    ..U.    CMP      r5,#1
+        0x0000fdf0:    13a03000    .0..    MOVNE    r3,#0
+        0x0000fdf4:    03a03001    .0..    MOVEQ    r3,#1
+        0x0000fdf8:    e5d42060    ` ..    LDRB     r2,[r4,#0x60]
+        0x0000fdfc:    e98d14c0    ....    STMIB    r13,{r6,r7,r10,r12}
+        0x0000fe00:    e3500001    ..P.    CMP      r0,#1
+        0x0000fe04:    13a0c000    ....    MOVNE    r12,#0
+        0x0000fe08:    03a0c001    ....    MOVEQ    r12,#1
+        0x0000fe0c:    e6ef0078    x...    UXTB     r0,r8
+        0x0000fe10:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0000fe14:    ebfffffe    ....    BL       DE_SCAL_Set_CSC_Coef_Enhance  ; 0x5d00 Section #1
+        0x0000fe18:    e3a03001    .0..    MOV      r3,#1
+        0x0000fe1c:    e3a00000    ....    MOV      r0,#0
+        0x0000fe20:    e5c43004    .0..    STRB     r3,[r4,#4]
+        0x0000fe24:    e24bd024    $.K.    SUB      r13,r11,#0x24
+        0x0000fe28:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x0000fe2c:    00000450    P...    DCD    1104 ; gdisp
+    Scaler_sw_para_to_reg
+    $a
+        0x0000fe30:    e1a0c00d    ....    MOV      r12,r13
+        0x0000fe34:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0000fe38:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000fe3c:    e2504000    .@P.    SUBS     r4,r0,#0
+        0x0000fe40:    1a00000f    ....    BNE      {pc} + 0x44  ; 0xfe84
+        0x0000fe44:    e351000b    ..Q.    CMP      r1,#0xb
+        0x0000fe48:    0a00004a    J...    BEQ      {pc} + 0x130  ; 0xff78
+        0x0000fe4c:    e351000d    ..Q.    CMP      r1,#0xd
+        0x0000fe50:    0a00004a    J...    BEQ      {pc} + 0x130  ; 0xff80
+        0x0000fe54:    e351000c    ..Q.    CMP      r1,#0xc
+        0x0000fe58:    0a00004a    J...    BEQ      {pc} + 0x130  ; 0xff88
+        0x0000fe5c:    e351000e    ..Q.    CMP      r1,#0xe
+        0x0000fe60:    0a00004a    J...    BEQ      {pc} + 0x130  ; 0xff90
+        0x0000fe64:    e351000f    ..Q.    CMP      r1,#0xf
+        0x0000fe68:    0a00004a    J...    BEQ      {pc} + 0x130  ; 0xff98
+        0x0000fe6c:    e351000a    ..Q.    CMP      r1,#0xa
+        0x0000fe70:    0a00004a    J...    BEQ      {pc} + 0x130  ; 0xffa0
+        0x0000fe74:    e3510009    ..Q.    CMP      r1,#9
+        0x0000fe78:    159f0130    0...    LDRNE    r0,[pc,#304]  ; [([Section 10] + 2628) = 0xffb0]  = 0xa44
+        0x0000fe7c:    1a000037    7...    BNE      {pc} + 0xe4  ; 0xff60
+        0x0000fe80:    ea000046    F...    B        {pc} + 0x120  ; 0xffa0
+        0x0000fe84:    e3540001    ..T.    CMP      r4,#1
+        0x0000fe88:    1a00000b    ....    BNE      {pc} + 0x34  ; 0xfebc
+        0x0000fe8c:    e3510001    ..Q.    CMP      r1,#1
+        0x0000fe90:    0a00003c    <...    BEQ      {pc} + 0xf8  ; 0xff88
+        0x0000fe94:    e3510004    ..Q.    CMP      r1,#4
+        0x0000fe98:    0a00003e    >...    BEQ      {pc} + 0x100  ; 0xff98
+        0x0000fe9c:    e3510000    ..Q.    CMP      r1,#0
+        0x0000fea0:    0a000034    4...    BEQ      {pc} + 0xd8  ; 0xff78
+        0x0000fea4:    e3510002    ..Q.    CMP      r1,#2
+        0x0000fea8:    0a000034    4...    BEQ      {pc} + 0xd8  ; 0xff80
+        0x0000feac:    e3510006    ..Q.    CMP      r1,#6
+        0x0000feb0:    159f00fc    ....    LDRNE    r0,[pc,#252]  ; [([Section 10] + 2697) = 0xffb4]  = 0xa89
+        0x0000feb4:    1a000029    )...    BNE      {pc} + 0xac  ; 0xff60
+        0x0000feb8:    ea00003a    :...    B        {pc} + 0xf0  ; 0xffa8
+        0x0000febc:    e3540002    ..T.    CMP      r4,#2
+        0x0000fec0:    1a000016    ....    BNE      {pc} + 0x60  ; 0xff20
+        0x0000fec4:    e3510003    ..Q.    CMP      r1,#3
+        0x0000fec8:    0a00002a    *...    BEQ      {pc} + 0xb0  ; 0xff78
+        0x0000fecc:    e3510004    ..Q.    CMP      r1,#4
+        0x0000fed0:    0a00002c    ,...    BEQ      {pc} + 0xb8  ; 0xff88
+        0x0000fed4:    e3510005    ..Q.    CMP      r1,#5
+        0x0000fed8:    0a000028    (...    BEQ      {pc} + 0xa8  ; 0xff80
+        0x0000fedc:    e3510006    ..Q.    CMP      r1,#6
+        0x0000fee0:    0a00002a    *...    BEQ      {pc} + 0xb0  ; 0xff90
+        0x0000fee4:    e3510007    ..Q.    CMP      r1,#7
+        0x0000fee8:    0a000022    "...    BEQ      {pc} + 0x90  ; 0xff78
+        0x0000feec:    e3510009    ..Q.    CMP      r1,#9
+        0x0000fef0:    0a000020     ...    BEQ      {pc} + 0x88  ; 0xff78
+        0x0000fef4:    e351000a    ..Q.    CMP      r1,#0xa
+        0x0000fef8:    0a000022    "...    BEQ      {pc} + 0x90  ; 0xff88
+        0x0000fefc:    e3510000    ..Q.    CMP      r1,#0
+        0x0000ff00:    0a000020     ...    BEQ      {pc} + 0x88  ; 0xff88
+        0x0000ff04:    e3510002    ..Q.    CMP      r1,#2
+        0x0000ff08:    0a00001a    ....    BEQ      {pc} + 0x70  ; 0xff78
+        0x0000ff0c:    e351000f    ..Q.    CMP      r1,#0xf
+        0x0000ff10:    11a01001    ....    MOVNE    r1,r1
+        0x0000ff14:    159f009c    ....    LDRNE    r0,[pc,#156]  ; [([Section 10] + 2758) = 0xffb8]  = 0xac6
+        0x0000ff18:    1a000010    ....    BNE      {pc} + 0x48  ; 0xff60
+        0x0000ff1c:    ea000015    ....    B        {pc} + 0x5c  ; 0xff78
+        0x0000ff20:    e3540003    ..T.    CMP      r4,#3
+        0x0000ff24:    1a00000e    ....    BNE      {pc} + 0x40  ; 0xff64
+        0x0000ff28:    e351000b    ..Q.    CMP      r1,#0xb
+        0x0000ff2c:    0a000019    ....    BEQ      {pc} + 0x6c  ; 0xff98
+        0x0000ff30:    e351000c    ..Q.    CMP      r1,#0xc
+        0x0000ff34:    0a00001b    ....    BEQ      {pc} + 0x74  ; 0xffa8
+        0x0000ff38:    e351000d    ..Q.    CMP      r1,#0xd
+        0x0000ff3c:    0a000017    ....    BEQ      {pc} + 0x64  ; 0xffa0
+        0x0000ff40:    e351000e    ..Q.    CMP      r1,#0xe
+        0x0000ff44:    03a00007    ....    MOVEQ    r0,#7
+        0x0000ff48:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0000ff4c:    e351000a    ..Q.    CMP      r1,#0xa
+        0x0000ff50:    0a00000c    ....    BEQ      {pc} + 0x38  ; 0xff88
+        0x0000ff54:    e3510009    ..Q.    CMP      r1,#9
+        0x0000ff58:    0a000006    ....    BEQ      {pc} + 0x20  ; 0xff78
+        0x0000ff5c:    e59f0058    X...    LDR      r0,[pc,#88]   ; [([Section 10] + 2829) = 0xffbc]  = 0xb0d
+        0x0000ff60:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000ff64:    e1a01004    ....    MOV      r1,r4
+        0x0000ff68:    e59f0050    P...    LDR      r0,[pc,#80]   ; [([Section 10] + 2892) = 0xffc0]  = 0xb4c
+        0x0000ff6c:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0000ff70:    e3e00000    ....    MVN      r0,#0
+        0x0000ff74:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000ff78:    e3a00000    ....    MOV      r0,#0
+        0x0000ff7c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000ff80:    e3a00002    ....    MOV      r0,#2
+        0x0000ff84:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000ff88:    e3a00001    ....    MOV      r0,#1
+        0x0000ff8c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000ff90:    e3a00003    ....    MOV      r0,#3
+        0x0000ff94:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000ff98:    e3a00004    ....    MOV      r0,#4
+        0x0000ff9c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000ffa0:    e3a00005    ....    MOV      r0,#5
+        0x0000ffa4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x0000ffa8:    e3a00006    ....    MOV      r0,#6
+        0x0000ffac:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0000ffb0:    00000a44    D...    DCD    2628 ; [Section 10]
+        0x0000ffb4:    00000a89    ....    DCD    2697 ; [Section 10]
+        0x0000ffb8:    00000ac6    ....    DCD    2758 ; [Section 10]
+        0x0000ffbc:    00000b0d    ....    DCD    2829 ; [Section 10]
+        0x0000ffc0:    00000b4c    L...    DCD    2892 ; [Section 10]
+    BSP_disp_scaler_set_smooth
+    $a
+        0x0000ffc4:    e1a0c00d    ....    MOV      r12,r13
+        0x0000ffc8:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000ffcc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000ffd0:    e24dd044    D.M.    SUB      r13,r13,#0x44
+        0x0000ffd4:    e59f50f0    .P..    LDR      r5,[pc,#240]  ; [(gdisp + 1104) = 0x100cc]  = 0x450
+        0x0000ffd8:    e1a07000    .p..    MOV      r7,r0
+        0x0000ffdc:    e3a04094    .@..    MOV      r4,#0x94
+        0x0000ffe0:    e3a00001    ....    MOV      r0,#1
+        0x0000ffe4:    e3a06000    .`..    MOV      r6,#0
+        0x0000ffe8:    e0245794    .W$.    MLA      r4,r4,r7,r5
+        0x0000ffec:    e0855487    .T..    ADD      r5,r5,r7,LSL #9
+        0x0000fff0:    e584107c    |...    STR      r1,[r4,#0x7c]
+        0x0000fff4:    e5d41030    0...    LDRB     r1,[r4,#0x30]
+        0x0000fff8:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0000fffc:    e5d41028    (...    LDRB     r1,[r4,#0x28]
+        0x00010000:    e54b0035    5.K.    STRB     r0,[r11,#-0x35]
+        0x00010004:    e1a00006    ....    MOV      r0,r6
+        0x00010008:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001000c:    e5d4102c    ,...    LDRB     r1,[r4,#0x2c]
+        0x00010010:    e54b0034    4.K.    STRB     r0,[r11,#-0x34]
+        0x00010014:    e3a00002    ....    MOV      r0,#2
+        0x00010018:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001001c:    e5555234    4RU.    LDRB     r5,[r5,#-0x234]
+        0x00010020:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x00010024:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00010028:    e24b2054    T K.    SUB      r2,r11,#0x54
+        0x0001002c:    e50b5058    XP..    STR      r5,[r11,#-0x58]
+        0x00010030:    e594c020     ...    LDR      r12,[r4,#0x20]
+        0x00010034:    e5945070    pP..    LDR      r5,[r4,#0x70]
+        0x00010038:    e594706c    lp..    LDR      r7,[r4,#0x6c]
+        0x0001003c:    e5948054    T...    LDR      r8,[r4,#0x54]
+        0x00010040:    e594a050    P...    LDR      r10,[r4,#0x50]
+        0x00010044:    e5949074    t...    LDR      r9,[r4,#0x74]
+        0x00010048:    e5d4e07c    |...    LDRB     r14,[r4,#0x7c]
+        0x0001004c:    e50bc054    T...    STR      r12,[r11,#-0x54]
+        0x00010050:    e594c064    d...    LDR      r12,[r4,#0x64]
+        0x00010054:    e50bc050    P...    STR      r12,[r11,#-0x50]
+        0x00010058:    e594c068    h...    LDR      r12,[r4,#0x68]
+        0x0001005c:    e50b5044    DP..    STR      r5,[r11,#-0x44]
+        0x00010060:    e50b7048    Hp..    STR      r7,[r11,#-0x48]
+        0x00010064:    e50bc04c    L...    STR      r12,[r11,#-0x4c]
+        0x00010068:    e54b802e    ..K.    STRB     r8,[r11,#-0x2e]
+        0x0001006c:    e54ba02d    -.K.    STRB     r10,[r11,#-0x2d]
+        0x00010070:    e50b9040    @...    STR      r9,[r11,#-0x40]
+        0x00010074:    e594c078    x...    LDR      r12,[r4,#0x78]
+        0x00010078:    e58de00c    ....    STR      r14,[r13,#0xc]
+        0x0001007c:    e54b6036    6`K.    STRB     r6,[r11,#-0x36]
+        0x00010080:    e50bc03c    <...    STR      r12,[r11,#-0x3c]
+        0x00010084:    e51bc058    X...    LDR      r12,[r11,#-0x58]
+        0x00010088:    e54b6030    0`K.    STRB     r6,[r11,#-0x30]
+        0x0001008c:    e54b602f    /`K.    STRB     r6,[r11,#-0x2f]
+        0x00010090:    e54bc032    2.K.    STRB     r12,[r11,#-0x32]
+        0x00010094:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x00010098:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0001009c:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x000100a0:    e54b0033    3.K.    STRB     r0,[r11,#-0x33]
+        0x000100a4:    e1a00006    ....    MOV      r0,r6
+        0x000100a8:    e58dc004    ....    STR      r12,[r13,#4]
+        0x000100ac:    e24bc02e    ..K.    SUB      r12,r11,#0x2e
+        0x000100b0:    e58dc008    ....    STR      r12,[r13,#8]
+        0x000100b4:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Coef  ; 0x4d70 Section #1
+        0x000100b8:    e3a03001    .0..    MOV      r3,#1
+        0x000100bc:    e1a00006    ....    MOV      r0,r6
+        0x000100c0:    e5c43004    .0..    STRB     r3,[r4,#4]
+        0x000100c4:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x000100c8:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x000100cc:    00000450    P...    DCD    1104 ; gdisp
+    Scaler_Set_SclRegn
+    $a
+        0x000100d0:    e1a0c00d    ....    MOV      r12,r13
+        0x000100d4:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x000100d8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000100dc:    e24dd054    T.M.    SUB      r13,r13,#0x54
+        0x000100e0:    e59f4190    .A..    LDR      r4,[pc,#400]  ; [(gdisp + 1104) = 0x10278]  = 0x450
+        0x000100e4:    e1a05000    .P..    MOV      r5,r0
+        0x000100e8:    e3a03094    .0..    MOV      r3,#0x94
+        0x000100ec:    e591e008    ....    LDR      r14,[r1,#8]
+        0x000100f0:    e5912000    . ..    LDR      r2,[r1,#0]
+        0x000100f4:    e3a00001    ....    MOV      r0,#1
+        0x000100f8:    e0294593    .E).    MLA      r9,r3,r5,r4
+        0x000100fc:    e591c004    ....    LDR      r12,[r1,#4]
+        0x00010100:    e591300c    .0..    LDR      r3,[r1,#0xc]
+        0x00010104:    e3a06000    .`..    MOV      r6,#0
+        0x00010108:    e0844485    .D..    ADD      r4,r4,r5,LSL #9
+        0x0001010c:    e24b7037    7pK.    SUB      r7,r11,#0x37
+        0x00010110:    e6ef5075    uP..    UXTB     r5,r5
+        0x00010114:    e5892064    d ..    STR      r2,[r9,#0x64]
+        0x00010118:    e589c068    h...    STR      r12,[r9,#0x68]
+        0x0001011c:    e5893070    p0..    STR      r3,[r9,#0x70]
+        0x00010120:    e589e06c    l...    STR      r14,[r9,#0x6c]
+        0x00010124:    e5d91030    0...    LDRB     r1,[r9,#0x30]
+        0x00010128:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001012c:    e5d91028    (...    LDRB     r1,[r9,#0x28]
+        0x00010130:    e54b0035    5.K.    STRB     r0,[r11,#-0x35]
+        0x00010134:    e1a00006    ....    MOV      r0,r6
+        0x00010138:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001013c:    e5d9102c    ,...    LDRB     r1,[r9,#0x2c]
+        0x00010140:    e54b0034    4.K.    STRB     r0,[r11,#-0x34]
+        0x00010144:    e3a00002    ....    MOV      r0,#2
+        0x00010148:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001014c:    e54b6036    6`K.    STRB     r6,[r11,#-0x36]
+        0x00010150:    e54b0033    3.K.    STRB     r0,[r11,#-0x33]
+        0x00010154:    e5990014    ....    LDR      r0,[r9,#0x14]
+        0x00010158:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0001015c:    e50b004c    L...    STR      r0,[r11,#-0x4c]
+        0x00010160:    e5990018    ....    LDR      r0,[r9,#0x18]
+        0x00010164:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010168:    e50b0048    H...    STR      r0,[r11,#-0x48]
+        0x0001016c:    e599001c    ....    LDR      r0,[r9,#0x1c]
+        0x00010170:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010174:    e5993038    80..    LDR      r3,[r9,#0x38]
+        0x00010178:    e599c020     ...    LDR      r12,[r9,#0x20]
+        0x0001017c:    e5991064    d...    LDR      r1,[r9,#0x64]
+        0x00010180:    e3530003    ..S.    CMP      r3,#3
+        0x00010184:    e599206c    l ..    LDR      r2,[r9,#0x6c]
+        0x00010188:    e5993068    h0..    LDR      r3,[r9,#0x68]
+        0x0001018c:    e50b105c    \...    STR      r1,[r11,#-0x5c]
+        0x00010190:    e24b104c    L.K.    SUB      r1,r11,#0x4c
+        0x00010194:    e50b2054    T ..    STR      r2,[r11,#-0x54]
+        0x00010198:    e50bc060    `...    STR      r12,[r11,#-0x60]
+        0x0001019c:    e50b3058    X0..    STR      r3,[r11,#-0x58]
+        0x000101a0:    e5993070    p0..    LDR      r3,[r9,#0x70]
+        0x000101a4:    e554e234    4.T.    LDRB     r14,[r4,#-0x234]
+        0x000101a8:    e3a04000    .@..    MOV      r4,#0
+        0x000101ac:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x000101b0:    e1a03007    .0..    MOV      r3,r7
+        0x000101b4:    e599c054    T...    LDR      r12,[r9,#0x54]
+        0x000101b8:    e50bc068    h...    STR      r12,[r11,#-0x68]
+        0x000101bc:    e599c078    x...    LDR      r12,[r9,#0x78]
+        0x000101c0:    e5998074    t...    LDR      r8,[r9,#0x74]
+        0x000101c4:    e599a050    P...    LDR      r10,[r9,#0x50]
+        0x000101c8:    e50b0044    D...    STR      r0,[r11,#-0x44]
+        0x000101cc:    e1a00005    ....    MOV      r0,r5
+        0x000101d0:    85896038    8`..    STRHI    r6,[r9,#0x38]
+        0x000101d4:    e24b6060    ``K.    SUB      r6,r11,#0x60
+        0x000101d8:    e54be032    2.K.    STRB     r14,[r11,#-0x32]
+        0x000101dc:    e50bc03c    <...    STR      r12,[r11,#-0x3c]
+        0x000101e0:    e1a02006    . ..    MOV      r2,r6
+        0x000101e4:    e51be068    h...    LDR      r14,[r11,#-0x68]
+        0x000101e8:    e51bc06c    l...    LDR      r12,[r11,#-0x6c]
+        0x000101ec:    e50b8040    @...    STR      r8,[r11,#-0x40]
+        0x000101f0:    e24b802e    ..K.    SUB      r8,r11,#0x2e
+        0x000101f4:    e54be02e    ..K.    STRB     r14,[r11,#-0x2e]
+        0x000101f8:    e50bc050    P...    STR      r12,[r11,#-0x50]
+        0x000101fc:    e54ba02d    -.K.    STRB     r10,[r11,#-0x2d]
+        0x00010200:    e54b402f    /@K.    STRB     r4,[r11,#-0x2f]
+        0x00010204:    e54b4030    0@K.    STRB     r4,[r11,#-0x30]
+        0x00010208:    e58d4000    .@..    STR      r4,[r13,#0]
+        0x0001020c:    e58d4004    .@..    STR      r4,[r13,#4]
+        0x00010210:    ebfffffe    ....    BL       DE_SCAL_Config_Src  ; 0x3e7c Section #1
+        0x00010214:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00010218:    e1a02006    . ..    MOV      r2,r6
+        0x0001021c:    e1a03007    .0..    MOV      r3,r7
+        0x00010220:    e1a00005    ....    MOV      r0,r5
+        0x00010224:    e24be032    2.K.    SUB      r14,r11,#0x32
+        0x00010228:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x0001022c:    e58de000    ....    STR      r14,[r13,#0]
+        0x00010230:    e58dc004    ....    STR      r12,[r13,#4]
+        0x00010234:    e58d8008    ....    STR      r8,[r13,#8]
+        0x00010238:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Factor  ; 0x4b00 Section #1
+        0x0001023c:    e5d9c07c    |...    LDRB     r12,[r9,#0x7c]
+        0x00010240:    e1a00005    ....    MOV      r0,r5
+        0x00010244:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00010248:    e1a02006    . ..    MOV      r2,r6
+        0x0001024c:    e1a03007    .0..    MOV      r3,r7
+        0x00010250:    e24be032    2.K.    SUB      r14,r11,#0x32
+        0x00010254:    e58d8008    ....    STR      r8,[r13,#8]
+        0x00010258:    e58de000    ....    STR      r14,[r13,#0]
+        0x0001025c:    e24be040    @.K.    SUB      r14,r11,#0x40
+        0x00010260:    e58dc00c    ....    STR      r12,[r13,#0xc]
+        0x00010264:    e58de004    ....    STR      r14,[r13,#4]
+        0x00010268:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Coef  ; 0x4d70 Section #1
+        0x0001026c:    e1a00004    ....    MOV      r0,r4
+        0x00010270:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00010274:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00010278:    00000450    P...    DCD    1104 ; gdisp
+    Scaler_Set_Output_Size
+    $a
+        0x0001027c:    e1a0c00d    ....    MOV      r12,r13
+        0x00010280:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00010284:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010288:    e24dd044    D.M.    SUB      r13,r13,#0x44
+        0x0001028c:    e59f4180    .A..    LDR      r4,[pc,#384]  ; [(gdisp + 1104) = 0x10414]  = 0x450
+        0x00010290:    e1a0a000    ....    MOV      r10,r0
+        0x00010294:    e3a03094    .0..    MOV      r3,#0x94
+        0x00010298:    e5912000    . ..    LDR      r2,[r1,#0]
+        0x0001029c:    e3a00001    ....    MOV      r0,#1
+        0x000102a0:    e3a07000    .p..    MOV      r7,#0
+        0x000102a4:    e0294a93    .J).    MLA      r9,r3,r10,r4
+        0x000102a8:    e5913004    .0..    LDR      r3,[r1,#4]
+        0x000102ac:    e084448a    .D..    ADD      r4,r4,r10,LSL #9
+        0x000102b0:    e6ef807a    z...    UXTB     r8,r10
+        0x000102b4:    e5893078    x0..    STR      r3,[r9,#0x78]
+        0x000102b8:    e5892074    t ..    STR      r2,[r9,#0x74]
+        0x000102bc:    e5d91030    0...    LDRB     r1,[r9,#0x30]
+        0x000102c0:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x000102c4:    e5d91028    (...    LDRB     r1,[r9,#0x28]
+        0x000102c8:    e54b0035    5.K.    STRB     r0,[r11,#-0x35]
+        0x000102cc:    e1a00007    ....    MOV      r0,r7
+        0x000102d0:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x000102d4:    e5d9102c    ,...    LDRB     r1,[r9,#0x2c]
+        0x000102d8:    e54b0034    4.K.    STRB     r0,[r11,#-0x34]
+        0x000102dc:    e3a00002    ....    MOV      r0,#2
+        0x000102e0:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x000102e4:    e5544234    4BT.    LDRB     r4,[r4,#-0x234]
+        0x000102e8:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x000102ec:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x000102f0:    e24b2054    T K.    SUB      r2,r11,#0x54
+        0x000102f4:    e50b4058    X@..    STR      r4,[r11,#-0x58]
+        0x000102f8:    e5995064    dP..    LDR      r5,[r9,#0x64]
+        0x000102fc:    e599e074    t...    LDR      r14,[r9,#0x74]
+        0x00010300:    e5994070    p@..    LDR      r4,[r9,#0x70]
+        0x00010304:    e5996054    T`..    LDR      r6,[r9,#0x54]
+        0x00010308:    e50b5050    PP..    STR      r5,[r11,#-0x50]
+        0x0001030c:    e599c068    h...    LDR      r12,[r9,#0x68]
+        0x00010310:    e50b4044    D@..    STR      r4,[r11,#-0x44]
+        0x00010314:    e50bc04c    L...    STR      r12,[r11,#-0x4c]
+        0x00010318:    e599c06c    l...    LDR      r12,[r9,#0x6c]
+        0x0001031c:    e54b602e    .`K.    STRB     r6,[r11,#-0x2e]
+        0x00010320:    e50bc048    H...    STR      r12,[r11,#-0x48]
+        0x00010324:    e599c050    P...    LDR      r12,[r9,#0x50]
+        0x00010328:    e50be040    @...    STR      r14,[r11,#-0x40]
+        0x0001032c:    e54bc02d    -.K.    STRB     r12,[r11,#-0x2d]
+        0x00010330:    e51bc058    X...    LDR      r12,[r11,#-0x58]
+        0x00010334:    e599e078    x...    LDR      r14,[r9,#0x78]
+        0x00010338:    e54b7036    6pK.    STRB     r7,[r11,#-0x36]
+        0x0001033c:    e54bc032    2.K.    STRB     r12,[r11,#-0x32]
+        0x00010340:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x00010344:    e50be03c    <...    STR      r14,[r11,#-0x3c]
+        0x00010348:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0001034c:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x00010350:    e58dc004    ....    STR      r12,[r13,#4]
+        0x00010354:    e24bc02e    ..K.    SUB      r12,r11,#0x2e
+        0x00010358:    e58dc008    ....    STR      r12,[r13,#8]
+        0x0001035c:    e599e06c    l...    LDR      r14,[r9,#0x6c]
+        0x00010360:    e54b7030    0pK.    STRB     r7,[r11,#-0x30]
+        0x00010364:    e54b702f    /pK.    STRB     r7,[r11,#-0x2f]
+        0x00010368:    e54b0033    3.K.    STRB     r0,[r11,#-0x33]
+        0x0001036c:    e1a00008    ....    MOV      r0,r8
+        0x00010370:    e50be054    T...    STR      r14,[r11,#-0x54]
+        0x00010374:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Factor  ; 0x4b00 Section #1
+        0x00010378:    e1d938d0    .8..    LDRSB    r3,[r9,#0x80]
+        0x0001037c:    e3530001    ..S.    CMP      r3,#1
+        0x00010380:    1a000006    ....    BNE      {pc} + 0x20  ; 0x103a0
+        0x00010384:    e599c090    ....    LDR      r12,[r9,#0x90]
+        0x00010388:    e1a0000a    ....    MOV      r0,r10
+        0x0001038c:    e2891084    ....    ADD      r1,r9,#0x84
+        0x00010390:    e891000e    ....    LDM      r1,{r1-r3}
+        0x00010394:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010398:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x0001039c:    ea000008    ....    B        {pc} + 0x28  ; 0x103c4
+        0x000103a0:    e5990028    (...    LDR      r0,[r9,#0x28]
+        0x000103a4:    e5d94038    8@..    LDRB     r4,[r9,#0x38]
+        0x000103a8:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x000103ac:    e1a02007    . ..    MOV      r2,r7
+        0x000103b0:    e58d7000    .p..    STR      r7,[r13,#0]
+        0x000103b4:    e1a01004    ....    MOV      r1,r4
+        0x000103b8:    e6ef3070    p0..    UXTB     r3,r0
+        0x000103bc:    e1a00008    ....    MOV      r0,r8
+        0x000103c0:    ebfffffe    ....    BL       DE_SCAL_Set_CSC_Coef  ; 0x50dc Section #1
+        0x000103c4:    e5d9c07c    |...    LDRB     r12,[r9,#0x7c]
+        0x000103c8:    e24b5032    2PK.    SUB      r5,r11,#0x32
+        0x000103cc:    e24b6040    @`K.    SUB      r6,r11,#0x40
+        0x000103d0:    e24b402e    .@K.    SUB      r4,r11,#0x2e
+        0x000103d4:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x000103d8:    e24b2054    T K.    SUB      r2,r11,#0x54
+        0x000103dc:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x000103e0:    e1a00008    ....    MOV      r0,r8
+        0x000103e4:    e58dc00c    ....    STR      r12,[r13,#0xc]
+        0x000103e8:    e88d0060    `...    STM      r13,{r5,r6}
+        0x000103ec:    e58d4008    .@..    STR      r4,[r13,#8]
+        0x000103f0:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Coef  ; 0x4d70 Section #1
+        0x000103f4:    e1a00008    ....    MOV      r0,r8
+        0x000103f8:    e1a01005    ....    MOV      r1,r5
+        0x000103fc:    e1a02004    . ..    MOV      r2,r4
+        0x00010400:    e1a03006    .0..    MOV      r3,r6
+        0x00010404:    ebfffffe    ....    BL       DE_SCAL_Set_Out_Size  ; 0x51d4 Section #1
+        0x00010408:    e3a00000    ....    MOV      r0,#0
+        0x0001040c:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00010410:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00010414:    00000450    P...    DCD    1104 ; gdisp
+    BSP_disp_scaler_start
+    $a
+        0x00010418:    e1a0c00d    ....    MOV      r12,r13
+        0x0001041c:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00010420:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010424:    e24dd05c    \.M.    SUB      r13,r13,#0x5c
+        0x00010428:    e2519000    ..Q.    SUBS     r9,r1,#0
+        0x0001042c:    e1a06000    .`..    MOV      r6,r0
+        0x00010430:    1a000003    ....    BNE      {pc} + 0x14  ; 0x10444
+        0x00010434:    e59f0340    @...    LDR      r0,[pc,#832]  ; [([Section 10] + 2940) = 0x1077c]  = 0xb7c
+        0x00010438:    e3e04000    .@..    MVN      r4,#0
+        0x0001043c:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00010440:    ea0000ca    ....    B        {pc} + 0x330  ; 0x10770
+        0x00010444:    e5d9101c    ....    LDRB     r1,[r9,#0x1c]
+        0x00010448:    e3a00001    ....    MOV      r0,#1
+        0x0001044c:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00010450:    e54b0035    5.K.    STRB     r0,[r11,#-0x35]
+        0x00010454:    e3a00000    ....    MOV      r0,#0
+        0x00010458:    e5d91014    ....    LDRB     r1,[r9,#0x14]
+        0x0001045c:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00010460:    e54b0034    4.K.    STRB     r0,[r11,#-0x34]
+        0x00010464:    e3a00002    ....    MOV      r0,#2
+        0x00010468:    e5d91018    ....    LDRB     r1,[r9,#0x18]
+        0x0001046c:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00010470:    e3a03000    .0..    MOV      r3,#0
+        0x00010474:    e54b3036    60K.    STRB     r3,[r11,#-0x36]
+        0x00010478:    e54b0033    3.K.    STRB     r0,[r11,#-0x33]
+        0x0001047c:    e599004c    L...    LDR      r0,[r9,#0x4c]
+        0x00010480:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x00010484:    e5991054    T...    LDR      r1,[r9,#0x54]
+        0x00010488:    e3500001    ..P.    CMP      r0,#1
+        0x0001048c:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x104bc
+        0x00010490:    e3510000    ..Q.    CMP      r1,#0
+        0x00010494:    1a000004    ....    BNE      {pc} + 0x18  ; 0x104ac
+        0x00010498:    e2800002    ....    ADD      r0,r0,#2
+        0x0001049c:    e5d9104c    L...    LDRB     r1,[r9,#0x4c]
+        0x000104a0:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x000104a4:    e54b002d    -.K.    STRB     r0,[r11,#-0x2d]
+        0x000104a8:    ea000018    ....    B        {pc} + 0x68  ; 0x10510
+        0x000104ac:    e59f02cc    ....    LDR      r0,[pc,#716]  ; [([Section 10] + 2972) = 0x10780]  = 0xb9c
+        0x000104b0:    e3e04000    .@..    MVN      r4,#0
+        0x000104b4:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x000104b8:    ea0000ac    ....    B        {pc} + 0x2b8  ; 0x10770
+        0x000104bc:    e3510000    ..Q.    CMP      r1,#0
+        0x000104c0:    1a000004    ....    BNE      {pc} + 0x18  ; 0x104d8
+        0x000104c4:    e599304c    L0..    LDR      r3,[r9,#0x4c]
+        0x000104c8:    e2433009    .0C.    SUB      r3,r3,#9
+        0x000104cc:    e3530001    ..S.    CMP      r3,#1
+        0x000104d0:    8a000009    ....    BHI      {pc} + 0x2c  ; 0x104fc
+        0x000104d4:    ea000004    ....    B        {pc} + 0x18  ; 0x104ec
+        0x000104d8:    e3510001    ..Q.    CMP      r1,#1
+        0x000104dc:    1a000006    ....    BNE      {pc} + 0x20  ; 0x104fc
+        0x000104e0:    e599304c    L0..    LDR      r3,[r9,#0x4c]
+        0x000104e4:    e353000a    ..S.    CMP      r3,#0xa
+        0x000104e8:    1a000003    ....    BNE      {pc} + 0x14  ; 0x104fc
+        0x000104ec:    e54b102d    -.K.    STRB     r1,[r11,#-0x2d]
+        0x000104f0:    e3a03000    .0..    MOV      r3,#0
+        0x000104f4:    e5c93058    X0..    STRB     r3,[r9,#0x58]
+        0x000104f8:    ea000004    ....    B        {pc} + 0x18  ; 0x10510
+        0x000104fc:    e599204c    L ..    LDR      r2,[r9,#0x4c]
+        0x00010500:    e3e04000    .@..    MVN      r4,#0
+        0x00010504:    e59f0278    x...    LDR      r0,[pc,#632]  ; [([Section 10] + 3020) = 0x10784]  = 0xbcc
+        0x00010508:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0001050c:    ea000097    ....    B        {pc} + 0x264  ; 0x10770
+        0x00010510:    e5d91050    P...    LDRB     r1,[r9,#0x50]
+        0x00010514:    e3a00002    ....    MOV      r0,#2
+        0x00010518:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001051c:    e2466064    d`F.    SUB      r6,r6,#0x64
+        0x00010520:    e50b6070    p`..    STR      r6,[r11,#-0x70]
+        0x00010524:    e3a08000    ....    MOV      r8,#0
+        0x00010528:    e6ef6076    v`..    UXTB     r6,r6
+        0x0001052c:    e24ba02e    ..K.    SUB      r10,r11,#0x2e
+        0x00010530:    e54b002e    ..K.    STRB     r0,[r11,#-0x2e]
+        0x00010534:    e5993044    D0..    LDR      r3,[r9,#0x44]
+        0x00010538:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x0001053c:    e5993048    H0..    LDR      r3,[r9,#0x48]
+        0x00010540:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x00010544:    e5990000    ....    LDR      r0,[r9,#0]
+        0x00010548:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0001054c:    e50b004c    L...    STR      r0,[r11,#-0x4c]
+        0x00010550:    e5990004    ....    LDR      r0,[r9,#4]
+        0x00010554:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010558:    e50b0048    H...    STR      r0,[r11,#-0x48]
+        0x0001055c:    e5990008    ....    LDR      r0,[r9,#8]
+        0x00010560:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010564:    e50b0044    D...    STR      r0,[r11,#-0x44]
+        0x00010568:    e599300c    .0..    LDR      r3,[r9,#0xc]
+        0x0001056c:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x00010570:    e5993028    (0..    LDR      r3,[r9,#0x28]
+        0x00010574:    e50b3068    h0..    STR      r3,[r11,#-0x68]
+        0x00010578:    e599302c    ,0..    LDR      r3,[r9,#0x2c]
+        0x0001057c:    e50b3064    d0..    STR      r3,[r11,#-0x64]
+        0x00010580:    e5993030    00..    LDR      r3,[r9,#0x30]
+        0x00010584:    e50b3060    `0..    STR      r3,[r11,#-0x60]
+        0x00010588:    e5993034    40..    LDR      r3,[r9,#0x34]
+        0x0001058c:    e54b8030    0.K.    STRB     r8,[r11,#-0x30]
+        0x00010590:    e54b802f    /.K.    STRB     r8,[r11,#-0x2f]
+        0x00010594:    e50b305c    \0..    STR      r3,[r11,#-0x5c]
+        0x00010598:    e54b8032    2.K.    STRB     r8,[r11,#-0x32]
+        0x0001059c:    e54b8031    1.K.    STRB     r8,[r11,#-0x31]
+        0x000105a0:    e5990038    8...    LDR      r0,[r9,#0x38]
+        0x000105a4:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x000105a8:    e50b0058    X...    STR      r0,[r11,#-0x58]
+        0x000105ac:    e599003c    <...    LDR      r0,[r9,#0x3c]
+        0x000105b0:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x000105b4:    e50b0054    T...    STR      r0,[r11,#-0x54]
+        0x000105b8:    e5990040    @...    LDR      r0,[r9,#0x40]
+        0x000105bc:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x000105c0:    e50b0050    P...    STR      r0,[r11,#-0x50]
+        0x000105c4:    e5990014    ....    LDR      r0,[r9,#0x14]
+        0x000105c8:    e5995010    .P..    LDR      r5,[r9,#0x10]
+        0x000105cc:    e599400c    .@..    LDR      r4,[r9,#0xc]
+        0x000105d0:    ebfffffe    ....    BL       de_format_to_bpp  ; 0xd080 Section #1
+        0x000105d4:    e3a02004    . ..    MOV      r2,#4
+        0x000105d8:    e0040594    ....    MUL      r4,r4,r5
+        0x000105dc:    e0010490    ....    MUL      r1,r0,r4
+        0x000105e0:    e5990000    ....    LDR      r0,[r9,#0]
+        0x000105e4:    e2811007    ....    ADD      r1,r1,#7
+        0x000105e8:    e1a011a1    ....    LSR      r1,r1,#3
+        0x000105ec:    ebfffffe    ....    BL       OSAL_CacheRangeFlush  ; 0x2f54 Section #1
+        0x000105f0:    e599004c    L...    LDR      r0,[r9,#0x4c]
+        0x000105f4:    e5995048    HP..    LDR      r5,[r9,#0x48]
+        0x000105f8:    e5994044    D@..    LDR      r4,[r9,#0x44]
+        0x000105fc:    ebfffffe    ....    BL       de_format_to_bpp  ; 0xd080 Section #1
+        0x00010600:    e3a02001    . ..    MOV      r2,#1
+        0x00010604:    e0040594    ....    MUL      r4,r4,r5
+        0x00010608:    e0010490    ....    MUL      r1,r0,r4
+        0x0001060c:    e5990038    8...    LDR      r0,[r9,#0x38]
+        0x00010610:    e2811007    ....    ADD      r1,r1,#7
+        0x00010614:    e1a011a1    ....    LSR      r1,r1,#3
+        0x00010618:    ebfffffe    ....    BL       OSAL_CacheRangeFlush  ; 0x2f54 Section #1
+        0x0001061c:    e24b104c    L.K.    SUB      r1,r11,#0x4c
+        0x00010620:    e24b206c    l K.    SUB      r2,r11,#0x6c
+        0x00010624:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x00010628:    e1a00006    ....    MOV      r0,r6
+        0x0001062c:    e58d8000    ....    STR      r8,[r13,#0]
+        0x00010630:    e58d8004    ....    STR      r8,[r13,#4]
+        0x00010634:    ebfffffe    ....    BL       DE_SCAL_Config_Src  ; 0x3e7c Section #1
+        0x00010638:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x0001063c:    e24b206c    l K.    SUB      r2,r11,#0x6c
+        0x00010640:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x00010644:    e1a00006    ....    MOV      r0,r6
+        0x00010648:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x0001064c:    e58da008    ....    STR      r10,[r13,#8]
+        0x00010650:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010654:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x00010658:    e58dc004    ....    STR      r12,[r13,#4]
+        0x0001065c:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Factor  ; 0x4b00 Section #1
+        0x00010660:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00010664:    e24b206c    l K.    SUB      r2,r11,#0x6c
+        0x00010668:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x0001066c:    e1a00006    ....    MOV      r0,r6
+        0x00010670:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x00010674:    e58da008    ....    STR      r10,[r13,#8]
+        0x00010678:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0001067c:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x00010680:    e58d800c    ....    STR      r8,[r13,#0xc]
+        0x00010684:    e58dc004    ....    STR      r12,[r13,#4]
+        0x00010688:    ebfffffe    ....    BL       DE_SCAL_Set_Init_Phase  ; 0x47c4 Section #1
+        0x0001068c:    e5990014    ....    LDR      r0,[r9,#0x14]
+        0x00010690:    e5d95024    $P..    LDRB     r5,[r9,#0x24]
+        0x00010694:    e5d9705c    \p..    LDRB     r7,[r9,#0x5c]
+        0x00010698:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0001069c:    e1a04000    .@..    MOV      r4,r0
+        0x000106a0:    e599004c    L...    LDR      r0,[r9,#0x4c]
+        0x000106a4:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x000106a8:    e6ef3074    t0..    UXTB     r3,r4
+        0x000106ac:    e1a01005    ....    MOV      r1,r5
+        0x000106b0:    e1a02007    . ..    MOV      r2,r7
+        0x000106b4:    e6efc070    p...    UXTB     r12,r0
+        0x000106b8:    e1a00006    ....    MOV      r0,r6
+        0x000106bc:    e58dc000    ....    STR      r12,[r13,#0]
+        0x000106c0:    ebfffffe    ....    BL       DE_SCAL_Set_CSC_Coef  ; 0x50dc Section #1
+        0x000106c4:    e24b206c    l K.    SUB      r2,r11,#0x6c
+        0x000106c8:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x000106cc:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x000106d0:    e1a00006    ....    MOV      r0,r6
+        0x000106d4:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x000106d8:    e58d800c    ....    STR      r8,[r13,#0xc]
+        0x000106dc:    e58dc000    ....    STR      r12,[r13,#0]
+        0x000106e0:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x000106e4:    e58da008    ....    STR      r10,[r13,#8]
+        0x000106e8:    e58dc004    ....    STR      r12,[r13,#4]
+        0x000106ec:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Coef  ; 0x4d70 Section #1
+        0x000106f0:    e1a0100a    ....    MOV      r1,r10
+        0x000106f4:    e1a00006    ....    MOV      r0,r6
+        0x000106f8:    ebfffffe    ....    BL       DE_SCAL_Set_Out_Format  ; 0x518c Section #1
+        0x000106fc:    e1a0200a    . ..    MOV      r2,r10
+        0x00010700:    e24b3040    @0K.    SUB      r3,r11,#0x40
+        0x00010704:    e24b1032    2.K.    SUB      r1,r11,#0x32
+        0x00010708:    e1a00006    ....    MOV      r0,r6
+        0x0001070c:    ebfffffe    ....    BL       DE_SCAL_Set_Out_Size  ; 0x51d4 Section #1
+        0x00010710:    e24b1058    X.K.    SUB      r1,r11,#0x58
+        0x00010714:    e1a00006    ....    MOV      r0,r6
+        0x00010718:    ebfffffe    ....    BL       DE_SCAL_Set_Writeback_Addr  ; 0x56bc Section #1
+        0x0001071c:    e3a01003    ....    MOV      r1,#3
+        0x00010720:    e1a00006    ....    MOV      r0,r6
+        0x00010724:    ebfffffe    ....    BL       DE_SCAL_Output_Select  ; 0x5598 Section #1
+        0x00010728:    e3a01080    ....    MOV      r1,#0x80
+        0x0001072c:    e1a00006    ....    MOV      r0,r6
+        0x00010730:    ebfffffe    ....    BL       DE_SCAL_EnableINT  ; 0x6260 Section #1
+        0x00010734:    e1a00006    ....    MOV      r0,r6
+        0x00010738:    ebfffffe    ....    BL       DE_SCAL_Start  ; 0x54bc Section #1
+        0x0001073c:    e1a00006    ....    MOV      r0,r6
+        0x00010740:    ebfffffe    ....    BL       DE_SCAL_Set_Reg_Rdy  ; 0x5514 Section #1
+        0x00010744:    e1a00006    ....    MOV      r0,r6
+        0x00010748:    ebfffffe    ....    BL       DE_SCAL_Writeback_Enable  ; 0x560c Section #1
+        0x0001074c:    e59f3034    40..    LDR      r3,[pc,#52]   ; [gdisp = 0x10788] = 0
+        0x00010750:    e51b0070    p...    LDR      r0,[r11,#-0x70]
+        0x00010754:    e1a0e00f    ....    MOV      r14,pc
+        0x00010758:    e593f02c    ,...    LDR      pc,[r3,#0x2c]
+        0x0001075c:    e1a04000    .@..    MOV      r4,r0
+        0x00010760:    e1a00006    ....    MOV      r0,r6
+        0x00010764:    ebfffffe    ....    BL       DE_SCAL_Reset  ; 0x5540 Section #1
+        0x00010768:    e1a00006    ....    MOV      r0,r6
+        0x0001076c:    ebfffffe    ....    BL       DE_SCAL_Writeback_Disable  ; 0x5638 Section #1
+        0x00010770:    e1a00004    ....    MOV      r0,r4
+        0x00010774:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00010778:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0001077c:    00000b7c    |...    DCD    2940 ; [Section 10]
+        0x00010780:    00000b9c    ....    DCD    2972 ; [Section 10]
+        0x00010784:    00000bcc    ....    DCD    3020 ; [Section 10]
+        0x00010788:    00000000    ....    DCD    0 ; gdisp
+    Scaler_Set_Para
+    $a
+        0x0001078c:    e1a0c00d    ....    MOV      r12,r13
+        0x00010790:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00010794:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010798:    e24dd054    T.M.    SUB      r13,r13,#0x54
+        0x0001079c:    e50b0068    h...    STR      r0,[r11,#-0x68]
+        0x000107a0:    e2813014    .0..    ADD      r3,r1,#0x14
+        0x000107a4:    e51be068    h...    LDR      r14,[r11,#-0x68]
+        0x000107a8:    e3a0c094    ....    MOV      r12,#0x94
+        0x000107ac:    e59fa23c    <...    LDR      r10,[pc,#572]  ; [(gdisp + 1104) = 0x109f0]  = 0x450
+        0x000107b0:    e1a04003    .@..    MOV      r4,r3
+        0x000107b4:    e2816064    d`..    ADD      r6,r1,#0x64
+        0x000107b8:    e1a07001    .p..    MOV      r7,r1
+        0x000107bc:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x000107c0:    e2877074    tp..    ADD      r7,r7,#0x74
+        0x000107c4:    e029ae9c    ..).    MLA      r9,r12,r14,r10
+        0x000107c8:    e289e014    ....    ADD      r14,r9,#0x14
+        0x000107cc:    e2895064    dP..    ADD      r5,r9,#0x64
+        0x000107d0:    e1a0c00e    ....    MOV      r12,r14
+        0x000107d4:    e289e074    t...    ADD      r14,r9,#0x74
+        0x000107d8:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x000107dc:    e8b4000f    ....    LDM      r4!,{r0-r3}
+        0x000107e0:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x000107e4:    e8940003    ....    LDM      r4,{r0,r1}
+        0x000107e8:    e88c0003    ....    STM      r12,{r0,r1}
+        0x000107ec:    e896000f    ....    LDM      r6,{r0-r3}
+        0x000107f0:    e885000f    ....    STM      r5,{r0-r3}
+        0x000107f4:    e8970003    ....    LDM      r7,{r0,r1}
+        0x000107f8:    e24b7040    @pK.    SUB      r7,r11,#0x40
+        0x000107fc:    e88e0003    ....    STM      r14,{r0,r1}
+        0x00010800:    e3a00001    ....    MOV      r0,#1
+        0x00010804:    e5d91030    0...    LDRB     r1,[r9,#0x30]
+        0x00010808:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001080c:    e5d91028    (...    LDRB     r1,[r9,#0x28]
+        0x00010810:    e54b0035    5.K.    STRB     r0,[r11,#-0x35]
+        0x00010814:    e3a00000    ....    MOV      r0,#0
+        0x00010818:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001081c:    e5d9102c    ,...    LDRB     r1,[r9,#0x2c]
+        0x00010820:    e54b0034    4.K.    STRB     r0,[r11,#-0x34]
+        0x00010824:    e3a00002    ....    MOV      r0,#2
+        0x00010828:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x0001082c:    e3a02000    . ..    MOV      r2,#0
+        0x00010830:    e54b2036    6 K.    STRB     r2,[r11,#-0x36]
+        0x00010834:    e54b0033    3.K.    STRB     r0,[r11,#-0x33]
+        0x00010838:    e5990014    ....    LDR      r0,[r9,#0x14]
+        0x0001083c:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010840:    e50b004c    L...    STR      r0,[r11,#-0x4c]
+        0x00010844:    e5990018    ....    LDR      r0,[r9,#0x18]
+        0x00010848:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0001084c:    e50b0048    H...    STR      r0,[r11,#-0x48]
+        0x00010850:    e599001c    ....    LDR      r0,[r9,#0x1c]
+        0x00010854:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010858:    e51bc068    h...    LDR      r12,[r11,#-0x68]
+        0x0001085c:    e5993038    80..    LDR      r3,[r9,#0x38]
+        0x00010860:    e5992070    p ..    LDR      r2,[r9,#0x70]
+        0x00010864:    e5996020     `..    LDR      r6,[r9,#0x20]
+        0x00010868:    e3530003    ..S.    CMP      r3,#3
+        0x0001086c:    e5995064    dP..    LDR      r5,[r9,#0x64]
+        0x00010870:    e08ae48c    ....    ADD      r14,r10,r12,LSL #9
+        0x00010874:    e5993068    h0..    LDR      r3,[r9,#0x68]
+        0x00010878:    e3a0a000    ....    MOV      r10,#0
+        0x0001087c:    e599106c    l...    LDR      r1,[r9,#0x6c]
+        0x00010880:    e599c074    t...    LDR      r12,[r9,#0x74]
+        0x00010884:    e5994078    x@..    LDR      r4,[r9,#0x78]
+        0x00010888:    e50b2050    P ..    STR      r2,[r11,#-0x50]
+        0x0001088c:    83a02000    . ..    MOVHI    r2,#0
+        0x00010890:    e50b505c    \P..    STR      r5,[r11,#-0x5c]
+        0x00010894:    e24b5037    7PK.    SUB      r5,r11,#0x37
+        0x00010898:    e50b3058    X0..    STR      r3,[r11,#-0x58]
+        0x0001089c:    e50b1054    T...    STR      r1,[r11,#-0x54]
+        0x000108a0:    e24b104c    L.K.    SUB      r1,r11,#0x4c
+        0x000108a4:    e50b403c    <@..    STR      r4,[r11,#-0x3c]
+        0x000108a8:    e24b4060    `@K.    SUB      r4,r11,#0x60
+        0x000108ac:    e50b6060    ``..    STR      r6,[r11,#-0x60]
+        0x000108b0:    e50bc040    @...    STR      r12,[r11,#-0x40]
+        0x000108b4:    e55ec234    4.^.    LDRB     r12,[r14,#-0x234]
+        0x000108b8:    e5996054    T`..    LDR      r6,[r9,#0x54]
+        0x000108bc:    e599e050    P...    LDR      r14,[r9,#0x50]
+        0x000108c0:    e50b0044    D...    STR      r0,[r11,#-0x44]
+        0x000108c4:    85892038    8 ..    STRHI    r2,[r9,#0x38]
+        0x000108c8:    e1a02004    . ..    MOV      r2,r4
+        0x000108cc:    e51b3068    h0..    LDR      r3,[r11,#-0x68]
+        0x000108d0:    e54be02d    -.K.    STRB     r14,[r11,#-0x2d]
+        0x000108d4:    e54bc032    2.K.    STRB     r12,[r11,#-0x32]
+        0x000108d8:    e6ef8073    s...    UXTB     r8,r3
+        0x000108dc:    e1a03005    .0..    MOV      r3,r5
+        0x000108e0:    e54b602e    .`K.    STRB     r6,[r11,#-0x2e]
+        0x000108e4:    e24b602e    .`K.    SUB      r6,r11,#0x2e
+        0x000108e8:    e1a00008    ....    MOV      r0,r8
+        0x000108ec:    e54ba02f    /.K.    STRB     r10,[r11,#-0x2f]
+        0x000108f0:    e54ba030    0.K.    STRB     r10,[r11,#-0x30]
+        0x000108f4:    e58da000    ....    STR      r10,[r13,#0]
+        0x000108f8:    e58da004    ....    STR      r10,[r13,#4]
+        0x000108fc:    ebfffffe    ....    BL       DE_SCAL_Config_Src  ; 0x3e7c Section #1
+        0x00010900:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00010904:    e1a02004    . ..    MOV      r2,r4
+        0x00010908:    e1a03005    .0..    MOV      r3,r5
+        0x0001090c:    e1a00008    ....    MOV      r0,r8
+        0x00010910:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x00010914:    e58d7004    .p..    STR      r7,[r13,#4]
+        0x00010918:    e58dc000    ....    STR      r12,[r13,#0]
+        0x0001091c:    e58d6008    .`..    STR      r6,[r13,#8]
+        0x00010920:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Factor  ; 0x4b00 Section #1
+        0x00010924:    e1a03005    .0..    MOV      r3,r5
+        0x00010928:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x0001092c:    e1a02004    . ..    MOV      r2,r4
+        0x00010930:    e1a00008    ....    MOV      r0,r8
+        0x00010934:    e24be032    2.K.    SUB      r14,r11,#0x32
+        0x00010938:    e58d7004    .p..    STR      r7,[r13,#4]
+        0x0001093c:    e58de000    ....    STR      r14,[r13,#0]
+        0x00010940:    e58d6008    .`..    STR      r6,[r13,#8]
+        0x00010944:    e58da00c    ....    STR      r10,[r13,#0xc]
+        0x00010948:    ebfffffe    ....    BL       DE_SCAL_Set_Init_Phase  ; 0x47c4 Section #1
+        0x0001094c:    e1d938d0    .8..    LDRSB    r3,[r9,#0x80]
+        0x00010950:    e3530001    ..S.    CMP      r3,#1
+        0x00010954:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x10970
+        0x00010958:    e2891084    ....    ADD      r1,r9,#0x84
+        0x0001095c:    e891100e    ....    LDM      r1,{r1-r3,r12}
+        0x00010960:    e51b0068    h...    LDR      r0,[r11,#-0x68]
+        0x00010964:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010968:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x0001096c:    ea000008    ....    B        {pc} + 0x28  ; 0x10994
+        0x00010970:    e5990028    (...    LDR      r0,[r9,#0x28]
+        0x00010974:    e5d94038    8@..    LDRB     r4,[r9,#0x38]
+        0x00010978:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x0001097c:    e1a0200a    . ..    MOV      r2,r10
+        0x00010980:    e58da000    ....    STR      r10,[r13,#0]
+        0x00010984:    e1a01004    ....    MOV      r1,r4
+        0x00010988:    e6ef3070    p0..    UXTB     r3,r0
+        0x0001098c:    e1a00008    ....    MOV      r0,r8
+        0x00010990:    ebfffffe    ....    BL       DE_SCAL_Set_CSC_Coef  ; 0x50dc Section #1
+        0x00010994:    e5d9c07c    |...    LDRB     r12,[r9,#0x7c]
+        0x00010998:    e24b402e    .@K.    SUB      r4,r11,#0x2e
+        0x0001099c:    e24b2060    ` K.    SUB      r2,r11,#0x60
+        0x000109a0:    e24b3037    70K.    SUB      r3,r11,#0x37
+        0x000109a4:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x000109a8:    e24b5032    2PK.    SUB      r5,r11,#0x32
+        0x000109ac:    e24b6040    @`K.    SUB      r6,r11,#0x40
+        0x000109b0:    e1a00008    ....    MOV      r0,r8
+        0x000109b4:    e58dc00c    ....    STR      r12,[r13,#0xc]
+        0x000109b8:    e58d4008    .@..    STR      r4,[r13,#8]
+        0x000109bc:    e88d0060    `...    STM      r13,{r5,r6}
+        0x000109c0:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Coef  ; 0x4d70 Section #1
+        0x000109c4:    e1a01004    ....    MOV      r1,r4
+        0x000109c8:    e1a00008    ....    MOV      r0,r8
+        0x000109cc:    ebfffffe    ....    BL       DE_SCAL_Set_Out_Format  ; 0x518c Section #1
+        0x000109d0:    e1a00008    ....    MOV      r0,r8
+        0x000109d4:    e1a01005    ....    MOV      r1,r5
+        0x000109d8:    e1a02004    . ..    MOV      r2,r4
+        0x000109dc:    e1a03006    .0..    MOV      r3,r6
+        0x000109e0:    ebfffffe    ....    BL       DE_SCAL_Set_Out_Size  ; 0x51d4 Section #1
+        0x000109e4:    e3a00000    ....    MOV      r0,#0
+        0x000109e8:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x000109ec:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x000109f0:    00000450    P...    DCD    1104 ; gdisp
+    Scaler_Get_Framebuffer
+    $a
+        0x000109f4:    e1a0c00d    ....    MOV      r12,r13
+        0x000109f8:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x000109fc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010a00:    e2515000    .PQ.    SUBS     r5,r1,#0
+        0x00010a04:    0a000011    ....    BEQ      {pc} + 0x4c  ; 0x10a50
+        0x00010a08:    e3a02094    . ..    MOV      r2,#0x94
+        0x00010a0c:    e59f3048    H0..    LDR      r3,[pc,#72]   ; [(gdisp + 1104) = 0x10a5c]  = 0x450
+        0x00010a10:    e0020092    ....    MUL      r2,r2,r0
+        0x00010a14:    e0831002    ....    ADD      r1,r3,r2
+        0x00010a18:    e7933002    .0..    LDR      r3,[r3,r2]
+        0x00010a1c:    e3130c02    ....    TST      r3,#0x200
+        0x00010a20:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0x10a50
+        0x00010a24:    e2813014    .0..    ADD      r3,r1,#0x14
+        0x00010a28:    e1a04005    .@..    MOV      r4,r5
+        0x00010a2c:    e3a06000    .`..    MOV      r6,#0
+        0x00010a30:    e1a0c003    ....    MOV      r12,r3
+        0x00010a34:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00010a38:    e8a4000f    ....    STM      r4!,{r0-r3}
+        0x00010a3c:    e8bc000f    ....    LDM      r12!,{r0-r3}
+        0x00010a40:    e8a4000f    ....    STM      r4!,{r0-r3}
+        0x00010a44:    e89c0003    ....    LDM      r12,{r0,r1}
+        0x00010a48:    e8840003    ....    STM      r4,{r0,r1}
+        0x00010a4c:    ea000000    ....    B        {pc} + 0x8  ; 0x10a54
+        0x00010a50:    e3e06001    .`..    MVN      r6,#1
+        0x00010a54:    e1a00006    ....    MOV      r0,r6
+        0x00010a58:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x00010a5c:    00000450    P...    DCD    1104 ; gdisp
+    Scaler_Set_Framebuffer
+    $a
+        0x00010a60:    e1a0c00d    ....    MOV      r12,r13
+        0x00010a64:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00010a68:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010a6c:    e24dd05c    \.M.    SUB      r13,r13,#0x5c
+        0x00010a70:    e50b0070    p...    STR      r0,[r11,#-0x70]
+        0x00010a74:    e3a03094    .0..    MOV      r3,#0x94
+        0x00010a78:    e51b2070    p ..    LDR      r2,[r11,#-0x70]
+        0x00010a7c:    e1a04001    .@..    MOV      r4,r1
+        0x00010a80:    e59f61e0    .a..    LDR      r6,[pc,#480]  ; [(gdisp + 1104) = 0x10c68]  = 0x450
+        0x00010a84:    e24b0038    8.K.    SUB      r0,r11,#0x38
+        0x00010a88:    e1a05004    .P..    MOV      r5,r4
+        0x00010a8c:    e3a08000    ....    MOV      r8,#0
+        0x00010a90:    e0276293    .b'.    MLA      r7,r3,r2,r6
+        0x00010a94:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x00010a98:    e8b5000f    ....    LDM      r5!,{r0-r3}
+        0x00010a9c:    e287c014    ....    ADD      r12,r7,#0x14
+        0x00010aa0:    e1a0400c    .@..    MOV      r4,r12
+        0x00010aa4:    e8a4000f    ....    STM      r4!,{r0-r3}
+        0x00010aa8:    e8b5000f    ....    LDM      r5!,{r0-r3}
+        0x00010aac:    e8a4000f    ....    STM      r4!,{r0-r3}
+        0x00010ab0:    e8950003    ....    LDM      r5,{r0,r1}
+        0x00010ab4:    e8840003    ....    STM      r4,{r0,r1}
+        0x00010ab8:    e51b0038    8...    LDR      r0,[r11,#-0x38]
+        0x00010abc:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00010ac0:    e5d71028    (...    LDRB     r1,[r7,#0x28]
+        0x00010ac4:    e1a00008    ....    MOV      r0,r8
+        0x00010ac8:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00010acc:    e5d71030    0...    LDRB     r1,[r7,#0x30]
+        0x00010ad0:    e54b003a    :.K.    STRB     r0,[r11,#-0x3a]
+        0x00010ad4:    e3a00001    ....    MOV      r0,#1
+        0x00010ad8:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00010adc:    e5d7102c    ,...    LDRB     r1,[r7,#0x2c]
+        0x00010ae0:    e54b003b    ;.K.    STRB     r0,[r11,#-0x3b]
+        0x00010ae4:    e3a00002    ....    MOV      r0,#2
+        0x00010ae8:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00010aec:    e54b803c    <.K.    STRB     r8,[r11,#-0x3c]
+        0x00010af0:    e54b0039    9.K.    STRB     r0,[r11,#-0x39]
+        0x00010af4:    e5970014    ....    LDR      r0,[r7,#0x14]
+        0x00010af8:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010afc:    e50b0054    T...    STR      r0,[r11,#-0x54]
+        0x00010b00:    e5970018    ....    LDR      r0,[r7,#0x18]
+        0x00010b04:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010b08:    e50b0050    P...    STR      r0,[r11,#-0x50]
+        0x00010b0c:    e597001c    ....    LDR      r0,[r7,#0x1c]
+        0x00010b10:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00010b14:    e51b2070    p ..    LDR      r2,[r11,#-0x70]
+        0x00010b18:    e5973038    80..    LDR      r3,[r7,#0x38]
+        0x00010b1c:    e5975020     P..    LDR      r5,[r7,#0x20]
+        0x00010b20:    e5974064    d@..    LDR      r4,[r7,#0x64]
+        0x00010b24:    e3530003    ..S.    CMP      r3,#3
+        0x00010b28:    e5971070    p...    LDR      r1,[r7,#0x70]
+        0x00010b2c:    e0866482    .d..    ADD      r6,r6,r2,LSL #9
+        0x00010b30:    e5973068    h0..    LDR      r3,[r7,#0x68]
+        0x00010b34:    e597206c    l ..    LDR      r2,[r7,#0x6c]
+        0x00010b38:    e597c074    t...    LDR      r12,[r7,#0x74]
+        0x00010b3c:    e50b5068    hP..    STR      r5,[r11,#-0x68]
+        0x00010b40:    e24b503d    =PK.    SUB      r5,r11,#0x3d
+        0x00010b44:    e50b4064    d@..    STR      r4,[r11,#-0x64]
+        0x00010b48:    e24b4068    h@K.    SUB      r4,r11,#0x68
+        0x00010b4c:    e50b3060    `0..    STR      r3,[r11,#-0x60]
+        0x00010b50:    e50b205c    \ ..    STR      r2,[r11,#-0x5c]
+        0x00010b54:    e1a02004    . ..    MOV      r2,r4
+        0x00010b58:    e50b1058    X...    STR      r1,[r11,#-0x58]
+        0x00010b5c:    e24b1054    T.K.    SUB      r1,r11,#0x54
+        0x00010b60:    e50bc048    H...    STR      r12,[r11,#-0x48]
+        0x00010b64:    e556e234    4.V.    LDRB     r14,[r6,#-0x234]
+        0x00010b68:    e3a06000    .`..    MOV      r6,#0
+        0x00010b6c:    e597c078    x...    LDR      r12,[r7,#0x78]
+        0x00010b70:    e5979054    T...    LDR      r9,[r7,#0x54]
+        0x00010b74:    e597a050    P...    LDR      r10,[r7,#0x50]
+        0x00010b78:    e50b004c    L...    STR      r0,[r11,#-0x4c]
+        0x00010b7c:    85878038    8...    STRHI    r8,[r7,#0x38]
+        0x00010b80:    e51b3070    p0..    LDR      r3,[r11,#-0x70]
+        0x00010b84:    e54be032    2.K.    STRB     r14,[r11,#-0x32]
+        0x00010b88:    e50bc044    D...    STR      r12,[r11,#-0x44]
+        0x00010b8c:    e6ef8073    s...    UXTB     r8,r3
+        0x00010b90:    e1a03005    .0..    MOV      r3,r5
+        0x00010b94:    e54ba02d    -.K.    STRB     r10,[r11,#-0x2d]
+        0x00010b98:    e1a00008    ....    MOV      r0,r8
+        0x00010b9c:    e54b902e    ..K.    STRB     r9,[r11,#-0x2e]
+        0x00010ba0:    e54b602f    /`K.    STRB     r6,[r11,#-0x2f]
+        0x00010ba4:    e54b6030    0`K.    STRB     r6,[r11,#-0x30]
+        0x00010ba8:    e58d6000    .`..    STR      r6,[r13,#0]
+        0x00010bac:    e58d6004    .`..    STR      r6,[r13,#4]
+        0x00010bb0:    ebfffffe    ....    BL       DE_SCAL_Config_Src  ; 0x3e7c Section #1
+        0x00010bb4:    e1a03005    .0..    MOV      r3,r5
+        0x00010bb8:    e1a02004    . ..    MOV      r2,r4
+        0x00010bbc:    e1a00008    ....    MOV      r0,r8
+        0x00010bc0:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00010bc4:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x00010bc8:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010bcc:    e24bc048    H.K.    SUB      r12,r11,#0x48
+        0x00010bd0:    e58dc004    ....    STR      r12,[r13,#4]
+        0x00010bd4:    e24bc02e    ..K.    SUB      r12,r11,#0x2e
+        0x00010bd8:    e58dc008    ....    STR      r12,[r13,#8]
+        0x00010bdc:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Factor  ; 0x4b00 Section #1
+        0x00010be0:    e1d738d0    .8..    LDRSB    r3,[r7,#0x80]
+        0x00010be4:    e3530001    ..S.    CMP      r3,#1
+        0x00010be8:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x10c04
+        0x00010bec:    e2871084    ....    ADD      r1,r7,#0x84
+        0x00010bf0:    e891100e    ....    LDM      r1,{r1-r3,r12}
+        0x00010bf4:    e51b0070    p...    LDR      r0,[r11,#-0x70]
+        0x00010bf8:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010bfc:    ebfffffe    ....    BL       Scaler_Set_Enhance  ; 0xfda4 Section #1
+        0x00010c00:    ea000008    ....    B        {pc} + 0x28  ; 0x10c28
+        0x00010c04:    e5970028    (...    LDR      r0,[r7,#0x28]
+        0x00010c08:    e5d74038    8@..    LDRB     r4,[r7,#0x38]
+        0x00010c0c:    ebfffffe    ....    BL       get_fb_type  ; 0xd060 Section #1
+        0x00010c10:    e1a02006    . ..    MOV      r2,r6
+        0x00010c14:    e58d6000    .`..    STR      r6,[r13,#0]
+        0x00010c18:    e1a01004    ....    MOV      r1,r4
+        0x00010c1c:    e6ef3070    p0..    UXTB     r3,r0
+        0x00010c20:    e1a00008    ....    MOV      r0,r8
+        0x00010c24:    ebfffffe    ....    BL       DE_SCAL_Set_CSC_Coef  ; 0x50dc Section #1
+        0x00010c28:    e5d7c07c    |...    LDRB     r12,[r7,#0x7c]
+        0x00010c2c:    e1a00008    ....    MOV      r0,r8
+        0x00010c30:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00010c34:    e24b2068    h K.    SUB      r2,r11,#0x68
+        0x00010c38:    e24b303d    =0K.    SUB      r3,r11,#0x3d
+        0x00010c3c:    e58dc00c    ....    STR      r12,[r13,#0xc]
+        0x00010c40:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x00010c44:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010c48:    e24bc048    H.K.    SUB      r12,r11,#0x48
+        0x00010c4c:    e58dc004    ....    STR      r12,[r13,#4]
+        0x00010c50:    e24bc02e    ..K.    SUB      r12,r11,#0x2e
+        0x00010c54:    e58dc008    ....    STR      r12,[r13,#8]
+        0x00010c58:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Coef  ; 0x4d70 Section #1
+        0x00010c5c:    e3a00000    ....    MOV      r0,#0
+        0x00010c60:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00010c64:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00010c68:    00000450    P...    DCD    1104 ; gdisp
+    Scaler_close
+    $a
+        0x00010c6c:    e1a0c00d    ....    MOV      r12,r13
+        0x00010c70:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00010c74:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010c78:    e6ef5070    pP..    UXTB     r5,r0
+        0x00010c7c:    e1a04000    .@..    MOV      r4,r0
+        0x00010c80:    e1a00005    ....    MOV      r0,r5
+        0x00010c84:    ebfffffe    ....    BL       DE_SCAL_Reset  ; 0x5540 Section #1
+        0x00010c88:    e1a00005    ....    MOV      r0,r5
+        0x00010c8c:    ebfffffe    ....    BL       DE_SCAL_Disable  ; 0x5690 Section #1
+        0x00010c90:    e1a00004    ....    MOV      r0,r4
+        0x00010c94:    ebfffffe    ....    BL       scaler_clk_off  ; 0xaf00 Section #1
+        0x00010c98:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [gdisp = 0x10cb8] = 0
+        0x00010c9c:    e3a02094    . ..    MOV      r2,#0x94
+        0x00010ca0:    e3a00000    ....    MOV      r0,#0
+        0x00010ca4:    e0243492    .4$.    MLA      r4,r2,r4,r3
+        0x00010ca8:    e5943450    P4..    LDR      r3,[r4,#0x450]
+        0x00010cac:    e3c33c02    .<..    BIC      r3,r3,#0x200
+        0x00010cb0:    e5843450    P4..    STR      r3,[r4,#0x450]
+        0x00010cb4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00010cb8:    00000000    ....    DCD    0 ; gdisp
+    Scaler_Release
+    $a
+        0x00010cbc:    e1a0c00d    ....    MOV      r12,r13
+        0x00010cc0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00010cc4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010cc8:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x00010ccc:    e3a0c000    ....    MOV      r12,#0
+        0x00010cd0:    e1a04001    .@..    MOV      r4,r1
+        0x00010cd4:    e1a05000    .P..    MOV      r5,r0
+        0x00010cd8:    e1a0100c    ....    MOV      r1,r12
+        0x00010cdc:    e6ef0070    p...    UXTB     r0,r0
+        0x00010ce0:    e1a0200c    . ..    MOV      r2,r12
+        0x00010ce4:    e1a0300c    .0..    MOV      r3,r12
+        0x00010ce8:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010cec:    ebfffffe    ....    BL       DE_SCAL_Set_Di_Ctrl  ; 0x53ec Section #1
+        0x00010cf0:    e3540000    ..T.    CMP      r4,#0
+        0x00010cf4:    1a000002    ....    BNE      {pc} + 0x10  ; 0x10d04
+        0x00010cf8:    e1a00005    ....    MOV      r0,r5
+        0x00010cfc:    ebfffffe    ....    BL       Scaler_close  ; 0x10c6c Section #1
+        0x00010d00:    ea000004    ....    B        {pc} + 0x18  ; 0x10d18
+        0x00010d04:    e59f2048    H ..    LDR      r2,[pc,#72]   ; [gdisp = 0x10d54] = 0
+        0x00010d08:    e3a03094    .0..    MOV      r3,#0x94
+        0x00010d0c:    e0232593    .%#.    MLA      r3,r3,r5,r2
+        0x00010d10:    e3a02001    . ..    MOV      r2,#1
+        0x00010d14:    e5c32455    U$..    STRB     r2,[r3,#0x455]
+        0x00010d18:    e3a01094    ....    MOV      r1,#0x94
+        0x00010d1c:    e59f4034    4@..    LDR      r4,[pc,#52]   ; [(gdisp + 1104) = 0x10d58]  = 0x450
+        0x00010d20:    e0050591    ....    MUL      r5,r1,r5
+        0x00010d24:    e0840005    ....    ADD      r0,r4,r5
+        0x00010d28:    e2444e45    END.    SUB      r4,r4,#0x450
+        0x00010d2c:    e0844005    .@..    ADD      r4,r4,r5
+        0x00010d30:    ebfffffe    ....    BL       __memzero  ;
+        0x00010d34:    e3a03020     0..    MOV      r3,#0x20
+        0x00010d38:    e3a00000    ....    MOV      r0,#0
+        0x00010d3c:    e58434e0    .4..    STR      r3,[r4,#0x4e0]
+        0x00010d40:    e58434d4    .4..    STR      r3,[r4,#0x4d4]
+        0x00010d44:    e58434d8    .4..    STR      r3,[r4,#0x4d8]
+        0x00010d48:    e58434dc    .4..    STR      r3,[r4,#0x4dc]
+        0x00010d4c:    e24bd014    ..K.    SUB      r13,r11,#0x14
+        0x00010d50:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00010d54:    00000000    ....    DCD    0 ; gdisp
+        0x00010d58:    00000450    P...    DCD    1104 ; gdisp
+    BSP_disp_scaler_release
+    $a
+        0x00010d5c:    e1a0c00d    ....    MOV      r12,r13
+        0x00010d60:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00010d64:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010d68:    e3a01000    ....    MOV      r1,#0
+        0x00010d6c:    e2400064    d.@.    SUB      r0,r0,#0x64
+        0x00010d70:    ebfffffe    ....    BL       Scaler_Release  ; 0x10cbc Section #1
+        0x00010d74:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    Scaler_open
+        0x00010d78:    e1a0c00d    ....    MOV      r12,r13
+        0x00010d7c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00010d80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010d84:    e1a04000    .@..    MOV      r4,r0
+        0x00010d88:    ebfffffe    ....    BL       scaler_clk_on  ; 0xaf78 Section #1
+        0x00010d8c:    e6ef4074    t@..    UXTB     r4,r4
+        0x00010d90:    e1a00004    ....    MOV      r0,r4
+        0x00010d94:    ebfffffe    ....    BL       DE_SCAL_Reset  ; 0x5540 Section #1
+        0x00010d98:    e1a00004    ....    MOV      r0,r4
+        0x00010d9c:    ebfffffe    ....    BL       DE_SCAL_Enable  ; 0x5664 Section #1
+        0x00010da0:    e3a00000    ....    MOV      r0,#0
+        0x00010da4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    Scaler_Request
+        0x00010da8:    e1a0c00d    ....    MOV      r12,r13
+        0x00010dac:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00010db0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010db4:    e3500000    ..P.    CMP      r0,#0
+        0x00010db8:    059f3088    .0..    LDREQ    r3,[pc,#136]  ; [gdisp = 0x10e48] = 0
+        0x00010dbc:    05933450    P4..    LDREQ    r3,[r3,#0x450]
+        0x00010dc0:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0x10df0
+        0x00010dc4:    e3500001    ..P.    CMP      r0,#1
+        0x00010dc8:    e59f2078    x ..    LDR      r2,[pc,#120]  ; [gdisp = 0x10e48] = 0
+        0x00010dcc:    1a000003    ....    BNE      {pc} + 0x14  ; 0x10de0
+        0x00010dd0:    e59234e4    .4..    LDR      r3,[r2,#0x4e4]
+        0x00010dd4:    e3130c02    ....    TST      r3,#0x200
+        0x00010dd8:    0a000008    ....    BEQ      {pc} + 0x28  ; 0x10e00
+        0x00010ddc:    ea000009    ....    B        {pc} + 0x2c  ; 0x10e08
+        0x00010de0:    e59234e4    .4..    LDR      r3,[r2,#0x4e4]
+        0x00010de4:    e3130c02    ....    TST      r3,#0x200
+        0x00010de8:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x10e00
+        0x00010dec:    e5923450    P4..    LDR      r3,[r2,#0x450]
+        0x00010df0:    e3130c02    ....    TST      r3,#0x200
+        0x00010df4:    03a04000    .@..    MOVEQ    r4,#0
+        0x00010df8:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x10e18
+        0x00010dfc:    ea000001    ....    B        {pc} + 0xc  ; 0x10e08
+        0x00010e00:    e3a04001    .@..    MOV      r4,#1
+        0x00010e04:    ea000003    ....    B        {pc} + 0x14  ; 0x10e18
+        0x00010e08:    e59f003c    <...    LDR      r0,[pc,#60]   ; [([Section 10] + 3083) = 0x10e4c]  = 0xc0b
+        0x00010e0c:    e3e04005    .@..    MVN      r4,#5
+        0x00010e10:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00010e14:    ea000009    ....    B        {pc} + 0x2c  ; 0x10e40
+        0x00010e18:    e1a00004    ....    MOV      r0,r4
+        0x00010e1c:    ebfffffe    ....    BL       Scaler_open  ; 0x10d78 Section #1
+        0x00010e20:    e59f3020     0..    LDR      r3,[pc,#32]   ; [gdisp = 0x10e48] = 0
+        0x00010e24:    e3a01094    ....    MOV      r1,#0x94
+        0x00010e28:    e3a02000    . ..    MOV      r2,#0
+        0x00010e2c:    e0213491    .4!.    MLA      r1,r1,r4,r3
+        0x00010e30:    e5913450    P4..    LDR      r3,[r1,#0x450]
+        0x00010e34:    e5c12455    U$..    STRB     r2,[r1,#0x455]
+        0x00010e38:    e3833c02    .<..    ORR      r3,r3,#0x200
+        0x00010e3c:    e5813450    P4..    STR      r3,[r1,#0x450]
+        0x00010e40:    e1a00004    ....    MOV      r0,r4
+        0x00010e44:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00010e48:    00000000    ....    DCD    0 ; gdisp
+        0x00010e4c:    00000c0b    ....    DCD    3083 ; [Section 10]
+    BSP_disp_scaler_request
+    $a
+        0x00010e50:    e1a0c00d    ....    MOV      r12,r13
+        0x00010e54:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00010e58:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010e5c:    e3a000ff    ....    MOV      r0,#0xff
+        0x00010e60:    ebfffffe    ....    BL       Scaler_Request  ; 0x10da8 Section #1
+        0x00010e64:    e3500000    ..P.    CMP      r0,#0
+        0x00010e68:    b89da800    ....    LDMLT    r13,{r11,r13,pc}
+        0x00010e6c:    e59f2014    . ..    LDR      r2,[pc,#20]   ; [gdisp = 0x10e88] = 0
+        0x00010e70:    e3a03094    .0..    MOV      r3,#0x94
+        0x00010e74:    e0232093    . #.    MLA      r3,r3,r0,r2
+        0x00010e78:    e3a020ff    . ..    MOV      r2,#0xff
+        0x00010e7c:    e2800064    d...    ADD      r0,r0,#0x64
+        0x00010e80:    e5832458    X$..    STR      r2,[r3,#0x458]
+        0x00010e84:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00010e88:    00000000    ....    DCD    0 ; gdisp
+    Scaler_Exit
+    $a
+        0x00010e8c:    e1a0c00d    ....    MOV      r12,r13
+        0x00010e90:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00010e94:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010e98:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x00010e9c:    1a000003    ....    BNE      {pc} + 0x14  ; 0x10eb0
+        0x00010ea0:    e280002d    -...    ADD      r0,r0,#0x2d
+        0x00010ea4:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x00010ea8:    e3a0002d    -...    MOV      r0,#0x2d
+        0x00010eac:    ea000004    ....    B        {pc} + 0x18  ; 0x10ec4
+        0x00010eb0:    e3550001    ..U.    CMP      r5,#1
+        0x00010eb4:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x10ed0
+        0x00010eb8:    e3a00037    7...    MOV      r0,#0x37
+        0x00010ebc:    ebfffffe    ....    BL       OSAL_InterruptDisable  ; 0x3180 Section #1
+        0x00010ec0:    e3a00037    7...    MOV      r0,#0x37
+        0x00010ec4:    e59f1034    4...    LDR      r1,[pc,#52]   ; [Scaler_event_proc = 0x10f00] = 0
+        0x00010ec8:    e1a02005    . ..    MOV      r2,r5
+        0x00010ecc:    ebfffffe    ....    BL       OSAL_UnRegISR  ; 0x31a8 Section #1
+        0x00010ed0:    e6ef4075    u@..    UXTB     r4,r5
+        0x00010ed4:    e3a01080    ....    MOV      r1,#0x80
+        0x00010ed8:    e1a00004    ....    MOV      r0,r4
+        0x00010edc:    ebfffffe    ....    BL       DE_SCAL_DisableINT  ; 0x6290 Section #1
+        0x00010ee0:    e1a00004    ....    MOV      r0,r4
+        0x00010ee4:    ebfffffe    ....    BL       DE_SCAL_Reset  ; 0x5540 Section #1
+        0x00010ee8:    e1a00004    ....    MOV      r0,r4
+        0x00010eec:    ebfffffe    ....    BL       DE_SCAL_Disable  ; 0x5690 Section #1
+        0x00010ef0:    e1a00005    ....    MOV      r0,r5
+        0x00010ef4:    ebfffffe    ....    BL       scaler_clk_off  ; 0xaf00 Section #1
+        0x00010ef8:    e3a00000    ....    MOV      r0,#0
+        0x00010efc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00010f00:    00000000    ....    DCD    0 ; Scaler_event_proc
+    Scaler_Init
+    $a
+        0x00010f04:    e1a0c00d    ....    MOV      r12,r13
+        0x00010f08:    e92dd810    ..-.    PUSH     {r4,r11,r12,r14,pc}
+        0x00010f0c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010f10:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x00010f14:    e1a04000    .@..    MOV      r4,r0
+        0x00010f18:    ebfffffe    ....    BL       scaler_clk_init  ; 0xb980 Section #1
+        0x00010f1c:    e6ef0074    t...    UXTB     r0,r4
+        0x00010f20:    e3a01080    ....    MOV      r1,#0x80
+        0x00010f24:    ebfffffe    ....    BL       DE_SCAL_EnableINT  ; 0x6260 Section #1
+        0x00010f28:    e3540000    ..T.    CMP      r4,#0
+        0x00010f2c:    1a000006    ....    BNE      {pc} + 0x20  ; 0x10f4c
+        0x00010f30:    e1a01004    ....    MOV      r1,r4
+        0x00010f34:    e59f2044    D ..    LDR      r2,[pc,#68]   ; [Scaler_event_proc = 0x10f80] = 0
+        0x00010f38:    e1a03004    .0..    MOV      r3,r4
+        0x00010f3c:    e3a0002d    -...    MOV      r0,#0x2d
+        0x00010f40:    e58d4000    .@..    STR      r4,[r13,#0]
+        0x00010f44:    e58d4004    .@..    STR      r4,[r13,#4]
+        0x00010f48:    ea000008    ....    B        {pc} + 0x28  ; 0x10f70
+        0x00010f4c:    e3540001    ..T.    CMP      r4,#1
+        0x00010f50:    1a000007    ....    BNE      {pc} + 0x24  ; 0x10f74
+        0x00010f54:    e59f2024    $ ..    LDR      r2,[pc,#36]   ; [Scaler_event_proc = 0x10f80] = 0
+        0x00010f58:    e3a0c000    ....    MOV      r12,#0
+        0x00010f5c:    e1a03004    .0..    MOV      r3,r4
+        0x00010f60:    e1a0100c    ....    MOV      r1,r12
+        0x00010f64:    e3a00037    7...    MOV      r0,#0x37
+        0x00010f68:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00010f6c:    e58dc004    ....    STR      r12,[r13,#4]
+        0x00010f70:    ebfffffe    ....    BL       OSAL_RegISR  ; 0x31c0 Section #1
+        0x00010f74:    e3a00000    ....    MOV      r0,#0
+        0x00010f78:    e24bd010    ..K.    SUB      r13,r11,#0x10
+        0x00010f7c:    e89da810    ....    LDM      r13,{r4,r11,r13,pc}
+    $d
+        0x00010f80:    00000000    ....    DCD    0 ; Scaler_event_proc
+    Scaler_event_proc
+    $a
+        0x00010f84:    e1a0c00d    ....    MOV      r12,r13
+        0x00010f88:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00010f8c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010f90:    e6ef4071    q@..    UXTB     r4,r1
+        0x00010f94:    e1a05001    .P..    MOV      r5,r1
+        0x00010f98:    e1a00004    ....    MOV      r0,r4
+        0x00010f9c:    ebfffffe    ....    BL       DE_SCAL_QueryINT  ; 0x62c0 Section #1
+        0x00010fa0:    e3100080    ....    TST      r0,#0x80
+        0x00010fa4:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x10fd0
+        0x00010fa8:    e3a01080    ....    MOV      r1,#0x80
+        0x00010fac:    e1a00004    ....    MOV      r0,r4
+        0x00010fb0:    ebfffffe    ....    BL       DE_SCAL_ClearINT  ; 0x62e4 Section #1
+        0x00010fb4:    e1a00004    ....    MOV      r0,r4
+        0x00010fb8:    e30011ff    ....    MOV      r1,#0x1ff
+        0x00010fbc:    ebfffffe    ....    BL       DE_SCAL_DisableINT  ; 0x6290 Section #1
+        0x00010fc0:    e1a00005    ....    MOV      r0,r5
+        0x00010fc4:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [gdisp = 0x10fd8] = 0
+        0x00010fc8:    e1a0e00f    ....    MOV      r14,pc
+        0x00010fcc:    e593f030    0...    LDR      pc,[r3,#0x30]
+        0x00010fd0:    e3a00001    ....    MOV      r0,#1
+        0x00010fd4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00010fd8:    00000000    ....    DCD    0 ; gdisp
+    Sprite_Id_To_Hid
+    $a
+        0x00010fdc:    e1a0c00d    ....    MOV      r12,r13
+        0x00010fe0:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00010fe4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00010fe8:    e3710001    ..q.    CMN      r1,#1
+        0x00010fec:    13a02046    F ..    MOVNE    r2,#0x46
+        0x00010ff0:    159f3010    .0..    LDRNE    r3,[pc,#16]   ; [([Section 17] + 18988) = 0x11008]  = 0x4a2c
+        0x00010ff4:    10221092    ..".    MLANE    r2,r2,r0,r1
+        0x00010ff8:    03a00000    ....    MOVEQ    r0,#0
+        0x00010ffc:    10833102    .1..    ADDNE    r3,r3,r2,LSL #2
+        0x00011000:    15930094    ....    LDRNE    r0,[r3,#0x94]
+        0x00011004:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00011008:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    Sprite_Hid_To_Id
+    $a
+        0x0001100c:    e1a0c00d    ....    MOV      r12,r13
+        0x00011010:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00011014:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011018:    e3510000    ..Q.    CMP      r1,#0
+        0x0001101c:    e1a0c000    ....    MOV      r12,r0
+        0x00011020:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0x11050
+        0x00011024:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [([Section 17] + 18988) = 0x11058]  = 0x4a2c
+        0x00011028:    e3a02f46    F/..    MOV      r2,#0x118
+        0x0001102c:    e3a00000    ....    MOV      r0,#0
+        0x00011030:    e0223c92    .<".    MLA      r2,r2,r12,r3
+        0x00011034:    e5923094    .0..    LDR      r3,[r2,#0x94]
+        0x00011038:    e2822004    . ..    ADD      r2,r2,#4
+        0x0001103c:    e1530001    ..S.    CMP      r3,r1
+        0x00011040:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x00011044:    e2800001    ....    ADD      r0,r0,#1
+        0x00011048:    e3500020     .P.    CMP      r0,#0x20
+        0x0001104c:    1afffff8    ....    BNE      {pc} - 0x18  ; 0x11034
+        0x00011050:    e3e00000    ....    MVN      r0,#0
+        0x00011054:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00011058:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    List_Find_Sprite_Block
+    $a
+        0x0001105c:    e1a0c00d    ....    MOV      r12,r13
+        0x00011060:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00011064:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011068:    e59f203c    < ..    LDR      r2,[pc,#60]   ; [([Section 17] + 18988) = 0x110ac]  = 0x4a2c
+        0x0001106c:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011070:    e0202093    .  .    MLA      r0,r3,r0,r2
+        0x00011074:    e5902114    .!..    LDR      r2,[r0,#0x114]
+        0x00011078:    e3520000    ..R.    CMP      r2,#0
+        0x0001107c:    01a00002    ....    MOVEQ    r0,r2
+        0x00011080:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x00011084:    e1a00002    ....    MOV      r0,r2
+        0x00011088:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x0001108c:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011090:    e1530001    ..S.    CMP      r3,r1
+        0x00011094:    089da800    ....    LDMEQ    r13,{r11,r13,pc}
+        0x00011098:    e5900000    ....    LDR      r0,[r0,#0]
+        0x0001109c:    e1500002    ..P.    CMP      r0,r2
+        0x000110a0:    1afffff8    ....    BNE      {pc} - 0x18  ; 0x11088
+        0x000110a4:    e3a00000    ....    MOV      r0,#0
+        0x000110a8:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000110ac:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    List_Delete_Sprite_Block
+    $a
+        0x000110b0:    e1a0c00d    ....    MOV      r12,r13
+        0x000110b4:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x000110b8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000110bc:    e251c000    ..Q.    SUBS     r12,r1,#0
+        0x000110c0:    0a000021    !...    BEQ      {pc} + 0x8c  ; 0x1114c
+        0x000110c4:    e59c3008    .0..    LDR      r3,[r12,#8]
+        0x000110c8:    e5936004    .`..    LDR      r6,[r3,#4]
+        0x000110cc:    e3560000    ..V.    CMP      r6,#0
+        0x000110d0:    1a000017    ....    BNE      {pc} + 0x64  ; 0x11134
+        0x000110d4:    e59c5000    .P..    LDR      r5,[r12,#0]
+        0x000110d8:    e59f2074    t ..    LDR      r2,[pc,#116]  ; [([Section 17] + 18988) = 0x11154]  = 0x4a2c
+        0x000110dc:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x000110e0:    e5934004    .@..    LDR      r4,[r3,#4]
+        0x000110e4:    e3540000    ..T.    CMP      r4,#0
+        0x000110e8:    03a03f46    F?..    MOVEQ    r3,#0x118
+        0x000110ec:    00232093    . #.    MLAEQ    r3,r3,r0,r2
+        0x000110f0:    05834114    .A..    STREQ    r4,[r3,#0x114]
+        0x000110f4:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0x11134
+        0x000110f8:    e3a03046    F0..    MOV      r3,#0x46
+        0x000110fc:    e3a01f46    F...    MOV      r1,#0x118
+        0x00011100:    e0234093    .@#.    MLA      r3,r3,r0,r4
+        0x00011104:    e0212091    . !.    MLA      r1,r1,r0,r2
+        0x00011108:    e2833024    $0..    ADD      r3,r3,#0x24
+        0x0001110c:    e0823103    .1..    ADD      r3,r2,r3,LSL #2
+        0x00011110:    e5910094    ....    LDR      r0,[r1,#0x94]
+        0x00011114:    e5932004    . ..    LDR      r2,[r3,#4]
+        0x00011118:    e5812094    . ..    STR      r2,[r1,#0x94]
+        0x0001111c:    e5830004    ....    STR      r0,[r3,#4]
+        0x00011120:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011124:    e5836004    .`..    STR      r6,[r3,#4]
+        0x00011128:    e59c3008    .0..    LDR      r3,[r12,#8]
+        0x0001112c:    e5834004    .@..    STR      r4,[r3,#4]
+        0x00011130:    e5815114    .Q..    STR      r5,[r1,#0x114]
+        0x00011134:    e89c000c    ....    LDM      r12,{r2,r3}
+        0x00011138:    e5832000    . ..    STR      r2,[r3,#0]
+        0x0001113c:    e59c2000    . ..    LDR      r2,[r12,#0]
+        0x00011140:    e58cc000    ....    STR      r12,[r12,#0]
+        0x00011144:    e5823004    .0..    STR      r3,[r2,#4]
+        0x00011148:    e58cc004    ....    STR      r12,[r12,#4]
+        0x0001114c:    e1a0000c    ....    MOV      r0,r12
+        0x00011150:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x00011154:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    List_Get_Last_Sprite_Block_Id
+    $a
+        0x00011158:    e1a0c00d    ....    MOV      r12,r13
+        0x0001115c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00011160:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011164:    e59f2020      ..    LDR      r2,[pc,#32]   ; [([Section 17] + 18988) = 0x1118c]  = 0x4a2c
+        0x00011168:    e3a03f46    F?..    MOV      r3,#0x118
+        0x0001116c:    e0202093    .  .    MLA      r0,r3,r0,r2
+        0x00011170:    e5903114    .1..    LDR      r3,[r0,#0x114]
+        0x00011174:    e3530000    ..S.    CMP      r3,#0
+        0x00011178:    15933004    .0..    LDRNE    r3,[r3,#4]
+        0x0001117c:    03e00000    ....    MVNEQ    r0,#0
+        0x00011180:    15933008    .0..    LDRNE    r3,[r3,#8]
+        0x00011184:    15930004    ....    LDRNE    r0,[r3,#4]
+        0x00011188:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0001118c:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_get_alpha_enable
+    $a
+        0x00011190:    e1a0c00d    ....    MOV      r12,r13
+        0x00011194:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00011198:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0001119c:    e59f200c    . ..    LDR      r2,[pc,#12]   ; [([Section 17] + 18988) = 0x111b0]  = 0x4a2c
+        0x000111a0:    e3a03f46    F?..    MOV      r3,#0x118
+        0x000111a4:    e0202093    .  .    MLA      r0,r3,r0,r2
+        0x000111a8:    e1d009d0    ....    LDRSB    r0,[r0,#0x90]
+        0x000111ac:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000111b0:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_get_alpha_value
+    $a
+        0x000111b4:    e1a0c00d    ....    MOV      r12,r13
+        0x000111b8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000111bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000111c0:    e59f200c    . ..    LDR      r2,[pc,#12]   ; [([Section 17] + 18988) = 0x111d4]  = 0x4a2c
+        0x000111c4:    e3a03f46    F?..    MOV      r3,#0x118
+        0x000111c8:    e0202093    .  .    MLA      r0,r3,r0,r2
+        0x000111cc:    e5d00091    ....    LDRB     r0,[r0,#0x91]
+        0x000111d0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000111d4:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_get_top_block
+    $a
+        0x000111d8:    e1a0c00d    ....    MOV      r12,r13
+        0x000111dc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000111e0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000111e4:    e59f2020      ..    LDR      r2,[pc,#32]   ; [([Section 17] + 18988) = 0x1120c]  = 0x4a2c
+        0x000111e8:    e3a03f46    F?..    MOV      r3,#0x118
+        0x000111ec:    e0232093    . #.    MLA      r3,r3,r0,r2
+        0x000111f0:    e5933114    .1..    LDR      r3,[r3,#0x114]
+        0x000111f4:    e3530000    ..S.    CMP      r3,#0
+        0x000111f8:    15933008    .0..    LDRNE    r3,[r3,#8]
+        0x000111fc:    03e01000    ....    MVNEQ    r1,#0
+        0x00011200:    15931004    ....    LDRNE    r1,[r3,#4]
+        0x00011204:    ebffff74    t...    BL       {pc} - 0x228  ; 0x10fdc
+        0x00011208:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0001120c:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_get_bottom_block
+    $a
+        0x00011210:    e1a0c00d    ....    MOV      r12,r13
+        0x00011214:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00011218:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0001121c:    e1a04000    .@..    MOV      r4,r0
+        0x00011220:    ebffffcc    ....    BL       {pc} - 0xc8  ; 0x11158
+        0x00011224:    e1a01000    ....    MOV      r1,r0
+        0x00011228:    e1a00004    ....    MOV      r0,r4
+        0x0001122c:    ebffff6a    j...    BL       {pc} - 0x250  ; 0x10fdc
+        0x00011230:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    BSP_disp_sprite_get_block_number
+        0x00011234:    e1a0c00d    ....    MOV      r12,r13
+        0x00011238:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0001123c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011240:    e59f200c    . ..    LDR      r2,[pc,#12]   ; [([Section 17] + 18988) = 0x11254]  = 0x4a2c
+        0x00011244:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011248:    e0202093    .  .    MLA      r0,r3,r0,r2
+        0x0001124c:    e5d00092    ....    LDRB     r0,[r0,#0x92]
+        0x00011250:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00011254:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_get_srceen_win
+    $a
+        0x00011258:    e1a0c00d    ....    MOV      r12,r13
+        0x0001125c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00011260:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011264:    e1a04002    .@..    MOV      r4,r2
+        0x00011268:    e1a05000    .P..    MOV      r5,r0
+        0x0001126c:    ebffff66    f...    BL       {pc} - 0x260  ; 0x1100c
+        0x00011270:    e3a03046    F0..    MOV      r3,#0x46
+        0x00011274:    e59f205c    \ ..    LDR      r2,[pc,#92]   ; [([Section 17] + 18988) = 0x112d8]  = 0x4a2c
+        0x00011278:    e0230593    ..#.    MLA      r3,r3,r5,r0
+        0x0001127c:    e1a01000    ....    MOV      r1,r0
+        0x00011280:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x00011284:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00011288:    e3130008    ....    TST      r3,#8
+        0x0001128c:    03e02003    . ..    MVNEQ    r2,#3
+        0x00011290:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0x112d0
+        0x00011294:    e1a00005    ....    MOV      r0,r5
+        0x00011298:    ebffff6f    o...    BL       {pc} - 0x23c  ; 0x1105c
+        0x0001129c:    e3a02000    . ..    MOV      r2,#0
+        0x000112a0:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000112a4:    e5933018    .0..    LDR      r3,[r3,#0x18]
+        0x000112a8:    e5843000    .0..    STR      r3,[r4,#0]
+        0x000112ac:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000112b0:    e593301c    .0..    LDR      r3,[r3,#0x1c]
+        0x000112b4:    e5843004    .0..    STR      r3,[r4,#4]
+        0x000112b8:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000112bc:    e5933020     0..    LDR      r3,[r3,#0x20]
+        0x000112c0:    e5843008    .0..    STR      r3,[r4,#8]
+        0x000112c4:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000112c8:    e5933024    $0..    LDR      r3,[r3,#0x24]
+        0x000112cc:    e584300c    .0..    STR      r3,[r4,#0xc]
+        0x000112d0:    e1a00002    ....    MOV      r0,r2
+        0x000112d4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000112d8:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_get_src_win
+    $a
+        0x000112dc:    e1a0c00d    ....    MOV      r12,r13
+        0x000112e0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000112e4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000112e8:    e1a04002    .@..    MOV      r4,r2
+        0x000112ec:    e1a05000    .P..    MOV      r5,r0
+        0x000112f0:    ebffff45    E...    BL       {pc} - 0x2e4  ; 0x1100c
+        0x000112f4:    e3a03046    F0..    MOV      r3,#0x46
+        0x000112f8:    e59f205c    \ ..    LDR      r2,[pc,#92]   ; [([Section 17] + 18988) = 0x1135c]  = 0x4a2c
+        0x000112fc:    e0230593    ..#.    MLA      r3,r3,r5,r0
+        0x00011300:    e1a01000    ....    MOV      r1,r0
+        0x00011304:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x00011308:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x0001130c:    e3130008    ....    TST      r3,#8
+        0x00011310:    03e02003    . ..    MVNEQ    r2,#3
+        0x00011314:    0a00000e    ....    BEQ      {pc} + 0x40  ; 0x11354
+        0x00011318:    e1a00005    ....    MOV      r0,r5
+        0x0001131c:    ebffff4e    N...    BL       {pc} - 0x2c0  ; 0x1105c
+        0x00011320:    e3a02000    . ..    MOV      r2,#0
+        0x00011324:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011328:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x0001132c:    e5843000    .0..    STR      r3,[r4,#0]
+        0x00011330:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011334:    e593300c    .0..    LDR      r3,[r3,#0xc]
+        0x00011338:    e5843004    .0..    STR      r3,[r4,#4]
+        0x0001133c:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011340:    e5933020     0..    LDR      r3,[r3,#0x20]
+        0x00011344:    e5843008    .0..    STR      r3,[r4,#8]
+        0x00011348:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x0001134c:    e5933024    $0..    LDR      r3,[r3,#0x24]
+        0x00011350:    e584300c    .0..    STR      r3,[r4,#0xc]
+        0x00011354:    e1a00002    ....    MOV      r0,r2
+        0x00011358:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x0001135c:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_get_framebufer
+    $a
+        0x00011360:    e1a0c00d    ....    MOV      r12,r13
+        0x00011364:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00011368:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0001136c:    e1a04000    .@..    MOV      r4,r0
+        0x00011370:    e1a05002    .P..    MOV      r5,r2
+        0x00011374:    ebffff24    $...    BL       {pc} - 0x368  ; 0x1100c
+        0x00011378:    e3a03046    F0..    MOV      r3,#0x46
+        0x0001137c:    e59f6068    h`..    LDR      r6,[pc,#104]  ; [([Section 17] + 18988) = 0x113ec]  = 0x4a2c
+        0x00011380:    e0230493    ..#.    MLA      r3,r3,r4,r0
+        0x00011384:    e0863103    .1..    ADD      r3,r6,r3,LSL #2
+        0x00011388:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x0001138c:    e3130008    ....    TST      r3,#8
+        0x00011390:    03e01003    ....    MVNEQ    r1,#3
+        0x00011394:    0a000012    ....    BEQ      {pc} + 0x50  ; 0x113e4
+        0x00011398:    e1a01000    ....    MOV      r1,r0
+        0x0001139c:    e1a00004    ....    MOV      r0,r4
+        0x000113a0:    ebffff2d    -...    BL       {pc} - 0x344  ; 0x1105c
+        0x000113a4:    e3a03f46    F?..    MOV      r3,#0x118
+        0x000113a8:    e0236493    .d#.    MLA      r3,r3,r4,r6
+        0x000113ac:    e3a01000    ....    MOV      r1,#0
+        0x000113b0:    e593208c    . ..    LDR      r2,[r3,#0x8c]
+        0x000113b4:    e5852014    . ..    STR      r2,[r5,#0x14]
+        0x000113b8:    e5933088    .0..    LDR      r3,[r3,#0x88]
+        0x000113bc:    e5853018    .0..    STR      r3,[r5,#0x18]
+        0x000113c0:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000113c4:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x000113c8:    e5853000    .0..    STR      r3,[r5,#0]
+        0x000113cc:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000113d0:    e593302c    ,0..    LDR      r3,[r3,#0x2c]
+        0x000113d4:    e585300c    .0..    STR      r3,[r5,#0xc]
+        0x000113d8:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000113dc:    e5933030    00..    LDR      r3,[r3,#0x30]
+        0x000113e0:    e5853010    .0..    STR      r3,[r5,#0x10]
+        0x000113e4:    e1a00001    ....    MOV      r0,r1
+        0x000113e8:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000113ec:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_get_para
+    $a
+        0x000113f0:    e1a0c00d    ....    MOV      r12,r13
+        0x000113f4:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000113f8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000113fc:    e1a04002    .@..    MOV      r4,r2
+        0x00011400:    e1a05000    .P..    MOV      r5,r0
+        0x00011404:    ebffff00    ....    BL       {pc} - 0x3f8  ; 0x1100c
+        0x00011408:    e3a03046    F0..    MOV      r3,#0x46
+        0x0001140c:    e59f60c0    .`..    LDR      r6,[pc,#192]  ; [([Section 17] + 18988) = 0x114d4]  = 0x4a2c
+        0x00011410:    e0230593    ..#.    MLA      r3,r3,r5,r0
+        0x00011414:    e0863103    .1..    ADD      r3,r6,r3,LSL #2
+        0x00011418:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x0001141c:    e3130008    ....    TST      r3,#8
+        0x00011420:    03e02003    . ..    MVNEQ    r2,#3
+        0x00011424:    0a000028    (...    BEQ      {pc} + 0xa8  ; 0x114cc
+        0x00011428:    e1a01000    ....    MOV      r1,r0
+        0x0001142c:    e1a00005    ....    MOV      r0,r5
+        0x00011430:    ebffff09    ....    BL       {pc} - 0x3d4  ; 0x1105c
+        0x00011434:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011438:    e0236593    .e#.    MLA      r3,r3,r5,r6
+        0x0001143c:    e3a02000    . ..    MOV      r2,#0
+        0x00011440:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x00011444:    e5843014    .0..    STR      r3,[r4,#0x14]
+        0x00011448:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x0001144c:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x00011450:    e5843000    .0..    STR      r3,[r4,#0]
+        0x00011454:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011458:    e593302c    ,0..    LDR      r3,[r3,#0x2c]
+        0x0001145c:    e584300c    .0..    STR      r3,[r4,#0xc]
+        0x00011460:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011464:    e5933030    00..    LDR      r3,[r3,#0x30]
+        0x00011468:    e5843010    .0..    STR      r3,[r4,#0x10]
+        0x0001146c:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011470:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00011474:    e5843028    (0..    STR      r3,[r4,#0x28]
+        0x00011478:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x0001147c:    e593300c    .0..    LDR      r3,[r3,#0xc]
+        0x00011480:    e584302c    ,0..    STR      r3,[r4,#0x2c]
+        0x00011484:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011488:    e5933020     0..    LDR      r3,[r3,#0x20]
+        0x0001148c:    e5843030    00..    STR      r3,[r4,#0x30]
+        0x00011490:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x00011494:    e5933024    $0..    LDR      r3,[r3,#0x24]
+        0x00011498:    e5843034    40..    STR      r3,[r4,#0x34]
+        0x0001149c:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000114a0:    e5933018    .0..    LDR      r3,[r3,#0x18]
+        0x000114a4:    e5843038    80..    STR      r3,[r4,#0x38]
+        0x000114a8:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000114ac:    e593301c    .0..    LDR      r3,[r3,#0x1c]
+        0x000114b0:    e584303c    <0..    STR      r3,[r4,#0x3c]
+        0x000114b4:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000114b8:    e5933020     0..    LDR      r3,[r3,#0x20]
+        0x000114bc:    e5843040    @0..    STR      r3,[r4,#0x40]
+        0x000114c0:    e5903008    .0..    LDR      r3,[r0,#8]
+        0x000114c4:    e5933024    $0..    LDR      r3,[r3,#0x24]
+        0x000114c8:    e5843044    D0..    STR      r3,[r4,#0x44]
+        0x000114cc:    e1a00002    ....    MOV      r0,r2
+        0x000114d0:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000114d4:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_get_pre_block
+    $a
+        0x000114d8:    e1a0c00d    ....    MOV      r12,r13
+        0x000114dc:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000114e0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000114e4:    e1a04000    .@..    MOV      r4,r0
+        0x000114e8:    ebfffec7    ....    BL       {pc} - 0x4dc  ; 0x1100c
+        0x000114ec:    e3a03046    F0..    MOV      r3,#0x46
+        0x000114f0:    e59f5050    PP..    LDR      r5,[pc,#80]   ; [([Section 17] + 18988) = 0x11548]  = 0x4a2c
+        0x000114f4:    e0230493    ..#.    MLA      r3,r3,r4,r0
+        0x000114f8:    e0853103    .1..    ADD      r3,r5,r3,LSL #2
+        0x000114fc:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011500:    e3130008    ....    TST      r3,#8
+        0x00011504:    03e00003    ....    MVNEQ    r0,#3
+        0x00011508:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x0001150c:    e1a01000    ....    MOV      r1,r0
+        0x00011510:    e1a00004    ....    MOV      r0,r4
+        0x00011514:    ebfffed0    ....    BL       {pc} - 0x4b8  ; 0x1105c
+        0x00011518:    e3a03f46    F?..    MOV      r3,#0x118
+        0x0001151c:    e0235493    .T#.    MLA      r3,r3,r4,r5
+        0x00011520:    e5933114    .1..    LDR      r3,[r3,#0x114]
+        0x00011524:    e1500003    ..P.    CMP      r0,r3
+        0x00011528:    03a00000    ....    MOVEQ    r0,#0
+        0x0001152c:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x00011530:    e5903004    .0..    LDR      r3,[r0,#4]
+        0x00011534:    e1a00004    ....    MOV      r0,r4
+        0x00011538:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x0001153c:    e5931004    ....    LDR      r1,[r3,#4]
+        0x00011540:    ebfffea5    ....    BL       {pc} - 0x564  ; 0x10fdc
+        0x00011544:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00011548:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_get_next_block
+    $a
+        0x0001154c:    e1a0c00d    ....    MOV      r12,r13
+        0x00011550:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00011554:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011558:    e1a04000    .@..    MOV      r4,r0
+        0x0001155c:    ebfffeaa    ....    BL       {pc} - 0x550  ; 0x1100c
+        0x00011560:    e3a03046    F0..    MOV      r3,#0x46
+        0x00011564:    e59f5054    TP..    LDR      r5,[pc,#84]   ; [([Section 17] + 18988) = 0x115c0]  = 0x4a2c
+        0x00011568:    e0230493    ..#.    MLA      r3,r3,r4,r0
+        0x0001156c:    e0853103    .1..    ADD      r3,r5,r3,LSL #2
+        0x00011570:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011574:    e3130008    ....    TST      r3,#8
+        0x00011578:    03e00003    ....    MVNEQ    r0,#3
+        0x0001157c:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x00011580:    e1a01000    ....    MOV      r1,r0
+        0x00011584:    e1a00004    ....    MOV      r0,r4
+        0x00011588:    ebfffeb3    ....    BL       {pc} - 0x52c  ; 0x1105c
+        0x0001158c:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011590:    e0235493    .T#.    MLA      r3,r3,r4,r5
+        0x00011594:    e5933114    .1..    LDR      r3,[r3,#0x114]
+        0x00011598:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x0001159c:    e1500003    ..P.    CMP      r0,r3
+        0x000115a0:    03a00000    ....    MOVEQ    r0,#0
+        0x000115a4:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x000115a8:    e5903000    .0..    LDR      r3,[r0,#0]
+        0x000115ac:    e1a00004    ....    MOV      r0,r4
+        0x000115b0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000115b4:    e5931004    ....    LDR      r1,[r3,#4]
+        0x000115b8:    ebfffe87    ....    BL       {pc} - 0x5dc  ; 0x10fdc
+        0x000115bc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000115c0:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_get_prio
+    $a
+        0x000115c4:    e1a0c00d    ....    MOV      r12,r13
+        0x000115c8:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000115cc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000115d0:    e1a04000    .@..    MOV      r4,r0
+        0x000115d4:    ebfffe8c    ....    BL       {pc} - 0x5c8  ; 0x1100c
+        0x000115d8:    e3a03046    F0..    MOV      r3,#0x46
+        0x000115dc:    e59f205c    \ ..    LDR      r2,[pc,#92]   ; [([Section 17] + 18988) = 0x11640]  = 0x4a2c
+        0x000115e0:    e0230493    ..#.    MLA      r3,r3,r4,r0
+        0x000115e4:    e1a0c000    ....    MOV      r12,r0
+        0x000115e8:    e0823103    .1..    ADD      r3,r2,r3,LSL #2
+        0x000115ec:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x000115f0:    e3130008    ....    TST      r3,#8
+        0x000115f4:    03e00003    ....    MVNEQ    r0,#3
+        0x000115f8:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x000115fc:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011600:    e0232493    .$#.    MLA      r3,r3,r4,r2
+        0x00011604:    e5931114    ....    LDR      r1,[r3,#0x114]
+        0x00011608:    e3510000    ..Q.    CMP      r1,#0
+        0x0001160c:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x11638
+        0x00011610:    e1a02001    . ..    MOV      r2,r1
+        0x00011614:    e3a00000    ....    MOV      r0,#0
+        0x00011618:    e5923008    .0..    LDR      r3,[r2,#8]
+        0x0001161c:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011620:    e153000c    ..S.    CMP      r3,r12
+        0x00011624:    089da830    0...    LDMEQ    r13,{r4,r5,r11,r13,pc}
+        0x00011628:    e5922000    . ..    LDR      r2,[r2,#0]
+        0x0001162c:    e2800001    ....    ADD      r0,r0,#1
+        0x00011630:    e1520001    ..R.    CMP      r2,r1
+        0x00011634:    1afffff7    ....    BNE      {pc} - 0x1c  ; 0x11618
+        0x00011638:    e3e00000    ....    MVN      r0,#0
+        0x0001163c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00011640:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_close
+    $a
+        0x00011644:    e1a0c00d    ....    MOV      r12,r13
+        0x00011648:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x0001164c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011650:    e1a07000    .p..    MOV      r7,r0
+        0x00011654:    ebfffe6c    l...    BL       {pc} - 0x648  ; 0x1100c
+        0x00011658:    e3a03046    F0..    MOV      r3,#0x46
+        0x0001165c:    e59f209c    . ..    LDR      r2,[pc,#156]  ; [([Section 17] + 18988) = 0x11700]  = 0x4a2c
+        0x00011660:    e0230793    ..#.    MLA      r3,r3,r7,r0
+        0x00011664:    e1a08000    ....    MOV      r8,r0
+        0x00011668:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x0001166c:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00011670:    e3130008    ....    TST      r3,#8
+        0x00011674:    03e00003    ....    MVNEQ    r0,#3
+        0x00011678:    089dadf0    ....    LDMEQ    r13,{r4-r8,r10,r11,r13,pc}
+        0x0001167c:    e1a00007    ....    MOV      r0,r7
+        0x00011680:    e1a01008    ....    MOV      r1,r8
+        0x00011684:    ebfffe74    t...    BL       {pc} - 0x628  ; 0x1105c
+        0x00011688:    e5902008    . ..    LDR      r2,[r0,#8]
+        0x0001168c:    e1a0a000    ....    MOV      r10,r0
+        0x00011690:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00011694:    e3530001    ..S.    CMP      r3,#1
+        0x00011698:    1a00000f    ....    BNE      {pc} + 0x44  ; 0x116dc
+        0x0001169c:    e5926024    $`..    LDR      r6,[r2,#0x24]
+        0x000116a0:    e6ef4078    x@..    UXTB     r4,r8
+        0x000116a4:    e5925020     P..    LDR      r5,[r2,#0x20]
+        0x000116a8:    e1a00007    ....    MOV      r0,r7
+        0x000116ac:    e1a01004    ....    MOV      r1,r4
+        0x000116b0:    e3a02000    . ..    MOV      r2,#0
+        0x000116b4:    e59f3048    H0..    LDR      r3,[pc,#72]   ; [0x11704] = 0xfffff830
+        0x000116b8:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Pos  ; 0x3894 Section #1
+        0x000116bc:    e1a02005    . ..    MOV      r2,r5
+        0x000116c0:    e1a03006    .0..    MOV      r3,r6
+        0x000116c4:    e1a00007    ....    MOV      r0,r7
+        0x000116c8:    e1a01004    ....    MOV      r1,r4
+        0x000116cc:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Size  ; 0x38e0 Section #1
+        0x000116d0:    e59a2008    . ..    LDR      r2,[r10,#8]
+        0x000116d4:    e3a03000    .0..    MOV      r3,#0
+        0x000116d8:    e5823000    .0..    STR      r3,[r2,#0]
+        0x000116dc:    e3a03046    F0..    MOV      r3,#0x46
+        0x000116e0:    e59f2018    . ..    LDR      r2,[pc,#24]   ; [([Section 17] + 18988) = 0x11700]  = 0x4a2c
+        0x000116e4:    e0238793    ..#.    MLA      r3,r3,r7,r8
+        0x000116e8:    e3a00000    ....    MOV      r0,#0
+        0x000116ec:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x000116f0:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000116f4:    e3c33001    .0..    BIC      r3,r3,#1
+        0x000116f8:    e5823004    .0..    STR      r3,[r2,#4]
+        0x000116fc:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00011700:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+        0x00011704:    fffff830    0...    DCD    4294965296
+    BSP_disp_sprite_block_open
+    $a
+        0x00011708:    e1a0c00d    ....    MOV      r12,r13
+        0x0001170c:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00011710:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011714:    e1a06000    .`..    MOV      r6,r0
+        0x00011718:    ebfffe3b    ;...    BL       {pc} - 0x70c  ; 0x1100c
+        0x0001171c:    e3a03046    F0..    MOV      r3,#0x46
+        0x00011720:    e59f2098    . ..    LDR      r2,[pc,#152]  ; [([Section 17] + 18988) = 0x117c0]  = 0x4a2c
+        0x00011724:    e0230693    ..#.    MLA      r3,r3,r6,r0
+        0x00011728:    e1a07000    .p..    MOV      r7,r0
+        0x0001172c:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x00011730:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00011734:    e3130008    ....    TST      r3,#8
+        0x00011738:    03e00003    ....    MVNEQ    r0,#3
+        0x0001173c:    089da8f0    ....    LDMEQ    r13,{r4-r7,r11,r13,pc}
+        0x00011740:    e1a00006    ....    MOV      r0,r6
+        0x00011744:    e1a01007    ....    MOV      r1,r7
+        0x00011748:    ebfffe43    C...    BL       {pc} - 0x6ec  ; 0x1105c
+        0x0001174c:    e5902008    . ..    LDR      r2,[r0,#8]
+        0x00011750:    e1a05000    .P..    MOV      r5,r0
+        0x00011754:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00011758:    e3530000    ..S.    CMP      r3,#0
+        0x0001175c:    1a00000e    ....    BNE      {pc} + 0x40  ; 0x1179c
+        0x00011760:    e6ef4077    w@..    UXTB     r4,r7
+        0x00011764:    e1d231fc    .1..    LDRSH    r3,[r2,#0x1c]
+        0x00011768:    e1a00006    ....    MOV      r0,r6
+        0x0001176c:    e1d221f8    .!..    LDRSH    r2,[r2,#0x18]
+        0x00011770:    e1a01004    ....    MOV      r1,r4
+        0x00011774:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Pos  ; 0x3894 Section #1
+        0x00011778:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x0001177c:    e1a01004    ....    MOV      r1,r4
+        0x00011780:    e1a00006    ....    MOV      r0,r6
+        0x00011784:    e5923024    $0..    LDR      r3,[r2,#0x24]
+        0x00011788:    e5922020      ..    LDR      r2,[r2,#0x20]
+        0x0001178c:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Size  ; 0x38e0 Section #1
+        0x00011790:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011794:    e3a03001    .0..    MOV      r3,#1
+        0x00011798:    e5823000    .0..    STR      r3,[r2,#0]
+        0x0001179c:    e3a03046    F0..    MOV      r3,#0x46
+        0x000117a0:    e59f2018    . ..    LDR      r2,[pc,#24]   ; [([Section 17] + 18988) = 0x117c0]  = 0x4a2c
+        0x000117a4:    e0237693    .v#.    MLA      r3,r3,r6,r7
+        0x000117a8:    e3a00000    ....    MOV      r0,#0
+        0x000117ac:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x000117b0:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000117b4:    e3833004    .0..    ORR      r3,r3,#4
+        0x000117b8:    e5823004    .0..    STR      r3,[r2,#4]
+        0x000117bc:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000117c0:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_set_src_win
+    $a
+        0x000117c4:    e1a0c00d    ....    MOV      r12,r13
+        0x000117c8:    e92dd9f0    ..-.    PUSH     {r4-r8,r11,r12,r14,pc}
+        0x000117cc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000117d0:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x000117d4:    e1a06000    .`..    MOV      r6,r0
+        0x000117d8:    e1a08002    ....    MOV      r8,r2
+        0x000117dc:    ebfffe0a    ....    BL       {pc} - 0x7d0  ; 0x1100c
+        0x000117e0:    e3a03046    F0..    MOV      r3,#0x46
+        0x000117e4:    e59f40b0    .@..    LDR      r4,[pc,#176]  ; [([Section 17] + 18988) = 0x1189c]  = 0x4a2c
+        0x000117e8:    e0230693    ..#.    MLA      r3,r3,r6,r0
+        0x000117ec:    e1a07000    .p..    MOV      r7,r0
+        0x000117f0:    e0843103    .1..    ADD      r3,r4,r3,LSL #2
+        0x000117f4:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x000117f8:    e3130008    ....    TST      r3,#8
+        0x000117fc:    03e00003    ....    MVNEQ    r0,#3
+        0x00011800:    0a000023    #...    BEQ      {pc} + 0x94  ; 0x11894
+        0x00011804:    e1a01007    ....    MOV      r1,r7
+        0x00011808:    e1a00006    ....    MOV      r0,r6
+        0x0001180c:    ebfffe12    ....    BL       {pc} - 0x7b0  ; 0x1105c
+        0x00011810:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011814:    e0234693    .F#.    MLA      r3,r3,r6,r4
+        0x00011818:    e1a05000    .P..    MOV      r5,r0
+        0x0001181c:    e593008c    ....    LDR      r0,[r3,#0x8c]
+        0x00011820:    ebfffffe    ....    BL       de_format_to_bpp  ; 0xd080 Section #1
+        0x00011824:    e1a04000    .@..    MOV      r4,r0
+        0x00011828:    e5950008    ....    LDR      r0,[r5,#8]
+        0x0001182c:    e58d4000    .@..    STR      r4,[r13,#0]
+        0x00011830:    e1a041a4    .A..    LSR      r4,r4,#3
+        0x00011834:    e5982000    . ..    LDR      r2,[r8,#0]
+        0x00011838:    e590102c    ,...    LDR      r1,[r0,#0x2c]
+        0x0001183c:    e5983004    .0..    LDR      r3,[r8,#4]
+        0x00011840:    e5900028    (...    LDR      r0,[r0,#0x28]
+        0x00011844:    ebfffffe    ....    BL       DE_BE_Offset_To_Addr  ; 0x65f0 Section #1
+        0x00011848:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x0001184c:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011850:    e6ef1077    w...    UXTB     r1,r7
+        0x00011854:    e593302c    ,0..    LDR      r3,[r3,#0x2c]
+        0x00011858:    e0030493    ....    MUL      r3,r3,r4
+        0x0001185c:    e1a02000    . ..    MOV      r2,r0
+        0x00011860:    e1a00006    ....    MOV      r0,r6
+        0x00011864:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_fb  ; 0x394c Section #1
+        0x00011868:    e24b0028    (.K.    SUB      r0,r11,#0x28
+        0x0001186c:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x00011870:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011874:    e5983000    .0..    LDR      r3,[r8,#0]
+        0x00011878:    e5981004    ....    LDR      r1,[r8,#4]
+        0x0001187c:    e5823008    .0..    STR      r3,[r2,#8]
+        0x00011880:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011884:    e583100c    ....    STR      r1,[r3,#0xc]
+        0x00011888:    e51b0028    (...    LDR      r0,[r11,#-0x28]
+        0x0001188c:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00011890:    e3a00000    ....    MOV      r0,#0
+        0x00011894:    e24bd020     .K.    SUB      r13,r11,#0x20
+        0x00011898:    e89da9f0    ....    LDM      r13,{r4-r8,r11,r13,pc}
+    $d
+        0x0001189c:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    sprite_set_sprite_block_para
+    $a
+        0x000118a0:    e1a0c00d    ....    MOV      r12,r13
+        0x000118a4:    e92dd9f0    ..-.    PUSH     {r4-r8,r11,r12,r14,pc}
+        0x000118a8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000118ac:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x000118b0:    e1a08002    ....    MOV      r8,r2
+        0x000118b4:    e59f20bc    . ..    LDR      r2,[pc,#188]  ; [([Section 17] + 18988) = 0x11978]  = 0x4a2c
+        0x000118b8:    e1a04003    .@..    MOV      r4,r3
+        0x000118bc:    e3a03f46    F?..    MOV      r3,#0x118
+        0x000118c0:    e1a07000    .p..    MOV      r7,r0
+        0x000118c4:    e6ef6071    q`..    UXTB     r6,r1
+        0x000118c8:    e0232093    . #.    MLA      r3,r3,r0,r2
+        0x000118cc:    e593008c    ....    LDR      r0,[r3,#0x8c]
+        0x000118d0:    ebfffffe    ....    BL       de_format_to_bpp  ; 0xd080 Section #1
+        0x000118d4:    e594100c    ....    LDR      r1,[r4,#0xc]
+        0x000118d8:    e5942028    ( ..    LDR      r2,[r4,#0x28]
+        0x000118dc:    e594302c    ,0..    LDR      r3,[r4,#0x2c]
+        0x000118e0:    e1a05000    .P..    MOV      r5,r0
+        0x000118e4:    e5940000    ....    LDR      r0,[r4,#0]
+        0x000118e8:    e58d5000    .P..    STR      r5,[r13,#0]
+        0x000118ec:    ebfffffe    ....    BL       DE_BE_Offset_To_Addr  ; 0x65f0 Section #1
+        0x000118f0:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x000118f4:    e594c00c    ....    LDR      r12,[r4,#0xc]
+        0x000118f8:    e1a031a5    .1..    LSR      r3,r5,#3
+        0x000118fc:    e1a01006    ....    MOV      r1,r6
+        0x00011900:    e003039c    ....    MUL      r3,r12,r3
+        0x00011904:    e1a02000    . ..    MOV      r2,r0
+        0x00011908:    e1a00007    ....    MOV      r0,r7
+        0x0001190c:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_fb  ; 0x394c Section #1
+        0x00011910:    e1a01006    ....    MOV      r1,r6
+        0x00011914:    e1d423f8    .#..    LDRSH    r2,[r4,#0x38]
+        0x00011918:    e1a00007    ....    MOV      r0,r7
+        0x0001191c:    e1d433fc    .3..    LDRSH    r3,[r4,#0x3c]
+        0x00011920:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Pos  ; 0x3894 Section #1
+        0x00011924:    e5943044    D0..    LDR      r3,[r4,#0x44]
+        0x00011928:    e1a01006    ....    MOV      r1,r6
+        0x0001192c:    e5942040    @ ..    LDR      r2,[r4,#0x40]
+        0x00011930:    e1a00007    ....    MOV      r0,r7
+        0x00011934:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Size  ; 0x38e0 Section #1
+        0x00011938:    e1a01006    ....    MOV      r1,r6
+        0x0001193c:    e6ef2078    x ..    UXTB     r2,r8
+        0x00011940:    e1a00007    ....    MOV      r0,r7
+        0x00011944:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Next_Id  ; 0x398c Section #1
+        0x00011948:    e5941044    D...    LDR      r1,[r4,#0x44]
+        0x0001194c:    e594300c    .0..    LDR      r3,[r4,#0xc]
+        0x00011950:    e3a02004    . ..    MOV      r2,#4
+        0x00011954:    e5940000    ....    LDR      r0,[r4,#0]
+        0x00011958:    e0030193    ....    MUL      r3,r3,r1
+        0x0001195c:    e0050395    ....    MUL      r5,r5,r3
+        0x00011960:    e2855007    .P..    ADD      r5,r5,#7
+        0x00011964:    e1a011a5    ....    LSR      r1,r5,#3
+        0x00011968:    ebfffffe    ....    BL       OSAL_CacheRangeFlush  ; 0x2f54 Section #1
+        0x0001196c:    e3a00000    ....    MOV      r0,#0
+        0x00011970:    e24bd020     .K.    SUB      r13,r11,#0x20
+        0x00011974:    e89da9f0    ....    LDM      r13,{r4-r8,r11,r13,pc}
+    $d
+        0x00011978:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_set_para
+    $a
+        0x0001197c:    e1a0c00d    ....    MOV      r12,r13
+        0x00011980:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00011984:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011988:    e24dd050    P.M.    SUB      r13,r13,#0x50
+        0x0001198c:    e1a06002    .`..    MOV      r6,r2
+        0x00011990:    e1a07000    .p..    MOV      r7,r0
+        0x00011994:    ebfffd9c    ....    BL       {pc} - 0x988  ; 0x1100c
+        0x00011998:    e3a03046    F0..    MOV      r3,#0x46
+        0x0001199c:    e59f20f0    . ..    LDR      r2,[pc,#240]  ; [([Section 17] + 18988) = 0x11a94]  = 0x4a2c
+        0x000119a0:    e0230793    ..#.    MLA      r3,r3,r7,r0
+        0x000119a4:    e1a04000    .@..    MOV      r4,r0
+        0x000119a8:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x000119ac:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x000119b0:    e3130008    ....    TST      r3,#8
+        0x000119b4:    03e00003    ....    MVNEQ    r0,#3
+        0x000119b8:    0a000033    3...    BEQ      {pc} + 0xd4  ; 0x11a8c
+        0x000119bc:    e1a01004    ....    MOV      r1,r4
+        0x000119c0:    e1a00007    ....    MOV      r0,r7
+        0x000119c4:    ebfffda4    ....    BL       {pc} - 0x968  ; 0x1105c
+        0x000119c8:    e1a01006    ....    MOV      r1,r6
+        0x000119cc:    e3a02048    H ..    MOV      r2,#0x48
+        0x000119d0:    e1a05000    .P..    MOV      r5,r0
+        0x000119d4:    e24b0068    h.K.    SUB      r0,r11,#0x68
+        0x000119d8:    ebfffffe    ....    BL       memcpy  ;
+        0x000119dc:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x000119e0:    e1a01004    ....    MOV      r1,r4
+        0x000119e4:    e1a00007    ....    MOV      r0,r7
+        0x000119e8:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x000119ec:    e3530000    ..S.    CMP      r3,#0
+        0x000119f0:    02433e7d    }>C.    SUBEQ    r3,r3,#0x7d0
+        0x000119f4:    050b302c    ,0..    STREQ    r3,[r11,#-0x2c]
+        0x000119f8:    e5952000    . ..    LDR      r2,[r5,#0]
+        0x000119fc:    e24b3068    h0K.    SUB      r3,r11,#0x68
+        0x00011a00:    e5922008    . ..    LDR      r2,[r2,#8]
+        0x00011a04:    e5922004    . ..    LDR      r2,[r2,#4]
+        0x00011a08:    ebffffa4    ....    BL       {pc} - 0x168  ; 0x118a0
+        0x00011a0c:    e24b0020     .K.    SUB      r0,r11,#0x20
+        0x00011a10:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x00011a14:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011a18:    e5963000    .0..    LDR      r3,[r6,#0]
+        0x00011a1c:    e5823028    (0..    STR      r3,[r2,#0x28]
+        0x00011a20:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011a24:    e596300c    .0..    LDR      r3,[r6,#0xc]
+        0x00011a28:    e5961010    ....    LDR      r1,[r6,#0x10]
+        0x00011a2c:    e582302c    ,0..    STR      r3,[r2,#0x2c]
+        0x00011a30:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011a34:    e5831030    0...    STR      r1,[r3,#0x30]
+        0x00011a38:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011a3c:    e5963028    (0..    LDR      r3,[r6,#0x28]
+        0x00011a40:    e596002c    ,...    LDR      r0,[r6,#0x2c]
+        0x00011a44:    e5964040    @@..    LDR      r4,[r6,#0x40]
+        0x00011a48:    e5823008    .0..    STR      r3,[r2,#8]
+        0x00011a4c:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011a50:    e5961038    8...    LDR      r1,[r6,#0x38]
+        0x00011a54:    e596c044    D...    LDR      r12,[r6,#0x44]
+        0x00011a58:    e583000c    ....    STR      r0,[r3,#0xc]
+        0x00011a5c:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011a60:    e596203c    < ..    LDR      r2,[r6,#0x3c]
+        0x00011a64:    e5831018    ....    STR      r1,[r3,#0x18]
+        0x00011a68:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011a6c:    e583201c    . ..    STR      r2,[r3,#0x1c]
+        0x00011a70:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011a74:    e5834020     @..    STR      r4,[r3,#0x20]
+        0x00011a78:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011a7c:    e583c024    $...    STR      r12,[r3,#0x24]
+        0x00011a80:    e51b0020     ...    LDR      r0,[r11,#-0x20]
+        0x00011a84:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00011a88:    e3a00000    ....    MOV      r0,#0
+        0x00011a8c:    e24bd01c    ..K.    SUB      r13,r11,#0x1c
+        0x00011a90:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00011a94:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_set_order
+    $a
+        0x00011a98:    e1a0c00d    ....    MOV      r12,r13
+        0x00011a9c:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00011aa0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011aa4:    e24dd048    H.M.    SUB      r13,r13,#0x48
+        0x00011aa8:    e1a04002    .@..    MOV      r4,r2
+        0x00011aac:    e1a08000    ....    MOV      r8,r0
+        0x00011ab0:    ebfffd55    U...    BL       {pc} - 0xaa4  ; 0x1100c
+        0x00011ab4:    e1a01004    ....    MOV      r1,r4
+        0x00011ab8:    e1a07000    .p..    MOV      r7,r0
+        0x00011abc:    e1a00008    ....    MOV      r0,r8
+        0x00011ac0:    ebfffd51    Q...    BL       {pc} - 0xab4  ; 0x1100c
+        0x00011ac4:    e3a03046    F0..    MOV      r3,#0x46
+        0x00011ac8:    e0020893    ....    MUL      r2,r3,r8
+        0x00011acc:    e59f12a0    ....    LDR      r1,[pc,#672]  ; [([Section 17] + 18988) = 0x11d74]  = 0x4a2c
+        0x00011ad0:    e0823007    .0..    ADD      r3,r2,r7
+        0x00011ad4:    e0813103    .1..    ADD      r3,r1,r3,LSL #2
+        0x00011ad8:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011adc:    e3130008    ....    TST      r3,#8
+        0x00011ae0:    e1a04000    .@..    MOV      r4,r0
+        0x00011ae4:    0a00009f    ....    BEQ      {pc} + 0x284  ; 0x11d68
+        0x00011ae8:    e3700001    ..p.    CMN      r0,#1
+        0x00011aec:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x11b04
+        0x00011af0:    e0823000    .0..    ADD      r3,r2,r0
+        0x00011af4:    e0813103    .1..    ADD      r3,r1,r3,LSL #2
+        0x00011af8:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011afc:    e3130008    ....    TST      r3,#8
+        0x00011b00:    0a000098    ....    BEQ      {pc} + 0x268  ; 0x11d68
+        0x00011b04:    e1570004    ..W.    CMP      r7,r4
+        0x00011b08:    0a000094    ....    BEQ      {pc} + 0x258  ; 0x11d60
+        0x00011b0c:    e3740001    ..t.    CMN      r4,#1
+        0x00011b10:    03a06000    .`..    MOVEQ    r6,#0
+        0x00011b14:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x11b50
+        0x00011b18:    e1a00008    ....    MOV      r0,r8
+        0x00011b1c:    e1a01004    ....    MOV      r1,r4
+        0x00011b20:    ebfffd4d    M...    BL       {pc} - 0xac4  ; 0x1105c
+        0x00011b24:    e5903000    .0..    LDR      r3,[r0,#0]
+        0x00011b28:    e1a06000    .`..    MOV      r6,r0
+        0x00011b2c:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00011b30:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011b34:    e1530007    ..S.    CMP      r3,r7
+        0x00011b38:    13a03000    .0..    MOVNE    r3,#0
+        0x00011b3c:    03a03001    .0..    MOVEQ    r3,#1
+        0x00011b40:    e3570000    ..W.    CMP      r7,#0
+        0x00011b44:    03a03000    .0..    MOVEQ    r3,#0
+        0x00011b48:    e3530000    ..S.    CMP      r3,#0
+        0x00011b4c:    1a000083    ....    BNE      {pc} + 0x214  ; 0x11d60
+        0x00011b50:    e1a01007    ....    MOV      r1,r7
+        0x00011b54:    e1a00008    ....    MOV      r0,r8
+        0x00011b58:    ebfffd3f    ?...    BL       {pc} - 0xafc  ; 0x1105c
+        0x00011b5c:    e3570000    ..W.    CMP      r7,#0
+        0x00011b60:    05907000    .p..    LDREQ    r7,[r0,#0]
+        0x00011b64:    e1a05000    .P..    MOV      r5,r0
+        0x00011b68:    15907004    .p..    LDRNE    r7,[r0,#4]
+        0x00011b6c:    e3740001    ..t.    CMN      r4,#1
+        0x00011b70:    059f21fc    .!..    LDREQ    r2,[pc,#508]  ; [([Section 17] + 18988) = 0x11d74]  = 0x4a2c
+        0x00011b74:    03a03f46    F?..    MOVEQ    r3,#0x118
+        0x00011b78:    00232893    .(#.    MLAEQ    r3,r3,r8,r2
+        0x00011b7c:    0593a114    ....    LDREQ    r10,[r3,#0x114]
+        0x00011b80:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x11b94
+        0x00011b84:    e1a01004    ....    MOV      r1,r4
+        0x00011b88:    e1a00008    ....    MOV      r0,r8
+        0x00011b8c:    ebfffd32    2...    BL       {pc} - 0xb30  ; 0x1105c
+        0x00011b90:    e1a0a000    ....    MOV      r10,r0
+        0x00011b94:    e1a00008    ....    MOV      r0,r8
+        0x00011b98:    e1a01005    ....    MOV      r1,r5
+        0x00011b9c:    ebfffd43    C...    BL       {pc} - 0xaec  ; 0x110b0
+        0x00011ba0:    e59fe1cc    ....    LDR      r14,[pc,#460]  ; [([Section 17] + 18988) = 0x11d74]  = 0x4a2c
+        0x00011ba4:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011ba8:    e020e893    .. .    MLA      r0,r3,r8,r14
+        0x00011bac:    e590c114    ....    LDR      r12,[r0,#0x114]
+        0x00011bb0:    e35c0000    ..\.    CMP      r12,#0
+        0x00011bb4:    05805114    .Q..    STREQ    r5,[r0,#0x114]
+        0x00011bb8:    0a000015    ....    BEQ      {pc} + 0x5c  ; 0x11c14
+        0x00011bbc:    e3560000    ..V.    CMP      r6,#0
+        0x00011bc0:    1596c000    ....    LDRNE    r12,[r6,#0]
+        0x00011bc4:    1a00000e    ....    BNE      {pc} + 0x40  ; 0x11c04
+        0x00011bc8:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011bcc:    e5931004    ....    LDR      r1,[r3,#4]
+        0x00011bd0:    e5836004    .`..    STR      r6,[r3,#4]
+        0x00011bd4:    e3a03046    F0..    MOV      r3,#0x46
+        0x00011bd8:    e59c2008    . ..    LDR      r2,[r12,#8]
+        0x00011bdc:    e0231893    ..#.    MLA      r3,r3,r8,r1
+        0x00011be0:    e5821004    ....    STR      r1,[r2,#4]
+        0x00011be4:    e5901094    ....    LDR      r1,[r0,#0x94]
+        0x00011be8:    e2833024    $0..    ADD      r3,r3,#0x24
+        0x00011bec:    e5805114    .Q..    STR      r5,[r0,#0x114]
+        0x00011bf0:    e08e3103    .1..    ADD      r3,r14,r3,LSL #2
+        0x00011bf4:    e5932004    . ..    LDR      r2,[r3,#4]
+        0x00011bf8:    e5802094    . ..    STR      r2,[r0,#0x94]
+        0x00011bfc:    e5831004    ....    STR      r1,[r3,#4]
+        0x00011c00:    e59c6004    .`..    LDR      r6,[r12,#4]
+        0x00011c04:    e585c000    ....    STR      r12,[r5,#0]
+        0x00011c08:    e5856004    .`..    STR      r6,[r5,#4]
+        0x00011c0c:    e5865000    .P..    STR      r5,[r6,#0]
+        0x00011c10:    e58c5004    .P..    STR      r5,[r12,#4]
+        0x00011c14:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011c18:    e24bc034    4.K.    SUB      r12,r11,#0x34
+        0x00011c1c:    e24b406c    l@K.    SUB      r4,r11,#0x6c
+        0x00011c20:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x00011c24:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x00011c28:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011c2c:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00011c30:    e593202c    , ..    LDR      r2,[r3,#0x2c]
+        0x00011c34:    e50b2060    ` ..    STR      r2,[r11,#-0x60]
+        0x00011c38:    e5932008    . ..    LDR      r2,[r3,#8]
+        0x00011c3c:    e593300c    .0..    LDR      r3,[r3,#0xc]
+        0x00011c40:    e50b2044    D ..    STR      r2,[r11,#-0x44]
+        0x00011c44:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x00011c48:    e891000f    ....    LDM      r1,{r0-r3}
+        0x00011c4c:    e88c000f    ....    STM      r12,{r0-r3}
+        0x00011c50:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011c54:    e1a00008    ....    MOV      r0,r8
+        0x00011c58:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00011c5c:    e3530000    ..S.    CMP      r3,#0
+        0x00011c60:    02433e7d    }>C.    SUBEQ    r3,r3,#0x7d0
+        0x00011c64:    050b3030    00..    STREQ    r3,[r11,#-0x30]
+        0x00011c68:    e5952000    . ..    LDR      r2,[r5,#0]
+        0x00011c6c:    e1a03004    .0..    MOV      r3,r4
+        0x00011c70:    e5951008    ....    LDR      r1,[r5,#8]
+        0x00011c74:    e2844038    8@..    ADD      r4,r4,#0x38
+        0x00011c78:    e5922008    . ..    LDR      r2,[r2,#8]
+        0x00011c7c:    e5911004    ....    LDR      r1,[r1,#4]
+        0x00011c80:    e5922004    . ..    LDR      r2,[r2,#4]
+        0x00011c84:    ebffff05    ....    BL       {pc} - 0x3e4  ; 0x118a0
+        0x00011c88:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x00011c8c:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x00011c90:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x00011c94:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x00011c98:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00011c9c:    e593202c    , ..    LDR      r2,[r3,#0x2c]
+        0x00011ca0:    e50b2060    ` ..    STR      r2,[r11,#-0x60]
+        0x00011ca4:    e5932008    . ..    LDR      r2,[r3,#8]
+        0x00011ca8:    e593300c    .0..    LDR      r3,[r3,#0xc]
+        0x00011cac:    e50b2044    D ..    STR      r2,[r11,#-0x44]
+        0x00011cb0:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x00011cb4:    e891000f    ....    LDM      r1,{r0-r3}
+        0x00011cb8:    e884000f    ....    STM      r4,{r0-r3}
+        0x00011cbc:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x00011cc0:    e24b406c    l@K.    SUB      r4,r11,#0x6c
+        0x00011cc4:    e1a00008    ....    MOV      r0,r8
+        0x00011cc8:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00011ccc:    e3530000    ..S.    CMP      r3,#0
+        0x00011cd0:    02433e7d    }>C.    SUBEQ    r3,r3,#0x7d0
+        0x00011cd4:    050b3030    00..    STREQ    r3,[r11,#-0x30]
+        0x00011cd8:    e5972000    . ..    LDR      r2,[r7,#0]
+        0x00011cdc:    e1a03004    .0..    MOV      r3,r4
+        0x00011ce0:    e5971008    ....    LDR      r1,[r7,#8]
+        0x00011ce4:    e2844038    8@..    ADD      r4,r4,#0x38
+        0x00011ce8:    e5922008    . ..    LDR      r2,[r2,#8]
+        0x00011cec:    e5911004    ....    LDR      r1,[r1,#4]
+        0x00011cf0:    e5922004    . ..    LDR      r2,[r2,#4]
+        0x00011cf4:    ebfffee9    ....    BL       {pc} - 0x454  ; 0x118a0
+        0x00011cf8:    e59a3008    .0..    LDR      r3,[r10,#8]
+        0x00011cfc:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x00011d00:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x00011d04:    e59a3008    .0..    LDR      r3,[r10,#8]
+        0x00011d08:    e2831018    ....    ADD      r1,r3,#0x18
+        0x00011d0c:    e593202c    , ..    LDR      r2,[r3,#0x2c]
+        0x00011d10:    e50b2060    ` ..    STR      r2,[r11,#-0x60]
+        0x00011d14:    e5932008    . ..    LDR      r2,[r3,#8]
+        0x00011d18:    e593300c    .0..    LDR      r3,[r3,#0xc]
+        0x00011d1c:    e50b2044    D ..    STR      r2,[r11,#-0x44]
+        0x00011d20:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x00011d24:    e891000f    ....    LDM      r1,{r0-r3}
+        0x00011d28:    e884000f    ....    STM      r4,{r0-r3}
+        0x00011d2c:    e59a3008    .0..    LDR      r3,[r10,#8]
+        0x00011d30:    e1a00008    ....    MOV      r0,r8
+        0x00011d34:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00011d38:    e3530000    ..S.    CMP      r3,#0
+        0x00011d3c:    02433e7d    }>C.    SUBEQ    r3,r3,#0x7d0
+        0x00011d40:    050b3030    00..    STREQ    r3,[r11,#-0x30]
+        0x00011d44:    e59a2000    . ..    LDR      r2,[r10,#0]
+        0x00011d48:    e24b306c    l0K.    SUB      r3,r11,#0x6c
+        0x00011d4c:    e59a1008    ....    LDR      r1,[r10,#8]
+        0x00011d50:    e5922008    . ..    LDR      r2,[r2,#8]
+        0x00011d54:    e5911004    ....    LDR      r1,[r1,#4]
+        0x00011d58:    e5922004    . ..    LDR      r2,[r2,#4]
+        0x00011d5c:    ebfffecf    ....    BL       {pc} - 0x4bc  ; 0x118a0
+        0x00011d60:    e3a00000    ....    MOV      r0,#0
+        0x00011d64:    ea000000    ....    B        {pc} + 0x8  ; 0x11d6c
+        0x00011d68:    e3e00003    ....    MVN      r0,#3
+        0x00011d6c:    e24bd024    $.K.    SUB      r13,r11,#0x24
+        0x00011d70:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00011d74:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_set_bottom
+    $a
+        0x00011d78:    e1a0c00d    ....    MOV      r12,r13
+        0x00011d7c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00011d80:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011d84:    e3a02000    . ..    MOV      r2,#0
+        0x00011d88:    ebfffffe    ....    BL       BSP_disp_sprite_set_order  ; 0x11a98 Section #1
+        0x00011d8c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_sprite_block_set_top
+        0x00011d90:    e1a0c00d    ....    MOV      r12,r13
+        0x00011d94:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00011d98:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011d9c:    e1a04000    .@..    MOV      r4,r0
+        0x00011da0:    e1a05001    .P..    MOV      r5,r1
+        0x00011da4:    ebfffceb    ....    BL       {pc} - 0xc4c  ; 0x11158
+        0x00011da8:    e1a01000    ....    MOV      r1,r0
+        0x00011dac:    e1a00004    ....    MOV      r0,r4
+        0x00011db0:    ebfffc89    ....    BL       {pc} - 0xdd4  ; 0x10fdc
+        0x00011db4:    e1a01005    ....    MOV      r1,r5
+        0x00011db8:    e1a02000    . ..    MOV      r2,r0
+        0x00011dbc:    e1a00004    ....    MOV      r0,r4
+        0x00011dc0:    ebfffffe    ....    BL       BSP_disp_sprite_set_order  ; 0x11a98 Section #1
+        0x00011dc4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    BSP_disp_sprite_block_set_framebuffer
+        0x00011dc8:    e1a0c00d    ....    MOV      r12,r13
+        0x00011dcc:    e92dd9f0    ..-.    PUSH     {r4-r8,r11,r12,r14,pc}
+        0x00011dd0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011dd4:    e24dd014    ..M.    SUB      r13,r13,#0x14
+        0x00011dd8:    e1a07000    .p..    MOV      r7,r0
+        0x00011ddc:    e1a06002    .`..    MOV      r6,r2
+        0x00011de0:    ebfffc89    ....    BL       {pc} - 0xdd4  ; 0x1100c
+        0x00011de4:    e3a03046    F0..    MOV      r3,#0x46
+        0x00011de8:    e59f40e0    .@..    LDR      r4,[pc,#224]  ; [([Section 17] + 18988) = 0x11ed0]  = 0x4a2c
+        0x00011dec:    e0230793    ..#.    MLA      r3,r3,r7,r0
+        0x00011df0:    e1a08000    ....    MOV      r8,r0
+        0x00011df4:    e0843103    .1..    ADD      r3,r4,r3,LSL #2
+        0x00011df8:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x00011dfc:    e3130008    ....    TST      r3,#8
+        0x00011e00:    03e00003    ....    MVNEQ    r0,#3
+        0x00011e04:    0a00002f    /...    BEQ      {pc} + 0xc4  ; 0x11ec8
+        0x00011e08:    e1a01008    ....    MOV      r1,r8
+        0x00011e0c:    e1a00007    ....    MOV      r0,r7
+        0x00011e10:    ebfffc91    ....    BL       {pc} - 0xdb4  ; 0x1105c
+        0x00011e14:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00011e18:    e0234793    .G#.    MLA      r3,r3,r7,r4
+        0x00011e1c:    e1a05000    .P..    MOV      r5,r0
+        0x00011e20:    e593008c    ....    LDR      r0,[r3,#0x8c]
+        0x00011e24:    ebfffffe    ....    BL       de_format_to_bpp  ; 0xd080 Section #1
+        0x00011e28:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011e2c:    e596100c    ....    LDR      r1,[r6,#0xc]
+        0x00011e30:    e3a02004    . ..    MOV      r2,#4
+        0x00011e34:    e5933014    .0..    LDR      r3,[r3,#0x14]
+        0x00011e38:    e0010391    ....    MUL      r1,r1,r3
+        0x00011e3c:    e1a04000    .@..    MOV      r4,r0
+        0x00011e40:    e5960000    ....    LDR      r0,[r6,#0]
+        0x00011e44:    e0010194    ....    MUL      r1,r4,r1
+        0x00011e48:    e2811007    ....    ADD      r1,r1,#7
+        0x00011e4c:    e1a011a1    ....    LSR      r1,r1,#3
+        0x00011e50:    ebfffffe    ....    BL       OSAL_CacheRangeFlush  ; 0x2f54 Section #1
+        0x00011e54:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011e58:    e58d4000    .@..    STR      r4,[r13,#0]
+        0x00011e5c:    e1a041c4    .A..    ASR      r4,r4,#3
+        0x00011e60:    e596100c    ....    LDR      r1,[r6,#0xc]
+        0x00011e64:    e592300c    .0..    LDR      r3,[r2,#0xc]
+        0x00011e68:    e5960000    ....    LDR      r0,[r6,#0]
+        0x00011e6c:    e5922008    . ..    LDR      r2,[r2,#8]
+        0x00011e70:    ebfffffe    ....    BL       DE_BE_Offset_To_Addr  ; 0x65f0 Section #1
+        0x00011e74:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00011e78:    e596300c    .0..    LDR      r3,[r6,#0xc]
+        0x00011e7c:    e6ef1078    x...    UXTB     r1,r8
+        0x00011e80:    e0030493    ....    MUL      r3,r3,r4
+        0x00011e84:    e1a02000    . ..    MOV      r2,r0
+        0x00011e88:    e1a00007    ....    MOV      r0,r7
+        0x00011e8c:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_fb  ; 0x394c Section #1
+        0x00011e90:    e24b0028    (.K.    SUB      r0,r11,#0x28
+        0x00011e94:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x00011e98:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011e9c:    e5963000    .0..    LDR      r3,[r6,#0]
+        0x00011ea0:    e5823028    (0..    STR      r3,[r2,#0x28]
+        0x00011ea4:    e5952008    . ..    LDR      r2,[r5,#8]
+        0x00011ea8:    e596300c    .0..    LDR      r3,[r6,#0xc]
+        0x00011eac:    e5961010    ....    LDR      r1,[r6,#0x10]
+        0x00011eb0:    e582302c    ,0..    STR      r3,[r2,#0x2c]
+        0x00011eb4:    e5953008    .0..    LDR      r3,[r5,#8]
+        0x00011eb8:    e5831030    0...    STR      r1,[r3,#0x30]
+        0x00011ebc:    e51b0028    (...    LDR      r0,[r11,#-0x28]
+        0x00011ec0:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00011ec4:    e3a00000    ....    MOV      r0,#0
+        0x00011ec8:    e24bd020     .K.    SUB      r13,r11,#0x20
+        0x00011ecc:    e89da9f0    ....    LDM      r13,{r4-r8,r11,r13,pc}
+    $d
+        0x00011ed0:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_set_screen_win
+    $a
+        0x00011ed4:    e1a0c00d    ....    MOV      r12,r13
+        0x00011ed8:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00011edc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00011ee0:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x00011ee4:    e1a07002    .p..    MOV      r7,r2
+        0x00011ee8:    e1a0a000    ....    MOV      r10,r0
+        0x00011eec:    ebfffc46    F...    BL       {pc} - 0xee0  ; 0x1100c
+        0x00011ef0:    e3a03046    F0..    MOV      r3,#0x46
+        0x00011ef4:    e59f2150    P!..    LDR      r2,[pc,#336]  ; [([Section 17] + 18988) = 0x1204c]  = 0x4a2c
+        0x00011ef8:    e0230a93    ..#.    MLA      r3,r3,r10,r0
+        0x00011efc:    e1a05000    .P..    MOV      r5,r0
+        0x00011f00:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x00011f04:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x00011f08:    e3130008    ....    TST      r3,#8
+        0x00011f0c:    03e00003    ....    MVNEQ    r0,#3
+        0x00011f10:    0a00004b    K...    BEQ      {pc} + 0x134  ; 0x12044
+        0x00011f14:    e5971008    ....    LDR      r1,[r7,#8]
+        0x00011f18:    e3510008    ..Q.    CMP      r1,#8
+        0x00011f1c:    13510010    ..Q.    CMPNE    r1,#0x10
+        0x00011f20:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0x11f50
+        0x00011f24:    e3510020     .Q.    CMP      r1,#0x20
+        0x00011f28:    0a000008    ....    BEQ      {pc} + 0x28  ; 0x11f50
+        0x00011f2c:    e3510040    @.Q.    CMP      r1,#0x40
+        0x00011f30:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x11f50
+        0x00011f34:    e3510080    ..Q.    CMP      r1,#0x80
+        0x00011f38:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x11f50
+        0x00011f3c:    e3510c01    ..Q.    CMP      r1,#0x100
+        0x00011f40:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x11f50
+        0x00011f44:    e3510c02    ..Q.    CMP      r1,#0x200
+        0x00011f48:    159f0100    ....    LDRNE    r0,[pc,#256]  ; [([Section 10] + 3104) = 0x12050]  = 0xc20
+        0x00011f4c:    1a000010    ....    BNE      {pc} + 0x48  ; 0x11f94
+        0x00011f50:    e597100c    ....    LDR      r1,[r7,#0xc]
+        0x00011f54:    e3510008    ..Q.    CMP      r1,#8
+        0x00011f58:    13510010    ..Q.    CMPNE    r1,#0x10
+        0x00011f5c:    0a00000f    ....    BEQ      {pc} + 0x44  ; 0x11fa0
+        0x00011f60:    e3510020     .Q.    CMP      r1,#0x20
+        0x00011f64:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x11fa0
+        0x00011f68:    e3510040    @.Q.    CMP      r1,#0x40
+        0x00011f6c:    0a00000b    ....    BEQ      {pc} + 0x34  ; 0x11fa0
+        0x00011f70:    e3510080    ..Q.    CMP      r1,#0x80
+        0x00011f74:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x11fa0
+        0x00011f78:    e3510c01    ..Q.    CMP      r1,#0x100
+        0x00011f7c:    0a000007    ....    BEQ      {pc} + 0x24  ; 0x11fa0
+        0x00011f80:    e3510c02    ..Q.    CMP      r1,#0x200
+        0x00011f84:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x11fa0
+        0x00011f88:    e3510b01    ..Q.    CMP      r1,#0x400
+        0x00011f8c:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x11fa0
+        0x00011f90:    e59f00bc    ....    LDR      r0,[pc,#188]  ; [([Section 10] + 3167) = 0x12054]  = 0xc5f
+        0x00011f94:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00011f98:    e3e00001    ....    MVN      r0,#1
+        0x00011f9c:    ea000028    (...    B        {pc} + 0xa8  ; 0x12044
+        0x00011fa0:    e1a0000a    ....    MOV      r0,r10
+        0x00011fa4:    e1a01005    ....    MOV      r1,r5
+        0x00011fa8:    ebfffc2b    +...    BL       {pc} - 0xf4c  ; 0x1105c
+        0x00011fac:    e2508000    ..P.    SUBS     r8,r0,#0
+        0x00011fb0:    0afffff8    ....    BEQ      {pc} - 0x18  ; 0x11f98
+        0x00011fb4:    e5982008    . ..    LDR      r2,[r8,#8]
+        0x00011fb8:    e6ef5075    uP..    UXTB     r5,r5
+        0x00011fbc:    e5973004    .0..    LDR      r3,[r7,#4]
+        0x00011fc0:    e1a0000a    ....    MOV      r0,r10
+        0x00011fc4:    e5976008    .`..    LDR      r6,[r7,#8]
+        0x00011fc8:    e1a01005    ....    MOV      r1,r5
+        0x00011fcc:    e592c000    ....    LDR      r12,[r2,#0]
+        0x00011fd0:    e59f2080    . ..    LDR      r2,[pc,#128]  ; [0x12058] = 0xfffff830
+        0x00011fd4:    e35c0000    ..\.    CMP      r12,#0
+        0x00011fd8:    e597400c    .@..    LDR      r4,[r7,#0xc]
+        0x00011fdc:    01a03002    .0..    MOVEQ    r3,r2
+        0x00011fe0:    e1d720f0    . ..    LDRSH    r2,[r7,#0]
+        0x00011fe4:    e6bf3073    s0..    SXTH     r3,r3
+        0x00011fe8:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Pos  ; 0x3894 Section #1
+        0x00011fec:    e1a01005    ....    MOV      r1,r5
+        0x00011ff0:    e1a02006    . ..    MOV      r2,r6
+        0x00011ff4:    e1a03004    .0..    MOV      r3,r4
+        0x00011ff8:    e1a0000a    ....    MOV      r0,r10
+        0x00011ffc:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Size  ; 0x38e0 Section #1
+        0x00012000:    e24b0028    (.K.    SUB      r0,r11,#0x28
+        0x00012004:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x00012008:    e5982008    . ..    LDR      r2,[r8,#8]
+        0x0001200c:    e5973000    .0..    LDR      r3,[r7,#0]
+        0x00012010:    e5971004    ....    LDR      r1,[r7,#4]
+        0x00012014:    e5970008    ....    LDR      r0,[r7,#8]
+        0x00012018:    e5823018    .0..    STR      r3,[r2,#0x18]
+        0x0001201c:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x00012020:    e597200c    . ..    LDR      r2,[r7,#0xc]
+        0x00012024:    e583101c    ....    STR      r1,[r3,#0x1c]
+        0x00012028:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x0001202c:    e5830020     ...    STR      r0,[r3,#0x20]
+        0x00012030:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x00012034:    e5832024    $ ..    STR      r2,[r3,#0x24]
+        0x00012038:    e51b0028    (...    LDR      r0,[r11,#-0x28]
+        0x0001203c:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00012040:    e3a00000    ....    MOV      r0,#0
+        0x00012044:    e24bd024    $.K.    SUB      r13,r11,#0x24
+        0x00012048:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x0001204c:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+        0x00012050:    00000c20     ...    DCD    3104 ; [Section 10]
+        0x00012054:    00000c5f    _...    DCD    3167 ; [Section 10]
+        0x00012058:    fffff830    0...    DCD    4294965296
+    BSP_disp_sprite_block_release
+    $a
+        0x0001205c:    e1a0c00d    ....    MOV      r12,r13
+        0x00012060:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00012064:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012068:    e24dd05c    \.M.    SUB      r13,r13,#0x5c
+        0x0001206c:    e1a08000    ....    MOV      r8,r0
+        0x00012070:    ebfffbe5    ....    BL       {pc} - 0x1064  ; 0x1100c
+        0x00012074:    e3a03046    F0..    MOV      r3,#0x46
+        0x00012078:    e59f229c    ."..    LDR      r2,[pc,#668]  ; [([Section 17] + 18988) = 0x1231c]  = 0x4a2c
+        0x0001207c:    e0230893    ..#.    MLA      r3,r3,r8,r0
+        0x00012080:    e1a0a000    ....    MOV      r10,r0
+        0x00012084:    e0822103    .!..    ADD      r2,r2,r3,LSL #2
+        0x00012088:    e5923004    .0..    LDR      r3,[r2,#4]
+        0x0001208c:    e3130008    ....    TST      r3,#8
+        0x00012090:    03e00003    ....    MVNEQ    r0,#3
+        0x00012094:    0a00009e    ....    BEQ      {pc} + 0x280  ; 0x12314
+        0x00012098:    e1a00008    ....    MOV      r0,r8
+        0x0001209c:    e1a0100a    ....    MOV      r1,r10
+        0x000120a0:    ebfffbed    ....    BL       {pc} - 0x1044  ; 0x1105c
+        0x000120a4:    e5906000    .`..    LDR      r6,[r0,#0]
+        0x000120a8:    e3500000    ..P.    CMP      r0,#0
+        0x000120ac:    e5907004    .p..    LDR      r7,[r0,#4]
+        0x000120b0:    e1a04000    .@..    MOV      r4,r0
+        0x000120b4:    e5962008    . ..    LDR      r2,[r6,#8]
+        0x000120b8:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x000120bc:    e5922004    . ..    LDR      r2,[r2,#4]
+        0x000120c0:    e5939004    ....    LDR      r9,[r3,#4]
+        0x000120c4:    e50b2084    . ..    STR      r2,[r11,#-0x84]
+        0x000120c8:    03e02000    . ..    MVNEQ    r2,#0
+        0x000120cc:    050b2080    . ..    STREQ    r2,[r11,#-0x80]
+        0x000120d0:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x120fc
+        0x000120d4:    e1a01000    ....    MOV      r1,r0
+        0x000120d8:    e1a00008    ....    MOV      r0,r8
+        0x000120dc:    ebfffbf3    ....    BL       {pc} - 0x102c  ; 0x110b0
+        0x000120e0:    e5943008    .0..    LDR      r3,[r4,#8]
+        0x000120e4:    e1a00003    ....    MOV      r0,r3
+        0x000120e8:    e5933004    .0..    LDR      r3,[r3,#4]
+        0x000120ec:    e50b3080    .0..    STR      r3,[r11,#-0x80]
+        0x000120f0:    ebfffffe    ....    BL       OSAL_free  ; 0x322c Section #1
+        0x000120f4:    e1a00004    ....    MOV      r0,r4
+        0x000120f8:    ebfffffe    ....    BL       OSAL_free  ; 0x322c Section #1
+        0x000120fc:    e15a0009    ..Z.    CMP      r10,r9
+        0x00012100:    1a000011    ....    BNE      {pc} + 0x4c  ; 0x1214c
+        0x00012104:    e59fc214    ....    LDR      r12,[pc,#532]  ; [0x12320] = 0xfffff830
+        0x00012108:    e3a04000    .@..    MOV      r4,#0
+        0x0001210c:    e3a0e008    ....    MOV      r14,#8
+        0x00012110:    e1a0100a    ....    MOV      r1,r10
+        0x00012114:    e1a02004    . ..    MOV      r2,r4
+        0x00012118:    e1a00008    ....    MOV      r0,r8
+        0x0001211c:    e50bc03c    <...    STR      r12,[r11,#-0x3c]
+        0x00012120:    e24b3078    x0K.    SUB      r3,r11,#0x78
+        0x00012124:    e3a0c00a    ....    MOV      r12,#0xa
+        0x00012128:    e50be034    4...    STR      r14,[r11,#-0x34]
+        0x0001212c:    e50bc064    d...    STR      r12,[r11,#-0x64]
+        0x00012130:    e50b4078    x@..    STR      r4,[r11,#-0x78]
+        0x00012134:    e50be06c    l...    STR      r14,[r11,#-0x6c]
+        0x00012138:    e50b4050    P@..    STR      r4,[r11,#-0x50]
+        0x0001213c:    e50b404c    L@..    STR      r4,[r11,#-0x4c]
+        0x00012140:    e50b4040    @@..    STR      r4,[r11,#-0x40]
+        0x00012144:    e50be038    8...    STR      r14,[r11,#-0x38]
+        0x00012148:    ea00005d    ]...    B        {pc} + 0x17c  ; 0x122c4
+        0x0001214c:    e35a0000    ..Z.    CMP      r10,#0
+        0x00012150:    1a00002d    -...    BNE      {pc} + 0xbc  ; 0x1220c
+        0x00012154:    e5963008    .0..    LDR      r3,[r6,#8]
+        0x00012158:    e24b5078    xPK.    SUB      r5,r11,#0x78
+        0x0001215c:    e3a01000    ....    MOV      r1,#0
+        0x00012160:    e1a00008    ....    MOV      r0,r8
+        0x00012164:    e3a04000    .@..    MOV      r4,#0
+        0x00012168:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x0001216c:    e50b3078    x0..    STR      r3,[r11,#-0x78]
+        0x00012170:    e5963008    .0..    LDR      r3,[r6,#8]
+        0x00012174:    e593302c    ,0..    LDR      r3,[r3,#0x2c]
+        0x00012178:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x0001217c:    e5963008    .0..    LDR      r3,[r6,#8]
+        0x00012180:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x00012184:    e50b3050    P0..    STR      r3,[r11,#-0x50]
+        0x00012188:    e5963008    .0..    LDR      r3,[r6,#8]
+        0x0001218c:    e593300c    .0..    LDR      r3,[r3,#0xc]
+        0x00012190:    e50b304c    L0..    STR      r3,[r11,#-0x4c]
+        0x00012194:    e5963008    .0..    LDR      r3,[r6,#8]
+        0x00012198:    e5933018    .0..    LDR      r3,[r3,#0x18]
+        0x0001219c:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x000121a0:    e5962008    . ..    LDR      r2,[r6,#8]
+        0x000121a4:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x000121a8:    e3530000    ..S.    CMP      r3,#0
+        0x000121ac:    02433e7d    }>C.    SUBEQ    r3,r3,#0x7d0
+        0x000121b0:    1592301c    .0..    LDRNE    r3,[r2,#0x1c]
+        0x000121b4:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x000121b8:    e1a03005    .0..    MOV      r3,r5
+        0x000121bc:    e5962008    . ..    LDR      r2,[r6,#8]
+        0x000121c0:    e5922020      ..    LDR      r2,[r2,#0x20]
+        0x000121c4:    e50b2038    8 ..    STR      r2,[r11,#-0x38]
+        0x000121c8:    e5962008    . ..    LDR      r2,[r6,#8]
+        0x000121cc:    e5922024    $ ..    LDR      r2,[r2,#0x24]
+        0x000121d0:    e50b2034    4 ..    STR      r2,[r11,#-0x34]
+        0x000121d4:    e5962000    . ..    LDR      r2,[r6,#0]
+        0x000121d8:    e5922008    . ..    LDR      r2,[r2,#8]
+        0x000121dc:    e5922004    . ..    LDR      r2,[r2,#4]
+        0x000121e0:    ebfffdae    ....    BL       {pc} - 0x940  ; 0x118a0
+        0x000121e4:    e59fc134    4...    LDR      r12,[pc,#308]  ; [0x12320] = 0xfffff830
+        0x000121e8:    e51b1084    ....    LDR      r1,[r11,#-0x84]
+        0x000121ec:    e1a02004    . ..    MOV      r2,r4
+        0x000121f0:    e1a03005    .0..    MOV      r3,r5
+        0x000121f4:    e1a00008    ....    MOV      r0,r8
+        0x000121f8:    e50bc03c    <...    STR      r12,[r11,#-0x3c]
+        0x000121fc:    e3a0c008    ....    MOV      r12,#8
+        0x00012200:    e50b4078    x@..    STR      r4,[r11,#-0x78]
+        0x00012204:    e50bc034    4...    STR      r12,[r11,#-0x34]
+        0x00012208:    ea000028    (...    B        {pc} + 0xa8  ; 0x122b0
+        0x0001220c:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x00012210:    e24b5078    xPK.    SUB      r5,r11,#0x78
+        0x00012214:    e1a00008    ....    MOV      r0,r8
+        0x00012218:    e5933028    (0..    LDR      r3,[r3,#0x28]
+        0x0001221c:    e50b3078    x0..    STR      r3,[r11,#-0x78]
+        0x00012220:    e5973008    .0..    LDR      r3,[r7,#8]
+        0x00012224:    e593302c    ,0..    LDR      r3,[r3,#0x2c]
+        0x00012228:    e50b306c    l0..    STR      r3,[r11,#-0x6c]
+        0x0001222c:    e5971008    ....    LDR      r1,[r7,#8]
+        0x00012230:    e5913008    .0..    LDR      r3,[r1,#8]
+        0x00012234:    e591200c    . ..    LDR      r2,[r1,#0xc]
+        0x00012238:    e50b3050    P0..    STR      r3,[r11,#-0x50]
+        0x0001223c:    e5913018    .0..    LDR      r3,[r1,#0x18]
+        0x00012240:    e50b204c    L ..    STR      r2,[r11,#-0x4c]
+        0x00012244:    e51b2084    . ..    LDR      r2,[r11,#-0x84]
+        0x00012248:    e50b3040    @0..    STR      r3,[r11,#-0x40]
+        0x0001224c:    e5943008    .0..    LDR      r3,[r4,#8]
+        0x00012250:    e3a04000    .@..    MOV      r4,#0
+        0x00012254:    e5933000    .0..    LDR      r3,[r3,#0]
+        0x00012258:    e3530000    ..S.    CMP      r3,#0
+        0x0001225c:    02433e7d    }>C.    SUBEQ    r3,r3,#0x7d0
+        0x00012260:    1591301c    .0..    LDRNE    r3,[r1,#0x1c]
+        0x00012264:    e1a01009    ....    MOV      r1,r9
+        0x00012268:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x0001226c:    e1a03005    .0..    MOV      r3,r5
+        0x00012270:    e597c008    ....    LDR      r12,[r7,#8]
+        0x00012274:    e59cc020     ...    LDR      r12,[r12,#0x20]
+        0x00012278:    e50bc038    8...    STR      r12,[r11,#-0x38]
+        0x0001227c:    e597c008    ....    LDR      r12,[r7,#8]
+        0x00012280:    e59cc024    $...    LDR      r12,[r12,#0x24]
+        0x00012284:    e50bc034    4...    STR      r12,[r11,#-0x34]
+        0x00012288:    ebfffd84    ....    BL       {pc} - 0x9e8  ; 0x118a0
+        0x0001228c:    e59fc08c    ....    LDR      r12,[pc,#140]  ; [0x12320] = 0xfffff830
+        0x00012290:    e1a0100a    ....    MOV      r1,r10
+        0x00012294:    e1a02004    . ..    MOV      r2,r4
+        0x00012298:    e1a03005    .0..    MOV      r3,r5
+        0x0001229c:    e1a00008    ....    MOV      r0,r8
+        0x000122a0:    e50b4078    x@..    STR      r4,[r11,#-0x78]
+        0x000122a4:    e50bc03c    <...    STR      r12,[r11,#-0x3c]
+        0x000122a8:    e3a0c008    ....    MOV      r12,#8
+        0x000122ac:    e50bc034    4...    STR      r12,[r11,#-0x34]
+        0x000122b0:    e50bc06c    l...    STR      r12,[r11,#-0x6c]
+        0x000122b4:    e50b4050    P@..    STR      r4,[r11,#-0x50]
+        0x000122b8:    e50b404c    L@..    STR      r4,[r11,#-0x4c]
+        0x000122bc:    e50b4040    @@..    STR      r4,[r11,#-0x40]
+        0x000122c0:    e50bc038    8...    STR      r12,[r11,#-0x38]
+        0x000122c4:    ebfffd75    u...    BL       {pc} - 0xa24  ; 0x118a0
+        0x000122c8:    e24b0030    0.K.    SUB      r0,r11,#0x30
+        0x000122cc:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x000122d0:    e51b2080    . ..    LDR      r2,[r11,#-0x80]
+        0x000122d4:    e59fc040    @...    LDR      r12,[pc,#64]   ; [([Section 17] + 18988) = 0x1231c]  = 0x4a2c
+        0x000122d8:    e3a03046    F0..    MOV      r3,#0x46
+        0x000122dc:    e3a01f46    F...    MOV      r1,#0x118
+        0x000122e0:    e51b0030    0...    LDR      r0,[r11,#-0x30]
+        0x000122e4:    e0232893    .(#.    MLA      r3,r3,r8,r2
+        0x000122e8:    e021c891    ..!.    MLA      r1,r1,r8,r12
+        0x000122ec:    e08cc103    ....    ADD      r12,r12,r3,LSL #2
+        0x000122f0:    e2811090    ....    ADD      r1,r1,#0x90
+        0x000122f4:    e59c3004    .0..    LDR      r3,[r12,#4]
+        0x000122f8:    e5d12002    . ..    LDRB     r2,[r1,#2]
+        0x000122fc:    e3c33008    .0..    BIC      r3,r3,#8
+        0x00012300:    e58c3004    .0..    STR      r3,[r12,#4]
+        0x00012304:    e2422001    . B.    SUB      r2,r2,#1
+        0x00012308:    e5c12002    . ..    STRB     r2,[r1,#2]
+        0x0001230c:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00012310:    e3a00000    ....    MOV      r0,#0
+        0x00012314:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00012318:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x0001231c:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+        0x00012320:    fffff830    0...    DCD    4294965296
+    BSP_disp_sprite_exit
+    $a
+        0x00012324:    e1a0c00d    ....    MOV      r12,r13
+        0x00012328:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0001232c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012330:    e3a02f46    F/..    MOV      r2,#0x118
+        0x00012334:    e59f1074    t...    LDR      r1,[pc,#116]  ; [([Section 17] + 18988) = 0x123b0]  = 0x4a2c
+        0x00012338:    e0020092    ....    MUL      r2,r2,r0
+        0x0001233c:    e3a04064    d@..    MOV      r4,#0x64
+        0x00012340:    e0813002    .0..    ADD      r3,r1,r2
+        0x00012344:    e283c004    ....    ADD      r12,r3,#4
+        0x00012348:    e3a03000    .0..    MOV      r3,#0
+        0x0001234c:    e7813002    .0..    STR      r3,[r1,r2]
+        0x00012350:    e58c4090    .@..    STR      r4,[r12,#0x90]
+        0x00012354:    e2844001    .@..    ADD      r4,r4,#1
+        0x00012358:    e3540084    ..T.    CMP      r4,#0x84
+        0x0001235c:    e3a01000    ....    MOV      r1,#0
+        0x00012360:    e58c1000    ....    STR      r1,[r12,#0]
+        0x00012364:    e28cc004    ....    ADD      r12,r12,#4
+        0x00012368:    1afffff8    ....    BNE      {pc} - 0x18  ; 0x12350
+        0x0001236c:    e59f203c    < ..    LDR      r2,[pc,#60]   ; [([Section 17] + 18988) = 0x123b0]  = 0x4a2c
+        0x00012370:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00012374:    e0232093    . #.    MLA      r3,r3,r0,r2
+        0x00012378:    e5935114    .Q..    LDR      r5,[r3,#0x114]
+        0x0001237c:    e5953004    .0..    LDR      r3,[r5,#4]
+        0x00012380:    e5831000    ....    STR      r1,[r3,#0]
+        0x00012384:    ea000005    ....    B        {pc} + 0x1c  ; 0x123a0
+        0x00012388:    e5950008    ....    LDR      r0,[r5,#8]
+        0x0001238c:    e5954000    .@..    LDR      r4,[r5,#0]
+        0x00012390:    ebfffffe    ....    BL       OSAL_free  ; 0x322c Section #1
+        0x00012394:    e1a00005    ....    MOV      r0,r5
+        0x00012398:    ebfffffe    ....    BL       OSAL_free  ; 0x322c Section #1
+        0x0001239c:    e1a05004    .P..    MOV      r5,r4
+        0x000123a0:    e3550000    ..U.    CMP      r5,#0
+        0x000123a4:    1afffff7    ....    BNE      {pc} - 0x1c  ; 0x12388
+        0x000123a8:    e1a00005    ....    MOV      r0,r5
+        0x000123ac:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000123b0:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_block_request
+    $a
+        0x000123b4:    e1a0c00d    ....    MOV      r12,r13
+        0x000123b8:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x000123bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000123c0:    e24dd054    T.M.    SUB      r13,r13,#0x54
+        0x000123c4:    e1a0a001    ....    MOV      r10,r1
+        0x000123c8:    e5911040    @...    LDR      r1,[r1,#0x40]
+        0x000123cc:    e1a09000    ....    MOV      r9,r0
+        0x000123d0:    e3510008    ..Q.    CMP      r1,#8
+        0x000123d4:    13510010    ..Q.    CMPNE    r1,#0x10
+        0x000123d8:    0a00000a    ....    BEQ      {pc} + 0x30  ; 0x12408
+        0x000123dc:    e3510020     .Q.    CMP      r1,#0x20
+        0x000123e0:    0a000008    ....    BEQ      {pc} + 0x28  ; 0x12408
+        0x000123e4:    e3510040    @.Q.    CMP      r1,#0x40
+        0x000123e8:    0a000006    ....    BEQ      {pc} + 0x20  ; 0x12408
+        0x000123ec:    e3510080    ..Q.    CMP      r1,#0x80
+        0x000123f0:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x12408
+        0x000123f4:    e3510c01    ..Q.    CMP      r1,#0x100
+        0x000123f8:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x12408
+        0x000123fc:    e3510c02    ..Q.    CMP      r1,#0x200
+        0x00012400:    159f0240    @...    LDRNE    r0,[pc,#576]  ; [([Section 10] + 3231) = 0x12648]  = 0xc9f
+        0x00012404:    1a000016    ....    BNE      {pc} + 0x60  ; 0x12464
+        0x00012408:    e59a1044    D...    LDR      r1,[r10,#0x44]
+        0x0001240c:    e3510008    ..Q.    CMP      r1,#8
+        0x00012410:    13510010    ..Q.    CMPNE    r1,#0x10
+        0x00012414:    0a000009    ....    BEQ      {pc} + 0x2c  ; 0x12440
+        0x00012418:    e3510020     .Q.    CMP      r1,#0x20
+        0x0001241c:    0a000007    ....    BEQ      {pc} + 0x24  ; 0x12440
+        0x00012420:    e3510040    @.Q.    CMP      r1,#0x40
+        0x00012424:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x12440
+        0x00012428:    e3510080    ..Q.    CMP      r1,#0x80
+        0x0001242c:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x12440
+        0x00012430:    e3510c01    ..Q.    CMP      r1,#0x100
+        0x00012434:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x12440
+        0x00012438:    e3510c02    ..Q.    CMP      r1,#0x200
+        0x0001243c:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x12458
+        0x00012440:    e59f2204    ."..    LDR      r2,[pc,#516]  ; [([Section 17] + 18988) = 0x1264c]  = 0x4a2c
+        0x00012444:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00012448:    e3a05000    .P..    MOV      r5,#0
+        0x0001244c:    e0232993    .)#.    MLA      r3,r3,r9,r2
+        0x00012450:    e2832004    . ..    ADD      r2,r3,#4
+        0x00012454:    ea000005    ....    B        {pc} + 0x1c  ; 0x12470
+        0x00012458:    e3510b01    ..Q.    CMP      r1,#0x400
+        0x0001245c:    0afffff7    ....    BEQ      {pc} - 0x1c  ; 0x12440
+        0x00012460:    e59f01e8    ....    LDR      r0,[pc,#488]  ; [([Section 10] + 3287) = 0x12650]  = 0xcd7
+        0x00012464:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00012468:    e3a00000    ....    MOV      r0,#0
+        0x0001246c:    ea000073    s...    B        {pc} + 0x1d4  ; 0x12640
+        0x00012470:    e5923000    .0..    LDR      r3,[r2,#0]
+        0x00012474:    e2822004    . ..    ADD      r2,r2,#4
+        0x00012478:    e2136008    .`..    ANDS     r6,r3,#8
+        0x0001247c:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x12490
+        0x00012480:    e2855001    .P..    ADD      r5,r5,#1
+        0x00012484:    e3550020     .U.    CMP      r5,#0x20
+        0x00012488:    1afffff8    ....    BNE      {pc} - 0x18  ; 0x12470
+        0x0001248c:    eafffff5    ....    B        {pc} - 0x24  ; 0x12468
+        0x00012490:    e3750006    ..u.    CMN      r5,#6
+        0x00012494:    0afffff3    ....    BEQ      {pc} - 0x2c  ; 0x12468
+        0x00012498:    e3a00034    4...    MOV      r0,#0x34
+        0x0001249c:    ebfffffe    ....    BL       OSAL_malloc  ; 0x3218 Section #1
+        0x000124a0:    e1a04000    .@..    MOV      r4,r0
+        0x000124a4:    e5806000    .`..    STR      r6,[r0,#0]
+        0x000124a8:    e5845004    .P..    STR      r5,[r4,#4]
+        0x000124ac:    e3a0000c    ....    MOV      r0,#0xc
+        0x000124b0:    e59a3028    (0..    LDR      r3,[r10,#0x28]
+        0x000124b4:    e59a202c    , ..    LDR      r2,[r10,#0x2c]
+        0x000124b8:    e59ac040    @...    LDR      r12,[r10,#0x40]
+        0x000124bc:    e5843008    .0..    STR      r3,[r4,#8]
+        0x000124c0:    e584200c    . ..    STR      r2,[r4,#0xc]
+        0x000124c4:    e59a3038    80..    LDR      r3,[r10,#0x38]
+        0x000124c8:    e59a203c    < ..    LDR      r2,[r10,#0x3c]
+        0x000124cc:    e59a1044    D...    LDR      r1,[r10,#0x44]
+        0x000124d0:    e5843018    .0..    STR      r3,[r4,#0x18]
+        0x000124d4:    e584201c    . ..    STR      r2,[r4,#0x1c]
+        0x000124d8:    e584c020     ...    STR      r12,[r4,#0x20]
+        0x000124dc:    e5841024    $...    STR      r1,[r4,#0x24]
+        0x000124e0:    e59a3000    .0..    LDR      r3,[r10,#0]
+        0x000124e4:    e5843028    (0..    STR      r3,[r4,#0x28]
+        0x000124e8:    e59a300c    .0..    LDR      r3,[r10,#0xc]
+        0x000124ec:    e584302c    ,0..    STR      r3,[r4,#0x2c]
+        0x000124f0:    ebfffffe    ....    BL       OSAL_malloc  ; 0x3218 Section #1
+        0x000124f4:    e3500000    ..P.    CMP      r0,#0
+        0x000124f8:    e1a08000    ....    MOV      r8,r0
+        0x000124fc:    e5804008    .@..    STR      r4,[r0,#8]
+        0x00012500:    e5880004    ....    STR      r0,[r8,#4]
+        0x00012504:    e5880000    ....    STR      r0,[r8,#0]
+        0x00012508:    0affffd6    ....    BEQ      {pc} - 0xa0  ; 0x12468
+        0x0001250c:    e59f3138    81..    LDR      r3,[pc,#312]  ; [([Section 17] + 18988) = 0x1264c]  = 0x4a2c
+        0x00012510:    e3a02f46    F/..    MOV      r2,#0x118
+        0x00012514:    e0233992    .9#.    MLA      r3,r2,r9,r3
+        0x00012518:    e5932114    .!..    LDR      r2,[r3,#0x114]
+        0x0001251c:    e3520000    ..R.    CMP      r2,#0
+        0x00012520:    05830114    ....    STREQ    r0,[r3,#0x114]
+        0x00012524:    15882000    . ..    STRNE    r2,[r8,#0]
+        0x00012528:    15923004    .0..    LDRNE    r3,[r2,#4]
+        0x0001252c:    01a00000    ....    MOVEQ    r0,r0
+        0x00012530:    11a00008    ....    MOVNE    r0,r8
+        0x00012534:    15883004    .0..    STRNE    r3,[r8,#4]
+        0x00012538:    15838000    ....    STRNE    r8,[r3,#0]
+        0x0001253c:    15828004    ....    STRNE    r8,[r2,#4]
+        0x00012540:    e3580000    ..X.    CMP      r8,#0
+        0x00012544:    0a00003d    =...    BEQ      {pc} + 0xfc  ; 0x12640
+        0x00012548:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x0001254c:    e1a0100a    ....    MOV      r1,r10
+        0x00012550:    e59ac000    ....    LDR      r12,[r10,#0]
+        0x00012554:    e3a02048    H ..    MOV      r2,#0x48
+        0x00012558:    e24b0078    x.K.    SUB      r0,r11,#0x78
+        0x0001255c:    e5936004    .`..    LDR      r6,[r3,#4]
+        0x00012560:    e583c028    (...    STR      r12,[r3,#0x28]
+        0x00012564:    e598c008    ....    LDR      r12,[r8,#8]
+        0x00012568:    e59a300c    .0..    LDR      r3,[r10,#0xc]
+        0x0001256c:    e58c302c    ,0..    STR      r3,[r12,#0x2c]
+        0x00012570:    e598c008    ....    LDR      r12,[r8,#8]
+        0x00012574:    e59a3028    (0..    LDR      r3,[r10,#0x28]
+        0x00012578:    e59a402c    ,@..    LDR      r4,[r10,#0x2c]
+        0x0001257c:    e59a7040    @p..    LDR      r7,[r10,#0x40]
+        0x00012580:    e58c3008    .0..    STR      r3,[r12,#8]
+        0x00012584:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x00012588:    e59ae038    8...    LDR      r14,[r10,#0x38]
+        0x0001258c:    e59a5044    DP..    LDR      r5,[r10,#0x44]
+        0x00012590:    e583400c    .@..    STR      r4,[r3,#0xc]
+        0x00012594:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x00012598:    e59ac03c    <...    LDR      r12,[r10,#0x3c]
+        0x0001259c:    e583e018    ....    STR      r14,[r3,#0x18]
+        0x000125a0:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x000125a4:    e583c01c    ....    STR      r12,[r3,#0x1c]
+        0x000125a8:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x000125ac:    e5837020     p..    STR      r7,[r3,#0x20]
+        0x000125b0:    e5983008    .0..    LDR      r3,[r8,#8]
+        0x000125b4:    e5835024    $P..    STR      r5,[r3,#0x24]
+        0x000125b8:    ebfffffe    ....    BL       memcpy  ;
+        0x000125bc:    e59f3090    .0..    LDR      r3,[pc,#144]  ; [0x12654] = 0xfffff830
+        0x000125c0:    e6ef2076    v ..    UXTB     r2,r6
+        0x000125c4:    e1a00009    ....    MOV      r0,r9
+        0x000125c8:    e50b303c    <0..    STR      r3,[r11,#-0x3c]
+        0x000125cc:    e5983004    .0..    LDR      r3,[r8,#4]
+        0x000125d0:    e5933008    .0..    LDR      r3,[r3,#8]
+        0x000125d4:    e5d31004    ....    LDRB     r1,[r3,#4]
+        0x000125d8:    ebfffffe    ....    BL       DE_BE_Sprite_Block_Set_Next_Id  ; 0x398c Section #1
+        0x000125dc:    e1a01006    ....    MOV      r1,r6
+        0x000125e0:    e1a0300a    .0..    MOV      r3,r10
+        0x000125e4:    e3a02000    . ..    MOV      r2,#0
+        0x000125e8:    e1a00009    ....    MOV      r0,r9
+        0x000125ec:    ebfffcab    ....    BL       {pc} - 0xd4c  ; 0x118a0
+        0x000125f0:    e24b0030    0.K.    SUB      r0,r11,#0x30
+        0x000125f4:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x000125f8:    e59fc04c    L...    LDR      r12,[pc,#76]   ; [([Section 17] + 18988) = 0x1264c]  = 0x4a2c
+        0x000125fc:    e3a03046    F0..    MOV      r3,#0x46
+        0x00012600:    e3a01f46    F...    MOV      r1,#0x118
+        0x00012604:    e0236993    .i#.    MLA      r3,r3,r9,r6
+        0x00012608:    e51b0030    0...    LDR      r0,[r11,#-0x30]
+        0x0001260c:    e021c991    ..!.    MLA      r1,r1,r9,r12
+        0x00012610:    e08cc103    ....    ADD      r12,r12,r3,LSL #2
+        0x00012614:    e2811090    ....    ADD      r1,r1,#0x90
+        0x00012618:    e59c3004    .0..    LDR      r3,[r12,#4]
+        0x0001261c:    e5d12002    . ..    LDRB     r2,[r1,#2]
+        0x00012620:    e3833008    .0..    ORR      r3,r3,#8
+        0x00012624:    e58c3004    .0..    STR      r3,[r12,#4]
+        0x00012628:    e2822001    . ..    ADD      r2,r2,#1
+        0x0001262c:    e5c12002    . ..    STRB     r2,[r1,#2]
+        0x00012630:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00012634:    e1a00009    ....    MOV      r0,r9
+        0x00012638:    e1a01006    ....    MOV      r1,r6
+        0x0001263c:    ebfffa66    f...    BL       {pc} - 0x1660  ; 0x10fdc
+        0x00012640:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x00012644:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x00012648:    00000c9f    ....    DCD    3231 ; [Section 10]
+        0x0001264c:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+        0x00012650:    00000cd7    ....    DCD    3287 ; [Section 10]
+        0x00012654:    fffff830    0...    DCD    4294965296
+    BSP_disp_sprite_set_palette_table
+    $a
+        0x00012658:    e1a0c00d    ....    MOV      r12,r13
+        0x0001265c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00012660:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012664:    e3510000    ..Q.    CMP      r1,#0
+        0x00012668:    0a000002    ....    BEQ      {pc} + 0x10  ; 0x12678
+        0x0001266c:    e083c002    ....    ADD      r12,r3,r2
+        0x00012670:    e35c0b01    ..\.    CMP      r12,#0x400
+        0x00012674:    9a000003    ....    BLS      {pc} + 0x14  ; 0x12688
+        0x00012678:    e59f0014    ....    LDR      r0,[pc,#20]   ; [([Section 10] + 3344) = 0x12694]  = 0xd10
+        0x0001267c:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00012680:    e3e00001    ....    MVN      r0,#1
+        0x00012684:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00012688:    ebfffffe    ....    BL       DE_BE_Sprite_Set_Palette_Table  ; 0x39b4 Section #1
+        0x0001268c:    e3a00000    ....    MOV      r0,#0
+        0x00012690:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00012694:    00000d10    ....    DCD    3344 ; [Section 10]
+    BSP_disp_sprite_set_format
+    $a
+        0x00012698:    e1a0c00d    ....    MOV      r12,r13
+        0x0001269c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000126a0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000126a4:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [([Section 17] + 18988) = 0x126d8]  = 0x4a2c
+        0x000126a8:    e3a0cf46    F...    MOV      r12,#0x118
+        0x000126ac:    e1a0e002    ....    MOV      r14,r2
+        0x000126b0:    e1a04001    .@..    MOV      r4,r1
+        0x000126b4:    e251200a    . Q.    SUBS     r2,r1,#0xa
+        0x000126b8:    13a02001    . ..    MOVNE    r2,#1
+        0x000126bc:    e6ef107e    ~...    UXTB     r1,r14
+        0x000126c0:    e023309c    .0#.    MLA      r3,r12,r0,r3
+        0x000126c4:    e583e088    ....    STR      r14,[r3,#0x88]
+        0x000126c8:    e583408c    .@..    STR      r4,[r3,#0x8c]
+        0x000126cc:    ebfffffe    ....    BL       DE_BE_Sprite_Set_Format  ; 0x3814 Section #1
+        0x000126d0:    e3a00000    ....    MOV      r0,#0
+        0x000126d4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000126d8:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_set_alpha_vale
+    $a
+        0x000126dc:    e1a0c00d    ....    MOV      r12,r13
+        0x000126e0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000126e4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000126e8:    e6ef5071    qP..    UXTB     r5,r1
+        0x000126ec:    e1a04000    .@..    MOV      r4,r0
+        0x000126f0:    e1a01005    ....    MOV      r1,r5
+        0x000126f4:    ebfffffe    ....    BL       DE_BE_Sprite_Set_Global_Alpha  ; 0x3864 Section #1
+        0x000126f8:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [([Section 17] + 18988) = 0x12710]  = 0x4a2c
+        0x000126fc:    e3a02f46    F/..    MOV      r2,#0x118
+        0x00012700:    e3a00000    ....    MOV      r0,#0
+        0x00012704:    e0243492    .4$.    MLA      r4,r2,r4,r3
+        0x00012708:    e5c45091    .P..    STRB     r5,[r4,#0x91]
+        0x0001270c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00012710:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_alpha_disable
+    $a
+        0x00012714:    e1a0c00d    ....    MOV      r12,r13
+        0x00012718:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0001271c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012720:    e3a01000    ....    MOV      r1,#0
+        0x00012724:    e1a04000    .@..    MOV      r4,r0
+        0x00012728:    ebfffffe    ....    BL       DE_BE_Sprite_Global_Alpha_Enable  ; 0x3840 Section #1
+        0x0001272c:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 18988) = 0x12748]  = 0x4a2c
+        0x00012730:    e3a02f46    F/..    MOV      r2,#0x118
+        0x00012734:    e3a01000    ....    MOV      r1,#0
+        0x00012738:    e1a00001    ....    MOV      r0,r1
+        0x0001273c:    e0243492    .4$.    MLA      r4,r2,r4,r3
+        0x00012740:    e5c41090    ....    STRB     r1,[r4,#0x90]
+        0x00012744:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00012748:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_alpha_enable
+    $a
+        0x0001274c:    e1a0c00d    ....    MOV      r12,r13
+        0x00012750:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00012754:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012758:    e3a01001    ....    MOV      r1,#1
+        0x0001275c:    e1a04000    .@..    MOV      r4,r0
+        0x00012760:    ebfffffe    ....    BL       DE_BE_Sprite_Global_Alpha_Enable  ; 0x3840 Section #1
+        0x00012764:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [([Section 17] + 18988) = 0x12780]  = 0x4a2c
+        0x00012768:    e3a02f46    F/..    MOV      r2,#0x118
+        0x0001276c:    e3a00000    ....    MOV      r0,#0
+        0x00012770:    e0243492    .4$.    MLA      r4,r2,r4,r3
+        0x00012774:    e3a03001    .0..    MOV      r3,#1
+        0x00012778:    e5c43090    .0..    STRB     r3,[r4,#0x90]
+        0x0001277c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00012780:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_close
+    $a
+        0x00012784:    e1a0c00d    ....    MOV      r12,r13
+        0x00012788:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x0001278c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012790:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x00012794:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00012798:    e59f504c    LP..    LDR      r5,[pc,#76]   ; [([Section 17] + 18988) = 0x127ec]  = 0x4a2c
+        0x0001279c:    e0040093    ....    MUL      r4,r3,r0
+        0x000127a0:    e0856004    .`..    ADD      r6,r5,r4
+        0x000127a4:    e7953004    .0..    LDR      r3,[r5,r4]
+        0x000127a8:    e3130001    ....    TST      r3,#1
+        0x000127ac:    0a00000b    ....    BEQ      {pc} + 0x34  ; 0x127e0
+        0x000127b0:    e3a01000    ....    MOV      r1,#0
+        0x000127b4:    ebfffffe    ....    BL       DE_BE_Sprite_Enable  ; 0x37b8 Section #1
+        0x000127b8:    e24b0020     .K.    SUB      r0,r11,#0x20
+        0x000127bc:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x000127c0:    e2861080    ....    ADD      r1,r6,#0x80
+        0x000127c4:    e7952004    . ..    LDR      r2,[r5,r4]
+        0x000127c8:    e3a03000    .0..    MOV      r3,#0
+        0x000127cc:    e51b0020     ...    LDR      r0,[r11,#-0x20]
+        0x000127d0:    e5c13004    .0..    STRB     r3,[r1,#4]
+        0x000127d4:    e3c22001    . ..    BIC      r2,r2,#1
+        0x000127d8:    e7852004    . ..    STR      r2,[r5,r4]
+        0x000127dc:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x000127e0:    e3a00000    ....    MOV      r0,#0
+        0x000127e4:    e24bd018    ..K.    SUB      r13,r11,#0x18
+        0x000127e8:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x000127ec:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_open
+    $a
+        0x000127f0:    e1a0c00d    ....    MOV      r12,r13
+        0x000127f4:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x000127f8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000127fc:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x00012800:    e3a03f46    F?..    MOV      r3,#0x118
+        0x00012804:    e59f5048    HP..    LDR      r5,[pc,#72]   ; [([Section 17] + 18988) = 0x12854]  = 0x4a2c
+        0x00012808:    e0040093    ....    MUL      r4,r3,r0
+        0x0001280c:    e0856004    .`..    ADD      r6,r5,r4
+        0x00012810:    e7953004    .0..    LDR      r3,[r5,r4]
+        0x00012814:    e3530000    ..S.    CMP      r3,#0
+        0x00012818:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x12848
+        0x0001281c:    e3a01001    ....    MOV      r1,#1
+        0x00012820:    ebfffffe    ....    BL       DE_BE_Sprite_Enable  ; 0x37b8 Section #1
+        0x00012824:    e24b0020     .K.    SUB      r0,r11,#0x20
+        0x00012828:    ebfffffe    ....    BL       OSAL_IrqLock  ; 0x31f8 Section #1
+        0x0001282c:    e7952004    . ..    LDR      r2,[r5,r4]
+        0x00012830:    e3a03001    .0..    MOV      r3,#1
+        0x00012834:    e51b0020     ...    LDR      r0,[r11,#-0x20]
+        0x00012838:    e5c63084    .0..    STRB     r3,[r6,#0x84]
+        0x0001283c:    e1822003    . ..    ORR      r2,r2,r3
+        0x00012840:    e7852004    . ..    STR      r2,[r5,r4]
+        0x00012844:    ebfffffe    ....    BL       OSAL_IrqUnLock  ; 0x3208 Section #1
+        0x00012848:    e3a00000    ....    MOV      r0,#0
+        0x0001284c:    e24bd018    ..K.    SUB      r13,r11,#0x18
+        0x00012850:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x00012854:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    BSP_disp_sprite_init
+    $a
+        0x00012858:    e1a0c00d    ....    MOV      r12,r13
+        0x0001285c:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00012860:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012864:    e3a01f46    F...    MOV      r1,#0x118
+        0x00012868:    e59f603c    <`..    LDR      r6,[pc,#60]   ; [([Section 17] + 18988) = 0x128ac]  = 0x4a2c
+        0x0001286c:    e0050091    ....    MUL      r5,r1,r0
+        0x00012870:    e0864005    .@..    ADD      r4,r6,r5
+        0x00012874:    e1a00004    ....    MOV      r0,r4
+        0x00012878:    e2844004    .@..    ADD      r4,r4,#4
+        0x0001287c:    ebfffffe    ....    BL       __memzero  ;
+        0x00012880:    e3a02064    d ..    MOV      r2,#0x64
+        0x00012884:    e3a03000    .0..    MOV      r3,#0
+        0x00012888:    e7863005    .0..    STR      r3,[r6,r5]
+        0x0001288c:    e5842090    . ..    STR      r2,[r4,#0x90]
+        0x00012890:    e2822001    . ..    ADD      r2,r2,#1
+        0x00012894:    e3520084    ..R.    CMP      r2,#0x84
+        0x00012898:    e3a00000    ....    MOV      r0,#0
+        0x0001289c:    e5840000    ....    STR      r0,[r4,#0]
+        0x000128a0:    e2844004    .@..    ADD      r4,r4,#4
+        0x000128a4:    1afffff8    ....    BNE      {pc} - 0x18  ; 0x1288c
+        0x000128a8:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x000128ac:    00004a2c    ,J..    DCD    18988 ; [Section 17]
+    Disp_Switch_Dram_Mode
+    $a
+        0x000128b0:    e1a0c00d    ....    MOV      r12,r13
+        0x000128b4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000128b8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000128bc:    e3a00000    ....    MOV      r0,#0
+        0x000128c0:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_tv_get_mode
+        0x000128c4:    e1a0c00d    ....    MOV      r12,r13
+        0x000128c8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000128cc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000128d0:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0x128e0] = 0
+        0x000128d4:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x000128d8:    e5930228    (...    LDR      r0,[r3,#0x228]
+        0x000128dc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000128e0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_tv_get_dac_source
+    $a
+        0x000128e4:    e1a0c00d    ....    MOV      r12,r13
+        0x000128e8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000128ec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000128f0:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [gdisp = 0x12904] = 0
+        0x000128f4:    e0811380    ....    ADD      r1,r1,r0,LSL #7
+        0x000128f8:    e281108c    ....    ADD      r1,r1,#0x8c
+        0x000128fc:    e7930101    ....    LDR      r0,[r3,r1,LSL #2]
+        0x00012900:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00012904:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_tv_set_src
+    $a
+        0x00012908:    e1a0c00d    ....    MOV      r12,r13
+        0x0001290c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00012910:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012914:    e3510001    ..Q.    CMP      r1,#1
+        0x00012918:    e1a03001    .0..    MOV      r3,r1
+        0x0001291c:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x12930
+        0x00012920:    33a01000    ...3    MOVCC    r1,#0
+        0x00012924:    3a000001    ...:    BCC      {pc} + 0xc  ; 0x12930
+        0x00012928:    e3530005    ..S.    CMP      r3,#5
+        0x0001292c:    1a000002    ....    BNE      {pc} + 0x10  ; 0x1293c
+        0x00012930:    ebfffffe    ....    BL       TCON1_select_src  ; 0x8810 Section #1
+        0x00012934:    e3a00000    ....    MOV      r0,#0
+        0x00012938:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x0001293c:    e59f0008    ....    LDR      r0,[pc,#8]    ; [([Section 10] + 3395) = 0x1294c]  = 0xd43
+        0x00012940:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00012944:    e3e00004    ....    MVN      r0,#4
+        0x00012948:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0001294c:    00000d43    C...    DCD    3395 ; [Section 10]
+    BSP_disp_tv_set_mode
+    $a
+        0x00012950:    e1a0c00d    ....    MOV      r12,r13
+        0x00012954:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00012958:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0001295c:    e3510016    ..Q.    CMP      r1,#0x16
+        0x00012960:    e1a02000    . ..    MOV      r2,r0
+        0x00012964:    9a000003    ....    BLS      {pc} + 0x14  ; 0x12978
+        0x00012968:    e59f0024    $...    LDR      r0,[pc,#36]   ; [([Section 10] + 3445) = 0x12994]  = 0xd75
+        0x0001296c:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00012970:    e3e00000    ....    MVN      r0,#0
+        0x00012974:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00012978:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [gdisp = 0x12998] = 0
+        0x0001297c:    e3a00000    ....    MOV      r0,#0
+        0x00012980:    e0833482    .4..    ADD      r3,r3,r2,LSL #9
+        0x00012984:    e3a02002    . ..    MOV      r2,#2
+        0x00012988:    e5831228    (...    STR      r1,[r3,#0x228]
+        0x0001298c:    e5832220     "..    STR      r2,[r3,#0x220]
+        0x00012990:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00012994:    00000d75    u...    DCD    3445 ; [Section 10]
+        0x00012998:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_tv_auto_check_disable
+    $a
+        0x0001299c:    e1a0c00d    ....    MOV      r12,r13
+        0x000129a0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000129a4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000129a8:    e3a01000    ....    MOV      r1,#0
+        0x000129ac:    e1a04000    .@..    MOV      r4,r0
+        0x000129b0:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x000129b4:    e1a00004    ....    MOV      r0,r4
+        0x000129b8:    e3a01001    ....    MOV      r1,#1
+        0x000129bc:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x000129c0:    e1a00004    ....    MOV      r0,r4
+        0x000129c4:    e3a01002    ....    MOV      r1,#2
+        0x000129c8:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x000129cc:    e1a00004    ....    MOV      r0,r4
+        0x000129d0:    e3a01003    ....    MOV      r1,#3
+        0x000129d4:    ebfffffe    ....    BL       TVE_dac_autocheck_disable  ; 0xa37c Section #1
+        0x000129d8:    e3a00000    ....    MOV      r0,#0
+        0x000129dc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    BSP_disp_tv_auto_check_enable
+        0x000129e0:    e1a0c00d    ....    MOV      r12,r13
+        0x000129e4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x000129e8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000129ec:    e3a01000    ....    MOV      r1,#0
+        0x000129f0:    e1a04000    .@..    MOV      r4,r0
+        0x000129f4:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x000129f8:    e1a00004    ....    MOV      r0,r4
+        0x000129fc:    e3a01001    ....    MOV      r1,#1
+        0x00012a00:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x00012a04:    e1a00004    ....    MOV      r0,r4
+        0x00012a08:    e3a01002    ....    MOV      r1,#2
+        0x00012a0c:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x00012a10:    e1a00004    ....    MOV      r0,r4
+        0x00012a14:    e3a01003    ....    MOV      r1,#3
+        0x00012a18:    ebfffffe    ....    BL       TVE_dac_autocheck_enable  ; 0xa328 Section #1
+        0x00012a1c:    e3a00000    ....    MOV      r0,#0
+        0x00012a20:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    BSP_disp_tv_set_dac_source
+        0x00012a24:    e1a0c00d    ....    MOV      r12,r13
+        0x00012a28:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x00012a2c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012a30:    e59f3064    d0..    LDR      r3,[pc,#100]  ; [gdisp = 0x12a9c] = 0
+        0x00012a34:    e1a04000    .@..    MOV      r4,r0
+        0x00012a38:    e1a06001    .`..    MOV      r6,r1
+        0x00012a3c:    e1a07002    .p..    MOV      r7,r2
+        0x00012a40:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x00012a44:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x00012a48:    e3130802    ....    TST      r3,#0x20000
+        0x00012a4c:    1a000000    ....    BNE      {pc} + 0x8  ; 0x12a54
+        0x00012a50:    ebfffffe    ....    BL       tve_clk_on  ; 0xadd0 Section #1
+        0x00012a54:    e1a00004    ....    MOV      r0,r4
+        0x00012a58:    e1a01006    ....    MOV      r1,r6
+        0x00012a5c:    e1a02007    . ..    MOV      r2,r7
+        0x00012a60:    ebfffffe    ....    BL       TVE_dac_set_source  ; 0xa4f4 Section #1
+        0x00012a64:    e59f3030    00..    LDR      r3,[pc,#48]   ; [gdisp = 0x12a9c] = 0
+        0x00012a68:    e0833484    .4..    ADD      r3,r3,r4,LSL #9
+        0x00012a6c:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x00012a70:    e3130802    ....    TST      r3,#0x20000
+        0x00012a74:    e1a05000    .P..    MOV      r5,r0
+        0x00012a78:    1a000001    ....    BNE      {pc} + 0xc  ; 0x12a84
+        0x00012a7c:    e1a00004    ....    MOV      r0,r4
+        0x00012a80:    ebfffffe    ....    BL       tve_clk_off  ; 0xad90 Section #1
+        0x00012a84:    e0863384    .3..    ADD      r3,r6,r4,LSL #7
+        0x00012a88:    e59f200c    . ..    LDR      r2,[pc,#12]   ; [gdisp = 0x12a9c] = 0
+        0x00012a8c:    e283308c    .0..    ADD      r3,r3,#0x8c
+        0x00012a90:    e1a00005    ....    MOV      r0,r5
+        0x00012a94:    e7827103    .q..    STR      r7,[r2,r3,LSL #2]
+        0x00012a98:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00012a9c:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_tv_get_dac_status
+    $a
+        0x00012aa0:    e1a0c00d    ....    MOV      r12,r13
+        0x00012aa4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00012aa8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012aac:    e59f304c    L0..    LDR      r3,[pc,#76]   ; [gdisp = 0x12b00] = 0
+        0x00012ab0:    e1a04000    .@..    MOV      r4,r0
+        0x00012ab4:    e1a05001    .P..    MOV      r5,r1
+        0x00012ab8:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x00012abc:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x00012ac0:    e3130802    ....    TST      r3,#0x20000
+        0x00012ac4:    1a000000    ....    BNE      {pc} + 0x8  ; 0x12acc
+        0x00012ac8:    ebfffffe    ....    BL       tve_clk_on  ; 0xadd0 Section #1
+        0x00012acc:    e1a01005    ....    MOV      r1,r5
+        0x00012ad0:    e1a00004    ....    MOV      r0,r4
+        0x00012ad4:    ebfffffe    ....    BL       TVE_get_dac_status  ; 0xa220 Section #1
+        0x00012ad8:    e59f3020     0..    LDR      r3,[pc,#32]   ; [gdisp = 0x12b00] = 0
+        0x00012adc:    e0833484    .4..    ADD      r3,r3,r4,LSL #9
+        0x00012ae0:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x00012ae4:    e3130802    ....    TST      r3,#0x20000
+        0x00012ae8:    e1a05000    .P..    MOV      r5,r0
+        0x00012aec:    1a000001    ....    BNE      {pc} + 0xc  ; 0x12af8
+        0x00012af0:    e1a00004    ....    MOV      r0,r4
+        0x00012af4:    ebfffffe    ....    BL       tve_clk_off  ; 0xad90 Section #1
+        0x00012af8:    e1a00005    ....    MOV      r0,r5
+        0x00012afc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00012b00:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_tv_get_interface
+    $a
+        0x00012b04:    e1a0c00d    ....    MOV      r12,r13
+        0x00012b08:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00012b0c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012b10:    e24dd008    ..M.    SUB      r13,r13,#8
+        0x00012b14:    e59f3114    .1..    LDR      r3,[pc,#276]  ; [gdisp = 0x12c30] = 0
+        0x00012b18:    e1a05000    .P..    MOV      r5,r0
+        0x00012b1c:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x00012b20:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x00012b24:    e3130802    ....    TST      r3,#0x20000
+        0x00012b28:    1a000000    ....    BNE      {pc} + 0x8  ; 0x12b30
+        0x00012b2c:    ebfffffe    ....    BL       tve_clk_on  ; 0xadd0 Section #1
+        0x00012b30:    e3a04000    .@..    MOV      r4,#0
+        0x00012b34:    e1a01004    ....    MOV      r1,r4
+        0x00012b38:    e1a00005    ....    MOV      r0,r5
+        0x00012b3c:    ebfffffe    ....    BL       TVE_get_dac_status  ; 0xa220 Section #1
+        0x00012b40:    e24b3018    .0K.    SUB      r3,r11,#0x18
+        0x00012b44:    e7c30004    ....    STRB     r0,[r3,r4]
+        0x00012b48:    e2844001    .@..    ADD      r4,r4,#1
+        0x00012b4c:    e3540004    ..T.    CMP      r4,#4
+        0x00012b50:    1afffff7    ....    BNE      {pc} - 0x1c  ; 0x12b34
+        0x00012b54:    e55b3018    .0[.    LDRB     r3,[r11,#-0x18]
+        0x00012b58:    e3530001    ..S.    CMP      r3,#1
+        0x00012b5c:    8a000008    ....    BHI      {pc} + 0x28  ; 0x12b84
+        0x00012b60:    e55b3017    .0[.    LDRB     r3,[r11,#-0x17]
+        0x00012b64:    e3530001    ..S.    CMP      r3,#1
+        0x00012b68:    8a000005    ....    BHI      {pc} + 0x1c  ; 0x12b84
+        0x00012b6c:    e55b3016    .0[.    LDRB     r3,[r11,#-0x16]
+        0x00012b70:    e3530001    ..S.    CMP      r3,#1
+        0x00012b74:    8a000002    ....    BHI      {pc} + 0x10  ; 0x12b84
+        0x00012b78:    e55b3015    .0[.    LDRB     r3,[r11,#-0x15]
+        0x00012b7c:    e3530001    ..S.    CMP      r3,#1
+        0x00012b80:    9a000003    ....    BLS      {pc} + 0x14  ; 0x12b94
+        0x00012b84:    e59f00a8    ....    LDR      r0,[pc,#168]  ; [([Section 10] + 3490) = 0x12c34]  = 0xda2
+        0x00012b88:    e3a04000    .@..    MOV      r4,#0
+        0x00012b8c:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x00012b90:    ea00001c    ....    B        {pc} + 0x78  ; 0x12c08
+        0x00012b94:    e59f309c    .0..    LDR      r3,[pc,#156]  ; [(gdisp + 80) = 0x12c38]  = 0x50
+        0x00012b98:    e3a02000    . ..    MOV      r2,#0
+        0x00012b9c:    e1a04002    .@..    MOV      r4,r2
+        0x00012ba0:    e0831485    ....    ADD      r1,r3,r5,LSL #9
+        0x00012ba4:    e59131e0    .1..    LDR      r3,[r1,#0x1e0]
+        0x00012ba8:    e3530000    ..S.    CMP      r3,#0
+        0x00012bac:    1a000004    ....    BNE      {pc} + 0x18  ; 0x12bc4
+        0x00012bb0:    e24b3018    .0K.    SUB      r3,r11,#0x18
+        0x00012bb4:    e7d33002    .0..    LDRB     r3,[r3,r2]
+        0x00012bb8:    e3530001    ..S.    CMP      r3,#1
+        0x00012bbc:    03844001    .@..    ORREQ    r4,r4,#1
+        0x00012bc0:    ea00000c    ....    B        {pc} + 0x38  ; 0x12bf8
+        0x00012bc4:    e3530004    ..S.    CMP      r3,#4
+        0x00012bc8:    1a000004    ....    BNE      {pc} + 0x18  ; 0x12be0
+        0x00012bcc:    e24b3018    .0K.    SUB      r3,r11,#0x18
+        0x00012bd0:    e7d33002    .0..    LDRB     r3,[r3,r2]
+        0x00012bd4:    e3530001    ..S.    CMP      r3,#1
+        0x00012bd8:    03844002    .@..    ORREQ    r4,r4,#2
+        0x00012bdc:    ea000005    ....    B        {pc} + 0x1c  ; 0x12bf8
+        0x00012be0:    e3530001    ..S.    CMP      r3,#1
+        0x00012be4:    1a000003    ....    BNE      {pc} + 0x14  ; 0x12bf8
+        0x00012be8:    e24b3018    .0K.    SUB      r3,r11,#0x18
+        0x00012bec:    e7d33002    .0..    LDRB     r3,[r3,r2]
+        0x00012bf0:    e3530001    ..S.    CMP      r3,#1
+        0x00012bf4:    03844004    .@..    ORREQ    r4,r4,#4
+        0x00012bf8:    e2822001    . ..    ADD      r2,r2,#1
+        0x00012bfc:    e2811004    ....    ADD      r1,r1,#4
+        0x00012c00:    e3520004    ..R.    CMP      r2,#4
+        0x00012c04:    1affffe6    ....    BNE      {pc} - 0x60  ; 0x12ba4
+        0x00012c08:    e59f3020     0..    LDR      r3,[pc,#32]   ; [gdisp = 0x12c30] = 0
+        0x00012c0c:    e0833485    .4..    ADD      r3,r3,r5,LSL #9
+        0x00012c10:    e5933050    P0..    LDR      r3,[r3,#0x50]
+        0x00012c14:    e3130802    ....    TST      r3,#0x20000
+        0x00012c18:    1a000001    ....    BNE      {pc} + 0xc  ; 0x12c24
+        0x00012c1c:    e1a00005    ....    MOV      r0,r5
+        0x00012c20:    ebfffffe    ....    BL       tve_clk_off  ; 0xad90 Section #1
+        0x00012c24:    e1a00004    ....    MOV      r0,r4
+        0x00012c28:    e24bd014    ..K.    SUB      r13,r11,#0x14
+        0x00012c2c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00012c30:    00000000    ....    DCD    0 ; gdisp
+        0x00012c34:    00000da2    ....    DCD    3490 ; [Section 10]
+        0x00012c38:    00000050    P...    DCD    80 ; gdisp
+    Disp_TVEC_Close
+    $a
+        0x00012c3c:    e1a0c00d    ....    MOV      r12,r13
+        0x00012c40:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00012c44:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012c48:    e3a01000    ....    MOV      r1,#0
+        0x00012c4c:    e1a04000    .@..    MOV      r4,r0
+        0x00012c50:    ebfffffe    ....    BL       TVE_dac_disable  ; 0xa4a0 Section #1
+        0x00012c54:    e1a00004    ....    MOV      r0,r4
+        0x00012c58:    e3a01001    ....    MOV      r1,#1
+        0x00012c5c:    ebfffffe    ....    BL       TVE_dac_disable  ; 0xa4a0 Section #1
+        0x00012c60:    e1a00004    ....    MOV      r0,r4
+        0x00012c64:    e3a01002    ....    MOV      r1,#2
+        0x00012c68:    ebfffffe    ....    BL       TVE_dac_disable  ; 0xa4a0 Section #1
+        0x00012c6c:    e3a01003    ....    MOV      r1,#3
+        0x00012c70:    e1a00004    ....    MOV      r0,r4
+        0x00012c74:    ebfffffe    ....    BL       TVE_dac_disable  ; 0xa4a0 Section #1
+        0x00012c78:    e1a00004    ....    MOV      r0,r4
+        0x00012c7c:    ebfffffe    ....    BL       TVE_close  ; 0x8f0c Section #1
+        0x00012c80:    e3a00000    ....    MOV      r0,#0
+        0x00012c84:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    BSP_disp_tv_close
+        0x00012c88:    e1a0c00d    ....    MOV      r12,r13
+        0x00012c8c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00012c90:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012c94:    e59f3074    t0..    LDR      r3,[pc,#116]  ; [gdisp = 0x12d10] = 0
+        0x00012c98:    e1a05000    .P..    MOV      r5,r0
+        0x00012c9c:    e0834480    .D..    ADD      r4,r3,r0,LSL #9
+        0x00012ca0:    e5943050    P0..    LDR      r3,[r4,#0x50]
+        0x00012ca4:    e3130802    ....    TST      r3,#0x20000
+        0x00012ca8:    0a000016    ....    BEQ      {pc} + 0x60  ; 0x12d08
+        0x00012cac:    ebfffffe    ....    BL       TCON1_close  ; 0x77e0 Section #1
+        0x00012cb0:    e1a00005    ....    MOV      r0,r5
+        0x00012cb4:    ebfffffe    ....    BL       Disp_TVEC_Close  ; 0x12c3c Section #1
+        0x00012cb8:    e1a00005    ....    MOV      r0,r5
+        0x00012cbc:    ebfffffe    ....    BL       tve_clk_off  ; 0xad90 Section #1
+        0x00012cc0:    e1a00005    ....    MOV      r0,r5
+        0x00012cc4:    ebfffffe    ....    BL       image_clk_off  ; 0xaff0 Section #1
+        0x00012cc8:    e1a00005    ....    MOV      r0,r5
+        0x00012ccc:    ebfffffe    ....    BL       lcdc_clk_off  ; 0xae10 Section #1
+        0x00012cd0:    e594024c    L...    LDR      r0,[r4,#0x24c]
+        0x00012cd4:    e5942050    P ..    LDR      r2,[r4,#0x50]
+        0x00012cd8:    e3a03000    .0..    MOV      r3,#0
+        0x00012cdc:    e5941054    T...    LDR      r1,[r4,#0x54]
+        0x00012ce0:    e3500601    ..P.    CMP      r0,#0x100000
+        0x00012ce4:    e5843220     2..    STR      r3,[r4,#0x220]
+        0x00012ce8:    e3c22802    .(..    BIC      r2,r2,#0x20000
+        0x00012cec:    e3c11c01    ....    BIC      r1,r1,#0x100
+        0x00012cf0:    03e03601    .6..    MVNEQ    r3,#0x100000
+        0x00012cf4:    13e03602    .6..    MVNNE    r3,#0x200000
+        0x00012cf8:    e5842050    P ..    STR      r2,[r4,#0x50]
+        0x00012cfc:    e0033000    .0..    AND      r3,r3,r0
+        0x00012d00:    e5841054    T...    STR      r1,[r4,#0x54]
+        0x00012d04:    e584324c    L2..    STR      r3,[r4,#0x24c]
+        0x00012d08:    e3a00000    ....    MOV      r0,#0
+        0x00012d0c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00012d10:    00000000    ....    DCD    0 ; gdisp
+    Disp_TVEC_Open
+    $a
+        0x00012d14:    e1a0c00d    ....    MOV      r12,r13
+        0x00012d18:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00012d1c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012d20:    ebfffffe    ....    BL       TVE_open  ; 0x8ed8 Section #1
+        0x00012d24:    e3a00000    ....    MOV      r0,#0
+        0x00012d28:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_tv_open
+        0x00012d2c:    e1a0c00d    ....    MOV      r12,r13
+        0x00012d30:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00012d34:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012d38:    e59fa26c    l...    LDR      r10,[pc,#620]  ; [gdisp = 0x12fac] = 0
+        0x00012d3c:    e1a07480    .t..    LSL      r7,r0,#9
+        0x00012d40:    e1a06000    .`..    MOV      r6,r0
+        0x00012d44:    e08a4007    .@..    ADD      r4,r10,r7
+        0x00012d48:    e5943050    P0..    LDR      r3,[r4,#0x50]
+        0x00012d4c:    e3130802    ....    TST      r3,#0x20000
+        0x00012d50:    1a000093    ....    BNE      {pc} + 0x254  ; 0x12fa4
+        0x00012d54:    e5948228    (...    LDR      r8,[r4,#0x228]
+        0x00012d58:    ebfffffe    ....    BL       image_clk_on  ; 0xb050 Section #1
+        0x00012d5c:    e1a00006    ....    MOV      r0,r6
+        0x00012d60:    ebfffffe    ....    BL       Image_open  ; 0xc694 Section #1
+        0x00012d64:    e3a01002    ....    MOV      r1,#2
+        0x00012d68:    e6ef4078    x@..    UXTB     r4,r8
+        0x00012d6c:    e1a00006    ....    MOV      r0,r6
+        0x00012d70:    e1a02004    . ..    MOV      r2,r4
+        0x00012d74:    ebfffffe    ....    BL       disp_clk_cfg  ; 0xb330 Section #1
+        0x00012d78:    e1a00006    ....    MOV      r0,r6
+        0x00012d7c:    ebfffffe    ....    BL       tve_clk_on  ; 0xadd0 Section #1
+        0x00012d80:    e1a00006    ....    MOV      r0,r6
+        0x00012d84:    ebfffffe    ....    BL       lcdc_clk_on  ; 0xae88 Section #1
+        0x00012d88:    e1a00008    ....    MOV      r0,r8
+        0x00012d8c:    ebfffffe    ....    BL       tv_mode_to_width  ; 0xf2ec Section #1
+        0x00012d90:    e1a05000    .P..    MOV      r5,r0
+        0x00012d94:    e1a00008    ....    MOV      r0,r8
+        0x00012d98:    ebfffffe    ....    BL       tv_mode_to_height  ; 0xf340 Section #1
+        0x00012d9c:    e1a01005    ....    MOV      r1,r5
+        0x00012da0:    e1a02000    . ..    MOV      r2,r0
+        0x00012da4:    e1a00006    ....    MOV      r0,r6
+        0x00012da8:    ebfffffe    ....    BL       DE_BE_set_display_size  ; 0x3d48 Section #1
+        0x00012dac:    e1a01004    ....    MOV      r1,r4
+        0x00012db0:    e1a00006    ....    MOV      r0,r6
+        0x00012db4:    ebfffffe    ....    BL       TCON1_set_tv_mode  ; 0x802c Section #1
+        0x00012db8:    e1a00006    ....    MOV      r0,r6
+        0x00012dbc:    e1a01004    ....    MOV      r1,r4
+        0x00012dc0:    ebfffffe    ....    BL       TVE_set_tv_mode  ; 0x8f40 Section #1
+        0x00012dc4:    e3540016    ..T.    CMP      r4,#0x16
+        0x00012dc8:    979ff104    ....    LDRLS    pc,[pc,r4,LSL #2]
+        0x00012dcc:    ea000063    c...    B        {pc} + 0x194  ; 0x12f60
+    $d
+        0x00012dd0:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012dd4:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012dd8:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012ddc:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012de0:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012de4:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012de8:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012dec:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012df0:    00012f60    `/..    DCD    77664 ; [Section 1]
+        0x00012df4:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012df8:    00012f10    ./..    DCD    77584 ; [Section 1]
+        0x00012dfc:    00012e2c    ,...    DCD    77356 ; [Section 1]
+        0x00012e00:    00012e70    p...    DCD    77424 ; [Section 1]
+        0x00012e04:    00012ebc    ....    DCD    77500 ; [Section 1]
+        0x00012e08:    00012e2c    ,...    DCD    77356 ; [Section 1]
+        0x00012e0c:    00012e70    p...    DCD    77424 ; [Section 1]
+        0x00012e10:    00012ebc    ....    DCD    77500 ; [Section 1]
+        0x00012e14:    00012e2c    ,...    DCD    77356 ; [Section 1]
+        0x00012e18:    00012e70    p...    DCD    77424 ; [Section 1]
+        0x00012e1c:    00012ebc    ....    DCD    77500 ; [Section 1]
+        0x00012e20:    00012e2c    ,...    DCD    77356 ; [Section 1]
+        0x00012e24:    00012e70    p...    DCD    77424 ; [Section 1]
+        0x00012e28:    00012ebc    ....    DCD    77500 ; [Section 1]
+    $a
+        0x00012e2c:    e2873050    P0..    ADD      r3,r7,#0x50
+        0x00012e30:    e3a04000    .@..    MOV      r4,#0
+        0x00012e34:    e08a5003    .P..    ADD      r5,r10,r3
+        0x00012e38:    e59521e0    .!..    LDR      r2,[r5,#0x1e0]
+        0x00012e3c:    e2855004    .P..    ADD      r5,r5,#4
+        0x00012e40:    e3520000    ..R.    CMP      r2,#0
+        0x00012e44:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x12e60
+        0x00012e48:    e1a01004    ....    MOV      r1,r4
+        0x00012e4c:    e1a00006    ....    MOV      r0,r6
+        0x00012e50:    ebfffffe    ....    BL       TVE_dac_set_source  ; 0xa4f4 Section #1
+        0x00012e54:    e1a00006    ....    MOV      r0,r6
+        0x00012e58:    e6ef1074    t...    UXTB     r1,r4
+        0x00012e5c:    ebfffffe    ....    BL       TVE_dac_enable  ; 0xa444 Section #1
+        0x00012e60:    e2844001    .@..    ADD      r4,r4,#1
+        0x00012e64:    e3540004    ..T.    CMP      r4,#4
+        0x00012e68:    1afffff2    ....    BNE      {pc} - 0x30  ; 0x12e38
+        0x00012e6c:    ea00003b    ;...    B        {pc} + 0xf4  ; 0x12f60
+        0x00012e70:    e2873050    P0..    ADD      r3,r7,#0x50
+        0x00012e74:    e3a04000    .@..    MOV      r4,#0
+        0x00012e78:    e08a5003    .P..    ADD      r5,r10,r3
+        0x00012e7c:    e59521e0    .!..    LDR      r2,[r5,#0x1e0]
+        0x00012e80:    e3520001    ..R.    CMP      r2,#1
+        0x00012e84:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x12e90
+        0x00012e88:    e3520002    ..R.    CMP      r2,#2
+        0x00012e8c:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x12ea8
+        0x00012e90:    e1a01004    ....    MOV      r1,r4
+        0x00012e94:    e1a00006    ....    MOV      r0,r6
+        0x00012e98:    ebfffffe    ....    BL       TVE_dac_set_source  ; 0xa4f4 Section #1
+        0x00012e9c:    e1a00006    ....    MOV      r0,r6
+        0x00012ea0:    e6ef1074    t...    UXTB     r1,r4
+        0x00012ea4:    ebfffffe    ....    BL       TVE_dac_enable  ; 0xa444 Section #1
+        0x00012ea8:    e2844001    .@..    ADD      r4,r4,#1
+        0x00012eac:    e2855004    .P..    ADD      r5,r5,#4
+        0x00012eb0:    e3540004    ..T.    CMP      r4,#4
+        0x00012eb4:    1afffff0    ....    BNE      {pc} - 0x38  ; 0x12e7c
+        0x00012eb8:    ea000028    (...    B        {pc} + 0xa8  ; 0x12f60
+        0x00012ebc:    e2873050    P0..    ADD      r3,r7,#0x50
+        0x00012ec0:    e3a04000    .@..    MOV      r4,#0
+        0x00012ec4:    e08a5003    .P..    ADD      r5,r10,r3
+        0x00012ec8:    e59521e0    .!..    LDR      r2,[r5,#0x1e0]
+        0x00012ecc:    e3520000    ..R.    CMP      r2,#0
+        0x00012ed0:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x12ee4
+        0x00012ed4:    e3520001    ..R.    CMP      r2,#1
+        0x00012ed8:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x12ee4
+        0x00012edc:    e3520002    ..R.    CMP      r2,#2
+        0x00012ee0:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x12efc
+        0x00012ee4:    e1a01004    ....    MOV      r1,r4
+        0x00012ee8:    e1a00006    ....    MOV      r0,r6
+        0x00012eec:    ebfffffe    ....    BL       TVE_dac_set_source  ; 0xa4f4 Section #1
+        0x00012ef0:    e1a00006    ....    MOV      r0,r6
+        0x00012ef4:    e6ef1074    t...    UXTB     r1,r4
+        0x00012ef8:    ebfffffe    ....    BL       TVE_dac_enable  ; 0xa444 Section #1
+        0x00012efc:    e2844001    .@..    ADD      r4,r4,#1
+        0x00012f00:    e2855004    .P..    ADD      r5,r5,#4
+        0x00012f04:    e3540004    ..T.    CMP      r4,#4
+        0x00012f08:    1affffee    ....    BNE      {pc} - 0x40  ; 0x12ec8
+        0x00012f0c:    ea000013    ....    B        {pc} + 0x54  ; 0x12f60
+        0x00012f10:    e2873050    P0..    ADD      r3,r7,#0x50
+        0x00012f14:    e3a04000    .@..    MOV      r4,#0
+        0x00012f18:    e08a5003    .P..    ADD      r5,r10,r3
+        0x00012f1c:    e59521e0    .!..    LDR      r2,[r5,#0x1e0]
+        0x00012f20:    e3520004    ..R.    CMP      r2,#4
+        0x00012f24:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x12f38
+        0x00012f28:    e3520005    ..R.    CMP      r2,#5
+        0x00012f2c:    0a000001    ....    BEQ      {pc} + 0xc  ; 0x12f38
+        0x00012f30:    e3520006    ..R.    CMP      r2,#6
+        0x00012f34:    1a000005    ....    BNE      {pc} + 0x1c  ; 0x12f50
+        0x00012f38:    e1a01004    ....    MOV      r1,r4
+        0x00012f3c:    e1a00006    ....    MOV      r0,r6
+        0x00012f40:    ebfffffe    ....    BL       TVE_dac_set_source  ; 0xa4f4 Section #1
+        0x00012f44:    e1a00006    ....    MOV      r0,r6
+        0x00012f48:    e6ef1074    t...    UXTB     r1,r4
+        0x00012f4c:    ebfffffe    ....    BL       TVE_dac_enable  ; 0xa444 Section #1
+        0x00012f50:    e2844001    .@..    ADD      r4,r4,#1
+        0x00012f54:    e2855004    .P..    ADD      r5,r5,#4
+        0x00012f58:    e3540004    ..T.    CMP      r4,#4
+        0x00012f5c:    1affffee    ....    BNE      {pc} - 0x40  ; 0x12f1c
+        0x00012f60:    e1a00006    ....    MOV      r0,r6
+        0x00012f64:    ebfffffe    ....    BL       TCON1_open  ; 0x7790 Section #1
+        0x00012f68:    e1a00006    ....    MOV      r0,r6
+        0x00012f6c:    ebfffffe    ....    BL       Disp_TVEC_Open  ; 0x12d14 Section #1
+        0x00012f70:    e1a00008    ....    MOV      r0,r8
+        0x00012f74:    ebfffffe    ....    BL       Disp_get_screen_scan_mode  ; 0xf4f4 Section #1
+        0x00012f78:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [gdisp = 0x12fac] = 0
+        0x00012f7c:    e3a02002    . ..    MOV      r2,#2
+        0x00012f80:    e0833486    .4..    ADD      r3,r3,r6,LSL #9
+        0x00012f84:    e5931050    P...    LDR      r1,[r3,#0x50]
+        0x00012f88:    e593c054    T...    LDR      r12,[r3,#0x54]
+        0x00012f8c:    e3811802    ....    ORR      r1,r1,#0x20000
+        0x00012f90:    e5832220     "..    STR      r2,[r3,#0x220]
+        0x00012f94:    e38ccc01    ....    ORR      r12,r12,#0x100
+        0x00012f98:    e5831050    P...    STR      r1,[r3,#0x50]
+        0x00012f9c:    e583c054    T...    STR      r12,[r3,#0x54]
+        0x00012fa0:    e5c3021c    ....    STRB     r0,[r3,#0x21c]
+        0x00012fa4:    e3a00000    ....    MOV      r0,#0
+        0x00012fa8:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00012fac:    00000000    ....    DCD    0 ; gdisp
+    Disp_TVEC_Exit
+    $a
+        0x00012fb0:    e1a0c00d    ....    MOV      r12,r13
+        0x00012fb4:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00012fb8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012fbc:    e1a04000    .@..    MOV      r4,r0
+        0x00012fc0:    ebfffffe    ....    BL       TVE_exit  ; 0xa3d0 Section #1
+        0x00012fc4:    e1a00004    ....    MOV      r0,r4
+        0x00012fc8:    ebfffffe    ....    BL       tve_clk_exit  ; 0xb558 Section #1
+        0x00012fcc:    e3a00000    ....    MOV      r0,#0
+        0x00012fd0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    Disp_TVEC_Init
+        0x00012fd4:    e1a0c00d    ....    MOV      r12,r13
+        0x00012fd8:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00012fdc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00012fe0:    e1a04000    .@..    MOV      r4,r0
+        0x00012fe4:    ebfffffe    ....    BL       tve_clk_init  ; 0xb67c Section #1
+        0x00012fe8:    e3a01002    ....    MOV      r1,#2
+        0x00012fec:    e3a02004    . ..    MOV      r2,#4
+        0x00012ff0:    e3a00000    ....    MOV      r0,#0
+        0x00012ff4:    ebfffffe    ....    BL       disp_clk_cfg  ; 0xb330 Section #1
+        0x00012ff8:    e1a00004    ....    MOV      r0,r4
+        0x00012ffc:    ebfffffe    ....    BL       tve_clk_on  ; 0xadd0 Section #1
+        0x00013000:    e1a00004    ....    MOV      r0,r4
+        0x00013004:    ebfffffe    ....    BL       TVE_init  ; 0xa838 Section #1
+        0x00013008:    e1a00004    ....    MOV      r0,r4
+        0x0001300c:    ebfffffe    ....    BL       tve_clk_off  ; 0xad90 Section #1
+        0x00013010:    e59f303c    <0..    LDR      r3,[pc,#60]   ; [gdisp = 0x13054] = 0
+        0x00013014:    e3a01000    ....    MOV      r1,#0
+        0x00013018:    e3a02004    . ..    MOV      r2,#4
+        0x0001301c:    e3a04005    .@..    MOV      r4,#5
+        0x00013020:    e3a0c006    ....    MOV      r12,#6
+        0x00013024:    e1a00001    ....    MOV      r0,r1
+        0x00013028:    e5832428    ($..    STR      r2,[r3,#0x428]
+        0x0001302c:    e5834438    8D..    STR      r4,[r3,#0x438]
+        0x00013030:    e583c43c    <...    STR      r12,[r3,#0x43c]
+        0x00013034:    e5831230    0...    STR      r1,[r3,#0x230]
+        0x00013038:    e5832234    4"..    STR      r2,[r3,#0x234]
+        0x0001303c:    e5834238    8B..    STR      r4,[r3,#0x238]
+        0x00013040:    e583c23c    <...    STR      r12,[r3,#0x23c]
+        0x00013044:    e5831430    0...    STR      r1,[r3,#0x430]
+        0x00013048:    e5832434    4$..    STR      r2,[r3,#0x434]
+        0x0001304c:    e5832228    ("..    STR      r2,[r3,#0x228]
+        0x00013050:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013054:    00000000    ....    DCD    0 ; gdisp
+    VGA_Init
+    $a
+        0x00013058:    e1a0c00d    ....    MOV      r12,r13
+        0x0001305c:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013060:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013064:    e59f2010    . ..    LDR      r2,[pc,#16]   ; [gdisp = 0x1307c] = 0
+        0x00013068:    e3a03004    .0..    MOV      r3,#4
+        0x0001306c:    e3a00000    ....    MOV      r0,#0
+        0x00013070:    e5823424    $4..    STR      r3,[r2,#0x424]
+        0x00013074:    e5823224    $2..    STR      r3,[r2,#0x224]
+        0x00013078:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0001307c:    00000000    ....    DCD    0 ; gdisp
+    VGA_Exit
+    $a
+        0x00013080:    e1a0c00d    ....    MOV      r12,r13
+        0x00013084:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013088:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0001308c:    e3a00000    ....    MOV      r0,#0
+        0x00013090:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    BSP_disp_vga_get_mode
+        0x00013094:    e1a0c00d    ....    MOV      r12,r13
+        0x00013098:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x0001309c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000130a0:    e59f3008    .0..    LDR      r3,[pc,#8]    ; [gdisp = 0x130b0] = 0
+        0x000130a4:    e0833480    .4..    ADD      r3,r3,r0,LSL #9
+        0x000130a8:    e5930224    $...    LDR      r0,[r3,#0x224]
+        0x000130ac:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000130b0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_vga_set_src
+    $a
+        0x000130b4:    e1a0c00d    ....    MOV      r12,r13
+        0x000130b8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000130bc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000130c0:    e3510001    ..Q.    CMP      r1,#1
+        0x000130c4:    e1a03001    .0..    MOV      r3,r1
+        0x000130c8:    0a000003    ....    BEQ      {pc} + 0x14  ; 0x130dc
+        0x000130cc:    33a01000    ...3    MOVCC    r1,#0
+        0x000130d0:    3a000001    ...:    BCC      {pc} + 0xc  ; 0x130dc
+        0x000130d4:    e3530005    ..S.    CMP      r3,#5
+        0x000130d8:    1a000002    ....    BNE      {pc} + 0x10  ; 0x130e8
+        0x000130dc:    ebfffffe    ....    BL       TCON1_select_src  ; 0x8810 Section #1
+        0x000130e0:    e3a00000    ....    MOV      r0,#0
+        0x000130e4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x000130e8:    e59f0008    ....    LDR      r0,[pc,#8]    ; [([Section 10] + 3506) = 0x130f8]  = 0xdb2
+        0x000130ec:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x000130f0:    e3e00004    ....    MVN      r0,#4
+        0x000130f4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x000130f8:    00000db2    ....    DCD    3506 ; [Section 10]
+    BSP_disp_vga_set_mode
+    $a
+        0x000130fc:    e1a0c00d    ....    MOV      r12,r13
+        0x00013100:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013104:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013108:    e351000a    ..Q.    CMP      r1,#0xa
+        0x0001310c:    e1a02000    . ..    MOV      r2,r0
+        0x00013110:    9a000003    ....    BLS      {pc} + 0x14  ; 0x13124
+        0x00013114:    e59f0024    $...    LDR      r0,[pc,#36]   ; [([Section 10] + 3556) = 0x13140]  = 0xde4
+        0x00013118:    ebfffffe    ....    BL       OSAL_printf  ; 0x3314 Section #1
+        0x0001311c:    e3e00000    ....    MVN      r0,#0
+        0x00013120:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00013124:    e59f3018    .0..    LDR      r3,[pc,#24]   ; [gdisp = 0x13144] = 0
+        0x00013128:    e3a00000    ....    MOV      r0,#0
+        0x0001312c:    e0833482    .4..    ADD      r3,r3,r2,LSL #9
+        0x00013130:    e3a02008    . ..    MOV      r2,#8
+        0x00013134:    e5831224    $...    STR      r1,[r3,#0x224]
+        0x00013138:    e5832220     "..    STR      r2,[r3,#0x220]
+        0x0001313c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00013140:    00000de4    ....    DCD    3556 ; [Section 10]
+        0x00013144:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_vga_close
+    $a
+        0x00013148:    e1a0c00d    ....    MOV      r12,r13
+        0x0001314c:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00013150:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013154:    e59f3084    .0..    LDR      r3,[pc,#132]  ; [gdisp = 0x131e0] = 0
+        0x00013158:    e1a04000    .@..    MOV      r4,r0
+        0x0001315c:    e0835480    .T..    ADD      r5,r3,r0,LSL #9
+        0x00013160:    e5953050    P0..    LDR      r3,[r5,#0x50]
+        0x00013164:    e3130702    ....    TST      r3,#0x80000
+        0x00013168:    0a00001a    ....    BEQ      {pc} + 0x70  ; 0x131d8
+        0x0001316c:    ebfffffe    ....    BL       TCON1_close  ; 0x77e0 Section #1
+        0x00013170:    e1a00004    ....    MOV      r0,r4
+        0x00013174:    ebfffffe    ....    BL       Disp_TVEC_Close  ; 0x12c3c Section #1
+        0x00013178:    e1a00004    ....    MOV      r0,r4
+        0x0001317c:    ebfffffe    ....    BL       tve_clk_off  ; 0xad90 Section #1
+        0x00013180:    e1a00004    ....    MOV      r0,r4
+        0x00013184:    ebfffffe    ....    BL       image_clk_off  ; 0xaff0 Section #1
+        0x00013188:    e1a00004    ....    MOV      r0,r4
+        0x0001318c:    ebfffffe    ....    BL       lcdc_clk_off  ; 0xae10 Section #1
+        0x00013190:    e3a01008    ....    MOV      r1,#8
+        0x00013194:    e3a02000    . ..    MOV      r2,#0
+        0x00013198:    e1a00004    ....    MOV      r0,r4
+        0x0001319c:    ebfffffe    ....    BL       Disp_lcdc_pin_cfg  ; 0xf1d0 Section #1
+        0x000131a0:    e595024c    L...    LDR      r0,[r5,#0x24c]
+        0x000131a4:    e5952050    P ..    LDR      r2,[r5,#0x50]
+        0x000131a8:    e3a03000    .0..    MOV      r3,#0
+        0x000131ac:    e5951054    T...    LDR      r1,[r5,#0x54]
+        0x000131b0:    e3500601    ..P.    CMP      r0,#0x100000
+        0x000131b4:    e5853220     2..    STR      r3,[r5,#0x220]
+        0x000131b8:    e3c22702    .'..    BIC      r2,r2,#0x80000
+        0x000131bc:    e3c11c01    ....    BIC      r1,r1,#0x100
+        0x000131c0:    03e03601    .6..    MVNEQ    r3,#0x100000
+        0x000131c4:    13e03602    .6..    MVNNE    r3,#0x200000
+        0x000131c8:    e5852050    P ..    STR      r2,[r5,#0x50]
+        0x000131cc:    e0033000    .0..    AND      r3,r3,r0
+        0x000131d0:    e5851054    T...    STR      r1,[r5,#0x54]
+        0x000131d4:    e585324c    L2..    STR      r3,[r5,#0x24c]
+        0x000131d8:    e3a00000    ....    MOV      r0,#0
+        0x000131dc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x000131e0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_vga_open
+    $a
+        0x000131e4:    e1a0c00d    ....    MOV      r12,r13
+        0x000131e8:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x000131ec:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000131f0:    e59f30d8    .0..    LDR      r3,[pc,#216]  ; [gdisp = 0x132d0] = 0
+        0x000131f4:    e1a07000    .p..    MOV      r7,r0
+        0x000131f8:    e0838480    ....    ADD      r8,r3,r0,LSL #9
+        0x000131fc:    e5983050    P0..    LDR      r3,[r8,#0x50]
+        0x00013200:    e213a702    ....    ANDS     r10,r3,#0x80000
+        0x00013204:    1a00002f    /...    BNE      {pc} + 0xc4  ; 0x132c8
+        0x00013208:    e5984224    $B..    LDR      r4,[r8,#0x224]
+        0x0001320c:    ebfffffe    ....    BL       lcdc_clk_on  ; 0xae88 Section #1
+        0x00013210:    e1a00007    ....    MOV      r0,r7
+        0x00013214:    ebfffffe    ....    BL       image_clk_on  ; 0xb050 Section #1
+        0x00013218:    e1a00007    ....    MOV      r0,r7
+        0x0001321c:    e6ef6074    t`..    UXTB     r6,r4
+        0x00013220:    ebfffffe    ....    BL       Image_open  ; 0xc694 Section #1
+        0x00013224:    e1a00007    ....    MOV      r0,r7
+        0x00013228:    ebfffffe    ....    BL       tve_clk_on  ; 0xadd0 Section #1
+        0x0001322c:    e3a01008    ....    MOV      r1,#8
+        0x00013230:    e1a02006    . ..    MOV      r2,r6
+        0x00013234:    e1a00007    ....    MOV      r0,r7
+        0x00013238:    ebfffffe    ....    BL       disp_clk_cfg  ; 0xb330 Section #1
+        0x0001323c:    e3a01008    ....    MOV      r1,#8
+        0x00013240:    e3a02001    . ..    MOV      r2,#1
+        0x00013244:    e1a00007    ....    MOV      r0,r7
+        0x00013248:    ebfffffe    ....    BL       Disp_lcdc_pin_cfg  ; 0xf1d0 Section #1
+        0x0001324c:    e1a00004    ....    MOV      r0,r4
+        0x00013250:    ebfffffe    ....    BL       vga_mode_to_width  ; 0xf3dc Section #1
+        0x00013254:    e1a05000    .P..    MOV      r5,r0
+        0x00013258:    e1a00004    ....    MOV      r0,r4
+        0x0001325c:    ebfffffe    ....    BL       vga_mode_to_height  ; 0xf468 Section #1
+        0x00013260:    e1a01005    ....    MOV      r1,r5
+        0x00013264:    e1a02000    . ..    MOV      r2,r0
+        0x00013268:    e1a00007    ....    MOV      r0,r7
+        0x0001326c:    ebfffffe    ....    BL       DE_BE_set_display_size  ; 0x3d48 Section #1
+        0x00013270:    e1a01006    ....    MOV      r1,r6
+        0x00013274:    e1a00007    ....    MOV      r0,r7
+        0x00013278:    ebfffffe    ....    BL       TCON1_set_vga_mode  ; 0x84bc Section #1
+        0x0001327c:    e1a00007    ....    MOV      r0,r7
+        0x00013280:    ebfffffe    ....    BL       TVE_set_vga_mode  ; 0xa138 Section #1
+        0x00013284:    e1a00007    ....    MOV      r0,r7
+        0x00013288:    ebfffffe    ....    BL       Disp_TVEC_Open  ; 0x12d14 Section #1
+        0x0001328c:    e1a00007    ....    MOV      r0,r7
+        0x00013290:    ebfffffe    ....    BL       TCON1_open  ; 0x7790 Section #1
+        0x00013294:    e1a01006    ....    MOV      r1,r6
+        0x00013298:    e3a00008    ....    MOV      r0,#8
+        0x0001329c:    ebfffffe    ....    BL       Disp_Switch_Dram_Mode  ; 0x128b0 Section #1
+        0x000132a0:    e5983050    P0..    LDR      r3,[r8,#0x50]
+        0x000132a4:    e5982054    T ..    LDR      r2,[r8,#0x54]
+        0x000132a8:    e2881f86    ....    ADD      r1,r8,#0x218
+        0x000132ac:    e3833702    .7..    ORR      r3,r3,#0x80000
+        0x000132b0:    e5883050    P0..    STR      r3,[r8,#0x50]
+        0x000132b4:    e3822c01    .,..    ORR      r2,r2,#0x100
+        0x000132b8:    e3a03008    .0..    MOV      r3,#8
+        0x000132bc:    e5c1a004    ....    STRB     r10,[r1,#4]
+        0x000132c0:    e5882054    T ..    STR      r2,[r8,#0x54]
+        0x000132c4:    e5883220     2..    STR      r3,[r8,#0x220]
+        0x000132c8:    e3a00000    ....    MOV      r0,#0
+        0x000132cc:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x000132d0:    00000000    ....    DCD    0 ; gdisp
+    BSP_disp_video_get_frame_id
+    $a
+        0x000132d4:    e1a0c00d    ....    MOV      r12,r13
+        0x000132d8:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000132dc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000132e0:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x000132e4:    4a000017    ...J    BMI      {pc} + 0x64  ; 0x13348
+        0x000132e8:    e59f2068    h ..    LDR      r2,[pc,#104]  ; [gdisp = 0x13358] = 0
+        0x000132ec:    e1a00480    ....    LSL      r0,r0,#9
+        0x000132f0:    e0823000    .0..    ADD      r3,r2,r0
+        0x000132f4:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x000132f8:    e1510003    ..Q.    CMP      r1,r3
+        0x000132fc:    2a000011    ...*    BCS      {pc} + 0x4c  ; 0x13348
+        0x00013300:    e3a03060    `0..    MOV      r3,#0x60
+        0x00013304:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x00013308:    e0820003    ....    ADD      r0,r2,r3
+        0x0001330c:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x00013310:    e3130002    ....    TST      r3,#2
+        0x00013314:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x13350
+        0x00013318:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x0001331c:    e3530004    ..S.    CMP      r3,#4
+        0x00013320:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x13350
+        0x00013324:    e59f3030    00..    LDR      r3,[pc,#48]   ; [([Section 17] + 19548) = 0x1335c]  = 0x4c5c
+        0x00013328:    e3a0206c    l ..    MOV      r2,#0x6c
+        0x0001332c:    e5901098    ....    LDR      r1,[r0,#0x98]
+        0x00013330:    e0203192    .1 .    MLA      r0,r2,r1,r3
+        0x00013334:    e1d035d0    .5..    LDRSB    r3,[r0,#0x50]
+        0x00013338:    e3530001    ..S.    CMP      r3,#1
+        0x0001333c:    05900004    ....    LDREQ    r0,[r0,#4]
+        0x00013340:    1a000002    ....    BNE      {pc} + 0x10  ; 0x13350
+        0x00013344:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00013348:    e3e00001    ....    MVN      r0,#1
+        0x0001334c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00013350:    e3e00000    ....    MVN      r0,#0
+        0x00013354:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00013358:    00000000    ....    DCD    0 ; gdisp
+        0x0001335c:    00004c5c    \L..    DCD    19548 ; [Section 17]
+    BSP_disp_video_get_dit_info
+    $a
+        0x00013360:    e1a0c00d    ....    MOV      r12,r13
+        0x00013364:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013368:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0001336c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x00013370:    4a000021    !..J    BMI      {pc} + 0x8c  ; 0x133fc
+        0x00013374:    e59fc090    ....    LDR      r12,[pc,#144]  ; [gdisp = 0x1340c] = 0
+        0x00013378:    e1a00480    ....    LSL      r0,r0,#9
+        0x0001337c:    e08c3000    .0..    ADD      r3,r12,r0
+        0x00013380:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x00013384:    e1510003    ..Q.    CMP      r1,r3
+        0x00013388:    2a00001b    ...*    BCS      {pc} + 0x74  ; 0x133fc
+        0x0001338c:    e3a03060    `0..    MOV      r3,#0x60
+        0x00013390:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x00013394:    e08c0003    ....    ADD      r0,r12,r3
+        0x00013398:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0001339c:    e3130002    ....    TST      r3,#2
+        0x000133a0:    0a000017    ....    BEQ      {pc} + 0x64  ; 0x13404
+        0x000133a4:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x000133a8:    e3530004    ..S.    CMP      r3,#4
+        0x000133ac:    1a000014    ....    BNE      {pc} + 0x58  ; 0x13404
+        0x000133b0:    e59f1058    X...    LDR      r1,[pc,#88]   ; [([Section 17] + 19548) = 0x13410]  = 0x4c5c
+        0x000133b4:    e3a03000    .0..    MOV      r3,#0
+        0x000133b8:    e5c23001    .0..    STRB     r3,[r2,#1]
+        0x000133bc:    e5c23000    .0..    STRB     r3,[r2,#0]
+        0x000133c0:    e1d136d2    .6..    LDRSB    r3,[r1,#0x62]
+        0x000133c4:    e3530000    ..S.    CMP      r3,#0
+        0x000133c8:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x13404
+        0x000133cc:    e5913064    d0..    LDR      r3,[r1,#0x64]
+        0x000133d0:    e3530002    ..S.    CMP      r3,#2
+        0x000133d4:    03a03001    .0..    MOVEQ    r3,#1
+        0x000133d8:    05c23000    .0..    STRBEQ   r3,[r2,#0]
+        0x000133dc:    e59f302c    ,0..    LDR      r3,[pc,#44]   ; [([Section 17] + 19548) = 0x13410]  = 0x4c5c
+        0x000133e0:    e1d336d8    .6..    LDRSB    r3,[r3,#0x68]
+        0x000133e4:    e3530000    ..S.    CMP      r3,#0
+        0x000133e8:    13a03001    .0..    MOVNE    r3,#1
+        0x000133ec:    13a00000    ....    MOVNE    r0,#0
+        0x000133f0:    15c23001    .0..    STRBNE   r3,[r2,#1]
+        0x000133f4:    189da800    ....    LDMNE    r13,{r11,r13,pc}
+        0x000133f8:    ea000001    ....    B        {pc} + 0xc  ; 0x13404
+        0x000133fc:    e3e00001    ....    MVN      r0,#1
+        0x00013400:    e89da800    ....    LDM      r13,{r11,r13,pc}
+        0x00013404:    e3a00000    ....    MOV      r0,#0
+        0x00013408:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x0001340c:    00000000    ....    DCD    0 ; gdisp
+        0x00013410:    00004c5c    \L..    DCD    19548 ; [Section 17]
+    BSP_disp_video_stop
+    $a
+        0x00013414:    e1a0c00d    ....    MOV      r12,r13
+        0x00013418:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x0001341c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013420:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x00013424:    4a000017    ...J    BMI      {pc} + 0x64  ; 0x13488
+        0x00013428:    e59fc068    h...    LDR      r12,[pc,#104]  ; [gdisp = 0x13498] = 0
+        0x0001342c:    e1a02480    .$..    LSL      r2,r0,#9
+        0x00013430:    e08c3002    .0..    ADD      r3,r12,r2
+        0x00013434:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x00013438:    e1510003    ..Q.    CMP      r1,r3
+        0x0001343c:    2a000011    ...*    BCS      {pc} + 0x4c  ; 0x13488
+        0x00013440:    e3a03060    `0..    MOV      r3,#0x60
+        0x00013444:    e0232193    .!#.    MLA      r3,r3,r1,r2
+        0x00013448:    e08c1003    ....    ADD      r1,r12,r3
+        0x0001344c:    e5913090    .0..    LDR      r3,[r1,#0x90]
+        0x00013450:    e3130002    ....    TST      r3,#2
+        0x00013454:    0a00000d    ....    BEQ      {pc} + 0x3c  ; 0x13490
+        0x00013458:    e591309c    .0..    LDR      r3,[r1,#0x9c]
+        0x0001345c:    e3530004    ..S.    CMP      r3,#4
+        0x00013460:    1a00000a    ....    BNE      {pc} + 0x30  ; 0x13490
+        0x00013464:    e3a0106c    l...    MOV      r1,#0x6c
+        0x00013468:    e59f202c    , ..    LDR      r2,[pc,#44]   ; [([Section 17] + 19548) = 0x1349c]  = 0x4c5c
+        0x0001346c:    e0030091    ....    MUL      r3,r1,r0
+        0x00013470:    e3a04000    .@..    MOV      r4,#0
+        0x00013474:    e0820003    ....    ADD      r0,r2,r3
+        0x00013478:    e7c24003    .@..    STRB     r4,[r2,r3]
+        0x0001347c:    ebfffffe    ....    BL       __memzero  ;
+        0x00013480:    e1a00004    ....    MOV      r0,r4
+        0x00013484:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x00013488:    e3e00001    ....    MVN      r0,#1
+        0x0001348c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+        0x00013490:    e3e00000    ....    MVN      r0,#0
+        0x00013494:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013498:    00000000    ....    DCD    0 ; gdisp
+        0x0001349c:    00004c5c    \L..    DCD    19548 ; [Section 17]
+    BSP_disp_video_start
+    $a
+        0x000134a0:    e1a0c00d    ....    MOV      r12,r13
+        0x000134a4:    e92dd8f0    ..-.    PUSH     {r4-r7,r11,r12,r14,pc}
+        0x000134a8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000134ac:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x000134b0:    4a00001c    ...J    BMI      {pc} + 0x78  ; 0x13528
+        0x000134b4:    e59f207c    | ..    LDR      r2,[pc,#124]  ; [gdisp = 0x13538] = 0
+        0x000134b8:    e1a00480    ....    LSL      r0,r0,#9
+        0x000134bc:    e0823000    .0..    ADD      r3,r2,r0
+        0x000134c0:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x000134c4:    e1510003    ..Q.    CMP      r1,r3
+        0x000134c8:    2a000016    ...*    BCS      {pc} + 0x60  ; 0x13528
+        0x000134cc:    e3a03060    `0..    MOV      r3,#0x60
+        0x000134d0:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x000134d4:    e0820003    ....    ADD      r0,r2,r3
+        0x000134d8:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x000134dc:    e3130002    ....    TST      r3,#2
+        0x000134e0:    0a000012    ....    BEQ      {pc} + 0x50  ; 0x13530
+        0x000134e4:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x000134e8:    e3530004    ..S.    CMP      r3,#4
+        0x000134ec:    1a00000f    ....    BNE      {pc} + 0x44  ; 0x13530
+        0x000134f0:    e5903098    .0..    LDR      r3,[r0,#0x98]
+        0x000134f4:    e3a0406c    l@..    MOV      r4,#0x6c
+        0x000134f8:    e1a01004    ....    MOV      r1,r4
+        0x000134fc:    e59f6038    8`..    LDR      r6,[pc,#56]   ; [([Section 17] + 19548) = 0x1353c]  = 0x4c5c
+        0x00013500:    e0040394    ....    MUL      r4,r4,r3
+        0x00013504:    e0865004    .P..    ADD      r5,r6,r4
+        0x00013508:    e1a00005    ....    MOV      r0,r5
+        0x0001350c:    ebfffffe    ....    BL       __memzero  ;
+        0x00013510:    e3e03000    .0..    MVN      r3,#0
+        0x00013514:    e3a00000    ....    MOV      r0,#0
+        0x00013518:    e5853004    .0..    STR      r3,[r5,#4]
+        0x0001351c:    e2833002    .0..    ADD      r3,r3,#2
+        0x00013520:    e7c63004    .0..    STRB     r3,[r6,r4]
+        0x00013524:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x00013528:    e3e00001    ....    MVN      r0,#1
+        0x0001352c:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+        0x00013530:    e3e00000    ....    MVN      r0,#0
+        0x00013534:    e89da8f0    ....    LDM      r13,{r4-r7,r11,r13,pc}
+    $d
+        0x00013538:    00000000    ....    DCD    0 ; gdisp
+        0x0001353c:    00004c5c    \L..    DCD    19548 ; [Section 17]
+    BSP_disp_video_set_fb
+    $a
+        0x00013540:    e1a0c00d    ....    MOV      r12,r13
+        0x00013544:    e92dddf0    ..-.    PUSH     {r4-r8,r10-r12,r14,pc}
+        0x00013548:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0001354c:    e2511064    d.Q.    SUBS     r1,r1,#0x64
+        0x00013550:    4a00003b    ;..J    BMI      {pc} + 0xf4  ; 0x13644
+        0x00013554:    e59fc0f8    ....    LDR      r12,[pc,#248]  ; [gdisp = 0x13654] = 0
+        0x00013558:    e1a00480    ....    LSL      r0,r0,#9
+        0x0001355c:    e08c3000    .0..    ADD      r3,r12,r0
+        0x00013560:    e593308c    .0..    LDR      r3,[r3,#0x8c]
+        0x00013564:    e1510003    ..Q.    CMP      r1,r3
+        0x00013568:    2a000035    5..*    BCS      {pc} + 0xdc  ; 0x13644
+        0x0001356c:    e3a03060    `0..    MOV      r3,#0x60
+        0x00013570:    e0230193    ..#.    MLA      r3,r3,r1,r0
+        0x00013574:    e08c0003    ....    ADD      r0,r12,r3
+        0x00013578:    e5903090    .0..    LDR      r3,[r0,#0x90]
+        0x0001357c:    e3130002    ....    TST      r3,#2
+        0x00013580:    0a000031    1...    BEQ      {pc} + 0xcc  ; 0x1364c
+        0x00013584:    e590309c    .0..    LDR      r3,[r0,#0x9c]
+        0x00013588:    e3530004    ..S.    CMP      r3,#4
+        0x0001358c:    1a00002e    ....    BNE      {pc} + 0xc0  ; 0x1364c
+        0x00013590:    e590a098    ....    LDR      r10,[r0,#0x98]
+        0x00013594:    e3a0c06c    l...    MOV      r12,#0x6c
+        0x00013598:    e1a05002    .P..    MOV      r5,r2
+        0x0001359c:    e59f40b4    .@..    LDR      r4,[pc,#180]  ; [([Section 17] + 19548) = 0x13658]  = 0x4c5c
+        0x000135a0:    e8b5000f    ....    LDM      r5!,{r0-r3}
+        0x000135a4:    e3a08000    ....    MOV      r8,#0
+        0x000135a8:    e00c0a9c    ....    MUL      r12,r12,r10
+        0x000135ac:    e28c6028    (`..    ADD      r6,r12,#0x28
+        0x000135b0:    e084700c    .p..    ADD      r7,r4,r12
+        0x000135b4:    e0844006    .@..    ADD      r4,r4,r6
+        0x000135b8:    e2876060    ``..    ADD      r6,r7,#0x60
+        0x000135bc:    e1a0c004    ....    MOV      r12,r4
+        0x000135c0:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x000135c4:    e8b5000f    ....    LDM      r5!,{r0-r3}
+        0x000135c8:    e8ac000f    ....    STM      r12!,{r0-r3}
+        0x000135cc:    e5952000    . ..    LDR      r2,[r5,#0]
+        0x000135d0:    e3a03001    .0..    MOV      r3,#1
+        0x000135d4:    e5c73050    P0..    STRB     r3,[r7,#0x50]
+        0x000135d8:    e5878054    T...    STR      r8,[r7,#0x54]
+        0x000135dc:    e58c2000    . ..    STR      r2,[r12,#0]
+        0x000135e0:    e1d733d8    .3..    LDRSB    r3,[r7,#0x38]
+        0x000135e4:    e3530001    ..S.    CMP      r3,#1
+        0x000135e8:    15c68002    ....    STRBNE   r8,[r6,#2]
+        0x000135ec:    1a00000d    ....    BNE      {pc} + 0x3c  ; 0x13628
+        0x000135f0:    e1d733d9    .3..    LDRSB    r3,[r7,#0x39]
+        0x000135f4:    e2871058    X...    ADD      r1,r7,#0x58
+        0x000135f8:    e59f2058    X ..    LDR      r2,[pc,#88]   ; [([Section 17] + 19548) = 0x13658]  = 0x4c5c
+        0x000135fc:    e3530001    ..S.    CMP      r3,#1
+        0x00013600:    e5c78068    h...    STRB     r8,[r7,#0x68]
+        0x00013604:    e5c68002    ....    STRB     r8,[r6,#2]
+        0x00013608:    01a03008    .0..    MOVEQ    r3,r8
+        0x0001360c:    13a03001    .0..    MOVNE    r3,#1
+        0x00013610:    e5c13001    .0..    STRB     r3,[r1,#1]
+        0x00013614:    e3a0306c    l0..    MOV      r3,#0x6c
+        0x00013618:    e0232a93    .*#.    MLA      r3,r3,r10,r2
+        0x0001361c:    e5878064    d...    STR      r8,[r7,#0x64]
+        0x00013620:    e3a02000    . ..    MOV      r2,#0
+        0x00013624:    e583205c    \ ..    STR      r2,[r3,#0x5c]
+        0x00013628:    e59f2028    ( ..    LDR      r2,[pc,#40]   ; [([Section 17] + 19548) = 0x13658]  = 0x4c5c
+        0x0001362c:    e3a0306c    l0..    MOV      r3,#0x6c
+        0x00013630:    e3a00000    ....    MOV      r0,#0
+        0x00013634:    e0232a93    .*#.    MLA      r3,r3,r10,r2
+        0x00013638:    e5932008    . ..    LDR      r2,[r3,#8]
+        0x0001363c:    e583204c    L ..    STR      r2,[r3,#0x4c]
+        0x00013640:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+        0x00013644:    e3e00001    ....    MVN      r0,#1
+        0x00013648:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+        0x0001364c:    e3e00000    ....    MVN      r0,#0
+        0x00013650:    e89dadf0    ....    LDM      r13,{r4-r8,r10,r11,r13,pc}
+    $d
+        0x00013654:    00000000    ....    DCD    0 ; gdisp
+        0x00013658:    00004c5c    \L..    DCD    19548 ; [Section 17]
+    Video_Operation_In_Vblanking
+    $a
+        0x0001365c:    e1a0c00d    ....    MOV      r12,r13
+        0x00013660:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x00013664:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013668:    e24dd074    t.M.    SUB      r13,r13,#0x74
+        0x0001366c:    e59fa33c    <...    LDR      r10,[pc,#828]  ; [gdisp = 0x139b0] = 0
+        0x00013670:    e3a02000    . ..    MOV      r2,#0
+        0x00013674:    e59f9338    8...    LDR      r9,[pc,#824]  ; [([Section 17] + 19548) = 0x139b4]  = 0x4c5c
+        0x00013678:    e50b2084    . ..    STR      r2,[r11,#-0x84]
+        0x0001367c:    e50b0088    ....    STR      r0,[r11,#-0x88]
+        0x00013680:    e50b108c    ....    STR      r1,[r11,#-0x8c]
+        0x00013684:    e50b2068    h ..    STR      r2,[r11,#-0x68]
+        0x00013688:    e59a3450    P4..    LDR      r3,[r10,#0x450]
+        0x0001368c:    e3130c02    ....    TST      r3,#0x200
+        0x00013690:    0a0000b9    ....    BEQ      {pc} + 0x2ec  ; 0x1397c
+        0x00013694:    e59f5318    .S..    LDR      r5,[pc,#792]  ; [([Section 17] + 19548) = 0x139b4]  = 0x4c5c
+        0x00013698:    e51bc068    h...    LDR      r12,[r11,#-0x68]
+        0x0001369c:    e19530dc    .0..    LDRSB    r3,[r5,r12]
+        0x000136a0:    e3530001    ..S.    CMP      r3,#1
+        0x000136a4:    1a0000b4    ....    BNE      {pc} + 0x2d8  ; 0x1397c
+        0x000136a8:    e1d945d0    .E..    LDRSB    r4,[r9,#0x50]
+        0x000136ac:    e3540001    ..T.    CMP      r4,#1
+        0x000136b0:    1a0000b1    ....    BNE      {pc} + 0x2cc  ; 0x1397c
+        0x000136b4:    e59a3458    X4..    LDR      r3,[r10,#0x458]
+        0x000136b8:    e51b1088    ....    LDR      r1,[r11,#-0x88]
+        0x000136bc:    e1530001    ..S.    CMP      r3,r1
+        0x000136c0:    1a0000ad    ....    BNE      {pc} + 0x2bc  ; 0x1397c
+        0x000136c4:    e51b108c    ....    LDR      r1,[r11,#-0x8c]
+        0x000136c8:    e3a00000    ....    MOV      r0,#0
+        0x000136cc:    ebfffffe    ....    BL       LCDC_get_start_delay  ; 0x6e3c Section #1
+        0x000136d0:    e51b2088    . ..    LDR      r2,[r11,#-0x88]
+        0x000136d4:    e2401005    ..@.    SUB      r1,r0,#5
+        0x000136d8:    e6ef0072    r...    UXTB     r0,r2
+        0x000136dc:    ebfffffe    ....    BL       Is_In_Valid_Regn  ; 0xcb14 Section #1
+        0x000136e0:    e31000ff    ....    TST      r0,#0xff
+        0x000136e4:    0a0000a4    ....    BEQ      {pc} + 0x298  ; 0x1397c
+        0x000136e8:    e51b3068    h0..    LDR      r3,[r11,#-0x68]
+        0x000136ec:    e2891028    (...    ADD      r1,r9,#0x28
+        0x000136f0:    e3a02024    $ ..    MOV      r2,#0x24
+        0x000136f4:    e0855003    .P..    ADD      r5,r5,r3
+        0x000136f8:    e2850004    ....    ADD      r0,r5,#4
+        0x000136fc:    ebfffffe    ....    BL       memcpy  ;
+        0x00013700:    e1d936d2    .6..    LDRSB    r3,[r9,#0x62]
+        0x00013704:    e3530000    ..S.    CMP      r3,#0
+        0x00013708:    1a000009    ....    BNE      {pc} + 0x2c  ; 0x13734
+        0x0001370c:    e50b3080    .0..    STR      r3,[r11,#-0x80]
+        0x00013710:    e5c93058    X0..    STRB     r3,[r9,#0x58]
+        0x00013714:    e5c93059    Y0..    STRB     r3,[r9,#0x59]
+        0x00013718:    e50b307c    |0..    STR      r3,[r11,#-0x7c]
+        0x0001371c:    e5c93062    b0..    STRB     r3,[r9,#0x62]
+        0x00013720:    e50b3078    x0..    STR      r3,[r11,#-0x78]
+        0x00013724:    e5893064    d0..    STR      r3,[r9,#0x64]
+        0x00013728:    e5c93068    h0..    STRB     r3,[r9,#0x68]
+        0x0001372c:    e5c93069    i0..    STRB     r3,[r9,#0x69]
+        0x00013730:    ea000011    ....    B        {pc} + 0x4c  ; 0x1377c
+        0x00013734:    e599205c    \ ..    LDR      r2,[r9,#0x5c]
+        0x00013738:    e5c94069    i@..    STRB     r4,[r9,#0x69]
+        0x0001373c:    e3520000    ..R.    CMP      r2,#0
+        0x00013740:    0a000005    ....    BEQ      {pc} + 0x1c  ; 0x1375c
+        0x00013744:    e1d935d9    .5..    LDRSB    r3,[r9,#0x59]
+        0x00013748:    e2822001    . ..    ADD      r2,r2,#1
+        0x0001374c:    e589205c    \ ..    STR      r2,[r9,#0x5c]
+        0x00013750:    e2733001    .0s.    RSBS     r3,r3,#1
+        0x00013754:    33a03000    .0.3    MOVCC    r3,#0
+        0x00013758:    e5c93059    Y0..    STRB     r3,[r9,#0x59]
+        0x0001375c:    e599004c    L...    LDR      r0,[r9,#0x4c]
+        0x00013760:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00013764:    e50b0078    x...    STR      r0,[r11,#-0x78]
+        0x00013768:    e599001c    ....    LDR      r0,[r9,#0x1c]
+        0x0001376c:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x00013770:    e5991020     ...    LDR      r1,[r9,#0x20]
+        0x00013774:    e50b1080    ....    STR      r1,[r11,#-0x80]
+        0x00013778:    e50b007c    |...    STR      r0,[r11,#-0x7c]
+        0x0001377c:    e5da1478    x...    LDRB     r1,[r10,#0x478]
+        0x00013780:    e3a00000    ....    MOV      r0,#0
+        0x00013784:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00013788:    e5da1480    ....    LDRB     r1,[r10,#0x480]
+        0x0001378c:    e54b0034    4.K.    STRB     r0,[r11,#-0x34]
+        0x00013790:    e3a00001    ....    MOV      r0,#1
+        0x00013794:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x00013798:    e5da147c    |...    LDRB     r1,[r10,#0x47c]
+        0x0001379c:    e54b0035    5.K.    STRB     r0,[r11,#-0x35]
+        0x000137a0:    e3a00002    ....    MOV      r0,#2
+        0x000137a4:    ebfffffe    ....    BL       Scaler_sw_para_to_reg  ; 0xfe30 Section #1
+        0x000137a8:    e3a02000    . ..    MOV      r2,#0
+        0x000137ac:    e54b2036    6 K.    STRB     r2,[r11,#-0x36]
+        0x000137b0:    e54b0033    3.K.    STRB     r0,[r11,#-0x33]
+        0x000137b4:    e5950008    ....    LDR      r0,[r5,#8]
+        0x000137b8:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x000137bc:    e50b004c    L...    STR      r0,[r11,#-0x4c]
+        0x000137c0:    e599000c    ....    LDR      r0,[r9,#0xc]
+        0x000137c4:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x000137c8:    e50b0048    H...    STR      r0,[r11,#-0x48]
+        0x000137cc:    e5990010    ....    LDR      r0,[r9,#0x10]
+        0x000137d0:    ebfffffe    ....    BL       OSAL_VAtoPA  ; 0x3260 Section #1
+        0x000137d4:    e59a24b0    .$..    LDR      r2,[r10,#0x4b0]
+        0x000137d8:    e51bc088    ....    LDR      r12,[r11,#-0x88]
+        0x000137dc:    e59f31cc    .1..    LDR      r3,[pc,#460]  ; [gdisp = 0x139b0] = 0
+        0x000137e0:    e3520003    ..R.    CMP      r2,#3
+        0x000137e4:    e59a24b8    .$..    LDR      r2,[r10,#0x4b8]
+        0x000137e8:    e083348c    .4..    ADD      r3,r3,r12,LSL #9
+        0x000137ec:    e59a6470    pd..    LDR      r6,[r10,#0x470]
+        0x000137f0:    e59a54b4    .T..    LDR      r5,[r10,#0x4b4]
+        0x000137f4:    e59a14c0    ....    LDR      r1,[r10,#0x4c0]
+        0x000137f8:    e59ac4bc    ....    LDR      r12,[r10,#0x4bc]
+        0x000137fc:    e59a44c4    .D..    LDR      r4,[r10,#0x4c4]
+        0x00013800:    e59ae4a4    ....    LDR      r14,[r10,#0x4a4]
+        0x00013804:    e50b2058    X ..    STR      r2,[r11,#-0x58]
+        0x00013808:    e59a24c8    .$..    LDR      r2,[r10,#0x4c8]
+        0x0001380c:    e50b6060    ``..    STR      r6,[r11,#-0x60]
+        0x00013810:    e24b6037    7`K.    SUB      r6,r11,#0x37
+        0x00013814:    e50b505c    \P..    STR      r5,[r11,#-0x5c]
+        0x00013818:    e24b5060    `PK.    SUB      r5,r11,#0x60
+        0x0001381c:    e50b1050    P...    STR      r1,[r11,#-0x50]
+        0x00013820:    e50bc054    T...    STR      r12,[r11,#-0x54]
+        0x00013824:    e50b4040    @@..    STR      r4,[r11,#-0x40]
+        0x00013828:    e5d3821c    ....    LDRB     r8,[r3,#0x21c]
+        0x0001382c:    83a03000    .0..    MOVHI    r3,#0
+        0x00013830:    e50be06c    l...    STR      r14,[r11,#-0x6c]
+        0x00013834:    e5d9e059    Y...    LDRB     r14,[r9,#0x59]
+        0x00013838:    e59a14a0    ....    LDR      r1,[r10,#0x4a0]
+        0x0001383c:    e50b2074    t ..    STR      r2,[r11,#-0x74]
+        0x00013840:    e1a02005    . ..    MOV      r2,r5
+        0x00013844:    e54be02f    /.K.    STRB     r14,[r11,#-0x2f]
+        0x00013848:    e51be074    t...    LDR      r14,[r11,#-0x74]
+        0x0001384c:    e50b1070    p...    STR      r1,[r11,#-0x70]
+        0x00013850:    e24b104c    L.K.    SUB      r1,r11,#0x4c
+        0x00013854:    e51bc084    ....    LDR      r12,[r11,#-0x84]
+        0x00013858:    e5d97058    Xp..    LDRB     r7,[r9,#0x58]
+        0x0001385c:    e50be03c    <...    STR      r14,[r11,#-0x3c]
+        0x00013860:    e51be070    p...    LDR      r14,[r11,#-0x70]
+        0x00013864:    e6ef407c    |@..    UXTB     r4,r12
+        0x00013868:    858a34b0    .4..    STRHI    r3,[r10,#0x4b0]
+        0x0001386c:    e1a03006    .0..    MOV      r3,r6
+        0x00013870:    e5d9c058    X...    LDRB     r12,[r9,#0x58]
+        0x00013874:    e54b8032    2.K.    STRB     r8,[r11,#-0x32]
+        0x00013878:    e3a08000    ....    MOV      r8,#0
+        0x0001387c:    e50b0044    D...    STR      r0,[r11,#-0x44]
+        0x00013880:    e1a00004    ....    MOV      r0,r4
+        0x00013884:    e54b7030    0pK.    STRB     r7,[r11,#-0x30]
+        0x00013888:    e54be02d    -.K.    STRB     r14,[r11,#-0x2d]
+        0x0001388c:    e51be06c    l...    LDR      r14,[r11,#-0x6c]
+        0x00013890:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00013894:    e58d8004    ....    STR      r8,[r13,#4]
+        0x00013898:    e54be02e    ..K.    STRB     r14,[r11,#-0x2e]
+        0x0001389c:    ebfffffe    ....    BL       DE_SCAL_Config_Src  ; 0x3e7c Section #1
+        0x000138a0:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x000138a4:    e1a02005    . ..    MOV      r2,r5
+        0x000138a8:    e1a03006    .0..    MOV      r3,r6
+        0x000138ac:    e1a00004    ....    MOV      r0,r4
+        0x000138b0:    e24be040    @.K.    SUB      r14,r11,#0x40
+        0x000138b4:    e24bc032    2.K.    SUB      r12,r11,#0x32
+        0x000138b8:    e88d5000    .P..    STM      r13,{r12,r14}
+        0x000138bc:    e24bc02e    ..K.    SUB      r12,r11,#0x2e
+        0x000138c0:    e58d800c    ....    STR      r8,[r13,#0xc]
+        0x000138c4:    e58dc008    ....    STR      r12,[r13,#8]
+        0x000138c8:    ebfffffe    ....    BL       DE_SCAL_Set_Init_Phase  ; 0x47c4 Section #1
+        0x000138cc:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x000138d0:    e1a02005    . ..    MOV      r2,r5
+        0x000138d4:    e1a03006    .0..    MOV      r3,r6
+        0x000138d8:    e1a00004    ....    MOV      r0,r4
+        0x000138dc:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x000138e0:    e24be032    2.K.    SUB      r14,r11,#0x32
+        0x000138e4:    e58dc004    ....    STR      r12,[r13,#4]
+        0x000138e8:    e58de000    ....    STR      r14,[r13,#0]
+        0x000138ec:    e24be02e    ..K.    SUB      r14,r11,#0x2e
+        0x000138f0:    e58de008    ....    STR      r14,[r13,#8]
+        0x000138f4:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Factor  ; 0x4b00 Section #1
+        0x000138f8:    e5dac4cc    ....    LDRB     r12,[r10,#0x4cc]
+        0x000138fc:    e24b1030    0.K.    SUB      r1,r11,#0x30
+        0x00013900:    e1a02005    . ..    MOV      r2,r5
+        0x00013904:    e1a03006    .0..    MOV      r3,r6
+        0x00013908:    e1a00004    ....    MOV      r0,r4
+        0x0001390c:    e24be032    2.K.    SUB      r14,r11,#0x32
+        0x00013910:    e58dc00c    ....    STR      r12,[r13,#0xc]
+        0x00013914:    e24bc040    @.K.    SUB      r12,r11,#0x40
+        0x00013918:    e58de000    ....    STR      r14,[r13,#0]
+        0x0001391c:    e24be02e    ..K.    SUB      r14,r11,#0x2e
+        0x00013920:    e98d5000    .P..    STMIB    r13,{r12,r14}
+        0x00013924:    ebfffffe    ....    BL       DE_SCAL_Set_Scaling_Coef  ; 0x4d70 Section #1
+        0x00013928:    e5d9c068    h...    LDRB     r12,[r9,#0x68]
+        0x0001392c:    e1a00004    ....    MOV      r0,r4
+        0x00013930:    e5d93069    i0..    LDRB     r3,[r9,#0x69]
+        0x00013934:    e5d92064    d ..    LDRB     r2,[r9,#0x64]
+        0x00013938:    e5d91062    b...    LDRB     r1,[r9,#0x62]
+        0x0001393c:    e58dc000    ....    STR      r12,[r13,#0]
+        0x00013940:    ebfffffe    ....    BL       DE_SCAL_Set_Di_Ctrl  ; 0x53ec Section #1
+        0x00013944:    e51b1078    x...    LDR      r1,[r11,#-0x78]
+        0x00013948:    e1a00004    ....    MOV      r0,r4
+        0x0001394c:    ebfffffe    ....    BL       DE_SCAL_Set_Di_PreFrame_Addr  ; 0x5460 Section #1
+        0x00013950:    e51b107c    |...    LDR      r1,[r11,#-0x7c]
+        0x00013954:    e51b2080    . ..    LDR      r2,[r11,#-0x80]
+        0x00013958:    e1a00004    ....    MOV      r0,r4
+        0x0001395c:    ebfffffe    ....    BL       DE_SCAL_Set_Di_MafFlag_Src  ; 0x5488 Section #1
+        0x00013960:    e24b3040    @0K.    SUB      r3,r11,#0x40
+        0x00013964:    e1a00004    ....    MOV      r0,r4
+        0x00013968:    e24b1032    2.K.    SUB      r1,r11,#0x32
+        0x0001396c:    e24b202e    . K.    SUB      r2,r11,#0x2e
+        0x00013970:    ebfffffe    ....    BL       DE_SCAL_Set_Out_Size  ; 0x51d4 Section #1
+        0x00013974:    e3a03001    .0..    MOV      r3,#1
+        0x00013978:    e5ca3454    T4..    STRB     r3,[r10,#0x454]
+        0x0001397c:    e51b1084    ....    LDR      r1,[r11,#-0x84]
+        0x00013980:    e28aa094    ....    ADD      r10,r10,#0x94
+        0x00013984:    e51b2068    h ..    LDR      r2,[r11,#-0x68]
+        0x00013988:    e289906c    l...    ADD      r9,r9,#0x6c
+        0x0001398c:    e2811001    ....    ADD      r1,r1,#1
+        0x00013990:    e50b1084    ....    STR      r1,[r11,#-0x84]
+        0x00013994:    e3510002    ..Q.    CMP      r1,#2
+        0x00013998:    e282206c    l ..    ADD      r2,r2,#0x6c
+        0x0001399c:    e50b2068    h ..    STR      r2,[r11,#-0x68]
+        0x000139a0:    1affff38    8...    BNE      {pc} - 0x318  ; 0x13688
+        0x000139a4:    e3a00000    ....    MOV      r0,#0
+        0x000139a8:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x000139ac:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x000139b0:    00000000    ....    DCD    0 ; gdisp
+        0x000139b4:    00004c5c    \L..    DCD    19548 ; [Section 17]
+    LCD_power_on
+    $a
+        0x000139b8:    e1a0c00d    ....    MOV      r12,r13
+        0x000139bc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000139c0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000139c4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_power_off
+        0x000139c8:    e1a0c00d    ....    MOV      r12,r13
+        0x000139cc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000139d0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000139d4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_bl_open
+        0x000139d8:    e1a0c00d    ....    MOV      r12,r13
+        0x000139dc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000139e0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000139e4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_bl_close
+        0x000139e8:    e1a0c00d    ....    MOV      r12,r13
+        0x000139ec:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x000139f0:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x000139f4:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_get_panel_funs_0
+        0x000139f8:    e1a0c00d    ....    MOV      r12,r13
+        0x000139fc:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013a00:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013a04:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [LCD_cfg_panel_info = 0x13a20] = 0
+        0x00013a08:    e5803000    .0..    STR      r3,[r0,#0]
+        0x00013a0c:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [LCD_open_flow = 0x13a24] = 0
+        0x00013a10:    e5803004    .0..    STR      r3,[r0,#4]
+        0x00013a14:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [LCD_close_flow = 0x13a28] = 0
+        0x00013a18:    e5803008    .0..    STR      r3,[r0,#8]
+        0x00013a1c:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00013a20:    00000000    ....    DCD    0 ; LCD_cfg_panel_info
+        0x00013a24:    00000000    ....    DCD    0 ; LCD_open_flow
+        0x00013a28:    00000000    ....    DCD    0 ; LCD_close_flow
+    LCD_close_flow
+    $a
+        0x00013a2c:    e1a0c00d    ....    MOV      r12,r13
+        0x00013a30:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00013a34:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013a38:    e59f1030    0...    LDR      r1,[pc,#48]   ; [LCD_bl_close = 0x13a70] = 0
+        0x00013a3c:    e1a04000    .@..    MOV      r4,r0
+        0x00013a40:    e3a02000    . ..    MOV      r2,#0
+        0x00013a44:    ebfffffe    ....    BL       LCD_CLOSE_FUNC  ; 0xf09c Section #1
+        0x00013a48:    e1a00004    ....    MOV      r0,r4
+        0x00013a4c:    e59f1020     ...    LDR      r1,[pc,#32]   ; [TCON_close = 0x13a74] = 0
+        0x00013a50:    e3a02000    . ..    MOV      r2,#0
+        0x00013a54:    ebfffffe    ....    BL       LCD_CLOSE_FUNC  ; 0xf09c Section #1
+        0x00013a58:    e1a00004    ....    MOV      r0,r4
+        0x00013a5c:    e59f1014    ....    LDR      r1,[pc,#20]   ; [LCD_power_off = 0x13a78] = 0
+        0x00013a60:    e3a02014    . ..    MOV      r2,#0x14
+        0x00013a64:    ebfffffe    ....    BL       LCD_CLOSE_FUNC  ; 0xf09c Section #1
+        0x00013a68:    e3a00000    ....    MOV      r0,#0
+        0x00013a6c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013a70:    00000000    ....    DCD    0 ; LCD_bl_close
+        0x00013a74:    00000000    ....    DCD    0 ; TCON_close
+        0x00013a78:    00000000    ....    DCD    0 ; LCD_power_off
+    LCD_open_flow
+    $a
+        0x00013a7c:    e1a0c00d    ....    MOV      r12,r13
+        0x00013a80:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00013a84:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013a88:    e59f1030    0...    LDR      r1,[pc,#48]   ; [LCD_power_on = 0x13ac0] = 0
+        0x00013a8c:    e1a04000    .@..    MOV      r4,r0
+        0x00013a90:    e3a0200a    . ..    MOV      r2,#0xa
+        0x00013a94:    ebfffffe    ....    BL       LCD_OPEN_FUNC  ; 0xf050 Section #1
+        0x00013a98:    e1a00004    ....    MOV      r0,r4
+        0x00013a9c:    e59f1020     ...    LDR      r1,[pc,#32]   ; [TCON_open = 0x13ac4] = 0
+        0x00013aa0:    e3a020c8    . ..    MOV      r2,#0xc8
+        0x00013aa4:    ebfffffe    ....    BL       LCD_OPEN_FUNC  ; 0xf050 Section #1
+        0x00013aa8:    e1a00004    ....    MOV      r0,r4
+        0x00013aac:    e59f1014    ....    LDR      r1,[pc,#20]   ; [LCD_bl_open = 0x13ac8] = 0
+        0x00013ab0:    e3a02000    . ..    MOV      r2,#0
+        0x00013ab4:    ebfffffe    ....    BL       LCD_OPEN_FUNC  ; 0xf050 Section #1
+        0x00013ab8:    e3a00000    ....    MOV      r0,#0
+        0x00013abc:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013ac0:    00000000    ....    DCD    0 ; LCD_power_on
+        0x00013ac4:    00000000    ....    DCD    0 ; TCON_open
+        0x00013ac8:    00000000    ....    DCD    0 ; LCD_bl_open
+    LCD_cfg_panel_info
+    $a
+        0x00013acc:    e1a0c00d    ....    MOV      r12,r13
+        0x00013ad0:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00013ad4:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013ad8:    e3a01088    ....    MOV      r1,#0x88
+        0x00013adc:    e1a04000    .@..    MOV      r4,r0
+        0x00013ae0:    ebfffffe    ....    BL       __memzero  ;
+        0x00013ae4:    e3a03e32    2>..    MOV      r3,#0x320
+        0x00013ae8:    e1c430b6    .0..    STRH     r3,[r4,#6]
+        0x00013aec:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00013af0:    e1c430b8    .0..    STRH     r3,[r4,#8]
+        0x00013af4:    e3a03021    !0..    MOV      r3,#0x21
+        0x00013af8:    e1c430ba    .0..    STRH     r3,[r4,#0xa]
+        0x00013afc:    e3a030d7    .0..    MOV      r3,#0xd7
+        0x00013b00:    e1c431b4    .1..    STRH     r3,[r4,#0x14]
+        0x00013b04:    e3a02001    . ..    MOV      r2,#1
+        0x00013b08:    e59f309c    .0..    LDR      r3,[pc,#156]  ; [0x13bac] = 0x202020
+        0x00013b0c:    e584207c    | ..    STR      r2,[r4,#0x7c]
+        0x00013b10:    e300241f    .$..    MOV      r2,#0x41f
+        0x00013b14:    e1c421b0    .!..    STRH     r2,[r4,#0x10]
+        0x00013b18:    e2422005    . B.    SUB      r2,r2,#5
+        0x00013b1c:    e5843074    t0..    STR      r3,[r4,#0x74]
+        0x00013b20:    e3a03022    "0..    MOV      r3,#0x22
+        0x00013b24:    e1c420be    . ..    STRH     r2,[r4,#0xe]
+        0x00013b28:    e1c431b2    .1..    STRH     r3,[r4,#0x12]
+        0x00013b2c:    e3a03000    .0..    MOV      r3,#0
+        0x00013b30:    e5c43005    .0..    STRB     r3,[r4,#5]
+        0x00013b34:    e5c43004    .0..    STRB     r3,[r4,#4]
+        0x00013b38:    e5c43016    .0..    STRB     r3,[r4,#0x16]
+        0x00013b3c:    e1c431bc    .1..    STRH     r3,[r4,#0x1c]
+        0x00013b40:    e5c4301f    .0..    STRB     r3,[r4,#0x1f]
+        0x00013b44:    e5c4301e    .0..    STRB     r3,[r4,#0x1e]
+        0x00013b48:    e5c43017    .0..    STRB     r3,[r4,#0x17]
+        0x00013b4c:    e5c43019    .0..    STRB     r3,[r4,#0x19]
+        0x00013b50:    e5c4301a    .0..    STRB     r3,[r4,#0x1a]
+        0x00013b54:    e584306c    l0..    STR      r3,[r4,#0x6c]
+        0x00013b58:    e5843070    p0..    STR      r3,[r4,#0x70]
+        0x00013b5c:    e5843078    x0..    STR      r3,[r4,#0x78]
+        0x00013b60:    e5843034    40..    STR      r3,[r4,#0x34]
+        0x00013b64:    e5843030    00..    STR      r3,[r4,#0x30]
+        0x00013b68:    e584302c    ,0..    STR      r3,[r4,#0x2c]
+        0x00013b6c:    e5843060    `0..    STR      r3,[r4,#0x60]
+        0x00013b70:    e5843064    d0..    STR      r3,[r4,#0x64]
+        0x00013b74:    e5843058    X0..    STR      r3,[r4,#0x58]
+        0x00013b78:    e5843050    P0..    STR      r3,[r4,#0x50]
+        0x00013b7c:    e584304c    L0..    STR      r3,[r4,#0x4c]
+        0x00013b80:    e5843040    @0..    STR      r3,[r4,#0x40]
+        0x00013b84:    e584303c    <0..    STR      r3,[r4,#0x3c]
+        0x00013b88:    e5843038    80..    STR      r3,[r4,#0x38]
+        0x00013b8c:    e5843054    T0..    STR      r3,[r4,#0x54]
+        0x00013b90:    e584305c    \0..    STR      r3,[r4,#0x5c]
+        0x00013b94:    e5843020     0..    STR      r3,[r4,#0x20]
+        0x00013b98:    e5843048    H0..    STR      r3,[r4,#0x48]
+        0x00013b9c:    e5843044    D0..    STR      r3,[r4,#0x44]
+        0x00013ba0:    e5843024    $0..    STR      r3,[r4,#0x24]
+        0x00013ba4:    e5843028    (0..    STR      r3,[r4,#0x28]
+        0x00013ba8:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013bac:    00202020       .    DCD    2105376
+    LCD_power_on
+    $a
+        0x00013bb0:    e1a0c00d    ....    MOV      r12,r13
+        0x00013bb4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013bb8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013bbc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_power_off
+        0x00013bc0:    e1a0c00d    ....    MOV      r12,r13
+        0x00013bc4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013bc8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013bcc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_bl_open
+        0x00013bd0:    e1a0c00d    ....    MOV      r12,r13
+        0x00013bd4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013bd8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013bdc:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_bl_close
+        0x00013be0:    e1a0c00d    ....    MOV      r12,r13
+        0x00013be4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013be8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013bec:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    LCD_get_panel_funs_1
+        0x00013bf0:    e1a0c00d    ....    MOV      r12,r13
+        0x00013bf4:    e92dd800    ..-.    PUSH     {r11,r12,r14,pc}
+        0x00013bf8:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013bfc:    e59f3014    .0..    LDR      r3,[pc,#20]   ; [LCD_cfg_panel_info = 0x13c18] = 0
+        0x00013c00:    e5803000    .0..    STR      r3,[r0,#0]
+        0x00013c04:    e59f3010    .0..    LDR      r3,[pc,#16]   ; [LCD_open_flow = 0x13c1c] = 0
+        0x00013c08:    e5803004    .0..    STR      r3,[r0,#4]
+        0x00013c0c:    e59f300c    .0..    LDR      r3,[pc,#12]   ; [LCD_close_flow = 0x13c20] = 0
+        0x00013c10:    e5803008    .0..    STR      r3,[r0,#8]
+        0x00013c14:    e89da800    ....    LDM      r13,{r11,r13,pc}
+    $d
+        0x00013c18:    00000000    ....    DCD    0 ; LCD_cfg_panel_info
+        0x00013c1c:    00000000    ....    DCD    0 ; LCD_open_flow
+        0x00013c20:    00000000    ....    DCD    0 ; LCD_close_flow
+    LCD_close_flow
+    $a
+        0x00013c24:    e1a0c00d    ....    MOV      r12,r13
+        0x00013c28:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00013c2c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013c30:    e59f1030    0...    LDR      r1,[pc,#48]   ; [LCD_bl_close = 0x13c68] = 0
+        0x00013c34:    e1a04000    .@..    MOV      r4,r0
+        0x00013c38:    e3a02000    . ..    MOV      r2,#0
+        0x00013c3c:    ebfffffe    ....    BL       LCD_CLOSE_FUNC  ; 0xf09c Section #1
+        0x00013c40:    e1a00004    ....    MOV      r0,r4
+        0x00013c44:    e59f1020     ...    LDR      r1,[pc,#32]   ; [TCON_close = 0x13c6c] = 0
+        0x00013c48:    e3a02000    . ..    MOV      r2,#0
+        0x00013c4c:    ebfffffe    ....    BL       LCD_CLOSE_FUNC  ; 0xf09c Section #1
+        0x00013c50:    e1a00004    ....    MOV      r0,r4
+        0x00013c54:    e59f1014    ....    LDR      r1,[pc,#20]   ; [LCD_power_off = 0x13c70] = 0
+        0x00013c58:    e3a02014    . ..    MOV      r2,#0x14
+        0x00013c5c:    ebfffffe    ....    BL       LCD_CLOSE_FUNC  ; 0xf09c Section #1
+        0x00013c60:    e3a00000    ....    MOV      r0,#0
+        0x00013c64:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013c68:    00000000    ....    DCD    0 ; LCD_bl_close
+        0x00013c6c:    00000000    ....    DCD    0 ; TCON_close
+        0x00013c70:    00000000    ....    DCD    0 ; LCD_power_off
+    LCD_open_flow
+    $a
+        0x00013c74:    e1a0c00d    ....    MOV      r12,r13
+        0x00013c78:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00013c7c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013c80:    e59f1030    0...    LDR      r1,[pc,#48]   ; [LCD_power_on = 0x13cb8] = 0
+        0x00013c84:    e1a04000    .@..    MOV      r4,r0
+        0x00013c88:    e3a0200a    . ..    MOV      r2,#0xa
+        0x00013c8c:    ebfffffe    ....    BL       LCD_OPEN_FUNC  ; 0xf050 Section #1
+        0x00013c90:    e1a00004    ....    MOV      r0,r4
+        0x00013c94:    e59f1020     ...    LDR      r1,[pc,#32]   ; [TCON_open = 0x13cbc] = 0
+        0x00013c98:    e3a020c8    . ..    MOV      r2,#0xc8
+        0x00013c9c:    ebfffffe    ....    BL       LCD_OPEN_FUNC  ; 0xf050 Section #1
+        0x00013ca0:    e1a00004    ....    MOV      r0,r4
+        0x00013ca4:    e59f1014    ....    LDR      r1,[pc,#20]   ; [LCD_bl_open = 0x13cc0] = 0
+        0x00013ca8:    e3a02000    . ..    MOV      r2,#0
+        0x00013cac:    ebfffffe    ....    BL       LCD_OPEN_FUNC  ; 0xf050 Section #1
+        0x00013cb0:    e3a00000    ....    MOV      r0,#0
+        0x00013cb4:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013cb8:    00000000    ....    DCD    0 ; LCD_power_on
+        0x00013cbc:    00000000    ....    DCD    0 ; TCON_open
+        0x00013cc0:    00000000    ....    DCD    0 ; LCD_bl_open
+    LCD_cfg_panel_info
+    $a
+        0x00013cc4:    e1a0c00d    ....    MOV      r12,r13
+        0x00013cc8:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00013ccc:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00013cd0:    e3a01088    ....    MOV      r1,#0x88
+        0x00013cd4:    e1a04000    .@..    MOV      r4,r0
+        0x00013cd8:    ebfffffe    ....    BL       __memzero  ;
+        0x00013cdc:    e3a03e32    2>..    MOV      r3,#0x320
+        0x00013ce0:    e1c430b6    .0..    STRH     r3,[r4,#6]
+        0x00013ce4:    e3a03e1e    .>..    MOV      r3,#0x1e0
+        0x00013ce8:    e1c430b8    .0..    STRH     r3,[r4,#8]
+        0x00013cec:    e3a03021    !0..    MOV      r3,#0x21
+        0x00013cf0:    e1c430ba    .0..    STRH     r3,[r4,#0xa]
+        0x00013cf4:    e3a030d7    .0..    MOV      r3,#0xd7
+        0x00013cf8:    e1c431b4    .1..    STRH     r3,[r4,#0x14]
+        0x00013cfc:    e3a02001    . ..    MOV      r2,#1
+        0x00013d00:    e59f309c    .0..    LDR      r3,[pc,#156]  ; [0x13da4] = 0x202020
+        0x00013d04:    e584207c    | ..    STR      r2,[r4,#0x7c]
+        0x00013d08:    e300241f    .$..    MOV      r2,#0x41f
+        0x00013d0c:    e1c421b0    .!..    STRH     r2,[r4,#0x10]
+        0x00013d10:    e2422005    . B.    SUB      r2,r2,#5
+        0x00013d14:    e5843074    t0..    STR      r3,[r4,#0x74]
+        0x00013d18:    e3a03022    "0..    MOV      r3,#0x22
+        0x00013d1c:    e1c420be    . ..    STRH     r2,[r4,#0xe]
+        0x00013d20:    e1c431b2    .1..    STRH     r3,[r4,#0x12]
+        0x00013d24:    e3a03000    .0..    MOV      r3,#0
+        0x00013d28:    e5c43005    .0..    STRB     r3,[r4,#5]
+        0x00013d2c:    e5c43004    .0..    STRB     r3,[r4,#4]
+        0x00013d30:    e5c43016    .0..    STRB     r3,[r4,#0x16]
+        0x00013d34:    e1c431bc    .1..    STRH     r3,[r4,#0x1c]
+        0x00013d38:    e5c4301f    .0..    STRB     r3,[r4,#0x1f]
+        0x00013d3c:    e5c4301e    .0..    STRB     r3,[r4,#0x1e]
+        0x00013d40:    e5c43017    .0..    STRB     r3,[r4,#0x17]
+        0x00013d44:    e5c43019    .0..    STRB     r3,[r4,#0x19]
+        0x00013d48:    e5c4301a    .0..    STRB     r3,[r4,#0x1a]
+        0x00013d4c:    e584306c    l0..    STR      r3,[r4,#0x6c]
+        0x00013d50:    e5843070    p0..    STR      r3,[r4,#0x70]
+        0x00013d54:    e5843078    x0..    STR      r3,[r4,#0x78]
+        0x00013d58:    e5843034    40..    STR      r3,[r4,#0x34]
+        0x00013d5c:    e5843030    00..    STR      r3,[r4,#0x30]
+        0x00013d60:    e584302c    ,0..    STR      r3,[r4,#0x2c]
+        0x00013d64:    e5843060    `0..    STR      r3,[r4,#0x60]
+        0x00013d68:    e5843064    d0..    STR      r3,[r4,#0x64]
+        0x00013d6c:    e5843058    X0..    STR      r3,[r4,#0x58]
+        0x00013d70:    e5843050    P0..    STR      r3,[r4,#0x50]
+        0x00013d74:    e584304c    L0..    STR      r3,[r4,#0x4c]
+        0x00013d78:    e5843040    @0..    STR      r3,[r4,#0x40]
+        0x00013d7c:    e584303c    <0..    STR      r3,[r4,#0x3c]
+        0x00013d80:    e5843038    80..    STR      r3,[r4,#0x38]
+        0x00013d84:    e5843054    T0..    STR      r3,[r4,#0x54]
+        0x00013d88:    e584305c    \0..    STR      r3,[r4,#0x5c]
+        0x00013d8c:    e5843020     0..    STR      r3,[r4,#0x20]
+        0x00013d90:    e5843048    H0..    STR      r3,[r4,#0x48]
+        0x00013d94:    e5843044    D0..    STR      r3,[r4,#0x44]
+        0x00013d98:    e5843024    $0..    STR      r3,[r4,#0x24]
+        0x00013d9c:    e5843028    (0..    STR      r3,[r4,#0x28]
+        0x00013da0:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00013da4:    00202020       .    DCD    2105376
+
+** Section #2 '.rel.text' (SHT_REL)
+    Size   : 15120 bytes (alignment 4)
+    Symbol table '.symtab'
+    1890 relocations applied to section #1 '.text'
+
+
+** Section #3 '.init.text' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
+    Size   : 1260 bytes (alignment 4)
+
+    disp_module_init
+    init_module
+    $a
+        0x00000000:    e1a0c00d    ....    MOV      r12,r13
+        0x00000004:    e92dd870    p.-.    PUSH     {r4-r6,r11,r12,r14,pc}
+        0x00000008:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000000c:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x00000010:    e59f40c0    .@..    LDR      r4,[pc,#192]  ; [[Section 17] = 0xd8] = 0
+        0x00000014:    e59f00c0    ....    LDR      r0,[pc,#192]  ; [([Section 10] + 18) = 0xdc]  = 0x12
+        0x00000018:    ebfffffe    ....    BL       printk  ;
+        0x0000001c:    e3a02001    . ..    MOV      r2,#1
+        0x00000020:    e59f30b8    .0..    LDR      r3,[pc,#184]  ; [([Section 10] + 41) = 0xe0]  = 0x29
+        0x00000024:    e3a01000    ....    MOV      r1,#0
+        0x00000028:    e1a00004    ....    MOV      r0,r4
+        0x0000002c:    e59f60b0    .`..    LDR      r6,[pc,#176]  ; [__this_module = 0xe4] = 0
+        0x00000030:    ebfffffe    ....    BL       alloc_chrdev_region  ;
+        0x00000034:    ebfffffe    ....    BL       cdev_alloc  ;
+        0x00000038:    e59f10a8    ....    LDR      r1,[pc,#168]  ; [[Section 7] = 0xe8] = 0
+        0x0000003c:    e5840004    ....    STR      r0,[r4,#4]
+        0x00000040:    ebfffffe    ....    BL       cdev_init  ;
+        0x00000044:    e5940004    ....    LDR      r0,[r4,#4]
+        0x00000048:    e3a02001    . ..    MOV      r2,#1
+        0x0000004c:    e5806024    $`..    STR      r6,[r0,#0x24]
+        0x00000050:    e5941000    ....    LDR      r1,[r4,#0]
+        0x00000054:    ebfffffe    ....    BL       cdev_add  ;
+        0x00000058:    e2505000    .PP.    SUBS     r5,r0,#0
+        0x0000005c:    0a000004    ....    BEQ      {pc} + 0x18  ; 0x74
+        0x00000060:    e5941000    ....    LDR      r1,[r4,#0]
+        0x00000064:    e59f0080    ....    LDR      r0,[pc,#128]  ; [([Section 10] + 53) = 0xec]  = 0x35
+        0x00000068:    e1a01a21    !...    LSR      r1,r1,#20
+        0x0000006c:    ebfffffe    ....    BL       printk  ;
+        0x00000070:    ea000008    ....    B        {pc} + 0x28  ; 0x98
+        0x00000074:    e1a00006    ....    MOV      r0,r6
+        0x00000078:    e59f1070    p...    LDR      r1,[pc,#112]  ; [([Section 10] + 86) = 0xf0]  = 0x56
+        0x0000007c:    e2842008    . ..    ADD      r2,r4,#8
+        0x00000080:    ebfffffe    ....    BL       __class_create  ;
+        0x00000084:    e3700a01    ..p.    CMN      r0,#0x1000
+        0x00000088:    e5840008    ....    STR      r0,[r4,#8]
+        0x0000008c:    9a000003    ....    BLS      {pc} + 0x14  ; 0xa0
+        0x00000090:    e59f005c    \...    LDR      r0,[pc,#92]   ; [([Section 10] + 97) = 0xf4]  = 0x61
+        0x00000094:    ebfffffe    ....    BL       printk  ;
+        0x00000098:    e3e00000    ....    MVN      r0,#0
+        0x0000009c:    ea00000b    ....    B        {pc} + 0x34  ; 0xd0
+        0x000000a0:    e59fc050    P...    LDR      r12,[pc,#80]   ; [([Section 10] + 117) = 0xf8]  = 0x75
+        0x000000a4:    e1a01005    ....    MOV      r1,r5
+        0x000000a8:    e5942000    . ..    LDR      r2,[r4,#0]
+        0x000000ac:    e1a03005    .0..    MOV      r3,r5
+        0x000000b0:    e58dc000    ....    STR      r12,[r13,#0]
+        0x000000b4:    ebfffffe    ....    BL       device_create  ;
+        0x000000b8:    e59f003c    <...    LDR      r0,[pc,#60]   ; [[Section 12] = 0xfc] = 0
+        0x000000bc:    ebfffffe    ....    BL       platform_device_register  ;
+        0x000000c0:    e3500000    ..P.    CMP      r0,#0
+        0x000000c4:    1a000001    ....    BNE      {pc} + 0xc  ; 0xd0
+        0x000000c8:    e59f0030    0...    LDR      r0,[pc,#48]   ; [([Section 12] + 208) = 0x100]  = 0xd0
+        0x000000cc:    ebfffffe    ....    BL       platform_driver_register  ;
+        0x000000d0:    e24bd018    ..K.    SUB      r13,r11,#0x18
+        0x000000d4:    e89da870    p...    LDM      r13,{r4-r6,r11,r13,pc}
+    $d
+        0x000000d8:    00000000    ....    DCD    0 ; [Section 17]
+        0x000000dc:    00000012    ....    DCD    18 ; [Section 10]
+        0x000000e0:    00000029    )...    DCD    41 ; [Section 10]
+        0x000000e4:    00000000    ....    DCD    0 ; __this_module
+        0x000000e8:    00000000    ....    DCD    0 ; [Section 7]
+        0x000000ec:    00000035    5...    DCD    53 ; [Section 10]
+        0x000000f0:    00000056    V...    DCD    86 ; [Section 10]
+        0x000000f4:    00000061    a...    DCD    97 ; [Section 10]
+        0x000000f8:    00000075    u...    DCD    117 ; [Section 10]
+        0x000000fc:    00000000    ....    DCD    0 ; [Section 12]
+        0x00000100:    000000d0    ....    DCD    208 ; [Section 12]
+    disp_probe
+    $a
+        0x00000104:    e1a0c00d    ....    MOV      r12,r13
+        0x00000108:    e92ddff0    ..-.    PUSH     {r4-r12,r14,pc}
+        0x0000010c:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x00000110:    e24dd00c    ..M.    SUB      r13,r13,#0xc
+        0x00000114:    e59f4384    .C..    LDR      r4,[pc,#900]  ; [[Section 17] = 0x4a0] = 0
+        0x00000118:    e1a08000    ....    MOV      r8,r0
+        0x0000011c:    e59f0380    ....    LDR      r0,[pc,#896]  ; [([Section 10] + 214) = 0x4a4]  = 0xd6
+        0x00000120:    e2889008    ....    ADD      r9,r8,#8
+        0x00000124:    ebfffffe    ....    BL       printk  ;
+        0x00000128:    e2847060    `p..    ADD      r7,r4,#0x60
+        0x0000012c:    e1a01004    ....    MOV      r1,r4
+        0x00000130:    e1a00009    ....    MOV      r0,r9
+        0x00000134:    e5a1903c    <...    STR      r9,[r1,#0x3c]!
+        0x00000138:    e3a05000    .P..    MOV      r5,#0
+        0x0000013c:    ebfffffe    ....    BL       dev_set_drvdata  ;
+        0x00000140:    e1a02005    . ..    MOV      r2,r5
+        0x00000144:    e3a01c02    ....    MOV      r1,#0x200
+        0x00000148:    e1a00008    ....    MOV      r0,r8
+        0x0000014c:    e3a0a000    ....    MOV      r10,#0
+        0x00000150:    ebfffffe    ....    BL       platform_get_resource  ;
+        0x00000154:    e2506000    .`P.    SUBS     r6,r0,#0
+        0x00000158:    e59f0348    H...    LDR      r0,[pc,#840]  ; [iomem_resource = 0x4a8] = 0
+        0x0000015c:    1a000018    ....    BNE      {pc} + 0x68  ; 0x1c4
+        0x00000160:    e59f0344    D...    LDR      r0,[pc,#836]  ; [([Section 10] + 231) = 0x4ac]  = 0xe7
+        0x00000164:    ebfffffe    ....    BL       printk  ;
+        0x00000168:    e155000a    ..U.    CMP      r5,r10
+        0x0000016c:    03e05005    .P..    MVNEQ    r5,#5
+        0x00000170:    0a0000c2    ....    BEQ      {pc} + 0x310  ; 0x480
+        0x00000174:    e3550001    ..U.    CMP      r5,#1
+        0x00000178:    03e05005    .P..    MVNEQ    r5,#5
+        0x0000017c:    0a0000b7    ....    BEQ      {pc} + 0x2e4  ; 0x460
+        0x00000180:    e3550002    ..U.    CMP      r5,#2
+        0x00000184:    03e05005    .P..    MVNEQ    r5,#5
+        0x00000188:    0a0000ac    ....    BEQ      {pc} + 0x2b8  ; 0x440
+        0x0000018c:    e3550003    ..U.    CMP      r5,#3
+        0x00000190:    03e05005    .P..    MVNEQ    r5,#5
+        0x00000194:    0a0000a1    ....    BEQ      {pc} + 0x28c  ; 0x420
+        0x00000198:    e3550004    ..U.    CMP      r5,#4
+        0x0000019c:    03e05005    .P..    MVNEQ    r5,#5
+        0x000001a0:    0a000096    ....    BEQ      {pc} + 0x260  ; 0x400
+        0x000001a4:    e3550005    ..U.    CMP      r5,#5
+        0x000001a8:    03e05005    .P..    MVNEQ    r5,#5
+        0x000001ac:    0a00008b    ....    BEQ      {pc} + 0x234  ; 0x3e0
+        0x000001b0:    e3550006    ..U.    CMP      r5,#6
+        0x000001b4:    03e05005    .P..    MVNEQ    r5,#5
+        0x000001b8:    13e05005    .P..    MVNNE    r5,#5
+        0x000001bc:    1a000077    w...    BNE      {pc} + 0x1e4  ; 0x3a0
+        0x000001c0:    ea00007e    ~...    B        {pc} + 0x200  ; 0x3c0
+        0x000001c4:    e8960012    ....    LDM      r6,{r1,r4}
+        0x000001c8:    e2844001    .@..    ADD      r4,r4,#1
+        0x000001cc:    e5983000    .0..    LDR      r3,[r8,#0]
+        0x000001d0:    e0614004    .@a.    RSB      r4,r1,r4
+        0x000001d4:    e58da000    ....    STR      r10,[r13,#0]
+        0x000001d8:    e1a02004    . ..    MOV      r2,r4
+        0x000001dc:    ebfffffe    ....    BL       __request_region  ;
+        0x000001e0:    e1a01004    ....    MOV      r1,r4
+        0x000001e4:    e1a0200a    . ..    MOV      r2,r10
+        0x000001e8:    e3500000    ..P.    CMP      r0,#0
+        0x000001ec:    e5070020     ...    STR      r0,[r7,#-0x20]
+        0x000001f0:    1a000018    ....    BNE      {pc} + 0x68  ; 0x258
+        0x000001f4:    e59f02b4    ....    LDR      r0,[pc,#692]  ; [([Section 10] + 263) = 0x4b0]  = 0x107
+        0x000001f8:    ebfffffe    ....    BL       printk  ;
+        0x000001fc:    e3550000    ..U.    CMP      r5,#0
+        0x00000200:    03e05001    .P..    MVNEQ    r5,#1
+        0x00000204:    0a00009d    ....    BEQ      {pc} + 0x27c  ; 0x480
+        0x00000208:    e3550001    ..U.    CMP      r5,#1
+        0x0000020c:    03e05001    .P..    MVNEQ    r5,#1
+        0x00000210:    0a000092    ....    BEQ      {pc} + 0x250  ; 0x460
+        0x00000214:    e3550002    ..U.    CMP      r5,#2
+        0x00000218:    03e05001    .P..    MVNEQ    r5,#1
+        0x0000021c:    0a000087    ....    BEQ      {pc} + 0x224  ; 0x440
+        0x00000220:    e3550003    ..U.    CMP      r5,#3
+        0x00000224:    03e05001    .P..    MVNEQ    r5,#1
+        0x00000228:    0a00007c    |...    BEQ      {pc} + 0x1f8  ; 0x420
+        0x0000022c:    e3550004    ..U.    CMP      r5,#4
+        0x00000230:    03e05001    .P..    MVNEQ    r5,#1
+        0x00000234:    0a000071    q...    BEQ      {pc} + 0x1cc  ; 0x400
+        0x00000238:    e3550005    ..U.    CMP      r5,#5
+        0x0000023c:    03e05001    .P..    MVNEQ    r5,#1
+        0x00000240:    0a000066    f...    BEQ      {pc} + 0x1a0  ; 0x3e0
+        0x00000244:    e3550006    ..U.    CMP      r5,#6
+        0x00000248:    03e05001    .P..    MVNEQ    r5,#1
+        0x0000024c:    13e05001    .P..    MVNNE    r5,#1
+        0x00000250:    1a000052    R...    BNE      {pc} + 0x150  ; 0x3a0
+        0x00000254:    ea000059    Y...    B        {pc} + 0x16c  ; 0x3c0
+        0x00000258:    e5960000    ....    LDR      r0,[r6,#0]
+        0x0000025c:    ebfffffe    ....    BL       __arm_ioremap  ;
+        0x00000260:    e3500000    ..P.    CMP      r0,#0
+        0x00000264:    e5870000    ....    STR      r0,[r7,#0]
+        0x00000268:    e2877004    .p..    ADD      r7,r7,#4
+        0x0000026c:    1a000017    ....    BNE      {pc} + 0x64  ; 0x2d0
+        0x00000270:    e59f023c    <...    LDR      r0,[pc,#572]  ; [([Section 10] + 292) = 0x4b4]  = 0x124
+        0x00000274:    ebfffffe    ....    BL       printk  ;
+        0x00000278:    e3550000    ..U.    CMP      r5,#0
+        0x0000027c:    03e05005    .P..    MVNEQ    r5,#5
+        0x00000280:    0a000079    y...    BEQ      {pc} + 0x1ec  ; 0x46c
+        0x00000284:    e3550001    ..U.    CMP      r5,#1
+        0x00000288:    03e05005    .P..    MVNEQ    r5,#5
+        0x0000028c:    0a00006e    n...    BEQ      {pc} + 0x1c0  ; 0x44c
+        0x00000290:    e3550002    ..U.    CMP      r5,#2
+        0x00000294:    03e05005    .P..    MVNEQ    r5,#5
+        0x00000298:    0a000063    c...    BEQ      {pc} + 0x194  ; 0x42c
+        0x0000029c:    e3550003    ..U.    CMP      r5,#3
+        0x000002a0:    03e05005    .P..    MVNEQ    r5,#5
+        0x000002a4:    0a000058    X...    BEQ      {pc} + 0x168  ; 0x40c
+        0x000002a8:    e3550004    ..U.    CMP      r5,#4
+        0x000002ac:    03e05005    .P..    MVNEQ    r5,#5
+        0x000002b0:    0a00004d    M...    BEQ      {pc} + 0x13c  ; 0x3ec
+        0x000002b4:    e3550005    ..U.    CMP      r5,#5
+        0x000002b8:    03e05005    .P..    MVNEQ    r5,#5
+        0x000002bc:    0a000042    B...    BEQ      {pc} + 0x110  ; 0x3cc
+        0x000002c0:    e3550006    ..U.    CMP      r5,#6
+        0x000002c4:    03e05005    .P..    MVNEQ    r5,#5
+        0x000002c8:    1a00002e    ....    BNE      {pc} + 0xc0  ; 0x388
+        0x000002cc:    ea000036    6...    B        {pc} + 0xe0  ; 0x3ac
+        0x000002d0:    e2855001    .P..    ADD      r5,r5,#1
+        0x000002d4:    e3550008    ..U.    CMP      r5,#8
+        0x000002d8:    1affff98    ....    BNE      {pc} - 0x198  ; 0x140
+        0x000002dc:    e59f41bc    .A..    LDR      r4,[pc,#444]  ; [[Section 17] = 0x4a0] = 0
+        0x000002e0:    e1a0500a    .P..    MOV      r5,r10
+        0x000002e4:    e59f31cc    .1..    LDR      r3,[pc,#460]  ; [0x4b8] = 0xf1c20000
+        0x000002e8:    e59f01cc    ....    LDR      r0,[pc,#460]  ; [([Section 10] + 323) = 0x4bc]  = 0x143
+        0x000002ec:    e5941060    `...    LDR      r1,[r4,#0x60]
+        0x000002f0:    e5843080    .0..    STR      r3,[r4,#0x80]
+        0x000002f4:    e2433a1f    .:C.    SUB      r3,r3,#0x1f000
+        0x000002f8:    e5843084    .0..    STR      r3,[r4,#0x84]
+        0x000002fc:    e2833b7e    ~;..    ADD      r3,r3,#0x1f800
+        0x00000300:    e5843088    .0..    STR      r3,[r4,#0x88]
+        0x00000304:    ebfffffe    ....    BL       printk  ;
+        0x00000308:    e5941064    d...    LDR      r1,[r4,#0x64]
+        0x0000030c:    e59f01ac    ....    LDR      r0,[pc,#428]  ; [([Section 10] + 344) = 0x4c0]  = 0x158
+        0x00000310:    ebfffffe    ....    BL       printk  ;
+        0x00000314:    e5941068    h...    LDR      r1,[r4,#0x68]
+        0x00000318:    e59f01a4    ....    LDR      r0,[pc,#420]  ; [([Section 10] + 365) = 0x4c4]  = 0x16d
+        0x0000031c:    ebfffffe    ....    BL       printk  ;
+        0x00000320:    e594106c    l...    LDR      r1,[r4,#0x6c]
+        0x00000324:    e59f019c    ....    LDR      r0,[pc,#412]  ; [([Section 10] + 385) = 0x4c8]  = 0x181
+        0x00000328:    ebfffffe    ....    BL       printk  ;
+        0x0000032c:    e5941070    p...    LDR      r1,[r4,#0x70]
+        0x00000330:    e59f0194    ....    LDR      r0,[pc,#404]  ; [([Section 10] + 405) = 0x4cc]  = 0x195
+        0x00000334:    ebfffffe    ....    BL       printk  ;
+        0x00000338:    e5941074    t...    LDR      r1,[r4,#0x74]
+        0x0000033c:    e59f018c    ....    LDR      r0,[pc,#396]  ; [([Section 10] + 424) = 0x4d0]  = 0x1a8
+        0x00000340:    ebfffffe    ....    BL       printk  ;
+        0x00000344:    e5941078    x...    LDR      r1,[r4,#0x78]
+        0x00000348:    e59f0184    ....    LDR      r0,[pc,#388]  ; [([Section 10] + 443) = 0x4d4]  = 0x1bb
+        0x0000034c:    ebfffffe    ....    BL       printk  ;
+        0x00000350:    e594107c    |...    LDR      r1,[r4,#0x7c]
+        0x00000354:    e59f017c    |...    LDR      r0,[pc,#380]  ; [([Section 10] + 462) = 0x4d8]  = 0x1ce
+        0x00000358:    ebfffffe    ....    BL       printk  ;
+        0x0000035c:    e5941080    ....    LDR      r1,[r4,#0x80]
+        0x00000360:    e59f0174    t...    LDR      r0,[pc,#372]  ; [([Section 10] + 481) = 0x4dc]  = 0x1e1
+        0x00000364:    ebfffffe    ....    BL       printk  ;
+        0x00000368:    e5941084    ....    LDR      r1,[r4,#0x84]
+        0x0000036c:    e59f016c    l...    LDR      r0,[pc,#364]  ; [([Section 10] + 499) = 0x4e0]  = 0x1f3
+        0x00000370:    ebfffffe    ....    BL       printk  ;
+        0x00000374:    e5941088    ....    LDR      r1,[r4,#0x88]
+        0x00000378:    e59f0164    d...    LDR      r0,[pc,#356]  ; [([Section 10] + 518) = 0x4e4]  = 0x206
+        0x0000037c:    ebfffffe    ....    BL       printk  ;
+        0x00000380:    ebfffffe    ....    BL       DRV_DISP_Init  ; 0x104 Section #1
+        0x00000384:    ea000042    B...    B        {pc} + 0x110  ; 0x494
+        0x00000388:    e59f4110    .A..    LDR      r4,[pc,#272]  ; [[Section 17] = 0x4a0] = 0
+        0x0000038c:    e3e05005    .P..    MVN      r5,#5
+        0x00000390:    e594005c    \...    LDR      r0,[r4,#0x5c]
+        0x00000394:    ebfffffe    ....    BL       release_resource  ;
+        0x00000398:    e594005c    \...    LDR      r0,[r4,#0x5c]
+        0x0000039c:    ebfffffe    ....    BL       kfree  ;
+        0x000003a0:    e59f30f8    .0..    LDR      r3,[pc,#248]  ; [[Section 17] = 0x4a0] = 0
+        0x000003a4:    e5930078    x...    LDR      r0,[r3,#0x78]
+        0x000003a8:    ebfffffe    ....    BL       __iounmap  ;
+        0x000003ac:    e59f40ec    .@..    LDR      r4,[pc,#236]  ; [[Section 17] = 0x4a0] = 0
+        0x000003b0:    e5940058    X...    LDR      r0,[r4,#0x58]
+        0x000003b4:    ebfffffe    ....    BL       release_resource  ;
+        0x000003b8:    e5940058    X...    LDR      r0,[r4,#0x58]
+        0x000003bc:    ebfffffe    ....    BL       kfree  ;
+        0x000003c0:    e59f30d8    .0..    LDR      r3,[pc,#216]  ; [[Section 17] = 0x4a0] = 0
+        0x000003c4:    e5930074    t...    LDR      r0,[r3,#0x74]
+        0x000003c8:    ebfffffe    ....    BL       __iounmap  ;
+        0x000003cc:    e59f40cc    .@..    LDR      r4,[pc,#204]  ; [[Section 17] = 0x4a0] = 0
+        0x000003d0:    e5940054    T...    LDR      r0,[r4,#0x54]
+        0x000003d4:    ebfffffe    ....    BL       release_resource  ;
+        0x000003d8:    e5940054    T...    LDR      r0,[r4,#0x54]
+        0x000003dc:    ebfffffe    ....    BL       kfree  ;
+        0x000003e0:    e59f30b8    .0..    LDR      r3,[pc,#184]  ; [[Section 17] = 0x4a0] = 0
+        0x000003e4:    e5930070    p...    LDR      r0,[r3,#0x70]
+        0x000003e8:    ebfffffe    ....    BL       __iounmap  ;
+        0x000003ec:    e59f40ac    .@..    LDR      r4,[pc,#172]  ; [[Section 17] = 0x4a0] = 0
+        0x000003f0:    e5940050    P...    LDR      r0,[r4,#0x50]
+        0x000003f4:    ebfffffe    ....    BL       release_resource  ;
+        0x000003f8:    e5940050    P...    LDR      r0,[r4,#0x50]
+        0x000003fc:    ebfffffe    ....    BL       kfree  ;
+        0x00000400:    e59f3098    .0..    LDR      r3,[pc,#152]  ; [[Section 17] = 0x4a0] = 0
+        0x00000404:    e593006c    l...    LDR      r0,[r3,#0x6c]
+        0x00000408:    ebfffffe    ....    BL       __iounmap  ;
+        0x0000040c:    e59f408c    .@..    LDR      r4,[pc,#140]  ; [[Section 17] = 0x4a0] = 0
+        0x00000410:    e594004c    L...    LDR      r0,[r4,#0x4c]
+        0x00000414:    ebfffffe    ....    BL       release_resource  ;
+        0x00000418:    e594004c    L...    LDR      r0,[r4,#0x4c]
+        0x0000041c:    ebfffffe    ....    BL       kfree  ;
+        0x00000420:    e59f3078    x0..    LDR      r3,[pc,#120]  ; [[Section 17] = 0x4a0] = 0
+        0x00000424:    e5930068    h...    LDR      r0,[r3,#0x68]
+        0x00000428:    ebfffffe    ....    BL       __iounmap  ;
+        0x0000042c:    e59f406c    l@..    LDR      r4,[pc,#108]  ; [[Section 17] = 0x4a0] = 0
+        0x00000430:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x00000434:    ebfffffe    ....    BL       release_resource  ;
+        0x00000438:    e5940048    H...    LDR      r0,[r4,#0x48]
+        0x0000043c:    ebfffffe    ....    BL       kfree  ;
+        0x00000440:    e59f3058    X0..    LDR      r3,[pc,#88]   ; [[Section 17] = 0x4a0] = 0
+        0x00000444:    e5930064    d...    LDR      r0,[r3,#0x64]
+        0x00000448:    ebfffffe    ....    BL       __iounmap  ;
+        0x0000044c:    e59f404c    L@..    LDR      r4,[pc,#76]   ; [[Section 17] = 0x4a0] = 0
+        0x00000450:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x00000454:    ebfffffe    ....    BL       release_resource  ;
+        0x00000458:    e5940044    D...    LDR      r0,[r4,#0x44]
+        0x0000045c:    ebfffffe    ....    BL       kfree  ;
+        0x00000460:    e59f3038    80..    LDR      r3,[pc,#56]   ; [[Section 17] = 0x4a0] = 0
+        0x00000464:    e5930060    `...    LDR      r0,[r3,#0x60]
+        0x00000468:    ebfffffe    ....    BL       __iounmap  ;
+        0x0000046c:    e59f402c    ,@..    LDR      r4,[pc,#44]   ; [[Section 17] = 0x4a0] = 0
+        0x00000470:    e5940040    @...    LDR      r0,[r4,#0x40]
+        0x00000474:    ebfffffe    ....    BL       release_resource  ;
+        0x00000478:    e5940040    @...    LDR      r0,[r4,#0x40]
+        0x0000047c:    ebfffffe    ....    BL       kfree  ;
+        0x00000480:    e1a00009    ....    MOV      r0,r9
+        0x00000484:    e3a01000    ....    MOV      r1,#0
+        0x00000488:    ebfffffe    ....    BL       dev_set_drvdata  ;
+        0x0000048c:    e59f0054    T...    LDR      r0,[pc,#84]   ; [([Section 17] + 60) = 0x4e8]  = 0x3c
+        0x00000490:    ebfffffe    ....    BL       kfree  ;
+        0x00000494:    e1a00005    ....    MOV      r0,r5
+        0x00000498:    e24bd028    (.K.    SUB      r13,r11,#0x28
+        0x0000049c:    e89daff0    ....    LDM      r13,{r4-r11,r13,pc}
+    $d
+        0x000004a0:    00000000    ....    DCD    0 ; [Section 17]
+        0x000004a4:    000000d6    ....    DCD    214 ; [Section 10]
+        0x000004a8:    00000000    ....    DCD    0 ; iomem_resource
+        0x000004ac:    000000e7    ....    DCD    231 ; [Section 10]
+        0x000004b0:    00000107    ....    DCD    263 ; [Section 10]
+        0x000004b4:    00000124    $...    DCD    292 ; [Section 10]
+        0x000004b8:    f1c20000    ....    DCD    4056023040
+        0x000004bc:    00000143    C...    DCD    323 ; [Section 10]
+        0x000004c0:    00000158    X...    DCD    344 ; [Section 10]
+        0x000004c4:    0000016d    m...    DCD    365 ; [Section 10]
+        0x000004c8:    00000181    ....    DCD    385 ; [Section 10]
+        0x000004cc:    00000195    ....    DCD    405 ; [Section 10]
+        0x000004d0:    000001a8    ....    DCD    424 ; [Section 10]
+        0x000004d4:    000001bb    ....    DCD    443 ; [Section 10]
+        0x000004d8:    000001ce    ....    DCD    462 ; [Section 10]
+        0x000004dc:    000001e1    ....    DCD    481 ; [Section 10]
+        0x000004e0:    000001f3    ....    DCD    499 ; [Section 10]
+        0x000004e4:    00000206    ....    DCD    518 ; [Section 10]
+        0x000004e8:    0000003c    <...    DCD    60 ; [Section 17]
+
+** Section #4 '.rel.init.text' (SHT_REL)
+    Size   : 680 bytes (alignment 4)
+    Symbol table '.symtab'
+    85 relocations applied to section #3 '.init.text'
+
+
+** Section #5 '.exit.text' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
+    Size   : 92 bytes (alignment 4)
+
+    cleanup_module
+    disp_module_exit
+    $a
+        0x00000000:    e1a0c00d    ....    MOV      r12,r13
+        0x00000004:    e92dd830    0.-.    PUSH     {r4,r5,r11,r12,r14,pc}
+        0x00000008:    e24cb004    ..L.    SUB      r11,r12,#4
+        0x0000000c:    e59f503c    <P..    LDR      r5,[pc,#60]   ; [[Section 12] = 0x50] = 0
+        0x00000010:    e59f403c    <@..    LDR      r4,[pc,#60]   ; [[Section 17] = 0x54] = 0
+        0x00000014:    e59f003c    <...    LDR      r0,[pc,#60]   ; [([Section 10] + 122) = 0x58]  = 0x7a
+        0x00000018:    ebfffffe    ....    BL       printk  ;
+        0x0000001c:    ebfffffe    ....    BL       DRV_DISP_Exit  ; 0xc8 Section #1
+        0x00000020:    e28500d0    ....    ADD      r0,r5,#0xd0
+        0x00000024:    ebfffffe    ....    BL       platform_driver_unregister  ;
+        0x00000028:    e1a00005    ....    MOV      r0,r5
+        0x0000002c:    ebfffffe    ....    BL       platform_device_unregister  ;
+        0x00000030:    e5940008    ....    LDR      r0,[r4,#8]
+        0x00000034:    e5941000    ....    LDR      r1,[r4,#0]
+        0x00000038:    ebfffffe    ....    BL       device_destroy  ;
+        0x0000003c:    e5940008    ....    LDR      r0,[r4,#8]
+        0x00000040:    ebfffffe    ....    BL       class_destroy  ;
+        0x00000044:    e5940004    ....    LDR      r0,[r4,#4]
+        0x00000048:    ebfffffe    ....    BL       cdev_del  ;
+        0x0000004c:    e89da830    0...    LDM      r13,{r4,r5,r11,r13,pc}
+    $d
+        0x00000050:    00000000    ....    DCD    0 ; [Section 12]
+        0x00000054:    00000000    ....    DCD    0 ; [Section 17]
+        0x00000058:    0000007a    z...    DCD    122 ; [Section 10]
+
+** Section #6 '.rel.exit.text' (SHT_REL)
+    Size   : 80 bytes (alignment 4)
+    Symbol table '.symtab'
+    10 relocations applied to section #5 '.exit.text'
+
+
+** Section #7 '.rodata' (SHT_PROGBITS) [SHF_ALLOC]
+    Size   : 100 bytes (alignment 4)
+
+
+** Section #8 '.rel.rodata' (SHT_REL)
+    Size   : 56 bytes (alignment 4)
+    Symbol table '.symtab'
+    7 relocations applied to section #7 '.rodata'
+
+
+** Section #9 '.modinfo' (SHT_PROGBITS) [SHF_ALLOC]
+    Size   : 171 bytes
+
+
+** Section #10 '.rodata.str1.1' (SHT_PROGBITS) [SHF_ALLOC + SHF_MERGE + SHF_STRINGS]
+    Size   : 3603 bytes
+
+
+** Section #11 '__versions' (SHT_PROGBITS) [SHF_ALLOC]
+    Size   : 3328 bytes (alignment 4)
+
+
+** Section #12 '.data' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
+    Size   : 5632 bytes (alignment 8)
+
+
+** Section #13 '.rel.data' (SHT_REL)
+    Size   : 152 bytes (alignment 4)
+    Symbol table '.symtab'
+    19 relocations applied to section #12 '.data'
+
+
+** Section #14 '.gnu.linkonce.this_module' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
+    Size   : 292 bytes (alignment 4)
+
+
+** Section #15 '.rel.gnu.linkonce.this_module' (SHT_REL)
+    Size   : 16 bytes (alignment 4)
+    Symbol table '.symtab'
+    2 relocations applied to section #14 '.gnu.linkonce.this_module'
+
+
+** Section #16 '.note.gnu.build-id' (SHT_NOTE) [SHF_ALLOC]
+    Size   : 36 bytes (alignment 4)
+
+
+** Section #17 '.bss' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
+    Size   : 19764 bytes (alignment 4)
+
+
+** Section #18 '.note.GNU-stack' (SHT_PROGBITS)
+    Size   : 0 bytes
+
+
+** Section #19 '.ARM.attributes' (Processor specific section type)
+    Size   : 45 bytes
+
+
+** Section #20 '.comment' (SHT_PROGBITS)
+    Size   : 1548 bytes
+
+
+** Section #21 '.debug_aranges' (SHT_PROGBITS)
+    Size   : 1112 bytes
+
+
+** Section #22 '.rel.debug_aranges' (SHT_REL)
+    Size   : 568 bytes (alignment 4)
+    Symbol table '.symtab'
+    71 relocations applied to section #21 '.debug_aranges'
+
+
+** Section #23 '.debug_pubnames' (SHT_PROGBITS)
+    Size   : 13159 bytes
+
+
+** Section #24 '.rel.debug_pubnames' (SHT_REL)
+    Size   : 280 bytes (alignment 4)
+    Symbol table '.symtab'
+    35 relocations applied to section #23 '.debug_pubnames'
+
+
+** Section #25 '.debug_info' (SHT_PROGBITS)
+    Size   : 1324203 bytes
+
+
+** Section #26 '.rel.debug_info' (SHT_REL)
+    Size   : 601168 bytes (alignment 4)
+    Symbol table '.symtab'
+    75146 relocations applied to section #25 '.debug_info'
+
+
+** Section #27 '.debug_abbrev' (SHT_PROGBITS)
+    Size   : 31963 bytes
+
+
+** Section #28 '.debug_line' (SHT_PROGBITS)
+    Size   : 63899 bytes
+
+
+** Section #29 '.rel.debug_line' (SHT_REL)
+    Size   : 288 bytes (alignment 4)
+    Symbol table '.symtab'
+    36 relocations applied to section #28 '.debug_line'
+
+
+** Section #30 '.debug_frame' (SHT_PROGBITS)
+    Size   : 18892 bytes (alignment 4)
+
+
+** Section #31 '.rel.debug_frame' (SHT_REL)
+    Size   : 8528 bytes (alignment 4)
+    Symbol table '.symtab'
+    1066 relocations applied to section #30 '.debug_frame'
+
+
+** Section #32 '.debug_str' (SHT_PROGBITS) [SHF_MERGE + SHF_STRINGS]
+    Size   : 670144 bytes
+
+
+** Section #33 '.debug_loc' (SHT_PROGBITS)
+    Size   : 59533 bytes
+
+
+** Section #34 '.rel.debug_loc' (SHT_REL)
+    Size   : 1664 bytes (alignment 4)
+    Symbol table '.symtab'
+    208 relocations applied to section #33 '.debug_loc'
+
+
+** Section #35 '.debug_ranges' (SHT_PROGBITS)
+    Size   : 2680 bytes
+
+
+** Section #36 '.rel.debug_ranges' (SHT_REL)
+    Size   : 1296 bytes (alignment 4)
+    Symbol table '.symtab'
+    162 relocations applied to section #35 '.debug_ranges'
+
+
+** Section #37 '.shstrtab' (SHT_STRTAB)
+    Size   : 365 bytes
+
+
+** Section #38 '.symtab' (SHT_SYMTAB)
+    Size   : 25456 bytes (alignment 4)
+    String table '.strtab'
+    Last local symbol no. 1006
+
+
+** Section #39 '.strtab' (SHT_STRTAB)
+    Size   : 12628 bytes
+
+
diff --git a/drivers/video/sun4i/hdmi/Makefile b/drivers/video/sun4i/hdmi/Makefile
new file mode 100644
index 0000000..9287a7d
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/Makefile
@@ -0,0 +1,8 @@
+obj-$(CONFIG_LYCHEE_HDMI_SUN4I) += hdmi.o
+
+#hdmi-objs := anx7150/hdmi_core.o anx7150/hdmi_hal.o anx7150/hdmi_i2c.o\
+#            dev_hdmi.o drv_hdmi.o
+
+hdmi-objs := aw/hdmi_core.o aw/hdmi_hal.o aw/hdmi_interface.o aw/hdmi_edid.o\
+            dev_hdmi.o drv_hdmi.o
+
diff --git a/drivers/video/sun4i/hdmi/aw/hdmi_core.c b/drivers/video/sun4i/hdmi/aw/hdmi_core.c
new file mode 100644
index 0000000..a1fdd94
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/aw/hdmi_core.c
@@ -0,0 +1,478 @@
+#include "hdmi_core.h"
+
+__s32 			hdmi_state	=	HDMI_State_Idle;
+__bool          video_enable = 0;
+__s32 			video_mode  = 	HDMI720P_50;
+HDMI_AUDIO_INFO audio_info;
+__u8			EDID_Buf[1024];
+__u8 			Device_Support_VIC[512];
+__s32           HPD = 0;
+
+__u32 hdmi_pll = 0;//0:video pll 0; 1:video pll 1
+__u32 hdmi_clk = 297000000;
+
+HDMI_VIDE_INFO video_timing[] =
+{
+	//VIC                           PCLK  AVI_PR INPUTX INPUTY   HT   HBP   HFP HPSW  VT VBP VFP VPSW
+	{HDMI1440_480I     ,  13500000, 1,  720,  240,  858, 119,  19, 62,  525, 18, 4, 3},
+	{HDMI1440_576I     ,  13500000, 1,  720,  288,  864, 132,  12, 63,  625, 22, 2, 3},
+	{HDMI480P          ,  27000000, 0,  720,  480,  858, 122,  16, 62, 1050, 36, 9, 6},
+	{HDMI576P          ,  27000000, 0,  720,  576,  864, 132,  12, 64, 1250, 44, 5, 5},
+	{HDMI720P_50       ,  74250000, 0, 1280,  720, 1980, 260, 440, 40, 1500, 25, 5, 5},
+	{HDMI720P_60       ,  74250000, 0, 1280,  720, 1650, 260, 110, 40, 1500, 25, 5, 5},
+	{HDMI1080I_50      ,  74250000, 0, 1920,  540, 2640, 192, 528, 44, 1125, 20, 2, 5},
+	{HDMI1080I_60      ,  74250000, 0, 1920,  540, 2200, 192,  88, 44, 1125, 20, 2, 5},
+	{HDMI1080P_50      , 148500000, 0, 1920, 1080, 2640, 192, 528, 44, 2250, 41, 4, 5},
+	{HDMI1080P_60      , 148500000, 0, 1920, 1080, 2200, 192,  88, 44, 2250, 41, 4, 5},
+    {HDMI1080P_24_3D_FP, 148500000, 0, 1920, 2160, 2750, 192, 638, 44, 4500, 41, 4, 5},
+	{HDMI1080P_24      ,  74250000, 0, 1920, 1080, 2750, 192, 638, 44, 2250, 41, 4, 5},
+};
+
+__s32 hdmi_core_initial(void)
+{
+	hdmi_state	=	HDMI_State_Idle;
+	video_mode  = 	HDMI720P_50;
+	memset(&audio_info,0,sizeof(HDMI_AUDIO_INFO));
+	memset(Device_Support_VIC,0,sizeof(Device_Support_VIC));
+    HDMI_WUINT32(0x004,0x80000000);			//start hdmi controller
+	return 0;
+}
+
+__s32 main_Hpd_Check(void)
+{
+	__s32 i,times;
+	times    = 0;
+
+	for(i=0;i<3;i++)
+	{
+		hdmi_delay_ms(1);
+		if( HDMI_RUINT32(0x00c)&0x01)
+			times++;
+	}
+	if(times == 3)
+	   return 1;
+	else
+	   return 0;
+}
+
+__s32 hdmi_main_task_loop(void)
+{
+	static __u32 times = 0;
+
+	HPD = main_Hpd_Check();
+	if( !HPD )
+	{
+	    if((times++) >= 10)
+	    {
+	        times = 0;
+	        __inf("unplug state\n");
+	    }
+		if(hdmi_state > HDMI_State_Idle)
+		{
+			hdmi_state = HDMI_State_Wait_Hpd;
+		}
+
+		if(hdmi_state > HDMI_State_Wait_Hpd)
+		{
+			__inf("plugout\n");
+		}
+	}
+	switch(hdmi_state)
+    {
+    	case HDMI_State_Idle:
+    		 hdmi_state = 	HDMI_State_Wait_Hpd;
+    		 return 0;
+
+    	case HDMI_State_Wait_Hpd:
+    		 if(HPD)
+    		 {
+    		 	hdmi_state = 	HDMI_State_EDID_Parse;
+    		 	__inf("plugin\n");
+    		 }else
+    		 {
+    		 	return 0;
+    		 }
+
+    	case HDMI_State_Rx_Sense:
+
+    	case HDMI_State_EDID_Parse:
+    	     HDMI_WUINT32(0x004,0x80000000);
+    	     HDMI_WUINT32(0x208,(1<<31)+ (1<<30)+ (1<<29)+ (3<<27)+ (0<<26)+
+	    		       (1<<25)+ (0<<24)+ (0<<23)+ (4<<20)+ (7<<17)+
+	    		       (15<<12)+ (7<<8)+ (0x0f<<4)+(8<<0) );
+         	HDMI_WUINT32(0x200,0xfe800000);   			//txen enable
+        	HDMI_WUINT32(0x204,0x00D8C850);   			//ckss = 1
+
+            HDMI_WUINT32(0x20c, 0 << 21);
+
+
+    		 ParseEDID();
+    		 HDMI_RUINT32(0x5f0);
+
+    		 hdmi_state = HDMI_State_Wait_Video_config;
+
+    	case HDMI_State_Wait_Video_config:
+    	    if(video_enable)
+    		 {
+    		    hdmi_state = 	HDMI_State_Video_config;
+    		 }else
+    		 {
+    		 	return 0;
+    		 }
+
+    	case HDMI_State_Video_config:
+    		 video_config(video_mode);
+    		 hdmi_state = 	HDMI_State_Audio_config;
+
+    	case HDMI_State_Audio_config:
+    		 audio_config();
+    		 hdmi_state = 	HDMI_State_Playback;
+
+    	case HDMI_State_Playback:
+    		 return 0;
+
+		default:
+			 __wrn(" unkonwn hdmi state, set to idle\n");
+			 hdmi_state = HDMI_State_Idle;
+			 return 0;
+    }
+}
+
+
+__s32 Hpd_Check(void)
+{
+	if(HPD == 0)
+	{
+	   	return 0;
+	}else if(hdmi_state >= HDMI_State_Wait_Video_config)
+	{
+	   	return 1;
+	}else
+	{
+    	return 0;
+    }
+}
+
+__s32 get_video_info(__s32 vic)
+{
+	__s32 i,count;
+	count = sizeof(video_timing);
+	for(i=0;i<count;i++)
+	{
+		if(vic == video_timing[i].VIC)
+			return i;
+	}
+
+	__wrn("can't find the video timing parameters\n");
+	return -1;
+}
+
+__s32 get_audio_info(__s32 sample_rate)
+{
+   //ACR_N 32000 44100 48000 88200 96000 176400 192000
+   //		4096  6272  6144  12544 12288  25088  24576
+
+   __inf("sample_rate:%d in get_audio_info\n", sample_rate);
+
+   switch(sample_rate)
+    {
+    	case 32000 :{audio_info.ACR_N = 4096 ;
+    				 audio_info.CH_STATUS0 = (3 <<24);
+    				 audio_info.CH_STATUS1 = 0x0000000b;
+    				 break;}
+    	case 44100 :{audio_info.ACR_N = 6272 ;
+    				 audio_info.CH_STATUS0 = (0 <<24);
+    				 audio_info.CH_STATUS1 = 0x0000000b;
+    				 break;}
+    	case 48000 :{audio_info.ACR_N = 6144 ;
+    				 audio_info.CH_STATUS0 = (2 <<24);
+    				 audio_info.CH_STATUS1 = 0x0000000b;
+    				 break;}
+    	case 88200 :{audio_info.ACR_N = 12544;
+    				audio_info.CH_STATUS0 = (8 <<24);
+    				audio_info.CH_STATUS1 = 0x0000000b;
+    				break;}
+    	case 96000 :{audio_info.ACR_N = 12288;
+    				 audio_info.CH_STATUS0 = (10<<24);
+    				 audio_info.CH_STATUS1 = 0x0000000b;
+    				 break;}
+    	case 176400:{audio_info.ACR_N = 25088;
+    				 audio_info.CH_STATUS0 = (12<<24);
+    				 audio_info.CH_STATUS1 = 0x0000000b;
+    				 break;}
+    	case 192000:{audio_info.ACR_N = 24576;
+    				 audio_info.CH_STATUS0 = (14<<24);
+    				 audio_info.CH_STATUS1 = 0x0000000b;
+    				 break;}
+    	default:	{__wrn("un-support sample_rate,value=%d\n",sample_rate);
+    	             return -1;  }
+    }
+
+   if( (video_mode == HDMI1440_480I) || (video_mode == HDMI1440_576I) ||
+       (video_mode == HDMI480P)      || (video_mode == HDMI576P)       )
+   {
+   		 audio_info.CTS =   ((27000000/100) *(audio_info.ACR_N /128)) / (sample_rate/100);
+   }
+   else if( (video_mode == HDMI720P_50 ) || (video_mode == HDMI720P_60 ) ||
+            (video_mode == HDMI1080I_50) || (video_mode == HDMI1080I_60) || (video_mode == HDMI1080P_24) )
+   {
+   		 audio_info.CTS =   ((74250000/100) *(audio_info.ACR_N /128)) / (sample_rate/100);
+   }
+   else if( (video_mode == HDMI1080P_50) || (video_mode == HDMI1080P_60) ||
+            (video_mode == HDMI1080P_24_3D_FP) )
+   {
+   		 audio_info.CTS =   ((148500000/100) *(audio_info.ACR_N /128)) / (sample_rate/100);
+   }
+   else
+   {
+   		 __wrn("unkonwn video format when configure audio\n");
+   		 return -1;
+   }
+
+   __inf("audio CTS calc:%d\n",audio_info.CTS);
+
+   return 0;
+}
+
+__s32 video_config(__s32 vic)
+{
+
+	__s32 i, clk_div,reg_val;
+
+	__inf("video_config, vic:%d\n", vic);
+
+	i = get_video_info(vic);
+	if(  i == -1)
+		return 0;
+	else
+	    video_mode = vic;
+	HDMI_WUINT32(0x004,0x00000000);
+	HDMI_WUINT32(0x040,0x00000000);						//disable audio output
+	HDMI_WUINT32(0x010,0x00000000);						//disable video output
+    HDMI_WUINT32(0x008,0xffffffff);						//interrupt mask and clear all interrupt
+
+    if( (vic == HDMI1440_480I) || (vic == HDMI1440_576I) )		//interlace and repeation
+    {
+    	HDMI_WUINT32(0x010,0x00000011);
+    }
+    else if( (vic == HDMI1080I_50) || (vic == HDMI1080I_60) )	//interlace
+    {
+    	HDMI_WUINT32(0x010,0x00000010);
+    }else														//progressive
+    {
+    	HDMI_WUINT32(0x010,0x00000000);
+    }
+
+    if( (vic == HDMI1440_480I) || (vic == HDMI1440_576I) )			//need to use repeation
+    {
+     	HDMI_WUINT16(0x014,(video_timing[i].INPUTX<<1) -1);             	//active H
+     	HDMI_WUINT16(0x018,(video_timing[i].HBP<<1)    -1);           		//active HBP
+     	HDMI_WUINT16(0x01c,(video_timing[i].HFP<<1)    -1);         		//active HFP
+     	HDMI_WUINT16(0x020,(video_timing[i].HPSW<<1)   -1);        			//active HSPW
+    }
+    else
+    {
+     	HDMI_WUINT16(0x014,(video_timing[i].INPUTX<<0) -1);              	//active H
+     	HDMI_WUINT16(0x018,(video_timing[i].HBP<<0)    -1);            		//active HBP
+     	HDMI_WUINT16(0x01c,(video_timing[i].HFP<<0)    -1);         		//active HFP
+     	HDMI_WUINT16(0x020,(video_timing[i].HPSW<<0)   -1);               	//active HSPW
+    }
+
+    if( vic == HDMI1080P_24_3D_FP)
+    {
+    	HDMI_WUINT16(0x016,video_timing[i].INPUTY + 45 -1);             		//active V
+    }
+    else
+    {
+    	HDMI_WUINT16(0x016,video_timing[i].INPUTY   -1);             			//active V
+	}
+
+    HDMI_WUINT16(0x01a,video_timing[i].VBP    -1);               			//active VBP
+    HDMI_WUINT16(0x01e,video_timing[i].VFP    -1);                			//active VFP
+    HDMI_WUINT16(0x022,video_timing[i].VPSW   -1);              			//active VSPW
+
+    if( (vic == HDMI1440_480I) || (vic == HDMI1440_576I) ||
+        (vic == HDMI480P)      || (vic == HDMI576P)       )
+    {
+    	HDMI_WUINT16(0x024,0x00   );                		//Vsync/Hsync pol
+    }
+    else
+    {
+    	HDMI_WUINT16(0x024,0x03   );                		//Vsync/Hsync pol
+    }
+
+    HDMI_WUINT16(0x026,0x03e0 );                			//TX clock sequence
+
+
+    //avi packet
+    HDMI_WUINT8 (0x080,0x82);
+    HDMI_WUINT8 (0x081,0x02);
+    HDMI_WUINT8 (0x082,0x0d);
+    HDMI_WUINT8 (0x083,0xF7);
+    HDMI_WUINT8 (0x084,0x1E);
+    HDMI_WUINT8 (0x085,0x58);
+    HDMI_WUINT8 (0x086,0x00);
+    HDMI_WUINT8 (0x087,video_timing[i].VIC	 );
+    HDMI_WUINT8 (0x088,video_timing[i].AVI_PR);
+    HDMI_WUINT8 (0x089,0x00);
+    HDMI_WUINT8 (0x08a,0x00);
+    HDMI_WUINT8 (0x08b,0x00);
+    HDMI_WUINT8 (0x08c,0x00);
+    HDMI_WUINT8 (0x08d,0x00);
+    HDMI_WUINT8 (0x08e,0x00);
+    HDMI_WUINT8 (0x08f,0x00);
+    HDMI_WUINT8 (0x090,0x00);
+
+    reg_val = 0x82 + 0x02 + 0x0d + 0x1E + 0x58 +
+              video_timing[i].VIC + video_timing[i].AVI_PR;
+    reg_val = reg_val & 0xff;
+    if(reg_val != 0)
+    	reg_val = 0x100 - reg_val;
+    HDMI_WUINT8 (0x083,reg_val);
+    //gcp packet
+    HDMI_WUINT32(0x0e0,0x00000003);
+    HDMI_WUINT32(0x0e4,0x00000000);
+
+    //vendor infoframe
+    HDMI_WUINT8 (0x240,0x81);
+    HDMI_WUINT8 (0x241,0x01);
+    HDMI_WUINT8 (0x242,15  );	//length
+
+    HDMI_WUINT8 (0x243,0xa1);	//pb0:checksum
+    HDMI_WUINT8 (0x244,0x03);	//pb1-3:24bit ieee id
+    HDMI_WUINT8 (0x245,0x0c);  	//length
+    HDMI_WUINT8 (0x246,0x00);
+
+    HDMI_WUINT8 (0x247,0x40);   //pb4
+    HDMI_WUINT8 (0x248,0x08);	//pb5:3d present, frame packing
+    HDMI_WUINT8 (0x249,0x00);  	//pb6:extra data for 3d
+    HDMI_WUINT8 (0x24a,0x08);  	//pb7: matadata type=0,len=8
+
+    HDMI_WUINT8 (0x24b,0x00);
+    HDMI_WUINT8 (0x24c,0x00);
+    HDMI_WUINT8 (0x24d,0x00);
+    HDMI_WUINT8 (0x24e,0x00);
+    HDMI_WUINT8 (0x24f,0x00);
+    HDMI_WUINT8 (0x250,0x00);
+    HDMI_WUINT8 (0x251,0x00);
+    HDMI_WUINT8 (0x252,0x00);
+
+    //packet config
+    if( vic != HDMI1080P_24_3D_FP)
+    {
+    	HDMI_WUINT32(0x2f0,0x0000f321);
+    	HDMI_WUINT32(0x2f4,0x0000000f);
+    }
+    else
+    {
+    	HDMI_WUINT32(0x2f0,0x00005321);
+    	HDMI_WUINT32(0x2f4,0x0000000f);
+    }
+
+    HDMI_WUINT32(0x300,0x08000000);			// set input sync enable
+
+    HDMI_WUINT8 (0x013,0xc0);				//hdmi mode
+    HDMI_WUINT32(0x004,0x80000000);			//start hdmi controller
+    //////////////////////
+    //hdmi pll setting
+    if( (vic == HDMI1440_480I) || (vic == HDMI1440_576I) ||
+        (vic == HDMI480P)      || (vic == HDMI576P)       )
+    {
+        clk_div = hdmi_clk/video_timing[i].PCLK;
+    }
+    else
+    {
+        clk_div = hdmi_clk/video_timing[i].PCLK;
+    }
+	clk_div &= 0x0f;
+	HDMI_WUINT32(0x208,(1<<31)+ (1<<30)+ (1<<29)+ (3<<27)+ (0<<26)+
+	    		       (1<<25)+ (0<<24)+ (0<<23)+ (4<<20)+ (7<<17)+
+	    		       (15<<12)+ (7<<8)+ (clk_div<<4)+(8<<0) );
+	// tx driver setting
+ 	HDMI_WUINT32(0x200,0xfe800000);   			//txen enable
+	HDMI_WUINT32(0x204,0x00D8C850);   			//ckss = 1
+
+    HDMI_WUINT32(0x20c, hdmi_pll << 21);
+
+    return 0;
+}
+
+__s32 audio_config(void)
+{
+	__s32 i;
+
+	__inf("audio_config, sample_rate:%d\n", audio_info.sample_rate);
+
+	HDMI_WUINT32(0x040,0x00000000);
+	HDMI_WUINT32(0x040,0x40000000);
+	while(HDMI_RUINT32(0x040) != 0);
+	HDMI_WUINT32(0x040,0x40000000);
+	while(HDMI_RUINT32(0x040) != 0);
+
+	if(!audio_info.audio_en)
+	{
+        return 0;
+	}
+	i = get_audio_info(audio_info.sample_rate);
+	if(i == -1)
+	{
+		return 0;
+	}
+
+	if(audio_info.channel_num == 1)
+    {
+          HDMI_WUINT32(0x044,0x00000000);             	//audio fifo rst and select ddma, 2 ch 16bit pcm
+          HDMI_WUINT32(0x048,0x00000000);				//ddma,pcm layout0 1ch
+          HDMI_WUINT32(0x04c,0x76543200);
+
+          HDMI_WUINT32(0x0A0,0x710a0184);             	//audio infoframe head
+          HDMI_WUINT32(0x0A4,0x00000000);             	//CA = 0X1F
+          HDMI_WUINT32(0x0A8,0x00000000);
+          HDMI_WUINT32(0x0Ac,0x00000000);
+    }else  if(audio_info.channel_num == 2)
+    {
+          HDMI_WUINT32(0x044,0x00000000);             	//audio fifo rst and select ddma, 2 ch 16bit pcm
+          HDMI_WUINT32(0x048,0x00000001);				//ddma,pcm layout0 2ch
+          HDMI_WUINT32(0x04c,0x76543210);
+
+          HDMI_WUINT32(0x0A0,0x710a0184);             	//audio infoframe head
+          HDMI_WUINT32(0x0A4,0x00000000);             	//CA = 0X1F
+          HDMI_WUINT32(0x0A8,0x00000000);
+          HDMI_WUINT32(0x0Ac,0x00000000);
+    }else if(audio_info.channel_num == 8)
+    {
+          HDMI_WUINT32(0x044,0x00000000);             	//audio fifo rst and select ddma, 2 ch 16bit pcm
+          HDMI_WUINT32(0x048,0x0000000f);				//ddma,pcm layout1 8ch
+          HDMI_WUINT32(0x04c,0x76543210);
+
+          HDMI_WUINT32(0x0A0,0x520a0184);             	//audio infoframe head
+          HDMI_WUINT32(0x0A4,0x1F000000);             	//CA = 0X1F
+          HDMI_WUINT32(0x0A8,0x00000000);
+          HDMI_WUINT32(0x0Ac,0x00000000);
+    }else
+    {
+    		__wrn("unkonwn num_ch:%d\n", audio_info.channel_num);
+    }
+
+
+    HDMI_WUINT32(0x050,audio_info.CTS			);                   	//CTS and N
+    HDMI_WUINT32(0x054,audio_info.ACR_N			);
+    HDMI_WUINT32(0x058,audio_info.CH_STATUS0 	);
+    HDMI_WUINT32(0x05c,audio_info.CH_STATUS1 	);
+
+    HDMI_WUINT32(0x040,0x80000000);
+    HDMI_WUINT32(0x004,0x80000000);
+
+//for audio test
+#if 0
+    //dedicated dma setting  aw1623 env
+    sys_put_wvalue(0xf1c023a4,0x40c00000);	//ddma ch5 seting from addr =0x40c00000
+    sys_put_wvalue(0xf1c023a8,0x00000000);	//des =0
+    sys_put_wvalue(0xf1c023ac,0x01f00000);	//byte to trans
+    sys_put_wvalue(0xf1c023b8,(31<<24) +(7<<16) + (31<<8) +(7<<0));	//data block and wait cycle
+    sys_put_wvalue(0xf1c023a0,0xa4b80481); 	//from src0 to des1,continous mode
+#endif
+
+    return 0;
+}
+
diff --git a/drivers/video/sun4i/hdmi/aw/hdmi_core.h b/drivers/video/sun4i/hdmi/aw/hdmi_core.h
new file mode 100644
index 0000000..4e9229e
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/aw/hdmi_core.h
@@ -0,0 +1,80 @@
+#ifndef __HDMI_CORE_H__
+#define __HDMI_CORE_H__
+
+#include "../hdmi_hal.h"
+#include "hdmi_interface.h"
+
+extern volatile __u32 HDMI_BASE;
+
+#define HDMI_WUINT32(offset,value)  writel(value, HDMI_BASE + offset)
+#define HDMI_RUINT32(offset)        readl(HDMI_BASE + offset)
+#define HDMI_WUINT16(offset,value)  writew(value, HDMI_BASE + offset)
+#define HDMI_RUINT16(offset)        readw(HDMI_BASE + offset)
+#define HDMI_WUINT8(offset,value)   writeb(value, HDMI_BASE + offset)
+#define HDMI_RUINT8(offset)         readb(HDMI_BASE + offset)
+
+#define Abort_Current_Operation				0
+#define Special_Offset_Address_Read 		1
+#define Explicit_Offset_Address_Write		2
+#define Implicit_Offset_Address_Write		3
+#define Explicit_Offset_Address_Read		4
+#define Implicit_Offset_Address_Read 		5
+#define Explicit_Offset_Address_E_DDC_Read	6
+#define Implicit_Offset_Address_E_DDC_Read	7
+
+typedef struct video_timing
+{
+	__s32 VIC;
+	__s32 PCLK;
+	__s32 AVI_PR;
+
+	__s32 INPUTX;
+	__s32 INPUTY;
+	__s32 HT;
+	__s32 HBP;
+	__s32 HFP;
+	__s32 HPSW;
+	__s32 VT;
+	__s32 VBP;
+	__s32 VFP;
+	__s32 VPSW;
+
+}HDMI_VIDE_INFO;
+
+typedef struct audio_timing
+{
+
+ 	__s32 audio_en;
+ 	__s32 sample_rate;
+ 	__s32 channel_num;
+
+	__s32 CTS;
+	__s32 ACR_N;
+	__s32 CH_STATUS0;
+	__s32 CH_STATUS1;
+
+}HDMI_AUDIO_INFO;
+
+__s32 hdmi_core_initial(void);
+__s32 hdmi_core_open(void);
+__s32 hdmi_core_close(void);
+__s32 hdmi_main_task_loop(void);
+__s32 Hpd_Check(void);
+__s32 ParseEDID(void);
+__s32 get_video_info(__s32 vic);
+__s32 get_audio_info(__s32 sample_rate);
+__s32 video_config(__s32 vic);
+__s32 audio_config(void);
+
+extern __u32 hdmi_pll;//0:video pll 0; 1:video pll 1
+extern __u32 hdmi_clk;
+
+
+void DDC_Init(void);
+void send_ini_sequence(void);
+__s32 DDC_Read(char cmd,char pointer,char offset,int nbyte,char * pbuf);
+extern 	__u8		EDID_Buf[1024];
+extern 	__u8		Device_Support_VIC[512];
+
+#endif
+
diff --git a/drivers/video/sun4i/hdmi/aw/hdmi_edid.c b/drivers/video/sun4i/hdmi/aw/hdmi_edid.c
new file mode 100644
index 0000000..5af51d0
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/aw/hdmi_edid.c
@@ -0,0 +1,406 @@
+
+#include "hdmi_core.h"
+void DDC_Init(void)
+{
+    __inf("DDC_Init\n");
+
+	HDMI_WUINT32(0x500,0x80000001);
+    hdmi_delay_ms(1);
+
+    //while(HDMI_RUINT32(0x500) & 0x1);
+    //__here__;
+
+	HDMI_WUINT32(0x528,0x0d   );					//N = 5,M=1 Fscl= Ftmds/2/10/2^N/(M+1)
+	//HDMI_WUINT8(0x506,0x60   );					//ddc address  0x60
+	//HDMI_WUINT8(0x504,0xa0>>1);					//slave address  0xa0
+
+	HDMI_WUINT32( 0x540,(0<<12) + (3<<8));		//enable analog  sda/scl pad
+
+	//send_ini_sequence();
+
+}
+/*
+void send_ini_sequence()
+{
+    int i,j;
+    set_wbit(HDMI_BASE + 0x524,BIT3);
+    for(i=0;i<9;i++)
+    {
+       for(j=0;j<200;j++);		//for simulation, delete it
+       clr_wbit(HDMI_BASE + 0x524,BIT2);
+
+       for(j=0;j<200;j++);		//for simulation, delete it
+       set_wbit(HDMI_BASE + 0x524,BIT2);
+
+    }
+    clr_wbit(HDMI_BASE + 0x524,BIT3);
+    clr_wbit(HDMI_BASE + 0x524,BIT1);
+
+    return;
+
+}*/
+__s32 DDC_Read(char cmd,char pointer,char offset,int nbyte,char * pbuf)
+{
+   __u8 i=0;
+   __u8 n=0;
+   __u8 off = offset;
+   __s32 reg_val;
+   __u32 begin_ms, end_ms;
+
+   __inf("DDC_Read\n");
+
+   while(nbyte >0)
+   {
+      if(nbyte > 16)
+        n = 16;
+      else
+        n = nbyte;
+      nbyte = nbyte -n;
+
+      reg_val = HDMI_RUINT32(0x500);
+      reg_val &= 0xfffffeff;
+      HDMI_WUINT32(0x500,reg_val);						//set FIFO read
+
+	  HDMI_WUINT32(0x504, (pointer<<24)+(0x60<<16)+(off<<8)+(0xa0>>1));
+
+      reg_val = HDMI_RUINT32(0x510);
+      reg_val |= 0x80000000;
+      HDMI_WUINT32(0x510,reg_val);						//FIFO address clear
+
+      HDMI_WUINT32(0x51c,n 		);						//nbyte to access
+      HDMI_WUINT32(0x520,cmd		);					//set cmd type
+
+      reg_val = HDMI_RUINT32(0x500);
+      reg_val |= 0x40000000;
+      HDMI_WUINT32(0x500,reg_val);						//start and cmd
+
+      off   += n;
+
+      begin_ms = (jiffies * 1000) / HZ;
+      while(HDMI_RUINT32(0x500)&0x40000000)
+      {
+        end_ms = (jiffies * 1000) / HZ;
+        if((end_ms - begin_ms) > 1000)
+        {
+            __wrn("ddc read timeout\n");
+            return -1;
+        }
+      }
+
+      i=0;
+      while(i<n)
+      {
+   	     * pbuf ++ = HDMI_RUINT8(0x518);
+   	     i++;
+      }
+   }
+
+   return 0;
+}
+
+
+
+void GetEDIDData(__u8 block,__u8 *buf)
+{
+	__u8 i;
+    __u8 * pbuf = buf + 128*block;
+    __u8 offset = (block&0x01)? 128:0;
+
+	DDC_Read(Explicit_Offset_Address_E_DDC_Read,block>>1,offset,128,pbuf);
+
+	////////////////////////////////////////////////////////////////////////////
+    __inf("Sink : EDID bank %d:\n",block);
+
+	__inf(" 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n");
+	__inf(" ===============================================================================================\n");
+
+	for (i = 0; i < 8; i++)
+	{
+		__inf(" %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x  %2.2x\n",
+				pbuf[i*16 + 0 ],pbuf[i*16 + 1 ],pbuf[i*16 + 2 ],pbuf[i*16 + 3 ],
+				pbuf[i*16 + 4 ],pbuf[i*16 + 5 ],pbuf[i*16 + 6 ],pbuf[i*16 + 7 ],
+				pbuf[i*16 + 8 ],pbuf[i*16 + 9 ],pbuf[i*16 + 10],pbuf[i*16 + 11],
+				pbuf[i*16 + 12],pbuf[i*16 + 13],pbuf[i*16 + 14],pbuf[i*16 + 15]
+				);
+	}
+    __inf(" ===============================================================================================\n");
+
+    return;
+
+}
+
+/////////////////////////////////////////////////////////////////////
+// ParseEDID()
+// Check EDID check sum and EDID 1.3 extended segment.
+/////////////////////////////////////////////////////////////////////
+__s32 EDID_CheckSum(__u8 block,__u8 *buf)
+{
+    __s32 i = 0, CheckSum = 0;
+	__u8 *pbuf = buf + 128*block;
+
+    for( i = 0, CheckSum = 0 ; i < 128 ; i++ )
+    {
+        CheckSum += pbuf[i] ;
+        CheckSum &= 0xFF ;
+    }
+
+	if( CheckSum != 0 )
+	{
+		__inf("EDID block %d checksum error\n",block);
+		return -1 ;
+	}
+	return 0;
+}
+__s32 EDID_Header_Check(__u8 *pbuf)
+{
+	if( pbuf[0] != 0x00 ||
+	    pbuf[1] != 0xFF ||
+	    pbuf[2] != 0xFF ||
+	    pbuf[3] != 0xFF ||
+	    pbuf[4] != 0xFF ||
+	    pbuf[5] != 0xFF ||
+	    pbuf[6] != 0xFF ||
+	    pbuf[7] != 0x00)
+    {
+    	__inf("EDID block0 header error\n");
+        return -1 ;
+    }
+	return 0;
+}
+
+__s32 EDID_Version_Check(__u8 *pbuf)
+{
+    __inf("EDID version: %d.%d ",pbuf[0x12],pbuf[0x13]) ;
+    if( (pbuf[0x12]!= 0x01) || (pbuf[0x13]!=0x03))
+    {
+		__inf("Unsupport EDID format,EDID parsing exit\n");
+		return -1;
+    }
+	return 0;
+}
+
+__s32 Parse_DTD_Block(__u8 *pbuf)
+{
+	__u32 	pclk,sizex,Hblanking,sizey,Vblanking,Hsync_offset,Hsync_plus,
+			Vsync_offset,Vsync_plus,H_image_size,V_image_size,H_Border,
+			V_Border,pixels_total,frame_rate;
+    pclk 		= ( (__u32)pbuf[1]	<< 8) + pbuf[0];
+    sizex 		= (((__u32)pbuf[4] 	<< 4) & 0x0f00) + pbuf[2];
+    Hblanking 	= (((__u32)pbuf[4] 	<< 8) & 0x0f00) + pbuf[3];
+    sizey 		= (((__u32)pbuf[7] 	<< 4) & 0x0f00) + pbuf[5];
+    Vblanking 	= (((__u32)pbuf[7] 	<< 8) & 0x0f00) + pbuf[6];
+    Hsync_offset= (((__u32)pbuf[11] << 2) & 0x0300) + pbuf[8];
+    Hsync_plus 	= (((__u32)pbuf[11] << 4) & 0x0300) + pbuf[9];
+    Vsync_offset= (((__u32)pbuf[11] << 2) & 0x0030) + (pbuf[10] >> 4);
+    Vsync_plus 	= (((__u32)pbuf[11] << 4) & 0x0030) + (pbuf[8] & 0x0f);
+    H_image_size= (((__u32)pbuf[14] << 4) & 0x0f00) + pbuf[12];
+    V_image_size= (((__u32)pbuf[14] << 8) & 0x0f00) + pbuf[13];
+    H_Border 	=  pbuf[15];
+	V_Border 	=  pbuf[16];
+
+	pixels_total = (sizex + Hblanking) * (sizey + Vblanking);
+
+	if( (pbuf[0] == 0) && (pbuf[1] == 0) && (pbuf[2] == 0))
+	{
+		return 0;
+	}
+
+	if(pixels_total == 0)
+	{
+		return 0;
+	}else
+	{
+		frame_rate = (pclk * 10000) /pixels_total;
+	}
+
+    if ((frame_rate == 59) || (frame_rate == 60))
+    {
+        if ((sizex== 720) && (sizey == 240))
+        {
+        	Device_Support_VIC[HDMI1440_480I] = 1;
+        }
+        if ((sizex== 720) && (sizey == 480))
+        {
+        	Device_Support_VIC[HDMI480P] = 1;
+        }
+        if ((sizex== 1280) && (sizey == 720))
+        {
+            Device_Support_VIC[HDMI720P_60] = 1;
+        }
+        if ((sizex== 1920) && (sizey == 540))
+        {
+            Device_Support_VIC[HDMI1080I_60] = 1;
+        }
+        if ((sizex== 1920) && (sizey == 1080))
+        {
+            Device_Support_VIC[HDMI1080P_60] = 1;
+        }
+    }
+    else if ((frame_rate == 49) || (frame_rate == 50))
+    {
+        if ((sizex== 720) && (sizey == 288))
+        {
+        	Device_Support_VIC[HDMI1440_576I] = 1;
+        }
+        if ((sizex== 720) && (sizey == 576))
+        {
+        	Device_Support_VIC[HDMI576P] = 1;
+        }
+        if ((sizex== 1280) && (sizey == 720))
+        {
+            Device_Support_VIC[HDMI720P_50] = 1;
+        }
+        if ((sizex== 1920) && (sizey == 540))
+        {
+            Device_Support_VIC[HDMI1080I_50] = 1;
+        }
+        if ((sizex== 1920) && (sizey == 1080))
+        {
+            Device_Support_VIC[HDMI1080P_50] = 1;
+        }
+    }
+
+    else if ((frame_rate == 23) || (frame_rate == 24))
+    {
+        if ((sizex== 1920) && (sizey == 1080))
+        {
+            Device_Support_VIC[HDMI1080P_24] = 1;
+        }
+    }
+	__inf("PCLK=%d\tXsize=%d\tYsize=%d\tFrame_rate=%d\n",
+		  pclk*10000,sizex,sizey,frame_rate);
+
+    return 0;
+}
+__s32 Parse_VideoData_Block(__u8 *pbuf,__u8 size)
+{
+	int i=0;
+	while(i<size)
+	{
+		Device_Support_VIC[pbuf[i] &0x7f] = 1;
+		__inf("Parse_VideoData_Block: VIC %d support\n", pbuf[i]);
+		i++;
+	}
+	return 0;
+}
+
+__s32 Parse_AudioData_Block(__u8 *pbuf,__u8 size)
+{
+	__u8 sum = 0;
+
+	while(sum < size)
+	{
+    	if( (pbuf[sum]&0xf8) == 0x08)
+    	{
+			__inf("Parse_AudioData_Block: max channel=%d\n",(pbuf[sum]&0x7)+1);
+			__inf("Parse_AudioData_Block: SampleRate code=%x\n",pbuf[sum+1]);
+			__inf("Parse_AudioData_Block: WordLen code=%x\n",pbuf[sum+2]);
+    	}
+    	sum += 3;
+	}
+	return 0;
+}
+
+
+
+__s32 ParseEDID(void)
+{
+    // collect the EDID ucdata of segment 0
+    __u8 BlockCount ;
+    __u32 i,offset ;
+
+    __inf("ParseEDID\n");
+
+    memset(Device_Support_VIC,0,sizeof(Device_Support_VIC));
+    memset(EDID_Buf,0,sizeof(EDID_Buf));
+
+	DDC_Init();
+
+    GetEDIDData(0, EDID_Buf);
+
+	if( EDID_CheckSum(0, EDID_Buf) != 0)
+	{
+		return 0;
+	}
+
+	EDID_Header_Check(EDID_Buf);
+
+	EDID_Version_Check(EDID_Buf);
+
+	Parse_DTD_Block(EDID_Buf + 0x36);
+
+	Parse_DTD_Block(EDID_Buf + 0x48);
+
+    BlockCount = EDID_Buf[0x7E];
+
+    if( BlockCount > 0 )
+    {
+	    if ( BlockCount > 4 )
+	    {
+	        BlockCount = 4 ;
+	    }
+	    for( i = 1 ; i <= BlockCount ; i++ )
+	    {
+	        GetEDIDData(i, EDID_Buf) ;
+	        if( EDID_CheckSum(i, EDID_Buf)!= 0)
+	        {
+	        	return 0;
+	        }
+
+			if((EDID_Buf[0x80*i+0]==2)/*&&(EDID_Buf[0x80*i+1]==1)*/)
+			{
+
+				offset = EDID_Buf[0x80*i+2];
+				if(offset > 4)		//deal with reserved data block
+				{
+					__u8 bsum = 4;
+					while(bsum < offset)
+					{
+						__u8 tag = EDID_Buf[0x80*i+bsum]>>5;
+						__u8 len = EDID_Buf[0x80*i+bsum]&0x1f;
+						if( (len >0) && ((bsum + len + 1) > offset) )
+						{
+						    __inf("len or bsum size error\n");
+							return 0;
+						}else
+						{
+							if( tag == 1)		//ADB
+							{
+								Parse_AudioData_Block(EDID_Buf+0x80*i+bsum+1,len);
+							}
+							else if( tag == 2)	//VDB
+							{
+								Parse_VideoData_Block(EDID_Buf+0x80*i+bsum+1,len);
+							}
+						}
+
+						bsum += (len +1);
+					}
+
+				}else
+				{
+					__inf("no data in reserved block%d\n",i);
+				}
+
+				if(offset >= 4)		//deal with 18-byte timing block
+				{
+					while(offset < (0x80-18))
+					{
+						Parse_DTD_Block(EDID_Buf + 0x80*i + offset);
+						offset += 18;
+					}
+				}else
+				{
+					__inf("no datail timing in block%d\n",i);
+				}
+			}
+
+	    }
+    }
+
+    return 0 ;
+
+}
+
+
+
diff --git a/drivers/video/sun4i/hdmi/aw/hdmi_hal.c b/drivers/video/sun4i/hdmi/aw/hdmi_hal.c
new file mode 100644
index 0000000..5751624
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/aw/hdmi_hal.c
@@ -0,0 +1,145 @@
+#include "../hdmi_hal.h"
+#include "hdmi_interface.h"
+#include "hdmi_core.h"
+
+volatile __u32 HDMI_BASE = 0;
+
+extern __s32            hdmi_state;
+extern __bool           video_enable;
+extern __s32            video_mode;
+extern HDMI_AUDIO_INFO  audio_info;
+
+void Hdmi_set_reg_base(__u32 base)
+{
+    HDMI_BASE = base;
+}
+
+__s32 Hdmi_hal_video_enable(__bool enable)
+{
+	if((video_enable != enable) && (hdmi_state >= HDMI_State_Video_config) )
+	{
+		hdmi_state 			= HDMI_State_Video_config;
+	}
+    video_enable = enable;
+
+    return 0;
+}
+
+__s32 Hdmi_hal_set_display_mode(__u32 hdmi_mode)
+{
+	if(hdmi_mode != video_mode)
+	{
+		if(hdmi_state >= HDMI_State_Video_config)
+		{
+			hdmi_state = HDMI_State_Video_config;
+		}
+		video_mode = hdmi_mode;
+	}
+    return 0;
+}
+
+
+__s32 Hdmi_hal_audio_enable(__u8 mode, __u8 channel)
+{
+	/////////????????????????????????
+	if(hdmi_state >= HDMI_State_Audio_config)
+	{
+		hdmi_state 			= HDMI_State_Audio_config;
+	}
+
+	audio_info.audio_en     = (channel == 0)?0:1;
+
+    return 0;
+}
+
+__s32 Hdmi_hal_set_audio_para(hdmi_audio_t * audio_para)
+{
+    if(!audio_para)
+    {
+        return -1;
+    }
+
+    if(audio_para->sample_rate != audio_info.sample_rate)
+    {
+    	if(hdmi_state >= HDMI_State_Audio_config)
+    		hdmi_state 				= HDMI_State_Audio_config;
+    	audio_info.sample_rate 	= audio_para->sample_rate;
+    	//audio_info.channel_num  = 2;
+
+    	__inf("sample_rate:%d in Hdmi_hal_set_audio_para\n", audio_info.sample_rate);
+    }
+    if(audio_para->channel_num != audio_info.channel_num)
+    {
+    	if(hdmi_state >= HDMI_State_Audio_config)
+    		hdmi_state 				= HDMI_State_Audio_config;
+    	audio_info.channel_num 	= audio_para->channel_num;
+
+    	__inf("channel_num:%d in Hdmi_hal_set_audio_para\n", audio_info.channel_num);
+    }
+
+    return 0;
+}
+
+
+__s32 Hdmi_hal_mode_support(__u32 mode)
+{
+    if(Hpd_Check() == 0)
+    {
+        return 0;
+    }
+    else
+    {
+        while(hdmi_state < HDMI_State_Wait_Video_config)
+        {
+	        hdmi_delay_ms(1);
+	    }
+	    return Device_Support_VIC[mode];
+	}
+}
+
+__s32 Hdmi_hal_get_HPD(void)
+{
+	return Hpd_Check();
+}
+
+__s32 Hdmi_hal_get_state(void)
+{
+    return hdmi_state;
+}
+
+__s32 Hdmi_hal_set_pll(__u32 pll, __u32 clk)
+{
+    hdmi_pll = pll;
+    hdmi_clk = clk;
+    return 0;
+}
+
+__s32 Hdmi_hal_main_task(void)
+{
+    hdmi_main_task_loop();
+    return 0;
+}
+
+__s32 Hdmi_hal_init(void)
+{
+    //hdmi_audio_t audio_para;
+
+	hdmi_core_initial();
+    audio_info.channel_num  = 2;
+//for audio test
+#if 0
+    audio_para.ch0_en = 1;
+    audio_para.sample_rate = 44100;
+	Hdmi_hal_set_audio_para(&audio_para);
+
+	Hdmi_hal_audio_enable(0, 1);
+#endif
+
+    return 0;
+}
+
+__s32 Hdmi_hal_exit(void)
+{
+    return 0;
+}
+/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
diff --git a/drivers/video/sun4i/hdmi/aw/hdmi_interface.c b/drivers/video/sun4i/hdmi/aw/hdmi_interface.c
new file mode 100644
index 0000000..ab86a6e
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/aw/hdmi_interface.c
@@ -0,0 +1,16 @@
+
+#include "hdmi_interface.h"
+
+
+__s32 hdmi_i2c_add_driver(void)
+{
+	return 0;
+}
+
+
+__s32 hdmi_i2c_del_driver(void)
+{
+    return 0;
+}
+
+
diff --git a/drivers/video/sun4i/hdmi/aw/hdmi_interface.h b/drivers/video/sun4i/hdmi/aw/hdmi_interface.h
new file mode 100644
index 0000000..3a64557
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/aw/hdmi_interface.h
@@ -0,0 +1,7 @@
+#ifndef __HDMI_INTERFACE_H__
+#define __HDMI_INTERFACE_H__
+
+#include "../hdmi_hal.h"
+
+
+#endif
\ No newline at end of file
diff --git a/drivers/video/sun4i/hdmi/dev_hdmi.c b/drivers/video/sun4i/hdmi/dev_hdmi.c
new file mode 100644
index 0000000..6a5bf0d
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/dev_hdmi.c
@@ -0,0 +1,224 @@
+#include "dev_hdmi.h"
+#include "drv_hdmi_i.h"
+
+
+static struct cdev *my_cdev;
+static dev_t devid ;
+static struct class *hdmi_class;
+
+hdmi_info_t ghdmi;
+
+
+static struct resource hdmi_resource[1] =
+{
+	[0] = {
+		.start = 0x01c16000,
+		.end   = 0x01c165ff,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+struct platform_device hdmi_device =
+{
+	.name           = "hdmi",
+	.id		        = -1,
+	.num_resources  = ARRAY_SIZE(hdmi_resource),
+	.resource	    = hdmi_resource,
+	.dev            = {}
+};
+
+
+static int __init hdmi_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	int size;
+	int ret = 0;
+
+	__inf("hdmi_probe call\n");
+
+    memset(&ghdmi, 0, sizeof(hdmi_info_t));
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (res == NULL)
+	{
+		__wrn("platform_get_resource fail\n");
+		ret = -ENXIO;
+		goto hdmi_error;
+	}
+
+	size = (res->end - res->start) + 1;
+	ghdmi.mem = request_mem_region(res->start, size, pdev->name);
+	if (ghdmi.mem == NULL)
+	{
+		__wrn("request_mem_region fail\n");
+		ret = -ENOENT;
+		goto hdmi_error;
+	}
+
+	ghdmi.io = ioremap(res->start, size);
+	if (ghdmi.io == NULL)
+	{
+		__wrn("ioremap() fail\n");
+		ret = -ENXIO;
+		goto release_mem0;
+	}
+
+
+	__inf("HDMI base 0x%08x\n", (__u32)ghdmi.io);
+
+	Hdmi_init();
+    Fb_Init(1);
+
+	return 0;
+
+release_mem0:
+	release_resource(ghdmi.mem);
+	kfree(ghdmi.mem);
+
+hdmi_error:
+
+
+	return ret;
+}
+
+
+static int hdmi_remove(struct platform_device *pdev)
+{
+    __inf("hdmi_remove call\n");
+
+    Hdmi_exit();
+
+    iounmap(ghdmi.io);
+
+    release_resource(ghdmi.mem);
+    kfree(ghdmi.mem);
+
+    return 0;
+}
+
+int hdmi_suspend(struct platform_device *pdev, pm_message_t state)
+{
+    return 0;
+}
+
+int hdmi_resume(struct platform_device *pdev)
+{
+    return 0;
+}
+static struct platform_driver hdmi_driver =
+{
+	.probe		= hdmi_probe,
+	.remove		= hdmi_remove,
+	.suspend    = hdmi_suspend,
+	.resume    = hdmi_resume,
+	.driver		=
+	{
+		.name	= "hdmi",
+		.owner	= THIS_MODULE,
+	},
+};
+
+int hdmi_open(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+int hdmi_release(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+
+ssize_t hdmi_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
+{
+	return -EINVAL;
+}
+
+ssize_t hdmi_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
+{
+    return -EINVAL;
+}
+
+int hdmi_mmap(struct file *file, struct vm_area_struct * vma)
+{
+	return 0;
+}
+
+long hdmi_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	return 0;
+}
+
+
+static const struct file_operations hdmi_fops =
+{
+	.owner		= THIS_MODULE,
+	.open		= hdmi_open,
+	.release    = hdmi_release,
+	.write      = hdmi_write,
+	.read		= hdmi_read,
+	.unlocked_ioctl	= hdmi_ioctl,
+	.mmap       = hdmi_mmap,
+};
+
+int __init hdmi_module_init(void)
+{
+	int ret = 0, err;
+
+	__inf("hdmi_module_init\n");
+
+	 alloc_chrdev_region(&devid, 0, 1, "hdmi");
+	 my_cdev = cdev_alloc();
+	 cdev_init(my_cdev, &hdmi_fops);
+	 my_cdev->owner = THIS_MODULE;
+	 err = cdev_add(my_cdev, devid, 1);
+	 if (err)
+	 {
+		  __wrn("cdev_add fail.\n");
+		  return -1;
+	 }
+
+    hdmi_class = class_create(THIS_MODULE, "hdmi");
+    if (IS_ERR(hdmi_class))
+    {
+        __wrn("class_create fail\n");
+        return -1;
+    }
+
+	ret |= hdmi_i2c_add_driver();
+
+	ret = platform_device_register(&hdmi_device);
+
+	if (ret == 0)
+	{
+		ret = platform_driver_register(&hdmi_driver);
+	}
+
+	return ret;
+}
+
+static void __exit hdmi_module_exit(void)
+{
+	__inf("hdmi_module_exit\n");
+
+	platform_driver_unregister(&hdmi_driver);
+	platform_device_unregister(&hdmi_device);
+
+	hdmi_i2c_del_driver();
+
+    class_destroy(hdmi_class);
+
+    cdev_del(my_cdev);
+}
+
+
+
+//late_initcall(hdmi_module_init);
+module_init(hdmi_module_init);
+module_exit(hdmi_module_exit);
+
+MODULE_AUTHOR("danling_xiao");
+MODULE_DESCRIPTION("hdmi driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:hdmi");
+
diff --git a/drivers/video/sun4i/hdmi/dev_hdmi.h b/drivers/video/sun4i/hdmi/dev_hdmi.h
new file mode 100644
index 0000000..fa2dba0
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/dev_hdmi.h
@@ -0,0 +1,29 @@
+#ifndef __DEV_DISPLAY_H__
+#define __DEV_DISPLAY_H__
+
+#include "drv_hdmi_i.h"
+
+int hdmi_open(struct inode *inode, struct file *file);
+int hdmi_release(struct inode *inode, struct file *file);
+ssize_t hdmi_read(struct file *file, char __user *buf, size_t count, loff_t *ppos);
+ssize_t hdmi_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos);
+int hdmi_mmap(struct file *file, struct vm_area_struct * vma);
+long hdmi_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+
+extern __s32 Hdmi_init(void);
+extern __s32 Hdmi_exit(void);
+extern __s32 Fb_Init(__u32 from);
+
+
+
+typedef struct
+{
+	__bool bopen;
+	__disp_tv_mode_t mode;
+	struct resource *mem;
+	void __iomem    *io;
+}hdmi_info_t;
+
+extern hdmi_info_t ghdmi;
+
+#endif
diff --git a/drivers/video/sun4i/hdmi/drv_hdmi.c b/drivers/video/sun4i/hdmi/drv_hdmi.c
new file mode 100644
index 0000000..9d9de72
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/drv_hdmi.c
@@ -0,0 +1,278 @@
+
+#include "drv_hdmi_i.h"
+#include "hdmi_hal.h"
+#include "dev_hdmi.h"
+
+
+static struct semaphore *run_sem = NULL;
+static struct task_struct * HDMI_task;
+
+void hdmi_delay_ms(__u32 t)
+{
+    __u32 timeout = t*HZ/1000;
+
+    set_current_state(TASK_INTERRUPTIBLE);
+    schedule_timeout(timeout);
+}
+
+
+__s32 Hdmi_open(void)
+{
+    __inf("[Hdmi_open]\n");
+
+    Hdmi_hal_video_enable(1);
+	//if(ghdmi.bopen == 0)
+	//{
+	//	up(run_sem);
+	//}
+	ghdmi.bopen = 1;
+
+	return 0;
+}
+
+__s32 Hdmi_close(void)
+{
+    __inf("[Hdmi_close]\n");
+
+	Hdmi_hal_video_enable(0);
+	ghdmi.bopen = 0;
+
+	return 0;
+}
+
+__s32 Hdmi_set_display_mode(__disp_tv_mode_t mode)
+{
+	__u32 hdmi_mode;
+
+	__inf("[Hdmi_set_display_mode],mode:%d\n",mode);
+
+	switch(mode)
+	{
+	case DISP_TV_MOD_480I:
+		hdmi_mode = HDMI1440_480I;
+		break;
+
+	case DISP_TV_MOD_576I:
+		hdmi_mode = HDMI1440_576I;
+		break;
+
+	case DISP_TV_MOD_480P:
+		hdmi_mode = HDMI480P;
+		break;
+
+	case DISP_TV_MOD_576P:
+		hdmi_mode = HDMI576P;
+		break;
+
+	case DISP_TV_MOD_720P_50HZ:
+		hdmi_mode = HDMI720P_50;
+		break;
+
+	case DISP_TV_MOD_720P_60HZ:
+		hdmi_mode = HDMI720P_60;
+		break;
+
+	case DISP_TV_MOD_1080I_50HZ:
+		hdmi_mode = HDMI1080I_50;
+		break;
+
+	case DISP_TV_MOD_1080I_60HZ:
+		hdmi_mode = HDMI1080I_60;
+		break;
+
+	case DISP_TV_MOD_1080P_24HZ:
+		hdmi_mode = HDMI1080P_24;
+		break;
+
+	case DISP_TV_MOD_1080P_50HZ:
+		hdmi_mode = HDMI1080P_50;
+		break;
+
+	case DISP_TV_MOD_1080P_60HZ:
+		hdmi_mode = HDMI1080P_60;
+		break;
+
+	case DISP_TV_MOD_1080P_24HZ_3D_FP:
+		hdmi_mode = HDMI1080P_24_3D_FP;
+		break;
+
+	default:
+	    __wrn("unsupported video mode %d when set display mode\n", mode);
+		return -1;
+	}
+
+	ghdmi.mode = mode;
+	return Hdmi_hal_set_display_mode(hdmi_mode);
+}
+
+__s32 Hdmi_Audio_Enable(__u8 mode, __u8 channel)
+{
+    __inf("[Hdmi_Audio_Enable],ch:%d\n",channel);
+
+	return Hdmi_hal_audio_enable(mode, channel);
+}
+
+__s32 Hdmi_Set_Audio_Para(hdmi_audio_t * audio_para)
+{
+    __inf("[Hdmi_Set_Audio_Para]\n");
+
+	return Hdmi_hal_set_audio_para(audio_para);
+}
+
+__s32 Hdmi_mode_support(__disp_tv_mode_t mode)
+{
+	__u32 hdmi_mode;
+
+	switch(mode)
+	{
+	case DISP_TV_MOD_480I:
+		hdmi_mode = HDMI1440_480I;
+		break;
+
+	case DISP_TV_MOD_576I:
+		hdmi_mode = HDMI1440_576I;
+		break;
+
+	case DISP_TV_MOD_480P:
+		hdmi_mode = HDMI480P;
+		break;
+
+	case DISP_TV_MOD_576P:
+		hdmi_mode = HDMI576P;
+		break;
+
+	case DISP_TV_MOD_720P_50HZ:
+		hdmi_mode = HDMI720P_50;
+		break;
+
+	case DISP_TV_MOD_720P_60HZ:
+		hdmi_mode = HDMI720P_60;
+		break;
+
+	case DISP_TV_MOD_1080I_50HZ:
+		hdmi_mode = HDMI1080I_50;
+		break;
+
+	case DISP_TV_MOD_1080I_60HZ:
+		hdmi_mode = HDMI1080I_60;
+		break;
+
+	case DISP_TV_MOD_1080P_24HZ:
+		hdmi_mode = HDMI1080P_24;
+		break;
+
+	case DISP_TV_MOD_1080P_50HZ:
+		hdmi_mode = HDMI1080P_50;
+		break;
+
+	case DISP_TV_MOD_1080P_60HZ:
+		hdmi_mode = HDMI1080P_60;
+		break;
+
+	case DISP_TV_MOD_1080P_24HZ_3D_FP:
+	    hdmi_mode = HDMI1080P_24_3D_FP;
+	    break;
+
+	default:
+		hdmi_mode = HDMI720P_50;
+		break;
+	}
+
+	return Hdmi_hal_mode_support(hdmi_mode);
+}
+
+__s32 Hdmi_get_HPD_status(void)
+{
+	return Hdmi_hal_get_HPD();
+}
+
+
+__s32 Hdmi_set_pll(__u32 pll, __u32 clk)
+{
+    Hdmi_hal_set_pll(pll, clk);
+    return 0;
+}
+
+int Hdmi_run_thread(void *parg)
+{
+	while (1)
+	{
+		//if(ghdmi.bopen == 0)
+		//{
+		//	down(run_sem);
+		//}
+
+		Hdmi_hal_main_task();
+
+		if(ghdmi.bopen)
+		{
+			hdmi_delay_ms(200);
+		}
+		else
+		{
+			hdmi_delay_ms(200);
+		}
+	}
+
+	return 0;
+}
+
+extern void audio_set_hdmi_func(__audio_hdmi_func * hdmi_func);
+extern __s32 disp_set_hdmi_func(__disp_hdmi_func * func);
+
+__s32 Hdmi_init(void)
+{
+    __audio_hdmi_func audio_func;
+    __disp_hdmi_func disp_func;
+
+	run_sem = kmalloc(sizeof(struct semaphore),GFP_KERNEL | __GFP_ZERO);
+	sema_init((struct semaphore*)run_sem,0);
+
+	HDMI_task = kthread_create(Hdmi_run_thread, (void*)0, "hdmi proc");
+	if(IS_ERR(HDMI_task))
+	{
+	    __s32 err = 0;
+
+		__wrn("Unable to start kernel thread %s.\n","hdmi proc");
+		err = PTR_ERR(HDMI_task);
+		HDMI_task = NULL;
+		return err;
+	}
+	wake_up_process(HDMI_task);
+
+    Hdmi_set_reg_base((__u32)ghdmi.io);
+	Hdmi_hal_init();
+
+    audio_func.hdmi_audio_enable = Hdmi_Audio_Enable;
+    audio_func.hdmi_set_audio_para = Hdmi_Set_Audio_Para;
+	audio_set_hdmi_func(&audio_func);
+
+	disp_func.Hdmi_open = Hdmi_open;
+	disp_func.Hdmi_close = Hdmi_close;
+	disp_func.hdmi_set_mode = Hdmi_set_display_mode;
+	disp_func.hdmi_mode_support = Hdmi_mode_support;
+	disp_func.hdmi_get_HPD_status = Hdmi_get_HPD_status;
+	disp_func.hdmi_set_pll = Hdmi_set_pll;
+	disp_set_hdmi_func(&disp_func);
+
+	return 0;
+}
+
+__s32 Hdmi_exit(void)
+{
+	Hdmi_hal_exit();
+
+	if(run_sem)
+	{
+		kfree(run_sem);
+		run_sem = 0;
+	}
+
+	if(HDMI_task)
+	{
+		kthread_stop(HDMI_task);
+		HDMI_task = 0;
+	}
+	return 0;
+}
+
diff --git a/drivers/video/sun4i/hdmi/drv_hdmi_i.h b/drivers/video/sun4i/hdmi/drv_hdmi_i.h
new file mode 100644
index 0000000..dcbfeba
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/drv_hdmi_i.h
@@ -0,0 +1,67 @@
+
+#ifndef  _DRV_HDMI_I_H_
+#define  _DRV_HDMI_I_H_
+
+#include <asm/uaccess.h>
+#include <asm/memory.h>
+#include <asm/unistd.h>
+#include "asm-generic/int-ll64.h"
+#include "linux/kernel.h"
+#include "linux/mm.h"
+#include "linux/semaphore.h"
+#include <linux/vmalloc.h>
+#include <linux/fs.h>
+#include <linux/dma-mapping.h>
+#include <linux/sched.h>   //wake_up_process()
+#include <linux/kthread.h> //kthread_create()、kthread_run()
+#include <linux/err.h> //IS_ERR()、PTR_ERR()
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/init.h>
+#include <linux/dma-mapping.h>
+#include <linux/interrupt.h>
+#include <linux/clk.h>
+#include <linux/cdev.h>
+#include <linux/types.h>
+
+#include <linux/drv_display.h>
+#include <linux/drv_hdmi.h>
+
+#if 1
+#define OSAL_PRINTF     printk
+#define __inf(msg...)
+#define __msg(msg...)
+#define __wrn           printk
+#define __here__
+#else
+#define OSAL_PRINTF(msg...) {printk(KERN_WARNING msg);}
+#define __inf(msg...)       {printk(KERN_WARNING "[HDMI] ");                                            printk(msg);}
+#define __msg(msg...)       {printk(KERN_WARNING "[HDMI] file:%s,line:%d:    ",__FILE__,__LINE__);      printk(msg);}
+#define __wrn(msg...)       {printk(KERN_WARNING "[HDMI WRN] file:%s,line:%d:    ",__FILE__,__LINE__);  printk(msg);}
+#define __here__            {printk(KERN_WARNING "[HDMI] file:%s,line:%d\n",__FILE__,__LINE__);}
+#endif
+
+
+__s32 Hdmi_init(void);
+__s32 Hdmi_exit(void);
+
+__s32 Hdmi_open(void);
+__s32 Hdmi_close(void);
+__s32 Hdmi_set_display_mode(__disp_tv_mode_t mode);
+__s32 Hdmi_mode_support(__disp_tv_mode_t mode);
+__s32 Hdmi_get_HPD_status(void);
+__s32 Hdmi_Audio_Enable(__u8 mode, __u8 channel);
+__s32 Hdmi_Set_Audio_Para(hdmi_audio_t * audio_para);
+
+
+extern __s32 hdmi_i2c_add_driver(void);
+extern __s32 hdmi_i2c_del_driver(void);
+
+#define sys_get_wvalue(n)   (*((volatile __u32 *)(n)))          /* word input */
+#define sys_put_wvalue(n,c) (*((volatile __u32 *)(n))  = (c))   /* word output */
+
+
+#endif
diff --git a/drivers/video/sun4i/hdmi/hdmi_hal.h b/drivers/video/sun4i/hdmi/hdmi_hal.h
new file mode 100644
index 0000000..9f91a87
--- /dev/null
+++ b/drivers/video/sun4i/hdmi/hdmi_hal.h
@@ -0,0 +1,48 @@
+#ifndef __HDMI_HAL_H__
+#define __HDMI_HAL_H__
+
+#include "drv_hdmi_i.h"
+
+
+#define HDMI_State_Idle 			 0x00
+#define HDMI_State_Wait_Hpd			 0x02
+#define HDMI_State_Rx_Sense			 0x03
+#define HDMI_State_EDID_Parse		 0x04
+#define HDMI_State_Wait_Video_config 0x05
+#define HDMI_State_Video_config		 0x06
+#define HDMI_State_Audio_config		 0x07
+#define HDMI_State_Playback			 0x09
+
+#define HDMI1440_480I		6
+#define HDMI1440_576I		21
+#define HDMI480P			2
+#define HDMI576P			17
+#define HDMI720P_50			19
+#define HDMI720P_60 		4
+#define HDMI1080I_50		20
+#define HDMI1080I_60		5
+#define HDMI1080P_50		31
+#define HDMI1080P_60 		16
+#define HDMI1080P_24 		32
+#define HDMI1080P_25 		33
+#define HDMI1080P_24_3D_FP  (HDMI1080P_24 +0x80)
+
+
+extern void hdmi_delay_ms(__u32 t);
+
+extern void  Hdmi_set_reg_base(__u32 base);
+extern __s32 Hdmi_hal_init(void);
+extern __s32 Hdmi_hal_exit(void);
+extern __s32 Hdmi_hal_video_enable(__bool enable);
+extern __s32 Hdmi_hal_set_display_mode(__u32 hdmi_mode);
+extern __s32 Hdmi_hal_audio_enable(__u8 mode, __u8 channel);
+extern __s32 Hdmi_hal_set_audio_para(hdmi_audio_t * audio_para);
+extern __s32 Hdmi_hal_mode_support(__u32 mode);
+extern __s32 Hdmi_hal_get_HPD(void);
+extern __s32 Hdmi_hal_get_state(void);
+extern __s32 Hdmi_hal_main_task(void);
+extern __s32 Hdmi_hal_set_pll(__u32 pll, __u32 clk);
+
+
+#endif
+
diff --git a/drivers/video/sun4i/lcd/A10_lcd_config_manual.doc b/drivers/video/sun4i/lcd/A10_lcd_config_manual.doc
new file mode 100644
index 0000000000000000000000000000000000000000..0f6b270c645d254683dbe0cbe9d9d64131961f9b
GIT binary patch
literal 131584
zcmeF4349bq*1#*_hJ;H%1k@1`0|Ln;;R=V`2809%ry?OI34|o(;!+40yg&gDU=dMR
za20QKJx~!{L_tJEWf2ka0FgyRL_}7}_kUg8nVw;05=4!ko6he)eN@$}s#mY7tE;P1
z+uyCXZ^hG1K2siBcU4K9F0P@f+O7w3{IhjlSE<t+2f*p#;$pdc3jPb6R&4)IG;nzJ
zYwGfGH7YB0a_Fm4h)PkiY!v*I{YuqVi4zhh3>-dixN+6(r*id1D*S*_?XC<kXx?8t
z2fO)lofH?>DLL_VY<XB^9Gt46&t-2vmaE>*8))ywZ*9|bpSwX{wC_7{=?K>&G2iAh
zl#<vi|Fd2rM_k{*^-SXJQKZBB+UL!|Kl)pFo0hlpcBPgPr1A!(q{dWbFI&|O{IFHs
zzz<v14g9cG-M|l9)eTCuVE^RnN~IC-{5O>9$9Ze6*OO}Iv03?lZk~sOc`E6W&DvZ3
zti8y!Z<ai3Z{^qWBj=*8F6gHb7k50aT|D<9|6qMr`B-v1<%)jnn<dA7tt`h@etgLj
zxlsuEV69SZ*jwqa_GO8~o1ae4=&M%#HeoM8TpCx9ANhRJ){+vl>~8r3N>#6g2g22~
z3EV)n>%;jF^cu!q>`%6u_-n`hI_yBUht?>y8@rHmv2!ba!|^xxvEs2rS^AN9ZY5(m
zbEzvh-ow5zd#k)2<6P3Sf&B?9u%Erik<D}8dV_J<uy=jr|F@8G9qQkU;p!QWb#Cd|
zvL9c2D+;T9u<!eHCk+%{G7XCTx`eUL#oc~xUAOj@p3AzI8;i&bR6!*+W<*f&Q=x&g
z)<93?q}6e#43(sk*@xtJOdPZ@bLQ2F^M(YgMTMPX^0R}L{GEsEFcqtMvmc|f_-#(u
zwkm?XTuC#2ry0Nb{5CK`M61ziu<A=q9jN-N7<IMbp22T(6_30u;*B5$;mC?G2vhA1
zi2+D((gM~{UB<=5z8&+<j2ec-!K$aa%8=NX`=i5;6f0FCDO@$=Pv_#-q^Uzmn!=4V
zX?=wed$vkYnJNVh#*>#+H6HgQHE)>q;q>X_>~hn=(3|M^x5!P$lH5cXx%p*CcFNgn
zxT9N|BF<66ol4T=RIMoWfmm9f5}ms1IUS9sVmoK2!%n|xdOMe-H{30~Sy)60>5C_Y
z8KiOYS*EhHTPh>ZNvl$~rFM$VM7X6g$w*tSN{LU+$eLW^JjdXkSM?p*x1S?^SXNR*
zShzESzc9y`G)F*#_6-{bpXZ1kJ-F}Cf&F8yc8tkzG`D+mHpf$Bs~Q7)_lX~$k{6$y
zkeQMZpPHYU8z1IFva@WG!$op?uaccUB!_Fs9ZE@agpuZUHO{)h{EG$nHtxPyY4d0D
zTU79C+5u^|?JaGGbF|pV5{q?j2a=68HbG6LW=&GLXH~15D)Ki?qw5Z(>;5p>s#xxB
z@zi%+`_HCja&pJ}Ej8%6SLr(MN?l2<cWLj;THm2;HK?Pl)(;*zD86ruj~dyrZ1OtU
z>Uyt%zQuLY;yRX6!8?n%4!Y?WJaVXSd7aB7FFZ`-b=2~bvh(9}QpTs}=B4Dsr{`Sn
zJ>%hK^I1wt!;R*%la}0j@bLJNLw(3I8_m+>8I5LVyS(`RF@5@ua)b<x>lW6^hj6pq
zEKRu4ZaR@7jlE87e4n1fdK$u=zJy1VO~;X<V<%E9;XQ{Bi;eF$aCls_k5osNO>lcd
zaJUwH)!_cI6yNpvDY<z*#I`S+*bau+2sg1ADG9kLKE#?etCN4z4L53*)4ZV?sm<lC
znvj>5<3p}l!%CBD)G()cJ2kbCknBUIS<On5X;d?(S<eialXKGZd?~=JYo!Q{FzT9<
z%9cAd*XU79E=b78_aQXGtY)PNHL97DdL}}%^Yh~U3N`CmX+m`erJW%&DJwHIeSEvr
zlqud-8evwk(q!r?)~ZHEQgVELZi<friZJVxGs3?$MHrO|(-(1x8SyEZ{)C$KsZ^mx
zg~ISlg!;&`S&>SWXVfGtUgTwGO{Q7(lXJ5gIU`HSxlxZW_Y$E#5@}YSQso)-2U9oX
zO`ha0iDvC7RisgUFmzL-j|7_4rZj1hM!o59R-M{+lE=hWOBxw>HvN@IW5hr|@$0Ab
zb9+jO<T>AZO3{73BL&0b&n`tyw;q)A_s->cKa%kRD@D48*J$R#`L$yj&3td}*`+Jo
zN4jJz!W!2IR^3yhre44F;h}BmLUvC%H6&$xi<s6ix1^ki`Dljp&Oe?%@YdKdCkt|i
z6cxzmOi*#vp;rtIO+EKf2rcQSYwsB=F~*LmUaUuiLQ?{gw#LPdxqJSpAvKBv!#<jC
zr6@GDc8plfe{cA7#=aCuQBZMi+`g1`b3^h&Mjjg0y2Q0+Oo&RPN1Ubd7<qTlYnM@y
zbo%acCP$enUrkYs5+@tSNw~LCLB%&+dpM@3;ER}mDff)sKQ}aW-nD5%RLt>NMFoLj
zJrZk-cg3$YBB}Xhfiqt;_)22Jyt;{>&QM5Lo%BVV)}K7x1cn7OrXZtSug7Jl%o~<%
z#Mxw)ORFIxMdP_VVdNU)4q3)1LpmcmG7gnW>ZYiz3zuHoKSpGoyY7Qk$Vf@^)`e>E
ztlOkqiwYzKHH^{^Dn9oZJWF@@SV{T*m|8KRsjd<&Do`<R-KPDXKlId)n+?lr8}ml|
z^d+-ys}gs`u%d!U)jCF=4kdgrx=1JgDZE#)Mh<<CgaxC`JjTfK2$O{W0_-8(7;7xc
z2u}zl;Xd{w<83(*k3@%R4c2H-D^fNcLiuaykiTGcBj@h%i@aQ(S*2!LDX^Z}Tw^vm
z-h9&^<0RzQm;AEC;Ck}<wQ-!OxACMZ&qF(@)Tm6ue#4Z`gSH}f9co{O23tEAsA&~E
zJ=nn(8p=uA?n$ZR%|V>>%+xGLH;44c-7j_t4NXqTNXbia<fWzOIx^BTQyl53j;UGs
zj>!p`d5*j+2X}BBQykpe9N7su36A8HRKr`QL%LwPyX2Jqk`Z@F%vss=QDjugjJV{y
zi@U$1jI3Ned}XDu<U*I=8-s&W(=$?{BzC8n8FJ7rDL6MTAum12QIM6M>?L0z@up`<
zaeSVmwL?@O`Uwr4GiQ#-H3h`S=hCAS&6FgN!1-LuP08>dz?E_zAxaYGF`VYaztL5&
zM%auLo>Kv0Lk_Gcjarn;k#3dcS~|7dL0g!GML8J7lu>S}ad}*Ea82rj4k>$WWe#IB
zTxzF-8lGab6EZfg>!^b;{@T`H{OLb!pKVolb41-WuHvda4%H3czH4w7YQArI-s+>f
zL~lMsrnD&5IGNm0N*|@x{vR0nOJS2@Y2{<b6cwBr*=D@lhon7?nmRYONwKu6?k&}s
zHD148aIec&>-TF~O7!D!OiG!=^JR$Gd7H2{x#`nVvQj;&L913>f{n^2p4xU76P!Xw
z*VfI^DJ)FaPnVaeE_aT)IU+lq;UzgKV`6+N595Z{ZjOkEE@q(6&_U7DJmSoz(_P{j
zfzB`@HT;K$di9*0m0^nO<~Sqn+{p>qrYpM=4<2#SsM$90Wu1nGhDD_ngyc@mOu8aD
zrBxS)GpbV<S#*R)<>h5`aYRIA6eQ;w;yh%g6~x=bo+;C4E;BMxG7y<oKzovto{-@<
zQ%LTltmG7(98V!buj<vQQzydr?%jWAhxQ%31fH62CBr?i8QtjNBOIw&Ig=9d&J3HD
zn?2c7gL~LC(S{>CBR|(MIXyWq?aZJBzJeA^%{?=yMB*tU(N<~{Te!2mStOyMI{L(f
zq=}B~tem7XqR%rEZS2H;+M8jmpm|w&XgX<XQbvkLv;`i~MnqbM5E@!w<l1Mn1s>6c
zb605}E-@3-$h9q6N9%CUswTsYE_-oTcvzIPQ(}6aBQna_fxSnfQ*$QSa_kw>k({2J
zkeHDomg`8#ltV|(_{0t!I^e>cJ4Z~}cD=oI-7|q==kZBtW>lWh<fdniM{-hHLMHEp
zB(mguQL;YwNU<TR#H>9<#l$(pO=Jw{+rLjw<II}`RAJbkQLQZ%NQDiL#7V*%YV#H}
zJu5ybCo4DijG&oP8I1I2XF3coo_dg=spG?3dYB?Dlx)%=aqBAhnj`l|zh06%nZ7g0
zbB&6ZdsELzwWeA3r6^U)<F0h>{b$#^-B@F8fV?;9r-t+Xq&Iz5-PdkoySHc4<Csh@
zA_sr+OeSvfX0w&*!jbg$;}TW8z7yXU+djXIDj0iW?5Fd^&m`mp^R~mfPy3J2^`^vn
zB9OSkk>fqKe<XDnnl{3UPy0K&7_D?A(t~pKawJyI7`GPoA7aI1<x6swgJ$yRkL92l
z31#(BLPpk%nHxL!+O{!4#Zs<a#$7+8#`qdM<)=(swbU9xaA{8ZZkC>ditYNVJ<R1x
z=UBVD@+<C=zM$eehDb=AzS_g)U0WBI*fH{iuAdyO{GM43Vu?isZKf+yC_N)>2QvEc
zZQTBtU*c2pgNj2_<#{<IKV`flw*CU~C2uW7a_MsCnQ}u@B?gJDTGFle1QizynSR6E
zk)f$gie3G!5S}Y7iI!!yLc89d3WJIzm4{}1cb(KB{T5Z8o#SI>-4>Fs$08Er>%<3!
zeK2wMXzA&>VoFBm@;sVljE?AjcqStb@sw(YQ5U?&sh@Of7}hT`q;KshL-$qv*}kQ7
zu?o><XzKXHfw%6TD;83Fn2btDX%-cnNI8BlWzO&LxIwX@ssEX{W2!FCgBf)aLPqYN
zE0VS@e0O4NqYaVpzbu$_+x{4x`>ttq;#0=In{;%(j1^g$J<|s4wO>C2Bw^d><V@Fk
z`#WH{E+a~<RAAV?5m7NZ4Ts{I#D<I%1-?C6(tW|;O7lYURm`9TLB&T3iV8wgZ%>p|
zN(!HvJ3PKtOv-p{VC;&F8sjgXoHSALZ@Gsku{M!ceOTZEt%XPC%IK8%l6Zp(zaKa2
zwnyfQzp7)##frv?3hc6pk%sNXlsfUwF`=m;`88t_7Z(+XKGJTDnkuqHk2Tc35y=y4
z;r7w|cczN((9{d={dR6qfmn<CQ^Ehw_O~o{F75gMW?LOpC?lOA`F0EVtCW1%YJ2JS
z(Z;+Z{%=}{rA2R}5{&2??QiWE%a_%AagCNtzoBbvP;pe;6+;ijg{Er%p{a7e${k|w
z^H~x~8(R!khvM{jd1<56Z5hwD#>}me4%hv!Z1FkEHkN6O2J8EVHCAhl07)<L%uyx#
z+)Zm7#d8!$W^{TVap_{-edSIqeK2c0tYRe1Q-?ASQu=c)d$f9~_OY<fVzb6cUoT{2
zi<ruz<(-$<O_O59+Y0GlShnJC6m09lpyGM>_dn9Ob)npKrSGC^LR{?Dg}U!K@K$;6
z)TH>gww0jbxcG6g(p!*sQDx1I?oaA`OaBZh^r!dF)v4^Ff(q?YOUtvTG|^SnF_yH0
z8Cw?KmLz)7Iw>kB7;@9KbB4Tlt@Lj9rKrV6Vmlk-l~y_UZzG)C%iY@u-*cf|ZG^-b
zG^}hfgwX>FR^DeYGO8MLbIc>$Q#&SxjMSs9@@|bjZ0dtUUrc$G*05l#JXKilGK&h1
zTo)K0RIK}a+mr5#mG_6b|0?C>dXpGbEcfZEW9lwYF=C}Mb6QejrP|(0)lY+Gws)R>
z+<W;FO817&d?K|!J)G(4E=NB@wNg##MS4ENNs3+JUH295@?GxUW03lsJLH>twGQ-C
zqFpD0)krmn`rntQe0vO*&g|~qpR?qdSo*&DjdBKOR0Z0UOjA?VSvTGbgc)xplZ|&8
z3HX!tS)Okv^TZ%FuVa%d((13D8x?c+{1l#E3&!4_sNF7^Fmj~iNAh5o>@*}xte$cu
zecmK%d7iSRH0=86h4uK>j?4Ae=|*B}l;|oSc~+OP6ZgDnt%=RZdmgJ~>~Z&JmaFv!
z$WyzCXe3EZMA!1hJPjFQ6KCqKtn%G;>|MH*M$z$5Kl-z~d$ZrtY|B%BZPf_Is(Ksa
zPwshi*P%UL2j9Q=)}HJAnKcG;X8CB_v-Ia%w!7xMNp`hWNz{RSG$*4-<Bj?v{TLZ(
zOXv4`uXVMwFupYGY6bQ9ip<53Z)PL~(r1!bv-y>8g7j#M6{3|{$C)vae`kyi5j!TR
z_+ZAoA=X(@LED(eQ!0<HnkTKb)sBaZl&ARuqYaQZm=lRf##hAe)`fa(pjM3BB}A6H
zjDe)XcM9#bw>RUM!%4kZp|{q}?(R!F(zaRi4J3_nhnQlFb=qB$sbw;oLf;)M`?t%F
zH@>s#LrXh~x*9@?;*1tidc>AKUA5bs!fQ+rcD;;lqhDmFXC|ji;nklt9hYg;wz<B+
zC2y&1^MGwK99l?nLSBMRhHFZ%dwAD%cM*wMyu(Y$G$q*Q?gqQwz}qj|f}6R>iq{!&
zbP1MOh4NO*5gr=Rc5-@7ilcvMzc%J%U`KjZmte;54d30uLY<-bGBR(<H|F-98Le^I
zceK7^H3AZ=D-LU-uV*CIb)T`cLEDC^663S-^O)X>!n|fS*z(Y=TUZp68}Qo2;kxFG
z(!pIx%1KE`_Dqgk^O+Q%F^d_wrU-k=H0BNa6e{_XxfP~0dC!{rbm8Dj%?T&&mqRjJ
z@q#9#bx24-Rt8f+cr~R(w{C?~D{(Zp(AJL0SvkpCNsiW`!4ctq^y``5J-$J)MFszz
zD}CUm#hLV(!$$TPDJ`4zEFo>P%rTlw+mXP%J)c%7SY7HdyThOF5ZbafB`tbuTBH!8
z9m+6TGChw>_w20JuQjckgpyWYp5JAjM~ERopUXQRnfEoBJ4FsDaj=(E>a@z7uu#${
zGrS~se;eYSyP)DE^4WE;<kFSTBxJ}ph0=Gi=K5K8Ne9=Yr<kSWIYP!TLXa(AJ*AM7
zL{ceZbzS%t_Rs$(>C`;}`RbQk%bfN69O^+<W^iy9nb}b?CnHMNgY-<tpy+EH`I)?4
zHau9<Fidyqhr`W1J=Jp20?IT^!jPPnnC%wyjQ9E4SDu?EhxTQAhpv;!8+$i@XS}61
zgcW!Q^ZG(wM=R4MY!W3~K4xlI{*4J5R*<l$GbUw}_|tPSw9hl=Us&E`+Jz;}%(ZQ*
zh2=|TSd{oWV^)RX%Y0!URilPcLSa#*yrXvolGpF1@USTFuj5^wt+((5IOEN`%a`@S
z-SFk*CA;BM&w(h(7V?Z2_{N)jnfPGL1Tf~_81o>EQ>V<qah-;Dv1UmauFN!QAJy5I
z4bUOVm_rfXzQfgB93AyZhxS)%Ghz;fD_YbQ7G;|@VVfOMhFKFvPR3`GVQ#(F7T0^A
zj>vFuT9+M;xIR6DyR`kyx8Q53<YCNm%t^Q|Sn9iRFLgz$kC+@2Y`D75^D?~|)4dF5
z_c>lA&P??(oJ-mgyL_4EWw=@miQSQD7cyz0#N9Q8t3<eVbf3QE;pmz!W0TEn5<@Jl
zjO}VkNG1|#XSeA(CC)Ng$Z&U`2~^@95vg5$hBhO&CSBQ+P?EBOc-x$=6450gbD7g+
zn+k*ndq~%Wt}{d0rd^%sXq(RE;pjfI$D3oxTpe$YRs&$Vm88}XYt?&CNB8MY9%98Y
zIl&6z;pjfy$-_~ib4|{1IhM@P3DySh`bNqYi=}46(RST9?4|>{zFV?+ka{GQ%y6__
z*8ydgT3*!P=&(**o!z^Jb?-`#H6cGEPmWEY=66PJK}&>Ap5%7jO=z#M@UG$RLM`c9
zv~Gwz1avb}>)8}(!7it8-=QMTaFSrj)}$ym*KTJ1`-Fx0OsWL7HHxnAuE0*efj!e|
zNN@%Att5%rGdCWABmBl3=}N5Y$Q5&>-@xr%L0m_!!0r78?%)dII&uZ>;5TqbR}j~c
zD{x1@fjhZ^xQ<+bJNXUV*%icf<O<x`Z(#mg#hF`4U}q^7=FP-hf&E*U)0>I80{gcx
zr#BOG1@>=YPH!gW3hdv)oZd{#71+OpIlY;fE3khHb9yr|S784Z=JaM_uE72+%<0X<
zT!H;t7$5YXxs?PC_ith0el0BAzlDYSwXksi78dTs!d&AD{FlV4)%mB7&;XjjMbHvL
zpf$9Cb}$OAfiW-^#=#O;3d>+Qtb|qY7(4+_!I$v!@x#Zz`h53}Et|gDwB?!A%T~{R
zW_51TsQ#l|DKU>OtTaK6>Q$fBC~bXkFEzY+z@%tZITP}$2Q(<TZo8;1YM3_j@*9;7
z5H_H`vK+HQ0tlp<X_xlZXZ0S?P$dj#T;f4o!vm|&(veoJ9?;N;v{BmAZSGgyTL<)N
z9cW8Hb{hZPR7se6TA~#Xmzw%Y18yy}cuyZT$s)6AqqM-GJ(Q}Wed{y))M;p3*XQJj
z^D+HiC%4~@4pN-gXk?u0Baxu}^s4<bepWjwyPccv#Pv+p0(F7>pHI*7K1zA5=Re~N
z<=+$r)>7(W2;n~f&W1g3O>O??D=g#Rd0xbS3(bUAAh@1V<KcN|z<+?e9=5<G=kZ?`
z&C)e?$9$fAV|V#a*-pN+d;2vfZt?sY0p}d%6MGhXpV)n=YV}m`rs^uNN#!($s%f1?
zSCTUoKyg&2G?ER2s-{$>7J&&Z0>>xU==LElb#W2%(B(g7zfuKo`m|dF6(@gj4Fm=R
z1WMa{01m<-I1EQX+JIwl9NN$p$UhYbgK+2oonRDP1JmFJ;2-p<weT!F2QR=ncp0QU
z*#NJ@Dfk(_-S^?X*PnS^ZU(Qfer9#f>JRsQm{4-9tjc#7t@q>rxsL_tcH5&}E$!~0
z+ka`Hey{f5|NW<IcL(oxKL2-1t(zNl&b;a7A}NQ{K%1c|Lsh5^b)i1=gJ>8410e<m
zgWMa2!3ek$7QkI_4=jPDupTzR>u>^2!h!eSc<!P5=G`}a-hK1lfA0M^a^4svKU}$r
zMCkNRtmL~aby*$Z|KOfWS?PGL*HXOcMfumO_p&I>&iq@!x%VHmZjS4kP_}+dQz?^E
z@H3nSKKC*1`IXsMh3?P;dO;tEh5?WasgMTCU^zSpD`6Ep1k!I<1CPO%Z~zX%Avgj@
zp(_1}YET`T!==yyE`yeEbpO#En|Hjl`K1-|v;XM+1tnJs%quBeDY2dSDy7-Z=iC>|
zZadmiQgj%vmZG(OP}^+Tw66S>^_e}(->-d8my3=s2kGCng4WOvu7YUj4_CuL7zYWE
z2sgluFau^nA<P2lBi;l>@F1*!mGF014G+OOcnMyHo$zni1s}m~_!y+0`3dZWZ@&Cy
z=a)NQmY=6rKD}_|(<}9r$>x<*^NKF3IC?w2?gYB5b{fw-W$o!}siSomuNLrY+6tYL
zJ=$8!&uT(Mzo+28@H6}Z#lS!QSB;=CG=Ufx3`1cUjDS%f&jMp$EG&X0uoRZTgRm0T
z!OO57j=_n8+g>{O*s_JQ7hXSm;p~?ld+FebgCpgKE5z()(^}g?pX6+7@E{%LH!Ht$
zYwOEaqjhe#YkU4(Y(zDa@;EMK0w>`V{0#DZr+B^#ged3=-Ju8cfqpOwu7NSI0Pcc&
zU=b{Vr6A9U%i%%T1-oGn?1j(aOE?Lq;Ad#egNxBGeDU>1Uwm|-{Lm{blwP56CDpv*
z%}BJqq}Oq_*3nak@oF7f>PGrVWtaMAY2S6*b(K!Lx7@W5eO~}gpeZzi3qhXiF9rv6
zg>KLtu7sY@3kJd<h=DXnhY2tdGGG$O*gzI!!#ubH?u7ZU5blEeU>V#G&%?Qu|5{qF
zvX_+BP<tK5n}*EMp%<jDQs&X2KUev8(P{UVyB4DF7vM!$2QR_PAmcgf;Z^t;_P{5w
z7xuwt@E<q~-vHwesyftwnotXZK*oe>LmjvR+CW=q2VvlZzR(Y@f&@6X@_&eytL!DE
z%fFQl<4r?m`9H=7`(>B<=PLhDopx`zYa#khgd|9Y6i9{fkOt{62X2O2;8wUD=EA+O
z2o}TBuoj+yXW^gl9LQMU3-BU*2s`25unTs>$8Ze3hvQJ2@xpT}|D{-C*-J{7|Ajh?
zHw~HPFZZvqOZ{_||D`(Z-g4JM^j!z)LOrMt=YfphHiSkH4iOLu?V%HNhFBO3Ltr9g
zz$D0oEXW2K1I~e5m=6nJA>0M`!XkJW9)UHm5zejr??gh`OG=l&<eV_xG-Q_lJ=kX1
zrT)3f|9qWxZ@FtB`hEj8!JF_FYz7&(e;c-ftmgDJ9D@JA5%?C0fh9Rq05pYWa3Nd-
z7lQ+2?7ul&3Rgl8=n1``FZ6>EFcL;V4xC&0&t@^AvX_)D|0+6+Hw~HPe=F%KyVO5d
z`Pb5E_m;aBqVHVDgM27}$uI?`!ZcU}i(v`;4VJ<E@B};wPr(*=8@9qbunpdY?eHG#
zfFtlN9EI=TIQ#&CXulFvhKu0b%D;fc$;w_*y8M4?XoT^mA+!8%&^~^br?9d;4SFAQ
z^gs5Xb61Q`(TKO)wUGKLWi92@0)JCs8(d0$C&MOaibf~G2B>>JeFb<LVps-jA56J`
z@gTSvjx^zUu_@z1a2!tBAJoqI<b++?x4+*>8RI!*Pr>K*laG9!yk~dWYCmy5Hs0P{
zF@Boj#c<7*s#d=M-r2=YT}n5bJ9W{jfN?NB`RUHH-F&Pb_pI&BAH8zp9ii*3pmjyR
zHB{$IeY+SOa0xVrOF?YmGH40Cpf~h^z7P%lVI+)#(U1#ykPihg8K!{P(=?b4i(v`;
z4VJ?FupAzP$KeTh3(l?nPrxG2w*G&EHT$R`X8q6BKK@_U|L>`{K62MW^t~Cjz}v7D
z-T`R?-i7UO7`}lc@GTsJ?;(J;ArLCTg>VsE3=X&inuD|>E#NZf3B8~<^nreG6%2<F
zP)fOveDp*AZ&36|%~)EXvn~J6Xt{i7$SnV4?c@Jt`G2Krgtzv;x#)c)Tn{;r3we+a
z1t9l;DKHi8g+;I!mcUZD5B?6TU^To78{jqg7i@$#K<*=N!dvhq?1uyJ6?_dx_kX}^
zoY&UAw(7oBv*d?YJ=t>QJ~<ij+A3N{UA{w`oqhR!$eqZ4`Hs>)%2>W<zN7Ki<MVH|
zWxM<9JNd`jw!M|4`ZfInb&2Ty5S#?*1)YKhv=<Gb5j2Jipb1Dnpcz~UogoUkKv(Dv
zS3)%OhXIfbDUb?jkPZ_-`Vtv132uYiVJ^&rJ7GTD56j`i!B4h*^2)YPwyim_hBpKY
z<cBLWORl6CS4ym--$iF{9h)yK%{m5ZA7!+TvnkPcwKaP!QU85A@8#{!4$rh&b-C#H
z0eBJC!AtN8tcO=Y`h2g!>#!F-g?;cDd;wp=H*f^Lg&N!^YeFpuhT2dEq~BN%>O(sS
zg)neJ1Vlm)=n1`G447@g3$LwtVa)>hp-q@6ZGv$n#k^v5n{?|C<v9EDf92xR%D;#9
zQO5E=yD~T%Yx$S9Zm-tj-5&hgkZLJ<z7EF1I7om*kUoAgq`)kg4L3m%+zhwCoiHC3
zz#4cI9)l;~Nq7q6Ibkh41Mk9icn@~K2Ovucmv-N`N?2MSV|J$Bd7SN7r1)&_|4(01
zngv8^ALVEPzovZkUE_IOC%jpWL-b!AYC;h7fL_oCqJgQhY9Pq7-e4FCx5GTR6BfWd
zun3mIGFT2f-~-qRyI~LP1$kcl9KM8R^r<d_qx*O6e`DwVoooNT_TG8-=I|p|66DG}
zx#B8+Z$~<ht1m6B1VglsGM3<(ZKc0j?cXlXriMSNt=C&w{T_3Y9HM^*G>4WD0^tw|
z9bf`vKqlls9u$B)^G^eL?k@s)_P-tOgaxo36up(YP#+pYO9%nxfW7?Kin~_Kx@*N<
z@4r0t`i$|3*Ck#zDlTR~%qS^g<|hA8H<o*e-s^eI{p&R_=Q<w^;NOWEv!3g<9BUpe
zifU^feK4w(c{DWUCpkJ}_O!?BYHdFcwD4^|{@YOR^|G}20cU4lWwRiC2W+l$QZ_qp
zCgl+hcfoR42~WXBcnc1LjOiSQQ}8piq^}$T9iS7)c+WL325tZu`?&{}!ZO$g$3Vt|
zD%0O-1`Y^;)({CDpgZ(}K5*)XqyIU2;IjjJcD=uC^BbEtyzuOk&;DcO{Y&n@`~Ev`
zE4p*$ol|l%6O87dal^FbkrSEeekkf0)vI+?iaa~bSRozz+2B}aT7$Ua6x1+H22~oR
zHHaK(SlGqgI+;EW1U_mW6;5ns9{uae?&i_xRO{NBv=_{4B1v0fX4pbG!q$p<G(x)k
zYL`Suz8qoGa-{IFw(`CBm^2{H^l@X{MAJvB$k&ZDx!mSNH#B|qiQjDck|U`bB1gxO
zn|iZ(blrs~%%g7gE15@AS{n6$5VcCAU3`O~4Rx86iKYK!^u8TFfPL^KgwgYjgdWfb
z`oTT01XjVrum-BrGpPwT!xOLzcEiVT3{DwkW&XIG{9t!E`YTTUV-ItnY$tAE+)m0U
z;4^zXzvIasdp!1IV|;M-^-Mc7j_&OgY95X2DAi2n{#P6Qym_?knmqI9?orl}7_YiO
z>RKX5+3x@;`(3aH_JY{K=U~}FIAz@lx<Ypln-F_g1k2z-SP5bmH7Iw>CO+cWvWL$&
z{u1`XcOdrBiXQg&|M_C?2V39#;LR^yeg5(1AAVf_K6u~V58hTZGbb%)9Crumk7TA%
zTF-_Ts}9v?aV}YElqRa6Hq>vF_SyJ<xVHl(Erj^-Y$42W)Q*!^@Q*~0&@gS_z|%++
zl@bG&B-W_do?Me(uHoBs#l_7xE}b(!7e6I(q(EG9v~TlTNoXl5Emv~KQHhIrULwsr
zmsAng)7>sIeQT|_LTjzaFJ4PDAm?@sG#A~6p!?Pk2H_9^qv2XefFwwUxo`*E4fnz#
z*bHyOoet~;!s#b>fF6(vMKBNCs(cww+**dez=>PqcF<m#_t{TA_IcuRFzWaC>l~_j
zAa4f(^xFaB-1fGhVQ(h>c(e|#7DFnKx<Klklzkg$2caN#-~`JSuHpDPh=*|?_An3T
z!$P<V#2%i2Ct(YSO~g3x2VxuY{3LeK9mF=0LF{8TST-`@a>j;W3h)nq)TyHfPaQqA
zZ|An1+cuj&uWnnn_VLx*?pw6*_Bn-frccgJPsT4Bbz$GdVPfmt;s0?-J?g6bD$YbL
zjnd|XTy69$D-DxTibiRxqIQaJj`}$|nn&VOOVDBDSNw`1wcj5m?vo>G<4e8fAvHOE
zgRO37S8u?zz08Bsby?1JUDmCK%SDO-my%j7Z5HQ<miWvTq@)e-^lhGtZ~W+*?`jWq
z3uB&_#9*GAF_>qnrPR$k;S`*P);xb)0WokrJOEqa8>r0_)OnBy<KZ#*8ZK*rUBG>?
z3O<FVmocUf_rfCB4jo!5)e&Yx8JmC#Z@;ywq_R|&-hojOE|jv^2*uEydUqwHgVe*R
z(2RPR4S8??c)C*SVFT=h-H_QDKkyb5T){XZtcShuIdpGBormAHFpo)2tj+Da(Sz1i
z+5e6wpW5U39Z!5`!TnwEEwOQC*$x@m(>yBbztHU-A&sQ1{F_KSTN7$S6Oi(DKnsvE
zm$KevmUCmuw<UCfeh>p=Ar&S-23WRm7srd>LD&GVgV@IrI0lumiy-I&qaYLVz_K5C
z{yT7V?+1H7cy|kbZ)|w!-RGZq^r00GEqmym`M2Ctc+2#H>(lM}FFB?~e6?~{+TlH6
zubAy{+vYpW_FJye1k%RdU8jp2aesIuCko%MT_0rhE?sBZU)8Ej#2-?%OGtE)DdDBz
z)|2DJ-V@Ag564b%^KG8<^mn**fN}pZ3W@k%>2aeOW==kf9~f!+*l~|})VlVE=Fum^
z&X*(F@me#QkxnUE^G-pU+^!+@uF#ogxL?Bg_jra>389a!?D>ItRAt6va-=TvtgByA
z234u6HK8_yK_qkqs~!*Km_?6N24q7HY=o__1CGIQI0+5fVpGr+x<d>Mg>jGx*^mb_
zU^W!N&9D@f!%8@D_{3MA?*4H5+uPs#*H`Pmdhx4gpIozg&4X)J-?wPZ!Zq`5nZ0KA
zni*3wrk0oh2lRM*jd}`wHJeb&t;Z|(SGh*+DV49fF!PfuPx5c6wT`~7yV5+0tNWsP
z^kttw^QcpkG3L=_=Vh8lkBw|&9{t?rUCTAJuX!~1;;+r4D;nHp9__5hQcp(NbZzmy
z9FdY+t|ry&#g-&R3nt{6e%21$ZyuSph^uLFC06OOK*<pju@_wnc6YtUvX_!;X3fA`
zh_uV1?^SRVjzelY`gBm4N6HD10kh#|SPqBa2#ljCc@|na>F2?nunHcAO;9(Su^~8N
zFPQJ_Cx^@9#4QD1*;DXGow(gAcH2|1!+v5N+xz&_FFkIy-~VXY&aGvabKSCc9^TbF
z5<}P5j5|Vg`^+K3&>BnqlCrnTy$~U{o8>QMUj$O_%RtKBD)&Un{Z?25Pl4Eh*uX;|
z<^L3{gN-1zunkT_Aofrlf}l2tjdTLBlT*hI?%ull;IV^mzP|3MmG`W?dF4~<o|-vr
zW`6dxiTtI;U!ygG{finfU+LYCxR_clzfx<uU1`<cdJ_+twPtesD)UHGL@4~F4`Eqy
z`?G>5j}iVi6L%pkq01#wXY3EkC2rFvEcWRpiuVXt(r%k>L@IrD-EN!LNRQbfaU?Ey
zBEE?!GEP~<n^F&%C2ncw8zT+&be6;?5<Tw|<~3ruI^|P|MKu?_Ujt(y12UliW<)Ag
z2#>*b*aauxXHe}aM`#RbFadI)0H(omSP3t~de{nwpg{+oDIpTBfiaK)nXmvB!Ft#L
zufrzT2B&^F_1)ovhrihK#jY=8H2D3^8(w<$$<2>4F8t5~OYXk&wmXY%EGoD@!>TW`
zCyxuSKhG@fR|X$2OItKR?g#!uKN%Xfv!mwMhJV?k6GC1&?NakdeClhJlLnYFw8dF6
zZXVMfiJ^@iF=WUd|Fq*XlYcO-r~qS(7)zZvLq?GHUi^k}UG`e?{ayQ;VMLasT=v>+
zZTN2UXl(6Prmr0>-!)RN<r!y$k-d(2TO0cFT#>!LVl*0D*?j)DrnDEE^^hYKBIR$D
z`5un<!LA4%zbWS%Kx{zDT*^+$Z7fLH?1q6IxmUo0@GKmH)6k%kzrH?daczIp$v3Vj
zJst`6*<Jo^KS9f`ZHwy=1=vqs@p<x3yNg>}{n_vaX1m;W>Vs}BKQ~P^U7ks8;pQUe
z?*09#T@Jg={ah+9Z;fX=F;4qk!!TCE#V`)z$hcoLl=`*ZEYAUyos?-ZWW()n4=jRZ
zAm#iptOY6W^{@#Jz(J7m{~5#vs$v86L2Th7XbA&gAdH1^kP2y#2L(_Fi(m~%|NqNR
zcfI%Nu20|D^xC@T);<0B!z=Dzw`AcR3txM9PT|zNth9tQL%-Cl#dW`<X34LN_XM;G
z<V=307VHUmz_j^Fv6sscKGGxPe?^Il_^6!UORm!@-`IK&*9S#^F6Y$Yp)KYa67_ZY
z75`Fr+Wn?#Jc1yvNmf%coVdHfOX12Dan~W9Y4(~egj^SQDRkVCwAK-fB>9!T;D2i0
zZumYrdN)@M1HjM4y}Mgygq5p0?2<|mw(G8z>(VF|aW~pEF%W&!sOFDy#1vn2EoCC*
zA!V=yT6Cr?;2t;tEP0~F!Fu=rT6W>N4IYG((46kZ6Yvyt@5cAxupW-UDSI7oJ2_@|
zajT!cPxjlx?E4ib=PY2CJ<|8fcJj8}+a~*on~Pa@zZu!xt?tUXuGOO&{p{u<=h~%B
zivl+nIoB>5(+;}17)Ec@|KT+mEjVB5+D3Q_r0jRXE;t4!pfcs(9K<HVARGoj49ozr
zlbhjISPoCYS`fQA1*bvmrwKHNu^_fI4Q9j3Aa=D8HbD#QN$jfw^nm3cc6I{9)=qtY
z<m>%k@7uF)*ZceV+xq5)H(z}E&Bxw+_{~*sK6u~a`xbEF)|+O&IsMICo1&@PFQ#^&
zc8FrId+Juh;2lOCYjph_qYla*7ko}>Bdvhxllr!|xzuj?l{#tcsduv1k~Sw&K)8G{
zX|b_4l#h>$sm60R5?6LDMuPkj0*S73X+3mnWQB6Y`%wHZgpyxrBV@1RYn%MN5zm<E
zy8V*9cCq}553Ud@IMjGbB^LKqF|g@f;zL~_I(1NQr4FwFs~$I_?nXgZkUBjSq+Y)a
zQn&ZQVURlBg8W|wq0j}o!qqSs(jXnC!ws+;9)Q)b1|Eec;c0jlUV@*Fe{=lc@z0Kb
zwBwyk>z{vT?W2ER_RiXS-?{gWo7c{qoHKJ0E&mwu7Bak!<bk|xPIwJX$**Xt@01N@
z?)NtgF^?{|-01mG7IM_c_|;)`+bX|O7PYRpA6NO6Ui!U}KXN9&+OO+e{1#7Kg{%CE
z-?zi2a3;Unuj^dWG_i8DdHwd7MEuFGgqq)D8)x!skHM(&gp$3!uH!PU6G|$6BjZ=Q
z_PKZ<=kum=LnPFJkw*SWp}uZ36I_?Q_P=Y)hi3Q|Qhri)Qf5+4QbtlHFT=M`?@DX~
zA|M5Bh9$5Ej==>z`2R650y1DaoKm*UcQfz1E#74dug<xVb!&0g+eN=vwv(sr-X8OL
z;^s}azO$#@=+^pv5yOzG(fYO+UDwSeIh+?MhRf&K|8{fP>#SzFOuPCSH<!Mb9yDE~
zRk!!|#N4zrF&VpyVM0bcVxX#l)Hf;XP4E`H2k*lt@E`aFj)2(0N%#pWQ|?uu4v2kR
z0%9XAAq1{~a1fj623NuW7zRm@3}Q=}kOk9V4v1~t4)b6>EC#W)m9Pq)f_1PNw!n6H
z4^I7X<cF_6|N4hdc73p&`2$<ue0ANCb^ko|^${+9^7Ye?KmEvxWk;4RzUz)7cYJ=w
zoWeWoB}l!9%*~g2LA{crl5<?7kZ|Ehibo$wap<Fgjf^Kd!by=eN>jQ25*O|SawK<z
z%cl|*`vdvgjhbn;SjaQmD8fpiHcGpv+c;C|f3DqPN~ziB2_tmh0k;`@@gwzHLg*Ca
z47x>*sOe@8u}gi!honbecW)U_H6Ch)6w|?n3KRY9fZgyhNWI<<2jDx9I{rOW?ZN+e
zfW{zo{zAAIT7uMnCqzIbbb-Dw42FZW4e>AzCW5pR*^mSIFb$;Lm;<-K0$2+Fgy-OS
z*Z{A=JMb~=fi}G4XbY+r<JAxZJU9FxV+E)7p4z+fy)Ey(v0)2?1uq@lz{SVj*z(4E
zZ@jcc&fnmC^@D%Acj3HS5MXU+_n`sCeU_tluFn=7QGRkH<rv(4l5v-ibMq?x<f_(o
z<@$%YF2B;YOXb&PuU*~Cs7BZ^vn<3PK9D5MgZArQZf1!iQ!JAI13SVPiy(ySNNkL-
zUaZcv5`4St`Kvg?5>$lfUGyt@6`hJc8>7b#up3ST3*D)UU;rG0;69AqK`6w+ZSW-Q
zgrA{hU&<V2z-o9K-0lf(CvG<gHy5{)L!_f*+h20Tf!m2&m{089++5u5F#m5(Bs-Pm
z-R<W+j=Mei-xV|5bosjL&2H_z=ec3Rh799gbb-{F2G9tk+#^BCeiumj?}g9dOE?IJ
z;20c-6Yw)wHqs2+5IboH;m`s4K{SZ%{5XX4Kg$^LM#d4~1y~2`VGn!>N8lJ7hZArb
zE_#DLDl~`gaO#Ke4(;Fj(TDp#+P{7OM_WJI`0@+S@J49G>Syl1@BYPi&!2k>e>csY
zIsK-|=0gCr!cnWxsKYm0_mZ)nA3e(0zt(xJv40?6_o{czc+oh&yvw!5zGu)%W8W+7
z24kNPcq3mt@*hT#Da9b|LJN7^qJDMkXSBN<MOVGRtc`LcZc;?Letww95D#@(w<1zN
zT<83U0Wwd;JV&aWOGvXt;)=M*6>-t+#N_1L2_wI9-3-h9phuUzT$f)-pV5BdJ~sU$
z3CGcO^}m!O)kf;(chIt*QgJX9{tg#jMLP|X;AVILzK3FHM(5%}=nB`uRQMY_2k*mC
zsMDYJ0S3V&xE=lh8{so>tBn;Wf1E<7g0411T_|O78k!E^Jq!$o9GDM}!DcuBL08l6
zLv6SM`oUF@4EMn@co9y(k5GRg_Y#PPBuIu8uos#R`s1=&VOk!#_9%ZTi&1bd?0`Bk
zj0eJPun8)~G7bYb!aDd7A_p@!44#1hKnU%63ao@r;WFCzM0f!9zy%D1H-Su;4L3nW
zxs;O*Jj$OXne-Y&eZu`NHIkGu@yxX^Y=QkRHIm{btSzwLrAGAXex3qc$@aU{h+gy0
zcVOR3jr=Z4ugL;%PDj$8Y|+KP&bo$w>h&Wl7F|qE`JY~N(OLSUi(z_cHXn;F>U98p
zEV-y1eJr@B9eu2~=yLqy7F*PDrsa7y&750n?fF<|QHLz>7c#A4jm6~nKhqkEzthr+
zrr~ByPRa4Kqi&9KT|cpZnC}jeYb8X_CBcZ7dwjh21r%*=o(p=}!+EaPW#%Q>GcF^~
zR!1oMT-H#G4l8B-F;Df%xhrP>>yLS6$0OOkwJZxTM*5H0f49@y0(Z7#`|Wlndt2bn
z7T9mMGuhh$cecR3yPc9}ZwuVn0{dU#&f5Zaw!r>ZxbwS)V)VJJp&0G-Z(&Z)3gKp9
zPX89>^k!lu=IQirVSd+8jCT6BFu!XkMmzmmnA4kyxsvVQ!u+nG813|LVSd+8jCT6B
zFu!XkMmzmmnBO%Nqt9gx#prWcLoxbStfA<tRp;{P93Af8!u&ouM~C~hF#nIv(cxlY
zs;df9@|&zuRH{l)`6@%@dA$;hOA`JHRIZw;GC6jX`qvE~yhc+w$c$2hRkR9M9f>X6
zh~aEwjwf}wq%&Cslj<mB>l8UuI_b&7CCA7^5=RcMWO2>G@f6&1Iqt$)uyPX8UpTve
zE6?#NkudSd%H-EG6$5!i)`#o8)Ifgw@-d0zTGHf7g)5B2@4%<;FfPA3o%Yy+{f0~;
z&za~TU5zKV!76I%+}I|??j;bWI#B{nza=0g6Ks^1_~vy3dCntG^6NnN4)$66iarty
z-K40kh5d&F6}$U%miSCI%E0pLFnx=}4E`MKvsEZ1o24cjdUN+57#3`%r%Ca*)4qtS
zI&|ZVrp00fom7+JjWgy9nLqZ&IJwehIv=LRG#Ya_@yEC(#SaYqrLgMIK?{S5YsbWq
zpT21Q-K3-QRm|~OO^Ydsn7ikn8luC^vxS>8By(o_{4R@{7SD_g$q!RS1)t0fDz26m
zHFeIAgA2rE*U~PF0>%Xu&mO&Od}yjuT`)8>)pDyDvpF%SI9xf$d=Zm&t97*&R|CUD
zo_k#r+2U{4@>O%6%MqEmaT0?_2@ES3a?`chDVa(8Qle8t3vH&?u%+|*r4N(C`-bWq
zd_2OHbIDg28g;4~<D*lW7Q4rpcB>UKG`0Wqf6Q<yk!@L<*vn+fHpi!}w^bw1WN*q%
zTU;J~vy5`I?A~R=c6%>9oK<UG;m=IfA8XfEUA5BA=U#5L!MBa;I_?TrR%@?;t-EqP
zSxxd%4ujQ5H3<D%`aV-{TJN6zEWJugm|={?uVOrYBb<hI&++aaZiK(XX80BwJ<t0-
zNQL|0EjR*=U*KCY_zXUW|3U-apr%0{EQGt@N!SWsL)CTVH1=Kb(m_W5-QNF6SzHP|
z;5wKFi{V*#4~{@B-k66#Ur2<Runb;=o$x)>eVO-tFaX9w8l=O`umV=XtMD=Gfm1pq
z`nTfbk5h<8`Ab>+1RY-Ce=|TFWWikc2Rsb>q4|2|aKSS82pYYLUswR|K+O%j4~8Om
z4NgOs*Z5x^@J~1fp|3Ni03LygA}=Q$D7MPh93pk0l*IwK^k2-+gZp7Ov}4|l%+Zng
zIWiYV=HB#xJa`bEg?(_*Cgusi6R-hxK+QM#1^~7~?YDl{e7a2@`$qC+ZEh#~t*f%%
z=ksKj-NkL*@ix25A9bS3X?^-;v&3$>s=eFXu8q+YRAnj4uj+=lxg@2GHC<#%l70TK
zF^$OxV@zIZEc2<PT>C)`B*Fy9fhjNzX2T*_4pR1OLCXJS*b8C@2S8EwfzS-ZE;>Lb
z7zjgQ8Wh6Aum;3t*21&!GOP!&p^YGRv={clK{yP@;UxSFr)7Wg_{pOu4<9^!^vlEh
z_U!uLowqh_khx$o8;swFRxDew<enAtSKK~l)|?wAO9?Xb>Ec1wfBEZv{sx%?#r&uz
zYRoa*WUuE(P47|LJo>hMtm$iGPGe&>RsVSUNl3af|6$XQxM)doP2BP_t?x|aNUpp+
zw4Uilj$~HWmN9zfS-SkgHqI|`&N6&TF(ZvxTyn&J2H;oRt^GIkS{mm@@pIjp*)|~I
zuyMU^o!Q1-j6%Y-jO%0Ut44fb?AwMfH}+yA?L?1?dRi5#gVbFIG>4}^>hW8!1$M(e
z_!165P3m?KNF8qtZ6F*vK@{|WUN98WU;<2mX>cp7g6H4`SP#2kHz*9gHq?j45D80Q
zDXfKc@bizyzB%~C-eU*9IQY?rA8mj8U$4IO{4-BJ^ZcXFuVPm3^RK?NVBW3siWU^!
zFlFAWd5A<0mq+Fp`)>!O8T;`gDjECx2Yh1eFTJ3Rv7d6qEyn(_tV@jYki9P5uA{kA
zQZBM@Wc-TU$@RmHtFkxGxcW#sGhx_|nqI@$zj}UsW4|+FzOgT=O>2X@QF_e&TO56Y
z(DJJ-aDNNK?y#I!_>XWp{*VE87%7sy_BCL-HFwx$*De{RT_VG@VveR{8(+f{vmCXR
zvXgR41}P6IixVKaeirt?X{f!2Z?<76EQ7~j7t}|0&7e8_h@MNfBPB;1xShCp``Yep
zxBX;?{e%>_Hn$TuZ``O{TNzL2yt+2GlV@Dl`6$MIQrfY-#ckbTvD;kTZgGdq?|65p
zaYZ|5y&o8R(rm2_6RmFlFAe>JSGcv`hL76J#oJUx1?1HWs8>`FII>S0R)Z-B9G`5M
zw$Zv9#_J|YVzH;oFu?j!mo~r_*a3TCAAAl6;TW8PpF!+EZ2`(X2*f5DfCHLC3up-;
zAm7TigD~g^(J%tUhL(V3M-Own2E?AW!A_`)Es0$<0kJIyh<){fK9CGKkOu`|+y@T-
zeEj6$lLrqRJo(wlPx$-j<cBA>eROimrdQYfbKTRAJ$&--4=lZV{?hr}4BShPn(*Hy
z{fv4gD$(_7UH^2m&Pnk}otJ$h<5ya9In#C0C{C`(USH{VMJ+>GR_;^g6*-bn&H%#?
zM|Ec!;gK8PqzJil+BY*=1Gz4(f^m*(=b@u;m0!7PwM^Fe>uFsLxndN=ZO%%z?gxW=
zZ8t)_nH6a4+x5BI*jw%3Hw`K?d{(jjPisKN^Wzyqk})Q4qiVe{k?>N->m5jOe|sQf
z$L`}(gBcwcS)OCbmcLwM%vwg1GmMdI&yid`ZtplluKQS=9`Ot&9vNe|WLslo?tU#-
zd(6S=o#ZjG)sjZW1*;<k!{e=SxG+OY35-mqkiK|EJyRKBZ^wS#Fg;S|^y#BVV#vs%
z0+AM)+Jq76mX0yVkhcT*yqRcATHC1(5W(*lG?{~2fie1;%XtB3qTMWxa|w~DBDo^|
z<ef&gag;*biRPJ34gW@9=EC{4V;aqTZ?3;QNV_WS=x#Uw)4rsghaUU+|12;L5+N1R
zAOkWX2lAi*roeG~Epj`dQ|j8javievkI$3O?JlIswSDY5<ReA<$vL~Y32;k+J(@qq
zaRA9M?(@BePce_4tJ%Rk%5CIuyVH-BMc!&kufpC}FdirB$^CN|Ncn#WVgqU~U;|a5
zI)p$P<bl}7L$C?nf-m6!{0w3@f!IP_=ni5-{O>Y#4Tvp`1+k@M5L=o6VoTXz+0jq@
z-;b~Mf3;8kKK}QPkN^GgmN#B|W8FWWUbAw!{#*0sC;?Kz9r@`t_cLd{(gaCU$(jw^
zx1~qXC~Zv7V8hqHuP-+4)3WD2jr$ATPvS1WBE{I#E08_zJPjPUM*dHc{Bn*<gNrxH
z5q{;G^d($wQrx(icYiq(cPVroc1xP|Et2$Vq%WgWC%>0U!Yj7_T@94=9(GI0iI~vT
zkdbqSbV`$ljiBOvBa$b|J?5kNEqEU(?k7^z;)5A=5<Z&$Vs>EI2NP$Hj!Vpr3r&?b
zp4rA-P2SN@RQ;#RyGD6$8W%rk=!+@QX@}x!jF-2z`h8jKn4scAacc3b+m6I`P7%ra
zp62@=+|+mrTVuSWBz8>oVinUdtx;ldjO=R^x8dEamBwEdyb(WriO7{S$UWJ5&z4Bf
zW1<R8RWbLO=@_&ybEd>zR8Vd7FEK&IA^9B>zm3};GbT1F=JmKrg(5-juSEs#&yaV(
zT2ectWN|kSR+S)_W?Fvj$8!E>*}{}_L8pN5!GY@Hr)IZvJhiFkB~Mka)*LQf@L-h|
za2d}o=RXx!sqs_$Dg`ZgMD9El+h0ZlH<FV+=a`%7+czJY`qR2?_2$i1Yt+?`)Z%$l
z{!^J^oPv(&Fsefmom=VrJJ}0i@;?OC|7PTL)5<UB<r;a%^2~X;M&7ABb6&2IcP`JI
zmt*8k+PHG7=j9x^vpjQNu95R5sJz;CC%4yfj6C9hHuA{w%z3#+UXFb@XL)uYoeb2L
zV^u5H$jh-C<>bqOa#VXccB7okaxcf6muokw93u}e&puo^M_!KIC>bUwH){_s&u&yX
zM_!J7xNruA%CXGLu^Sc6``mKOc{%ps!ppM{7haxyxN?rX9J^8S^=CO+dpUNa!ppM{
z7p}^+8&!^x%e#hhGq`e&yd1kx@|vd{)n1N6VG-rofs826Zd5r(UXI<Ui1O^iMU-bZ
zs+=P)$DuHptyzvOTsd~5BFeK57g3(wsB(_HT)R=_7<puQ_TkDo@^b7(MV4nDF0wqk
zQ95#(_rLshbKv=^z6wywR2`X6&OAlgDjU<cWD1uxjZ3C-c|&~vo}0w^M{bhev)Rtp
zzsR=qdN%R=)%_0ObAj)Q1JwW()WFJXph}u}OA7yggbS5gRC2aZ2`wt|RZs5$4b|1r
zfhs;apmM^1#%fY@jmnwPm8<8n&to5>0(u0fK>iDt$XY$_S;ALV)zX$MaTqPy1=xF)
z76DaT1k_LN6&Rq-TQw}8!KwiPJ@~G=zG`26R__6Ah@g!cQ+-wfha*&=A#a2suTAh}
zHhJ=(c>!@*@*WHjd6kh@8F>M!iI&$`#SREmg9lVrL)aT~9fY)REmY4Q$BI{|7AmNU
zb-k*R{|WWaiQS4uUK_`M-j}70($)9H&#-s-s;n|on=DAXwQCyRORDovP=_OTR#gEt
zD`n_|DqKmB%YlY29n4TZUi=!GR3$N0Qu|WQADVWn_z5zi@1#bP>tl4cB&ML24|27N
zx+Ntk?fn@=<4=!J>O9(vwtXA{gEsMTiQ*H7LUwGu)Om)!dZ}PS_Nx6d*D4!xt+oEo
zQ*|lNfZ$ElRp6?CG>590&?1188JfRHB@DQT??zPvLq?b(BXDRBn+(x;ZB<XzDOwdU
zqR(4uEPK8<Wv!`|>XLxgDu{+mhp43H+;RGz)k&mZb#EQet94*DI%0Y_YgYxR@Bl2N
zasy?2Lqopvm(-ZdYF6aSN?qr=IgWt9mdRBERKQg&)L>Ff@T!!tq_{ekSfAw9=UcPW
zu`5;2fGFZQ&y-h7ELEj3t31bcB)9V*Bb->Ugzc&vq-AJ8SJKkRmX;>7_@qQNBrSaG
zi>7p1NJRqc0++<x$%r{2fKtM*&Ph#Me6BQj#!Es}SbxI=4#;sao9yerc_7uWAxwc!
zp;drVv)}^=VTSK)*aK~`tC_G3E<*E}@Cr!TkB8@>K~+|afGu!IHDtneXn{Vb!Zx_H
zhEkJZ6Ewx3Cc*}&OZ88Jr{QPli+L`DyI~0oWHNmY+yn2zw{R4yaqH*?S3+O73MN4o
z<ili`0uR6n_y;@!Yv2?36s|=XH^JlZBs>Lg!Y@z^Rq7HCREKsD1|6UibcS(|2x%|@
zCc<)f5SrCfst;sBHsr&tuo&)xWv~N2fMTF&QkOzM$b%K|I(z{Kp(BOX6=uPDI0fw~
z#B7)f&%#l-f<m1D6Ja&fYJ_FLNcbCk0Oy@gnL&5x0WmNJZiZXoH8=%r8<TJ73|(Lj
z+ze}>#s$O$ZJ`@n36mfb>NQcy0sSBvX2D|E4wahHT0kAB2Nyzb=nFI8VfYLh@WpgP
za6of#!U&iMbKo|38P-G8g_Hx#gF9g>jG~oEgB#&VcnOX}z{S`xgg|c?1fw7iX25Om
z4D5s24*o+0^n@6g0guBA@EIJ1i!R~6VnIBthKJxAI0<c=lP}1H+u?cG0zW~`OVJy|
zLpIEUXW#=k0Ige4HZUIYVHK={%~0hs>JYSs>2Mn?fkW^!`~pEO(Hj)N?JyS}gRM~Y
za{em>#KBbfJG>A7h2|lY8DzrWVLO}vM=QSShp*ufRBDZlLpIz1e}kp)BJ6?_(C7+Q
z4TQlk3Fg6Lumui5wKlX7&=bbObXWragdOlL1hu7Yf_{($x54c&7aoRx!AAHD8n@$a
z4ILmC@?bu!fj3|ud<GYVQukpAd<gZ!Sm_St!DguH#5SN1UV&54F&ugDG#r5|BCs!5
z4WGlsk<=mh8|;Mh+LLd%1MY;+;RO5$jXThWKn|>gE$|(j-w~UDB#_nFpMu>`rxSG_
z5@8-x?aWF}FaokbR%hM=2cb$7?r<sefa^e3V_po;!h3K8YIUIwKwn6NnXn9Agq`p`
z)a{B5!vGi$MX&<a!^f}(K7muvup8wK5fBT5VG^u?N8wHQ0*aw&cWehn!y=FsN$Xxo
zT?APn^i8PT1G|73@DiMa_C3)VJPC)PRWH6=hQGr;xUe^0qrzhN0P6Lj-ojjX3*Lhx
zP^B;J3$%ki5Ch3@6KnxlHSGiV1b%`+{g4aO;dXckHo<oI7J6QV3`m4rm<}u8HFzDi
zz&`i|0;7o^+Cc)0ho|9tXwaYf2QA<-xEw;DHCzF0p&dA3i9%=Cs<9RFE0~+O8DlE4
zFEo*3PR_;6Uwq!(bbS8Y>KW-Wl6FQO{%E)VFX{ZF_42<Q-(TG(e%t){Z(pjb07rn=
zHp?@d^!}~QznhjBpgk9|6O7F>oIFKX+aK+wJlb7*TKu{BOXsf*=TGMUvfE!lpZ@aT
z&&^-C|Jrc=WLCJj`e(mITkz}ksoT#$-7pri6U?n~K!79AXs=}iL$Ef__+)g$wYm2(
z%j)J&W`&!}UhMj;&`X70sCR|sYZJPikUm&x?SzarTAQcsR=8=+ROrQ3rz>ot!Y2IJ
z2i^8a|E09HN8Tb>TcOh7DwQFeymfGG?tPoGx_Rco9`28JQy$Nv_O$$3H%p(D%b-tr
zD`Rbiyz7)P0VxNzLK8XW#9i0&7RTDG_~cx!ySurElea$BW`&b`RcYbmEs?c(rp4XO
zWrL;3l($XR<|)(N&1IjZ$&|NN*5)bG?xsBSX?L^qBIQ?Fe6<}`Y-g5{-OV$;vb*WL
zS1ChU9`}=$vbuSu(><I{OVu)@Mcx8hn`b$c-A%_=tqk$WTSjZM%CCAE!pU1nYqP@D
zC_^}Ti)n3ExSC}MCvQEi%?ekm4B_N0skM3Pv+QnKpE8_SnqA9VSZni)&)rSSl;OnE
zWXjuIYx9&@b~hbg?J~qCZ;P$XGd_1WEwfG;WXfA-*XG`~y1Qwab;}@A-d?*lcbV>P
zTBZyyl%{KW3+~$7WtQDd-;bmnWGgh0V@}*<%3F5VR^evqqOd|QmQ_^PM1@VLiuzzx
zhl=*I<lSdQ8)+FuMH^YsMpm?uR&7ufZDd6o$)iTa{lTgc759gV`$I*2uxdla{lWEa
zu%eB$tfHcgtY{<uifyDG`<1ely6&&O%hw&Q&AmRjyJ?y7{;xEd@|B2dbC>Dvrey|}
zL8g3d;@aG0{%^TyoymJ&&vNh_XP2*Ttj)ihmMLTRrOA}9cU+rM4%TU*yPK9-1=rGK
z%2z<v=9x}+H!V}%DV8Qvz9zCZPnqTGrr(o@Uf2pv<d{w8Pmbh^C&9J3>sr2sa&7+H
zv`nMkdY4)9+$djFS(~TMej~RY$S;YH<3cdD!fFpM#Km-z)Vj8pt1aol+5dxZzVgtc
z*2~o-Kl0Y_JZJz7q2gQZif^?mzSXYyR=eU`?TT-;|CheimhZ5aa{u%34P`ZP^L4-f
zJ=|(4pWjz{q{Z#~O22MerrDDzBtL?&6?%lTf5-GkyD2|u@#pqOr?VnHSA8f?d-=8H
zfGzdF_)Gfm_B{A=BR-$uer;MR!g((Te|k}V+6jN*e!ZJ+KV@u)t<Xe{RbjOz0oM1G
zN15O#Ses{jKWMjX!`&kf=jf)R^e(f)twJv)ZJlXn6*loZ*o2SzZs^)-C!`NnT0619
z{(YrKIxF0?>3ZtALN671sjvxGU&_5c=st?{UrK9xR@%OkwAw6rzf)ScojTkU!wNmx
ztaEhJhV5PEIk|b-i<wSCraw33CoTTMS^BI@45jJwp#6KtYP$a^<-k^GBFFSU-Nzt8
z?cWjF`lfQ--OW9m{O3$-v(hQ|s?x$OcMIn()7{NwgQdxQ$B#^RH!V~2Qku-ueq`F+
zJj>SZX6Z%BueA8?bl}O{Jj=-L<{4jE-K@08ySviT()JQ7C1=`8S=~I-=^jp(gS-nZ
zEiGI8q^0a`IzD-gRa$(L?B5@n^+CR`EG^vQUc$-um8FII-b*<7zOuA%9WTX`xmjf^
z-&d9vZmL^2_xe|MH?2?kzOuCVj{1qu-A&7s?<-4_Ijn`5adw_{rR;7xKKZ_~wD`XA
z6Q8@AmML#aOOqLOneRNfyJ?wq%OLYUKQi6jv`iUZC@q~eTKZ0B+1>R0NZLWRLK8VY
zqx^346QAjJvb1oXZI4}Mg`2C-SD_cf1o@ZL?(JZOUMlobVG|YYgxsDg+JcI<prS3P
zXbURZ0<#^ET}6MX<o#I1{lT=03Y(~~iHiP`tC6gz4;A&HqCQmA2hqTvsx8oCzmhEJ
zyZGzBME4b6dMotEgS(rSDewPElR3waOm{aeQ{F+BCUc`rrl+p$Zk~Dg>$z#2$@@)D
zoq6W{zx{N%%CCPnEmOwsJ!N|8x}WWvKU1c>wvesRbkp|)^SxRX96V)urbSj$vo`;3
zI-OO$$n;F-_kLuSlbfj*{hmbh!d7S^$Fw0je{y&u-#QA`=Bex1Ha9cxCFS7mrezxS
z)<dSJ&OSR+rcN{I{B7JMH)6R`f`Ys~l{bw3kT-4O`OE68fk}XqygF@3fW2^xS9^`g
z_w$gztFGGhSu+xH_=xc$K4N?eM(`oy*RZ^iUJF$<#_a;u-)q7efy_{8C9?oRSc8*w
zD_64CWE5*aZez{HHJylywGv<I&iaB^lEz-FtNMmgr#InuGwW}D!aB732~Y4gKv2aJ
zlqwWNZB9UxVhKsbvXP4AAr)d3%RVZWb7bvd)?S6Kz|x6|XcW<?9?%ndLtl_W=?_=K
zK!}0CFa+XY7>s~)m;f1&4WhG4(8KYj=!uyl^LWcXyCw2TtmLr)`8z_y(|hQ35kDi6
zrh`~3@t*`;#~P3?v###z==3etE;RGn8nFaprD${q{Xi<(03fJ}g`qGUM#3l<4JnWc
z;~@<uLKa9G3(z5|H@-KubSQb0@VSr=1uzAcz<SsXdw^saYaAD|ua1ecxU*vMZgn}x
zy2t%t9NYjiU?#{~$SdF(co*J-9U$u?ABSpztg#7~K}(P|lUedvCBTg^6AD4rQC<lz
z!N1`n*bTC_^3M>2p@%?gxB_Io<v}nOrojzxBgh)e55VKF8QzAiAnP(8fnVSPn&zg^
z3}mh5?l1__VIpLJtlxYmEQ1$d9lQjxrt>Fo7^+uceOjmmvd(i`=m&|A3@I=kZh=Lx
z7M_KFf~*JqZ}=YSP;T|0KFAu;kuVrCAQQ4c){R~WkH8!7CcFi*mh>S|)yNNA1Q&y>
zFWnPHLN4S(0mz!uOW;X(8{UC!AnQ;cg-X>450^l5khQ7%z$nOr0+<Z4UiIJLao7xR
z!&Z<rtdBro4blP*xCCTf>)tQ|av%@#LDsrn469%R{0laMtbcs~eu9RyQH|jOkTtQp
zKz~SqG)M<oCwnd|hjs7@tOr>;dmkKunzbk=s1357b{O=8>tGxtfUL276U>K4;R$#W
zWZmueU^kqApWqb8THMWo$RAt@y`VS9`rIjy1#{s}m=CgMx2!jQUT}lr^G4lMeBNaZ
zitpWU@79Xr|G#>;cOG}uqdlmEG{Hw5{036WG&G8a%MBVtCG=1ieaB6f)#mw8#j3Ed
zQ2mHe@-G7dkKV;4hpK**T4Z<*psA^&Djk*EU>#NYXozvW#!(UAxdp14MmR+nS{B29
zFZT7#>mo~Wn~zhqj&c`MuacU&>TOArD(1Jks$7X0r>?9NV8mVTs00w_07+Uj2X$>p
z!~fYQjWCk5;^LP42CI1PxmhZSJ9`*+cqe-yj61w<w+?>XI{I<z<j1YEPd6v2@s$=Q
zsrBs^?#C^{k6WZ4H{W`3(j)Sn7T<bt(hKn&&bMB|{pdwX(wEF|%GtM@Z@q-m^Yb0f
zw_d{i=p~#Uq;HwN^%736(^ojLUf*uM^%CJnFA>xU-!gscCBjcVitwYC2tRs>@MA9#
ze)JOQM=z0n>?IPt$d}mi6=^olC9;ZJkMrrD@Vp_b^2ka#vg(1XU~|#M^yOd%)OOH6
z0a;Z<RsoR}J!EwbS!qL7#*o!2WOWHy@j+H-kQEhV1qAtTL-OCSs`S<Cp38q$lK*xj
z|D8zwn~=3Wc>>L$eA_OYG?9TIt-dswRlw|)Nh4`Io6!YPbQg^0GqNJ>Fs-MwsPzA!
zKJbW9^8aEQaZEPl5liuirFg_rJboy$tS$s;z{#d^0NGPyNs%2zRuoxKi_zKLM3jf{
zTVN2v!U#M8ZXobFQ^4g2840(-`4030V-ffx^g-xtuo-F~yb$(79+A8St%ztb)S@xp
z-iP$}B_6m9eZ32V(AP8wKv$I^)zn#WaUdzIsv69`GN3w|>-xlxRjaCo=Gn`S|5!DR
zSUQ-#@rs56jNeII@9K74YhRxJL}u&4{G80F+@!RWNeQ`aC#5IlWaVb1=Cw`AniQ3l
znwp-J5|ukCAtx^{VSH}2!lbm^<b=EwRfw(vMopPqoxKVubOshW!z&j$J9X|HP{=`e
zSXfwKVMJJ^!afO8s}%N2$jD8pRoFjwV18yoP9Fr+;ACiQZ#k?|I4CPKFRgOn=#+$<
zK*JK`mRb#}n|ra0N+1>?n^;9<(7xqNaw4vhXYpMHtk9M;E*YUL$(B8d9Ss6`?pqA<
zoOc?EAsT`59QPo|bKCbI&uLc?p*)wZ0C^7kFUWJ(K$0oXS<6A5tG)qwj_O8o<+<q&
zkmsa5AkRf@NT@sq-3;>FvlHYwCxT4KbIk&f=a{cSo?Cj5czI4)4Dwv^Ey#07Z!#;-
z9ZNu-Grj?NuINSP<vC&z$aBMfkmrOblqJsvw}U(fd<xR<4@H^M&z}v_uip;Rk8esj
zOTRrCq@OPBi`17T@GR7#-qeNqa6UAKfe;Hr;XIUm8H7M241)wngNZN)?uMmsKWu^z
z;SijJ|3Wa8zY}zUuFwOL;d;n}Ss-1@rEoty3h%>yI0(m~A&p0KXa#Mc9}I(QVJzGN
zi{Mds5nhIE@DuzDzd!(OLl86t2ZTceL_&M$1%u#P7z-I7ZLqW{55qcm1vbMj*bCpn
zf1xJESO?ldI1GmCU<TX{kHT}X_5a$t6Syj>|NrA}b`(L}#U)Tta6!QZ7eGOQ02NH!
zH(XFbRNPQRTr$m4E7MAINi)kOb1$_l&1})iT{Bb5HB-wy%`|?m!{usGRz~0N<NNsk
z86Qv1ow+lgS?<i4bIzQ5#eQ7DO_U-dd<c<<!xYTKCpZXu+M)`>8&%N+F-Sln9>Zk3
zf+ctl+i(mgaSJvj$W!5odI&;WbV3@&VkO=}NiyRK=z)QF1?zAO7h&#4CVw4(3_OYn
zn2Fh#izQf%wRj5~uo0WE8~bno$8Z+s@I5Z!GOnQjH-kcOg9j?0GOC~|=HMl)#syr2
z8#fP6R6$j|fEV#9R^lkmqbN6+hv0`s2tzp9qZ7Iy34<{d!;y}W$i#Tez-w5F*Rc-o
zVGBOMNB9^!@HI~06fWWhe#UKNp&B>4`e=+Wv_X4xL~jhlAPhwshGQh2!ZfVM+t`E;
zu?u^!A79`QzQQG3#dVmQt1}A0749(Q40GSCho*QH>#!YP;4m(r6gTBEC<{+CLo39i
zJ5n$bnV5{Hu?TPBYkZGOu;sq&g7V1zU-`H%JEAB|`NrI@{Sb%{gu;}0%ssp-`eGmk
zV*y^lV!V#!ScSD%k8SuE-{2H3;VQ1<N7VG9jDvb;h(>6PShU6%jK@yw!2x`U!#IXZ
zxQ3z?$gA)WDxwLR!j#QSStAkY7>n_kg4uWtOYk~YVh!Gh`6km5oQGRQ%1?L|OK=wF
zaS`U*LZ+-|$}aBkLI4`#5p+UlbVUOC!jub5IcE}PVhL8^W9-Hr?1L#gnzGOZ+<}`n
z`2@<~A$Y<Ep@@R{rcD=^@}?<2jlvUn5ii4(K~0%z7mnfw{0LJnHRY_@2!$!5nlje{
ztiVdFfho6|a+o`cqcqCF6I1ab-oQqDj(s?T@8RUb_M<Gk;D<U0LnPXuGm<a>85oDB
zF$0V62KM6{+(toP%A=@>`Uple+Mp|XA{7}}gw@!C6Sx8As^o8|jyYI}%xdJTn2q_^
zi1%;^r|~0ftMfUa0_q?Lt<VkwFbq>M9m}y6JFpw)a1~B9xW^+5ap;C*jKbrXg;($<
zwqh?%;v&q$3-cRqB~cZ15Q&zUf)}v_tFaAxaUAF1QIq@}fe68ib=glG#8)U*kIx9L
z&;d8$5Xf?<jD~1}*64_#$iypHiBIt*uHX(F>vPVaG%BG60?-%{XpQzrL_efsG^SuW
z=3^07V?92^4t#|(aBo09h7iP}7lz>}%!E@z&O4mNB{()>dr%3!2t`YDMKUrl5i>C#
z>+m-A;1GVmHMj(k=fD>=5rJ6r#6Zl&GHk>)9K>;4#V>FVX1n2s#)v^@^u=IIz|(jc
zOK=qDaSL`KeD?509R#Blx?li?VSh97NE8WYUc{mureFq4{nON^_Tvkfx~QpJg~QaZ
zx}YZ#(HEwUYU*63o@(k{yRi>050mf02en}8u%=FC>anI?HVR{~B#OKQ*Kr$VqR9tP
z0Tpw2lNyzC_>lUd8mhw&HDT(+PTWYH<dDOj^na0c`^>hM%idb+U(5DervK+&+p*qa
zFzJ7KUH?{m>oGH_HRhj9yZ;fjE@h2kO|8>^y$18%A5FJTvo32*t<&=o!y4<4Qir?y
zZuakw=6H~4xwrB`mbK2C_pPu-`uEd+WB>mBt-5#q=Ewf`kHxP)^IyNV9_!rGY;*1q
z*3^2(u%$p{X(y#wAirI!pdP4QYgr-6<!I|lc@fiL+Jv9SEL_4hIJr^Z#lvWcbd13=
ztbl2&DvSj5#3W3{Dy+lD_#Do(C%K^^nji(KSb%1<2SuSd=3*gCd(qdh=fib|52_;u
zu}DWIUd2*;gdMnmO9-VcC>#^<B(~xs`~utJYzIOx8joTFHsKm>qE-pYXh_9SEX5me
zFG(E=osocfco~Oq1f@$+w?cRHL9No%kx{^dV+F4=w71|HJO_uel*LdUmGA^iJ4MNI
z#KDtz3Z@<52Q)5ESq*)V3>)g=4(Na`coI*cv=_@`12(~0&$iaD6R02ef~hZmj+?lR
z2<pVqn2e{f13TeCJ+=Zu5Qb@(g|%3ZpYRK+c~jOy0{UPAp2Q+7!66)jLuHN$%r7*A
zVF^rqb$AuZo|uAXupF!K8Fs_bhx#LGz#s8wkC7OSSFjlS@CANG7ApF3+!2Kq7>FTw
z1&gs8`|%@gVRlv8%Ww`qz>fN(6HMnb2ed^en2u-;2tiY1U@X>S6RzPW1o%^T!$1th
z>sW=e_#Tx5ICkiXzL<|iID+Hws7>1e+MzRMU>0`c09@<v86yU9n1rd=hV8Ja%dtaa
zG{Y#2!(Y`SPt=pX#SQ$7(t(^;Xn<f0!Eh|ZYuEwPukSLhqf~wBr3gV7dZ8~S<7uqI
zIvmC^6sGQ148aIRPxOIfLq2!3LnowSD5i$++yFt1nIGvGjW_W&uHXi0HKE-a{V^Cz
zu>xms9+g6=v!FYAV;&abFuq2qF!md5&=Jq#1?<E=xHKhiKonYHA|_)iK1LSoo3URA
z!$^$5TX+Y5RqwOb_b!H07lo<Y^@pj;9fI4#minBjvpt4~qVrl$t3%29f3a?6w#jT;
zUYWX8USs4hpMMPhTjzka{A*3ESEsGaP#7gJoid$yW@(;Rn&*;35aMPjzs)B#<+eAN
zc?Iskl*{}Ph@MD-DU+FJegk3p2$*MjPhckIz?8{Md8~0M%3}B#jY?ad^UR`5vj^oU
z!<;}{$}FZYhUr_7f(e*fo-zu4-9N*WW6U!QUo?X$&zN7vn*`JUz?5suvx(APY(F-@
zJR>mW7}JNtlwVB$4bvaNwCfkF#Cv!Yrak@)OxeV=xtn(OG?;ev?J#ALGBEAw)nMAu
zXTh|a7oyBz+T4mqaO+1bKE-}SkngsHX=9rV)5d1n*GyZQX+PTvn<&bgsEHmh{T%*j
z+nK2uncUB$f5zl&fA;?W+I!YB+M53M%>HMsjFvms?<3l(YT7NEa>tjH%PO4vpDEQp
z>+{F&xyy#DOYYf!&8xdZLC*Zb6BgMNnb75z5+6CpW|56!H^#d&J}Jq}_5`1~xk_vP
zMT{uByD_5dh!JI%JBAJ4gD_iQTl9Y0al!s>j0^U}xL}_<hV5T&$27;gF{U{ZW13^`
z7<M@^?C*O#>N?+zQP-Imb)9p^u>Z?_IaJ_oj6(&8ai~D<7!H5AFPScPV`RDzBhw{!
z49CCR7cbYlF}z%f;pLh;hSOi}%Qm;WF}Ar8W1Cy<7|wsWFaPCpZ2G@&j!nB?j0ZT!
z?i=F)&awOM%LANa_uY;MILGcA;{ndG`|iu%JI72;Wb!$ZyMxIS?~d>y>+WFYHiM;K
z9(7Dg8U^f&pe)R5k3V=_&W=(7OF84TS)8FP(}pzVj^3Qo!$?{*s@bSrBE9#j+Uiue
ztv*h*)zgD*6;jkr@eS<Mx1F87>TIX+gYEQvaeKY$Wv|6)_6n}+AfKiVYUApt%l?i!
z7T~0}lbkeVfRo%t7Ep&#1vI-uL1o#wXppyyBCEToL^Bti>Exnv{an;_q>JWsD5Q%W
z3u$|&LVABNMWrEybYM&&t?_bImoQiP`ML3pEjPKk7uJgAh4o9D!t!lfSl<S@%e$ky
zjyV@m^9n_@7#~Iy(a=^!^l9rNicBe@&83QJZBS7a9bHuAdKJ^NgNtd9b8$r%DXxxu
zUCy>yaedpexQ@3iuEfeE<Pudv6VWHJgubj&Qhxp=^+;ezO$aS1yEde?O6h2uQkorF
zTH#$wYuk|0^35!*C`S*yLl>T6fgVao@X(GV4>>xP(SG+bD%GnDy+_LGSjDpHUcao8
zQ6{x4J#WfsBHdLw_9>_O$>lVTBALsWa!PP7ulGF4D<Pu1zKtxe)gce5O3XtFE8)rK
z;HjY{y>zp>m#)Wnsc%;=^$4n<5uGZiA6+z-r&dr>`HBkaUQvm)E2&9FB_+FhYc0(`
zeTH}|INe({Tr11FePw-Lq>6Uds3N;KA3fULM}cWR`qtf7r%U*1VWh84#`@~LvA*i&
zR#iJ{RaHiGRqgLkRd2giQ)&=;Ra1pt)iq~Ob)Cwnu1X#?l*MEC<?U;zLqZKrvGda=
zPd~lT$WN1d`YFM-rWRMJsTX)`zKQ0V9SJoxx_?bQ-=LOWjHsoAHnr&C;;*d{{u)uV
zw$4?lt;CSpa!ISLS$1_aD6Nj(99~Dy)T^sW57*P<UFzwrf`M8{6Uf5AK;3Q?sEO?Z
z)w@HWHe*|-KyB<3s6KrI72#Q5kzV!X7+GKaV(V*-Ujupaxci;94RqL{p_)`|qzh4v
zv~)-#%_tnC*pwh`whvYl9xq3G2CHG)U~Nqb)~AI-lwK`Fhl4_NheyU`TZgEcdt-gj
zq_I4kHP-j-8*6*d#_CqIi3&AtBG;Bp)V6&SZ7dfm+t#6)-y>8#{lhdmG)#@+!t_Y{
zF!di9rj#*Zde60~s>d~zeOgmp8_|?+c!sM=e7KGlh|n7z5vp7(LUZaxs9;irN|uSF
z7gnTh*NBu?jfeS0T$KDM(w?)8Rv{kk&I^uKiI8ZW>=3PU-J<nv-)QYfjaG_HjOMz=
z$hKXK?0d!N>&zHU^lh$i&ldWsRtqg|*+P5bTj=@zEfhMUg@zPwsg?9m{lOuY7Mxf;
z-8@!t{bP0AJx-^+<5a#%oG#Xj(@QPllo=PN)i$lvseCJ)Y2QjOB|oC2xK+BfzKw6K
zwguzqeHX7jW#cJ!$7?`Lye7rPt8!2qTC&<|dTd*zXSP%Ey6yEr{q}mhUwb8&>Y#BU
z9rR382Q_TnL2Ej9;2Vma6zSbbS28-uC#bW0?7FBynJ#*`T^GGDx{E^XyJ~8&t}0Tc
zo4yL|riEeM)Htr2diCz68_C^NZa_C3ERvwho(Xby>aJ4m-R0rYUC)Jd*X+n1I#REv
zCdc;FR?l8q5!p-gD<^7dwM0!!OH@&Z-Wofkx3Y@&k$34nx?Q%9PBrhN13mj_d#^s4
z)G$fGK}ovUGD*&{Nt!w`Nsl=t>+R@dO&*l21%>)4rCC4y=$E3G>ZWLPe2OmF^w-ju
z{(K{CfL!YhP~~C+<yvc?k{?M`t%0e!QEQNVx(?Fkg9oWi(qP>zJ48Nphv;(Mp_<lj
zsMZ%7rmw3F(~J(o^lqnN+KKi>)6~-|jn6cV^E^#;ho<Qp_u(2*e7IgMGhE)@!&L*r
z1`gNIq9b&t_6XJKIzl7Lr|VPybS;TXSF^V1^zh*3V3VO1B{P)LJ44m`W@v5wQL0xq
zQy<pORMVtPz9l+Z$#q8S-O$k*pD|i7qeg3s-55=;HCA>pV|6lpth`*t$suf<-av(b
zM^&cLqng*@QMnf$uhk95>q?XHs?_;0eUSc`63R@FZ`1_Ma+s(U1tw~3_(YA4ov4z7
zC+fT4$2BwteI8eO^+~E8Hc3NTPSVKONov@0lHTa{gsK;RQV}sv>b%=z-ReA9BN8WT
z)yT;@5<W#4!=~tb>8Wb%Jyl-@Ow~J0r^>$kQ}T^@N=wq7QflL;b=2h<&GLFi2m3#x
z*Ak~`ZR#|gb9z>v7k!o%<7YJ?`dM9V{j6-uPM2MS=^7P0T~Ae;p_<_{^p)3hIvo6*
z*4RH!@1hq}EpVo0hs;z|@=T5DH&Z7E%+&c2Gda&^%6%-;J!UDb+AMh$eo-YxzDSGk
zY@O~oTW%?{6*qD=z2N5Pv8HoW*lDh8i_Fy)uequfK3B`4=gOt}Jgu%VPZ<s7>1gCU
z4R(D=ezjlHjG&iv#CN_vd}O}5jGE84D;Ma+$_uDHFOc8J1v)c&fudbsmXF`d3M;fw
z-?=Z;hSCca(qy4BeO}R(hOfxG#3GGISfs3!MM@vEND<9mrRMyanzvZ2<9!!vj?WUk
zGh~UHq%Bdcl1p{abE%%{yi|`TFV(jNmZ?ImW!hI~nNow7>5T2`8W;4sJX^l5Gj*5i
zc*=4)j9IR%!f()Gyg~)TSLkxa3e^i)sSX`hYEk-1?XI^<$KzM2X@^zX(ruMehpy5m
zTCIrAt2N$cjoxp#MmxH!(YZ!zbv0zIGMcZId!M!PNnb0^%(Z&8`#PN-wT|A!Z>po$
zn~F|&Q%)V%YqQG+T`#^t%aS&zoy$hWyKhwG0ULE_%tpN&^0qR&zN4mYn-tt}laBbm
zt53VWtM|LTt0n30D$(yf-D$R2U$)q+@GhHmv)^V~UAB<dZBb&v7Dc3QQHIC+T3haY
zJsSDGw)c2nRqJk5m&mO;)NiY{MSVas`3EZQxlQwGY?D*uHXZZ)P^VgbsPFoHs6_=o
zQjO{#DRcBkDq86iwGa42X>QwfxYl+R58kfugzb7SdAkny@6h?qJM=`q9jaFKQw?wS
zskTIZs&@-~P7D9%Y7zIjo(bKl&7F5@&gh*wT6&lER@ue9VwawOWS2hcyG!<kcB@5|
z-HPzrt-XP})vD=kt!uGcd*XJha@*Zn)N8lSr0v$FhxX`U=e;W7x>q|r_wwzWz4~tK
zUTyZ-r=(W<<k4}T94qWsld%1o6}MkWsryyU?SMQh9pJM+paLNW)HC#e4s|)8EBy{A
zsN6vvse4e18XeSotq!Vw<QF<I=nECKKcoq6hxBpJL)sJgrFO-Cscy+%YEA9Ky43No
zCJs5Q(bbM9y~Yu(f9R;@#T-@h^rH$5I;Q5mzt#`QU+a3xH*)truARe<tJU!1N-A|i
zEu&7T;lLA$8FPYfL!6Xjos(J>c9P!hr_`s+DHZlRrSlz6DaG-$BD_!QxX)>=X>nQs
zDW~;#|I^yl;EbF@&*<G&XH=lu8I?&tqlijpwXyeEZA&_<A}MFJx8Qeb<@uck5Bg34
zHs|!3*Exm6pQFrqPWA=QYX(aDp4Ufy=T$24yt>(5pw;ez&KA3%$nqDowbliV47#A0
z9v3vX?f2S{{=J&U{h;loE-J|5qC9*qYC-3VTIhUP-xa#7neLZ$vdv``@V}yfN3JN?
z`>NVJd{uslS9Q4GRn1Sksz$EYG^)}yod~_A&r+^wY~powEcK(hmj6*RqkdGd;|-N8
zctf{J-Oz2E^uD3z>)z03fj6|F@lDO|c2hn2+*Ep%pVT_`C!Oj36Xn}mDj9f7%N>8#
z;<7*MR-2!dQS7!ll)SB5<!)<N*lm41@V4I89laKVgga`{;ukFp&e9iyv$E?QruEab
zbeeB9Or-VEJW*Z76QkE*dZd}5x=mARBiwef$A0@KE7WG3O?KO=X<v0d)Y-;-<H)==
zgEh4+WL?&zrq*N!>Ocovz$P4E^#^D?H4Ub*G=9d?m>KJZ3aH3KtIDWCqbCpLhSA_S
zECMtj4x{nNd@;P0r8Z^Kf<!iHX@zE|M9)sWa>i+p${r8S8TZN=56>C*%^7D++4D8X
zNgL&)!8vJW&iqYt#-GR;PqGQkUT#~?^pA4VBRT0QlV)X^1L4GvR18!KQZ<6VW~!+a
zS_jKqW^QxPa=!NbtJe<9_;5*6Yqqs@v~#d`u(h+Flp!xBkF&<fUJ(=8C|Lve5saa{
z9ZNcbv^DD;pdPH5$MD4Ai&PFawl+?Vwhm5AG6SE>-C>-06|a#j(~~9pGghZc_S#(>
z?QP9)-?fKn2<z{Wy-bkfG@HlmY;7E6XJZC)D)5NTw6$jsHs-`&n9?~u&aBUDcRWAA
zVYV{&vg|s;y=5&GYZ}>Ky0>f;dz;K$Uc?P>euB?`k<Ajjr0hk{e|7z}srzoeW}>vU
zZ_1{e<NRsBBT*Z1%CUr<`vlV8PBl}^P{Fe4oXmc7NUT6JR}Gq}8u61VP1IGRwM6Un
zvF&!-5?&>}JiN+#Rq+a}Xyb3|Z|CpeU%=nR-_^gce-Zx@{-ykFvTU=QvI=As%5uvp
zlT|j$Gb<!3G^<Ni*Q{<?-&n3x%PRjXe|^<iquBP+Ugf-;{R{dR@^|xh_b={W(%+fw
z3(D%8bv)~Ip0~=`X@SE!&DHpEMJ*rr-F>^mRc$=j5Xq-uSO#0`3l*yU*kH@Z?K_t9
z<?dU*dJ#pIK_+r3t1uZ@6S`awiFTf`_hTyF=0v4;L9QVyi>E)o8Jv`ueU<g+JRGRL
zT=%~n|IN%fBgIJ_VcCyDoR2ib{BI4va0-xL{BEPnLH=gq{3}1jCAq);th1{7to_oT
zX<c~3T;%5cCt#MG2J@NCg*gkBz+`J1VDg}CaK<4Nz*(5XdlM$7FHJCWV9c-X@GwvQ
zq$bA?CgrxKa8k3*7No^U+mM>|nveG(QtO$Q`?XnTVvm9SlLz+w-F#+!v8h7_^yptR
zF?E<FPVV{5ctC)ELz3*}$#vAy`mI{8xa@D#dbLj-lF0N>s8F@>gtELoymD<=xzB8}
zr#Cq2zP{II*_kApo_(xLW@L_;$)-%2Kja^Q{3DQm1oDqS{t?JO0{KTE{|MwCf&3$o
ze+2T6K>iW<Pac8$)&EWX+V;Tb2j<o+>po*9_5T__tq5nDL#}C;n6@0I9&hTl9boG0
z-C^1Q`olDVn0hg7!^#Bh!<qovjWrdfZvPxi-QKhzl*A(BuH$!#vecE$vZl^#8uv_U
znwd;m*vBP1CNJ-s)}Z2V<~4&C%r-ZGSyw2`xOvTNN@x`wo)Fa{I<|TI-E9eD`YAU2
z6sd_5z*d{|o1Afy>~XX2o-pxf26Z;CO`FCa|K_9lowwh{JDf94@{i&L<chaHkMaEP
z#w(t^Jv;Lh&-_-Nb$>1KKFMP|^BGz`4@<nQd5l*-SG-MmjK>#+ezSdV<uP8pT=7=r
zF<#wV@s{N=UY%U=%=K)&?o9e%*N6Fi$lo5nm+~0z-t}QQUuNYo-o5LiMD~78&r>|}
z8=KbswZt>|<Uc=twX^d$%k^Q2_jn%T-Mc<4@y6vb-o5L?5-%f<@$Ow8mU!m=lb7Rn
z@A|OBGY_)z67SyiVTqTN$9VUy4@<nBd5m}O`mn_7lE--Wt`GWr602RF;syNb`mn@n
zmB)DZ?jM$TF?o!4@A|OB3(sS`d)J309*+(3aQ+2k|1T1j{J;{=y8ndDj{9KwbAaw$
zAC`F5^YNd?yLWw9;?>CG{#v&ufYPPe?<#qWcklYJ#PiByynEM2sqF15lc#w8zq&pw
z@rvg$p7s0)p!9BzpDD|l)C?wlu=B;A-&nRRXN~8aGfwi4;@!JGEZb+w@OjxjbN|R6
z@{hp(>qo#^-!<2YJ<N4%>g(pYy}2gM^LkUaH+6MWCpORL&9!gp`0glzqA+!LlgF6e
zVkJ=urQrdSm+?heek+P!0fBi=Z|cKdsDO&71aDM^$(w!P3p!}18mhzG1N=}EwP5m0
zlMkD`-P|wCJ;+?QCND7gi^;Q0Il2*o5DdD+{qBEAYRa@`F!$&PMB-sYAsVJE&>St$
z60wMbDRVr6)`&+Nv_(6#M+bC7Cv=7>Lv=+rB%nKbz?9W`ArZaN2Yr!*Wb{J{`eOhF
zA{B!$7(*}=ztGPmjdVChARQx-fl<iBXpF&FjKiZCkH;_p6Y)4qtS3mH#AHmtR6K>J
z@eHQnSxm<aJcsA;0%l?sUc_w7!CcJ4OPG%Zco_@v3Krp2yoSYCf~8o7*RdRLU<FoU
z6;@*n)?yvr#9LU84cLgc@eVfOUA%|Q*n;=56(3+5KEy}(7@uG}cHmQdhR?ARyRaL3
zuowHV9|v#{U*HhF#9@4eBRGm<_!{5fI8NXsPT@4p;9H!<cQBvDdD08`9zWnBF5xoF
z`&UV?;W~cA4cx>}Fz?^7${9D)4AXrumDV{g&isL-L$c2pX8M~$NqP?vCVQ}B8OH*)
z*-LJ*EFWn}EPuOyJEE@X2b0C<xSTh_xdMh|Uj;c69xy2=+q>&G8}WA*AI41ODqH3Z
z;HvGx71%%f%KJM@|8^cX)^EckNBrIOPh#G|=0sy?&(R;kl^;&piw=^ed#Cvv{_aqQ
z^_wH^fWNzb6T7xK$rv26yJZewy*;u&`)JnQCwrUBlwssQsoD9BW$xeq_5BCO|C|Zq
zZi(gayFEAEMF0NwG+_PqgfjbX220dG|9i!}owI%$a(>f+b`Uvw&+MG`&zH^pZc$o>
zEo-*?&HeuU#s}Q*jejuxpRC`y8guTNd?0`L|MLjg@afwXv|K;A^X{^o8-Li}(QD_n
uH{Z-I7PgEx{U5_qdu3lw=5<X*(gyS%IILy^U2C{zu=PaCPyZ*6!2bc|bZ{~N

literal 0
HcmV?d00001

diff --git a/drivers/video/sun4i/lcd/Makefile b/drivers/video/sun4i/lcd/Makefile
new file mode 100644
index 0000000..986869a
--- /dev/null
+++ b/drivers/video/sun4i/lcd/Makefile
@@ -0,0 +1,4 @@
+obj-$(CONFIG_LYCHEE_LCD_SUN4I) += lcd.o
+
+lcd-objs := dev_lcd.o lcd0_panel_cfg.o lcd1_panel_cfg.o
+
diff --git a/drivers/video/sun4i/lcd/config_lcd.bat b/drivers/video/sun4i/lcd/config_lcd.bat
new file mode 100644
index 0000000..f78b8ab
--- /dev/null
+++ b/drivers/video/sun4i/lcd/config_lcd.bat
@@ -0,0 +1,41 @@
+@echo off
+	goto START
+
+:START
+    @echo *********************************************
+    @echo *   select board                            *
+    @echo *********************************************
+    @echo  0: hv_800x480
+    @echo  1: lvds_1080
+    @echo  2: TC101+tl080wx800-v0
+    @echo *********************************************
+
+    set /p SEL=Please Select:
+    if %SEL%==0     goto LCD0
+    if %SEL%==1     goto LCD1
+    if %SEL%==2     goto LCD2
+    goto ERROR
+
+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+:LCD0
+	copy lcd_bak\hv_800x480.c lcd0_panel_cfg.c
+    goto conti
+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+:LCD1
+	copy lcd_bak\lvds_1080.c lcd0_panel_cfg.c
+    goto conti
+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+:LCD2
+	copy lcd_bak\tl080wx800.c lcd0_panel_cfg.c
+    goto conti
+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+
+:ERROR
+	@echo error selection
+	goto conti
+
+:conti
+		del lcd0_panel_cfg.o
+    @echo *********************************************
+    pause
+
diff --git a/drivers/video/sun4i/lcd/dev_lcd.c b/drivers/video/sun4i/lcd/dev_lcd.c
new file mode 100644
index 0000000..d17cdff
--- /dev/null
+++ b/drivers/video/sun4i/lcd/dev_lcd.c
@@ -0,0 +1,119 @@
+#include "dev_lcd.h"
+
+static struct cdev *my_cdev;
+static dev_t devid ;
+static struct class *lcd_class;
+
+
+int lcd_open(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+int lcd_release(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+
+ssize_t lcd_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
+{
+	return -EINVAL;
+}
+
+ssize_t lcd_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
+{
+    return -EINVAL;
+}
+
+int lcd_mmap(struct file *file, struct vm_area_struct * vma)
+{
+	return 0;
+}
+
+long lcd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	return 0;
+}
+
+static const struct file_operations lcd_fops =
+{
+	.owner		      = THIS_MODULE,
+	.open		        = lcd_open,
+	.release        = lcd_release,
+	.write          = lcd_write,
+	.read		        = lcd_read,
+	.unlocked_ioctl	= lcd_ioctl,
+	.mmap           = lcd_mmap,
+};
+
+int lcd_init(void)
+{
+	static __lcd_panel_fun_t lcd0_cfg;
+	static __lcd_panel_fun_t lcd1_cfg;
+
+	memset(&lcd0_cfg, 0, sizeof(__lcd_panel_fun_t));
+	memset(&lcd1_cfg, 0, sizeof(__lcd_panel_fun_t));
+
+    LCD_get_panel_funs_0(&lcd0_cfg);
+	LCD_get_panel_funs_1(&lcd1_cfg);
+	LCD_set_panel_funs(&lcd0_cfg, &lcd1_cfg);
+
+    DRV_DISP_Init();
+
+	Fb_Init(0);
+
+	return 0;
+}
+
+int __init lcd_module_init(void)
+{
+	int ret = 0, err;
+
+	__inf("lcd_module_init\n");
+
+	 alloc_chrdev_region(&devid, 0, 1, "lcd");
+	 my_cdev = cdev_alloc();
+	 cdev_init(my_cdev, &lcd_fops);
+	 my_cdev->owner = THIS_MODULE;
+	 err = cdev_add(my_cdev, devid, 1);
+	 if (err)
+	 {
+		  __wrn("cdev_add fail.\n");
+		  return -1;
+	 }
+
+    lcd_class = class_create(THIS_MODULE, "lcd");
+    if (IS_ERR(lcd_class))
+    {
+        __wrn("class_create fail\n");
+        return -1;
+    }
+
+	device_create(lcd_class, NULL, devid, NULL, "lcd");
+
+	lcd_init();
+
+	return ret;
+}
+
+static void __exit lcd_module_exit(void)
+{
+	__inf("lcd_module_exit\n");
+
+		device_destroy(lcd_class,  devid);
+
+    class_destroy(lcd_class);
+
+    cdev_del(my_cdev);
+}
+
+late_initcall(lcd_module_init);
+//module_init(lcd_module_init);
+module_exit(lcd_module_exit);
+
+MODULE_AUTHOR("danling_xiao");
+MODULE_DESCRIPTION("lcd driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:lcd");
+
diff --git a/drivers/video/sun4i/lcd/dev_lcd.h b/drivers/video/sun4i/lcd/dev_lcd.h
new file mode 100644
index 0000000..1614f37
--- /dev/null
+++ b/drivers/video/sun4i/lcd/dev_lcd.h
@@ -0,0 +1,47 @@
+#ifndef __DEV_LCD_H__
+#define __DEV_LCD_H__
+
+#include <asm/uaccess.h>
+#include <asm/memory.h>
+#include <asm/unistd.h>
+#include "asm-generic/int-ll64.h"
+#include "linux/kernel.h"
+#include "linux/mm.h"
+#include "linux/semaphore.h"
+#include <linux/vmalloc.h>
+#include <linux/fs.h>
+#include <linux/dma-mapping.h>
+#include <linux/sched.h>   //wake_up_process()
+#include <linux/kthread.h> //kthread_create()?￠kthread_run()
+#include <linux/err.h> //IS_ERR()?￠PTR_ERR()
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/init.h>
+#include <linux/dma-mapping.h>
+#include <linux/interrupt.h>
+#include <linux/clk.h>
+#include <linux/cdev.h>
+#include <linux/types.h>
+
+#include <mach/platform.h>
+#include <mach/sys_config.h>
+
+#include <linux/drv_display.h>
+
+extern void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun);
+extern void LCD_get_panel_funs_1(__lcd_panel_fun_t * fun);
+extern void LCD_set_panel_funs(__lcd_panel_fun_t * lcd0_cfg, __lcd_panel_fun_t * lcd1_cfg);
+extern __s32 Fb_Init(__u32 from);
+extern __s32 DRV_DISP_Init(void);
+
+#define OSAL_PRINTF(msg...) {printk(KERN_WARNING msg);}
+#define __inf(msg...)       {printk(KERN_WARNING "[LCD] ");                                            printk(msg);}
+#define __msg(msg...)       {printk(KERN_WARNING "[LCD] file:%s,line:%d:    ",__FILE__,__LINE__);      printk(msg);}
+#define __wrn(msg...)       {printk(KERN_WARNING "[LCD WRN] file:%s,line:%d:    ",__FILE__,__LINE__);  printk(msg);}
+#define __here__            {printk(KERN_WARNING "[LCD] file:%s,line:%d\n",__FILE__,__LINE__);}
+
+
+#endif
diff --git a/drivers/video/sun4i/lcd/lcd0_panel_cfg.c b/drivers/video/sun4i/lcd/lcd0_panel_cfg.c
new file mode 100644
index 0000000..689f96b
--- /dev/null
+++ b/drivers/video/sun4i/lcd/lcd0_panel_cfg.c
@@ -0,0 +1,146 @@
+
+#include "lcd_panel_cfg.h"
+
+//delete this line if you want to use the lcd para define in sys_config1.fex
+//#define LCD_PARA_USE_CONFIG
+
+#ifdef LCD_PARA_USE_CONFIG
+static __u32 g_gamma_tbl[256] =
+{
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+
+static void LCD_cfg_panel_info(__panel_para_t * info)
+{
+    __u32 i = 0;
+
+    memset(info,0,sizeof(__panel_para_t));
+
+    info->lcd_x             = 800;
+    info->lcd_y             = 480;
+    info->lcd_dclk_freq     = 33;       //MHz
+
+    info->lcd_pwm_not_used  = 0;
+    info->lcd_pwm_ch        = 0;
+    info->lcd_pwm_freq      = 10000;     //Hz
+    info->lcd_pwm_pol       = 0;
+
+    info->lcd_if            = 0;        //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+    info->lcd_hbp           = 215;      //hsync back porch
+    info->lcd_ht            = 1055;     //hsync total cycle
+    info->lcd_vbp           = 34;       //vsync back porch
+    info->lcd_vt            = 2 * 525;  //vysnc total cycle *2
+
+    info->lcd_hv_if         = 0;        //0:hv parallel 1:hv serial
+    info->lcd_hv_smode      = 0;        //0:RGB888 1:CCIR656
+    info->lcd_hv_s888_if    = 0;        //serial RGB format
+    info->lcd_hv_syuv_if    = 0;        //serial YUV format
+    info->lcd_hv_hspw       = 0;        //hsync plus width
+    info->lcd_hv_vspw       = 0;        //vysnc plus width
+
+    info->lcd_cpu_if        = 0;        //0:18bit 4:16bit
+    info->lcd_frm           = 0;        //0: disable; 1: enable rgb666 dither; 2:enable rgb656 dither
+
+    info->lcd_lvds_ch       = 0;        //0:single channel; 1:dual channel
+    info->lcd_lvds_mode     = 0;        //0:NS mode; 1:JEIDA mode
+    info->lcd_lvds_bitwidth = 0;        //0:24bit; 1:18bit
+    info->lcd_lvds_io_cross = 0;        //0:normal; 1:pn cross
+
+    info->lcd_io_cfg0       = 0x10000000;
+
+    info->lcd_gamma_correction_en = 0;
+    for(i=0; i<256; i++)
+    {
+        info->lcd_gamma_tbl[i] = g_gamma_tbl[i];
+    }
+}
+#endif
+
+static __s32 LCD_open_flow(__u32 sel)
+{
+	LCD_OPEN_FUNC(sel, LCD_power_on, 50);   //open lcd power, and delay 50ms
+	LCD_OPEN_FUNC(sel, TCON_open, 500);     //open lcd controller, and delay 500ms
+	LCD_OPEN_FUNC(sel, LCD_bl_open, 0);     //open lcd backlight, and delay 0ms
+
+	return 0;
+}
+
+static __s32 LCD_close_flow(__u32 sel)
+{
+	LCD_CLOSE_FUNC(sel, LCD_bl_close, 0);       //close lcd backlight, and delay 0ms
+	LCD_CLOSE_FUNC(sel, TCON_close, 0);         //close lcd controller, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_power_off, 1000);   //close lcd power, and delay 1000ms
+
+	return 0;
+}
+
+static void LCD_power_on(__u32 sel)
+{
+    LCD_POWER_EN(sel, 1);//config lcd_power pin to open lcd power
+}
+
+static void LCD_power_off(__u32 sel)
+{
+    LCD_POWER_EN(sel, 0);//config lcd_power pin to close lcd power
+}
+
+static void LCD_bl_open(__u32 sel)
+{
+    LCD_PWM_EN(sel, 1);//open pwm module
+    LCD_BL_EN(sel, 1);//config lcd_bl_en pin to open lcd backlight
+}
+
+static void LCD_bl_close(__u32 sel)
+{
+    LCD_BL_EN(sel, 0);//config lcd_bl_en pin to close lcd backlight
+    LCD_PWM_EN(sel, 0);//close pwm module
+}
+
+//sel: 0:lcd0; 1:lcd1
+static __s32 LCD_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+    return 0;
+}
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun)
+{
+#ifdef LCD_PARA_USE_CONFIG
+    fun->cfg_panel_info = LCD_cfg_panel_info;//delete this line if you want to use the lcd para define in sys_config1.fex
+#endif
+    fun->cfg_open_flow = LCD_open_flow;
+    fun->cfg_close_flow = LCD_close_flow;
+    fun->lcd_user_defined_func = LCD_user_defined_func;
+}
+
diff --git a/drivers/video/sun4i/lcd/lcd1_panel_cfg.c b/drivers/video/sun4i/lcd/lcd1_panel_cfg.c
new file mode 100644
index 0000000..3efa6ea
--- /dev/null
+++ b/drivers/video/sun4i/lcd/lcd1_panel_cfg.c
@@ -0,0 +1,146 @@
+
+#include "lcd_panel_cfg.h"
+
+//delete this line if you want to use the lcd para define in sys_config1.fex
+//#define LCD_PARA_USE_CONFIG
+
+#ifdef LCD_PARA_USE_CONFIG
+static __u32 g_gamma_tbl[256] =
+{
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+
+static void LCD_cfg_panel_info(__panel_para_t * info)
+{
+    __u32 i = 0;
+
+    memset(info,0,sizeof(__panel_para_t));
+
+    info->lcd_x             = 800;
+    info->lcd_y             = 480;
+    info->lcd_dclk_freq     = 33;       //MHz
+
+    info->lcd_pwm_not_used  = 0;
+    info->lcd_pwm_ch        = 1;
+    info->lcd_pwm_freq      = 10000;     //Hz
+    info->lcd_pwm_pol       = 0;
+
+    info->lcd_if            = 0;        //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+    info->lcd_hbp           = 215;      //hsync back porch
+    info->lcd_ht            = 1055;     //hsync total cycle
+    info->lcd_vbp           = 34;       //vsync back porch
+    info->lcd_vt            = 2 * 525;  //vysnc total cycle *2
+
+    info->lcd_hv_if         = 0;        //0:hv parallel 1:hv serial
+    info->lcd_hv_smode      = 0;        //0:RGB888 1:CCIR656
+    info->lcd_hv_s888_if    = 0;        //serial RGB format
+    info->lcd_hv_syuv_if    = 0;        //serial YUV format
+    info->lcd_hv_hspw       = 0;        //hsync plus width
+    info->lcd_hv_vspw       = 0;        //vysnc plus width
+
+    info->lcd_cpu_if        = 0;        //0:18bit 4:16bit
+    info->lcd_frm           = 0;        //0: disable; 1: enable rgb666 dither; 2:enable rgb656 dither
+
+    info->lcd_lvds_ch       = 0;        //0:single channel; 1:dual channel
+    info->lcd_lvds_mode     = 0;        //0:NS mode; 1:JEIDA mode
+    info->lcd_lvds_bitwidth = 0;        //0:24bit; 1:18bit
+    info->lcd_lvds_io_cross = 0;        //0:normal; 1:pn cross
+
+    info->lcd_io_cfg0       = 0x10000000;
+
+    info->lcd_gamma_correction_en = 0;
+    for(i=0; i<256; i++)
+    {
+        info->lcd_gamma_tbl[i] = g_gamma_tbl[i];
+    }
+}
+#endif
+
+static __s32 LCD_open_flow(__u32 sel)
+{
+	LCD_OPEN_FUNC(sel, LCD_power_on, 50);   //open lcd power, and delay 50ms
+	LCD_OPEN_FUNC(sel, TCON_open, 500);     //open lcd controller, and delay 500ms
+	LCD_OPEN_FUNC(sel, LCD_bl_open, 0);     //open lcd backlight, and delay 0ms
+
+	return 0;
+}
+
+static __s32 LCD_close_flow(__u32 sel)
+{
+	LCD_CLOSE_FUNC(sel, LCD_bl_close, 0);       //close lcd backlight, and delay 0ms
+	LCD_CLOSE_FUNC(sel, TCON_close, 0);         //close lcd controller, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_power_off, 1000);   //close lcd power, and delay 1000ms
+
+	return 0;
+}
+
+static void LCD_power_on(__u32 sel)
+{
+    LCD_POWER_EN(sel, 1);//config lcd_power pin to open lcd power
+}
+
+static void LCD_power_off(__u32 sel)
+{
+    LCD_POWER_EN(sel, 0);//config lcd_power pin to close lcd power
+}
+
+static void LCD_bl_open(__u32 sel)
+{
+    LCD_PWM_EN(sel, 1);//open pwm module
+    LCD_BL_EN(sel, 1);//config lcd_bl_en pin to open lcd backlight
+}
+
+static void LCD_bl_close(__u32 sel)
+{
+    LCD_BL_EN(sel, 0);//config lcd_bl_en pin to close lcd backlight
+    LCD_PWM_EN(sel, 0);//close pwm module
+}
+
+//sel: 0:lcd0; 1:lcd1
+static __s32 LCD_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+    return 0;
+}
+
+void LCD_get_panel_funs_1(__lcd_panel_fun_t * fun)
+{
+#ifdef LCD_PARA_USE_CONFIG
+    fun->cfg_panel_info = LCD_cfg_panel_info;//delete this line if you want to use the lcd para define in sys_config1.fex
+#endif
+    fun->cfg_open_flow = LCD_open_flow;
+    fun->cfg_close_flow = LCD_close_flow;
+    fun->lcd_user_defined_func = LCD_user_defined_func;
+}
+
diff --git a/drivers/video/sun4i/lcd/lcd_bak/TC101+tl080wx800-v0.c b/drivers/video/sun4i/lcd/lcd_bak/TC101+tl080wx800-v0.c
new file mode 100644
index 0000000..8727e24
--- /dev/null
+++ b/drivers/video/sun4i/lcd/lcd_bak/TC101+tl080wx800-v0.c
@@ -0,0 +1,362 @@
+
+#include "lcd_panel_cfg.h"
+
+static void  LCD_io_init(__u32 sel);
+static void  LCD_io_exit(__u32 sel);
+static void  LCD_open_cmd(__u32 sel);
+static void  LCD_close_cmd(__u32 sel);
+
+//delete this line if you want to use the lcd para define in sys_config1.fex
+//#define LCD_PARA_USE_CONFIG
+
+#ifdef LCD_PARA_USE_CONFIG
+static __u32 g_gamma_tbl[256] =
+{
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+
+static void LCD_cfg_panel_info(__panel_para_t * info)
+{
+    __u32 i = 0;
+
+    memset(info,0,sizeof(__panel_para_t));
+
+    info->lcd_x             = 1280;
+    info->lcd_y             = 768;
+    info->lcd_dclk_freq     = 68;       //MHz
+
+    info->lcd_pwm_not_used  = 0;
+    info->lcd_pwm_ch        = 0;
+    info->lcd_pwm_freq      = 10000;     //Hz
+    info->lcd_pwm_pol       = 0;
+
+    info->lcd_if            = 0;        //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+    info->lcd_hbp           = 3;      //hsync back porch
+    info->lcd_ht            = 1440;     //hsync total cycle
+    info->lcd_vbp           = 3;       //vsync back porch
+    info->lcd_vt            = 1580;  //vysnc total cycle *2
+
+    info->lcd_hv_if         = 0;        //0:hv parallel 1:hv serial
+    info->lcd_hv_smode      = 0;        //0:RGB888 1:CCIR656
+    info->lcd_hv_s888_if    = 0;        //serial RGB format
+    info->lcd_hv_syuv_if    = 0;        //serial YUV format
+    info->lcd_hv_hspw       = 0;        //hsync plus width
+    info->lcd_hv_vspw       = 0;        //vysnc plus width
+
+    info->lcd_cpu_if        = 0;        //0:18bit 4:16bit
+    info->lcd_frm           = 0;        //0: disable; 1: enable rgb666 dither; 2:enable rgb656 dither
+
+    info->lcd_lvds_ch       = 0;        //0:single channel; 1:dual channel
+    info->lcd_lvds_mode     = 0;        //0:NS mode; 1:JEIDA mode
+    info->lcd_lvds_bitwidth = 0;        //0:24bit; 1:18bit
+    info->lcd_lvds_io_cross = 0;        //0:normal; 1:pn cross
+
+    info->lcd_io_cfg0       = 0x00000000;
+
+    info->lcd_gamma_correction_en = 0;
+    for(i=0; i<256; i++)
+    {
+        info->lcd_gamma_tbl[i] = g_gamma_tbl[i];
+    }
+}
+#endif
+
+static __s32 LCD_open_flow(__u32 sel)
+{
+	LCD_OPEN_FUNC(sel, LCD_power_on	, 50); 	//open lcd power, and delay 10ms
+	LCD_OPEN_FUNC(sel, LCD_io_init	, 20); 	//request and init gpio, and delay 20ms
+	LCD_OPEN_FUNC(sel, TCON_open	, 500);   //open lcd controller, and delay 200ms
+	LCD_OPEN_FUNC(sel, LCD_open_cmd	, 10); 	//use gpio to config lcd module to the  work mode, and delay 10ms
+	LCD_OPEN_FUNC(sel, LCD_bl_open	, 0); 	//open lcd backlight, and delay 0ms
+
+	return 0;
+}
+
+static __s32 LCD_close_flow(__u32 sel)
+{
+	LCD_CLOSE_FUNC(sel, LCD_bl_close    , 0); 	 //close lcd backlight, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_close_cmd   , 0); 	 //use gpio to config lcd module to the powerdown/sleep mode, and delay 0ms
+	LCD_CLOSE_FUNC(sel, TCON_close	    , 0); 	 //close lcd controller, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_io_exit	    , 0); 	 //release gpio, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_power_off   , 1000); //close lcd power, and delay 1000ms
+
+	return 0;
+}
+
+static void LCD_power_on(__u32 sel)
+{
+    LCD_POWER_EN(sel, 1);//config lcd_power pin to open lcd power
+}
+
+static void LCD_power_off(__u32 sel)
+{
+    LCD_POWER_EN(sel, 0);//config lcd_power pin to close lcd power
+}
+
+static void LCD_bl_open(__u32 sel)
+{
+    LCD_PWM_EN(sel, 1);//open pwm module
+    LCD_BL_EN(sel, 1);//config lcd_bl_en pin to open lcd backlight
+}
+
+static void LCD_bl_close(__u32 sel)
+{
+    LCD_BL_EN(sel, 0);//config lcd_bl_en pin to close lcd backlight
+    LCD_PWM_EN(sel, 0);//close pwm module
+}
+
+#define IIC_SCLB_LOW()	        LCD_GPIO_write(0, 0, 0)
+#define IIC_SCLB_HIGH()	        LCD_GPIO_write(0, 0, 1)
+
+#define IIC_SDAB_INPUT_SETUP()	LCD_GPIO_set_attr(0, 1, 0)
+#define IIC_SDAB_OUTPUT_SETUP()	LCD_GPIO_set_attr(0, 1, 1)
+#define CHECK_SDAB_HIGH()       LCD_GPIO_read(0, 1)
+#define IIC_SDAB_LOW()          LCD_GPIO_write(0, 1, 0)
+#define IIC_SDAB_HIGH()	        LCD_GPIO_write(0, 1, 1)
+
+static __bool i2cB_clock( void )
+{
+	__bool sample = 0;
+
+	IIC_SCLB_HIGH();
+	LCD_delay_us(5) ;
+	IIC_SCLB_LOW();
+	LCD_delay_us(5) ;
+	return ( sample ) ;
+}
+
+static __bool i2cB_ack(void)
+{
+	IIC_SCLB_HIGH();
+	IIC_SDAB_INPUT_SETUP();
+	LCD_delay_us(5);
+	LCD_delay_us(5);
+	if(CHECK_SDAB_HIGH())
+	{
+		LCD_delay_us(5) ;
+		IIC_SDAB_OUTPUT_SETUP();
+		LCD_delay_us(5) ;
+		IIC_SCLB_LOW();
+		LCD_delay_us(5) ;
+		IIC_SDAB_HIGH();
+		LCD_delay_us(5) ;
+		return(1);
+	}
+	else
+	{
+		LCD_delay_us(5) ;
+		IIC_SDAB_OUTPUT_SETUP();
+		LCD_delay_us(5) ;
+		IIC_SCLB_LOW();
+		LCD_delay_us(5) ;
+		IIC_SDAB_HIGH();
+		LCD_delay_us(5) ;
+		return(0);
+	}
+}
+
+//---------------------------------------------------------
+static void i2cBStartA( void )
+{
+	IIC_SCLB_HIGH();
+	IIC_SDAB_HIGH();
+	LCD_delay_us(5) ;
+	IIC_SDAB_LOW();
+	LCD_delay_us(5) ;
+	IIC_SCLB_LOW();
+}
+
+static __bool i2cBStart( void )
+{
+	IIC_SDAB_HIGH();
+	IIC_SCLB_HIGH();
+	LCD_delay_us(5) ;
+	IIC_SDAB_INPUT_SETUP();
+	if(CHECK_SDAB_HIGH())
+	{
+		IIC_SDAB_OUTPUT_SETUP();
+		{
+			i2cBStartA();
+			return(1);
+		}
+	}
+	return(0);
+}
+
+static void i2cBStop(void)
+{
+   IIC_SDAB_OUTPUT_SETUP();
+   IIC_SDAB_LOW();
+   LCD_delay_us(5) ;
+   IIC_SCLB_HIGH();
+   LCD_delay_us(5) ;
+   IIC_SDAB_HIGH();
+   LCD_delay_us(5) ;
+}
+
+//---------------------------------------------------------
+static __bool i2cBTransmit(__u8 value)
+{
+	register __u8 i ;
+
+	for ( i=0 ; i<8 ; i++ )
+	{
+		if((value&0x80)==0x80)
+		{
+			IIC_SDAB_HIGH();
+		}
+		else
+		{
+			IIC_SDAB_LOW();
+		}
+		value = value << 1 ;
+		i2cB_clock() ;
+	}
+	return(!i2cB_ack());
+}
+
+static __bool i2cBTransmitSubAddr(__u16 value)
+{
+	register __u8 i ;
+
+	for ( i=0 ; i<8 ; i++ )
+	{
+		if((value&0x80)==0x80)
+		{
+			IIC_SDAB_HIGH();
+		}
+		else
+		{
+			IIC_SDAB_LOW();
+		}
+		value = value << 1 ;
+		i2cB_clock() ;
+	}
+	return(!i2cB_ack());
+}
+
+static __bool i2cBLocateSubAddr(__u8 slave_addr, __u16 sub_addr)
+{
+	register __u8 i;
+	__u8 sub_addr_hi,sub_addr_low;
+
+	sub_addr_hi = sub_addr >>8;
+	sub_addr_low = sub_addr;
+	for (i=0; i<3; i++)
+	{
+		//Start I2C
+		if (i2cBStart())
+		{
+			//Slave address
+			if (i2cBTransmit(slave_addr))
+			{
+				if (i2cBTransmitSubAddr(sub_addr_hi))
+				{
+					if (i2cBTransmitSubAddr(sub_addr_low))
+						return(1);
+				}
+			}
+		}
+		i2cBStop();
+	}
+	return(0);
+}
+
+static __bool IIC_Write(__u8 slave_addr, __u16 sub_addr, __u8 value)
+{
+	if (i2cBLocateSubAddr(slave_addr, sub_addr))
+	{
+		//value
+		if (i2cBTransmit(value))
+		{
+			i2cBStop();
+			return(1);
+		}
+	}
+	i2cBStop();
+	return(0);
+}
+
+static void  LCD_io_init(__u32 sel)
+{
+    //request SCLB gpio, and output high as default
+    LCD_GPIO_request(sel, 0);
+    LCD_GPIO_set_attr(sel, 0, 1);
+    LCD_GPIO_write(sel, 0, 1);
+
+    //request SDAB gpio, and output high as default
+    LCD_GPIO_request(sel, 1);
+    LCD_GPIO_set_attr(sel, 1, 1);
+    LCD_GPIO_write(sel, 1, 1);
+}
+
+static void  LCD_io_exit(__u32 sel)
+{
+    //release SCLB gpio
+    LCD_GPIO_release(sel, 0);
+
+    //release SDAB gpio
+    LCD_GPIO_release(sel, 1);
+}
+
+static void  LCD_open_cmd(__u32 sel)
+{
+    IIC_Write(0xfc, 0xf830, 0xb2);
+    IIC_Write(0xfc, 0xf833, 0xc2);
+    IIC_Write(0xfc, 0xf831, 0xf0);
+    IIC_Write(0xfc, 0xf840, 0x80);
+    IIC_Write(0xfc, 0xf881, 0xec);
+}
+
+static void  LCD_close_cmd(__u32 sel)
+{
+}
+
+//sel: 0:lcd0; 1:lcd1
+static __s32 LCD_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+    return 0;
+}
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun)
+{
+#ifdef LCD_PARA_USE_CONFIG
+    fun->cfg_panel_info = LCD_cfg_panel_info;//delete this line if you want to use the lcd para define in sys_config1.fex
+#endif
+    fun->cfg_open_flow = LCD_open_flow;
+    fun->cfg_close_flow = LCD_close_flow;
+    fun->lcd_user_defined_func = LCD_user_defined_func;
+}
+
diff --git a/drivers/video/sun4i/lcd/lcd_bak/TC102.c b/drivers/video/sun4i/lcd/lcd_bak/TC102.c
new file mode 100644
index 0000000..89b193e
--- /dev/null
+++ b/drivers/video/sun4i/lcd/lcd_bak/TC102.c
@@ -0,0 +1,493 @@
+
+#include "lcd_panel_cfg.h"
+
+static void  LCD_io_init(__u32 sel);
+static void  LCD_io_exit(__u32 sel);
+static void  LCD_open_cmd(__u32 sel);
+static void  LCD_close_cmd(__u32 sel);
+
+//delete this line if you want to use the lcd para define in sys_config1.fex
+#define LCD_PARA_USE_CONFIG
+
+#ifdef LCD_PARA_USE_CONFIG
+
+static __u32 g_gamma_tbl[18] =
+{
+0,      //0
+16,     //15
+40,     //30
+55,     //45
+66,     //60
+82,     //75
+96,     //90
+112,    //105
+131,    //120
+145,    //135
+160,    //150
+173,    //165
+187,    //180
+199,    //195
+213,    //210
+224,    //225
+237,    //240
+255     //255
+};
+
+static void LCD_cfg_panel_info(__panel_para_t * info)
+{
+    __u32 i = 0, j=0;
+
+    memset(info,0,sizeof(__panel_para_t));
+
+    info->lcd_x             = 1280;
+    info->lcd_y             = 768;
+    info->lcd_dclk_freq     = 68;       //MHz
+
+    info->lcd_pwm_not_used  = 0;
+    info->lcd_pwm_ch        = 0;
+    info->lcd_pwm_freq      = 10000;     //Hz
+    info->lcd_pwm_pol       = 0;
+
+    info->lcd_if            = 0;        //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+    info->lcd_hbp           = 3;      //hsync back porch
+    info->lcd_ht            = 1440;     //hsync total cycle
+    info->lcd_vbp           = 3;       //vsync back porch
+    info->lcd_vt            = 1580;  //vysnc total cycle *2
+
+    info->lcd_hv_if         = 0;        //0:hv parallel 1:hv serial
+    info->lcd_hv_smode      = 0;        //0:RGB888 1:CCIR656
+    info->lcd_hv_s888_if    = 0;        //serial RGB format
+    info->lcd_hv_syuv_if    = 0;        //serial YUV format
+    info->lcd_hv_hspw       = 0;        //hsync plus width
+    info->lcd_hv_vspw       = 0;        //vysnc plus width
+
+    info->lcd_cpu_if        = 0;        //0:18bit 4:16bit
+    info->lcd_frm           = 1;        //0: disable; 1: enable rgb666 dither; 2:enable rgb656 dither
+
+    info->lcd_lvds_ch       = 0;        //0:single channel; 1:dual channel
+    info->lcd_lvds_mode     = 0;        //0:NS mode; 1:JEIDA mode
+    info->lcd_lvds_bitwidth = 0;        //0:24bit; 1:18bit
+    info->lcd_lvds_io_cross = 0;        //0:normal; 1:pn cross
+
+    info->lcd_io_cfg0       = 0x00000000;
+
+    info->lcd_gamma_correction_en = 1;
+    for(i=0; i<17; i++)
+    {
+        for(j=0; j<15; j++)
+        {
+            __u32 value = 0;
+
+            value = g_gamma_tbl[i] + ((g_gamma_tbl[i+1] - g_gamma_tbl[i]) * j)/15;
+            info->lcd_gamma_tbl[i*15 + j] = (value<<16) + (value<<8) + value;
+        }
+    }
+    info->lcd_gamma_tbl[255] = (g_gamma_tbl[17]<<16) + (g_gamma_tbl[17]<<8) + g_gamma_tbl[17];
+}
+#endif
+
+static __s32 LCD_open_flow(__u32 sel)
+{
+	LCD_OPEN_FUNC(sel, LCD_power_on	, 50); 	//open lcd power, and delay 10ms
+	LCD_OPEN_FUNC(sel, LCD_io_init	, 20); 	//request and init gpio, and delay 20ms
+	LCD_OPEN_FUNC(sel, TCON_open	, 500);   //open lcd controller, and delay 200ms
+	LCD_OPEN_FUNC(sel, LCD_open_cmd	, 10); 	//use gpio to config lcd module to the  work mode, and delay 10ms
+	LCD_OPEN_FUNC(sel, LCD_bl_open	, 0); 	//open lcd backlight, and delay 0ms
+
+	return 0;
+}
+
+static __s32 LCD_close_flow(__u32 sel)
+{
+	LCD_CLOSE_FUNC(sel, LCD_bl_close    , 0); 	 //close lcd backlight, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_close_cmd   , 0); 	 //use gpio to config lcd module to the powerdown/sleep mode, and delay 0ms
+	LCD_CLOSE_FUNC(sel, TCON_close	    , 0); 	 //close lcd controller, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_io_exit	    , 0); 	 //release gpio, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_power_off   , 1000); //close lcd power, and delay 1000ms
+
+	return 0;
+}
+
+static void LCD_power_on(__u32 sel)
+{
+    LCD_POWER_EN(sel, 1);//config lcd_power pin to open lcd power
+}
+
+static void LCD_power_off(__u32 sel)
+{
+    LCD_POWER_EN(sel, 0);//config lcd_power pin to close lcd power
+}
+
+static void LCD_bl_open(__u32 sel)
+{
+    LCD_PWM_EN(sel, 1);//open pwm module
+    LCD_BL_EN(sel, 1);//config lcd_bl_en pin to open lcd backlight
+}
+
+static void LCD_bl_close(__u32 sel)
+{
+    LCD_BL_EN(sel, 0);//config lcd_bl_en pin to close lcd backlight
+    LCD_PWM_EN(sel, 0);//close pwm module
+}
+
+#define IIC_SCLB_LOW()	        LCD_GPIO_write(0, 0, 0)
+#define IIC_SCLB_HIGH()	        LCD_GPIO_write(0, 0, 1)
+
+#define IIC_SDAB_INPUT_SETUP()	LCD_GPIO_set_attr(0, 1, 0)
+#define IIC_SDAB_OUTPUT_SETUP()	LCD_GPIO_set_attr(0, 1, 1)
+#define CHECK_SDAB_HIGH()       LCD_GPIO_read(0, 1)
+#define IIC_SDAB_LOW()          LCD_GPIO_write(0, 1, 0)
+#define IIC_SDAB_HIGH()	        LCD_GPIO_write(0, 1, 1)
+
+static __bool i2cB_clock( void )
+{
+	__bool sample = 0;
+
+	IIC_SCLB_HIGH();
+	LCD_delay_us(10) ;
+	IIC_SCLB_LOW();
+	LCD_delay_us(10) ;
+	return ( sample ) ;
+}
+
+static __bool i2cB_ack(void)
+{
+	IIC_SCLB_HIGH();
+	IIC_SDAB_INPUT_SETUP();
+	LCD_delay_us(5);
+	LCD_delay_us(5);
+	if(CHECK_SDAB_HIGH())
+	{
+		LCD_delay_us(5) ;
+		IIC_SDAB_OUTPUT_SETUP();
+		LCD_delay_us(5) ;
+		IIC_SCLB_LOW();
+		LCD_delay_us(5) ;
+		IIC_SDAB_HIGH();
+		LCD_delay_us(5) ;
+		return(1);
+	}
+	else
+	{
+		LCD_delay_us(5) ;
+		IIC_SDAB_OUTPUT_SETUP();
+		LCD_delay_us(5) ;
+		IIC_SCLB_LOW();
+		LCD_delay_us(5) ;
+		IIC_SDAB_HIGH();
+		LCD_delay_us(5) ;
+		return(0);
+	}
+}
+
+//---------------------------------------------------------
+static void i2cBStartA( void )
+{
+	IIC_SCLB_HIGH();
+	IIC_SDAB_HIGH();
+	LCD_delay_us(10) ;
+	IIC_SDAB_LOW();
+	LCD_delay_us(10) ;
+	IIC_SCLB_LOW();
+}
+
+static __bool i2cBStart( void )
+{
+	IIC_SDAB_HIGH();
+	IIC_SCLB_HIGH();
+	LCD_delay_us(10) ;
+	IIC_SDAB_INPUT_SETUP();
+	if(CHECK_SDAB_HIGH())
+	{
+		IIC_SDAB_OUTPUT_SETUP();
+		{
+			i2cBStartA();
+			return(1);
+		}
+	}
+	return(0);
+}
+
+static void i2cBStop(void)
+{
+   IIC_SDAB_OUTPUT_SETUP();
+   IIC_SDAB_LOW();
+   LCD_delay_us(5) ;
+   IIC_SCLB_HIGH();
+   LCD_delay_us(5) ;
+   IIC_SDAB_HIGH();
+   LCD_delay_us(5) ;
+}
+
+//---------------------------------------------------------
+static __bool i2cBTransmit(__u8 value)
+{
+	register __u8 i ;
+	IIC_SDAB_OUTPUT_SETUP();
+	LCD_delay_us(5) ;
+	for ( i=0 ; i<8 ; i++ )
+	{
+		if((value&0x80)==0x80)
+		{
+			IIC_SDAB_HIGH();
+			//printk("//////// DATA-1  //////\n");
+		}
+		else
+		{
+			IIC_SDAB_LOW();
+			//printk("//////// DATA-0  //////\n");
+		}
+		value = value << 1 ;
+		LCD_delay_us(10) ;
+		i2cB_clock() ;
+
+	}
+	return(!i2cB_ack());
+}
+
+static __bool i2cBTransmitSubAddr(__u8 value)
+{
+	register __u8 i ;
+
+	for ( i=0 ; i<8 ; i++ )
+	{
+		if((value&0x80)==0x80)
+		{
+			IIC_SDAB_HIGH();
+		}
+		else
+		{
+			IIC_SDAB_LOW();
+		}
+		value = value << 1 ;
+		LCD_delay_us(10) ;
+		i2cB_clock() ;
+	}
+	return(!i2cB_ack());
+}
+
+static __bool i2cBLocateSubAddr(__u8 slave_addr, __u8 sub_addr)
+{
+	register __u8 i;
+	__u32 j;
+
+	for (i=0; i<3; i++)
+	{
+		//Start I2C
+
+		if (i2cBStart())
+		{         //printk("-------------Start I2C OK-----------\n");
+
+			if (i2cBTransmit(slave_addr))
+			{  //printk("-------------SLAVE ADDR SEND OK-----------\n");
+
+
+
+					if (i2cBTransmitSubAddr(sub_addr))
+						 {
+						  //printk("-------------ADDR SEND OK-----------\n");
+						  return(1);
+				     }
+			}
+		}
+		i2cBStop();
+	}
+
+	return(0);
+}
+
+static __bool IIC_Write_forT101(__u8 slave_addr, __u8 sub_addr, __u8 value)
+{
+
+	__u32 i;
+	if (i2cBLocateSubAddr(slave_addr, sub_addr))
+	{
+		if (i2cBTransmit(value))
+		{
+			i2cBStop();
+			printk(KERN_WARNING"-------------DATA SEND OK-----------\n");
+			return(1);
+		}
+	}
+	i2cBStop();
+
+printk(KERN_WARNING"-------------DATA SEND FAIL-----------\n");
+	return(0);
+}
+
+
+
+
+i2cREAD()
+{
+	register __u8 i ;
+	__u8  value = 0;
+
+	  IIC_SDAB_INPUT_SETUP();
+
+	  printk(KERN_WARNING"-------------IIC_Read_data-----------------\n");
+for ( i=0 ; i<8 ; i++ )
+	{
+		value = value << 1;
+
+	  //i2cB_clock() ;
+	    LCD_delay_us(15) ;
+	  	IIC_SCLB_HIGH();
+	    LCD_delay_us(10) ;
+	    IIC_SCLB_LOW();
+	    LCD_delay_us(10) ;
+
+	    LCD_delay_us(10) ;
+
+	 if(CHECK_SDAB_HIGH())
+	   value = value + 1;
+
+
+  }
+
+
+//	printk("value:value = %d\n",value);
+	printk(KERN_WARNING"-------------read ok----------\n");
+	i2cB_ack();
+	i2cBStop();
+
+}
+
+static __bool IIC_Read_forT101(__u8 slave_addr1, __u8 sub_addr1)
+{
+
+
+	if (i2cBLocateSubAddr(slave_addr1, sub_addr1))
+
+	   i2cREAD() ;
+
+
+//i2cBLocateSubAddr(slave_addr, sub_addr);
+//i2cBStop();
+	return(0);
+}
+
+
+static void  LCD_io_init(__u32 sel)
+{
+    printk(KERN_WARNING"------+++++++++++++lcd init*************\n");
+    //request SCLB gpio, and output high as default
+    LCD_GPIO_request(sel, 0);
+    LCD_GPIO_set_attr(sel, 0, 1);
+    LCD_GPIO_write(sel, 0, 1);
+
+    //request SDAB gpio, and output high as default
+    LCD_GPIO_request(sel, 1);
+    LCD_GPIO_set_attr(sel, 1, 1);
+    LCD_GPIO_write(sel, 1, 1);
+}
+
+static void  LCD_io_exit(__u32 sel)
+{
+    printk(KERN_WARNING"------+++++++++++++lcd exit*************\n");
+    //release SCLB gpio
+    LCD_GPIO_release(sel, 0);
+
+    //release SDAB gpio
+    LCD_GPIO_release(sel, 1);
+}
+
+static void  LCD_open_cmd(__u32 sel)
+{
+	__u32 i;
+
+	 printk(KERN_WARNING"------+++++++++++++into  T201_Initialize*************\n");
+
+                                       printk(KERN_WARNING"-------------SEND1*************\n");
+				       /*
+ IIC_Write_forT101(0x6c, 0x2a,0xa2);
+ //IIC_Read_forT101(0x6d, 0x2a);  printk("-------------SEND2*************\n"); //  IIC_Write_forT101(0x36, 0x2a,0xa2);
+ IIC_Write_forT101(0x6c, 0x2d,0xc2);   printk("-------------SEND3*************\n"); //  IIC_Write_forT101(0x36, 0x2d,0xc2);
+ IIC_Write_forT101(0x6c, 0x36,0x30);   printk("-------------SEND4*************\n"); //  IIC_Write_forT101(0x36, 0x36,0x30);
+ IIC_Write_forT101(0x6c, 0x46,0x49);   printk("-------------SEND5*************\n"); //  IIC_Write_forT101(0x36, 0x46,0x49);
+ IIC_Write_forT101(0x6c, 0x47,0x92);   printk("-------------SEND6*************\n"); //  IIC_Write_forT101(0x36, 0x47,0x92);
+                                        //
+ IIC_Write_forT101(0x6c, 0x48,0x00);   printk("-------------SEND7*************\n");  //  IIC_Write_forT101(0x36, 0x48,0x00);
+ IIC_Write_forT101(0x6c, 0x5f,0x00);   printk("-------------SEND8*************\n");  //  IIC_Write_forT101(0x36, 0x5f,0x00);
+ IIC_Write_forT101(0x6c, 0x60,0xa5);   printk("-------------SEND9*************\n");  //  IIC_Write_forT101(0x36, 0x60,0xa5);
+ IIC_Write_forT101(0x6c, 0x61,0x08);   printk("-------------SEND10*************\n");  // IIC_Write_forT101(0x36, 0x61,0x08);
+ IIC_Write_forT101(0x6c, 0x62,0xff);   printk("-------------SEND11*************\n");  // IIC_Write_forT101(0x36, 0x62,0xff);
+                                        //
+ IIC_Write_forT101(0x6c, 0x64,0x00);   printk("-------------SEND12*************\n"); // IIC_Write_forT101(0x36, 0x64,0x00);
+ IIC_Write_forT101(0x6c, 0x80,0x01);   printk("-------------SEND13*************\n"); // IIC_Write_forT101(0x36, 0x80,0x01);
+ IIC_Write_forT101(0x6c, 0x81,0xe4);   printk("-------------SEND14*************\n"); // IIC_Write_forT101(0x36, 0x81,0xe4);
+ IIC_Write_forT101(0x6c, 0x2c,0x08);   printk("-------------SEND15*************\n"); // IIC_Write_forT101(0x36, 0x2c,0x08);
+ IIC_Write_forT101(0x6c, 0x33,0x29);   printk("-------------SEND16*************\n"); // IIC_Write_forT101(0x36, 0x33,0x29);
+                                       //
+ IIC_Write_forT101(0x6c, 0x34,0x09);   printk("-------------SEND17*************\n"); // IIC_Write_forT101(0x36, 0x34,0x09);
+ IIC_Write_forT101(0x6c, 0x3d,0x00);   printk("-------------SEND18*************\n"); // IIC_Write_forT101(0x36, 0x3d,0x00);
+ IIC_Write_forT101(0x6c, 0x42,0x88);   printk("-------------SEND19*************\n"); // IIC_Write_forT101(0x36, 0x42,0x88);
+ IIC_Write_forT101(0x6c, 0x43,0x86);   printk("-------------SEND20*************\n"); // IIC_Write_forT101(0x36, 0x43,0x86);
+ IIC_Write_forT101(0x6c, 0x44,0x68);   printk("-------------SEND21*************\n"); // IIC_Write_forT101(0x36, 0x44,0x68);
+                                       //
+ IIC_Write_forT101(0x6c, 0x45,0x88);   printk("-------------SEND22*************\n"); // IIC_Write_forT101(0x36, 0x45,0x88);
+ IIC_Write_forT101(0x6c, 0x46,0x96);   printk("-------------SEND23*************\n"); // IIC_Write_forT101(0x36, 0x46,0x96);
+ IIC_Write_forT101(0x6c, 0x47,0x48);   printk("-------------SEND24*************\n"); // IIC_Write_forT101(0x36, 0x47,0x48);
+ IIC_Write_forT101(0x6c, 0x48,0x04);                                          // IIC_Write_forT101(0x36, 0x48,0x04);
+
+ */
+IIC_Write_forT101(0x6c, 0x2a,0xa2);
+IIC_Write_forT101(0x6c, 0x2d,0xc2);
+IIC_Write_forT101(0x6c, 0x33,0x03);
+IIC_Write_forT101(0x6c, 0x36,0x30);
+IIC_Write_forT101(0x6c, 0x46,0x49);
+IIC_Write_forT101(0x6c, 0x47,0x92);
+IIC_Write_forT101(0x6c, 0x48,0x00);
+IIC_Write_forT101(0x6c, 0x5f,0x00);
+IIC_Write_forT101(0x6c, 0x60,0xa5);
+IIC_Write_forT101(0x6c, 0x61,0x08);
+IIC_Write_forT101(0x6c, 0x62,0xff);
+IIC_Write_forT101(0x6c, 0x64,0x00);
+IIC_Write_forT101(0x6c, 0x80,0x01);
+IIC_Write_forT101(0x6c, 0x81,0xe4);
+IIC_Write_forT101(0x6c, 0x34,0x01);
+
+   printk(KERN_WARNING"-------------out  T201_Initialize*************\n");
+
+
+}
+
+static void  LCD_close_cmd(__u32 sel)
+{
+}
+//sel: 0:lcd0; 1:lcd1
+//para1 0:inter open 1:inter close 2:lense open 3:lense close
+static __s32 LCD_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+
+   switch(para1)
+{
+	case 0:
+IIC_Write_forT101(0x6c, 0x48,0x00);
+break;
+	case 1:
+IIC_Write_forT101(0x6c, 0x48,0x03);
+break;
+	case 2:
+IIC_Write_forT101(0x6c, 0x36,0x30);
+break;
+	case 3:
+IIC_Write_forT101(0x6c, 0x36,0x00);
+break;
+	default:
+break;
+}
+    return 0;
+}
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun)
+{
+#ifdef LCD_PARA_USE_CONFIG
+    fun->cfg_panel_info = LCD_cfg_panel_info;//delete this line if you want to use the lcd para define in sys_config1.fex
+#endif
+    fun->cfg_open_flow = LCD_open_flow;
+    fun->cfg_close_flow = LCD_close_flow;
+    fun->lcd_user_defined_func = LCD_user_defined_func;
+}
+
diff --git a/drivers/video/sun4i/lcd/lcd_bak/hv_800x480.c b/drivers/video/sun4i/lcd/lcd_bak/hv_800x480.c
new file mode 100644
index 0000000..689f96b
--- /dev/null
+++ b/drivers/video/sun4i/lcd/lcd_bak/hv_800x480.c
@@ -0,0 +1,146 @@
+
+#include "lcd_panel_cfg.h"
+
+//delete this line if you want to use the lcd para define in sys_config1.fex
+//#define LCD_PARA_USE_CONFIG
+
+#ifdef LCD_PARA_USE_CONFIG
+static __u32 g_gamma_tbl[256] =
+{
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+
+static void LCD_cfg_panel_info(__panel_para_t * info)
+{
+    __u32 i = 0;
+
+    memset(info,0,sizeof(__panel_para_t));
+
+    info->lcd_x             = 800;
+    info->lcd_y             = 480;
+    info->lcd_dclk_freq     = 33;       //MHz
+
+    info->lcd_pwm_not_used  = 0;
+    info->lcd_pwm_ch        = 0;
+    info->lcd_pwm_freq      = 10000;     //Hz
+    info->lcd_pwm_pol       = 0;
+
+    info->lcd_if            = 0;        //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+    info->lcd_hbp           = 215;      //hsync back porch
+    info->lcd_ht            = 1055;     //hsync total cycle
+    info->lcd_vbp           = 34;       //vsync back porch
+    info->lcd_vt            = 2 * 525;  //vysnc total cycle *2
+
+    info->lcd_hv_if         = 0;        //0:hv parallel 1:hv serial
+    info->lcd_hv_smode      = 0;        //0:RGB888 1:CCIR656
+    info->lcd_hv_s888_if    = 0;        //serial RGB format
+    info->lcd_hv_syuv_if    = 0;        //serial YUV format
+    info->lcd_hv_hspw       = 0;        //hsync plus width
+    info->lcd_hv_vspw       = 0;        //vysnc plus width
+
+    info->lcd_cpu_if        = 0;        //0:18bit 4:16bit
+    info->lcd_frm           = 0;        //0: disable; 1: enable rgb666 dither; 2:enable rgb656 dither
+
+    info->lcd_lvds_ch       = 0;        //0:single channel; 1:dual channel
+    info->lcd_lvds_mode     = 0;        //0:NS mode; 1:JEIDA mode
+    info->lcd_lvds_bitwidth = 0;        //0:24bit; 1:18bit
+    info->lcd_lvds_io_cross = 0;        //0:normal; 1:pn cross
+
+    info->lcd_io_cfg0       = 0x10000000;
+
+    info->lcd_gamma_correction_en = 0;
+    for(i=0; i<256; i++)
+    {
+        info->lcd_gamma_tbl[i] = g_gamma_tbl[i];
+    }
+}
+#endif
+
+static __s32 LCD_open_flow(__u32 sel)
+{
+	LCD_OPEN_FUNC(sel, LCD_power_on, 50);   //open lcd power, and delay 50ms
+	LCD_OPEN_FUNC(sel, TCON_open, 500);     //open lcd controller, and delay 500ms
+	LCD_OPEN_FUNC(sel, LCD_bl_open, 0);     //open lcd backlight, and delay 0ms
+
+	return 0;
+}
+
+static __s32 LCD_close_flow(__u32 sel)
+{
+	LCD_CLOSE_FUNC(sel, LCD_bl_close, 0);       //close lcd backlight, and delay 0ms
+	LCD_CLOSE_FUNC(sel, TCON_close, 0);         //close lcd controller, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_power_off, 1000);   //close lcd power, and delay 1000ms
+
+	return 0;
+}
+
+static void LCD_power_on(__u32 sel)
+{
+    LCD_POWER_EN(sel, 1);//config lcd_power pin to open lcd power
+}
+
+static void LCD_power_off(__u32 sel)
+{
+    LCD_POWER_EN(sel, 0);//config lcd_power pin to close lcd power
+}
+
+static void LCD_bl_open(__u32 sel)
+{
+    LCD_PWM_EN(sel, 1);//open pwm module
+    LCD_BL_EN(sel, 1);//config lcd_bl_en pin to open lcd backlight
+}
+
+static void LCD_bl_close(__u32 sel)
+{
+    LCD_BL_EN(sel, 0);//config lcd_bl_en pin to close lcd backlight
+    LCD_PWM_EN(sel, 0);//close pwm module
+}
+
+//sel: 0:lcd0; 1:lcd1
+static __s32 LCD_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+    return 0;
+}
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun)
+{
+#ifdef LCD_PARA_USE_CONFIG
+    fun->cfg_panel_info = LCD_cfg_panel_info;//delete this line if you want to use the lcd para define in sys_config1.fex
+#endif
+    fun->cfg_open_flow = LCD_open_flow;
+    fun->cfg_close_flow = LCD_close_flow;
+    fun->lcd_user_defined_func = LCD_user_defined_func;
+}
+
diff --git a/drivers/video/sun4i/lcd/lcd_bak/lvds_1080.c b/drivers/video/sun4i/lcd/lcd_bak/lvds_1080.c
new file mode 100644
index 0000000..3a9ddce
--- /dev/null
+++ b/drivers/video/sun4i/lcd/lcd_bak/lvds_1080.c
@@ -0,0 +1,146 @@
+
+#include "lcd_panel_cfg.h"
+
+//delete this line if you want to use the lcd para define in sys_config1.fex
+//#define LCD_PARA_USE_CONFIG
+
+#ifdef LCD_PARA_USE_CONFIG
+static __u32 g_gamma_tbl[256] =
+{
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+
+static void LCD_cfg_panel_info(__panel_para_t * info)
+{
+    __u32 i = 0;
+
+    memset(info,0,sizeof(__panel_para_t));
+
+    info->lcd_x             = 1920;
+    info->lcd_y             = 1080;
+    info->lcd_dclk_freq     = 142;      //MHz
+
+    info->lcd_pwm_not_used  = 0;
+    info->lcd_pwm_ch        = 0;
+    info->lcd_pwm_freq      = 10000;     //Hz
+    info->lcd_pwm_pol       = 0;
+
+    info->lcd_if            = 3;        //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+    info->lcd_hbp           = 13;      //hsync back porch
+    info->lcd_ht            = 2160;     //hsync total cycle
+    info->lcd_vbp           = 13;       //vsync back porch
+    info->lcd_vt            = 2 * 1125;  //vysnc total cycle *2
+
+    info->lcd_hv_if         = 0;        //0:hv parallel 1:hv serial
+    info->lcd_hv_smode      = 0;        //0:RGB888 1:CCIR656
+    info->lcd_hv_s888_if    = 0;        //serial RGB format
+    info->lcd_hv_syuv_if    = 0;        //serial YUV format
+    info->lcd_hv_hspw       = 0;        //hsync plus width
+    info->lcd_hv_vspw       = 0;        //vysnc plus width
+
+    info->lcd_cpu_if        = 0;        //0:18bit 4:16bit
+    info->lcd_frm           = 0;        //0: disable; 1: enable rgb666 dither; 2:enable rgb656 dither
+
+    info->lcd_lvds_ch       = 1;        //0:single channel; 1:dual channel
+    info->lcd_lvds_mode     = 0;        //0:NS mode; 1:JEIDA mode
+    info->lcd_lvds_bitwidth = 0;        //0:24bit; 1:18bit
+    info->lcd_lvds_io_cross = 1;        //0:normal; 1:pn cross
+
+    info->lcd_io_cfg0       = 0x10000000;
+
+    info->lcd_gamma_correction_en = 0;
+    for(i=0; i<256; i++)
+    {
+        info->lcd_gamma_tbl[i] = g_gamma_tbl[i];
+    }
+}
+#endif
+
+static __s32 LCD_open_flow(__u32 sel)
+{
+	LCD_OPEN_FUNC(sel, LCD_power_on, 50);   //open lcd power, and delay 50ms
+	LCD_OPEN_FUNC(sel, TCON_open, 500);     //open lcd controller, and delay 500ms
+	LCD_OPEN_FUNC(sel, LCD_bl_open, 0);     //open lcd backlight, and delay 0ms
+
+	return 0;
+}
+
+static __s32 LCD_close_flow(__u32 sel)
+{
+	LCD_CLOSE_FUNC(sel, LCD_bl_close, 0);       //close lcd backlight, and delay 0ms
+	LCD_CLOSE_FUNC(sel, TCON_close, 0);         //close lcd controller, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_power_off, 1000);   //close lcd power, and delay 1000ms
+
+	return 0;
+}
+
+static void LCD_power_on(__u32 sel)
+{
+    LCD_POWER_EN(sel, 1);//config lcd_power pin to open lcd power
+}
+
+static void LCD_power_off(__u32 sel)
+{
+    LCD_POWER_EN(sel, 0);//config lcd_power pin to close lcd power
+}
+
+static void LCD_bl_open(__u32 sel)
+{
+    LCD_PWM_EN(sel, 1);//open pwm module
+    LCD_BL_EN(sel, 1);//config lcd_bl_en pin to open lcd backlight
+}
+
+static void LCD_bl_close(__u32 sel)
+{
+    LCD_BL_EN(sel, 0);//config lcd_bl_en pin to close lcd backlight
+    LCD_PWM_EN(sel, 0);//close pwm module
+}
+
+//sel: 0:lcd0; 1:lcd1
+static __s32 LCD_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+    return 0;
+}
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun)
+{
+#ifdef LCD_PARA_USE_CONFIG
+    fun->cfg_panel_info = LCD_cfg_panel_info;//delete this line if you want to use the lcd para define in sys_config1.fex
+#endif
+    fun->cfg_open_flow = LCD_open_flow;
+    fun->cfg_close_flow = LCD_close_flow;
+    fun->lcd_user_defined_func = LCD_user_defined_func;
+}
+
diff --git a/drivers/video/sun4i/lcd/lcd_panel_cfg.h b/drivers/video/sun4i/lcd/lcd_panel_cfg.h
new file mode 100644
index 0000000..86c2bcb
--- /dev/null
+++ b/drivers/video/sun4i/lcd/lcd_panel_cfg.h
@@ -0,0 +1,79 @@
+
+#ifndef __LCD_PANNEL_CFG_H__
+#define __LCD_PANNEL_CFG_H__
+
+#include "dev_lcd.h"
+
+
+static void LCD_power_on(__u32 sel);
+static void LCD_power_off(__u32 sel);
+static void LCD_bl_open(__u32 sel);
+static void LCD_bl_close(__u32 sel);
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun);
+void LCD_get_panel_funs_1(__lcd_panel_fun_t * fun);
+
+extern void LCD_OPEN_FUNC(__u32 sel, LCD_FUNC func, __u32 delay/*ms*/);
+extern void LCD_CLOSE_FUNC(__u32 sel, LCD_FUNC func, __u32 delay/*ms*/);
+extern void LCD_get_reg_bases(__reg_bases_t *para);
+extern void LCD_delay_ms(__u32 ms) ;
+extern void LCD_delay_us(__u32 ns);
+extern void TCON_open(__u32 sel);
+extern void TCON_close(__u32 sel);
+extern __s32 LCD_PWM_EN(__u32 sel, __bool b_en);
+extern __s32 LCD_BL_EN(__u32 sel, __bool b_en);
+extern __s32 LCD_POWER_EN(__u32 sel, __bool b_en);
+extern void LCD_CPU_register_irq(__u32 sel, void (*Lcd_cpuisr_proc) (void));
+extern void LCD_CPU_WR(__u32 sel, __u32 index, __u32 data);
+extern void LCD_CPU_WR_INDEX(__u32 sel,__u32 index);
+extern void LCD_CPU_WR_DATA(__u32 sel, __u32 data);
+extern void LCD_CPU_AUTO_FLUSH(__u32 sel, __bool en);
+extern __s32 LCD_GPIO_request(__u32 sel, __u32 io_index);
+extern __s32 LCD_GPIO_release(__u32 sel,__u32 io_index);
+extern __s32 LCD_GPIO_set_attr(__u32 sel,__u32 io_index, __bool b_output);
+extern __s32 LCD_GPIO_read(__u32 sel,__u32 io_index);
+extern __s32 LCD_GPIO_write(__u32 sel,__u32 io_index, __u32 data);
+
+extern __s32 pwm_set_para(__u32 channel, __pwm_info_t * pwm_info);
+extern __s32 pwm_get_para(__u32 channel, __pwm_info_t * pwm_info);
+
+
+#define BIT0		  0x00000001
+#define BIT1		  0x00000002
+#define BIT2		  0x00000004
+#define BIT3		  0x00000008
+#define BIT4		  0x00000010
+#define BIT5		  0x00000020
+#define BIT6		  0x00000040
+#define BIT7		  0x00000080
+#define BIT8		  0x00000100
+#define BIT9		  0x00000200
+#define BIT10		  0x00000400
+#define BIT11		  0x00000800
+#define BIT12		  0x00001000
+#define BIT13		  0x00002000
+#define BIT14		  0x00004000
+#define BIT15		  0x00008000
+#define BIT16		  0x00010000
+#define BIT17		  0x00020000
+#define BIT18		  0x00040000
+#define BIT19		  0x00080000
+#define BIT20		  0x00100000
+#define BIT21		  0x00200000
+#define BIT22		  0x00400000
+#define BIT23		  0x00800000
+#define BIT24		  0x01000000
+#define BIT25		  0x02000000
+#define BIT26		  0x04000000
+#define BIT27		  0x08000000
+#define BIT28		  0x10000000
+#define BIT29		  0x20000000
+#define BIT30		  0x40000000
+#define BIT31		  0x80000000
+
+#define sys_get_wvalue(n)   (*((volatile __u32 *)(n)))          /* word input */
+#define sys_put_wvalue(n,c) (*((volatile __u32 *)(n))  = (c))   /* word output */
+
+
+#endif
+
diff --git a/include/linux/drv_display.h b/include/linux/drv_display.h
new file mode 100644
index 0000000..5f30f06
--- /dev/null
+++ b/include/linux/drv_display.h
@@ -0,0 +1,23 @@
+#ifndef _DRV_DISPLAY_COMMON_H_
+#define _DRV_DISPLAY_COMMON_H_
+
+#if CONFIG_CHIP_ID == 1120
+
+#include <linux/drv_display_sun3i.h>
+
+#elif CONFIG_CHIP_ID == 1123
+
+#include <linux/drv_display_sun4i.h>
+
+#else
+
+#error "no chip id defined"
+
+#endif
+
+
+
+#endif
+
+
+
diff --git a/include/linux/drv_display_sun4i.h b/include/linux/drv_display_sun4i.h
new file mode 100644
index 0000000..fc52ab7
--- /dev/null
+++ b/include/linux/drv_display_sun4i.h
@@ -0,0 +1,762 @@
+#ifndef __DRV_DISPLAY_H__
+#define __DRV_DISPLAY_H__
+
+#include "types.h"
+#define __bool signed char
+
+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+#ifndef __BSP_DRV_DISPLAY_H__
+#define __BSP_DRV_DISPLAY_H__
+
+typedef struct {__u8  alpha;__u8 red;__u8 green; __u8 blue; }__disp_color_t;
+typedef struct {__s32 x; __s32 y; __u32 width; __u32 height;}__disp_rect_t;
+typedef struct {__u32 width;__u32 height;                   }__disp_rectsz_t;
+typedef struct {__s32 x; __s32 y;                           }__disp_pos_t;
+
+
+typedef enum
+{
+    DISP_FORMAT_1BPP        =0x0,
+    DISP_FORMAT_2BPP        =0x1,
+    DISP_FORMAT_4BPP        =0x2,
+    DISP_FORMAT_8BPP        =0x3,
+    DISP_FORMAT_RGB655      =0x4,
+    DISP_FORMAT_RGB565      =0x5,
+    DISP_FORMAT_RGB556      =0x6,
+    DISP_FORMAT_ARGB1555    =0x7,
+    DISP_FORMAT_RGBA5551    =0x8,
+    DISP_FORMAT_ARGB888     =0x9,//alpha padding to 0xff
+    DISP_FORMAT_ARGB8888    =0xa,
+    DISP_FORMAT_RGB888      =0xb,
+    DISP_FORMAT_ARGB4444    =0xc,
+
+    DISP_FORMAT_YUV444      =0x10,
+    DISP_FORMAT_YUV422      =0x11,
+    DISP_FORMAT_YUV420      =0x12,
+    DISP_FORMAT_YUV411      =0x13,
+    DISP_FORMAT_CSIRGB      =0x14,
+}__disp_pixel_fmt_t;
+
+
+typedef enum
+{
+    DISP_MOD_INTERLEAVED        =0x1,   //interleaved,1个地址
+    DISP_MOD_NON_MB_PLANAR      =0x0,   //无宏块平面模式,3个地址,RGB/YUV每个channel分别存放
+    DISP_MOD_NON_MB_UV_COMBINED =0x2,   //无宏块UV打包模式,2个地址,Y和UV分别存放
+    DISP_MOD_MB_PLANAR          =0x4,   //宏块平面模式,3个地址,RGB/YUV每个channel分别存放
+    DISP_MOD_MB_UV_COMBINED     =0x6,   //宏块UV打包模式 ,2个地址,Y和UV分别存放
+}__disp_pixel_mod_t;
+
+typedef enum
+{
+//for interleave argb8888
+    DISP_SEQ_ARGB   =0x0,//A在高位
+    DISP_SEQ_BGRA   =0x2,
+
+//for nterleaved yuv422
+    DISP_SEQ_UYVY   =0x3,
+    DISP_SEQ_YUYV   =0x4,
+    DISP_SEQ_VYUY   =0x5,
+    DISP_SEQ_YVYU   =0x6,
+
+//for interleaved yuv444
+    DISP_SEQ_AYUV   =0x7,
+    DISP_SEQ_VUYA   =0x8,
+
+//for uv_combined yuv420
+    DISP_SEQ_UVUV   =0x9,
+    DISP_SEQ_VUVU   =0xa,
+
+//for 16bpp rgb
+    DISP_SEQ_P10    = 0xd,//p1在高位
+    DISP_SEQ_P01    = 0xe,//p0在高位
+
+//for planar format or 8bpp rgb
+    DISP_SEQ_P3210  = 0xf,//p3在高位
+    DISP_SEQ_P0123  = 0x10,//p0在高位
+
+//for 4bpp rgb
+    DISP_SEQ_P76543210  = 0x11,
+    DISP_SEQ_P67452301  = 0x12,
+    DISP_SEQ_P10325476  = 0x13,
+    DISP_SEQ_P01234567  = 0x14,
+
+//for 2bpp rgb
+    DISP_SEQ_2BPP_BIG_BIG       = 0x15,//15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
+    DISP_SEQ_2BPP_BIG_LITTER    = 0x16,//12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3
+    DISP_SEQ_2BPP_LITTER_BIG    = 0x17,//3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12
+    DISP_SEQ_2BPP_LITTER_LITTER = 0x18,//0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
+
+//for 1bpp rgb
+    DISP_SEQ_1BPP_BIG_BIG       = 0x19,//31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
+    DISP_SEQ_1BPP_BIG_LITTER    = 0x1a,//24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7
+    DISP_SEQ_1BPP_LITTER_BIG    = 0x1b,//7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,23,22,21,20,19,18,17,16,31,30,29,28,27,26,25,24
+    DISP_SEQ_1BPP_LITTER_LITTER = 0x1c,//0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31
+}__disp_pixel_seq_t;
+
+typedef enum
+{
+    DISP_3D_SRC_MODE_TB = 0x0,//top bottom
+    DISP_3D_SRC_MODE_FP = 0x1,//frame packing
+    DISP_3D_SRC_MODE_SSF = 0x2,//side by side full
+    DISP_3D_SRC_MODE_SSH = 0x3,//side by side half
+    DISP_3D_SRC_MODE_LI = 0x4,//line interleaved
+}__disp_3d_src_mode_t;
+
+typedef enum
+{
+    //for lcd
+    DISP_3D_OUT_MODE_CI_1 = 0x5,//column interlaved 1
+    DISP_3D_OUT_MODE_CI_2 = 0x6,//column interlaved 2
+    DISP_3D_OUT_MODE_CI_3 = 0x7,//column interlaved 3
+    DISP_3D_OUT_MODE_CI_4 = 0x8,//column interlaved 4
+    DISP_3D_OUT_MODE_LIRGB = 0x9,//line interleaved rgb
+
+    //for hdmi
+    DISP_3D_OUT_MODE_TB = 0x0,//top bottom
+    DISP_3D_OUT_MODE_FP = 0x1,//frame packing
+    DISP_3D_OUT_MODE_SSF = 0x2,//side by side full
+    DISP_3D_OUT_MODE_SSH = 0x3,//side by side half
+    DISP_3D_OUT_MODE_LI = 0x4,//line interleaved
+    DISP_3D_OUT_MODE_FA = 0xa,//field alternative
+}__disp_3d_out_mode_t;
+
+typedef enum
+{
+    DISP_BT601  = 0,
+    DISP_BT709  = 1,
+    DISP_YCC    = 2,
+    DISP_VXYCC  = 3,
+}__disp_cs_mode_t;
+
+typedef enum
+{
+    DISP_OUTPUT_TYPE_NONE   = 0,
+    DISP_OUTPUT_TYPE_LCD    = 1,
+    DISP_OUTPUT_TYPE_TV     = 2,
+    DISP_OUTPUT_TYPE_HDMI   = 4,
+    DISP_OUTPUT_TYPE_VGA    = 8,
+}__disp_output_type_t;
+
+typedef enum
+{
+    DISP_TV_NONE    = 0,
+    DISP_TV_CVBS    = 1,
+    DISP_TV_YPBPR   = 2,
+    DISP_TV_SVIDEO  = 4,
+}__disp_tv_output_t;
+
+typedef enum
+{
+    DISP_TV_MOD_480I                = 0,
+    DISP_TV_MOD_576I                = 1,
+    DISP_TV_MOD_480P                = 2,
+    DISP_TV_MOD_576P                = 3,
+    DISP_TV_MOD_720P_50HZ           = 4,
+    DISP_TV_MOD_720P_60HZ           = 5,
+    DISP_TV_MOD_1080I_50HZ          = 6,
+    DISP_TV_MOD_1080I_60HZ          = 7,
+    DISP_TV_MOD_1080P_24HZ          = 8,
+    DISP_TV_MOD_1080P_50HZ          = 9,
+    DISP_TV_MOD_1080P_60HZ          = 0xa,
+    DISP_TV_MOD_1080P_24HZ_3D_FP    = 0x17,
+    DISP_TV_MOD_PAL                 = 0xb,
+    DISP_TV_MOD_PAL_SVIDEO          = 0xc,
+    DISP_TV_MOD_NTSC                = 0xe,
+    DISP_TV_MOD_NTSC_SVIDEO         = 0xf,
+    DISP_TV_MOD_PAL_M               = 0x11,
+    DISP_TV_MOD_PAL_M_SVIDEO        = 0x12,
+    DISP_TV_MOD_PAL_NC              = 0x14,
+    DISP_TV_MOD_PAL_NC_SVIDEO       = 0x15,
+    DISP_TV_MODE_NUM               = 0x18,
+}__disp_tv_mode_t;
+
+typedef enum
+{
+    DISP_TV_DAC_SRC_COMPOSITE = 0,
+    DISP_TV_DAC_SRC_LUMA = 1,
+    DISP_TV_DAC_SRC_CHROMA = 2,
+    DISP_TV_DAC_SRC_Y = 4,
+    DISP_TV_DAC_SRC_PB = 5,
+    DISP_TV_DAC_SRC_PR = 6,
+    DISP_TV_DAC_SRC_NONE = 7,
+}__disp_tv_dac_source;
+
+typedef enum
+{
+    DISP_VGA_H1680_V1050    = 0,
+    DISP_VGA_H1440_V900     = 1,
+    DISP_VGA_H1360_V768     = 2,
+    DISP_VGA_H1280_V1024    = 3,
+    DISP_VGA_H1024_V768     = 4,
+    DISP_VGA_H800_V600      = 5,
+    DISP_VGA_H640_V480      = 6,
+    DISP_VGA_H1440_V900_RB  = 7,//not support yet
+    DISP_VGA_H1680_V1050_RB = 8,//not support yet
+    DISP_VGA_H1920_V1080_RB = 9,
+    DISP_VGA_H1920_V1080    = 0xa,
+    DISP_VGA_H1280_V720     = 0xb,
+    DISP_VGA_MODE_NUM       = 0xc,
+}__disp_vga_mode_t;
+
+
+typedef enum
+{
+    DISP_LCDC_SRC_DE_CH1    = 0,
+    DISP_LCDC_SRC_DE_CH2    = 1,
+    DISP_LCDC_SRC_DMA       = 2,
+    DISP_LCDC_SRC_WHITE     = 3,
+    DISP_LCDC_SRC_BLACK     = 4,
+    DISP_LCDC_SRC_BLUT      = 5,
+}__disp_lcdc_src_t;
+
+typedef enum
+{
+    DISP_LCD_BRIGHT_LEVEL0  = 0,
+    DISP_LCD_BRIGHT_LEVEL1  = 1,
+    DISP_LCD_BRIGHT_LEVEL2  = 2,
+    DISP_LCD_BRIGHT_LEVEL3  = 3,
+    DISP_LCD_BRIGHT_LEVEL4  = 4,
+    DISP_LCD_BRIGHT_LEVEL5  = 5,
+    DISP_LCD_BRIGHT_LEVEL6  = 6,
+    DISP_LCD_BRIGHT_LEVEL7  = 7,
+    DISP_LCD_BRIGHT_LEVEL8  = 8,
+    DISP_LCD_BRIGHT_LEVEL9  = 9,
+    DISP_LCD_BRIGHT_LEVEL10 = 0xa,
+    DISP_LCD_BRIGHT_LEVEL11 = 0xb,
+    DISP_LCD_BRIGHT_LEVEL12 = 0xc,
+    DISP_LCD_BRIGHT_LEVEL13 = 0xd,
+    DISP_LCD_BRIGHT_LEVEL14 = 0xe,
+    DISP_LCD_BRIGHT_LEVEL15 = 0xf,
+}__disp_lcd_bright_t;
+
+typedef enum
+{
+    DISP_LAYER_WORK_MODE_NORMAL     = 0,    //normal work mode
+    DISP_LAYER_WORK_MODE_PALETTE    = 1,    //palette work mode
+    DISP_LAYER_WORK_MODE_INTER_BUF  = 2,    //internal frame buffer work mode
+    DISP_LAYER_WORK_MODE_GAMMA      = 3,    //gamma correction work mode
+    DISP_LAYER_WORK_MODE_SCALER     = 4,    //scaler work mode
+}__disp_layer_work_mode_t;
+
+typedef enum
+{
+    DISP_VIDEO_NATUAL       = 0,
+    DISP_VIDEO_SOFT         = 1,
+    DISP_VIDEO_VERYSOFT     = 2,
+    DISP_VIDEO_SHARP        = 3,
+    DISP_VIDEO_VERYSHARP    = 4
+}__disp_video_smooth_t;
+
+typedef enum
+{
+    DISP_HWC_MOD_H32_V32_8BPP = 0,
+    DISP_HWC_MOD_H64_V64_2BPP = 1,
+    DISP_HWC_MOD_H64_V32_4BPP = 2,
+    DISP_HWC_MOD_H32_V64_4BPP = 3,
+}__disp_hwc_mode_t;
+
+typedef enum
+{
+    DISP_EXIT_MODE_CLEAN_ALL    = 0,
+    DISP_EXIT_MODE_CLEAN_PARTLY = 1,//only clean interrupt temply
+}__disp_exit_mode_t;
+
+
+typedef enum//only for debug!!!
+{
+    DISP_REG_SCALER0 = 0,
+    DISP_REG_SCALER1 = 1,
+    DISP_REG_IMAGE0 = 2,
+    DISP_REG_IMAGE1 = 3,
+    DISP_REG_LCDC0 = 4,
+    DISP_REG_LCDC1 = 5,
+    DISP_REG_TVEC0 = 6,
+    DISP_REG_TVEC1 = 7,
+    DISP_REG_CCMU = 8,
+    DISP_REG_PIOC = 9,
+    DISP_REG_PWM = 10,
+}__disp_reg_index_t;
+
+typedef struct
+{
+    __u32                   addr[3];    // frame buffer的内容地址，对于rgb类型，只有addr[0]有效
+    __disp_rectsz_t         size;//单位是pixel
+    __disp_pixel_fmt_t      format;
+    __disp_pixel_seq_t      seq;
+    __disp_pixel_mod_t      mode;
+    __bool                  br_swap;    // blue red color swap flag, FALSE:RGB; TRUE:BGR,only used in rgb format
+    __disp_cs_mode_t        cs_mode;    //color space
+    __bool                  b_trd_src; //if 3d source, used for scaler mode layer
+    __disp_3d_src_mode_t    trd_mode; //source 3d mode, used for scaler mode layer
+    __u32                   trd_right_addr[3];//used when in frame packing 3d mode
+}__disp_fb_t;
+
+typedef struct
+{
+    __disp_layer_work_mode_t    mode;       //layer work mode
+    __bool                      b_from_screen;
+    __u8                        pipe;       //layer pipe,0/1,if in scaler mode, scaler0 must be pipe0, scaler1 must be pipe1
+    __u8                        prio;       //layer priority,can get layer prio,but never set layer prio,从底至顶,优先级由低至高
+    __bool                      alpha_en;   //layer global alpha enable
+    __u16                       alpha_val;  //layer global alpha value
+    __bool                      ck_enable;  //layer color key enable
+    __disp_rect_t               src_win;    // framebuffer source window,only care x,y if is not scaler mode
+    __disp_rect_t               scn_win;    // screen window
+    __disp_fb_t                 fb;         //framebuffer
+    __bool                      b_trd_out;  //if output 3d mode, used for scaler mode layer
+    __disp_3d_out_mode_t        out_trd_mode; //output 3d mode, used for scaler mode layer
+}__disp_layer_info_t;
+
+typedef struct
+{
+    __disp_color_t   ck_max;
+    __disp_color_t   ck_min;
+    __u32             red_match_rule;//0/1:always match; 2:match if min<=color<=max; 3:match if color>max or color<min
+    __u32             green_match_rule;//0/1:always match; 2:match if min<=color<=max; 3:match if color>max or color<min
+    __u32             blue_match_rule;//0/1:always match; 2:match if min<=color<=max; 3:match if color>max or color<min
+}__disp_colorkey_t;
+
+typedef struct
+{
+    __s32   id;
+    __u32   addr[3];
+    __u32   addr_right[3];//used when in frame packing 3d mode
+    __bool  interlace;
+    __bool  top_field_first;
+    __u32   frame_rate; // *FRAME_RATE_BASE(现在定为1000)
+    __u32   flag_addr;//dit maf flag address
+    __u32   flag_stride;//dit maf flag line stride
+    __bool  maf_valid;
+    __bool  pre_frame_valid;
+}__disp_video_fb_t;
+
+typedef struct
+{
+    __bool maf_enable;
+    __bool pre_frame_enable;
+}__disp_dit_info_t;
+
+typedef struct
+{
+    __disp_hwc_mode_t     pat_mode;
+    __u32                 addr;
+}__disp_hwc_pattern_t;
+
+typedef struct
+{
+    __disp_fb_t     input_fb;
+    __disp_rect_t   source_regn;
+    __disp_fb_t     output_fb;
+    //__disp_rect_t   out_regn;
+}__disp_scaler_para_t;
+
+typedef struct
+{
+    __disp_fb_t       fb;
+    __disp_rect_t   src_win;//source region,only care x,y because of not scaler
+    __disp_rect_t   scn_win;// sceen region
+}__disp_sprite_block_para_t;
+
+typedef struct
+{
+    __disp_rectsz_t screen_size;//used when the screen is not displaying on any output device(lcd/hdmi/vga/tv)
+    __disp_fb_t     output_fb;
+}__disp_capture_screen_para_t;
+
+typedef struct
+{
+    __s32 (*Hdmi_open)(void);
+    __s32 (*Hdmi_close)(void);
+    __s32 (*hdmi_set_mode)(__disp_tv_mode_t mode);
+    __s32 (*hdmi_mode_support)(__disp_tv_mode_t mode);
+    __s32 (*hdmi_get_HPD_status)(void);
+    __s32 (*hdmi_set_pll)(__u32 pll, __u32 clk);
+}__disp_hdmi_func;
+
+typedef struct
+{
+	__u32   lcd_x;
+	__u32   lcd_y;
+	__u32   lcd_dclk_freq;
+	__u32   lcd_pwm_not_used;
+	__u32   lcd_pwm_ch;
+	__u32   lcd_pwm_freq;
+	__u32   lcd_pwm_pol;
+	__u32   lcd_srgb;
+	__u32   lcd_swap;
+
+	__u32   lcd_if; //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+	__u32   lcd_uf;
+	__u32   lcd_vt;
+	__u32   lcd_ht;
+	__u32   lcd_vbp;
+	__u32   lcd_hbp;
+
+	__u32   lcd_hv_if;
+	__u32   lcd_hv_smode;
+	__u32   lcd_hv_s888_if;
+	__u32   lcd_hv_syuv_if;
+	__u32   lcd_hv_vspw;
+	__u32   lcd_hv_hspw;
+	__u32   lcd_hv_lde_used;
+	__u32   lcd_hv_lde_iovalue;
+
+	__u32   lcd_ttl_stvh;
+	__u32   lcd_ttl_stvdl;
+	__u32   lcd_ttl_stvdp;
+	__u32   lcd_ttl_ckvt;
+	__u32   lcd_ttl_ckvh;
+	__u32   lcd_ttl_ckvd;
+	__u32   lcd_ttl_oevt;
+	__u32   lcd_ttl_oevh;
+	__u32   lcd_ttl_oevd;
+	__u32   lcd_ttl_sthh;
+	__u32   lcd_ttl_sthd;
+	__u32   lcd_ttl_oehh;
+	__u32   lcd_ttl_oehd;
+	__u32   lcd_ttl_revd;
+	__u32   lcd_ttl_datarate;
+	__u32   lcd_ttl_revsel;
+	__u32   lcd_ttl_datainv_en;
+	__u32   lcd_ttl_datainv_sel;
+
+	__u32   lcd_lvds_ch;        // 0: single channel; 1:dual channel
+	__u32   lcd_lvds_mode;      // 0:NS mode; 1:JEIDA mode
+	__u32	lcd_lvds_bitwidth;  // 0:24bit; 1:18bit
+	__u32   lcd_lvds_io_cross;	// 0:normal; 1:pn cross
+
+	__u32   lcd_cpu_if;//0:18bit; 1:16bit mode0; 2:16bit mode1; 3:16bit mode2; 4:16bit mode3; 5:9bit; 6:8bit 256K; 7:8bit 65K
+	__u32   lcd_cpu_da;
+	__u32   lcd_frm;
+
+	__u32   lcd_io_cfg0;
+	__u32   lcd_io_cfg1;
+	__u32   lcd_io_strength;
+
+	__u32   lcd_gamma_correction_en;
+	__u32   lcd_gamma_tbl[256];
+
+	__u32   port_index;
+	__u32   start_delay;//not need to config for user
+	__u32   tcon_index; //not need to config for user
+}__panel_para_t;
+
+typedef struct
+{
+	__u32 base_lcdc0;
+	__u32 base_lcdc1;
+	__u32 base_pioc;
+	__u32 base_ccmu;
+	__u32 base_pwm;
+}__reg_bases_t;
+
+typedef void (*LCD_FUNC) (__u32 sel);
+typedef struct lcd_function
+{
+    LCD_FUNC func;
+    __u32 delay;//ms
+}__lcd_function_t;
+
+typedef struct lcd_flow
+{
+    __lcd_function_t func[5];
+    __u32 func_num;
+}__lcd_flow_t;
+
+typedef struct
+{
+    void (*cfg_panel_info)(__panel_para_t * info);
+    __s32 (*cfg_open_flow)(__u32 sel);
+    __s32 (*cfg_close_flow)(__u32 sel);
+    __s32 (*lcd_user_defined_func)(__u32 sel, __u32 para1, __u32 para2, __u32 para3);
+}__lcd_panel_fun_t;
+
+typedef struct
+{
+    __bool enable;
+    __u32 active_state;
+    __u32 duty_ns;
+    __u32 period_ns;
+}__pwm_info_t;
+
+#endif
+
+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+
+typedef enum
+{
+    FB_MODE_SCREEN0 = 0,
+    FB_MODE_SCREEN1 = 1,
+    FB_MODE_DUAL_SAME_SCREEN_TB = 2,//two screen, top buffer for screen0, bottom buffer for screen1
+    FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS = 3,//two screen, they have same contents;
+}__fb_mode_t;
+
+typedef struct
+{
+	__fb_mode_t                 fb_mode;
+	__disp_layer_work_mode_t    mode;
+	__u32                       buffer_num;
+	__u32                       width;
+	__u32                       height;
+
+	__u32                       output_width;//used when scaler mode
+	__u32                       output_height;//used when scaler mode
+
+	__u32                       primary_screen_id;//used when FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS
+	__u32                       aux_output_width;//used when FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS
+	__u32                       aux_output_height;//used when FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS
+
+//maybe not used anymore
+	__u32                       line_length;//in byte unit
+	__u32                       smem_len;
+	__u32                       ch1_offset;//use when PLANAR or UV_COMBINED mode
+	__u32                       ch2_offset;//use when PLANAR mode
+}__disp_fb_create_para_t;
+
+typedef enum
+{
+    DISP_INIT_MODE_SCREEN0 = 0,//fb0 for screen0
+    DISP_INIT_MODE_SCREEN1 = 1,//fb0 for screen1
+    DISP_INIT_MODE_TWO_DIFF_SCREEN = 2,//fb0 for screen0 and fb1 for screen1
+    DISP_INIT_MODE_TWO_SAME_SCREEN = 3,//fb0(up buffer for screen0, down buffer for screen1)
+    DISP_INIT_MODE_TWO_DIFF_SCREEN_SAME_CONTENTS = 4,//fb0 for two different screen(screen0 layer is normal layer, screen1 layer is scaler layer);
+}__disp_init_mode_t;
+
+
+typedef struct
+{
+    __bool                  b_init;
+    __disp_init_mode_t      disp_mode;//0:single screen0(fb0); 1:single screen1(fb0);  2:dual diff screen(fb0, fb1); 3:dual same screen(fb0 up and down); 4:dual diff screen same contents(fb0)
+
+    //for screen0 and screen1
+    __disp_output_type_t    output_type[2];
+    __disp_tv_mode_t        tv_mode[2];
+    __disp_vga_mode_t       vga_mode[2];
+
+    //for fb0 and fb1
+    __u32                   buffer_num[2];
+    __bool                  scaler_mode[2];
+    __disp_pixel_fmt_t      format[2];
+    __disp_pixel_seq_t      seq[2];
+    __bool                  br_swap[2];
+}__disp_init_t;
+
+
+typedef enum tag_DISP_CMD
+{
+//----disp global----
+    DISP_CMD_RESERVE0 = 0x00,
+    DISP_CMD_RESERVE1 = 0x01,
+    DISP_CMD_SET_BKCOLOR = 0x3f,//fail when the value is 0x02 in linux,why???
+    DISP_CMD_GET_BKCOLOR = 0x03,
+    DISP_CMD_SET_COLORKEY = 0x04,
+    DISP_CMD_GET_COLORKEY = 0x05,
+    DISP_CMD_SET_PALETTE_TBL = 0x06,
+    DISP_CMD_GET_PALETTE_TBL = 0x07,
+    DISP_CMD_SCN_GET_WIDTH = 0x08,
+    DISP_CMD_SCN_GET_HEIGHT = 0x09,
+    DISP_CMD_GET_OUTPUT_TYPE = 0x0a,
+    DISP_CMD_SET_EXIT_MODE = 0x0c,
+    DISP_CMD_SET_GAMMA_TABLE = 0x0d,
+    DISP_CMD_GAMMA_CORRECTION_ON = 0x0e,
+    DISP_CMD_GAMMA_CORRECTION_OFF = 0x0f,
+    DISP_CMD_START_CMD_CACHE =0x10,
+    DISP_CMD_EXECUTE_CMD_AND_STOP_CACHE = 0x11,
+    DISP_CMD_SET_BRIGHT = 0x12,
+    DISP_CMD_SET_CONTRAST = 0x13,
+    DISP_CMD_SET_SATURATION = 0x14,
+    DISP_CMD_GET_BRIGHT = 0x16,
+    DISP_CMD_GET_CONTRAST = 0x17,
+    DISP_CMD_GET_SATURATION = 0x18,
+    DISP_CMD_ENHANCE_ON = 0x1a,
+    DISP_CMD_ENHANCE_OFF = 0x1b,
+    DISP_CMD_GET_ENHANCE_EN = 0x1c,
+    DISP_CMD_CLK_ON = 0x1d,
+    DISP_CMD_CLK_OFF = 0x1e,
+    DISP_CMD_SET_SCREEN_SIZE = 0x1f,//when the screen is not used to display(lcd/tv/vga/hdmi) directly, maybe capture the screen and scaler to dram, or as a layer of another screen
+    DISP_CMD_CAPTURE_SCREEN = 0x20,//caputre screen and scaler to dram
+    DISP_CMD_DE_FLICKER_ON = 0x21,
+    DISP_CMD_DE_FLICKER_OFF = 0x22,
+
+//----layer----
+    DISP_CMD_LAYER_REQUEST = 0x40,
+    DISP_CMD_LAYER_RELEASE = 0x41,
+    DISP_CMD_LAYER_OPEN = 0x42,
+    DISP_CMD_LAYER_CLOSE = 0x43,
+    DISP_CMD_LAYER_SET_FB = 0x44,
+    DISP_CMD_LAYER_GET_FB = 0x45,
+    DISP_CMD_LAYER_SET_SRC_WINDOW = 0x46,
+    DISP_CMD_LAYER_GET_SRC_WINDOW = 0x47,
+    DISP_CMD_LAYER_SET_SCN_WINDOW = 0x48,
+    DISP_CMD_LAYER_GET_SCN_WINDOW = 0x49,
+    DISP_CMD_LAYER_SET_PARA = 0x4a,
+    DISP_CMD_LAYER_GET_PARA = 0x4b,
+    DISP_CMD_LAYER_ALPHA_ON = 0x4c,
+    DISP_CMD_LAYER_ALPHA_OFF = 0x4d,
+    DISP_CMD_LAYER_GET_ALPHA_EN = 0x4e,
+    DISP_CMD_LAYER_SET_ALPHA_VALUE = 0x4f,
+    DISP_CMD_LAYER_GET_ALPHA_VALUE = 0x50,
+    DISP_CMD_LAYER_CK_ON = 0x51,
+    DISP_CMD_LAYER_CK_OFF = 0x52,
+    DISP_CMD_LAYER_GET_CK_EN = 0x53,
+    DISP_CMD_LAYER_SET_PIPE = 0x54,
+    DISP_CMD_LAYER_GET_PIPE = 0x55,
+    DISP_CMD_LAYER_TOP = 0x56,
+    DISP_CMD_LAYER_BOTTOM = 0x57,
+    DISP_CMD_LAYER_GET_PRIO = 0x58,
+    DISP_CMD_LAYER_SET_SMOOTH = 0x59,
+    DISP_CMD_LAYER_GET_SMOOTH = 0x5a,
+    DISP_CMD_LAYER_SET_BRIGHT = 0x5b,//亮度
+    DISP_CMD_LAYER_SET_CONTRAST = 0x5c,//对比度
+    DISP_CMD_LAYER_SET_SATURATION = 0x5d,//饱和度
+    DISP_CMD_LAYER_SET_HUE = 0x5e,//色调,色度
+    DISP_CMD_LAYER_GET_BRIGHT = 0x5f,
+    DISP_CMD_LAYER_GET_CONTRAST = 0x60,
+    DISP_CMD_LAYER_GET_SATURATION = 0x61,
+    DISP_CMD_LAYER_GET_HUE = 0x62,
+    DISP_CMD_LAYER_ENHANCE_ON = 0x63,
+    DISP_CMD_LAYER_ENHANCE_OFF = 0x64,
+    DISP_CMD_LAYER_GET_ENHANCE_EN = 0x65,
+    DISP_CMD_LAYER_VPP_ON = 0x67,
+    DISP_CMD_LAYER_VPP_OFF = 0x68,
+    DISP_CMD_LAYER_GET_VPP_EN = 0x69,
+    DISP_CMD_LAYER_SET_LUMA_SHARP_LEVEL = 0x6a,
+    DISP_CMD_LAYER_GET_LUMA_SHARP_LEVEL = 0x6b,
+    DISP_CMD_LAYER_SET_CHROMA_SHARP_LEVEL = 0x6c,
+    DISP_CMD_LAYER_GET_CHROMA_SHARP_LEVEL = 0x6d,
+    DISP_CMD_LAYER_SET_WHITE_EXTEN_LEVEL = 0x6e,
+    DISP_CMD_LAYER_GET_WHITE_EXTEN_LEVEL = 0x6f,
+    DISP_CMD_LAYER_SET_BLACK_EXTEN_LEVEL = 0x70,
+    DISP_CMD_LAYER_GET_BLACK_EXTEN_LEVEL = 0x71,
+
+//----scaler----
+    DISP_CMD_SCALER_REQUEST = 0x80,
+    DISP_CMD_SCALER_RELEASE = 0x81,
+    DISP_CMD_SCALER_EXECUTE = 0x82,
+
+//----hwc----
+    DISP_CMD_HWC_OPEN = 0xc0,
+    DISP_CMD_HWC_CLOSE = 0xc1,
+    DISP_CMD_HWC_SET_POS = 0xc2,
+    DISP_CMD_HWC_GET_POS = 0xc3,
+    DISP_CMD_HWC_SET_FB = 0xc4,
+    DISP_CMD_HWC_SET_PALETTE_TABLE = 0xc5,
+
+//----video----
+    DISP_CMD_VIDEO_START = 0x100,
+    DISP_CMD_VIDEO_STOP = 0x101,
+    DISP_CMD_VIDEO_SET_FB = 0x102,
+    DISP_CMD_VIDEO_GET_FRAME_ID = 0x103,
+    DISP_CMD_VIDEO_GET_DIT_INFO = 0x104,
+
+//----lcd----
+    DISP_CMD_LCD_ON = 0x140,
+    DISP_CMD_LCD_OFF = 0x141,
+    DISP_CMD_LCD_SET_BRIGHTNESS = 0x142,
+    DISP_CMD_LCD_GET_BRIGHTNESS = 0x143,
+    DISP_CMD_LCD_CPUIF_XY_SWITCH = 0x146,
+    DISP_CMD_LCD_CHECK_OPEN_FINISH = 0x14a,
+    DISP_CMD_LCD_CHECK_CLOSE_FINISH = 0x14b,
+    DISP_CMD_LCD_SET_SRC = 0x14c,
+    DISP_CMD_LCD_USER_DEFINED_FUNC = 0x14d,
+
+//----tv----
+    DISP_CMD_TV_ON = 0x180,
+    DISP_CMD_TV_OFF = 0x181,
+    DISP_CMD_TV_SET_MODE = 0x182,
+    DISP_CMD_TV_GET_MODE = 0x183,
+    DISP_CMD_TV_AUTOCHECK_ON = 0x184,
+    DISP_CMD_TV_AUTOCHECK_OFF = 0x185,
+    DISP_CMD_TV_GET_INTERFACE = 0x186,
+    DISP_CMD_TV_SET_SRC = 0x187,
+    DISP_CMD_TV_GET_DAC_STATUS = 0x188,
+    DISP_CMD_TV_SET_DAC_SOURCE = 0x189,
+    DISP_CMD_TV_GET_DAC_SOURCE = 0x18a,
+
+//----hdmi----
+    DISP_CMD_HDMI_ON = 0x1c0,
+    DISP_CMD_HDMI_OFF = 0x1c1,
+    DISP_CMD_HDMI_SET_MODE = 0x1c2,
+    DISP_CMD_HDMI_GET_MODE = 0x1c3,
+    DISP_CMD_HDMI_SUPPORT_MODE = 0x1c4,
+    DISP_CMD_HDMI_GET_HPD_STATUS = 0x1c5,
+	DISP_CMD_HDMI_SET_SRC = 0x1c6,
+
+//----vga----
+    DISP_CMD_VGA_ON = 0x200,
+    DISP_CMD_VGA_OFF = 0x201,
+    DISP_CMD_VGA_SET_MODE = 0x202,
+    DISP_CMD_VGA_GET_MODE = 0x203,
+	DISP_CMD_VGA_SET_SRC = 0x204,
+
+//----sprite----
+    DISP_CMD_SPRITE_OPEN = 0x240,
+    DISP_CMD_SPRITE_CLOSE = 0x241,
+    DISP_CMD_SPRITE_SET_FORMAT = 0x242,
+    DISP_CMD_SPRITE_GLOBAL_ALPHA_ENABLE = 0x243,
+    DISP_CMD_SPRITE_GLOBAL_ALPHA_DISABLE = 0x244,
+    DISP_CMD_SPRITE_GET_GLOBAL_ALPHA_ENABLE = 0x252,
+    DISP_CMD_SPRITE_SET_GLOBAL_ALPHA_VALUE = 0x245,
+    DISP_CMD_SPRITE_GET_GLOBAL_ALPHA_VALUE = 0x253,
+    DISP_CMD_SPRITE_SET_ORDER = 0x246,
+    DISP_CMD_SPRITE_GET_TOP_BLOCK = 0x250,
+    DISP_CMD_SPRITE_GET_BOTTOM_BLOCK = 0x251,
+    DISP_CMD_SPRITE_SET_PALETTE_TBL = 0x247,
+    DISP_CMD_SPRITE_GET_BLOCK_NUM = 0x259,
+    DISP_CMD_SPRITE_BLOCK_REQUEST = 0x248,
+    DISP_CMD_SPRITE_BLOCK_RELEASE = 0x249,
+    DISP_CMD_SPRITE_BLOCK_OPEN = 0x257,
+    DISP_CMD_SPRITE_BLOCK_CLOSE = 0x258,
+    DISP_CMD_SPRITE_BLOCK_SET_SOURCE_WINDOW = 0x25a,
+    DISP_CMD_SPRITE_BLOCK_GET_SOURCE_WINDOW = 0x25b,
+    DISP_CMD_SPRITE_BLOCK_SET_SCREEN_WINDOW = 0x24a,
+    DISP_CMD_SPRITE_BLOCK_GET_SCREEN_WINDOW = 0x24c,
+    DISP_CMD_SPRITE_BLOCK_SET_FB = 0x24b,
+    DISP_CMD_SPRITE_BLOCK_GET_FB = 0x24d,
+    DISP_CMD_SPRITE_BLOCK_SET_PARA = 0x25c,
+    DISP_CMD_SPRITE_BLOCK_GET_PARA = 0x25d,
+    DISP_CMD_SPRITE_BLOCK_SET_TOP = 0x24e,
+    DISP_CMD_SPRITE_BLOCK_SET_BOTTOM = 0x24f,
+    DISP_CMD_SPRITE_BLOCK_GET_PREV_BLOCK = 0x254,
+    DISP_CMD_SPRITE_BLOCK_GET_NEXT_BLOCK = 0x255,
+    DISP_CMD_SPRITE_BLOCK_GET_PRIO = 0x256,
+
+//----framebuffer----
+	DISP_CMD_FB_REQUEST = 0x280,
+	DISP_CMD_FB_RELEASE = 0x281,
+	DISP_CMD_FB_GET_PARA = 0x282,
+	DISP_CMD_GET_DISP_INIT_PARA = 0x283,
+
+//---for Displayer Test --------
+	DISP_CMD_MEM_REQUEST = 0x2c0,
+	DISP_CMD_MEM_RELASE = 0x2c1,
+	DISP_CMD_MEM_GETADR = 0x2c2,
+	DISP_CMD_MEM_SELIDX = 0x2c3,
+
+	DISP_CMD_SUSPEND = 0x2d0,
+	DISP_CMD_RESUME = 0x2d1,
+
+	DISP_CMD_PRINT_REG = 0x2e0,
+
+//---pwm --------
+    DISP_CMD_PWM_SET_PARA = 0x300,
+    DISP_CMD_PWM_GET_PARA = 0x301,
+}__disp_cmd_t;
+
+#define FBIOGET_LAYER_HDL_0 0x4700
+#define FBIOGET_LAYER_HDL_1 0x4701
+
+#define FBIO_CLOSE 0x4710
+#define FBIO_OPEN 0x4711
+#define FBIO_ALPHA_ON 0x4712
+#define FBIO_ALPHA_OFF 0x4713
+#define FBIOPUT_ALPHA_VALUE 0x4714
+
+#define FBIO_DISPLAY_SCREEN0_ONLY 0x4720
+#define FBIO_DISPLAY_SCREEN1_ONLY 0x4721
+#define FBIO_DISPLAY_TWO_SAME_SCREEN_TB 0x4722
+#define FBIO_DISPLAY_TWO_DIFF_SCREEN_SAME_CONTENTS 0x4723
+
+#endif
diff --git a/include/linux/drv_hdmi.h b/include/linux/drv_hdmi.h
new file mode 100644
index 0000000..fe9a9de
--- /dev/null
+++ b/include/linux/drv_hdmi.h
@@ -0,0 +1,29 @@
+
+#ifndef __DRV_HDMI_H__
+#define __DRV_HDMI_H__
+
+typedef struct
+{
+	__u8    hw_intf;        /* 0:iis  1:spdif 2:pcm */
+	__u16	fs_between;     /* fs */
+	__u32   sample_rate;    /*sample rate*/  
+	__u8    clk_edge;       /* 0:*/
+	__u8    ch0_en;         /* 1 */
+	__u8    ch1_en;         /* 0 */
+	__u8 	ch2_en;         /* 0 */
+	__u8 	ch3_en;         /* 0 */
+	__u8	word_length;    /* 32 */
+	__u8    shift_ctl;      /* 0 */
+	__u8    dir_ctl;        /* 0 */
+	__u8    ws_pol;
+	__u8    just_pol;
+	__u8    channel_num;
+}hdmi_audio_t;
+
+typedef struct
+{
+    __s32 (*hdmi_audio_enable)(__u8 mode, __u8 channel);
+    __s32 (*hdmi_set_audio_para)(hdmi_audio_t * audio_para);
+}__audio_hdmi_func;
+
+#endif
diff --git a/include/linux/g2d_driver.h b/include/linux/g2d_driver.h
new file mode 100644
index 0000000..0474141
--- /dev/null
+++ b/include/linux/g2d_driver.h
@@ -0,0 +1,233 @@
+/* g2d_driver.h
+ *
+ * Copyright (c)	2011 xxxx Electronics
+ *					2011 Yupu Tang
+ *
+ * @ F23 G2D driver
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA02111-1307USA
+ */
+
+#ifndef __G2D_DRIVER_H
+#define __G2D_DRIVER_H
+
+#ifndef __G2D_BSP_DRV_H
+#define __G2D_BSP_DRV_H
+
+/* mixer data format */
+typedef enum {
+	/* share data format */
+	G2D_FMT_ARGB_AYUV8888	= (0x0),
+	G2D_FMT_BGRA_VUYA8888	= (0x1),
+	G2D_FMT_ABGR_AVUY8888	= (0x2),
+	G2D_FMT_RGBA_YUVA8888	= (0x3),
+
+	G2D_FMT_XRGB8888		= (0x4),
+	G2D_FMT_BGRX8888		= (0x5),
+	G2D_FMT_XBGR8888		= (0x6),
+	G2D_FMT_RGBX8888		= (0x7),
+
+	G2D_FMT_ARGB4444		= (0x8),
+	G2D_FMT_ABGR4444		= (0x9),
+	G2D_FMT_RGBA4444		= (0xA),
+	G2D_FMT_BGRA4444		= (0xB),
+
+	G2D_FMT_ARGB1555		= (0xC),
+	G2D_FMT_ABGR1555		= (0xD),
+	G2D_FMT_RGBA5551		= (0xE),
+	G2D_FMT_BGRA5551		= (0xF),
+
+	G2D_FMT_RGB565			= (0x10),
+	G2D_FMT_BGR565			= (0x11),
+
+	G2D_FMT_IYUV422			= (0x12),
+
+	G2D_FMT_8BPP_MONO		= (0x13),
+	G2D_FMT_4BPP_MONO		= (0x14),
+	G2D_FMT_2BPP_MONO		= (0x15),
+	G2D_FMT_1BPP_MONO		= (0x16),
+
+	G2D_FMT_PYUV422UVC		= (0x17),
+	G2D_FMT_PYUV420UVC		= (0x18),
+	G2D_FMT_PYUV411UVC		= (0x19),
+
+	/* just for output format */
+	G2D_FMT_PYUV422			= (0x1A),
+	G2D_FMT_PYUV420			= (0x1B),
+	G2D_FMT_PYUV411			= (0x1C),
+
+	/* just for input format */
+	G2D_FMT_8BPP_PALETTE	= (0x1D),
+	G2D_FMT_4BPP_PALETTE	= (0x1E),
+	G2D_FMT_2BPP_PALETTE	= (0x1F),
+	G2D_FMT_1BPP_PALETTE	= (0x20),
+
+}g2d_data_fmt;
+
+/* pixel sequence in double word */
+typedef enum {
+	G2D_SEQ_NORMAL = 0x0,
+
+	/* for interleaved yuv422 */
+    G2D_SEQ_VYUY   = 0x1,				/* pixel 0在低16位 */
+    G2D_SEQ_YVYU   = 0x2,				/* pixel 1在低16位 */
+
+	/* for uv_combined yuv420 */
+    G2D_SEQ_VUVU   = 0x3,
+
+	/* for 16bpp rgb */
+    G2D_SEQ_P10    = 0x4,				/* pixel 0在低16位 */
+    G2D_SEQ_P01    = 0x5,				/* pixel 1在低16位 */
+
+	/* planar format or 8bpp rgb */
+    G2D_SEQ_P3210  = 0x6,				/* pixel 0在低8位 */
+    G2D_SEQ_P0123  = 0x7,				/* pixel 3在低8位 */
+
+	/* for 4bpp rgb */
+    G2D_SEQ_P76543210  = 0x8,			/* 7,6,5,4,3,2,1,0 */
+    G2D_SEQ_P67452301  = 0x9,			/* 6,7,4,5,2,3,0,1 */
+    G2D_SEQ_P10325476  = 0xA,			/* 1,0,3,2,5,4,7,6 */
+    G2D_SEQ_P01234567  = 0xB,			/* 0,1,2,3,4,5,6,7 */
+
+	/* for 2bpp rgb */
+    G2D_SEQ_2BPP_BIG_BIG       = 0xC,	/* 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 */
+    G2D_SEQ_2BPP_BIG_LITTER    = 0xD,	/* 12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3 */
+    G2D_SEQ_2BPP_LITTER_BIG    = 0xE,	/* 3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12 */
+    G2D_SEQ_2BPP_LITTER_LITTER = 0xF,	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 */
+
+	/* for 1bpp rgb */
+    G2D_SEQ_1BPP_BIG_BIG       = 0x10,	/* 31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 */
+    G2D_SEQ_1BPP_BIG_LITTER    = 0x11,	/* 24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7 */
+    G2D_SEQ_1BPP_LITTER_BIG    = 0x12,	/* 7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,23,22,21,20,19,18,17,16,31,30,29,28,27,26,25,24 */
+    G2D_SEQ_1BPP_LITTER_LITTER = 0x13,	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 */
+}g2d_pixel_seq;
+
+
+typedef enum {
+	G2D_FIL_NONE			= 0x00000000,
+	G2D_FIL_PIXEL_ALPHA		= 0x00000001,
+	G2D_FIL_PLANE_ALPHA		= 0x00000002,
+	G2D_FIL_MULTI_ALPHA		= 0x00000004,
+}g2d_fillrect_flags;
+
+typedef enum {
+
+	G2D_BLT_NONE			= 0x00000000,
+	G2D_BLT_PIXEL_ALPHA		= 0x00000001,
+	G2D_BLT_PLANE_ALPHA		= 0x00000002,
+	G2D_BLT_MULTI_ALPHA		= 0x00000004,
+	G2D_BLT_SRC_COLORKEY	= 0x00000008,
+	G2D_BLT_DST_COLORKEY	= 0x00000010,
+	G2D_BLT_FLIP_HORIZONTAL	= 0x00000020,
+	G2D_BLT_FLIP_VERTICAL	= 0x00000040,
+	G2D_BLT_ROTATE90		= 0x00000080,
+	G2D_BLT_ROTATE180		= 0x00000100,
+	G2D_BLT_ROTATE270		= 0x00000200,
+	G2D_BLT_MIRROR45		= 0x00000400,
+	G2D_BLT_MIRROR135		= 0x00000800,
+}g2d_blt_flags;
+
+/* flip rectangle struct */
+typedef struct {
+	__s32		x;			/* left top point coordinate x */
+	__s32		y;			/* left top point coordinate y */
+	__u32		w;			/* rectangle width */
+	__u32		h;			/* rectangle height */
+}g2d_rect;
+
+/* image struct */
+typedef struct {
+	__u32			 addr[3];		/* base addr of image frame buffer in byte */
+	__u32			 w;			/* width of image frame buffer in pixel */
+	__u32			 h;			/* height of image frame buffer in pixel */
+	g2d_data_fmt	 format;	/* pixel format of image frame buffer */
+	g2d_pixel_seq	 pixel_seq;	/* pixel sequence of image frame buffer */
+}g2d_image;
+
+typedef struct {
+	g2d_fillrect_flags	 flag;
+	g2d_image			 dst_image;
+	g2d_rect			 dst_rect;
+
+	__u32				 color;		/* fill color */
+	__u32				 alpha;		/* plane alpha value */
+
+}g2d_fillrect;
+
+typedef struct {
+	g2d_blt_flags		 flag;
+	g2d_image			 src_image;
+	g2d_rect			 src_rect;
+
+	g2d_image			 dst_image;
+	__s32				 dst_x;		/* left top point coordinate x of dst rect */
+	__s32				 dst_y;		/* left top point coordinate y of dst rect */
+
+	__u32				 color;		/* colorkey color */
+	__u32				 alpha;		/* plane alpha value */
+
+}g2d_blt;
+
+typedef struct {
+	g2d_blt_flags		 flag;
+	g2d_image			 src_image;
+	g2d_rect			 src_rect;
+
+	g2d_image			 dst_image;
+	g2d_rect			 dst_rect;
+
+	__u32				 color;		/* colorkey color */
+	__u32				 alpha;		/* plane alpha value */
+
+}g2d_stretchblt;
+
+typedef struct {
+	__u32		 flag;		/* 光栅操作码 */
+	g2d_image	 dst_image;
+	g2d_rect	 dst_rect;
+
+	g2d_image	 src_image;
+	__u32		 src_x;
+	__u32		 src_y;
+
+	g2d_image	 mask_image;
+	__u32		 mask_x;
+	__u32		 mask_y;
+
+}g2d_maskblt;
+
+typedef struct {
+	__u32		*pbuffer;
+	__u32		 size;
+
+}g2d_palette;
+
+#endif /*__G2D_BSP_DRV_H*/
+
+typedef enum
+{
+	G2D_CMD_BITBLT			=	0x50,
+	G2D_CMD_FILLRECT		=	0x51,
+	G2D_CMD_STRETCHBLT		=	0x52,
+	G2D_CMD_PALETTE_TBL		=	0x53,
+
+	G2D_CMD_MEM_REQUEST		=	0x59,
+	G2D_CMD_MEM_RELEASE		=	0x5A,
+	G2D_CMD_MEM_GETADR		=	0x5B,
+	G2D_CMD_MEM_SELIDX		=	0x5C,
+}g2d_cmd;
+
+#endif	/* __G2D_DRIVER_H */
+
-- 
1.8.0


From 5e1bcc300452437ca31ba541f904164b27336aad Mon Sep 17 00:00:00 2001
From: Jari Helaakoski <tekkuli@gmail.com>
Date: Mon, 19 Nov 2012 21:38:15 +0200
Subject: [PATCH 938/944] video: sunxi: hdmi: remove hdmi_hal.*

---
 drivers/video/sunxi/hdmi/Makefile    |   2 +-
 drivers/video/sunxi/hdmi/drv_hdmi.c  |  92 ++++++++++++++++++----
 drivers/video/sunxi/hdmi/hdmi_core.c |   8 ++
 drivers/video/sunxi/hdmi/hdmi_core.h |  28 ++++++-
 drivers/video/sunxi/hdmi/hdmi_hal.c  | 146 -----------------------------------
 drivers/video/sunxi/hdmi/hdmi_hal.h  |  65 ----------------
 6 files changed, 111 insertions(+), 230 deletions(-)
 delete mode 100644 drivers/video/sunxi/hdmi/hdmi_hal.c
 delete mode 100644 drivers/video/sunxi/hdmi/hdmi_hal.h

diff --git a/drivers/video/sunxi/hdmi/Makefile b/drivers/video/sunxi/hdmi/Makefile
index a2f205f..c2e78dc 100644
--- a/drivers/video/sunxi/hdmi/Makefile
+++ b/drivers/video/sunxi/hdmi/Makefile
@@ -3,5 +3,5 @@ obj-$(CONFIG_FB_SUNXI_HDMI) += hdmi.o
 #hdmi-objs := anx7150/hdmi_core.o anx7150/hdmi_hal.o anx7150/hdmi_i2c.o\
 #            dev_hdmi.o drv_hdmi.o
 
-hdmi-objs := hdmi_core.o hdmi_hal.o hdmi_edid.o dev_hdmi.o drv_hdmi.o
+hdmi-objs := hdmi_core.o hdmi_edid.o dev_hdmi.o drv_hdmi.o
 
diff --git a/drivers/video/sunxi/hdmi/drv_hdmi.c b/drivers/video/sunxi/hdmi/drv_hdmi.c
index b623ab4..6c88c074 100644
--- a/drivers/video/sunxi/hdmi/drv_hdmi.c
+++ b/drivers/video/sunxi/hdmi/drv_hdmi.c
@@ -21,10 +21,11 @@
  * Semaphore stuff seems quite broken in here. --libv
  */
 #include "drv_hdmi_i.h"
-#include "hdmi_hal.h"
+#include "hdmi_core.h"
 #include "dev_hdmi.h"
 #include "../disp/dev_disp.h"
 
+
 /*
  * Bad separation!
  * symbol from sound/soc/sun[45]i/hdmiaudio/sndhdmi.c
@@ -34,20 +35,25 @@ extern void audio_set_hdmi_func(__audio_hdmi_func *hdmi_func);
 
 static struct semaphore *run_sem;
 static struct task_struct *HDMI_task;
+void __iomem *HDMI_BASE;
+
 
-void hdmi_delay_ms(__u32 t)
+static __s32 Hdmi_enable(__bool enable)
 {
-	__u32 timeout = t * HZ / 1000;
+	if ((video_enable != enable) &&
+	    (hdmi_state >= HDMI_State_Video_config))
+		hdmi_state = HDMI_State_Video_config;
 
-	set_current_state(TASK_INTERRUPTIBLE);
-	schedule_timeout(timeout);
+	video_enable = enable;
+
+	return 0;
 }
 
 __s32 Hdmi_open(void)
 {
 	__inf("[Hdmi_open]\n");
 
-	Hdmi_hal_video_enable(1);
+	Hdmi_enable(1);
 
 #if 0
 	if (ghdmi.bopen == 0)
@@ -63,7 +69,7 @@ __s32 Hdmi_close(void)
 {
 	__inf("[Hdmi_close]\n");
 
-	Hdmi_hal_video_enable(0);
+	Hdmi_enable(0);
 	ghdmi.bopen = 0;
 
 	return 0;
@@ -139,21 +145,54 @@ __s32 Hdmi_set_display_mode(__disp_tv_mode_t mode)
 	}
 
 	ghdmi.mode = mode;
-	return Hdmi_hal_set_display_mode(hdmi_mode);
+	if (hdmi_mode != video_mode) {
+		if (hdmi_state >= HDMI_State_Video_config)
+			hdmi_state = HDMI_State_Video_config;
+
+		video_mode = hdmi_mode;
+	}
+	return 0;
 }
 
 __s32 Hdmi_Audio_Enable(__u8 mode, __u8 channel)
 {
 	__inf("[Hdmi_Audio_Enable],ch:%d\n", channel);
 
-	return Hdmi_hal_audio_enable(mode, channel);
+	/* ???????????????????????? */
+	if (hdmi_state >= HDMI_State_Audio_config)
+		hdmi_state = HDMI_State_Audio_config;
+
+	audio_info.audio_en = (channel == 0) ? 0 : 1;
+
+	return 0;
 }
 
 __s32 Hdmi_Set_Audio_Para(hdmi_audio_t *audio_para)
 {
 	__inf("[Hdmi_Set_Audio_Para]\n");
 
-	return Hdmi_hal_set_audio_para(audio_para);
+	if (!audio_para)
+		return -1;
+
+	if (audio_para->sample_rate != audio_info.sample_rate) {
+		if (hdmi_state >= HDMI_State_Audio_config)
+			hdmi_state = HDMI_State_Audio_config;
+		audio_info.sample_rate = audio_para->sample_rate;
+		/* audio_info.channel_num  = 2; */
+
+		__inf("sample_rate:%d in Hdmi_hal_set_audio_para\n",
+		      audio_info.sample_rate);
+	}
+	if (audio_para->channel_num != audio_info.channel_num) {
+		if (hdmi_state >= HDMI_State_Audio_config)
+			hdmi_state = HDMI_State_Audio_config;
+		audio_info.channel_num = audio_para->channel_num;
+
+		__inf("channel_num:%d in Hdmi_hal_set_audio_para\n",
+		      audio_info.channel_num);
+	}
+
+	return 0;
 }
 
 __s32 Hdmi_mode_support(__disp_tv_mode_t mode)
@@ -222,18 +261,25 @@ __s32 Hdmi_mode_support(__disp_tv_mode_t mode)
 		break;
 	}
 
-	return Hdmi_hal_mode_support(hdmi_mode);
+	if (Hpd_Check() == 0)
+		return 0;
+
+	while (hdmi_state < HDMI_State_Wait_Video_config)
+		hdmi_delay_ms(1);
+
+	return Device_Support_VIC[mode];
 }
 
 __s32 Hdmi_get_HPD_status(void)
 {
-	return Hdmi_hal_get_HPD();
+	return Hpd_Check();
 }
 
 static __s32
 Hdmi_set_pll(__u32 pll, __u32 clk)
 {
-	Hdmi_hal_set_pll(pll, clk);
+	hdmi_pll = pll;
+	hdmi_clk = clk;
 	return 0;
 }
 
@@ -241,7 +287,7 @@ static int
 Hdmi_run_thread(void *parg)
 {
 	while (1) {
-		Hdmi_hal_main_task();
+		hdmi_main_task_loop();
 
 		if (kthread_should_stop())
 			break;
@@ -271,8 +317,21 @@ __s32 Hdmi_init(void)
 	}
 	wake_up_process(HDMI_task);
 
-	Hdmi_set_reg_base((void __iomem *) ghdmi.base_hdmi);
-	Hdmi_hal_init();
+	HDMI_BASE = (void __iomem *) ghdmi.base_hdmi;
+	hdmi_core_initial();
+	audio_info.channel_num = 2;
+#if 0
+	{ /* for audio test */
+		hdmi_audio_t audio_para;
+
+		audio_para.ch0_en = 1;
+		audio_para.sample_rate = 44100;
+		Hdmi_hal_set_audio_para(&audio_para);
+
+		Hdmi_hal_audio_enable(0, 1);
+	}
+#endif
+
 
 	audio_func.hdmi_audio_enable = Hdmi_Audio_Enable;
 	audio_func.hdmi_set_audio_para = Hdmi_Set_Audio_Para;
@@ -291,7 +350,6 @@ __s32 Hdmi_init(void)
 
 __s32 Hdmi_exit(void)
 {
-	Hdmi_hal_exit();
 
 	kfree(run_sem);
 	run_sem = NULL;
diff --git a/drivers/video/sunxi/hdmi/hdmi_core.c b/drivers/video/sunxi/hdmi/hdmi_core.c
index 7de2400..95051ec 100644
--- a/drivers/video/sunxi/hdmi/hdmi_core.c
+++ b/drivers/video/sunxi/hdmi/hdmi_core.c
@@ -48,6 +48,14 @@ static HDMI_VIDE_INFO video_timing[] = {
 	{HDMI720P_60_3D_FP,  148500000,  0,  1280, 1440, 1650, 260, 110, 40, 3000, 25,  5,  5},
 };
 
+void hdmi_delay_ms(__u32 t)
+{
+	__u32 timeout = t * HZ / 1000;
+
+	set_current_state(TASK_INTERRUPTIBLE);
+	schedule_timeout(timeout);
+}
+
 __s32 hdmi_core_initial(void)
 {
 	hdmi_state = HDMI_State_Idle;
diff --git a/drivers/video/sunxi/hdmi/hdmi_core.h b/drivers/video/sunxi/hdmi/hdmi_core.h
index cf23ff7..c56a997 100644
--- a/drivers/video/sunxi/hdmi/hdmi_core.h
+++ b/drivers/video/sunxi/hdmi/hdmi_core.h
@@ -20,10 +20,35 @@
 #ifndef __HDMI_CORE_H__
 #define __HDMI_CORE_H__
 
-#include "hdmi_hal.h"
+#include "drv_hdmi_i.h"
 
 extern void __iomem *HDMI_BASE;
 
+#define HDMI_State_Idle			0x00
+#define HDMI_State_Wait_Hpd		0x02
+#define HDMI_State_Rx_Sense		0x03
+#define HDMI_State_EDID_Parse		0x04
+#define HDMI_State_Wait_Video_config	0x05
+#define HDMI_State_Video_config		0x06
+#define HDMI_State_Audio_config		0x07
+#define HDMI_State_Playback		0x09
+
+#define HDMI1440_480I		6
+#define HDMI1440_576I		21
+#define HDMI480P		2
+#define HDMI576P		17
+#define HDMI720P_50		19
+#define HDMI720P_60		4
+#define HDMI1080I_50		20
+#define HDMI1080I_60		5
+#define HDMI1080P_50		31
+#define HDMI1080P_60		16
+#define HDMI1080P_24		32
+#define HDMI1080P_25		33
+#define HDMI1080P_24_3D_FP	(HDMI1080P_24 + 0x80)
+#define HDMI720P_50_3D_FP	(HDMI720P_50  + 0x80)
+#define HDMI720P_60_3D_FP	(HDMI720P_60  + 0x80)
+
 #define HDMI_WUINT32(offset, value)	writel(value, HDMI_BASE + offset)
 #define HDMI_RUINT32(offset)		readl(HDMI_BASE + offset)
 #define HDMI_WUINT16(offset, value)	writew(value, HDMI_BASE + offset)
@@ -70,6 +95,7 @@ typedef struct audio_timing {
 
 } HDMI_AUDIO_INFO;
 
+void hdmi_delay_ms(__u32 t);
 __s32 hdmi_core_initial(void);
 __s32 hdmi_core_open(void);
 __s32 hdmi_core_close(void);
diff --git a/drivers/video/sunxi/hdmi/hdmi_hal.c b/drivers/video/sunxi/hdmi/hdmi_hal.c
deleted file mode 100644
index cb78d27..0000000
--- a/drivers/video/sunxi/hdmi/hdmi_hal.c
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (C) 2007-2012 Allwinner Technology Co., Ltd.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 USA
- */
-
-#include "hdmi_hal.h"
-#include "hdmi_core.h"
-
-void __iomem *HDMI_BASE;
-
-void Hdmi_set_reg_base(void __iomem *base)
-{
-	HDMI_BASE = base;
-}
-
-__s32 Hdmi_hal_video_enable(__bool enable)
-{
-	if ((video_enable != enable) &&
-	    (hdmi_state >= HDMI_State_Video_config))
-		hdmi_state = HDMI_State_Video_config;
-
-	video_enable = enable;
-
-	return 0;
-}
-
-__s32 Hdmi_hal_set_display_mode(__u32 hdmi_mode)
-{
-	if (hdmi_mode != video_mode) {
-		if (hdmi_state >= HDMI_State_Video_config)
-			hdmi_state = HDMI_State_Video_config;
-
-		video_mode = hdmi_mode;
-	}
-	return 0;
-}
-
-__s32 Hdmi_hal_audio_enable(__u8 mode, __u8 channel)
-{
-	/* ???????????????????????? */
-	if (hdmi_state >= HDMI_State_Audio_config)
-		hdmi_state = HDMI_State_Audio_config;
-
-	audio_info.audio_en = (channel == 0) ? 0 : 1;
-
-	return 0;
-}
-
-__s32 Hdmi_hal_set_audio_para(hdmi_audio_t *audio_para)
-{
-	if (!audio_para)
-		return -1;
-
-	if (audio_para->sample_rate != audio_info.sample_rate) {
-		if (hdmi_state >= HDMI_State_Audio_config)
-			hdmi_state = HDMI_State_Audio_config;
-		audio_info.sample_rate = audio_para->sample_rate;
-		//audio_info.channel_num  = 2;
-
-		__inf("sample_rate:%d in Hdmi_hal_set_audio_para\n",
-		      audio_info.sample_rate);
-	}
-	if (audio_para->channel_num != audio_info.channel_num) {
-		if (hdmi_state >= HDMI_State_Audio_config)
-			hdmi_state = HDMI_State_Audio_config;
-		audio_info.channel_num = audio_para->channel_num;
-
-		__inf("channel_num:%d in Hdmi_hal_set_audio_para\n",
-		      audio_info.channel_num);
-	}
-
-	return 0;
-}
-
-__s32 Hdmi_hal_mode_support(__u32 mode)
-{
-	if (Hpd_Check() == 0)
-		return 0;
-
-	while (hdmi_state < HDMI_State_Wait_Video_config)
-		hdmi_delay_ms(1);
-
-	return Device_Support_VIC[mode];
-}
-
-__s32 Hdmi_hal_get_HPD(void)
-{
-	return Hpd_Check();
-}
-
-__s32 Hdmi_hal_get_state(void)
-{
-	return hdmi_state;
-}
-
-__s32 Hdmi_hal_set_pll(__u32 pll, __u32 clk)
-{
-	hdmi_pll = pll;
-	hdmi_clk = clk;
-	return 0;
-}
-
-__s32 Hdmi_hal_main_task(void)
-{
-	hdmi_main_task_loop();
-	return 0;
-}
-
-__s32 Hdmi_hal_init(void)
-{
-	hdmi_core_initial();
-	audio_info.channel_num = 2;
-#if 0
-	{ /* for audio test */
-		hdmi_audio_t audio_para;
-
-		audio_para.ch0_en = 1;
-		audio_para.sample_rate = 44100;
-		Hdmi_hal_set_audio_para(&audio_para);
-
-		Hdmi_hal_audio_enable(0, 1);
-	}
-#endif
-
-	return 0;
-}
-
-__s32 Hdmi_hal_exit(void)
-{
-	return 0;
-}
-
diff --git a/drivers/video/sunxi/hdmi/hdmi_hal.h b/drivers/video/sunxi/hdmi/hdmi_hal.h
deleted file mode 100644
index 043df45..0000000
--- a/drivers/video/sunxi/hdmi/hdmi_hal.h
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (C) 2007-2012 Allwinner Technology Co., Ltd.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 USA
- */
-
-#ifndef __HDMI_HAL_H__
-#define __HDMI_HAL_H__
-
-#include "drv_hdmi_i.h"
-
-#define HDMI_State_Idle			0x00
-#define HDMI_State_Wait_Hpd		0x02
-#define HDMI_State_Rx_Sense		0x03
-#define HDMI_State_EDID_Parse		0x04
-#define HDMI_State_Wait_Video_config	0x05
-#define HDMI_State_Video_config		0x06
-#define HDMI_State_Audio_config		0x07
-#define HDMI_State_Playback		0x09
-
-#define HDMI1440_480I		6
-#define HDMI1440_576I		21
-#define HDMI480P		2
-#define HDMI576P		17
-#define HDMI720P_50		19
-#define HDMI720P_60		4
-#define HDMI1080I_50		20
-#define HDMI1080I_60		5
-#define HDMI1080P_50		31
-#define HDMI1080P_60		16
-#define HDMI1080P_24		32
-#define HDMI1080P_25		33
-#define HDMI1080P_24_3D_FP	(HDMI1080P_24 + 0x80)
-#define HDMI720P_50_3D_FP	(HDMI720P_50  + 0x80)
-#define HDMI720P_60_3D_FP	(HDMI720P_60  + 0x80)
-
-extern void hdmi_delay_ms(__u32 t);
-
-extern void Hdmi_set_reg_base(void __iomem *base);
-extern __s32 Hdmi_hal_init(void);
-extern __s32 Hdmi_hal_exit(void);
-extern __s32 Hdmi_hal_video_enable(__bool enable);
-extern __s32 Hdmi_hal_set_display_mode(__u32 hdmi_mode);
-extern __s32 Hdmi_hal_audio_enable(__u8 mode, __u8 channel);
-extern __s32 Hdmi_hal_set_audio_para(hdmi_audio_t *audio_para);
-extern __s32 Hdmi_hal_mode_support(__u32 mode);
-extern __s32 Hdmi_hal_get_HPD(void);
-extern __s32 Hdmi_hal_get_state(void);
-extern __s32 Hdmi_hal_main_task(void);
-extern __s32 Hdmi_hal_set_pll(__u32 pll, __u32 clk);
-
-#endif
-- 
1.8.0


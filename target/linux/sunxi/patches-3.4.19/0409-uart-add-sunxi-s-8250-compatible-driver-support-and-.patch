From 5120e6791c23e2f86f04a4458b144459e9e5aad8 Mon Sep 17 00:00:00 2001
From: yemao <leafy.myeh@allwinnertech.com>
Date: Thu, 1 Dec 2011 17:07:00 +0800
Subject: [PATCH 409/944] uart: add sunxi's 8250 compatible driver support and
 fix some serial issues     1 add sunxi's 8250
 compatible driver, just for uart1~7, uart0 uses
 boot config     2 change serial port type to
 DWAPB32 for busy status handling     3 disable CTS
 status detect when AutoFlowControl(AFE) enabled

---
 arch/arm/configs/sun4i_crane_defconfig |  18 +-
 arch/arm/configs/sun4i_defconfig       |  11 +-
 arch/arm/kernel/early_printk.c         |   2 -
 drivers/tty/serial/8250/8250.c         | 132 ++++++++++++--
 drivers/tty/serial/8250/8250.h         |   2 +
 drivers/tty/serial/8250/8250_sunxi.c   | 318 +++++++++++++++++++++++++++++++++
 drivers/tty/serial/8250/Kconfig        |   5 +
 drivers/tty/serial/8250/Makefile       |   1 +
 8 files changed, 456 insertions(+), 33 deletions(-)
 create mode 100644 drivers/tty/serial/8250/8250_sunxi.c

diff --git a/arch/arm/configs/sun4i_crane_defconfig b/arch/arm/configs/sun4i_crane_defconfig
index 6b588e9..bcbf2f0 100644
--- a/arch/arm/configs/sun4i_crane_defconfig
+++ b/arch/arm/configs/sun4i_crane_defconfig
@@ -701,8 +701,11 @@ CONFIG_WIRELESS_EXT_SYSFS=y
 # CONFIG_CFG80211_ALLOW_RECONNECT is not set
 # CONFIG_MAC80211 is not set
 # CONFIG_WIMAX is not set
-# CONFIG_RFKILL is not set
+CONFIG_RFKILL=y
+CONFIG_RFKILL_PM=y
+CONFIG_RFKILL_INPUT=y
 # CONFIG_RFKILL_REGULATOR is not set
+CONFIG_SUNXI_RFKILL=y
 # CONFIG_NET_9P is not set
 # CONFIG_CAIF is not set
 # CONFIG_CEPH_LIB is not set
@@ -764,6 +767,7 @@ CONFIG_ANDROID_PMEM=y
 # CONFIG_DS1682 is not set
 # CONFIG_UID_STAT is not set
 # CONFIG_BMP085 is not set
+# CONFIG_WL127X_RFKILL is not set
 # CONFIG_APANIC is not set
 # CONFIG_C2PORT is not set
 
@@ -903,6 +907,7 @@ CONFIG_RTL8192CU_SW=m
 # CONFIG_USB_PEGASUS is not set
 # CONFIG_USB_RTL8150 is not set
 # CONFIG_USB_USBNET is not set
+# CONFIG_USB_HSO is not set
 # CONFIG_USB_IPHETH is not set
 # CONFIG_WAN is not set
 
@@ -1037,13 +1042,10 @@ CONFIG_DEVMEM=y
 #
 CONFIG_SERIAL_8250=y
 CONFIG_SERIAL_8250_CONSOLE=y
-CONFIG_SERIAL_8250_NR_UARTS=1
-CONFIG_SERIAL_8250_RUNTIME_UARTS=1
-CONFIG_SERIAL_8250_EXTENDED=y
-CONFIG_SERIAL_8250_MANY_PORTS=y
-# CONFIG_SERIAL_8250_SHARE_IRQ is not set
-CONFIG_SERIAL_8250_DETECT_IRQ=y
-CONFIG_SERIAL_8250_RSA=y
+CONFIG_SERIAL_8250_SUNXI=y
+CONFIG_SERIAL_8250_NR_UARTS=8
+CONFIG_SERIAL_8250_RUNTIME_UARTS=8
+# CONFIG_SERIAL_8250_EXTENDED is not set
 
 #
 # Non-8250 serial port support
diff --git a/arch/arm/configs/sun4i_defconfig b/arch/arm/configs/sun4i_defconfig
index 3b9ab60..b1896fd 100644
--- a/arch/arm/configs/sun4i_defconfig
+++ b/arch/arm/configs/sun4i_defconfig
@@ -804,13 +804,10 @@ CONFIG_DEVMEM=y
 #
 CONFIG_SERIAL_8250=y
 CONFIG_SERIAL_8250_CONSOLE=y
-CONFIG_SERIAL_8250_NR_UARTS=1
-CONFIG_SERIAL_8250_RUNTIME_UARTS=1
-CONFIG_SERIAL_8250_EXTENDED=y
-CONFIG_SERIAL_8250_MANY_PORTS=y
-# CONFIG_SERIAL_8250_SHARE_IRQ is not set
-CONFIG_SERIAL_8250_DETECT_IRQ=y
-CONFIG_SERIAL_8250_RSA=y
+CONFIG_SERIAL_8250_SUNXI=y
+CONFIG_SERIAL_8250_NR_UARTS=8
+CONFIG_SERIAL_8250_RUNTIME_UARTS=8
+# CONFIG_SERIAL_8250_EXTENDED is not set
 
 #
 # Non-8250 serial port support
diff --git a/arch/arm/kernel/early_printk.c b/arch/arm/kernel/early_printk.c
index 4e2676f..14a7754 100644
--- a/arch/arm/kernel/early_printk.c
+++ b/arch/arm/kernel/early_printk.c
@@ -28,8 +28,6 @@ void sw_put_string(char *buf, int n)
 	for (i=0; i<len; i++) {
 		sw_put_char(buf[i]);
 	}
-	sw_put_char('\r');
-	sw_put_char('\n');
 }
 
 
diff --git a/drivers/tty/serial/8250/8250.c b/drivers/tty/serial/8250/8250.c
index d537431..71af194 100644
--- a/drivers/tty/serial/8250/8250.c
+++ b/drivers/tty/serial/8250/8250.c
@@ -80,6 +80,15 @@ static unsigned int skip_txen_test; /* force skip of txen test at init time */
 #define DEBUG_INTR(fmt...)	do { } while (0)
 #endif
 
+#if 0
+#define DEBUG_SERIAL_X      1
+#define DEBUG_SERIAL(up, fmt...)    do {if ((up)->line == DEBUG_SERIAL_X) printk("[8250]: "fmt);} while (0)
+#define DEBUG_SERIAL_DUMP(up, fmt...)    do {if ((up)->line == DEBUG_SERIAL_X) early_printk(fmt);} while (0)
+#else
+#define DEBUG_SERIAL(fmt...)    do {} while (0)
+#define DEBUG_SERIAL_DUMP(fmt...)    do {} while (0)
+#endif
+
 #define PASS_LIMIT	512
 
 #define BOTH_EMPTY 	(UART_LSR_TEMT | UART_LSR_THRE)
@@ -263,8 +272,9 @@ static const struct serial8250_config uart_config[] = {
 	[PORT_U6_16550A] = {
 		.name		= "U6_16550A",
 		.fifo_size	= 64,
-		.tx_loadsz	= 64,
-		.fcr		= UART_FCR_ENABLE_FIFO | UART_FCR_R_TRIG_10,
+		.tx_loadsz	= 32,
+		.fcr		= UART_FCR_ENABLE_FIFO | UART_FCR_R_TRIG_10
+		              | UART_FCR_T_TRIG_10,
 		.flags		= UART_CAP_FIFO | UART_CAP_AFE,
 	},
 	[PORT_TEGRA] = {
@@ -434,6 +444,7 @@ static void set_io_from_upio(struct uart_port *p)
 {
 	struct uart_8250_port *up =
 		container_of(p, struct uart_8250_port, port);
+	DEBUG_SERIAL(p, "set io from upio, p->iotype = %d\n", p->iotype);
 	switch (p->iotype) {
 	case UPIO_HUB6:
 		p->serial_in = hub6_serial_in;
@@ -576,6 +587,7 @@ static void serial8250_clear_fifos(struct uart_8250_port *p)
 static void serial8250_set_sleep(struct uart_8250_port *p, int sleep)
 {
 	if (p->capabilities & UART_CAP_SLEEP) {
+		DEBUG_SERIAL(&p->port, "serial support sleep, now set sleep...\n");
 		if (p->capabilities & UART_CAP_EFR) {
 			serial_out(p, UART_LCR, UART_LCR_CONF_MODE_B);
 			serial_out(p, UART_EFR, UART_EFR_ECB);
@@ -692,6 +704,7 @@ static int size_fifo(struct uart_8250_port *up)
 	serial_dl_write(up, old_dl);
 	serial_out(up, UART_LCR, old_lcr);
 
+	DEBUG_SERIAL(&up->port, "caculate fifo size: %d\n", count);
 	return count;
 }
 
@@ -720,6 +733,7 @@ static unsigned int autoconfig_read_divisor_id(struct uart_8250_port *p)
 	serial_out(p, UART_DLM, old_dlm);
 	serial_out(p, UART_LCR, old_lcr);
 
+	DEBUG_SERIAL(&p->port, "get divisor id : 0x%x\n", id);
 	return id;
 }
 
@@ -834,8 +848,10 @@ static void autoconfig_8250(struct uart_8250_port *up)
 	status2 = serial_in(up, UART_SCR);
 	serial_out(up, UART_SCR, scratch);
 
-	if (status1 == 0xa5 && status2 == 0x5a)
+	if (status1 == 0xa5 && status2 == 0x5a) {
+		DEBUG_SERIAL(&up->port, "detect chip with type 'PORT_16450'\n");
 		up->port.type = PORT_16450;
+	}
 }
 
 static int broken_efr(struct uart_8250_port *up)
@@ -879,6 +895,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	unsigned char status1, status2;
 	unsigned int iersave;
 
+	DEBUG_SERIAL(&up->port, "autoconfig 16550a\n");
 	up->port.type = PORT_16550A;
 	up->capabilities |= UART_CAP_FIFO;
 
@@ -891,10 +908,12 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 		serial_out(up, UART_EFR, 0xA8);
 		if (serial_in(up, UART_EFR) != 0) {
 			DEBUG_AUTOCONF("EFRv1 ");
+			DEBUG_SERIAL(&up->port, "EFRv1\n");
 			up->port.type = PORT_16650;
 			up->capabilities |= UART_CAP_EFR | UART_CAP_SLEEP;
 		} else {
 			DEBUG_AUTOCONF("Motorola 8xxx DUART ");
+			DEBUG_SERIAL(&up->port, "Motorola 8xxx DUART\n");
 		}
 		serial_out(up, UART_EFR, 0);
 		return;
@@ -907,6 +926,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	serial_out(up, UART_LCR, UART_LCR_CONF_MODE_B);
 	if (serial_in(up, UART_EFR) == 0 && !broken_efr(up)) {
 		DEBUG_AUTOCONF("EFRv2 ");
+		DEBUG_SERIAL(&up->port, "EFRv2\n");
 		autoconfig_has_efr(up);
 		return;
 	}
@@ -970,6 +990,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	DEBUG_AUTOCONF("iir1=%d iir2=%d ", status1, status2);
 
 	if (status1 == 6 && status2 == 7) {
+		DEBUG_SERIAL(&up->port, "detect a chip with type 'PORT_16750'\n");
 		up->port.type = PORT_16750;
 		up->capabilities |= UART_CAP_AFE | UART_CAP_SLEEP;
 		return;
@@ -997,6 +1018,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 			 * We'll leave the UART_IER_UUE bit set to 1 (enabled).
 			 */
 			DEBUG_AUTOCONF("Xscale ");
+			DEBUG_SERIAL(&up->port, "Xscale\n");
 			up->port.type = PORT_XSCALE;
 			up->capabilities |= UART_CAP_UUE | UART_CAP_RTOIE;
 			return;
@@ -1007,6 +1029,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 		 * Log it and continue.
 		 */
 		DEBUG_AUTOCONF("Couldn't force IER_UUE to 0 ");
+		DEBUG_SERIAL(&up->port, "Couldn't force IER_UUE to 0\n");
 	}
 	serial_out(up, UART_IER, iersave);
 
@@ -1025,6 +1048,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	if (up->port.type == PORT_16550A && size_fifo(up) == 64) {
 		up->port.type = PORT_U6_16550A;
 		up->capabilities |= UART_CAP_AFE;
+		DEBUG_SERIAL(&up->port, "PORT_16550A -> PORT_U6_16550A\n");
 	}
 }
 
@@ -1093,6 +1117,8 @@ static void autoconfig(struct uart_8250_port *up, unsigned int probeflags)
 			 */
 			DEBUG_AUTOCONF("IER test failed (%02x, %02x) ",
 				       scratch2, scratch3);
+			DEBUG_SERIAL(&up->port, "IER test failed (%02x, %02x)\n",
+				       scratch2, scratch3);
 			goto out;
 		}
 	}
@@ -1116,6 +1142,8 @@ static void autoconfig(struct uart_8250_port *up, unsigned int probeflags)
 		if (status1 != 0x90) {
 			DEBUG_AUTOCONF("LOOP test failed (%02x) ",
 				       status1);
+			DEBUG_SERIAL(&up->port, "LOOP test failed (%02x)\n",
+				       status1);
 			goto out;
 		}
 	}
@@ -1137,6 +1165,7 @@ static void autoconfig(struct uart_8250_port *up, unsigned int probeflags)
 	scratch = serial_in(up, UART_IIR) >> 6;
 
 	DEBUG_AUTOCONF("iir=%d ", scratch);
+	DEBUG_SERIAL(&up->port, "iir=%d \n", scratch);
 
 	switch (scratch) {
 	case 0:
@@ -1257,6 +1286,7 @@ static void autoconfig_irq(struct uart_8250_port *up)
 
 static inline void __stop_tx(struct uart_8250_port *p)
 {
+	DEBUG_SERIAL(&p->port, "__stop_tx\n");
 	if (p->ier & UART_IER_THRI) {
 		p->ier &= ~UART_IER_THRI;
 		serial_out(p, UART_IER, p->ier);
@@ -1268,6 +1298,7 @@ static void serial8250_stop_tx(struct uart_port *port)
 	struct uart_8250_port *up =
 		container_of(port, struct uart_8250_port, port);
 
+	DEBUG_SERIAL(&up->port, "serial8250_stop_tx\n");
 	__stop_tx(up);
 
 	/*
@@ -1284,6 +1315,7 @@ static void serial8250_start_tx(struct uart_port *port)
 	struct uart_8250_port *up =
 		container_of(port, struct uart_8250_port, port);
 
+	DEBUG_SERIAL(&up->port, "serial8250_start_tx\n");
 	if (!(up->ier & UART_IER_THRI)) {
 		up->ier |= UART_IER_THRI;
 		serial_port_out(port, UART_IER, up->ier);
@@ -1313,6 +1345,7 @@ static void serial8250_stop_rx(struct uart_port *port)
 	struct uart_8250_port *up =
 		container_of(port, struct uart_8250_port, port);
 
+	DEBUG_SERIAL(&up->port, "serial8250_stop_rx\n");
 	up->ier &= ~UART_IER_RLSI;
 	up->port.read_status_mask &= ~UART_LSR_DR;
 	serial_port_out(port, UART_IER, up->ier);
@@ -1323,6 +1356,7 @@ static void serial8250_enable_ms(struct uart_port *port)
 	struct uart_8250_port *up =
 		container_of(port, struct uart_8250_port, port);
 
+	DEBUG_SERIAL(&up->port, "serial8250_enable_ms\n");
 	/* no MSR capabilities */
 	if (up->bugs & UART_BUG_NOMSR)
 		return;
@@ -1366,6 +1400,7 @@ serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr)
 	int max_count = 256;
 	char flag;
 
+	DEBUG_SERIAL_DUMP(&up->port, "rx[] = \n");
 	do {
 		if (likely(lsr & UART_LSR_DR))
 			ch = serial_in(up, UART_RX);
@@ -1465,12 +1500,14 @@ void serial8250_tx_chars(struct uart_8250_port *up)
 
 	count = up->tx_loadsz;
 	do {
+		DEBUG_SERIAL_DUMP(&up->port, "%02x-", xmit->buf[xmit->tail]);
 		serial_out(up, UART_TX, xmit->buf[xmit->tail]);
 		xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
 		port->icount.tx++;
 		if (uart_circ_empty(xmit))
 			break;
 	} while (--count > 0);
+	DEBUG_SERIAL_DUMP(&up->port, "\n");
 
 	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS)
 		uart_write_wakeup(port);
@@ -1486,7 +1523,9 @@ unsigned int serial8250_modem_status(struct uart_8250_port *up)
 {
 	struct uart_port *port = &up->port;
 	unsigned int status = serial_in(up, UART_MSR);
+	unsigned int mcr = serial_in(up, UART_MCR);
 
+	DEBUG_SERIAL(&up->port, "check_modem_status, msr %02x\n", status);
 	status |= up->msr_saved_flags;
 	up->msr_saved_flags = 0;
 	if (status & UART_MSR_ANY_DELTA && up->ier & UART_IER_MSI &&
@@ -1497,9 +1536,15 @@ unsigned int serial8250_modem_status(struct uart_8250_port *up)
 			port->icount.dsr++;
 		if (status & UART_MSR_DDCD)
 			uart_handle_dcd_change(port, status & UART_MSR_DCD);
-		if (status & UART_MSR_DCTS)
+		/*
+		 * modified by yemao, 2011-12-1 13:28:32
+		 * Do not check the changement of CTS signal if Auto Flow Control is enabled
+		 * so you  must check this enable bit in MCR register
+		 */
+		if (!(mcr & UART_MCR_AFE) && (status & UART_MSR_DCTS)) {
+			DEBUG_SERIAL(port, "CTS change, cts: %d\n", status & UART_MSR_CTS);
 			uart_handle_cts_change(port, status & UART_MSR_CTS);
-
+		}
 		wake_up_interruptible(&port->state->port.delta_msr_wait);
 	}
 
@@ -1517,6 +1562,7 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir)
 	struct uart_8250_port *up =
 		container_of(port, struct uart_8250_port, port);
 
+	DEBUG_SERIAL(&up->port, "irq, iir %02x \n", iir);
 	if (iir & UART_IIR_NO_INT)
 		return 0;
 
@@ -1525,6 +1571,7 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir)
 	status = serial_port_in(port, UART_LSR);
 
 	DEBUG_INTR("status = %x...", status);
+	DEBUG_SERIAL(&up->port, "handle irq, lsr 0x%02x\n", status);
 
 	if (status & (UART_LSR_DR | UART_LSR_BI))
 		status = serial8250_rx_chars(up, status);
@@ -1565,9 +1612,7 @@ static irqreturn_t serial8250_interrupt(int irq, void *dev_id)
 	int pass_counter = 0, handled = 0;
 
 	DEBUG_INTR("serial8250_interrupt(%d)...", irq);
-
 	spin_lock(&i->lock);
-
 	l = i->head;
 	do {
 		struct uart_8250_port *up;
@@ -1579,8 +1624,19 @@ static irqreturn_t serial8250_interrupt(int irq, void *dev_id)
 		if (port->handle_irq(port)) {
 			handled = 1;
 			end = NULL;
-		} else if (end == NULL)
+		} else if (end == NULL) {
+			/*
+			 * modified by yemao, 2011-12-1 13:31:57
+			 * if report to up layer that this irq event no handled
+			 * there will be an error irq state to cause
+			 * console mess.
+			 */
+			if (handled != 1) {
+				printk(KERN_ERR ">>> no handle, treat it handle over, iir %02x\n", iir);
+				handled = 1;
+			}
 			end = l;
+		}
 
 		l = l->next;
 
@@ -1787,6 +1843,7 @@ static unsigned int serial8250_get_mctrl(struct uart_port *port)
 
 	status = serial8250_modem_status(up);
 
+	DEBUG_SERIAL(port, "serial8250_get_mctrl, mcr 0x%x\n", status);
 	ret = 0;
 	if (status & UART_MSR_DCD)
 		ret |= TIOCM_CAR;
@@ -1816,9 +1873,14 @@ static void serial8250_set_mctrl(struct uart_port *port, unsigned int mctrl)
 	if (mctrl & TIOCM_LOOP)
 		mcr |= UART_MCR_LOOP;
 
+	DEBUG_SERIAL(port, "serial8250_set_mctrl, ncr %02x\n", mcr);
 	mcr = (mcr & up->mcr_mask) | up->mcr_force | up->mcr;
+	DEBUG_SERIAL(port, "serial8250_set_mctrl, ncr %02x\n", mcr);
 
 	serial_port_out(port, UART_MCR, mcr);
+	DEBUG_SERIAL(port, "serial8250_set_mctrl over mctrl %02x up->mcr %02x: lcr %02x mcr %02x fcr %02x ier %02x\n",
+		     mctrl, up->mcr, serial_inp(up, UART_LCR), serial_inp(up, UART_MCR),
+		     serial_inp(up, UART_FCR), serial_inp(up, UART_IER));
 }
 
 static void serial8250_break_ctl(struct uart_port *port, int break_state)
@@ -1843,6 +1905,7 @@ static void wait_for_xmitr(struct uart_8250_port *up, int bits)
 {
 	unsigned int status, tmout = 10000;
 
+	DEBUG_SERIAL(&up->port, "wait_for_xmitr\n");
 	/* Wait up to 10ms for the character(s) to be sent. */
 	for (;;) {
 		status = serial_in(up, UART_LSR);
@@ -1932,6 +1995,7 @@ static int serial8250_startup(struct uart_port *port)
 	unsigned char lsr, iir;
 	int retval;
 
+	DEBUG_SERIAL(port, "serial8250_startup\n");
 	port->fifosize = uart_config[up->port.type].fifo_size;
 	up->tx_loadsz = uart_config[up->port.type].tx_loadsz;
 	up->capabilities = uart_config[up->port.type].flags;
@@ -2017,8 +2081,10 @@ static int serial8250_startup(struct uart_port *port)
 		 * allow register changes to become visible.
 		 */
 		spin_lock_irqsave(&port->lock, flags);
-		if (up->port.irqflags & IRQF_SHARED)
+		if (up->port.irqflags & IRQF_SHARED) {
+			DEBUG_SERIAL(port, "serial8250_startup, disable irq\n");
 			disable_irq_nosync(port->irq);
+		}
 
 		wait_for_xmitr(up, UART_LSR_THRE);
 		serial_port_out_sync(port, UART_IER, UART_IER_THRI);
@@ -2030,7 +2096,8 @@ static int serial8250_startup(struct uart_port *port)
 		iir = serial_port_in(port, UART_IIR);
 		serial_port_out(port, UART_IER, 0);
 
-		if (port->irqflags & IRQF_SHARED)
+		if (port->irqflags & IRQF_SHARED) {
+			DEBUG_SERIAL(port, "serial8250_startup, enable irq\n");
 			enable_irq(port->irq);
 		spin_unlock_irqrestore(&port->lock, flags);
 
@@ -2044,6 +2111,8 @@ static int serial8250_startup(struct uart_port *port)
 			up->bugs |= UART_BUG_THRE;
 			pr_debug("ttyS%d - using backup timer\n",
 				 serial_index(port));
+			DEBUG_SERIAL(&up->port, "ttyS%d - using backup timer\n",
+				 serial_index(port));
 		}
 	}
 
@@ -2075,6 +2144,7 @@ static int serial8250_startup(struct uart_port *port)
 	/*
 	 * Now, initialize the UART
 	 */
+	DEBUG_SERIAL(port, "now real to initialize this UART\n");
 	serial_port_out(port, UART_LCR, UART_LCR_WLEN8);
 
 	spin_lock_irqsave(&port->lock, flags);
@@ -2156,6 +2226,9 @@ dont_test_tx_en:
 		inb_p(icp);
 	}
 
+	DEBUG_SERIAL(&up->port, "serial8250_startup over: lcr %02x mcr %02x fcr %02x ier %02x\n",
+                            serial_inp(up, UART_LCR), serial_inp(up, UART_MCR), 
+                            serial_inp(up, UART_FCR), serial_inp(up, UART_IER));
 	return 0;
 }
 
@@ -2165,6 +2238,7 @@ static void serial8250_shutdown(struct uart_port *port)
 		container_of(port, struct uart_8250_port, port);
 	unsigned long flags;
 
+	DEBUG_SERIAL(&up->port, "serial8250_shutdown\n");
 	/*
 	 * Disable interrupts from this port
 	 */
@@ -2225,6 +2299,7 @@ static unsigned int serial8250_get_divisor(struct uart_port *port, unsigned int
 	else
 		quot = uart_get_divisor(port, baud);
 
+	DEBUG_SERIAL(port, "serial8250_get_divisor: %d\n", quot);
 	return quot;
 }
 
@@ -2238,28 +2313,40 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	unsigned long flags;
 	unsigned int baud, quot;
 
+	DEBUG_SERIAL(&up->port, "serial8250_do_set_termios\n");
+
 	switch (termios->c_cflag & CSIZE) {
 	case CS5:
+	DEBUG_SERIAL(&up->port, "UART_LCR_WLEN5\n");
 		cval = UART_LCR_WLEN5;
 		break;
 	case CS6:
+	DEBUG_SERIAL(&up->port, "UART_LCR_WLEN6\n");
 		cval = UART_LCR_WLEN6;
 		break;
 	case CS7:
+	DEBUG_SERIAL(&up->port, "UART_LCR_WLEN7\n");
 		cval = UART_LCR_WLEN7;
 		break;
 	default:
 	case CS8:
+	DEBUG_SERIAL(&up->port, "UART_LCR_WLEN8\n");
 		cval = UART_LCR_WLEN8;
 		break;
 	}
 
-	if (termios->c_cflag & CSTOPB)
+	if (termios->c_cflag & CSTOPB) {
+		DEBUG_SERIAL(&up->port, "UART_LCR_STOP\n");
 		cval |= UART_LCR_STOP;
-	if (termios->c_cflag & PARENB)
+	}
+	if (termios->c_cflag & PARENB) {
+		DEBUG_SERIAL(&up->port, "UART_LCR_PARITY enb\n");
 		cval |= UART_LCR_PARITY;
-	if (!(termios->c_cflag & PARODD))
+	}
+	if (!(termios->c_cflag & PARODD)) {
+		DEBUG_SERIAL(&up->port, "UART_LCR_PARITY even\n");
 		cval |= UART_LCR_EPAR;
+	}
 #ifdef CMSPAR
 	if (termios->c_cflag & CMSPAR)
 		cval |= UART_LCR_SPAR;
@@ -2297,8 +2384,10 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	 */
 	if (up->capabilities & UART_CAP_AFE && port->fifosize >= 32) {
 		up->mcr &= ~UART_MCR_AFE;
-		if (termios->c_cflag & CRTSCTS)
+		if (termios->c_cflag & CRTSCTS) {
+			DEBUG_SERIAL(&up->port, "UART_MCR_AFE enb\n");
 			up->mcr |= UART_MCR_AFE;
+		}
 	}
 
 	/*
@@ -2413,6 +2502,10 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	/* Don't rewrite B0 */
 	if (tty_termios_baud_rate(termios))
 		tty_termios_encode_baud_rate(termios, baud, baud);
+
+	DEBUG_SERIAL(port, "serial8250_do_set_termios over: lcr %02x mcr %02x fcr %02x ier %02x\n",
+                            serial_inp(up, UART_LCR), serial_inp(up, UART_MCR),
+                            serial_inp(up, UART_FCR), serial_inp(up, UART_IER));
 }
 EXPORT_SYMBOL(serial8250_do_set_termios);
 
@@ -2477,6 +2570,7 @@ static int serial8250_request_std_resource(struct uart_8250_port *up)
 	struct uart_port *port = &up->port;
 	int ret = 0;
 
+	DEBUG_SERIAL(port, "serial8250_request_std_resource\n");
 	switch (port->iotype) {
 	case UPIO_AU:
 	case UPIO_TSI:
@@ -2496,6 +2590,7 @@ static int serial8250_request_std_resource(struct uart_8250_port *up)
 				release_mem_region(port->mapbase, size);
 				ret = -ENOMEM;
 			}
+			DEBUG_SERIAL(&up->port, "up->port.membase %p\n", up->port.membase);
 		}
 		break;
 
@@ -2513,6 +2608,7 @@ static void serial8250_release_std_resource(struct uart_8250_port *up)
 	unsigned int size = serial8250_port_size(up);
 	struct uart_port *port = &up->port;
 
+	DEBUG_SERIAL(port, "serial8250_release_std_resource\n");
 	switch (port->iotype) {
 	case UPIO_AU:
 	case UPIO_TSI:
@@ -2575,6 +2671,7 @@ static void serial8250_release_port(struct uart_port *port)
 {
 	struct uart_8250_port *up =
 		container_of(port, struct uart_8250_port, port);
+	DEBUG_SERIAL(&up->port, "serial8250_release_port\n");
 
 	serial8250_release_std_resource(up);
 	if (port->type == PORT_RSA)
@@ -2586,6 +2683,7 @@ static int serial8250_request_port(struct uart_port *port)
 	struct uart_8250_port *up =
 		container_of(port, struct uart_8250_port, port);
 	int ret = 0;
+	DEBUG_SERIAL(&up->port, "serial8250_request_port\n");
 
 	ret = serial8250_request_std_resource(up);
 	if (ret == 0 && port->type == PORT_RSA) {
@@ -2604,6 +2702,7 @@ static void serial8250_config_port(struct uart_port *port, int flags)
 	int probeflags = PROBE_ANY;
 	int ret;
 
+	DEBUG_SERIAL(&up->port, "serial8250_config_port\n");
 	/*
 	 * Find the region that we can probe for.  This in turn
 	 * tells us whether we can probe for the type of port.
@@ -2619,8 +2718,10 @@ static void serial8250_config_port(struct uart_port *port, int flags)
 	if (port->iotype != up->cur_iotype)
 		set_io_from_upio(port);
 
-	if (flags & UART_CONFIG_TYPE)
+	if (flags & UART_CONFIG_TYPE) {
+		DEBUG_SERIAL(&up->port, "to autoconfig\n");
 		autoconfig(up, probeflags);
+	}
 
 	/* if access method is AU, it is a 16550 with a quirk */
 	if (port->type == PORT_16550A && port->iotype == UPIO_AU)
@@ -3179,7 +3280,6 @@ int serial8250_register_port(struct uart_port *port)
 	uart = serial8250_find_match_or_unused(port);
 	if (uart) {
 		uart_remove_one_port(&serial8250_reg, &uart->port);
-
 		uart->port.iobase       = port->iobase;
 		uart->port.membase      = port->membase;
 		uart->port.irq          = port->irq;
diff --git a/drivers/tty/serial/8250/8250.h b/drivers/tty/serial/8250/8250.h
index 2868a1d..5d23bd1 100644
--- a/drivers/tty/serial/8250/8250.h
+++ b/drivers/tty/serial/8250/8250.h
@@ -75,6 +75,8 @@ struct serial8250_config {
 #define UART_BUG_NOMSR	(1 << 2)	/* UART has buggy MSR status bits (Au1x00) */
 #define UART_BUG_THRE	(1 << 3)	/* UART has buggy THRE reassertion */
 
+#define UART_USR        31
+
 #define PROBE_RSA	(1 << 0)
 #define PROBE_ANY	(~0)
 
diff --git a/drivers/tty/serial/8250/8250_sunxi.c b/drivers/tty/serial/8250/8250_sunxi.c
new file mode 100644
index 0000000..7996327
--- /dev/null
+++ b/drivers/tty/serial/8250/8250_sunxi.c
@@ -0,0 +1,318 @@
+/*
+ *  8250_sunxi.c
+ *
+ *  Copyright (C) 1996-2003 Russell King.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/tty.h>
+#include <linux/serial_core.h>
+#include <linux/errno.h>
+#include <linux/ioport.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/init.h>
+
+#include <asm/io.h>
+#include <asm/ecard.h>
+#include <asm/string.h>
+#include <linux/clk.h>
+
+#include <mach/sys_config.h>
+#include <mach/platform.h>
+#include <mach/irqs.h>
+
+#include "8250.h"
+
+#define MAX_PORTS	    8
+static int sw_serial[MAX_PORTS];
+
+#define UART_MSG(fmt...)    printk("[uart]: "fmt)
+/* Register base define */
+#define UART_BASE       (0x01C28000)
+#define UART_BASE_OS    (0x400)
+#define UARTx_BASE(x)   (UART_BASE + (x) * UART_BASE_OS)
+#define RESSIZE(res)    (((res)->end - (res)->start)+1)
+
+struct sw_serial_port {
+    struct uart_port    port;
+    char                name[16];
+    int                 port_no;
+    int                 pin_num;
+    u32                 pio_hdle;
+    struct clk          *clk;
+    u32                 sclk;
+    struct resource     *mmres;
+    u32                 irq;
+    struct platform_device* pdev;
+};
+
+//static void sw_serial_print_reg(struct sw_serial_port *sport)
+//{
+//    int i;
+//
+//    for (i=0; i<32; i+=4)
+//    {
+//        if (!(i&0xf))
+//            eayly_printk("\n0x%08x : ", i);
+//        eayly_printk("%08x ", readl(sport->port.membase + i));
+//    }
+//}
+
+static int sw_serial_get_resource(struct sw_serial_port *sport)
+{
+    char name[16];
+    struct clk *pclk = NULL;
+    char uart_para[16];
+    int ret;
+
+    /* get register base */
+    sport->mmres = platform_get_resource(sport->pdev, IORESOURCE_MEM, 0);
+    if (!sport->mmres) {
+        ret = -ENODEV;
+        goto err_out;
+    }
+
+    /* get clock */
+    pclk = clk_get(&sport->pdev->dev, "apb1");
+    if (IS_ERR(pclk)) {
+        ret = PTR_ERR(pclk);
+        goto iounmap;
+    }
+    sport->sclk = clk_get_rate(pclk);
+    clk_put(pclk);
+
+    sprintf(name, "apb_uart%d", sport->port_no);
+    sport->clk = clk_get(&sport->pdev->dev, name);
+    if (IS_ERR(sport->clk)) {
+        ret = PTR_ERR(sport->clk);
+        goto iounmap;
+    }
+    clk_enable(sport->clk);
+
+    /* get irq */
+    sport->irq = platform_get_irq(sport->pdev, 0);
+    if (sport->irq == 0) {
+        ret = -EINVAL;
+        goto free_pclk;
+    }
+
+    /* get gpio resource */
+    sprintf(uart_para, "uart_para%d", sport->port_no);
+    sport->pio_hdle = gpio_request_ex(uart_para, NULL);
+    if (!sport->pio_hdle) {
+        ret = -EINVAL;
+        goto free_pclk;
+    }
+    return 0;
+
+free_pclk:
+    clk_put(sport->clk);
+iounmap:
+err_out:
+    return ret;
+}
+
+static int sw_serial_put_resource(struct sw_serial_port *sport)
+{
+    clk_disable(sport->clk);
+    clk_put(sport->clk);
+    gpio_release(sport->pio_hdle, 1);
+    return 0;
+}
+
+static int sw_serial_get_config(struct sw_serial_port *sport, u32 uart_id)
+{
+    char uart_para[16] = {0};
+    int ret;
+
+    sprintf(uart_para, "uart_para%d", uart_id);
+    ret = script_parser_fetch(uart_para, "uart_port", &sport->port_no, sizeof(int));
+    if (ret)
+        return -1;
+    if (sport->port_no != uart_id)
+        return -1;
+    ret = script_parser_fetch(uart_para, "uart_type", &sport->pin_num, sizeof(int));
+    if (ret)
+        return -1;
+
+    return 0;
+}
+
+static void
+sw_serial_pm(struct uart_port *port, unsigned int state,
+          unsigned int oldstate)
+{
+    struct sw_serial_port *up = (struct sw_serial_port *)port;
+
+    if (!state)
+        clk_enable(up->clk);
+    else
+        clk_disable(up->clk);
+}
+
+static int __devinit
+sw_serial_probe(struct platform_device *dev)
+{
+    struct sw_serial_port *sport;
+	int ret;
+
+	sport = kzalloc(sizeof(struct sw_serial_port), GFP_KERNEL);
+	if (!sport)
+		return -ENOMEM;
+    sport->port_no  = dev->id;
+    sport->pdev     = dev;
+
+    ret = sw_serial_get_config(sport, dev->id);
+    if (ret) {
+		printk(KERN_ERR "cannot get serial config\n");
+        goto free_dev;
+    }
+
+    ret = sw_serial_get_config(sport, dev->id);
+    if (ret) {
+        printk(KERN_ERR "Failed to get config information\n");
+        goto free_dev;
+    }
+
+    ret = sw_serial_get_resource(sport);
+    if (ret) {
+        printk(KERN_ERR "Failed to get resource\n");
+        goto free_dev;
+    }
+    platform_set_drvdata(dev, sport);
+
+    sport->port.irq     = sport->irq;
+    sport->port.fifosize= 64;
+	sport->port.regshift= 2;
+    sport->port.iotype  = UPIO_DWAPB32;
+    sport->port.flags   = UPF_IOREMAP | UPF_BOOT_AUTOCONF;
+    sport->port.uartclk = sport->sclk;
+    sport->port.pm      = sw_serial_pm;
+    sport->port.dev     = &dev->dev;
+
+    sport->port.mapbase = sport->mmres->start;
+    sw_serial[sport->port_no] = serial8250_register_port(&sport->port);
+    UART_MSG("serial probe %d, membase %p irq %d mapbase 0x%08x\n",
+             dev->id, sport->port.membase, sport->port.irq, sport->port.mapbase);
+
+	return 0;
+free_dev:
+    kfree(sport);
+    sport = NULL;
+    return ret;
+}
+
+static int __devexit sw_serial_remove(struct platform_device *dev)
+{
+    struct sw_serial_port *sport = platform_get_drvdata(dev);
+
+	UART_MSG("serial remove\n");
+	serial8250_unregister_port(sw_serial[sport->port_no]);
+	sw_serial[sport->port_no] = 0;
+	sw_serial_put_resource(sport);
+
+	return 0;
+}
+
+static struct platform_driver sw_serial_driver = {
+    .probe  = sw_serial_probe,
+    .remove = sw_serial_remove,
+    .driver = {
+        .name    = "sunxi-uart",
+        .owner    = THIS_MODULE,
+    },
+};
+
+static struct resource sw_uart_res[8][2] = {
+    {/* uart0 resource */
+        {.start = UARTx_BASE(0),      .end = UARTx_BASE(0) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART0, .end = SW_INT_IRQNO_UART0,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+    {/* uart1 resource */
+        {.start = UARTx_BASE(1),      .end = UARTx_BASE(1) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART1, .end = SW_INT_IRQNO_UART1,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+    {/* uart2 resource */
+        {.start = UARTx_BASE(2),      .end = UARTx_BASE(2) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART2, .end = SW_INT_IRQNO_UART2,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+    {/* uart3 resource */
+        {.start = UARTx_BASE(3),      .end = UARTx_BASE(3) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART3, .end = SW_INT_IRQNO_UART3,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+    {/* uart4 resource */
+        {.start = UARTx_BASE(4),      .end = UARTx_BASE(4) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART4, .end = SW_INT_IRQNO_UART4,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+    {/* uart5 resource */
+        {.start = UARTx_BASE(5),      .end = UARTx_BASE(5) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART5, .end = SW_INT_IRQNO_UART5,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+    {/* uart6 resource */
+        {.start = UARTx_BASE(6),      .end = UARTx_BASE(6) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART6, .end = SW_INT_IRQNO_UART6,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+    {/* uart7 resource */
+        {.start = UARTx_BASE(7),      .end = UARTx_BASE(7) + UART_BASE_OS, .flags = IORESOURCE_MEM}, /*base*/
+        {.start = SW_INT_IRQNO_UART7, .end = SW_INT_IRQNO_UART7,           .flags = IORESOURCE_IRQ}, /*irq */
+    },
+};
+
+struct platform_device sw_uart_dev[] = {
+    [0] = {.name = "sunxi-uart", .id = 0, .num_resources = ARRAY_SIZE(sw_uart_res[0]), .resource = &sw_uart_res[0][0], .dev = {}},
+    [1] = {.name = "sunxi-uart", .id = 1, .num_resources = ARRAY_SIZE(sw_uart_res[1]), .resource = &sw_uart_res[1][0], .dev = {}},
+    [2] = {.name = "sunxi-uart", .id = 2, .num_resources = ARRAY_SIZE(sw_uart_res[2]), .resource = &sw_uart_res[2][0], .dev = {}},
+    [3] = {.name = "sunxi-uart", .id = 3, .num_resources = ARRAY_SIZE(sw_uart_res[3]), .resource = &sw_uart_res[3][0], .dev = {}},
+    [4] = {.name = "sunxi-uart", .id = 4, .num_resources = ARRAY_SIZE(sw_uart_res[4]), .resource = &sw_uart_res[4][0], .dev = {}},
+    [5] = {.name = "sunxi-uart", .id = 5, .num_resources = ARRAY_SIZE(sw_uart_res[5]), .resource = &sw_uart_res[5][0], .dev = {}},
+    [6] = {.name = "sunxi-uart", .id = 6, .num_resources = ARRAY_SIZE(sw_uart_res[6]), .resource = &sw_uart_res[6][0], .dev = {}},
+    [7] = {.name = "sunxi-uart", .id = 7, .num_resources = ARRAY_SIZE(sw_uart_res[7]), .resource = &sw_uart_res[7][0], .dev = {}},
+};
+
+static int uart_used;
+static int __init sw_serial_init(void)
+{
+    int ret;
+    int i;
+    int used = 0;
+    char uart_para[16];
+
+    memset(sw_serial, 0, sizeof(sw_serial));
+    uart_used = 0;
+    for (i=1; i<MAX_PORTS; i++, used=0) {
+        sprintf(uart_para, "uart_para%d", i);
+        ret = script_parser_fetch(uart_para, "uart_used", &used, sizeof(int));
+        if (ret)
+            UART_MSG("failed to get uart%d's used information\n", i);
+        if (used) {
+            uart_used |= 1 << i;
+            platform_device_register(&sw_uart_dev[i]);
+        }
+    }
+
+    if (uart_used) {
+        early_printk("used uart info.: 0x%02x\n", uart_used);
+        ret = platform_driver_register(&sw_serial_driver);
+        return ret;
+    }
+
+	return 0;
+}
+
+static void __exit sw_serial_exit(void)
+{
+    if (uart_used)
+	    platform_driver_unregister(&sw_serial_driver);
+}
+
+MODULE_AUTHOR("Aaron.myeh<leafy.myeh@allwinnertech.com>");
+MODULE_DESCRIPTION("SUNXI 8250-compatible serial port expansion card driver");
+MODULE_LICENSE("GPL");
+
+module_init(sw_serial_init);
+module_exit(sw_serial_exit);
diff --git a/drivers/tty/serial/8250/Kconfig b/drivers/tty/serial/8250/Kconfig
index 591f801..456cf2e 100644
--- a/drivers/tty/serial/8250/Kconfig
+++ b/drivers/tty/serial/8250/Kconfig
@@ -76,6 +76,11 @@ config SERIAL_8250_GSC
 	depends on SERIAL_8250 && GSC
 	default SERIAL_8250
 
+config SERIAL_8250_SUNXI
+	tristate
+	depends on SERIAL_8250 && (ARCH_SUN4I || ARCH_SUN5I)
+	default SERIAL_8250
+
 config SERIAL_8250_PCI
 	tristate "8250/16550 PCI device support" if EXPERT
 	depends on SERIAL_8250 && PCI
diff --git a/drivers/tty/serial/8250/Makefile b/drivers/tty/serial/8250/Makefile
index 867bba7..b939e87 100644
--- a/drivers/tty/serial/8250/Makefile
+++ b/drivers/tty/serial/8250/Makefile
@@ -18,3 +18,4 @@ obj-$(CONFIG_SERIAL_8250_HUB6)		+= 8250_hub6.o
 obj-$(CONFIG_SERIAL_8250_MCA)		+= 8250_mca.o
 obj-$(CONFIG_SERIAL_8250_FSL)		+= 8250_fsl.o
 obj-$(CONFIG_SERIAL_8250_DW)		+= 8250_dw.o
+obj-$(CONFIG_SERIAL_8250_SUNXI)		+= 8250_sunxi.o
-- 
1.8.0

